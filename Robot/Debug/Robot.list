
Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044ec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800467c  0800467c  0000567c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004714  08004714  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004714  08004714  00005714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800471c  0800471c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800471c  0800471c  0000571c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004720  08004720  00005720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004724  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  2000005c  08004780  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08004780  000062dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a593  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b73  00000000  00000000  0001061f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000778  00000000  00000000  00012198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005b1  00000000  00000000  00012910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aff5  00000000  00000000  00012ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b218  00000000  00000000  0002deb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c512  00000000  00000000  000390ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d55e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021fc  00000000  00000000  000d5624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000d7820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004664 	.word	0x08004664

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004664 	.word	0x08004664

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b090      	sub	sp, #64	@ 0x40
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fb59 	bl	800093c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f857 	bl	800033c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 f90b 	bl	80004a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000292:	f000 f8d9 	bl	8000448 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000296:	f000 f8a7 	bl	80003e8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,&rxData,1); // uruchomienie obsługi uart dla bluetooth hc-06
 800029a:	2201      	movs	r2, #1
 800029c:	4922      	ldr	r1, [pc, #136]	@ (8000328 <main+0xa8>)
 800029e:	4823      	ldr	r0, [pc, #140]	@ (800032c <main+0xac>)
 80002a0:	f002 fbdd 	bl	8002a5e <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  detect(detect_states); //fragment kodu do wykrywania linii
 80002a4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 f98d 	bl	80005c8 <detect>


	  	  	          for (int i = 0; i < 5; i++)
 80002ae:	2300      	movs	r3, #0
 80002b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80002b2:	e030      	b.n	8000316 <main+0x96>
	  	  	          {
	  	  	              if (detect_states[i] == GPIO_PIN_SET)
 80002b4:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80002b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80002ba:	4413      	add	r3, r2
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	2b01      	cmp	r3, #1
 80002c0:	d113      	bne.n	80002ea <main+0x6a>
	  	  	              {
	  	  	                  char message[50];
	  	  	                  snprintf(message, sizeof(message), "Wykryto linię %d\r\n", i + 1);
 80002c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80002c4:	3301      	adds	r3, #1
 80002c6:	4638      	mov	r0, r7
 80002c8:	4a19      	ldr	r2, [pc, #100]	@ (8000330 <main+0xb0>)
 80002ca:	2132      	movs	r1, #50	@ 0x32
 80002cc:	f003 fd16 	bl	8003cfc <sniprintf>

	  	  	                  // Wyślij wiadomość przez interfejs UART
	  	  	                  HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80002d0:	463b      	mov	r3, r7
 80002d2:	4618      	mov	r0, r3
 80002d4:	f7ff ff7c 	bl	80001d0 <strlen>
 80002d8:	4603      	mov	r3, r0
 80002da:	b29a      	uxth	r2, r3
 80002dc:	4639      	mov	r1, r7
 80002de:	f04f 33ff 	mov.w	r3, #4294967295
 80002e2:	4814      	ldr	r0, [pc, #80]	@ (8000334 <main+0xb4>)
 80002e4:	f002 fb32 	bl	800294c <HAL_UART_Transmit>
 80002e8:	e012      	b.n	8000310 <main+0x90>
	  	  	              }
	  	  	              else
	  	  	              {
	  	  	                  char message[50];
	  	  	                  snprintf(message, sizeof(message), "Nie wykryto linii %d\r\n", i + 1);
 80002ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80002ec:	3301      	adds	r3, #1
 80002ee:	4638      	mov	r0, r7
 80002f0:	4a11      	ldr	r2, [pc, #68]	@ (8000338 <main+0xb8>)
 80002f2:	2132      	movs	r1, #50	@ 0x32
 80002f4:	f003 fd02 	bl	8003cfc <sniprintf>
	  	  	                  HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80002f8:	463b      	mov	r3, r7
 80002fa:	4618      	mov	r0, r3
 80002fc:	f7ff ff68 	bl	80001d0 <strlen>
 8000300:	4603      	mov	r3, r0
 8000302:	b29a      	uxth	r2, r3
 8000304:	4639      	mov	r1, r7
 8000306:	f04f 33ff 	mov.w	r3, #4294967295
 800030a:	480a      	ldr	r0, [pc, #40]	@ (8000334 <main+0xb4>)
 800030c:	f002 fb1e 	bl	800294c <HAL_UART_Transmit>
	  	  	          for (int i = 0; i < 5; i++)
 8000310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000312:	3301      	adds	r3, #1
 8000314:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000318:	2b04      	cmp	r3, #4
 800031a:	ddcb      	ble.n	80002b4 <main+0x34>
	  	  	              }
	  	  	          }
	  	  	          HAL_Delay(1000);
 800031c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000320:	f000 fb72 	bl	8000a08 <HAL_Delay>
	  detect(detect_states); //fragment kodu do wykrywania linii
 8000324:	e7be      	b.n	80002a4 <main+0x24>
 8000326:	bf00      	nop
 8000328:	20000188 	.word	0x20000188
 800032c:	20000078 	.word	0x20000078
 8000330:	0800467c 	.word	0x0800467c
 8000334:	20000100 	.word	0x20000100
 8000338:	08004690 	.word	0x08004690

0800033c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b09c      	sub	sp, #112	@ 0x70
 8000340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000342:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000346:	2228      	movs	r2, #40	@ 0x28
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f003 fd0a 	bl	8003d64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000350:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]
 8000358:	605a      	str	r2, [r3, #4]
 800035a:	609a      	str	r2, [r3, #8]
 800035c:	60da      	str	r2, [r3, #12]
 800035e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000360:	463b      	mov	r3, r7
 8000362:	2234      	movs	r2, #52	@ 0x34
 8000364:	2100      	movs	r1, #0
 8000366:	4618      	mov	r0, r3
 8000368:	f003 fcfc 	bl	8003d64 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800036c:	2302      	movs	r3, #2
 800036e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000370:	2301      	movs	r3, #1
 8000372:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000374:	2310      	movs	r3, #16
 8000376:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000378:	2302      	movs	r3, #2
 800037a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800037c:	2300      	movs	r3, #0
 800037e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000380:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000384:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000386:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800038a:	4618      	mov	r0, r3
 800038c:	f000 fe8a 	bl	80010a4 <HAL_RCC_OscConfig>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000396:	f000 f97f 	bl	8000698 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800039a:	230f      	movs	r3, #15
 800039c:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800039e:	2302      	movs	r3, #2
 80003a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ac:	2300      	movs	r3, #0
 80003ae:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003b0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80003b4:	2102      	movs	r1, #2
 80003b6:	4618      	mov	r0, r3
 80003b8:	f001 feb2 	bl	8002120 <HAL_RCC_ClockConfig>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80003c2:	f000 f969 	bl	8000698 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80003c6:	2301      	movs	r3, #1
 80003c8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ce:	463b      	mov	r3, r7
 80003d0:	4618      	mov	r0, r3
 80003d2:	f002 f8db 	bl	800258c <HAL_RCCEx_PeriphCLKConfig>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80003dc:	f000 f95c 	bl	8000698 <Error_Handler>
  }
}
 80003e0:	bf00      	nop
 80003e2:	3770      	adds	r7, #112	@ 0x70
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}

080003e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003ec:	4b14      	ldr	r3, [pc, #80]	@ (8000440 <MX_USART1_UART_Init+0x58>)
 80003ee:	4a15      	ldr	r2, [pc, #84]	@ (8000444 <MX_USART1_UART_Init+0x5c>)
 80003f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80003f2:	4b13      	ldr	r3, [pc, #76]	@ (8000440 <MX_USART1_UART_Init+0x58>)
 80003f4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80003f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003fa:	4b11      	ldr	r3, [pc, #68]	@ (8000440 <MX_USART1_UART_Init+0x58>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000400:	4b0f      	ldr	r3, [pc, #60]	@ (8000440 <MX_USART1_UART_Init+0x58>)
 8000402:	2200      	movs	r2, #0
 8000404:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000406:	4b0e      	ldr	r3, [pc, #56]	@ (8000440 <MX_USART1_UART_Init+0x58>)
 8000408:	2200      	movs	r2, #0
 800040a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800040c:	4b0c      	ldr	r3, [pc, #48]	@ (8000440 <MX_USART1_UART_Init+0x58>)
 800040e:	220c      	movs	r2, #12
 8000410:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000412:	4b0b      	ldr	r3, [pc, #44]	@ (8000440 <MX_USART1_UART_Init+0x58>)
 8000414:	2200      	movs	r2, #0
 8000416:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000418:	4b09      	ldr	r3, [pc, #36]	@ (8000440 <MX_USART1_UART_Init+0x58>)
 800041a:	2200      	movs	r2, #0
 800041c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800041e:	4b08      	ldr	r3, [pc, #32]	@ (8000440 <MX_USART1_UART_Init+0x58>)
 8000420:	2200      	movs	r2, #0
 8000422:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000424:	4b06      	ldr	r3, [pc, #24]	@ (8000440 <MX_USART1_UART_Init+0x58>)
 8000426:	2200      	movs	r2, #0
 8000428:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800042a:	4805      	ldr	r0, [pc, #20]	@ (8000440 <MX_USART1_UART_Init+0x58>)
 800042c:	f002 fa40 	bl	80028b0 <HAL_UART_Init>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000436:	f000 f92f 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	20000078 	.word	0x20000078
 8000444:	40013800 	.word	0x40013800

08000448 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800044c:	4b14      	ldr	r3, [pc, #80]	@ (80004a0 <MX_USART2_UART_Init+0x58>)
 800044e:	4a15      	ldr	r2, [pc, #84]	@ (80004a4 <MX_USART2_UART_Init+0x5c>)
 8000450:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000452:	4b13      	ldr	r3, [pc, #76]	@ (80004a0 <MX_USART2_UART_Init+0x58>)
 8000454:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000458:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800045a:	4b11      	ldr	r3, [pc, #68]	@ (80004a0 <MX_USART2_UART_Init+0x58>)
 800045c:	2200      	movs	r2, #0
 800045e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000460:	4b0f      	ldr	r3, [pc, #60]	@ (80004a0 <MX_USART2_UART_Init+0x58>)
 8000462:	2200      	movs	r2, #0
 8000464:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000466:	4b0e      	ldr	r3, [pc, #56]	@ (80004a0 <MX_USART2_UART_Init+0x58>)
 8000468:	2200      	movs	r2, #0
 800046a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800046c:	4b0c      	ldr	r3, [pc, #48]	@ (80004a0 <MX_USART2_UART_Init+0x58>)
 800046e:	220c      	movs	r2, #12
 8000470:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000472:	4b0b      	ldr	r3, [pc, #44]	@ (80004a0 <MX_USART2_UART_Init+0x58>)
 8000474:	2200      	movs	r2, #0
 8000476:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000478:	4b09      	ldr	r3, [pc, #36]	@ (80004a0 <MX_USART2_UART_Init+0x58>)
 800047a:	2200      	movs	r2, #0
 800047c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800047e:	4b08      	ldr	r3, [pc, #32]	@ (80004a0 <MX_USART2_UART_Init+0x58>)
 8000480:	2200      	movs	r2, #0
 8000482:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000484:	4b06      	ldr	r3, [pc, #24]	@ (80004a0 <MX_USART2_UART_Init+0x58>)
 8000486:	2200      	movs	r2, #0
 8000488:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800048a:	4805      	ldr	r0, [pc, #20]	@ (80004a0 <MX_USART2_UART_Init+0x58>)
 800048c:	f002 fa10 	bl	80028b0 <HAL_UART_Init>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000496:	f000 f8ff 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800049a:	bf00      	nop
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	20000100 	.word	0x20000100
 80004a4:	40004400 	.word	0x40004400

080004a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b08a      	sub	sp, #40	@ 0x28
 80004ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ae:	f107 0314 	add.w	r3, r7, #20
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	60da      	str	r2, [r3, #12]
 80004bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004be:	4b3f      	ldr	r3, [pc, #252]	@ (80005bc <MX_GPIO_Init+0x114>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	4a3e      	ldr	r2, [pc, #248]	@ (80005bc <MX_GPIO_Init+0x114>)
 80004c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80004c8:	6153      	str	r3, [r2, #20]
 80004ca:	4b3c      	ldr	r3, [pc, #240]	@ (80005bc <MX_GPIO_Init+0x114>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80004d2:	613b      	str	r3, [r7, #16]
 80004d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004d6:	4b39      	ldr	r3, [pc, #228]	@ (80005bc <MX_GPIO_Init+0x114>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	4a38      	ldr	r2, [pc, #224]	@ (80005bc <MX_GPIO_Init+0x114>)
 80004dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80004e0:	6153      	str	r3, [r2, #20]
 80004e2:	4b36      	ldr	r3, [pc, #216]	@ (80005bc <MX_GPIO_Init+0x114>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ee:	4b33      	ldr	r3, [pc, #204]	@ (80005bc <MX_GPIO_Init+0x114>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	4a32      	ldr	r2, [pc, #200]	@ (80005bc <MX_GPIO_Init+0x114>)
 80004f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004f8:	6153      	str	r3, [r2, #20]
 80004fa:	4b30      	ldr	r3, [pc, #192]	@ (80005bc <MX_GPIO_Init+0x114>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000506:	4b2d      	ldr	r3, [pc, #180]	@ (80005bc <MX_GPIO_Init+0x114>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	4a2c      	ldr	r2, [pc, #176]	@ (80005bc <MX_GPIO_Init+0x114>)
 800050c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000510:	6153      	str	r3, [r2, #20]
 8000512:	4b2a      	ldr	r3, [pc, #168]	@ (80005bc <MX_GPIO_Init+0x114>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000524:	4826      	ldr	r0, [pc, #152]	@ (80005c0 <MX_GPIO_Init+0x118>)
 8000526:	f000 fda5 	bl	8001074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800052a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800052e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000530:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	2300      	movs	r3, #0
 8000538:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800053a:	f107 0314 	add.w	r3, r7, #20
 800053e:	4619      	mov	r1, r3
 8000540:	4820      	ldr	r0, [pc, #128]	@ (80005c4 <MX_GPIO_Init+0x11c>)
 8000542:	f000 fc0d 	bl	8000d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : DETECT5_Pin DETECT1_Pin DETECT2_Pin */
  GPIO_InitStruct.Pin = DETECT5_Pin|DETECT1_Pin|DETECT2_Pin;
 8000546:	f241 4304 	movw	r3, #5124	@ 0x1404
 800054a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800054c:	2300      	movs	r3, #0
 800054e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000550:	2300      	movs	r3, #0
 8000552:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000554:	f107 0314 	add.w	r3, r7, #20
 8000558:	4619      	mov	r1, r3
 800055a:	481a      	ldr	r0, [pc, #104]	@ (80005c4 <MX_GPIO_Init+0x11c>)
 800055c:	f000 fc00 	bl	8000d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000560:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000566:	2301      	movs	r3, #1
 8000568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	2300      	movs	r3, #0
 800056c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056e:	2300      	movs	r3, #0
 8000570:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	4619      	mov	r1, r3
 8000578:	4811      	ldr	r0, [pc, #68]	@ (80005c0 <MX_GPIO_Init+0x118>)
 800057a:	f000 fbf1 	bl	8000d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : DETECT3_Pin */
  GPIO_InitStruct.Pin = DETECT3_Pin;
 800057e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000584:	2300      	movs	r3, #0
 8000586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DETECT3_GPIO_Port, &GPIO_InitStruct);
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	4619      	mov	r1, r3
 8000592:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000596:	f000 fbe3 	bl	8000d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : DETECT4_Pin */
  GPIO_InitStruct.Pin = DETECT4_Pin;
 800059a:	2380      	movs	r3, #128	@ 0x80
 800059c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800059e:	2300      	movs	r3, #0
 80005a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DETECT4_GPIO_Port, &GPIO_InitStruct);
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	4619      	mov	r1, r3
 80005ac:	4804      	ldr	r0, [pc, #16]	@ (80005c0 <MX_GPIO_Init+0x118>)
 80005ae:	f000 fbd7 	bl	8000d60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005b2:	bf00      	nop
 80005b4:	3728      	adds	r7, #40	@ 0x28
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000
 80005c0:	48000400 	.word	0x48000400
 80005c4:	48000800 	.word	0x48000800

080005c8 <detect>:

/* USER CODE BEGIN 4 */
void detect(uint8_t *detect_states) { //wykrywanie linii
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
    detect_states[0] = HAL_GPIO_ReadPin(DETECT1_GPIO_Port, DETECT1_Pin);
 80005d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005d4:	4816      	ldr	r0, [pc, #88]	@ (8000630 <detect+0x68>)
 80005d6:	f000 fd35 	bl	8001044 <HAL_GPIO_ReadPin>
 80005da:	4603      	mov	r3, r0
 80005dc:	461a      	mov	r2, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	701a      	strb	r2, [r3, #0]
    detect_states[1] = HAL_GPIO_ReadPin(DETECT2_GPIO_Port, DETECT2_Pin);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	1c5c      	adds	r4, r3, #1
 80005e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005ea:	4811      	ldr	r0, [pc, #68]	@ (8000630 <detect+0x68>)
 80005ec:	f000 fd2a 	bl	8001044 <HAL_GPIO_ReadPin>
 80005f0:	4603      	mov	r3, r0
 80005f2:	7023      	strb	r3, [r4, #0]
    detect_states[2] = HAL_GPIO_ReadPin(DETECT3_GPIO_Port, DETECT3_Pin);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	1c9c      	adds	r4, r3, #2
 80005f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000600:	f000 fd20 	bl	8001044 <HAL_GPIO_ReadPin>
 8000604:	4603      	mov	r3, r0
 8000606:	7023      	strb	r3, [r4, #0]
    detect_states[3] = HAL_GPIO_ReadPin(DETECT4_GPIO_Port, DETECT4_Pin);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	1cdc      	adds	r4, r3, #3
 800060c:	2180      	movs	r1, #128	@ 0x80
 800060e:	4809      	ldr	r0, [pc, #36]	@ (8000634 <detect+0x6c>)
 8000610:	f000 fd18 	bl	8001044 <HAL_GPIO_ReadPin>
 8000614:	4603      	mov	r3, r0
 8000616:	7023      	strb	r3, [r4, #0]
    detect_states[4] = HAL_GPIO_ReadPin(DETECT5_GPIO_Port, DETECT5_Pin);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	1d1c      	adds	r4, r3, #4
 800061c:	2104      	movs	r1, #4
 800061e:	4804      	ldr	r0, [pc, #16]	@ (8000630 <detect+0x68>)
 8000620:	f000 fd10 	bl	8001044 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	7023      	strb	r3, [r4, #0]
}
 8000628:	bf00      	nop
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	bd90      	pop	{r4, r7, pc}
 8000630:	48000800 	.word	0x48000800
 8000634:	48000400 	.word	0x48000400

08000638 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // funkcja do obsługi bt po uart na podstawie przerwania
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a10      	ldr	r2, [pc, #64]	@ (8000688 <HAL_UART_RxCpltCallback+0x50>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d119      	bne.n	800067e <HAL_UART_RxCpltCallback+0x46>
  {
    if(rxData==78) // Ascii value of 'N' is 78 (N for NO)
 800064a:	4b10      	ldr	r3, [pc, #64]	@ (800068c <HAL_UART_RxCpltCallback+0x54>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b4e      	cmp	r3, #78	@ 0x4e
 8000650:	d106      	bne.n	8000660 <HAL_UART_RxCpltCallback+0x28>
    {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000658:	480d      	ldr	r0, [pc, #52]	@ (8000690 <HAL_UART_RxCpltCallback+0x58>)
 800065a:	f000 fd0b 	bl	8001074 <HAL_GPIO_WritePin>
 800065e:	e009      	b.n	8000674 <HAL_UART_RxCpltCallback+0x3c>
    }
    else if (rxData==89) // Ascii value of 'Y' is 89 (Y for YES)
 8000660:	4b0a      	ldr	r3, [pc, #40]	@ (800068c <HAL_UART_RxCpltCallback+0x54>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b59      	cmp	r3, #89	@ 0x59
 8000666:	d105      	bne.n	8000674 <HAL_UART_RxCpltCallback+0x3c>
    {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000668:	2201      	movs	r2, #1
 800066a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800066e:	4808      	ldr	r0, [pc, #32]	@ (8000690 <HAL_UART_RxCpltCallback+0x58>)
 8000670:	f000 fd00 	bl	8001074 <HAL_GPIO_WritePin>
    }
    HAL_UART_Receive_IT(&huart1,&rxData,1);
 8000674:	2201      	movs	r2, #1
 8000676:	4905      	ldr	r1, [pc, #20]	@ (800068c <HAL_UART_RxCpltCallback+0x54>)
 8000678:	4806      	ldr	r0, [pc, #24]	@ (8000694 <HAL_UART_RxCpltCallback+0x5c>)
 800067a:	f002 f9f0 	bl	8002a5e <HAL_UART_Receive_IT>
  }
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40013800 	.word	0x40013800
 800068c:	20000188 	.word	0x20000188
 8000690:	48000400 	.word	0x48000400
 8000694:	20000078 	.word	0x20000078

08000698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800069c:	b672      	cpsid	i
}
 800069e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <Error_Handler+0x8>

080006a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006aa:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <HAL_MspInit+0x44>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	4a0e      	ldr	r2, [pc, #56]	@ (80006e8 <HAL_MspInit+0x44>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6193      	str	r3, [r2, #24]
 80006b6:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <HAL_MspInit+0x44>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c2:	4b09      	ldr	r3, [pc, #36]	@ (80006e8 <HAL_MspInit+0x44>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	4a08      	ldr	r2, [pc, #32]	@ (80006e8 <HAL_MspInit+0x44>)
 80006c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006cc:	61d3      	str	r3, [r2, #28]
 80006ce:	4b06      	ldr	r3, [pc, #24]	@ (80006e8 <HAL_MspInit+0x44>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006da:	2007      	movs	r0, #7
 80006dc:	f000 fa88 	bl	8000bf0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40021000 	.word	0x40021000

080006ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08c      	sub	sp, #48	@ 0x30
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f4:	f107 031c 	add.w	r3, r7, #28
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a33      	ldr	r2, [pc, #204]	@ (80007d8 <HAL_UART_MspInit+0xec>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d132      	bne.n	8000774 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800070e:	4b33      	ldr	r3, [pc, #204]	@ (80007dc <HAL_UART_MspInit+0xf0>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	4a32      	ldr	r2, [pc, #200]	@ (80007dc <HAL_UART_MspInit+0xf0>)
 8000714:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000718:	6193      	str	r3, [r2, #24]
 800071a:	4b30      	ldr	r3, [pc, #192]	@ (80007dc <HAL_UART_MspInit+0xf0>)
 800071c:	699b      	ldr	r3, [r3, #24]
 800071e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000722:	61bb      	str	r3, [r7, #24]
 8000724:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	4b2d      	ldr	r3, [pc, #180]	@ (80007dc <HAL_UART_MspInit+0xf0>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	4a2c      	ldr	r2, [pc, #176]	@ (80007dc <HAL_UART_MspInit+0xf0>)
 800072c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000730:	6153      	str	r3, [r2, #20]
 8000732:	4b2a      	ldr	r3, [pc, #168]	@ (80007dc <HAL_UART_MspInit+0xf0>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800073a:	617b      	str	r3, [r7, #20]
 800073c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800073e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000744:	2302      	movs	r3, #2
 8000746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800074c:	2303      	movs	r3, #3
 800074e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000750:	2307      	movs	r3, #7
 8000752:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	4619      	mov	r1, r3
 800075a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800075e:	f000 faff 	bl	8000d60 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2100      	movs	r1, #0
 8000766:	2025      	movs	r0, #37	@ 0x25
 8000768:	f000 fa4d 	bl	8000c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800076c:	2025      	movs	r0, #37	@ 0x25
 800076e:	f000 fa66 	bl	8000c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000772:	e02d      	b.n	80007d0 <HAL_UART_MspInit+0xe4>
  else if(huart->Instance==USART2)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a19      	ldr	r2, [pc, #100]	@ (80007e0 <HAL_UART_MspInit+0xf4>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d128      	bne.n	80007d0 <HAL_UART_MspInit+0xe4>
    __HAL_RCC_USART2_CLK_ENABLE();
 800077e:	4b17      	ldr	r3, [pc, #92]	@ (80007dc <HAL_UART_MspInit+0xf0>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	4a16      	ldr	r2, [pc, #88]	@ (80007dc <HAL_UART_MspInit+0xf0>)
 8000784:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000788:	61d3      	str	r3, [r2, #28]
 800078a:	4b14      	ldr	r3, [pc, #80]	@ (80007dc <HAL_UART_MspInit+0xf0>)
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <HAL_UART_MspInit+0xf0>)
 8000798:	695b      	ldr	r3, [r3, #20]
 800079a:	4a10      	ldr	r2, [pc, #64]	@ (80007dc <HAL_UART_MspInit+0xf0>)
 800079c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007a0:	6153      	str	r3, [r2, #20]
 80007a2:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <HAL_UART_MspInit+0xf0>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007ae:	230c      	movs	r3, #12
 80007b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b2:	2302      	movs	r3, #2
 80007b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2300      	movs	r3, #0
 80007bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007be:	2307      	movs	r3, #7
 80007c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	4619      	mov	r1, r3
 80007c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007cc:	f000 fac8 	bl	8000d60 <HAL_GPIO_Init>
}
 80007d0:	bf00      	nop
 80007d2:	3730      	adds	r7, #48	@ 0x30
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40013800 	.word	0x40013800
 80007dc:	40021000 	.word	0x40021000
 80007e0:	40004400 	.word	0x40004400

080007e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <NMI_Handler+0x4>

080007ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f0:	bf00      	nop
 80007f2:	e7fd      	b.n	80007f0 <HardFault_Handler+0x4>

080007f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <MemManage_Handler+0x4>

080007fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <BusFault_Handler+0x4>

08000804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <UsageFault_Handler+0x4>

0800080c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083a:	f000 f8c5 	bl	80009c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000848:	4802      	ldr	r0, [pc, #8]	@ (8000854 <USART1_IRQHandler+0x10>)
 800084a:	f002 f94d 	bl	8002ae8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000078 	.word	0x20000078

08000858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000860:	4a14      	ldr	r2, [pc, #80]	@ (80008b4 <_sbrk+0x5c>)
 8000862:	4b15      	ldr	r3, [pc, #84]	@ (80008b8 <_sbrk+0x60>)
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800086c:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <_sbrk+0x64>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d102      	bne.n	800087a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000874:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <_sbrk+0x64>)
 8000876:	4a12      	ldr	r2, [pc, #72]	@ (80008c0 <_sbrk+0x68>)
 8000878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800087a:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <_sbrk+0x64>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4413      	add	r3, r2
 8000882:	693a      	ldr	r2, [r7, #16]
 8000884:	429a      	cmp	r2, r3
 8000886:	d207      	bcs.n	8000898 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000888:	f003 fa74 	bl	8003d74 <__errno>
 800088c:	4603      	mov	r3, r0
 800088e:	220c      	movs	r2, #12
 8000890:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000892:	f04f 33ff 	mov.w	r3, #4294967295
 8000896:	e009      	b.n	80008ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000898:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <_sbrk+0x64>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800089e:	4b07      	ldr	r3, [pc, #28]	@ (80008bc <_sbrk+0x64>)
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4413      	add	r3, r2
 80008a6:	4a05      	ldr	r2, [pc, #20]	@ (80008bc <_sbrk+0x64>)
 80008a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008aa:	68fb      	ldr	r3, [r7, #12]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3718      	adds	r7, #24
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20004000 	.word	0x20004000
 80008b8:	00000400 	.word	0x00000400
 80008bc:	2000018c 	.word	0x2000018c
 80008c0:	200002e0 	.word	0x200002e0

080008c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008c8:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <SystemInit+0x20>)
 80008ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008ce:	4a05      	ldr	r2, [pc, #20]	@ (80008e4 <SystemInit+0x20>)
 80008d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000920 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80008ec:	f7ff ffea 	bl	80008c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f0:	480c      	ldr	r0, [pc, #48]	@ (8000924 <LoopForever+0x6>)
  ldr r1, =_edata
 80008f2:	490d      	ldr	r1, [pc, #52]	@ (8000928 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f4:	4a0d      	ldr	r2, [pc, #52]	@ (800092c <LoopForever+0xe>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f8:	e002      	b.n	8000900 <LoopCopyDataInit>

080008fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fe:	3304      	adds	r3, #4

08000900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000904:	d3f9      	bcc.n	80008fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000906:	4a0a      	ldr	r2, [pc, #40]	@ (8000930 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000908:	4c0a      	ldr	r4, [pc, #40]	@ (8000934 <LoopForever+0x16>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800090c:	e001      	b.n	8000912 <LoopFillZerobss>

0800090e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000910:	3204      	adds	r2, #4

08000912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000914:	d3fb      	bcc.n	800090e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000916:	f003 fa33 	bl	8003d80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800091a:	f7ff fcb1 	bl	8000280 <main>

0800091e <LoopForever>:

LoopForever:
    b LoopForever
 800091e:	e7fe      	b.n	800091e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000920:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000928:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800092c:	08004724 	.word	0x08004724
  ldr r2, =_sbss
 8000930:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000934:	200002dc 	.word	0x200002dc

08000938 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000938:	e7fe      	b.n	8000938 <ADC1_IRQHandler>
	...

0800093c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000940:	4b08      	ldr	r3, [pc, #32]	@ (8000964 <HAL_Init+0x28>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a07      	ldr	r2, [pc, #28]	@ (8000964 <HAL_Init+0x28>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800094c:	2003      	movs	r0, #3
 800094e:	f000 f94f 	bl	8000bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000952:	2000      	movs	r0, #0
 8000954:	f000 f808 	bl	8000968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000958:	f7ff fea4 	bl	80006a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40022000 	.word	0x40022000

08000968 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000970:	4b12      	ldr	r3, [pc, #72]	@ (80009bc <HAL_InitTick+0x54>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	4b12      	ldr	r3, [pc, #72]	@ (80009c0 <HAL_InitTick+0x58>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	4619      	mov	r1, r3
 800097a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800097e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000982:	fbb2 f3f3 	udiv	r3, r2, r3
 8000986:	4618      	mov	r0, r3
 8000988:	f000 f967 	bl	8000c5a <HAL_SYSTICK_Config>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	e00e      	b.n	80009b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2b0f      	cmp	r3, #15
 800099a:	d80a      	bhi.n	80009b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800099c:	2200      	movs	r2, #0
 800099e:	6879      	ldr	r1, [r7, #4]
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	f000 f92f 	bl	8000c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a8:	4a06      	ldr	r2, [pc, #24]	@ (80009c4 <HAL_InitTick+0x5c>)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80009ae:	2300      	movs	r3, #0
 80009b0:	e000      	b.n	80009b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000000 	.word	0x20000000
 80009c0:	20000008 	.word	0x20000008
 80009c4:	20000004 	.word	0x20000004

080009c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009cc:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <HAL_IncTick+0x20>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <HAL_IncTick+0x24>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4413      	add	r3, r2
 80009d8:	4a04      	ldr	r2, [pc, #16]	@ (80009ec <HAL_IncTick+0x24>)
 80009da:	6013      	str	r3, [r2, #0]
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	20000008 	.word	0x20000008
 80009ec:	20000190 	.word	0x20000190

080009f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80009f4:	4b03      	ldr	r3, [pc, #12]	@ (8000a04 <HAL_GetTick+0x14>)
 80009f6:	681b      	ldr	r3, [r3, #0]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	20000190 	.word	0x20000190

08000a08 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a10:	f7ff ffee 	bl	80009f0 <HAL_GetTick>
 8000a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a20:	d005      	beq.n	8000a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a22:	4b0a      	ldr	r3, [pc, #40]	@ (8000a4c <HAL_Delay+0x44>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	461a      	mov	r2, r3
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a2e:	bf00      	nop
 8000a30:	f7ff ffde 	bl	80009f0 <HAL_GetTick>
 8000a34:	4602      	mov	r2, r0
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d8f7      	bhi.n	8000a30 <HAL_Delay+0x28>
  {
  }
}
 8000a40:	bf00      	nop
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000008 	.word	0x20000008

08000a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a60:	4b0c      	ldr	r3, [pc, #48]	@ (8000a94 <__NVIC_SetPriorityGrouping+0x44>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a82:	4a04      	ldr	r2, [pc, #16]	@ (8000a94 <__NVIC_SetPriorityGrouping+0x44>)
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	60d3      	str	r3, [r2, #12]
}
 8000a88:	bf00      	nop
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a9c:	4b04      	ldr	r3, [pc, #16]	@ (8000ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	0a1b      	lsrs	r3, r3, #8
 8000aa2:	f003 0307 	and.w	r3, r3, #7
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	db0b      	blt.n	8000ade <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	f003 021f 	and.w	r2, r3, #31
 8000acc:	4907      	ldr	r1, [pc, #28]	@ (8000aec <__NVIC_EnableIRQ+0x38>)
 8000ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad2:	095b      	lsrs	r3, r3, #5
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8000ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000e100 	.word	0xe000e100

08000af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	6039      	str	r1, [r7, #0]
 8000afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	db0a      	blt.n	8000b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	490c      	ldr	r1, [pc, #48]	@ (8000b3c <__NVIC_SetPriority+0x4c>)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	0112      	lsls	r2, r2, #4
 8000b10:	b2d2      	uxtb	r2, r2
 8000b12:	440b      	add	r3, r1
 8000b14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b18:	e00a      	b.n	8000b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4908      	ldr	r1, [pc, #32]	@ (8000b40 <__NVIC_SetPriority+0x50>)
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	f003 030f 	and.w	r3, r3, #15
 8000b26:	3b04      	subs	r3, #4
 8000b28:	0112      	lsls	r2, r2, #4
 8000b2a:	b2d2      	uxtb	r2, r2
 8000b2c:	440b      	add	r3, r1
 8000b2e:	761a      	strb	r2, [r3, #24]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000e100 	.word	0xe000e100
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b089      	sub	sp, #36	@ 0x24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	f1c3 0307 	rsb	r3, r3, #7
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	bf28      	it	cs
 8000b62:	2304      	movcs	r3, #4
 8000b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	2b06      	cmp	r3, #6
 8000b6c:	d902      	bls.n	8000b74 <NVIC_EncodePriority+0x30>
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3b03      	subs	r3, #3
 8000b72:	e000      	b.n	8000b76 <NVIC_EncodePriority+0x32>
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	f04f 32ff 	mov.w	r2, #4294967295
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43da      	mvns	r2, r3
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	401a      	ands	r2, r3
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43d9      	mvns	r1, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	4313      	orrs	r3, r2
         );
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3724      	adds	r7, #36	@ 0x24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
	...

08000bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bbc:	d301      	bcc.n	8000bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e00f      	b.n	8000be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bec <SysTick_Config+0x40>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bca:	210f      	movs	r1, #15
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	f7ff ff8e 	bl	8000af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd4:	4b05      	ldr	r3, [pc, #20]	@ (8000bec <SysTick_Config+0x40>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bda:	4b04      	ldr	r3, [pc, #16]	@ (8000bec <SysTick_Config+0x40>)
 8000bdc:	2207      	movs	r2, #7
 8000bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	e000e010 	.word	0xe000e010

08000bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff ff29 	bl	8000a50 <__NVIC_SetPriorityGrouping>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b086      	sub	sp, #24
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	607a      	str	r2, [r7, #4]
 8000c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c18:	f7ff ff3e 	bl	8000a98 <__NVIC_GetPriorityGrouping>
 8000c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	68b9      	ldr	r1, [r7, #8]
 8000c22:	6978      	ldr	r0, [r7, #20]
 8000c24:	f7ff ff8e 	bl	8000b44 <NVIC_EncodePriority>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff ff5d 	bl	8000af0 <__NVIC_SetPriority>
}
 8000c36:	bf00      	nop
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ff31 	bl	8000ab4 <__NVIC_EnableIRQ>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff ffa2 	bl	8000bac <SysTick_Config>
 8000c68:	4603      	mov	r3, r0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d008      	beq.n	8000c96 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2204      	movs	r2, #4
 8000c88:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e020      	b.n	8000cd8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f022 020e 	bic.w	r2, r2, #14
 8000ca4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f022 0201 	bic.w	r2, r2, #1
 8000cb4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000cd6:	2300      	movs	r3, #0
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cec:	2300      	movs	r3, #0
 8000cee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d005      	beq.n	8000d06 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2204      	movs	r2, #4
 8000cfe:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	73fb      	strb	r3, [r7, #15]
 8000d04:	e027      	b.n	8000d56 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f022 020e 	bic.w	r2, r2, #14
 8000d14:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f022 0201 	bic.w	r2, r2, #1
 8000d24:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d2e:	2101      	movs	r1, #1
 8000d30:	fa01 f202 	lsl.w	r2, r1, r2
 8000d34:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d003      	beq.n	8000d56 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	4798      	blx	r3
    } 
  }
  return status;
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b087      	sub	sp, #28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d6e:	e14e      	b.n	800100e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	2101      	movs	r1, #1
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f000 8140 	beq.w	8001008 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f003 0303 	and.w	r3, r3, #3
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d005      	beq.n	8000da0 <HAL_GPIO_Init+0x40>
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f003 0303 	and.w	r3, r3, #3
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d130      	bne.n	8000e02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	2203      	movs	r2, #3
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	68da      	ldr	r2, [r3, #12]
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	091b      	lsrs	r3, r3, #4
 8000dec:	f003 0201 	and.w	r2, r3, #1
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f003 0303 	and.w	r3, r3, #3
 8000e0a:	2b03      	cmp	r3, #3
 8000e0c:	d017      	beq.n	8000e3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	2203      	movs	r2, #3
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f003 0303 	and.w	r3, r3, #3
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d123      	bne.n	8000e92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	08da      	lsrs	r2, r3, #3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3208      	adds	r2, #8
 8000e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	220f      	movs	r2, #15
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	691a      	ldr	r2, [r3, #16]
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	f003 0307 	and.w	r3, r3, #7
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	08da      	lsrs	r2, r3, #3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3208      	adds	r2, #8
 8000e8c:	6939      	ldr	r1, [r7, #16]
 8000e8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 0203 	and.w	r2, r3, #3
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	f000 809a 	beq.w	8001008 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed4:	4b55      	ldr	r3, [pc, #340]	@ (800102c <HAL_GPIO_Init+0x2cc>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	4a54      	ldr	r2, [pc, #336]	@ (800102c <HAL_GPIO_Init+0x2cc>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	6193      	str	r3, [r2, #24]
 8000ee0:	4b52      	ldr	r3, [pc, #328]	@ (800102c <HAL_GPIO_Init+0x2cc>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000eec:	4a50      	ldr	r2, [pc, #320]	@ (8001030 <HAL_GPIO_Init+0x2d0>)
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	089b      	lsrs	r3, r3, #2
 8000ef2:	3302      	adds	r3, #2
 8000ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	f003 0303 	and.w	r3, r3, #3
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	220f      	movs	r2, #15
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f16:	d013      	beq.n	8000f40 <HAL_GPIO_Init+0x1e0>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a46      	ldr	r2, [pc, #280]	@ (8001034 <HAL_GPIO_Init+0x2d4>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d00d      	beq.n	8000f3c <HAL_GPIO_Init+0x1dc>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a45      	ldr	r2, [pc, #276]	@ (8001038 <HAL_GPIO_Init+0x2d8>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d007      	beq.n	8000f38 <HAL_GPIO_Init+0x1d8>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a44      	ldr	r2, [pc, #272]	@ (800103c <HAL_GPIO_Init+0x2dc>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d101      	bne.n	8000f34 <HAL_GPIO_Init+0x1d4>
 8000f30:	2303      	movs	r3, #3
 8000f32:	e006      	b.n	8000f42 <HAL_GPIO_Init+0x1e2>
 8000f34:	2305      	movs	r3, #5
 8000f36:	e004      	b.n	8000f42 <HAL_GPIO_Init+0x1e2>
 8000f38:	2302      	movs	r3, #2
 8000f3a:	e002      	b.n	8000f42 <HAL_GPIO_Init+0x1e2>
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e000      	b.n	8000f42 <HAL_GPIO_Init+0x1e2>
 8000f40:	2300      	movs	r3, #0
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	f002 0203 	and.w	r2, r2, #3
 8000f48:	0092      	lsls	r2, r2, #2
 8000f4a:	4093      	lsls	r3, r2
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f52:	4937      	ldr	r1, [pc, #220]	@ (8001030 <HAL_GPIO_Init+0x2d0>)
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	089b      	lsrs	r3, r3, #2
 8000f58:	3302      	adds	r3, #2
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f60:	4b37      	ldr	r3, [pc, #220]	@ (8001040 <HAL_GPIO_Init+0x2e0>)
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f84:	4a2e      	ldr	r2, [pc, #184]	@ (8001040 <HAL_GPIO_Init+0x2e0>)
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001040 <HAL_GPIO_Init+0x2e0>)
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fae:	4a24      	ldr	r2, [pc, #144]	@ (8001040 <HAL_GPIO_Init+0x2e0>)
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fb4:	4b22      	ldr	r3, [pc, #136]	@ (8001040 <HAL_GPIO_Init+0x2e0>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fd8:	4a19      	ldr	r2, [pc, #100]	@ (8001040 <HAL_GPIO_Init+0x2e0>)
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fde:	4b18      	ldr	r3, [pc, #96]	@ (8001040 <HAL_GPIO_Init+0x2e0>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001002:	4a0f      	ldr	r2, [pc, #60]	@ (8001040 <HAL_GPIO_Init+0x2e0>)
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	3301      	adds	r3, #1
 800100c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	fa22 f303 	lsr.w	r3, r2, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	f47f aea9 	bne.w	8000d70 <HAL_GPIO_Init+0x10>
  }
}
 800101e:	bf00      	nop
 8001020:	bf00      	nop
 8001022:	371c      	adds	r7, #28
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	40021000 	.word	0x40021000
 8001030:	40010000 	.word	0x40010000
 8001034:	48000400 	.word	0x48000400
 8001038:	48000800 	.word	0x48000800
 800103c:	48000c00 	.word	0x48000c00
 8001040:	40010400 	.word	0x40010400

08001044 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	691a      	ldr	r2, [r3, #16]
 8001054:	887b      	ldrh	r3, [r7, #2]
 8001056:	4013      	ands	r3, r2
 8001058:	2b00      	cmp	r3, #0
 800105a:	d002      	beq.n	8001062 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800105c:	2301      	movs	r3, #1
 800105e:	73fb      	strb	r3, [r7, #15]
 8001060:	e001      	b.n	8001066 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001062:	2300      	movs	r3, #0
 8001064:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001066:	7bfb      	ldrb	r3, [r7, #15]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	807b      	strh	r3, [r7, #2]
 8001080:	4613      	mov	r3, r2
 8001082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001084:	787b      	ldrb	r3, [r7, #1]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800108a:	887a      	ldrh	r2, [r7, #2]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001090:	e002      	b.n	8001098 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001092:	887a      	ldrh	r2, [r7, #2]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010b4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d102      	bne.n	80010ca <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	f001 b823 	b.w	8002110 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 817d 	beq.w	80013da <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010e0:	4bbc      	ldr	r3, [pc, #752]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 030c 	and.w	r3, r3, #12
 80010e8:	2b04      	cmp	r3, #4
 80010ea:	d00c      	beq.n	8001106 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010ec:	4bb9      	ldr	r3, [pc, #740]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 030c 	and.w	r3, r3, #12
 80010f4:	2b08      	cmp	r3, #8
 80010f6:	d15c      	bne.n	80011b2 <HAL_RCC_OscConfig+0x10e>
 80010f8:	4bb6      	ldr	r3, [pc, #728]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001104:	d155      	bne.n	80011b2 <HAL_RCC_OscConfig+0x10e>
 8001106:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800110a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001112:	fa93 f3a3 	rbit	r3, r3
 8001116:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800111a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800111e:	fab3 f383 	clz	r3, r3
 8001122:	b2db      	uxtb	r3, r3
 8001124:	095b      	lsrs	r3, r3, #5
 8001126:	b2db      	uxtb	r3, r3
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b01      	cmp	r3, #1
 8001130:	d102      	bne.n	8001138 <HAL_RCC_OscConfig+0x94>
 8001132:	4ba8      	ldr	r3, [pc, #672]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	e015      	b.n	8001164 <HAL_RCC_OscConfig+0xc0>
 8001138:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800113c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001140:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001144:	fa93 f3a3 	rbit	r3, r3
 8001148:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800114c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001150:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001154:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001158:	fa93 f3a3 	rbit	r3, r3
 800115c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001160:	4b9c      	ldr	r3, [pc, #624]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 8001162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001164:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001168:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800116c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001170:	fa92 f2a2 	rbit	r2, r2
 8001174:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001178:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800117c:	fab2 f282 	clz	r2, r2
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	f042 0220 	orr.w	r2, r2, #32
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	f002 021f 	and.w	r2, r2, #31
 800118c:	2101      	movs	r1, #1
 800118e:	fa01 f202 	lsl.w	r2, r1, r2
 8001192:	4013      	ands	r3, r2
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 811f 	beq.w	80013d8 <HAL_RCC_OscConfig+0x334>
 800119a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800119e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f040 8116 	bne.w	80013d8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	f000 bfaf 	b.w	8002110 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011c2:	d106      	bne.n	80011d2 <HAL_RCC_OscConfig+0x12e>
 80011c4:	4b83      	ldr	r3, [pc, #524]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a82      	ldr	r2, [pc, #520]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 80011ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011ce:	6013      	str	r3, [r2, #0]
 80011d0:	e036      	b.n	8001240 <HAL_RCC_OscConfig+0x19c>
 80011d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10c      	bne.n	80011fc <HAL_RCC_OscConfig+0x158>
 80011e2:	4b7c      	ldr	r3, [pc, #496]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a7b      	ldr	r2, [pc, #492]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 80011e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	4b79      	ldr	r3, [pc, #484]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a78      	ldr	r2, [pc, #480]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 80011f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	e021      	b.n	8001240 <HAL_RCC_OscConfig+0x19c>
 80011fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001200:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800120c:	d10c      	bne.n	8001228 <HAL_RCC_OscConfig+0x184>
 800120e:	4b71      	ldr	r3, [pc, #452]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a70      	ldr	r2, [pc, #448]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 8001214:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	4b6e      	ldr	r3, [pc, #440]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a6d      	ldr	r2, [pc, #436]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 8001220:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	e00b      	b.n	8001240 <HAL_RCC_OscConfig+0x19c>
 8001228:	4b6a      	ldr	r3, [pc, #424]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a69      	ldr	r2, [pc, #420]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 800122e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	4b67      	ldr	r3, [pc, #412]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a66      	ldr	r2, [pc, #408]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 800123a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800123e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001240:	4b64      	ldr	r3, [pc, #400]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 8001242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001244:	f023 020f 	bic.w	r2, r3, #15
 8001248:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800124c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	495f      	ldr	r1, [pc, #380]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 8001256:	4313      	orrs	r3, r2
 8001258:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800125a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800125e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d059      	beq.n	800131e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126a:	f7ff fbc1 	bl	80009f0 <HAL_GetTick>
 800126e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001272:	e00a      	b.n	800128a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001274:	f7ff fbbc 	bl	80009f0 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	2b64      	cmp	r3, #100	@ 0x64
 8001282:	d902      	bls.n	800128a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	f000 bf43 	b.w	8002110 <HAL_RCC_OscConfig+0x106c>
 800128a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800128e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001292:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001296:	fa93 f3a3 	rbit	r3, r3
 800129a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800129e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a2:	fab3 f383 	clz	r3, r3
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	095b      	lsrs	r3, r3, #5
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d102      	bne.n	80012bc <HAL_RCC_OscConfig+0x218>
 80012b6:	4b47      	ldr	r3, [pc, #284]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	e015      	b.n	80012e8 <HAL_RCC_OscConfig+0x244>
 80012bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012c0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80012c8:	fa93 f3a3 	rbit	r3, r3
 80012cc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80012d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012d4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80012d8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80012dc:	fa93 f3a3 	rbit	r3, r3
 80012e0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80012e4:	4b3b      	ldr	r3, [pc, #236]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 80012e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80012ec:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80012f0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80012f4:	fa92 f2a2 	rbit	r2, r2
 80012f8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80012fc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001300:	fab2 f282 	clz	r2, r2
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	f042 0220 	orr.w	r2, r2, #32
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	f002 021f 	and.w	r2, r2, #31
 8001310:	2101      	movs	r1, #1
 8001312:	fa01 f202 	lsl.w	r2, r1, r2
 8001316:	4013      	ands	r3, r2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d0ab      	beq.n	8001274 <HAL_RCC_OscConfig+0x1d0>
 800131c:	e05d      	b.n	80013da <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131e:	f7ff fb67 	bl	80009f0 <HAL_GetTick>
 8001322:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001326:	e00a      	b.n	800133e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001328:	f7ff fb62 	bl	80009f0 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b64      	cmp	r3, #100	@ 0x64
 8001336:	d902      	bls.n	800133e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	f000 bee9 	b.w	8002110 <HAL_RCC_OscConfig+0x106c>
 800133e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001342:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001346:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800134a:	fa93 f3a3 	rbit	r3, r3
 800134e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001352:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001356:	fab3 f383 	clz	r3, r3
 800135a:	b2db      	uxtb	r3, r3
 800135c:	095b      	lsrs	r3, r3, #5
 800135e:	b2db      	uxtb	r3, r3
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b01      	cmp	r3, #1
 8001368:	d102      	bne.n	8001370 <HAL_RCC_OscConfig+0x2cc>
 800136a:	4b1a      	ldr	r3, [pc, #104]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	e015      	b.n	800139c <HAL_RCC_OscConfig+0x2f8>
 8001370:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001374:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001378:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800137c:	fa93 f3a3 	rbit	r3, r3
 8001380:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001384:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001388:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800138c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001390:	fa93 f3a3 	rbit	r3, r3
 8001394:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001398:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <HAL_RCC_OscConfig+0x330>)
 800139a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800139c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80013a0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80013a4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80013a8:	fa92 f2a2 	rbit	r2, r2
 80013ac:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80013b0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80013b4:	fab2 f282 	clz	r2, r2
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	f042 0220 	orr.w	r2, r2, #32
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	f002 021f 	and.w	r2, r2, #31
 80013c4:	2101      	movs	r1, #1
 80013c6:	fa01 f202 	lsl.w	r2, r1, r2
 80013ca:	4013      	ands	r3, r2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1ab      	bne.n	8001328 <HAL_RCC_OscConfig+0x284>
 80013d0:	e003      	b.n	80013da <HAL_RCC_OscConfig+0x336>
 80013d2:	bf00      	nop
 80013d4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 817d 	beq.w	80016ea <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013f0:	4ba6      	ldr	r3, [pc, #664]	@ (800168c <HAL_RCC_OscConfig+0x5e8>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 030c 	and.w	r3, r3, #12
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d00b      	beq.n	8001414 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013fc:	4ba3      	ldr	r3, [pc, #652]	@ (800168c <HAL_RCC_OscConfig+0x5e8>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 030c 	and.w	r3, r3, #12
 8001404:	2b08      	cmp	r3, #8
 8001406:	d172      	bne.n	80014ee <HAL_RCC_OscConfig+0x44a>
 8001408:	4ba0      	ldr	r3, [pc, #640]	@ (800168c <HAL_RCC_OscConfig+0x5e8>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d16c      	bne.n	80014ee <HAL_RCC_OscConfig+0x44a>
 8001414:	2302      	movs	r3, #2
 8001416:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800141e:	fa93 f3a3 	rbit	r3, r3
 8001422:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001426:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142a:	fab3 f383 	clz	r3, r3
 800142e:	b2db      	uxtb	r3, r3
 8001430:	095b      	lsrs	r3, r3, #5
 8001432:	b2db      	uxtb	r3, r3
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b01      	cmp	r3, #1
 800143c:	d102      	bne.n	8001444 <HAL_RCC_OscConfig+0x3a0>
 800143e:	4b93      	ldr	r3, [pc, #588]	@ (800168c <HAL_RCC_OscConfig+0x5e8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	e013      	b.n	800146c <HAL_RCC_OscConfig+0x3c8>
 8001444:	2302      	movs	r3, #2
 8001446:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800144e:	fa93 f3a3 	rbit	r3, r3
 8001452:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001456:	2302      	movs	r3, #2
 8001458:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800145c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001460:	fa93 f3a3 	rbit	r3, r3
 8001464:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001468:	4b88      	ldr	r3, [pc, #544]	@ (800168c <HAL_RCC_OscConfig+0x5e8>)
 800146a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146c:	2202      	movs	r2, #2
 800146e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001472:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001476:	fa92 f2a2 	rbit	r2, r2
 800147a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800147e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001482:	fab2 f282 	clz	r2, r2
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	f042 0220 	orr.w	r2, r2, #32
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	f002 021f 	and.w	r2, r2, #31
 8001492:	2101      	movs	r1, #1
 8001494:	fa01 f202 	lsl.w	r2, r1, r2
 8001498:	4013      	ands	r3, r2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00a      	beq.n	80014b4 <HAL_RCC_OscConfig+0x410>
 800149e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d002      	beq.n	80014b4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	f000 be2e 	b.w	8002110 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b4:	4b75      	ldr	r3, [pc, #468]	@ (800168c <HAL_RCC_OscConfig+0x5e8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	21f8      	movs	r1, #248	@ 0xf8
 80014ca:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ce:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80014d2:	fa91 f1a1 	rbit	r1, r1
 80014d6:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80014da:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80014de:	fab1 f181 	clz	r1, r1
 80014e2:	b2c9      	uxtb	r1, r1
 80014e4:	408b      	lsls	r3, r1
 80014e6:	4969      	ldr	r1, [pc, #420]	@ (800168c <HAL_RCC_OscConfig+0x5e8>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ec:	e0fd      	b.n	80016ea <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 8088 	beq.w	8001610 <HAL_RCC_OscConfig+0x56c>
 8001500:	2301      	movs	r3, #1
 8001502:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001506:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800150a:	fa93 f3a3 	rbit	r3, r3
 800150e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001512:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001516:	fab3 f383 	clz	r3, r3
 800151a:	b2db      	uxtb	r3, r3
 800151c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001520:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	461a      	mov	r2, r3
 8001528:	2301      	movs	r3, #1
 800152a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff fa60 	bl	80009f0 <HAL_GetTick>
 8001530:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001534:	e00a      	b.n	800154c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001536:	f7ff fa5b 	bl	80009f0 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d902      	bls.n	800154c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	f000 bde2 	b.w	8002110 <HAL_RCC_OscConfig+0x106c>
 800154c:	2302      	movs	r3, #2
 800154e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001552:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001556:	fa93 f3a3 	rbit	r3, r3
 800155a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800155e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001562:	fab3 f383 	clz	r3, r3
 8001566:	b2db      	uxtb	r3, r3
 8001568:	095b      	lsrs	r3, r3, #5
 800156a:	b2db      	uxtb	r3, r3
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b01      	cmp	r3, #1
 8001574:	d102      	bne.n	800157c <HAL_RCC_OscConfig+0x4d8>
 8001576:	4b45      	ldr	r3, [pc, #276]	@ (800168c <HAL_RCC_OscConfig+0x5e8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	e013      	b.n	80015a4 <HAL_RCC_OscConfig+0x500>
 800157c:	2302      	movs	r3, #2
 800157e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001582:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001586:	fa93 f3a3 	rbit	r3, r3
 800158a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800158e:	2302      	movs	r3, #2
 8001590:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001594:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001598:	fa93 f3a3 	rbit	r3, r3
 800159c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80015a0:	4b3a      	ldr	r3, [pc, #232]	@ (800168c <HAL_RCC_OscConfig+0x5e8>)
 80015a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a4:	2202      	movs	r2, #2
 80015a6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80015aa:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80015ae:	fa92 f2a2 	rbit	r2, r2
 80015b2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80015b6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80015ba:	fab2 f282 	clz	r2, r2
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	f042 0220 	orr.w	r2, r2, #32
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	f002 021f 	and.w	r2, r2, #31
 80015ca:	2101      	movs	r1, #1
 80015cc:	fa01 f202 	lsl.w	r2, r1, r2
 80015d0:	4013      	ands	r3, r2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0af      	beq.n	8001536 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d6:	4b2d      	ldr	r3, [pc, #180]	@ (800168c <HAL_RCC_OscConfig+0x5e8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	21f8      	movs	r1, #248	@ 0xf8
 80015ec:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80015f4:	fa91 f1a1 	rbit	r1, r1
 80015f8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80015fc:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001600:	fab1 f181 	clz	r1, r1
 8001604:	b2c9      	uxtb	r1, r1
 8001606:	408b      	lsls	r3, r1
 8001608:	4920      	ldr	r1, [pc, #128]	@ (800168c <HAL_RCC_OscConfig+0x5e8>)
 800160a:	4313      	orrs	r3, r2
 800160c:	600b      	str	r3, [r1, #0]
 800160e:	e06c      	b.n	80016ea <HAL_RCC_OscConfig+0x646>
 8001610:	2301      	movs	r3, #1
 8001612:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001616:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800161a:	fa93 f3a3 	rbit	r3, r3
 800161e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001622:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001626:	fab3 f383 	clz	r3, r3
 800162a:	b2db      	uxtb	r3, r3
 800162c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001630:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	461a      	mov	r2, r3
 8001638:	2300      	movs	r3, #0
 800163a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff f9d8 	bl	80009f0 <HAL_GetTick>
 8001640:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001644:	e00a      	b.n	800165c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001646:	f7ff f9d3 	bl	80009f0 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d902      	bls.n	800165c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	f000 bd5a 	b.w	8002110 <HAL_RCC_OscConfig+0x106c>
 800165c:	2302      	movs	r3, #2
 800165e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001662:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001666:	fa93 f3a3 	rbit	r3, r3
 800166a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800166e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001672:	fab3 f383 	clz	r3, r3
 8001676:	b2db      	uxtb	r3, r3
 8001678:	095b      	lsrs	r3, r3, #5
 800167a:	b2db      	uxtb	r3, r3
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b01      	cmp	r3, #1
 8001684:	d104      	bne.n	8001690 <HAL_RCC_OscConfig+0x5ec>
 8001686:	4b01      	ldr	r3, [pc, #4]	@ (800168c <HAL_RCC_OscConfig+0x5e8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	e015      	b.n	80016b8 <HAL_RCC_OscConfig+0x614>
 800168c:	40021000 	.word	0x40021000
 8001690:	2302      	movs	r3, #2
 8001692:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001696:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800169a:	fa93 f3a3 	rbit	r3, r3
 800169e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80016a2:	2302      	movs	r3, #2
 80016a4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80016a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80016ac:	fa93 f3a3 	rbit	r3, r3
 80016b0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80016b4:	4bc8      	ldr	r3, [pc, #800]	@ (80019d8 <HAL_RCC_OscConfig+0x934>)
 80016b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b8:	2202      	movs	r2, #2
 80016ba:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80016be:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80016c2:	fa92 f2a2 	rbit	r2, r2
 80016c6:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80016ca:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80016ce:	fab2 f282 	clz	r2, r2
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	f042 0220 	orr.w	r2, r2, #32
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	f002 021f 	and.w	r2, r2, #31
 80016de:	2101      	movs	r1, #1
 80016e0:	fa01 f202 	lsl.w	r2, r1, r2
 80016e4:	4013      	ands	r3, r2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1ad      	bne.n	8001646 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 8110 	beq.w	8001920 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001700:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001704:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d079      	beq.n	8001804 <HAL_RCC_OscConfig+0x760>
 8001710:	2301      	movs	r3, #1
 8001712:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001716:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800171a:	fa93 f3a3 	rbit	r3, r3
 800171e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001722:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001726:	fab3 f383 	clz	r3, r3
 800172a:	b2db      	uxtb	r3, r3
 800172c:	461a      	mov	r2, r3
 800172e:	4bab      	ldr	r3, [pc, #684]	@ (80019dc <HAL_RCC_OscConfig+0x938>)
 8001730:	4413      	add	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	461a      	mov	r2, r3
 8001736:	2301      	movs	r3, #1
 8001738:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173a:	f7ff f959 	bl	80009f0 <HAL_GetTick>
 800173e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001742:	e00a      	b.n	800175a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001744:	f7ff f954 	bl	80009f0 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d902      	bls.n	800175a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	f000 bcdb 	b.w	8002110 <HAL_RCC_OscConfig+0x106c>
 800175a:	2302      	movs	r3, #2
 800175c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001760:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001764:	fa93 f3a3 	rbit	r3, r3
 8001768:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800176c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001770:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001774:	2202      	movs	r2, #2
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800177c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	fa93 f2a3 	rbit	r2, r3
 8001786:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800178a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001794:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001798:	2202      	movs	r2, #2
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	fa93 f2a3 	rbit	r2, r3
 80017aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80017b2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b4:	4b88      	ldr	r3, [pc, #544]	@ (80019d8 <HAL_RCC_OscConfig+0x934>)
 80017b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017bc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80017c0:	2102      	movs	r1, #2
 80017c2:	6019      	str	r1, [r3, #0]
 80017c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017c8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	fa93 f1a3 	rbit	r1, r3
 80017d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80017da:	6019      	str	r1, [r3, #0]
  return result;
 80017dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017e0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	fab3 f383 	clz	r3, r3
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	f003 031f 	and.w	r3, r3, #31
 80017f6:	2101      	movs	r1, #1
 80017f8:	fa01 f303 	lsl.w	r3, r1, r3
 80017fc:	4013      	ands	r3, r2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0a0      	beq.n	8001744 <HAL_RCC_OscConfig+0x6a0>
 8001802:	e08d      	b.n	8001920 <HAL_RCC_OscConfig+0x87c>
 8001804:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001808:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800180c:	2201      	movs	r2, #1
 800180e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001810:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001814:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	fa93 f2a3 	rbit	r2, r3
 800181e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001822:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001826:	601a      	str	r2, [r3, #0]
  return result;
 8001828:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800182c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001830:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001832:	fab3 f383 	clz	r3, r3
 8001836:	b2db      	uxtb	r3, r3
 8001838:	461a      	mov	r2, r3
 800183a:	4b68      	ldr	r3, [pc, #416]	@ (80019dc <HAL_RCC_OscConfig+0x938>)
 800183c:	4413      	add	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	461a      	mov	r2, r3
 8001842:	2300      	movs	r3, #0
 8001844:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001846:	f7ff f8d3 	bl	80009f0 <HAL_GetTick>
 800184a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800184e:	e00a      	b.n	8001866 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001850:	f7ff f8ce 	bl	80009f0 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d902      	bls.n	8001866 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	f000 bc55 	b.w	8002110 <HAL_RCC_OscConfig+0x106c>
 8001866:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800186a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800186e:	2202      	movs	r2, #2
 8001870:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001872:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001876:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	fa93 f2a3 	rbit	r2, r3
 8001880:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001884:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800188e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001892:	2202      	movs	r2, #2
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800189a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	fa93 f2a3 	rbit	r2, r3
 80018a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80018b6:	2202      	movs	r2, #2
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018be:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	fa93 f2a3 	rbit	r2, r3
 80018c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018cc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80018d0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d2:	4b41      	ldr	r3, [pc, #260]	@ (80019d8 <HAL_RCC_OscConfig+0x934>)
 80018d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018da:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80018de:	2102      	movs	r1, #2
 80018e0:	6019      	str	r1, [r3, #0]
 80018e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	fa93 f1a3 	rbit	r1, r3
 80018f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018f4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80018f8:	6019      	str	r1, [r3, #0]
  return result;
 80018fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018fe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	fab3 f383 	clz	r3, r3
 8001908:	b2db      	uxtb	r3, r3
 800190a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800190e:	b2db      	uxtb	r3, r3
 8001910:	f003 031f 	and.w	r3, r3, #31
 8001914:	2101      	movs	r1, #1
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	4013      	ands	r3, r2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d197      	bne.n	8001850 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001924:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 81a1 	beq.w	8001c78 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001936:	2300      	movs	r3, #0
 8001938:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800193c:	4b26      	ldr	r3, [pc, #152]	@ (80019d8 <HAL_RCC_OscConfig+0x934>)
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d116      	bne.n	8001976 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001948:	4b23      	ldr	r3, [pc, #140]	@ (80019d8 <HAL_RCC_OscConfig+0x934>)
 800194a:	69db      	ldr	r3, [r3, #28]
 800194c:	4a22      	ldr	r2, [pc, #136]	@ (80019d8 <HAL_RCC_OscConfig+0x934>)
 800194e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001952:	61d3      	str	r3, [r2, #28]
 8001954:	4b20      	ldr	r3, [pc, #128]	@ (80019d8 <HAL_RCC_OscConfig+0x934>)
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800195c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001960:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800196a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800196e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001970:	2301      	movs	r3, #1
 8001972:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001976:	4b1a      	ldr	r3, [pc, #104]	@ (80019e0 <HAL_RCC_OscConfig+0x93c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800197e:	2b00      	cmp	r3, #0
 8001980:	d11a      	bne.n	80019b8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001982:	4b17      	ldr	r3, [pc, #92]	@ (80019e0 <HAL_RCC_OscConfig+0x93c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a16      	ldr	r2, [pc, #88]	@ (80019e0 <HAL_RCC_OscConfig+0x93c>)
 8001988:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800198c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800198e:	f7ff f82f 	bl	80009f0 <HAL_GetTick>
 8001992:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001996:	e009      	b.n	80019ac <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001998:	f7ff f82a 	bl	80009f0 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b64      	cmp	r3, #100	@ 0x64
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e3b1      	b.n	8002110 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ac:	4b0c      	ldr	r3, [pc, #48]	@ (80019e0 <HAL_RCC_OscConfig+0x93c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0ef      	beq.n	8001998 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d10d      	bne.n	80019e4 <HAL_RCC_OscConfig+0x940>
 80019c8:	4b03      	ldr	r3, [pc, #12]	@ (80019d8 <HAL_RCC_OscConfig+0x934>)
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	4a02      	ldr	r2, [pc, #8]	@ (80019d8 <HAL_RCC_OscConfig+0x934>)
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	6213      	str	r3, [r2, #32]
 80019d4:	e03c      	b.n	8001a50 <HAL_RCC_OscConfig+0x9ac>
 80019d6:	bf00      	nop
 80019d8:	40021000 	.word	0x40021000
 80019dc:	10908120 	.word	0x10908120
 80019e0:	40007000 	.word	0x40007000
 80019e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d10c      	bne.n	8001a0e <HAL_RCC_OscConfig+0x96a>
 80019f4:	4bc1      	ldr	r3, [pc, #772]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	4ac0      	ldr	r2, [pc, #768]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 80019fa:	f023 0301 	bic.w	r3, r3, #1
 80019fe:	6213      	str	r3, [r2, #32]
 8001a00:	4bbe      	ldr	r3, [pc, #760]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	4abd      	ldr	r2, [pc, #756]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 8001a06:	f023 0304 	bic.w	r3, r3, #4
 8001a0a:	6213      	str	r3, [r2, #32]
 8001a0c:	e020      	b.n	8001a50 <HAL_RCC_OscConfig+0x9ac>
 8001a0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	2b05      	cmp	r3, #5
 8001a1c:	d10c      	bne.n	8001a38 <HAL_RCC_OscConfig+0x994>
 8001a1e:	4bb7      	ldr	r3, [pc, #732]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	4ab6      	ldr	r2, [pc, #728]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 8001a24:	f043 0304 	orr.w	r3, r3, #4
 8001a28:	6213      	str	r3, [r2, #32]
 8001a2a:	4bb4      	ldr	r3, [pc, #720]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	4ab3      	ldr	r2, [pc, #716]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6213      	str	r3, [r2, #32]
 8001a36:	e00b      	b.n	8001a50 <HAL_RCC_OscConfig+0x9ac>
 8001a38:	4bb0      	ldr	r3, [pc, #704]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	4aaf      	ldr	r2, [pc, #700]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 8001a3e:	f023 0301 	bic.w	r3, r3, #1
 8001a42:	6213      	str	r3, [r2, #32]
 8001a44:	4bad      	ldr	r3, [pc, #692]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	4aac      	ldr	r2, [pc, #688]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 8001a4a:	f023 0304 	bic.w	r3, r3, #4
 8001a4e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 8081 	beq.w	8001b64 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a62:	f7fe ffc5 	bl	80009f0 <HAL_GetTick>
 8001a66:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a6a:	e00b      	b.n	8001a84 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a6c:	f7fe ffc0 	bl	80009f0 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e345      	b.n	8002110 <HAL_RCC_OscConfig+0x106c>
 8001a84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a88:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a94:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	fa93 f2a3 	rbit	r2, r3
 8001a9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aac:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	fa93 f2a3 	rbit	r2, r3
 8001ac2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ac6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001aca:	601a      	str	r2, [r3, #0]
  return result;
 8001acc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ad0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001ad4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad6:	fab3 f383 	clz	r3, r3
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	095b      	lsrs	r3, r3, #5
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	f043 0302 	orr.w	r3, r3, #2
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d102      	bne.n	8001af0 <HAL_RCC_OscConfig+0xa4c>
 8001aea:	4b84      	ldr	r3, [pc, #528]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	e013      	b.n	8001b18 <HAL_RCC_OscConfig+0xa74>
 8001af0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001af8:	2202      	movs	r2, #2
 8001afa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b00:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	fa93 f2a3 	rbit	r2, r3
 8001b0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b0e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	4b79      	ldr	r3, [pc, #484]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 8001b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b18:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b1c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001b20:	2102      	movs	r1, #2
 8001b22:	6011      	str	r1, [r2, #0]
 8001b24:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b28:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001b2c:	6812      	ldr	r2, [r2, #0]
 8001b2e:	fa92 f1a2 	rbit	r1, r2
 8001b32:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b36:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001b3a:	6011      	str	r1, [r2, #0]
  return result;
 8001b3c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b40:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	fab2 f282 	clz	r2, r2
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	f002 021f 	and.w	r2, r2, #31
 8001b56:	2101      	movs	r1, #1
 8001b58:	fa01 f202 	lsl.w	r2, r1, r2
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d084      	beq.n	8001a6c <HAL_RCC_OscConfig+0x9c8>
 8001b62:	e07f      	b.n	8001c64 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b64:	f7fe ff44 	bl	80009f0 <HAL_GetTick>
 8001b68:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b6c:	e00b      	b.n	8001b86 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b6e:	f7fe ff3f 	bl	80009f0 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e2c4      	b.n	8002110 <HAL_RCC_OscConfig+0x106c>
 8001b86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b8a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001b8e:	2202      	movs	r2, #2
 8001b90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b96:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	fa93 f2a3 	rbit	r2, r3
 8001ba0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bae:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bba:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	fa93 f2a3 	rbit	r2, r3
 8001bc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001bcc:	601a      	str	r2, [r3, #0]
  return result;
 8001bce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001bd6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd8:	fab3 f383 	clz	r3, r3
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	095b      	lsrs	r3, r3, #5
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	f043 0302 	orr.w	r3, r3, #2
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d102      	bne.n	8001bf2 <HAL_RCC_OscConfig+0xb4e>
 8001bec:	4b43      	ldr	r3, [pc, #268]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	e013      	b.n	8001c1a <HAL_RCC_OscConfig+0xb76>
 8001bf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c02:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	fa93 f2a3 	rbit	r2, r3
 8001c0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c10:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	4b39      	ldr	r3, [pc, #228]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 8001c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c1e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001c22:	2102      	movs	r1, #2
 8001c24:	6011      	str	r1, [r2, #0]
 8001c26:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c2a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	fa92 f1a2 	rbit	r1, r2
 8001c34:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c38:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001c3c:	6011      	str	r1, [r2, #0]
  return result;
 8001c3e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c42:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	fab2 f282 	clz	r2, r2
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	f002 021f 	and.w	r2, r2, #31
 8001c58:	2101      	movs	r1, #1
 8001c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c5e:	4013      	ands	r3, r2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d184      	bne.n	8001b6e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c64:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d105      	bne.n	8001c78 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c6c:	4b23      	ldr	r3, [pc, #140]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	4a22      	ldr	r2, [pc, #136]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 8001c72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c76:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 8242 	beq.w	800210e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cfc <HAL_RCC_OscConfig+0xc58>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	f000 8213 	beq.w	80020be <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c9c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	69db      	ldr	r3, [r3, #28]
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	f040 8162 	bne.w	8001f6e <HAL_RCC_OscConfig+0xeca>
 8001caa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cae:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001cb2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001cb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cbc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	fa93 f2a3 	rbit	r2, r3
 8001cc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cca:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001cce:	601a      	str	r2, [r3, #0]
  return result;
 8001cd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cd4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001cd8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cda:	fab3 f383 	clz	r3, r3
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ce4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	461a      	mov	r2, r3
 8001cec:	2300      	movs	r3, #0
 8001cee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf0:	f7fe fe7e 	bl	80009f0 <HAL_GetTick>
 8001cf4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf8:	e00c      	b.n	8001d14 <HAL_RCC_OscConfig+0xc70>
 8001cfa:	bf00      	nop
 8001cfc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d00:	f7fe fe76 	bl	80009f0 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e1fd      	b.n	8002110 <HAL_RCC_OscConfig+0x106c>
 8001d14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d18:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001d1c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d26:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	fa93 f2a3 	rbit	r2, r3
 8001d30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d34:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001d38:	601a      	str	r2, [r3, #0]
  return result;
 8001d3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d3e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001d42:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d44:	fab3 f383 	clz	r3, r3
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	095b      	lsrs	r3, r3, #5
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d102      	bne.n	8001d5e <HAL_RCC_OscConfig+0xcba>
 8001d58:	4bb0      	ldr	r3, [pc, #704]	@ (800201c <HAL_RCC_OscConfig+0xf78>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	e027      	b.n	8001dae <HAL_RCC_OscConfig+0xd0a>
 8001d5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d62:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001d66:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d70:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	fa93 f2a3 	rbit	r2, r3
 8001d7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d7e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d88:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001d8c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d96:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	fa93 f2a3 	rbit	r2, r3
 8001da0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	4b9c      	ldr	r3, [pc, #624]	@ (800201c <HAL_RCC_OscConfig+0xf78>)
 8001dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001db2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001db6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001dba:	6011      	str	r1, [r2, #0]
 8001dbc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001dc0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001dc4:	6812      	ldr	r2, [r2, #0]
 8001dc6:	fa92 f1a2 	rbit	r1, r2
 8001dca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001dce:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001dd2:	6011      	str	r1, [r2, #0]
  return result;
 8001dd4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001dd8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	fab2 f282 	clz	r2, r2
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	f042 0220 	orr.w	r2, r2, #32
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	f002 021f 	and.w	r2, r2, #31
 8001dee:	2101      	movs	r1, #1
 8001df0:	fa01 f202 	lsl.w	r2, r1, r2
 8001df4:	4013      	ands	r3, r2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d182      	bne.n	8001d00 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dfa:	4b88      	ldr	r3, [pc, #544]	@ (800201c <HAL_RCC_OscConfig+0xf78>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001e02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001e0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	430b      	orrs	r3, r1
 8001e1c:	497f      	ldr	r1, [pc, #508]	@ (800201c <HAL_RCC_OscConfig+0xf78>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	604b      	str	r3, [r1, #4]
 8001e22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e26:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001e2a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001e2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e34:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	fa93 f2a3 	rbit	r2, r3
 8001e3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e42:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001e46:	601a      	str	r2, [r3, #0]
  return result;
 8001e48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e4c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001e50:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e52:	fab3 f383 	clz	r3, r3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e5c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	461a      	mov	r2, r3
 8001e64:	2301      	movs	r3, #1
 8001e66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e68:	f7fe fdc2 	bl	80009f0 <HAL_GetTick>
 8001e6c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e70:	e009      	b.n	8001e86 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e72:	f7fe fdbd 	bl	80009f0 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e144      	b.n	8002110 <HAL_RCC_OscConfig+0x106c>
 8001e86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e8a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001e8e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e98:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	fa93 f2a3 	rbit	r2, r3
 8001ea2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001eaa:	601a      	str	r2, [r3, #0]
  return result;
 8001eac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eb0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001eb4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eb6:	fab3 f383 	clz	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	095b      	lsrs	r3, r3, #5
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d102      	bne.n	8001ed0 <HAL_RCC_OscConfig+0xe2c>
 8001eca:	4b54      	ldr	r3, [pc, #336]	@ (800201c <HAL_RCC_OscConfig+0xf78>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	e027      	b.n	8001f20 <HAL_RCC_OscConfig+0xe7c>
 8001ed0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ed4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001ed8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001edc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ede:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	fa93 f2a3 	rbit	r2, r3
 8001eec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001efa:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001efe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f08:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	fa93 f2a3 	rbit	r2, r3
 8001f12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f16:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	4b3f      	ldr	r3, [pc, #252]	@ (800201c <HAL_RCC_OscConfig+0xf78>)
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f20:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f24:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001f28:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001f2c:	6011      	str	r1, [r2, #0]
 8001f2e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f32:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	fa92 f1a2 	rbit	r1, r2
 8001f3c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f40:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001f44:	6011      	str	r1, [r2, #0]
  return result;
 8001f46:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f4a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001f4e:	6812      	ldr	r2, [r2, #0]
 8001f50:	fab2 f282 	clz	r2, r2
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	f042 0220 	orr.w	r2, r2, #32
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	f002 021f 	and.w	r2, r2, #31
 8001f60:	2101      	movs	r1, #1
 8001f62:	fa01 f202 	lsl.w	r2, r1, r2
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d082      	beq.n	8001e72 <HAL_RCC_OscConfig+0xdce>
 8001f6c:	e0cf      	b.n	800210e <HAL_RCC_OscConfig+0x106a>
 8001f6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f72:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001f76:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001f7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f80:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	fa93 f2a3 	rbit	r2, r3
 8001f8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f8e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001f92:	601a      	str	r2, [r3, #0]
  return result;
 8001f94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f98:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001f9c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f9e:	fab3 f383 	clz	r3, r3
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001fa8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	461a      	mov	r2, r3
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb4:	f7fe fd1c 	bl	80009f0 <HAL_GetTick>
 8001fb8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fbc:	e009      	b.n	8001fd2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fbe:	f7fe fd17 	bl	80009f0 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e09e      	b.n	8002110 <HAL_RCC_OscConfig+0x106c>
 8001fd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001fda:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	fa93 f2a3 	rbit	r2, r3
 8001fee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ff2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001ff6:	601a      	str	r2, [r3, #0]
  return result;
 8001ff8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ffc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002000:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002002:	fab3 f383 	clz	r3, r3
 8002006:	b2db      	uxtb	r3, r3
 8002008:	095b      	lsrs	r3, r3, #5
 800200a:	b2db      	uxtb	r3, r3
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b01      	cmp	r3, #1
 8002014:	d104      	bne.n	8002020 <HAL_RCC_OscConfig+0xf7c>
 8002016:	4b01      	ldr	r3, [pc, #4]	@ (800201c <HAL_RCC_OscConfig+0xf78>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	e029      	b.n	8002070 <HAL_RCC_OscConfig+0xfcc>
 800201c:	40021000 	.word	0x40021000
 8002020:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002024:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002028:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800202c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002032:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	fa93 f2a3 	rbit	r2, r3
 800203c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002040:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800204a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800204e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002058:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	fa93 f2a3 	rbit	r2, r3
 8002062:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002066:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	4b2b      	ldr	r3, [pc, #172]	@ (800211c <HAL_RCC_OscConfig+0x1078>)
 800206e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002070:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002074:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002078:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800207c:	6011      	str	r1, [r2, #0]
 800207e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002082:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002086:	6812      	ldr	r2, [r2, #0]
 8002088:	fa92 f1a2 	rbit	r1, r2
 800208c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002090:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002094:	6011      	str	r1, [r2, #0]
  return result;
 8002096:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800209a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800209e:	6812      	ldr	r2, [r2, #0]
 80020a0:	fab2 f282 	clz	r2, r2
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	f042 0220 	orr.w	r2, r2, #32
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	f002 021f 	and.w	r2, r2, #31
 80020b0:	2101      	movs	r1, #1
 80020b2:	fa01 f202 	lsl.w	r2, r1, r2
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d180      	bne.n	8001fbe <HAL_RCC_OscConfig+0xf1a>
 80020bc:	e027      	b.n	800210e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d101      	bne.n	80020d2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e01e      	b.n	8002110 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020d2:	4b12      	ldr	r3, [pc, #72]	@ (800211c <HAL_RCC_OscConfig+0x1078>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80020de:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80020e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d10b      	bne.n	800210a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80020f2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80020f6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80020fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002106:	429a      	cmp	r2, r3
 8002108:	d001      	beq.n	800210e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40021000 	.word	0x40021000

08002120 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b09e      	sub	sp, #120	@ 0x78
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e162      	b.n	80023fe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002138:	4b90      	ldr	r3, [pc, #576]	@ (800237c <HAL_RCC_ClockConfig+0x25c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d910      	bls.n	8002168 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002146:	4b8d      	ldr	r3, [pc, #564]	@ (800237c <HAL_RCC_ClockConfig+0x25c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 0207 	bic.w	r2, r3, #7
 800214e:	498b      	ldr	r1, [pc, #556]	@ (800237c <HAL_RCC_ClockConfig+0x25c>)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002156:	4b89      	ldr	r3, [pc, #548]	@ (800237c <HAL_RCC_ClockConfig+0x25c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d001      	beq.n	8002168 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e14a      	b.n	80023fe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002174:	4b82      	ldr	r3, [pc, #520]	@ (8002380 <HAL_RCC_ClockConfig+0x260>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	497f      	ldr	r1, [pc, #508]	@ (8002380 <HAL_RCC_ClockConfig+0x260>)
 8002182:	4313      	orrs	r3, r2
 8002184:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 80dc 	beq.w	800234c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d13c      	bne.n	8002216 <HAL_RCC_ClockConfig+0xf6>
 800219c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021a0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021a4:	fa93 f3a3 	rbit	r3, r3
 80021a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80021aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ac:	fab3 f383 	clz	r3, r3
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	095b      	lsrs	r3, r3, #5
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	f043 0301 	orr.w	r3, r3, #1
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d102      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xa6>
 80021c0:	4b6f      	ldr	r3, [pc, #444]	@ (8002380 <HAL_RCC_ClockConfig+0x260>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	e00f      	b.n	80021e6 <HAL_RCC_ClockConfig+0xc6>
 80021c6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021ca:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021ce:	fa93 f3a3 	rbit	r3, r3
 80021d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80021d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80021da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021dc:	fa93 f3a3 	rbit	r3, r3
 80021e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80021e2:	4b67      	ldr	r3, [pc, #412]	@ (8002380 <HAL_RCC_ClockConfig+0x260>)
 80021e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80021ea:	65ba      	str	r2, [r7, #88]	@ 0x58
 80021ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80021ee:	fa92 f2a2 	rbit	r2, r2
 80021f2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80021f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80021f6:	fab2 f282 	clz	r2, r2
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	f042 0220 	orr.w	r2, r2, #32
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	f002 021f 	and.w	r2, r2, #31
 8002206:	2101      	movs	r1, #1
 8002208:	fa01 f202 	lsl.w	r2, r1, r2
 800220c:	4013      	ands	r3, r2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d17b      	bne.n	800230a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e0f3      	b.n	80023fe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b02      	cmp	r3, #2
 800221c:	d13c      	bne.n	8002298 <HAL_RCC_ClockConfig+0x178>
 800221e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002222:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002224:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002226:	fa93 f3a3 	rbit	r3, r3
 800222a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800222c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222e:	fab3 f383 	clz	r3, r3
 8002232:	b2db      	uxtb	r3, r3
 8002234:	095b      	lsrs	r3, r3, #5
 8002236:	b2db      	uxtb	r3, r3
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b01      	cmp	r3, #1
 8002240:	d102      	bne.n	8002248 <HAL_RCC_ClockConfig+0x128>
 8002242:	4b4f      	ldr	r3, [pc, #316]	@ (8002380 <HAL_RCC_ClockConfig+0x260>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	e00f      	b.n	8002268 <HAL_RCC_ClockConfig+0x148>
 8002248:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800224c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002250:	fa93 f3a3 	rbit	r3, r3
 8002254:	647b      	str	r3, [r7, #68]	@ 0x44
 8002256:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800225a:	643b      	str	r3, [r7, #64]	@ 0x40
 800225c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800225e:	fa93 f3a3 	rbit	r3, r3
 8002262:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002264:	4b46      	ldr	r3, [pc, #280]	@ (8002380 <HAL_RCC_ClockConfig+0x260>)
 8002266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002268:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800226c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800226e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002270:	fa92 f2a2 	rbit	r2, r2
 8002274:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002276:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002278:	fab2 f282 	clz	r2, r2
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	f042 0220 	orr.w	r2, r2, #32
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	f002 021f 	and.w	r2, r2, #31
 8002288:	2101      	movs	r1, #1
 800228a:	fa01 f202 	lsl.w	r2, r1, r2
 800228e:	4013      	ands	r3, r2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d13a      	bne.n	800230a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e0b2      	b.n	80023fe <HAL_RCC_ClockConfig+0x2de>
 8002298:	2302      	movs	r3, #2
 800229a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800229e:	fa93 f3a3 	rbit	r3, r3
 80022a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80022a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a6:	fab3 f383 	clz	r3, r3
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	095b      	lsrs	r3, r3, #5
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d102      	bne.n	80022c0 <HAL_RCC_ClockConfig+0x1a0>
 80022ba:	4b31      	ldr	r3, [pc, #196]	@ (8002380 <HAL_RCC_ClockConfig+0x260>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	e00d      	b.n	80022dc <HAL_RCC_ClockConfig+0x1bc>
 80022c0:	2302      	movs	r3, #2
 80022c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c6:	fa93 f3a3 	rbit	r3, r3
 80022ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80022cc:	2302      	movs	r3, #2
 80022ce:	623b      	str	r3, [r7, #32]
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	fa93 f3a3 	rbit	r3, r3
 80022d6:	61fb      	str	r3, [r7, #28]
 80022d8:	4b29      	ldr	r3, [pc, #164]	@ (8002380 <HAL_RCC_ClockConfig+0x260>)
 80022da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022dc:	2202      	movs	r2, #2
 80022de:	61ba      	str	r2, [r7, #24]
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	fa92 f2a2 	rbit	r2, r2
 80022e6:	617a      	str	r2, [r7, #20]
  return result;
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	fab2 f282 	clz	r2, r2
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	f042 0220 	orr.w	r2, r2, #32
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	f002 021f 	and.w	r2, r2, #31
 80022fa:	2101      	movs	r1, #1
 80022fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002300:	4013      	ands	r3, r2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e079      	b.n	80023fe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800230a:	4b1d      	ldr	r3, [pc, #116]	@ (8002380 <HAL_RCC_ClockConfig+0x260>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f023 0203 	bic.w	r2, r3, #3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	491a      	ldr	r1, [pc, #104]	@ (8002380 <HAL_RCC_ClockConfig+0x260>)
 8002318:	4313      	orrs	r3, r2
 800231a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800231c:	f7fe fb68 	bl	80009f0 <HAL_GetTick>
 8002320:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002322:	e00a      	b.n	800233a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002324:	f7fe fb64 	bl	80009f0 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002332:	4293      	cmp	r3, r2
 8002334:	d901      	bls.n	800233a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e061      	b.n	80023fe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233a:	4b11      	ldr	r3, [pc, #68]	@ (8002380 <HAL_RCC_ClockConfig+0x260>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f003 020c 	and.w	r2, r3, #12
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	429a      	cmp	r2, r3
 800234a:	d1eb      	bne.n	8002324 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800234c:	4b0b      	ldr	r3, [pc, #44]	@ (800237c <HAL_RCC_ClockConfig+0x25c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d214      	bcs.n	8002384 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235a:	4b08      	ldr	r3, [pc, #32]	@ (800237c <HAL_RCC_ClockConfig+0x25c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 0207 	bic.w	r2, r3, #7
 8002362:	4906      	ldr	r1, [pc, #24]	@ (800237c <HAL_RCC_ClockConfig+0x25c>)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	4313      	orrs	r3, r2
 8002368:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800236a:	4b04      	ldr	r3, [pc, #16]	@ (800237c <HAL_RCC_ClockConfig+0x25c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d005      	beq.n	8002384 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e040      	b.n	80023fe <HAL_RCC_ClockConfig+0x2de>
 800237c:	40022000 	.word	0x40022000
 8002380:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d008      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002390:	4b1d      	ldr	r3, [pc, #116]	@ (8002408 <HAL_RCC_ClockConfig+0x2e8>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	491a      	ldr	r1, [pc, #104]	@ (8002408 <HAL_RCC_ClockConfig+0x2e8>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d009      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ae:	4b16      	ldr	r3, [pc, #88]	@ (8002408 <HAL_RCC_ClockConfig+0x2e8>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	4912      	ldr	r1, [pc, #72]	@ (8002408 <HAL_RCC_ClockConfig+0x2e8>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023c2:	f000 f829 	bl	8002418 <HAL_RCC_GetSysClockFreq>
 80023c6:	4601      	mov	r1, r0
 80023c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002408 <HAL_RCC_ClockConfig+0x2e8>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023d0:	22f0      	movs	r2, #240	@ 0xf0
 80023d2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	fa92 f2a2 	rbit	r2, r2
 80023da:	60fa      	str	r2, [r7, #12]
  return result;
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	fab2 f282 	clz	r2, r2
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	40d3      	lsrs	r3, r2
 80023e6:	4a09      	ldr	r2, [pc, #36]	@ (800240c <HAL_RCC_ClockConfig+0x2ec>)
 80023e8:	5cd3      	ldrb	r3, [r2, r3]
 80023ea:	fa21 f303 	lsr.w	r3, r1, r3
 80023ee:	4a08      	ldr	r2, [pc, #32]	@ (8002410 <HAL_RCC_ClockConfig+0x2f0>)
 80023f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80023f2:	4b08      	ldr	r3, [pc, #32]	@ (8002414 <HAL_RCC_ClockConfig+0x2f4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe fab6 	bl	8000968 <HAL_InitTick>
  
  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3778      	adds	r7, #120	@ 0x78
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40021000 	.word	0x40021000
 800240c:	080046a8 	.word	0x080046a8
 8002410:	20000000 	.word	0x20000000
 8002414:	20000004 	.word	0x20000004

08002418 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002418:	b480      	push	{r7}
 800241a:	b08b      	sub	sp, #44	@ 0x2c
 800241c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
 8002422:	2300      	movs	r3, #0
 8002424:	61bb      	str	r3, [r7, #24]
 8002426:	2300      	movs	r3, #0
 8002428:	627b      	str	r3, [r7, #36]	@ 0x24
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800242e:	2300      	movs	r3, #0
 8002430:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002432:	4b29      	ldr	r3, [pc, #164]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f003 030c 	and.w	r3, r3, #12
 800243e:	2b04      	cmp	r3, #4
 8002440:	d002      	beq.n	8002448 <HAL_RCC_GetSysClockFreq+0x30>
 8002442:	2b08      	cmp	r3, #8
 8002444:	d003      	beq.n	800244e <HAL_RCC_GetSysClockFreq+0x36>
 8002446:	e03c      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002448:	4b24      	ldr	r3, [pc, #144]	@ (80024dc <HAL_RCC_GetSysClockFreq+0xc4>)
 800244a:	623b      	str	r3, [r7, #32]
      break;
 800244c:	e03c      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002454:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002458:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	fa92 f2a2 	rbit	r2, r2
 8002460:	607a      	str	r2, [r7, #4]
  return result;
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	fab2 f282 	clz	r2, r2
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	40d3      	lsrs	r3, r2
 800246c:	4a1c      	ldr	r2, [pc, #112]	@ (80024e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800246e:	5cd3      	ldrb	r3, [r2, r3]
 8002470:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002472:	4b19      	ldr	r3, [pc, #100]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	220f      	movs	r2, #15
 800247c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	fa92 f2a2 	rbit	r2, r2
 8002484:	60fa      	str	r2, [r7, #12]
  return result;
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	fab2 f282 	clz	r2, r2
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	40d3      	lsrs	r3, r2
 8002490:	4a14      	ldr	r2, [pc, #80]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002492:	5cd3      	ldrb	r3, [r2, r3]
 8002494:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d008      	beq.n	80024b2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024a0:	4a0e      	ldr	r2, [pc, #56]	@ (80024dc <HAL_RCC_GetSysClockFreq+0xc4>)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	fb02 f303 	mul.w	r3, r2, r3
 80024ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80024b0:	e004      	b.n	80024bc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	4a0c      	ldr	r2, [pc, #48]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80024b6:	fb02 f303 	mul.w	r3, r2, r3
 80024ba:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80024bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024be:	623b      	str	r3, [r7, #32]
      break;
 80024c0:	e002      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024c2:	4b06      	ldr	r3, [pc, #24]	@ (80024dc <HAL_RCC_GetSysClockFreq+0xc4>)
 80024c4:	623b      	str	r3, [r7, #32]
      break;
 80024c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024c8:	6a3b      	ldr	r3, [r7, #32]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	372c      	adds	r7, #44	@ 0x2c
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000
 80024dc:	007a1200 	.word	0x007a1200
 80024e0:	080046c0 	.word	0x080046c0
 80024e4:	080046d0 	.word	0x080046d0
 80024e8:	003d0900 	.word	0x003d0900

080024ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024f0:	4b03      	ldr	r3, [pc, #12]	@ (8002500 <HAL_RCC_GetHCLKFreq+0x14>)
 80024f2:	681b      	ldr	r3, [r3, #0]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	20000000 	.word	0x20000000

08002504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800250a:	f7ff ffef 	bl	80024ec <HAL_RCC_GetHCLKFreq>
 800250e:	4601      	mov	r1, r0
 8002510:	4b0b      	ldr	r3, [pc, #44]	@ (8002540 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002518:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800251c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	fa92 f2a2 	rbit	r2, r2
 8002524:	603a      	str	r2, [r7, #0]
  return result;
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	fab2 f282 	clz	r2, r2
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	40d3      	lsrs	r3, r2
 8002530:	4a04      	ldr	r2, [pc, #16]	@ (8002544 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002532:	5cd3      	ldrb	r3, [r2, r3]
 8002534:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002538:	4618      	mov	r0, r3
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40021000 	.word	0x40021000
 8002544:	080046b8 	.word	0x080046b8

08002548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800254e:	f7ff ffcd 	bl	80024ec <HAL_RCC_GetHCLKFreq>
 8002552:	4601      	mov	r1, r0
 8002554:	4b0b      	ldr	r3, [pc, #44]	@ (8002584 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800255c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002560:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	fa92 f2a2 	rbit	r2, r2
 8002568:	603a      	str	r2, [r7, #0]
  return result;
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	fab2 f282 	clz	r2, r2
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	40d3      	lsrs	r3, r2
 8002574:	4a04      	ldr	r2, [pc, #16]	@ (8002588 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002576:	5cd3      	ldrb	r3, [r2, r3]
 8002578:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800257c:	4618      	mov	r0, r3
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40021000 	.word	0x40021000
 8002588:	080046b8 	.word	0x080046b8

0800258c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b092      	sub	sp, #72	@ 0x48
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800259c:	2300      	movs	r3, #0
 800259e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 80d4 	beq.w	8002758 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025b0:	4b4e      	ldr	r3, [pc, #312]	@ (80026ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10e      	bne.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025bc:	4b4b      	ldr	r3, [pc, #300]	@ (80026ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025be:	69db      	ldr	r3, [r3, #28]
 80025c0:	4a4a      	ldr	r2, [pc, #296]	@ (80026ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025c6:	61d3      	str	r3, [r2, #28]
 80025c8:	4b48      	ldr	r3, [pc, #288]	@ (80026ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025d4:	2301      	movs	r3, #1
 80025d6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025da:	4b45      	ldr	r3, [pc, #276]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d118      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025e6:	4b42      	ldr	r3, [pc, #264]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a41      	ldr	r2, [pc, #260]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025f0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025f2:	f7fe f9fd 	bl	80009f0 <HAL_GetTick>
 80025f6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f8:	e008      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025fa:	f7fe f9f9 	bl	80009f0 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b64      	cmp	r3, #100	@ 0x64
 8002606:	d901      	bls.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e14b      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260c:	4b38      	ldr	r3, [pc, #224]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0f0      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002618:	4b34      	ldr	r3, [pc, #208]	@ (80026ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002620:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 8084 	beq.w	8002732 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002632:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002634:	429a      	cmp	r2, r3
 8002636:	d07c      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002638:	4b2c      	ldr	r3, [pc, #176]	@ (80026ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002640:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002642:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002646:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800264a:	fa93 f3a3 	rbit	r3, r3
 800264e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002652:	fab3 f383 	clz	r3, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	461a      	mov	r2, r3
 800265a:	4b26      	ldr	r3, [pc, #152]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800265c:	4413      	add	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	461a      	mov	r2, r3
 8002662:	2301      	movs	r3, #1
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800266a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800266e:	fa93 f3a3 	rbit	r3, r3
 8002672:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002676:	fab3 f383 	clz	r3, r3
 800267a:	b2db      	uxtb	r3, r3
 800267c:	461a      	mov	r2, r3
 800267e:	4b1d      	ldr	r3, [pc, #116]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002680:	4413      	add	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	461a      	mov	r2, r3
 8002686:	2300      	movs	r3, #0
 8002688:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800268a:	4a18      	ldr	r2, [pc, #96]	@ (80026ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800268c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800268e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d04b      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269a:	f7fe f9a9 	bl	80009f0 <HAL_GetTick>
 800269e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a0:	e00a      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a2:	f7fe f9a5 	bl	80009f0 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e0f5      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80026b8:	2302      	movs	r3, #2
 80026ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026be:	fa93 f3a3 	rbit	r3, r3
 80026c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80026c4:	2302      	movs	r3, #2
 80026c6:	623b      	str	r3, [r7, #32]
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	fa93 f3a3 	rbit	r3, r3
 80026ce:	61fb      	str	r3, [r7, #28]
  return result;
 80026d0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d2:	fab3 f383 	clz	r3, r3
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	095b      	lsrs	r3, r3, #5
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	f043 0302 	orr.w	r3, r3, #2
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d108      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80026e6:	4b01      	ldr	r3, [pc, #4]	@ (80026ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	e00d      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80026ec:	40021000 	.word	0x40021000
 80026f0:	40007000 	.word	0x40007000
 80026f4:	10908100 	.word	0x10908100
 80026f8:	2302      	movs	r3, #2
 80026fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	fa93 f3a3 	rbit	r3, r3
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	4b69      	ldr	r3, [pc, #420]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002708:	2202      	movs	r2, #2
 800270a:	613a      	str	r2, [r7, #16]
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	fa92 f2a2 	rbit	r2, r2
 8002712:	60fa      	str	r2, [r7, #12]
  return result;
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	fab2 f282 	clz	r2, r2
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	f002 021f 	and.w	r2, r2, #31
 8002726:	2101      	movs	r1, #1
 8002728:	fa01 f202 	lsl.w	r2, r1, r2
 800272c:	4013      	ands	r3, r2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0b7      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002732:	4b5e      	ldr	r3, [pc, #376]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	495b      	ldr	r1, [pc, #364]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002740:	4313      	orrs	r3, r2
 8002742:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002744:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002748:	2b01      	cmp	r3, #1
 800274a:	d105      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800274c:	4b57      	ldr	r3, [pc, #348]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	4a56      	ldr	r2, [pc, #344]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002752:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002756:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002764:	4b51      	ldr	r3, [pc, #324]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002768:	f023 0203 	bic.w	r2, r3, #3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	494e      	ldr	r1, [pc, #312]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002772:	4313      	orrs	r3, r2
 8002774:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0320 	and.w	r3, r3, #32
 800277e:	2b00      	cmp	r3, #0
 8002780:	d008      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002782:	4b4a      	ldr	r3, [pc, #296]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002786:	f023 0210 	bic.w	r2, r3, #16
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	4947      	ldr	r1, [pc, #284]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002790:	4313      	orrs	r3, r2
 8002792:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d008      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80027a0:	4b42      	ldr	r3, [pc, #264]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ac:	493f      	ldr	r1, [pc, #252]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d008      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027be:	4b3b      	ldr	r3, [pc, #236]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c2:	f023 0220 	bic.w	r2, r3, #32
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	4938      	ldr	r1, [pc, #224]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d008      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027dc:	4b33      	ldr	r3, [pc, #204]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	4930      	ldr	r1, [pc, #192]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d008      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027fa:	4b2c      	ldr	r3, [pc, #176]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	4929      	ldr	r1, [pc, #164]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002808:	4313      	orrs	r3, r2
 800280a:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002814:	2b00      	cmp	r3, #0
 8002816:	d008      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002818:	4b24      	ldr	r3, [pc, #144]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800281a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800281c:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	4921      	ldr	r1, [pc, #132]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002826:	4313      	orrs	r3, r2
 8002828:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d008      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002836:	4b1d      	ldr	r3, [pc, #116]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	491a      	ldr	r1, [pc, #104]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002844:	4313      	orrs	r3, r2
 8002846:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d008      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002854:	4b15      	ldr	r3, [pc, #84]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002858:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002860:	4912      	ldr	r1, [pc, #72]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002862:	4313      	orrs	r3, r2
 8002864:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d008      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002872:	4b0e      	ldr	r3, [pc, #56]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002876:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800287e:	490b      	ldr	r1, [pc, #44]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002880:	4313      	orrs	r3, r2
 8002882:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d008      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002890:	4b06      	ldr	r3, [pc, #24]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002894:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800289c:	4903      	ldr	r1, [pc, #12]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3748      	adds	r7, #72	@ 0x48
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40021000 	.word	0x40021000

080028b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e040      	b.n	8002944 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d106      	bne.n	80028d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7fd ff0a 	bl	80006ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2224      	movs	r2, #36	@ 0x24
 80028dc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0201 	bic.w	r2, r2, #1
 80028ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 fc00 	bl	80030f4 <UART_SetConfig>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d101      	bne.n	80028fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e022      	b.n	8002944 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002902:	2b00      	cmp	r3, #0
 8002904:	d002      	beq.n	800290c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fd2a 	bl	8003360 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800291a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800292a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0201 	orr.w	r2, r2, #1
 800293a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 fdb1 	bl	80034a4 <UART_CheckIdleState>
 8002942:	4603      	mov	r3, r0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08a      	sub	sp, #40	@ 0x28
 8002950:	af02      	add	r7, sp, #8
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	4613      	mov	r3, r2
 800295a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002960:	2b20      	cmp	r3, #32
 8002962:	d177      	bne.n	8002a54 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d002      	beq.n	8002970 <HAL_UART_Transmit+0x24>
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e070      	b.n	8002a56 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2221      	movs	r2, #33	@ 0x21
 8002980:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002982:	f7fe f835 	bl	80009f0 <HAL_GetTick>
 8002986:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	88fa      	ldrh	r2, [r7, #6]
 800298c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	88fa      	ldrh	r2, [r7, #6]
 8002994:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029a0:	d108      	bne.n	80029b4 <HAL_UART_Transmit+0x68>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d104      	bne.n	80029b4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	61bb      	str	r3, [r7, #24]
 80029b2:	e003      	b.n	80029bc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029bc:	e02f      	b.n	8002a1e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	2200      	movs	r2, #0
 80029c6:	2180      	movs	r1, #128	@ 0x80
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 fe13 	bl	80035f4 <UART_WaitOnFlagUntilTimeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d004      	beq.n	80029de <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2220      	movs	r2, #32
 80029d8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e03b      	b.n	8002a56 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10b      	bne.n	80029fc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	881a      	ldrh	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029f0:	b292      	uxth	r2, r2
 80029f2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	3302      	adds	r3, #2
 80029f8:	61bb      	str	r3, [r7, #24]
 80029fa:	e007      	b.n	8002a0c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	781a      	ldrb	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	3b01      	subs	r3, #1
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1c9      	bne.n	80029be <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2200      	movs	r2, #0
 8002a32:	2140      	movs	r1, #64	@ 0x40
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 fddd 	bl	80035f4 <UART_WaitOnFlagUntilTimeout>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d004      	beq.n	8002a4a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2220      	movs	r2, #32
 8002a44:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e005      	b.n	8002a56 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002a50:	2300      	movs	r3, #0
 8002a52:	e000      	b.n	8002a56 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002a54:	2302      	movs	r3, #2
  }
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3720      	adds	r7, #32
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b08a      	sub	sp, #40	@ 0x28
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	60f8      	str	r0, [r7, #12]
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a72:	2b20      	cmp	r3, #32
 8002a74:	d132      	bne.n	8002adc <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d002      	beq.n	8002a82 <HAL_UART_Receive_IT+0x24>
 8002a7c:	88fb      	ldrh	r3, [r7, #6]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e02b      	b.n	8002ade <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d018      	beq.n	8002acc <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	e853 3f00 	ldrex	r3, [r3]
 8002aa6:	613b      	str	r3, [r7, #16]
   return(result);
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002aae:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab8:	623b      	str	r3, [r7, #32]
 8002aba:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002abc:	69f9      	ldr	r1, [r7, #28]
 8002abe:	6a3a      	ldr	r2, [r7, #32]
 8002ac0:	e841 2300 	strex	r3, r2, [r1]
 8002ac4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1e6      	bne.n	8002a9a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002acc:	88fb      	ldrh	r3, [r7, #6]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	68b9      	ldr	r1, [r7, #8]
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 fdf6 	bl	80036c4 <UART_Start_Receive_IT>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	e000      	b.n	8002ade <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002adc:	2302      	movs	r3, #2
  }
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3728      	adds	r7, #40	@ 0x28
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b0ba      	sub	sp, #232	@ 0xe8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002b12:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002b16:	4013      	ands	r3, r2
 8002b18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002b1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d115      	bne.n	8002b50 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b28:	f003 0320 	and.w	r3, r3, #32
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00f      	beq.n	8002b50 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b34:	f003 0320 	and.w	r3, r3, #32
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d009      	beq.n	8002b50 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 82ab 	beq.w	800309c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	4798      	blx	r3
      }
      return;
 8002b4e:	e2a5      	b.n	800309c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002b50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 8117 	beq.w	8002d88 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002b5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d106      	bne.n	8002b74 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002b66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002b6a:	4b85      	ldr	r3, [pc, #532]	@ (8002d80 <HAL_UART_IRQHandler+0x298>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 810a 	beq.w	8002d88 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d011      	beq.n	8002ba4 <HAL_UART_IRQHandler+0xbc>
 8002b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00b      	beq.n	8002ba4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2201      	movs	r2, #1
 8002b92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b9a:	f043 0201 	orr.w	r2, r3, #1
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d011      	beq.n	8002bd4 <HAL_UART_IRQHandler+0xec>
 8002bb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00b      	beq.n	8002bd4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bca:	f043 0204 	orr.w	r2, r3, #4
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d011      	beq.n	8002c04 <HAL_UART_IRQHandler+0x11c>
 8002be0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00b      	beq.n	8002c04 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2204      	movs	r2, #4
 8002bf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bfa:	f043 0202 	orr.w	r2, r3, #2
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d017      	beq.n	8002c40 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c14:	f003 0320 	and.w	r3, r3, #32
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d105      	bne.n	8002c28 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002c1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c20:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00b      	beq.n	8002c40 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2208      	movs	r2, #8
 8002c2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c36:	f043 0208 	orr.w	r2, r3, #8
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d012      	beq.n	8002c72 <HAL_UART_IRQHandler+0x18a>
 8002c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00c      	beq.n	8002c72 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c68:	f043 0220 	orr.w	r2, r3, #32
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 8211 	beq.w	80030a0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c82:	f003 0320 	and.w	r3, r3, #32
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00d      	beq.n	8002ca6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c8e:	f003 0320 	and.w	r3, r3, #32
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d007      	beq.n	8002ca6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cba:	2b40      	cmp	r3, #64	@ 0x40
 8002cbc:	d005      	beq.n	8002cca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002cbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002cc2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d04f      	beq.n	8002d6a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 fdc0 	bl	8003850 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cda:	2b40      	cmp	r3, #64	@ 0x40
 8002cdc:	d141      	bne.n	8002d62 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	3308      	adds	r3, #8
 8002ce4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002cec:	e853 3f00 	ldrex	r3, [r3]
 8002cf0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002cf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002cf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cfc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	3308      	adds	r3, #8
 8002d06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002d0a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002d0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002d16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002d1a:	e841 2300 	strex	r3, r2, [r1]
 8002d1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002d22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1d9      	bne.n	8002cde <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d013      	beq.n	8002d5a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d36:	4a13      	ldr	r2, [pc, #76]	@ (8002d84 <HAL_UART_IRQHandler+0x29c>)
 8002d38:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fd ffd0 	bl	8000ce4 <HAL_DMA_Abort_IT>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d017      	beq.n	8002d7a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d54:	4610      	mov	r0, r2
 8002d56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d58:	e00f      	b.n	8002d7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f9b4 	bl	80030c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d60:	e00b      	b.n	8002d7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f9b0 	bl	80030c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d68:	e007      	b.n	8002d7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f9ac 	bl	80030c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002d78:	e192      	b.n	80030a0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d7a:	bf00      	nop
    return;
 8002d7c:	e190      	b.n	80030a0 <HAL_UART_IRQHandler+0x5b8>
 8002d7e:	bf00      	nop
 8002d80:	04000120 	.word	0x04000120
 8002d84:	08003919 	.word	0x08003919

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	f040 814b 	bne.w	8003028 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d96:	f003 0310 	and.w	r3, r3, #16
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 8144 	beq.w	8003028 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002da4:	f003 0310 	and.w	r3, r3, #16
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 813d 	beq.w	8003028 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2210      	movs	r2, #16
 8002db4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc0:	2b40      	cmp	r3, #64	@ 0x40
 8002dc2:	f040 80b5 	bne.w	8002f30 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002dd2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 8164 	beq.w	80030a4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002de2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002de6:	429a      	cmp	r2, r3
 8002de8:	f080 815c 	bcs.w	80030a4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002df2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	2b20      	cmp	r3, #32
 8002dfe:	f000 8086 	beq.w	8002f0e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e0e:	e853 3f00 	ldrex	r3, [r3]
 8002e12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002e16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e1a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e1e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002e2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002e30:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e34:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002e38:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002e3c:	e841 2300 	strex	r3, r2, [r1]
 8002e40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002e44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1da      	bne.n	8002e02 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	3308      	adds	r3, #8
 8002e52:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e56:	e853 3f00 	ldrex	r3, [r3]
 8002e5a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002e5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e5e:	f023 0301 	bic.w	r3, r3, #1
 8002e62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	3308      	adds	r3, #8
 8002e6c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002e70:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002e74:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e76:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002e78:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002e7c:	e841 2300 	strex	r3, r2, [r1]
 8002e80:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002e82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1e1      	bne.n	8002e4c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	3308      	adds	r3, #8
 8002e8e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e92:	e853 3f00 	ldrex	r3, [r3]
 8002e96:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002e98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	3308      	adds	r3, #8
 8002ea8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002eac:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002eae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002eb2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002eb4:	e841 2300 	strex	r3, r2, [r1]
 8002eb8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002eba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1e3      	bne.n	8002e88 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ed6:	e853 3f00 	ldrex	r3, [r3]
 8002eda:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002edc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ede:	f023 0310 	bic.w	r3, r3, #16
 8002ee2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ef0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002ef2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ef6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002ef8:	e841 2300 	strex	r3, r2, [r1]
 8002efc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002efe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1e4      	bne.n	8002ece <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fd feb2 	bl	8000c72 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2202      	movs	r2, #2
 8002f12:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	4619      	mov	r1, r3
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 f8d7 	bl	80030dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f2e:	e0b9      	b.n	80030a4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 80ab 	beq.w	80030a8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002f52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 80a6 	beq.w	80030a8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f64:	e853 3f00 	ldrex	r3, [r3]
 8002f68:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002f7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f80:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f82:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f86:	e841 2300 	strex	r3, r2, [r1]
 8002f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1e4      	bne.n	8002f5c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	3308      	adds	r3, #8
 8002f98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9c:	e853 3f00 	ldrex	r3, [r3]
 8002fa0:	623b      	str	r3, [r7, #32]
   return(result);
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	f023 0301 	bic.w	r3, r3, #1
 8002fa8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	3308      	adds	r3, #8
 8002fb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002fb6:	633a      	str	r2, [r7, #48]	@ 0x30
 8002fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fbe:	e841 2300 	strex	r3, r2, [r1]
 8002fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1e3      	bne.n	8002f92 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	e853 3f00 	ldrex	r3, [r3]
 8002fea:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f023 0310 	bic.w	r3, r3, #16
 8002ff2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003000:	61fb      	str	r3, [r7, #28]
 8003002:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003004:	69b9      	ldr	r1, [r7, #24]
 8003006:	69fa      	ldr	r2, [r7, #28]
 8003008:	e841 2300 	strex	r3, r2, [r1]
 800300c:	617b      	str	r3, [r7, #20]
   return(result);
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1e4      	bne.n	8002fde <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800301a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800301e:	4619      	mov	r1, r3
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f85b 	bl	80030dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003026:	e03f      	b.n	80030a8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800302c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00e      	beq.n	8003052 <HAL_UART_IRQHandler+0x56a>
 8003034:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003038:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d008      	beq.n	8003052 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003048:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fe4c 	bl	8003ce8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003050:	e02d      	b.n	80030ae <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00e      	beq.n	800307c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800305e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003066:	2b00      	cmp	r3, #0
 8003068:	d008      	beq.n	800307c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800306e:	2b00      	cmp	r3, #0
 8003070:	d01c      	beq.n	80030ac <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	4798      	blx	r3
    }
    return;
 800307a:	e017      	b.n	80030ac <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800307c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003084:	2b00      	cmp	r3, #0
 8003086:	d012      	beq.n	80030ae <HAL_UART_IRQHandler+0x5c6>
 8003088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800308c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00c      	beq.n	80030ae <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 fc55 	bl	8003944 <UART_EndTransmit_IT>
    return;
 800309a:	e008      	b.n	80030ae <HAL_UART_IRQHandler+0x5c6>
      return;
 800309c:	bf00      	nop
 800309e:	e006      	b.n	80030ae <HAL_UART_IRQHandler+0x5c6>
    return;
 80030a0:	bf00      	nop
 80030a2:	e004      	b.n	80030ae <HAL_UART_IRQHandler+0x5c6>
      return;
 80030a4:	bf00      	nop
 80030a6:	e002      	b.n	80030ae <HAL_UART_IRQHandler+0x5c6>
      return;
 80030a8:	bf00      	nop
 80030aa:	e000      	b.n	80030ae <HAL_UART_IRQHandler+0x5c6>
    return;
 80030ac:	bf00      	nop
  }

}
 80030ae:	37e8      	adds	r7, #232	@ 0xe8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030fc:	2300      	movs	r3, #0
 80030fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	431a      	orrs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	4313      	orrs	r3, r2
 8003116:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	4b8a      	ldr	r3, [pc, #552]	@ (8003348 <UART_SetConfig+0x254>)
 8003120:	4013      	ands	r3, r2
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6812      	ldr	r2, [r2, #0]
 8003126:	6979      	ldr	r1, [r7, #20]
 8003128:	430b      	orrs	r3, r1
 800312a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	4313      	orrs	r3, r2
 8003150:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	430a      	orrs	r2, r1
 8003164:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a78      	ldr	r2, [pc, #480]	@ (800334c <UART_SetConfig+0x258>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d120      	bne.n	80031b2 <UART_SetConfig+0xbe>
 8003170:	4b77      	ldr	r3, [pc, #476]	@ (8003350 <UART_SetConfig+0x25c>)
 8003172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003174:	f003 0303 	and.w	r3, r3, #3
 8003178:	2b03      	cmp	r3, #3
 800317a:	d817      	bhi.n	80031ac <UART_SetConfig+0xb8>
 800317c:	a201      	add	r2, pc, #4	@ (adr r2, 8003184 <UART_SetConfig+0x90>)
 800317e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003182:	bf00      	nop
 8003184:	08003195 	.word	0x08003195
 8003188:	080031a1 	.word	0x080031a1
 800318c:	080031a7 	.word	0x080031a7
 8003190:	0800319b 	.word	0x0800319b
 8003194:	2300      	movs	r3, #0
 8003196:	77fb      	strb	r3, [r7, #31]
 8003198:	e01d      	b.n	80031d6 <UART_SetConfig+0xe2>
 800319a:	2302      	movs	r3, #2
 800319c:	77fb      	strb	r3, [r7, #31]
 800319e:	e01a      	b.n	80031d6 <UART_SetConfig+0xe2>
 80031a0:	2304      	movs	r3, #4
 80031a2:	77fb      	strb	r3, [r7, #31]
 80031a4:	e017      	b.n	80031d6 <UART_SetConfig+0xe2>
 80031a6:	2308      	movs	r3, #8
 80031a8:	77fb      	strb	r3, [r7, #31]
 80031aa:	e014      	b.n	80031d6 <UART_SetConfig+0xe2>
 80031ac:	2310      	movs	r3, #16
 80031ae:	77fb      	strb	r3, [r7, #31]
 80031b0:	e011      	b.n	80031d6 <UART_SetConfig+0xe2>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a67      	ldr	r2, [pc, #412]	@ (8003354 <UART_SetConfig+0x260>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d102      	bne.n	80031c2 <UART_SetConfig+0xce>
 80031bc:	2300      	movs	r3, #0
 80031be:	77fb      	strb	r3, [r7, #31]
 80031c0:	e009      	b.n	80031d6 <UART_SetConfig+0xe2>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a64      	ldr	r2, [pc, #400]	@ (8003358 <UART_SetConfig+0x264>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d102      	bne.n	80031d2 <UART_SetConfig+0xde>
 80031cc:	2300      	movs	r3, #0
 80031ce:	77fb      	strb	r3, [r7, #31]
 80031d0:	e001      	b.n	80031d6 <UART_SetConfig+0xe2>
 80031d2:	2310      	movs	r3, #16
 80031d4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031de:	d15a      	bne.n	8003296 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80031e0:	7ffb      	ldrb	r3, [r7, #31]
 80031e2:	2b08      	cmp	r3, #8
 80031e4:	d827      	bhi.n	8003236 <UART_SetConfig+0x142>
 80031e6:	a201      	add	r2, pc, #4	@ (adr r2, 80031ec <UART_SetConfig+0xf8>)
 80031e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ec:	08003211 	.word	0x08003211
 80031f0:	08003219 	.word	0x08003219
 80031f4:	08003221 	.word	0x08003221
 80031f8:	08003237 	.word	0x08003237
 80031fc:	08003227 	.word	0x08003227
 8003200:	08003237 	.word	0x08003237
 8003204:	08003237 	.word	0x08003237
 8003208:	08003237 	.word	0x08003237
 800320c:	0800322f 	.word	0x0800322f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003210:	f7ff f978 	bl	8002504 <HAL_RCC_GetPCLK1Freq>
 8003214:	61b8      	str	r0, [r7, #24]
        break;
 8003216:	e013      	b.n	8003240 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003218:	f7ff f996 	bl	8002548 <HAL_RCC_GetPCLK2Freq>
 800321c:	61b8      	str	r0, [r7, #24]
        break;
 800321e:	e00f      	b.n	8003240 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003220:	4b4e      	ldr	r3, [pc, #312]	@ (800335c <UART_SetConfig+0x268>)
 8003222:	61bb      	str	r3, [r7, #24]
        break;
 8003224:	e00c      	b.n	8003240 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003226:	f7ff f8f7 	bl	8002418 <HAL_RCC_GetSysClockFreq>
 800322a:	61b8      	str	r0, [r7, #24]
        break;
 800322c:	e008      	b.n	8003240 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800322e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003232:	61bb      	str	r3, [r7, #24]
        break;
 8003234:	e004      	b.n	8003240 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	77bb      	strb	r3, [r7, #30]
        break;
 800323e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d074      	beq.n	8003330 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	005a      	lsls	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	085b      	lsrs	r3, r3, #1
 8003250:	441a      	add	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	fbb2 f3f3 	udiv	r3, r2, r3
 800325a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	2b0f      	cmp	r3, #15
 8003260:	d916      	bls.n	8003290 <UART_SetConfig+0x19c>
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003268:	d212      	bcs.n	8003290 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	b29b      	uxth	r3, r3
 800326e:	f023 030f 	bic.w	r3, r3, #15
 8003272:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	085b      	lsrs	r3, r3, #1
 8003278:	b29b      	uxth	r3, r3
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	b29a      	uxth	r2, r3
 8003280:	89fb      	ldrh	r3, [r7, #14]
 8003282:	4313      	orrs	r3, r2
 8003284:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	89fa      	ldrh	r2, [r7, #14]
 800328c:	60da      	str	r2, [r3, #12]
 800328e:	e04f      	b.n	8003330 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	77bb      	strb	r3, [r7, #30]
 8003294:	e04c      	b.n	8003330 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003296:	7ffb      	ldrb	r3, [r7, #31]
 8003298:	2b08      	cmp	r3, #8
 800329a:	d828      	bhi.n	80032ee <UART_SetConfig+0x1fa>
 800329c:	a201      	add	r2, pc, #4	@ (adr r2, 80032a4 <UART_SetConfig+0x1b0>)
 800329e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a2:	bf00      	nop
 80032a4:	080032c9 	.word	0x080032c9
 80032a8:	080032d1 	.word	0x080032d1
 80032ac:	080032d9 	.word	0x080032d9
 80032b0:	080032ef 	.word	0x080032ef
 80032b4:	080032df 	.word	0x080032df
 80032b8:	080032ef 	.word	0x080032ef
 80032bc:	080032ef 	.word	0x080032ef
 80032c0:	080032ef 	.word	0x080032ef
 80032c4:	080032e7 	.word	0x080032e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032c8:	f7ff f91c 	bl	8002504 <HAL_RCC_GetPCLK1Freq>
 80032cc:	61b8      	str	r0, [r7, #24]
        break;
 80032ce:	e013      	b.n	80032f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032d0:	f7ff f93a 	bl	8002548 <HAL_RCC_GetPCLK2Freq>
 80032d4:	61b8      	str	r0, [r7, #24]
        break;
 80032d6:	e00f      	b.n	80032f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032d8:	4b20      	ldr	r3, [pc, #128]	@ (800335c <UART_SetConfig+0x268>)
 80032da:	61bb      	str	r3, [r7, #24]
        break;
 80032dc:	e00c      	b.n	80032f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032de:	f7ff f89b 	bl	8002418 <HAL_RCC_GetSysClockFreq>
 80032e2:	61b8      	str	r0, [r7, #24]
        break;
 80032e4:	e008      	b.n	80032f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032ea:	61bb      	str	r3, [r7, #24]
        break;
 80032ec:	e004      	b.n	80032f8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	77bb      	strb	r3, [r7, #30]
        break;
 80032f6:	bf00      	nop
    }

    if (pclk != 0U)
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d018      	beq.n	8003330 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	085a      	lsrs	r2, r3, #1
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	441a      	add	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003310:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	2b0f      	cmp	r3, #15
 8003316:	d909      	bls.n	800332c <UART_SetConfig+0x238>
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800331e:	d205      	bcs.n	800332c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	b29a      	uxth	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60da      	str	r2, [r3, #12]
 800332a:	e001      	b.n	8003330 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800333c:	7fbb      	ldrb	r3, [r7, #30]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3720      	adds	r7, #32
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	efff69f3 	.word	0xefff69f3
 800334c:	40013800 	.word	0x40013800
 8003350:	40021000 	.word	0x40021000
 8003354:	40004400 	.word	0x40004400
 8003358:	40004800 	.word	0x40004800
 800335c:	007a1200 	.word	0x007a1200

08003360 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00a      	beq.n	80033ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f4:	f003 0310 	and.w	r3, r3, #16
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00a      	beq.n	8003412 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003416:	f003 0320 	and.w	r3, r3, #32
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800343c:	2b00      	cmp	r3, #0
 800343e:	d01a      	beq.n	8003476 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800345e:	d10a      	bne.n	8003476 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	605a      	str	r2, [r3, #4]
  }
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b098      	sub	sp, #96	@ 0x60
 80034a8:	af02      	add	r7, sp, #8
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034b4:	f7fd fa9c 	bl	80009f0 <HAL_GetTick>
 80034b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d12e      	bne.n	8003526 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034d0:	2200      	movs	r2, #0
 80034d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f88c 	bl	80035f4 <UART_WaitOnFlagUntilTimeout>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d021      	beq.n	8003526 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ea:	e853 3f00 	ldrex	r3, [r3]
 80034ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	461a      	mov	r2, r3
 80034fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003500:	647b      	str	r3, [r7, #68]	@ 0x44
 8003502:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003504:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003506:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003508:	e841 2300 	strex	r3, r2, [r1]
 800350c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800350e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1e6      	bne.n	80034e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2220      	movs	r2, #32
 8003518:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e062      	b.n	80035ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b04      	cmp	r3, #4
 8003532:	d149      	bne.n	80035c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003534:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800353c:	2200      	movs	r2, #0
 800353e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f856 	bl	80035f4 <UART_WaitOnFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d03c      	beq.n	80035c8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003556:	e853 3f00 	ldrex	r3, [r3]
 800355a:	623b      	str	r3, [r7, #32]
   return(result);
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003562:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	461a      	mov	r2, r3
 800356a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800356c:	633b      	str	r3, [r7, #48]	@ 0x30
 800356e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003570:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003572:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003574:	e841 2300 	strex	r3, r2, [r1]
 8003578:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800357a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1e6      	bne.n	800354e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	3308      	adds	r3, #8
 8003586:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	e853 3f00 	ldrex	r3, [r3]
 800358e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 0301 	bic.w	r3, r3, #1
 8003596:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	3308      	adds	r3, #8
 800359e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035a0:	61fa      	str	r2, [r7, #28]
 80035a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a4:	69b9      	ldr	r1, [r7, #24]
 80035a6:	69fa      	ldr	r2, [r7, #28]
 80035a8:	e841 2300 	strex	r3, r2, [r1]
 80035ac:	617b      	str	r3, [r7, #20]
   return(result);
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1e5      	bne.n	8003580 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e011      	b.n	80035ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2220      	movs	r2, #32
 80035cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3758      	adds	r7, #88	@ 0x58
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	4613      	mov	r3, r2
 8003602:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003604:	e049      	b.n	800369a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360c:	d045      	beq.n	800369a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360e:	f7fd f9ef 	bl	80009f0 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	429a      	cmp	r2, r3
 800361c:	d302      	bcc.n	8003624 <UART_WaitOnFlagUntilTimeout+0x30>
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e048      	b.n	80036ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0304 	and.w	r3, r3, #4
 8003632:	2b00      	cmp	r3, #0
 8003634:	d031      	beq.n	800369a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	f003 0308 	and.w	r3, r3, #8
 8003640:	2b08      	cmp	r3, #8
 8003642:	d110      	bne.n	8003666 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2208      	movs	r2, #8
 800364a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 f8ff 	bl	8003850 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2208      	movs	r2, #8
 8003656:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e029      	b.n	80036ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	69db      	ldr	r3, [r3, #28]
 800366c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003670:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003674:	d111      	bne.n	800369a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800367e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f000 f8e5 	bl	8003850 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2220      	movs	r2, #32
 800368a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e00f      	b.n	80036ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	69da      	ldr	r2, [r3, #28]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4013      	ands	r3, r2
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	bf0c      	ite	eq
 80036aa:	2301      	moveq	r3, #1
 80036ac:	2300      	movne	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	461a      	mov	r2, r3
 80036b2:	79fb      	ldrb	r3, [r7, #7]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d0a6      	beq.n	8003606 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
	...

080036c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b097      	sub	sp, #92	@ 0x5c
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	4613      	mov	r3, r2
 80036d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	88fa      	ldrh	r2, [r7, #6]
 80036dc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	88fa      	ldrh	r2, [r7, #6]
 80036e4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036f6:	d10e      	bne.n	8003716 <UART_Start_Receive_IT+0x52>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d105      	bne.n	800370c <UART_Start_Receive_IT+0x48>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003706:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800370a:	e02d      	b.n	8003768 <UART_Start_Receive_IT+0xa4>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	22ff      	movs	r2, #255	@ 0xff
 8003710:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003714:	e028      	b.n	8003768 <UART_Start_Receive_IT+0xa4>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10d      	bne.n	800373a <UART_Start_Receive_IT+0x76>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d104      	bne.n	8003730 <UART_Start_Receive_IT+0x6c>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	22ff      	movs	r2, #255	@ 0xff
 800372a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800372e:	e01b      	b.n	8003768 <UART_Start_Receive_IT+0xa4>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	227f      	movs	r2, #127	@ 0x7f
 8003734:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003738:	e016      	b.n	8003768 <UART_Start_Receive_IT+0xa4>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003742:	d10d      	bne.n	8003760 <UART_Start_Receive_IT+0x9c>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d104      	bne.n	8003756 <UART_Start_Receive_IT+0x92>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	227f      	movs	r2, #127	@ 0x7f
 8003750:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003754:	e008      	b.n	8003768 <UART_Start_Receive_IT+0xa4>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	223f      	movs	r2, #63	@ 0x3f
 800375a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800375e:	e003      	b.n	8003768 <UART_Start_Receive_IT+0xa4>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2222      	movs	r2, #34	@ 0x22
 8003774:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	3308      	adds	r3, #8
 800377e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003782:	e853 3f00 	ldrex	r3, [r3]
 8003786:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800378a:	f043 0301 	orr.w	r3, r3, #1
 800378e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3308      	adds	r3, #8
 8003796:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003798:	64ba      	str	r2, [r7, #72]	@ 0x48
 800379a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800379e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037a0:	e841 2300 	strex	r3, r2, [r1]
 80037a4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80037a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1e5      	bne.n	8003778 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037b4:	d107      	bne.n	80037c6 <UART_Start_Receive_IT+0x102>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d103      	bne.n	80037c6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4a21      	ldr	r2, [pc, #132]	@ (8003848 <UART_Start_Receive_IT+0x184>)
 80037c2:	669a      	str	r2, [r3, #104]	@ 0x68
 80037c4:	e002      	b.n	80037cc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4a20      	ldr	r2, [pc, #128]	@ (800384c <UART_Start_Receive_IT+0x188>)
 80037ca:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d019      	beq.n	8003808 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037dc:	e853 3f00 	ldrex	r3, [r3]
 80037e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80037e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80037e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80037f4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80037f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037fa:	e841 2300 	strex	r3, r2, [r1]
 80037fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1e6      	bne.n	80037d4 <UART_Start_Receive_IT+0x110>
 8003806:	e018      	b.n	800383a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	e853 3f00 	ldrex	r3, [r3]
 8003814:	613b      	str	r3, [r7, #16]
   return(result);
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	f043 0320 	orr.w	r3, r3, #32
 800381c:	653b      	str	r3, [r7, #80]	@ 0x50
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	461a      	mov	r2, r3
 8003824:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003826:	623b      	str	r3, [r7, #32]
 8003828:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382a:	69f9      	ldr	r1, [r7, #28]
 800382c:	6a3a      	ldr	r2, [r7, #32]
 800382e:	e841 2300 	strex	r3, r2, [r1]
 8003832:	61bb      	str	r3, [r7, #24]
   return(result);
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1e6      	bne.n	8003808 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	375c      	adds	r7, #92	@ 0x5c
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	08003b41 	.word	0x08003b41
 800384c:	08003999 	.word	0x08003999

08003850 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003850:	b480      	push	{r7}
 8003852:	b095      	sub	sp, #84	@ 0x54
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003860:	e853 3f00 	ldrex	r3, [r3]
 8003864:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003868:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800386c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	461a      	mov	r2, r3
 8003874:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003876:	643b      	str	r3, [r7, #64]	@ 0x40
 8003878:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800387c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800387e:	e841 2300 	strex	r3, r2, [r1]
 8003882:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1e6      	bne.n	8003858 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	3308      	adds	r3, #8
 8003890:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	e853 3f00 	ldrex	r3, [r3]
 8003898:	61fb      	str	r3, [r7, #28]
   return(result);
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	f023 0301 	bic.w	r3, r3, #1
 80038a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	3308      	adds	r3, #8
 80038a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038b2:	e841 2300 	strex	r3, r2, [r1]
 80038b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1e5      	bne.n	800388a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d118      	bne.n	80038f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	e853 3f00 	ldrex	r3, [r3]
 80038d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f023 0310 	bic.w	r3, r3, #16
 80038da:	647b      	str	r3, [r7, #68]	@ 0x44
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	461a      	mov	r2, r3
 80038e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038e4:	61bb      	str	r3, [r7, #24]
 80038e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e8:	6979      	ldr	r1, [r7, #20]
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	e841 2300 	strex	r3, r2, [r1]
 80038f0:	613b      	str	r3, [r7, #16]
   return(result);
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1e6      	bne.n	80038c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800390c:	bf00      	nop
 800390e:	3754      	adds	r7, #84	@ 0x54
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003924:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f7ff fbc6 	bl	80030c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800393c:	bf00      	nop
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b088      	sub	sp, #32
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	e853 3f00 	ldrex	r3, [r3]
 8003958:	60bb      	str	r3, [r7, #8]
   return(result);
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003960:	61fb      	str	r3, [r7, #28]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	461a      	mov	r2, r3
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	61bb      	str	r3, [r7, #24]
 800396c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396e:	6979      	ldr	r1, [r7, #20]
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	e841 2300 	strex	r3, r2, [r1]
 8003976:	613b      	str	r3, [r7, #16]
   return(result);
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1e6      	bne.n	800394c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2220      	movs	r2, #32
 8003982:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7ff fb92 	bl	80030b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003990:	bf00      	nop
 8003992:	3720      	adds	r7, #32
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b09c      	sub	sp, #112	@ 0x70
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80039a6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039b0:	2b22      	cmp	r3, #34	@ 0x22
 80039b2:	f040 80b9 	bne.w	8003b28 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80039bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80039c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80039c4:	b2d9      	uxtb	r1, r3
 80039c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d0:	400a      	ands	r2, r1
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f040 809c 	bne.w	8003b38 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a08:	e853 3f00 	ldrex	r3, [r3]
 8003a0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a1e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a20:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a26:	e841 2300 	strex	r3, r2, [r1]
 8003a2a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1e6      	bne.n	8003a00 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	3308      	adds	r3, #8
 8003a38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a3c:	e853 3f00 	ldrex	r3, [r3]
 8003a40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a44:	f023 0301 	bic.w	r3, r3, #1
 8003a48:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	3308      	adds	r3, #8
 8003a50:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003a52:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a54:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a5a:	e841 2300 	strex	r3, r2, [r1]
 8003a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1e5      	bne.n	8003a32 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d018      	beq.n	8003aba <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a90:	e853 3f00 	ldrex	r3, [r3]
 8003a94:	623b      	str	r3, [r7, #32]
   return(result);
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003a9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003aa6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003aa8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aaa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003aac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003aae:	e841 2300 	strex	r3, r2, [r1]
 8003ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1e6      	bne.n	8003a88 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d12e      	bne.n	8003b20 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	e853 3f00 	ldrex	r3, [r3]
 8003ad4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f023 0310 	bic.w	r3, r3, #16
 8003adc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ae6:	61fb      	str	r3, [r7, #28]
 8003ae8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aea:	69b9      	ldr	r1, [r7, #24]
 8003aec:	69fa      	ldr	r2, [r7, #28]
 8003aee:	e841 2300 	strex	r3, r2, [r1]
 8003af2:	617b      	str	r3, [r7, #20]
   return(result);
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1e6      	bne.n	8003ac8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	f003 0310 	and.w	r3, r3, #16
 8003b04:	2b10      	cmp	r3, #16
 8003b06:	d103      	bne.n	8003b10 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2210      	movs	r2, #16
 8003b0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003b16:	4619      	mov	r1, r3
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff fadf 	bl	80030dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b1e:	e00b      	b.n	8003b38 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f7fc fd89 	bl	8000638 <HAL_UART_RxCpltCallback>
}
 8003b26:	e007      	b.n	8003b38 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	699a      	ldr	r2, [r3, #24]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0208 	orr.w	r2, r2, #8
 8003b36:	619a      	str	r2, [r3, #24]
}
 8003b38:	bf00      	nop
 8003b3a:	3770      	adds	r7, #112	@ 0x70
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b09c      	sub	sp, #112	@ 0x70
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003b4e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b58:	2b22      	cmp	r3, #34	@ 0x22
 8003b5a:	f040 80b9 	bne.w	8003cd0 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003b64:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b6c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003b6e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003b72:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003b76:	4013      	ands	r3, r2
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b7c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b82:	1c9a      	adds	r2, r3, #2
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f040 809c 	bne.w	8003ce0 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bb0:	e853 3f00 	ldrex	r3, [r3]
 8003bb4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003bb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bbc:	667b      	str	r3, [r7, #100]	@ 0x64
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bc6:	657b      	str	r3, [r7, #84]	@ 0x54
 8003bc8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003bcc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003bce:	e841 2300 	strex	r3, r2, [r1]
 8003bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003bd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1e6      	bne.n	8003ba8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	3308      	adds	r3, #8
 8003be0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003be4:	e853 3f00 	ldrex	r3, [r3]
 8003be8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bec:	f023 0301 	bic.w	r3, r3, #1
 8003bf0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3308      	adds	r3, #8
 8003bf8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003bfa:	643a      	str	r2, [r7, #64]	@ 0x40
 8003bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c02:	e841 2300 	strex	r3, r2, [r1]
 8003c06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1e5      	bne.n	8003bda <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d018      	beq.n	8003c62 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	e853 3f00 	ldrex	r3, [r3]
 8003c3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003c44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c50:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c56:	e841 2300 	strex	r3, r2, [r1]
 8003c5a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1e6      	bne.n	8003c30 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d12e      	bne.n	8003cc8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	e853 3f00 	ldrex	r3, [r3]
 8003c7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	f023 0310 	bic.w	r3, r3, #16
 8003c84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c8e:	61bb      	str	r3, [r7, #24]
 8003c90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c92:	6979      	ldr	r1, [r7, #20]
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	e841 2300 	strex	r3, r2, [r1]
 8003c9a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1e6      	bne.n	8003c70 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	69db      	ldr	r3, [r3, #28]
 8003ca8:	f003 0310 	and.w	r3, r3, #16
 8003cac:	2b10      	cmp	r3, #16
 8003cae:	d103      	bne.n	8003cb8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2210      	movs	r2, #16
 8003cb6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff fa0b 	bl	80030dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003cc6:	e00b      	b.n	8003ce0 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7fc fcb5 	bl	8000638 <HAL_UART_RxCpltCallback>
}
 8003cce:	e007      	b.n	8003ce0 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699a      	ldr	r2, [r3, #24]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0208 	orr.w	r2, r2, #8
 8003cde:	619a      	str	r2, [r3, #24]
}
 8003ce0:	bf00      	nop
 8003ce2:	3770      	adds	r7, #112	@ 0x70
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <sniprintf>:
 8003cfc:	b40c      	push	{r2, r3}
 8003cfe:	b530      	push	{r4, r5, lr}
 8003d00:	4b17      	ldr	r3, [pc, #92]	@ (8003d60 <sniprintf+0x64>)
 8003d02:	1e0c      	subs	r4, r1, #0
 8003d04:	681d      	ldr	r5, [r3, #0]
 8003d06:	b09d      	sub	sp, #116	@ 0x74
 8003d08:	da08      	bge.n	8003d1c <sniprintf+0x20>
 8003d0a:	238b      	movs	r3, #139	@ 0x8b
 8003d0c:	602b      	str	r3, [r5, #0]
 8003d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d12:	b01d      	add	sp, #116	@ 0x74
 8003d14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d18:	b002      	add	sp, #8
 8003d1a:	4770      	bx	lr
 8003d1c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003d20:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003d24:	bf14      	ite	ne
 8003d26:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003d2a:	4623      	moveq	r3, r4
 8003d2c:	9304      	str	r3, [sp, #16]
 8003d2e:	9307      	str	r3, [sp, #28]
 8003d30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d34:	9002      	str	r0, [sp, #8]
 8003d36:	9006      	str	r0, [sp, #24]
 8003d38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003d3c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003d3e:	ab21      	add	r3, sp, #132	@ 0x84
 8003d40:	a902      	add	r1, sp, #8
 8003d42:	4628      	mov	r0, r5
 8003d44:	9301      	str	r3, [sp, #4]
 8003d46:	f000 f995 	bl	8004074 <_svfiprintf_r>
 8003d4a:	1c43      	adds	r3, r0, #1
 8003d4c:	bfbc      	itt	lt
 8003d4e:	238b      	movlt	r3, #139	@ 0x8b
 8003d50:	602b      	strlt	r3, [r5, #0]
 8003d52:	2c00      	cmp	r4, #0
 8003d54:	d0dd      	beq.n	8003d12 <sniprintf+0x16>
 8003d56:	9b02      	ldr	r3, [sp, #8]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	701a      	strb	r2, [r3, #0]
 8003d5c:	e7d9      	b.n	8003d12 <sniprintf+0x16>
 8003d5e:	bf00      	nop
 8003d60:	2000000c 	.word	0x2000000c

08003d64 <memset>:
 8003d64:	4402      	add	r2, r0
 8003d66:	4603      	mov	r3, r0
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d100      	bne.n	8003d6e <memset+0xa>
 8003d6c:	4770      	bx	lr
 8003d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d72:	e7f9      	b.n	8003d68 <memset+0x4>

08003d74 <__errno>:
 8003d74:	4b01      	ldr	r3, [pc, #4]	@ (8003d7c <__errno+0x8>)
 8003d76:	6818      	ldr	r0, [r3, #0]
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	2000000c 	.word	0x2000000c

08003d80 <__libc_init_array>:
 8003d80:	b570      	push	{r4, r5, r6, lr}
 8003d82:	4d0d      	ldr	r5, [pc, #52]	@ (8003db8 <__libc_init_array+0x38>)
 8003d84:	4c0d      	ldr	r4, [pc, #52]	@ (8003dbc <__libc_init_array+0x3c>)
 8003d86:	1b64      	subs	r4, r4, r5
 8003d88:	10a4      	asrs	r4, r4, #2
 8003d8a:	2600      	movs	r6, #0
 8003d8c:	42a6      	cmp	r6, r4
 8003d8e:	d109      	bne.n	8003da4 <__libc_init_array+0x24>
 8003d90:	4d0b      	ldr	r5, [pc, #44]	@ (8003dc0 <__libc_init_array+0x40>)
 8003d92:	4c0c      	ldr	r4, [pc, #48]	@ (8003dc4 <__libc_init_array+0x44>)
 8003d94:	f000 fc66 	bl	8004664 <_init>
 8003d98:	1b64      	subs	r4, r4, r5
 8003d9a:	10a4      	asrs	r4, r4, #2
 8003d9c:	2600      	movs	r6, #0
 8003d9e:	42a6      	cmp	r6, r4
 8003da0:	d105      	bne.n	8003dae <__libc_init_array+0x2e>
 8003da2:	bd70      	pop	{r4, r5, r6, pc}
 8003da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003da8:	4798      	blx	r3
 8003daa:	3601      	adds	r6, #1
 8003dac:	e7ee      	b.n	8003d8c <__libc_init_array+0xc>
 8003dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8003db2:	4798      	blx	r3
 8003db4:	3601      	adds	r6, #1
 8003db6:	e7f2      	b.n	8003d9e <__libc_init_array+0x1e>
 8003db8:	0800471c 	.word	0x0800471c
 8003dbc:	0800471c 	.word	0x0800471c
 8003dc0:	0800471c 	.word	0x0800471c
 8003dc4:	08004720 	.word	0x08004720

08003dc8 <__retarget_lock_acquire_recursive>:
 8003dc8:	4770      	bx	lr

08003dca <__retarget_lock_release_recursive>:
 8003dca:	4770      	bx	lr

08003dcc <_free_r>:
 8003dcc:	b538      	push	{r3, r4, r5, lr}
 8003dce:	4605      	mov	r5, r0
 8003dd0:	2900      	cmp	r1, #0
 8003dd2:	d041      	beq.n	8003e58 <_free_r+0x8c>
 8003dd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dd8:	1f0c      	subs	r4, r1, #4
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	bfb8      	it	lt
 8003dde:	18e4      	addlt	r4, r4, r3
 8003de0:	f000 f8e0 	bl	8003fa4 <__malloc_lock>
 8003de4:	4a1d      	ldr	r2, [pc, #116]	@ (8003e5c <_free_r+0x90>)
 8003de6:	6813      	ldr	r3, [r2, #0]
 8003de8:	b933      	cbnz	r3, 8003df8 <_free_r+0x2c>
 8003dea:	6063      	str	r3, [r4, #4]
 8003dec:	6014      	str	r4, [r2, #0]
 8003dee:	4628      	mov	r0, r5
 8003df0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003df4:	f000 b8dc 	b.w	8003fb0 <__malloc_unlock>
 8003df8:	42a3      	cmp	r3, r4
 8003dfa:	d908      	bls.n	8003e0e <_free_r+0x42>
 8003dfc:	6820      	ldr	r0, [r4, #0]
 8003dfe:	1821      	adds	r1, r4, r0
 8003e00:	428b      	cmp	r3, r1
 8003e02:	bf01      	itttt	eq
 8003e04:	6819      	ldreq	r1, [r3, #0]
 8003e06:	685b      	ldreq	r3, [r3, #4]
 8003e08:	1809      	addeq	r1, r1, r0
 8003e0a:	6021      	streq	r1, [r4, #0]
 8003e0c:	e7ed      	b.n	8003dea <_free_r+0x1e>
 8003e0e:	461a      	mov	r2, r3
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	b10b      	cbz	r3, 8003e18 <_free_r+0x4c>
 8003e14:	42a3      	cmp	r3, r4
 8003e16:	d9fa      	bls.n	8003e0e <_free_r+0x42>
 8003e18:	6811      	ldr	r1, [r2, #0]
 8003e1a:	1850      	adds	r0, r2, r1
 8003e1c:	42a0      	cmp	r0, r4
 8003e1e:	d10b      	bne.n	8003e38 <_free_r+0x6c>
 8003e20:	6820      	ldr	r0, [r4, #0]
 8003e22:	4401      	add	r1, r0
 8003e24:	1850      	adds	r0, r2, r1
 8003e26:	4283      	cmp	r3, r0
 8003e28:	6011      	str	r1, [r2, #0]
 8003e2a:	d1e0      	bne.n	8003dee <_free_r+0x22>
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	6053      	str	r3, [r2, #4]
 8003e32:	4408      	add	r0, r1
 8003e34:	6010      	str	r0, [r2, #0]
 8003e36:	e7da      	b.n	8003dee <_free_r+0x22>
 8003e38:	d902      	bls.n	8003e40 <_free_r+0x74>
 8003e3a:	230c      	movs	r3, #12
 8003e3c:	602b      	str	r3, [r5, #0]
 8003e3e:	e7d6      	b.n	8003dee <_free_r+0x22>
 8003e40:	6820      	ldr	r0, [r4, #0]
 8003e42:	1821      	adds	r1, r4, r0
 8003e44:	428b      	cmp	r3, r1
 8003e46:	bf04      	itt	eq
 8003e48:	6819      	ldreq	r1, [r3, #0]
 8003e4a:	685b      	ldreq	r3, [r3, #4]
 8003e4c:	6063      	str	r3, [r4, #4]
 8003e4e:	bf04      	itt	eq
 8003e50:	1809      	addeq	r1, r1, r0
 8003e52:	6021      	streq	r1, [r4, #0]
 8003e54:	6054      	str	r4, [r2, #4]
 8003e56:	e7ca      	b.n	8003dee <_free_r+0x22>
 8003e58:	bd38      	pop	{r3, r4, r5, pc}
 8003e5a:	bf00      	nop
 8003e5c:	200002d8 	.word	0x200002d8

08003e60 <sbrk_aligned>:
 8003e60:	b570      	push	{r4, r5, r6, lr}
 8003e62:	4e0f      	ldr	r6, [pc, #60]	@ (8003ea0 <sbrk_aligned+0x40>)
 8003e64:	460c      	mov	r4, r1
 8003e66:	6831      	ldr	r1, [r6, #0]
 8003e68:	4605      	mov	r5, r0
 8003e6a:	b911      	cbnz	r1, 8003e72 <sbrk_aligned+0x12>
 8003e6c:	f000 fba6 	bl	80045bc <_sbrk_r>
 8003e70:	6030      	str	r0, [r6, #0]
 8003e72:	4621      	mov	r1, r4
 8003e74:	4628      	mov	r0, r5
 8003e76:	f000 fba1 	bl	80045bc <_sbrk_r>
 8003e7a:	1c43      	adds	r3, r0, #1
 8003e7c:	d103      	bne.n	8003e86 <sbrk_aligned+0x26>
 8003e7e:	f04f 34ff 	mov.w	r4, #4294967295
 8003e82:	4620      	mov	r0, r4
 8003e84:	bd70      	pop	{r4, r5, r6, pc}
 8003e86:	1cc4      	adds	r4, r0, #3
 8003e88:	f024 0403 	bic.w	r4, r4, #3
 8003e8c:	42a0      	cmp	r0, r4
 8003e8e:	d0f8      	beq.n	8003e82 <sbrk_aligned+0x22>
 8003e90:	1a21      	subs	r1, r4, r0
 8003e92:	4628      	mov	r0, r5
 8003e94:	f000 fb92 	bl	80045bc <_sbrk_r>
 8003e98:	3001      	adds	r0, #1
 8003e9a:	d1f2      	bne.n	8003e82 <sbrk_aligned+0x22>
 8003e9c:	e7ef      	b.n	8003e7e <sbrk_aligned+0x1e>
 8003e9e:	bf00      	nop
 8003ea0:	200002d4 	.word	0x200002d4

08003ea4 <_malloc_r>:
 8003ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ea8:	1ccd      	adds	r5, r1, #3
 8003eaa:	f025 0503 	bic.w	r5, r5, #3
 8003eae:	3508      	adds	r5, #8
 8003eb0:	2d0c      	cmp	r5, #12
 8003eb2:	bf38      	it	cc
 8003eb4:	250c      	movcc	r5, #12
 8003eb6:	2d00      	cmp	r5, #0
 8003eb8:	4606      	mov	r6, r0
 8003eba:	db01      	blt.n	8003ec0 <_malloc_r+0x1c>
 8003ebc:	42a9      	cmp	r1, r5
 8003ebe:	d904      	bls.n	8003eca <_malloc_r+0x26>
 8003ec0:	230c      	movs	r3, #12
 8003ec2:	6033      	str	r3, [r6, #0]
 8003ec4:	2000      	movs	r0, #0
 8003ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003eca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003fa0 <_malloc_r+0xfc>
 8003ece:	f000 f869 	bl	8003fa4 <__malloc_lock>
 8003ed2:	f8d8 3000 	ldr.w	r3, [r8]
 8003ed6:	461c      	mov	r4, r3
 8003ed8:	bb44      	cbnz	r4, 8003f2c <_malloc_r+0x88>
 8003eda:	4629      	mov	r1, r5
 8003edc:	4630      	mov	r0, r6
 8003ede:	f7ff ffbf 	bl	8003e60 <sbrk_aligned>
 8003ee2:	1c43      	adds	r3, r0, #1
 8003ee4:	4604      	mov	r4, r0
 8003ee6:	d158      	bne.n	8003f9a <_malloc_r+0xf6>
 8003ee8:	f8d8 4000 	ldr.w	r4, [r8]
 8003eec:	4627      	mov	r7, r4
 8003eee:	2f00      	cmp	r7, #0
 8003ef0:	d143      	bne.n	8003f7a <_malloc_r+0xd6>
 8003ef2:	2c00      	cmp	r4, #0
 8003ef4:	d04b      	beq.n	8003f8e <_malloc_r+0xea>
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	4639      	mov	r1, r7
 8003efa:	4630      	mov	r0, r6
 8003efc:	eb04 0903 	add.w	r9, r4, r3
 8003f00:	f000 fb5c 	bl	80045bc <_sbrk_r>
 8003f04:	4581      	cmp	r9, r0
 8003f06:	d142      	bne.n	8003f8e <_malloc_r+0xea>
 8003f08:	6821      	ldr	r1, [r4, #0]
 8003f0a:	1a6d      	subs	r5, r5, r1
 8003f0c:	4629      	mov	r1, r5
 8003f0e:	4630      	mov	r0, r6
 8003f10:	f7ff ffa6 	bl	8003e60 <sbrk_aligned>
 8003f14:	3001      	adds	r0, #1
 8003f16:	d03a      	beq.n	8003f8e <_malloc_r+0xea>
 8003f18:	6823      	ldr	r3, [r4, #0]
 8003f1a:	442b      	add	r3, r5
 8003f1c:	6023      	str	r3, [r4, #0]
 8003f1e:	f8d8 3000 	ldr.w	r3, [r8]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	bb62      	cbnz	r2, 8003f80 <_malloc_r+0xdc>
 8003f26:	f8c8 7000 	str.w	r7, [r8]
 8003f2a:	e00f      	b.n	8003f4c <_malloc_r+0xa8>
 8003f2c:	6822      	ldr	r2, [r4, #0]
 8003f2e:	1b52      	subs	r2, r2, r5
 8003f30:	d420      	bmi.n	8003f74 <_malloc_r+0xd0>
 8003f32:	2a0b      	cmp	r2, #11
 8003f34:	d917      	bls.n	8003f66 <_malloc_r+0xc2>
 8003f36:	1961      	adds	r1, r4, r5
 8003f38:	42a3      	cmp	r3, r4
 8003f3a:	6025      	str	r5, [r4, #0]
 8003f3c:	bf18      	it	ne
 8003f3e:	6059      	strne	r1, [r3, #4]
 8003f40:	6863      	ldr	r3, [r4, #4]
 8003f42:	bf08      	it	eq
 8003f44:	f8c8 1000 	streq.w	r1, [r8]
 8003f48:	5162      	str	r2, [r4, r5]
 8003f4a:	604b      	str	r3, [r1, #4]
 8003f4c:	4630      	mov	r0, r6
 8003f4e:	f000 f82f 	bl	8003fb0 <__malloc_unlock>
 8003f52:	f104 000b 	add.w	r0, r4, #11
 8003f56:	1d23      	adds	r3, r4, #4
 8003f58:	f020 0007 	bic.w	r0, r0, #7
 8003f5c:	1ac2      	subs	r2, r0, r3
 8003f5e:	bf1c      	itt	ne
 8003f60:	1a1b      	subne	r3, r3, r0
 8003f62:	50a3      	strne	r3, [r4, r2]
 8003f64:	e7af      	b.n	8003ec6 <_malloc_r+0x22>
 8003f66:	6862      	ldr	r2, [r4, #4]
 8003f68:	42a3      	cmp	r3, r4
 8003f6a:	bf0c      	ite	eq
 8003f6c:	f8c8 2000 	streq.w	r2, [r8]
 8003f70:	605a      	strne	r2, [r3, #4]
 8003f72:	e7eb      	b.n	8003f4c <_malloc_r+0xa8>
 8003f74:	4623      	mov	r3, r4
 8003f76:	6864      	ldr	r4, [r4, #4]
 8003f78:	e7ae      	b.n	8003ed8 <_malloc_r+0x34>
 8003f7a:	463c      	mov	r4, r7
 8003f7c:	687f      	ldr	r7, [r7, #4]
 8003f7e:	e7b6      	b.n	8003eee <_malloc_r+0x4a>
 8003f80:	461a      	mov	r2, r3
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	42a3      	cmp	r3, r4
 8003f86:	d1fb      	bne.n	8003f80 <_malloc_r+0xdc>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	6053      	str	r3, [r2, #4]
 8003f8c:	e7de      	b.n	8003f4c <_malloc_r+0xa8>
 8003f8e:	230c      	movs	r3, #12
 8003f90:	6033      	str	r3, [r6, #0]
 8003f92:	4630      	mov	r0, r6
 8003f94:	f000 f80c 	bl	8003fb0 <__malloc_unlock>
 8003f98:	e794      	b.n	8003ec4 <_malloc_r+0x20>
 8003f9a:	6005      	str	r5, [r0, #0]
 8003f9c:	e7d6      	b.n	8003f4c <_malloc_r+0xa8>
 8003f9e:	bf00      	nop
 8003fa0:	200002d8 	.word	0x200002d8

08003fa4 <__malloc_lock>:
 8003fa4:	4801      	ldr	r0, [pc, #4]	@ (8003fac <__malloc_lock+0x8>)
 8003fa6:	f7ff bf0f 	b.w	8003dc8 <__retarget_lock_acquire_recursive>
 8003faa:	bf00      	nop
 8003fac:	200002d0 	.word	0x200002d0

08003fb0 <__malloc_unlock>:
 8003fb0:	4801      	ldr	r0, [pc, #4]	@ (8003fb8 <__malloc_unlock+0x8>)
 8003fb2:	f7ff bf0a 	b.w	8003dca <__retarget_lock_release_recursive>
 8003fb6:	bf00      	nop
 8003fb8:	200002d0 	.word	0x200002d0

08003fbc <__ssputs_r>:
 8003fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fc0:	688e      	ldr	r6, [r1, #8]
 8003fc2:	461f      	mov	r7, r3
 8003fc4:	42be      	cmp	r6, r7
 8003fc6:	680b      	ldr	r3, [r1, #0]
 8003fc8:	4682      	mov	sl, r0
 8003fca:	460c      	mov	r4, r1
 8003fcc:	4690      	mov	r8, r2
 8003fce:	d82d      	bhi.n	800402c <__ssputs_r+0x70>
 8003fd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003fd4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003fd8:	d026      	beq.n	8004028 <__ssputs_r+0x6c>
 8003fda:	6965      	ldr	r5, [r4, #20]
 8003fdc:	6909      	ldr	r1, [r1, #16]
 8003fde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003fe2:	eba3 0901 	sub.w	r9, r3, r1
 8003fe6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003fea:	1c7b      	adds	r3, r7, #1
 8003fec:	444b      	add	r3, r9
 8003fee:	106d      	asrs	r5, r5, #1
 8003ff0:	429d      	cmp	r5, r3
 8003ff2:	bf38      	it	cc
 8003ff4:	461d      	movcc	r5, r3
 8003ff6:	0553      	lsls	r3, r2, #21
 8003ff8:	d527      	bpl.n	800404a <__ssputs_r+0x8e>
 8003ffa:	4629      	mov	r1, r5
 8003ffc:	f7ff ff52 	bl	8003ea4 <_malloc_r>
 8004000:	4606      	mov	r6, r0
 8004002:	b360      	cbz	r0, 800405e <__ssputs_r+0xa2>
 8004004:	6921      	ldr	r1, [r4, #16]
 8004006:	464a      	mov	r2, r9
 8004008:	f000 fae8 	bl	80045dc <memcpy>
 800400c:	89a3      	ldrh	r3, [r4, #12]
 800400e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004016:	81a3      	strh	r3, [r4, #12]
 8004018:	6126      	str	r6, [r4, #16]
 800401a:	6165      	str	r5, [r4, #20]
 800401c:	444e      	add	r6, r9
 800401e:	eba5 0509 	sub.w	r5, r5, r9
 8004022:	6026      	str	r6, [r4, #0]
 8004024:	60a5      	str	r5, [r4, #8]
 8004026:	463e      	mov	r6, r7
 8004028:	42be      	cmp	r6, r7
 800402a:	d900      	bls.n	800402e <__ssputs_r+0x72>
 800402c:	463e      	mov	r6, r7
 800402e:	6820      	ldr	r0, [r4, #0]
 8004030:	4632      	mov	r2, r6
 8004032:	4641      	mov	r1, r8
 8004034:	f000 faa8 	bl	8004588 <memmove>
 8004038:	68a3      	ldr	r3, [r4, #8]
 800403a:	1b9b      	subs	r3, r3, r6
 800403c:	60a3      	str	r3, [r4, #8]
 800403e:	6823      	ldr	r3, [r4, #0]
 8004040:	4433      	add	r3, r6
 8004042:	6023      	str	r3, [r4, #0]
 8004044:	2000      	movs	r0, #0
 8004046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800404a:	462a      	mov	r2, r5
 800404c:	f000 fad4 	bl	80045f8 <_realloc_r>
 8004050:	4606      	mov	r6, r0
 8004052:	2800      	cmp	r0, #0
 8004054:	d1e0      	bne.n	8004018 <__ssputs_r+0x5c>
 8004056:	6921      	ldr	r1, [r4, #16]
 8004058:	4650      	mov	r0, sl
 800405a:	f7ff feb7 	bl	8003dcc <_free_r>
 800405e:	230c      	movs	r3, #12
 8004060:	f8ca 3000 	str.w	r3, [sl]
 8004064:	89a3      	ldrh	r3, [r4, #12]
 8004066:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800406a:	81a3      	strh	r3, [r4, #12]
 800406c:	f04f 30ff 	mov.w	r0, #4294967295
 8004070:	e7e9      	b.n	8004046 <__ssputs_r+0x8a>
	...

08004074 <_svfiprintf_r>:
 8004074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004078:	4698      	mov	r8, r3
 800407a:	898b      	ldrh	r3, [r1, #12]
 800407c:	061b      	lsls	r3, r3, #24
 800407e:	b09d      	sub	sp, #116	@ 0x74
 8004080:	4607      	mov	r7, r0
 8004082:	460d      	mov	r5, r1
 8004084:	4614      	mov	r4, r2
 8004086:	d510      	bpl.n	80040aa <_svfiprintf_r+0x36>
 8004088:	690b      	ldr	r3, [r1, #16]
 800408a:	b973      	cbnz	r3, 80040aa <_svfiprintf_r+0x36>
 800408c:	2140      	movs	r1, #64	@ 0x40
 800408e:	f7ff ff09 	bl	8003ea4 <_malloc_r>
 8004092:	6028      	str	r0, [r5, #0]
 8004094:	6128      	str	r0, [r5, #16]
 8004096:	b930      	cbnz	r0, 80040a6 <_svfiprintf_r+0x32>
 8004098:	230c      	movs	r3, #12
 800409a:	603b      	str	r3, [r7, #0]
 800409c:	f04f 30ff 	mov.w	r0, #4294967295
 80040a0:	b01d      	add	sp, #116	@ 0x74
 80040a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040a6:	2340      	movs	r3, #64	@ 0x40
 80040a8:	616b      	str	r3, [r5, #20]
 80040aa:	2300      	movs	r3, #0
 80040ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80040ae:	2320      	movs	r3, #32
 80040b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80040b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80040b8:	2330      	movs	r3, #48	@ 0x30
 80040ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004258 <_svfiprintf_r+0x1e4>
 80040be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80040c2:	f04f 0901 	mov.w	r9, #1
 80040c6:	4623      	mov	r3, r4
 80040c8:	469a      	mov	sl, r3
 80040ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040ce:	b10a      	cbz	r2, 80040d4 <_svfiprintf_r+0x60>
 80040d0:	2a25      	cmp	r2, #37	@ 0x25
 80040d2:	d1f9      	bne.n	80040c8 <_svfiprintf_r+0x54>
 80040d4:	ebba 0b04 	subs.w	fp, sl, r4
 80040d8:	d00b      	beq.n	80040f2 <_svfiprintf_r+0x7e>
 80040da:	465b      	mov	r3, fp
 80040dc:	4622      	mov	r2, r4
 80040de:	4629      	mov	r1, r5
 80040e0:	4638      	mov	r0, r7
 80040e2:	f7ff ff6b 	bl	8003fbc <__ssputs_r>
 80040e6:	3001      	adds	r0, #1
 80040e8:	f000 80a7 	beq.w	800423a <_svfiprintf_r+0x1c6>
 80040ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80040ee:	445a      	add	r2, fp
 80040f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80040f2:	f89a 3000 	ldrb.w	r3, [sl]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 809f 	beq.w	800423a <_svfiprintf_r+0x1c6>
 80040fc:	2300      	movs	r3, #0
 80040fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004102:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004106:	f10a 0a01 	add.w	sl, sl, #1
 800410a:	9304      	str	r3, [sp, #16]
 800410c:	9307      	str	r3, [sp, #28]
 800410e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004112:	931a      	str	r3, [sp, #104]	@ 0x68
 8004114:	4654      	mov	r4, sl
 8004116:	2205      	movs	r2, #5
 8004118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800411c:	484e      	ldr	r0, [pc, #312]	@ (8004258 <_svfiprintf_r+0x1e4>)
 800411e:	f7fc f85f 	bl	80001e0 <memchr>
 8004122:	9a04      	ldr	r2, [sp, #16]
 8004124:	b9d8      	cbnz	r0, 800415e <_svfiprintf_r+0xea>
 8004126:	06d0      	lsls	r0, r2, #27
 8004128:	bf44      	itt	mi
 800412a:	2320      	movmi	r3, #32
 800412c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004130:	0711      	lsls	r1, r2, #28
 8004132:	bf44      	itt	mi
 8004134:	232b      	movmi	r3, #43	@ 0x2b
 8004136:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800413a:	f89a 3000 	ldrb.w	r3, [sl]
 800413e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004140:	d015      	beq.n	800416e <_svfiprintf_r+0xfa>
 8004142:	9a07      	ldr	r2, [sp, #28]
 8004144:	4654      	mov	r4, sl
 8004146:	2000      	movs	r0, #0
 8004148:	f04f 0c0a 	mov.w	ip, #10
 800414c:	4621      	mov	r1, r4
 800414e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004152:	3b30      	subs	r3, #48	@ 0x30
 8004154:	2b09      	cmp	r3, #9
 8004156:	d94b      	bls.n	80041f0 <_svfiprintf_r+0x17c>
 8004158:	b1b0      	cbz	r0, 8004188 <_svfiprintf_r+0x114>
 800415a:	9207      	str	r2, [sp, #28]
 800415c:	e014      	b.n	8004188 <_svfiprintf_r+0x114>
 800415e:	eba0 0308 	sub.w	r3, r0, r8
 8004162:	fa09 f303 	lsl.w	r3, r9, r3
 8004166:	4313      	orrs	r3, r2
 8004168:	9304      	str	r3, [sp, #16]
 800416a:	46a2      	mov	sl, r4
 800416c:	e7d2      	b.n	8004114 <_svfiprintf_r+0xa0>
 800416e:	9b03      	ldr	r3, [sp, #12]
 8004170:	1d19      	adds	r1, r3, #4
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	9103      	str	r1, [sp, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	bfbb      	ittet	lt
 800417a:	425b      	neglt	r3, r3
 800417c:	f042 0202 	orrlt.w	r2, r2, #2
 8004180:	9307      	strge	r3, [sp, #28]
 8004182:	9307      	strlt	r3, [sp, #28]
 8004184:	bfb8      	it	lt
 8004186:	9204      	strlt	r2, [sp, #16]
 8004188:	7823      	ldrb	r3, [r4, #0]
 800418a:	2b2e      	cmp	r3, #46	@ 0x2e
 800418c:	d10a      	bne.n	80041a4 <_svfiprintf_r+0x130>
 800418e:	7863      	ldrb	r3, [r4, #1]
 8004190:	2b2a      	cmp	r3, #42	@ 0x2a
 8004192:	d132      	bne.n	80041fa <_svfiprintf_r+0x186>
 8004194:	9b03      	ldr	r3, [sp, #12]
 8004196:	1d1a      	adds	r2, r3, #4
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	9203      	str	r2, [sp, #12]
 800419c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80041a0:	3402      	adds	r4, #2
 80041a2:	9305      	str	r3, [sp, #20]
 80041a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004268 <_svfiprintf_r+0x1f4>
 80041a8:	7821      	ldrb	r1, [r4, #0]
 80041aa:	2203      	movs	r2, #3
 80041ac:	4650      	mov	r0, sl
 80041ae:	f7fc f817 	bl	80001e0 <memchr>
 80041b2:	b138      	cbz	r0, 80041c4 <_svfiprintf_r+0x150>
 80041b4:	9b04      	ldr	r3, [sp, #16]
 80041b6:	eba0 000a 	sub.w	r0, r0, sl
 80041ba:	2240      	movs	r2, #64	@ 0x40
 80041bc:	4082      	lsls	r2, r0
 80041be:	4313      	orrs	r3, r2
 80041c0:	3401      	adds	r4, #1
 80041c2:	9304      	str	r3, [sp, #16]
 80041c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041c8:	4824      	ldr	r0, [pc, #144]	@ (800425c <_svfiprintf_r+0x1e8>)
 80041ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80041ce:	2206      	movs	r2, #6
 80041d0:	f7fc f806 	bl	80001e0 <memchr>
 80041d4:	2800      	cmp	r0, #0
 80041d6:	d036      	beq.n	8004246 <_svfiprintf_r+0x1d2>
 80041d8:	4b21      	ldr	r3, [pc, #132]	@ (8004260 <_svfiprintf_r+0x1ec>)
 80041da:	bb1b      	cbnz	r3, 8004224 <_svfiprintf_r+0x1b0>
 80041dc:	9b03      	ldr	r3, [sp, #12]
 80041de:	3307      	adds	r3, #7
 80041e0:	f023 0307 	bic.w	r3, r3, #7
 80041e4:	3308      	adds	r3, #8
 80041e6:	9303      	str	r3, [sp, #12]
 80041e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041ea:	4433      	add	r3, r6
 80041ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80041ee:	e76a      	b.n	80040c6 <_svfiprintf_r+0x52>
 80041f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80041f4:	460c      	mov	r4, r1
 80041f6:	2001      	movs	r0, #1
 80041f8:	e7a8      	b.n	800414c <_svfiprintf_r+0xd8>
 80041fa:	2300      	movs	r3, #0
 80041fc:	3401      	adds	r4, #1
 80041fe:	9305      	str	r3, [sp, #20]
 8004200:	4619      	mov	r1, r3
 8004202:	f04f 0c0a 	mov.w	ip, #10
 8004206:	4620      	mov	r0, r4
 8004208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800420c:	3a30      	subs	r2, #48	@ 0x30
 800420e:	2a09      	cmp	r2, #9
 8004210:	d903      	bls.n	800421a <_svfiprintf_r+0x1a6>
 8004212:	2b00      	cmp	r3, #0
 8004214:	d0c6      	beq.n	80041a4 <_svfiprintf_r+0x130>
 8004216:	9105      	str	r1, [sp, #20]
 8004218:	e7c4      	b.n	80041a4 <_svfiprintf_r+0x130>
 800421a:	fb0c 2101 	mla	r1, ip, r1, r2
 800421e:	4604      	mov	r4, r0
 8004220:	2301      	movs	r3, #1
 8004222:	e7f0      	b.n	8004206 <_svfiprintf_r+0x192>
 8004224:	ab03      	add	r3, sp, #12
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	462a      	mov	r2, r5
 800422a:	4b0e      	ldr	r3, [pc, #56]	@ (8004264 <_svfiprintf_r+0x1f0>)
 800422c:	a904      	add	r1, sp, #16
 800422e:	4638      	mov	r0, r7
 8004230:	f3af 8000 	nop.w
 8004234:	1c42      	adds	r2, r0, #1
 8004236:	4606      	mov	r6, r0
 8004238:	d1d6      	bne.n	80041e8 <_svfiprintf_r+0x174>
 800423a:	89ab      	ldrh	r3, [r5, #12]
 800423c:	065b      	lsls	r3, r3, #25
 800423e:	f53f af2d 	bmi.w	800409c <_svfiprintf_r+0x28>
 8004242:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004244:	e72c      	b.n	80040a0 <_svfiprintf_r+0x2c>
 8004246:	ab03      	add	r3, sp, #12
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	462a      	mov	r2, r5
 800424c:	4b05      	ldr	r3, [pc, #20]	@ (8004264 <_svfiprintf_r+0x1f0>)
 800424e:	a904      	add	r1, sp, #16
 8004250:	4638      	mov	r0, r7
 8004252:	f000 f879 	bl	8004348 <_printf_i>
 8004256:	e7ed      	b.n	8004234 <_svfiprintf_r+0x1c0>
 8004258:	080046e0 	.word	0x080046e0
 800425c:	080046ea 	.word	0x080046ea
 8004260:	00000000 	.word	0x00000000
 8004264:	08003fbd 	.word	0x08003fbd
 8004268:	080046e6 	.word	0x080046e6

0800426c <_printf_common>:
 800426c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004270:	4616      	mov	r6, r2
 8004272:	4698      	mov	r8, r3
 8004274:	688a      	ldr	r2, [r1, #8]
 8004276:	690b      	ldr	r3, [r1, #16]
 8004278:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800427c:	4293      	cmp	r3, r2
 800427e:	bfb8      	it	lt
 8004280:	4613      	movlt	r3, r2
 8004282:	6033      	str	r3, [r6, #0]
 8004284:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004288:	4607      	mov	r7, r0
 800428a:	460c      	mov	r4, r1
 800428c:	b10a      	cbz	r2, 8004292 <_printf_common+0x26>
 800428e:	3301      	adds	r3, #1
 8004290:	6033      	str	r3, [r6, #0]
 8004292:	6823      	ldr	r3, [r4, #0]
 8004294:	0699      	lsls	r1, r3, #26
 8004296:	bf42      	ittt	mi
 8004298:	6833      	ldrmi	r3, [r6, #0]
 800429a:	3302      	addmi	r3, #2
 800429c:	6033      	strmi	r3, [r6, #0]
 800429e:	6825      	ldr	r5, [r4, #0]
 80042a0:	f015 0506 	ands.w	r5, r5, #6
 80042a4:	d106      	bne.n	80042b4 <_printf_common+0x48>
 80042a6:	f104 0a19 	add.w	sl, r4, #25
 80042aa:	68e3      	ldr	r3, [r4, #12]
 80042ac:	6832      	ldr	r2, [r6, #0]
 80042ae:	1a9b      	subs	r3, r3, r2
 80042b0:	42ab      	cmp	r3, r5
 80042b2:	dc26      	bgt.n	8004302 <_printf_common+0x96>
 80042b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80042b8:	6822      	ldr	r2, [r4, #0]
 80042ba:	3b00      	subs	r3, #0
 80042bc:	bf18      	it	ne
 80042be:	2301      	movne	r3, #1
 80042c0:	0692      	lsls	r2, r2, #26
 80042c2:	d42b      	bmi.n	800431c <_printf_common+0xb0>
 80042c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80042c8:	4641      	mov	r1, r8
 80042ca:	4638      	mov	r0, r7
 80042cc:	47c8      	blx	r9
 80042ce:	3001      	adds	r0, #1
 80042d0:	d01e      	beq.n	8004310 <_printf_common+0xa4>
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	6922      	ldr	r2, [r4, #16]
 80042d6:	f003 0306 	and.w	r3, r3, #6
 80042da:	2b04      	cmp	r3, #4
 80042dc:	bf02      	ittt	eq
 80042de:	68e5      	ldreq	r5, [r4, #12]
 80042e0:	6833      	ldreq	r3, [r6, #0]
 80042e2:	1aed      	subeq	r5, r5, r3
 80042e4:	68a3      	ldr	r3, [r4, #8]
 80042e6:	bf0c      	ite	eq
 80042e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042ec:	2500      	movne	r5, #0
 80042ee:	4293      	cmp	r3, r2
 80042f0:	bfc4      	itt	gt
 80042f2:	1a9b      	subgt	r3, r3, r2
 80042f4:	18ed      	addgt	r5, r5, r3
 80042f6:	2600      	movs	r6, #0
 80042f8:	341a      	adds	r4, #26
 80042fa:	42b5      	cmp	r5, r6
 80042fc:	d11a      	bne.n	8004334 <_printf_common+0xc8>
 80042fe:	2000      	movs	r0, #0
 8004300:	e008      	b.n	8004314 <_printf_common+0xa8>
 8004302:	2301      	movs	r3, #1
 8004304:	4652      	mov	r2, sl
 8004306:	4641      	mov	r1, r8
 8004308:	4638      	mov	r0, r7
 800430a:	47c8      	blx	r9
 800430c:	3001      	adds	r0, #1
 800430e:	d103      	bne.n	8004318 <_printf_common+0xac>
 8004310:	f04f 30ff 	mov.w	r0, #4294967295
 8004314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004318:	3501      	adds	r5, #1
 800431a:	e7c6      	b.n	80042aa <_printf_common+0x3e>
 800431c:	18e1      	adds	r1, r4, r3
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	2030      	movs	r0, #48	@ 0x30
 8004322:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004326:	4422      	add	r2, r4
 8004328:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800432c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004330:	3302      	adds	r3, #2
 8004332:	e7c7      	b.n	80042c4 <_printf_common+0x58>
 8004334:	2301      	movs	r3, #1
 8004336:	4622      	mov	r2, r4
 8004338:	4641      	mov	r1, r8
 800433a:	4638      	mov	r0, r7
 800433c:	47c8      	blx	r9
 800433e:	3001      	adds	r0, #1
 8004340:	d0e6      	beq.n	8004310 <_printf_common+0xa4>
 8004342:	3601      	adds	r6, #1
 8004344:	e7d9      	b.n	80042fa <_printf_common+0x8e>
	...

08004348 <_printf_i>:
 8004348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800434c:	7e0f      	ldrb	r7, [r1, #24]
 800434e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004350:	2f78      	cmp	r7, #120	@ 0x78
 8004352:	4691      	mov	r9, r2
 8004354:	4680      	mov	r8, r0
 8004356:	460c      	mov	r4, r1
 8004358:	469a      	mov	sl, r3
 800435a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800435e:	d807      	bhi.n	8004370 <_printf_i+0x28>
 8004360:	2f62      	cmp	r7, #98	@ 0x62
 8004362:	d80a      	bhi.n	800437a <_printf_i+0x32>
 8004364:	2f00      	cmp	r7, #0
 8004366:	f000 80d2 	beq.w	800450e <_printf_i+0x1c6>
 800436a:	2f58      	cmp	r7, #88	@ 0x58
 800436c:	f000 80b9 	beq.w	80044e2 <_printf_i+0x19a>
 8004370:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004374:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004378:	e03a      	b.n	80043f0 <_printf_i+0xa8>
 800437a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800437e:	2b15      	cmp	r3, #21
 8004380:	d8f6      	bhi.n	8004370 <_printf_i+0x28>
 8004382:	a101      	add	r1, pc, #4	@ (adr r1, 8004388 <_printf_i+0x40>)
 8004384:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004388:	080043e1 	.word	0x080043e1
 800438c:	080043f5 	.word	0x080043f5
 8004390:	08004371 	.word	0x08004371
 8004394:	08004371 	.word	0x08004371
 8004398:	08004371 	.word	0x08004371
 800439c:	08004371 	.word	0x08004371
 80043a0:	080043f5 	.word	0x080043f5
 80043a4:	08004371 	.word	0x08004371
 80043a8:	08004371 	.word	0x08004371
 80043ac:	08004371 	.word	0x08004371
 80043b0:	08004371 	.word	0x08004371
 80043b4:	080044f5 	.word	0x080044f5
 80043b8:	0800441f 	.word	0x0800441f
 80043bc:	080044af 	.word	0x080044af
 80043c0:	08004371 	.word	0x08004371
 80043c4:	08004371 	.word	0x08004371
 80043c8:	08004517 	.word	0x08004517
 80043cc:	08004371 	.word	0x08004371
 80043d0:	0800441f 	.word	0x0800441f
 80043d4:	08004371 	.word	0x08004371
 80043d8:	08004371 	.word	0x08004371
 80043dc:	080044b7 	.word	0x080044b7
 80043e0:	6833      	ldr	r3, [r6, #0]
 80043e2:	1d1a      	adds	r2, r3, #4
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6032      	str	r2, [r6, #0]
 80043e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80043ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80043f0:	2301      	movs	r3, #1
 80043f2:	e09d      	b.n	8004530 <_printf_i+0x1e8>
 80043f4:	6833      	ldr	r3, [r6, #0]
 80043f6:	6820      	ldr	r0, [r4, #0]
 80043f8:	1d19      	adds	r1, r3, #4
 80043fa:	6031      	str	r1, [r6, #0]
 80043fc:	0606      	lsls	r6, r0, #24
 80043fe:	d501      	bpl.n	8004404 <_printf_i+0xbc>
 8004400:	681d      	ldr	r5, [r3, #0]
 8004402:	e003      	b.n	800440c <_printf_i+0xc4>
 8004404:	0645      	lsls	r5, r0, #25
 8004406:	d5fb      	bpl.n	8004400 <_printf_i+0xb8>
 8004408:	f9b3 5000 	ldrsh.w	r5, [r3]
 800440c:	2d00      	cmp	r5, #0
 800440e:	da03      	bge.n	8004418 <_printf_i+0xd0>
 8004410:	232d      	movs	r3, #45	@ 0x2d
 8004412:	426d      	negs	r5, r5
 8004414:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004418:	4859      	ldr	r0, [pc, #356]	@ (8004580 <_printf_i+0x238>)
 800441a:	230a      	movs	r3, #10
 800441c:	e011      	b.n	8004442 <_printf_i+0xfa>
 800441e:	6821      	ldr	r1, [r4, #0]
 8004420:	6833      	ldr	r3, [r6, #0]
 8004422:	0608      	lsls	r0, r1, #24
 8004424:	f853 5b04 	ldr.w	r5, [r3], #4
 8004428:	d402      	bmi.n	8004430 <_printf_i+0xe8>
 800442a:	0649      	lsls	r1, r1, #25
 800442c:	bf48      	it	mi
 800442e:	b2ad      	uxthmi	r5, r5
 8004430:	2f6f      	cmp	r7, #111	@ 0x6f
 8004432:	4853      	ldr	r0, [pc, #332]	@ (8004580 <_printf_i+0x238>)
 8004434:	6033      	str	r3, [r6, #0]
 8004436:	bf14      	ite	ne
 8004438:	230a      	movne	r3, #10
 800443a:	2308      	moveq	r3, #8
 800443c:	2100      	movs	r1, #0
 800443e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004442:	6866      	ldr	r6, [r4, #4]
 8004444:	60a6      	str	r6, [r4, #8]
 8004446:	2e00      	cmp	r6, #0
 8004448:	bfa2      	ittt	ge
 800444a:	6821      	ldrge	r1, [r4, #0]
 800444c:	f021 0104 	bicge.w	r1, r1, #4
 8004450:	6021      	strge	r1, [r4, #0]
 8004452:	b90d      	cbnz	r5, 8004458 <_printf_i+0x110>
 8004454:	2e00      	cmp	r6, #0
 8004456:	d04b      	beq.n	80044f0 <_printf_i+0x1a8>
 8004458:	4616      	mov	r6, r2
 800445a:	fbb5 f1f3 	udiv	r1, r5, r3
 800445e:	fb03 5711 	mls	r7, r3, r1, r5
 8004462:	5dc7      	ldrb	r7, [r0, r7]
 8004464:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004468:	462f      	mov	r7, r5
 800446a:	42bb      	cmp	r3, r7
 800446c:	460d      	mov	r5, r1
 800446e:	d9f4      	bls.n	800445a <_printf_i+0x112>
 8004470:	2b08      	cmp	r3, #8
 8004472:	d10b      	bne.n	800448c <_printf_i+0x144>
 8004474:	6823      	ldr	r3, [r4, #0]
 8004476:	07df      	lsls	r7, r3, #31
 8004478:	d508      	bpl.n	800448c <_printf_i+0x144>
 800447a:	6923      	ldr	r3, [r4, #16]
 800447c:	6861      	ldr	r1, [r4, #4]
 800447e:	4299      	cmp	r1, r3
 8004480:	bfde      	ittt	le
 8004482:	2330      	movle	r3, #48	@ 0x30
 8004484:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004488:	f106 36ff 	addle.w	r6, r6, #4294967295
 800448c:	1b92      	subs	r2, r2, r6
 800448e:	6122      	str	r2, [r4, #16]
 8004490:	f8cd a000 	str.w	sl, [sp]
 8004494:	464b      	mov	r3, r9
 8004496:	aa03      	add	r2, sp, #12
 8004498:	4621      	mov	r1, r4
 800449a:	4640      	mov	r0, r8
 800449c:	f7ff fee6 	bl	800426c <_printf_common>
 80044a0:	3001      	adds	r0, #1
 80044a2:	d14a      	bne.n	800453a <_printf_i+0x1f2>
 80044a4:	f04f 30ff 	mov.w	r0, #4294967295
 80044a8:	b004      	add	sp, #16
 80044aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	f043 0320 	orr.w	r3, r3, #32
 80044b4:	6023      	str	r3, [r4, #0]
 80044b6:	4833      	ldr	r0, [pc, #204]	@ (8004584 <_printf_i+0x23c>)
 80044b8:	2778      	movs	r7, #120	@ 0x78
 80044ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80044be:	6823      	ldr	r3, [r4, #0]
 80044c0:	6831      	ldr	r1, [r6, #0]
 80044c2:	061f      	lsls	r7, r3, #24
 80044c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80044c8:	d402      	bmi.n	80044d0 <_printf_i+0x188>
 80044ca:	065f      	lsls	r7, r3, #25
 80044cc:	bf48      	it	mi
 80044ce:	b2ad      	uxthmi	r5, r5
 80044d0:	6031      	str	r1, [r6, #0]
 80044d2:	07d9      	lsls	r1, r3, #31
 80044d4:	bf44      	itt	mi
 80044d6:	f043 0320 	orrmi.w	r3, r3, #32
 80044da:	6023      	strmi	r3, [r4, #0]
 80044dc:	b11d      	cbz	r5, 80044e6 <_printf_i+0x19e>
 80044de:	2310      	movs	r3, #16
 80044e0:	e7ac      	b.n	800443c <_printf_i+0xf4>
 80044e2:	4827      	ldr	r0, [pc, #156]	@ (8004580 <_printf_i+0x238>)
 80044e4:	e7e9      	b.n	80044ba <_printf_i+0x172>
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	f023 0320 	bic.w	r3, r3, #32
 80044ec:	6023      	str	r3, [r4, #0]
 80044ee:	e7f6      	b.n	80044de <_printf_i+0x196>
 80044f0:	4616      	mov	r6, r2
 80044f2:	e7bd      	b.n	8004470 <_printf_i+0x128>
 80044f4:	6833      	ldr	r3, [r6, #0]
 80044f6:	6825      	ldr	r5, [r4, #0]
 80044f8:	6961      	ldr	r1, [r4, #20]
 80044fa:	1d18      	adds	r0, r3, #4
 80044fc:	6030      	str	r0, [r6, #0]
 80044fe:	062e      	lsls	r6, r5, #24
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	d501      	bpl.n	8004508 <_printf_i+0x1c0>
 8004504:	6019      	str	r1, [r3, #0]
 8004506:	e002      	b.n	800450e <_printf_i+0x1c6>
 8004508:	0668      	lsls	r0, r5, #25
 800450a:	d5fb      	bpl.n	8004504 <_printf_i+0x1bc>
 800450c:	8019      	strh	r1, [r3, #0]
 800450e:	2300      	movs	r3, #0
 8004510:	6123      	str	r3, [r4, #16]
 8004512:	4616      	mov	r6, r2
 8004514:	e7bc      	b.n	8004490 <_printf_i+0x148>
 8004516:	6833      	ldr	r3, [r6, #0]
 8004518:	1d1a      	adds	r2, r3, #4
 800451a:	6032      	str	r2, [r6, #0]
 800451c:	681e      	ldr	r6, [r3, #0]
 800451e:	6862      	ldr	r2, [r4, #4]
 8004520:	2100      	movs	r1, #0
 8004522:	4630      	mov	r0, r6
 8004524:	f7fb fe5c 	bl	80001e0 <memchr>
 8004528:	b108      	cbz	r0, 800452e <_printf_i+0x1e6>
 800452a:	1b80      	subs	r0, r0, r6
 800452c:	6060      	str	r0, [r4, #4]
 800452e:	6863      	ldr	r3, [r4, #4]
 8004530:	6123      	str	r3, [r4, #16]
 8004532:	2300      	movs	r3, #0
 8004534:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004538:	e7aa      	b.n	8004490 <_printf_i+0x148>
 800453a:	6923      	ldr	r3, [r4, #16]
 800453c:	4632      	mov	r2, r6
 800453e:	4649      	mov	r1, r9
 8004540:	4640      	mov	r0, r8
 8004542:	47d0      	blx	sl
 8004544:	3001      	adds	r0, #1
 8004546:	d0ad      	beq.n	80044a4 <_printf_i+0x15c>
 8004548:	6823      	ldr	r3, [r4, #0]
 800454a:	079b      	lsls	r3, r3, #30
 800454c:	d413      	bmi.n	8004576 <_printf_i+0x22e>
 800454e:	68e0      	ldr	r0, [r4, #12]
 8004550:	9b03      	ldr	r3, [sp, #12]
 8004552:	4298      	cmp	r0, r3
 8004554:	bfb8      	it	lt
 8004556:	4618      	movlt	r0, r3
 8004558:	e7a6      	b.n	80044a8 <_printf_i+0x160>
 800455a:	2301      	movs	r3, #1
 800455c:	4632      	mov	r2, r6
 800455e:	4649      	mov	r1, r9
 8004560:	4640      	mov	r0, r8
 8004562:	47d0      	blx	sl
 8004564:	3001      	adds	r0, #1
 8004566:	d09d      	beq.n	80044a4 <_printf_i+0x15c>
 8004568:	3501      	adds	r5, #1
 800456a:	68e3      	ldr	r3, [r4, #12]
 800456c:	9903      	ldr	r1, [sp, #12]
 800456e:	1a5b      	subs	r3, r3, r1
 8004570:	42ab      	cmp	r3, r5
 8004572:	dcf2      	bgt.n	800455a <_printf_i+0x212>
 8004574:	e7eb      	b.n	800454e <_printf_i+0x206>
 8004576:	2500      	movs	r5, #0
 8004578:	f104 0619 	add.w	r6, r4, #25
 800457c:	e7f5      	b.n	800456a <_printf_i+0x222>
 800457e:	bf00      	nop
 8004580:	080046f1 	.word	0x080046f1
 8004584:	08004702 	.word	0x08004702

08004588 <memmove>:
 8004588:	4288      	cmp	r0, r1
 800458a:	b510      	push	{r4, lr}
 800458c:	eb01 0402 	add.w	r4, r1, r2
 8004590:	d902      	bls.n	8004598 <memmove+0x10>
 8004592:	4284      	cmp	r4, r0
 8004594:	4623      	mov	r3, r4
 8004596:	d807      	bhi.n	80045a8 <memmove+0x20>
 8004598:	1e43      	subs	r3, r0, #1
 800459a:	42a1      	cmp	r1, r4
 800459c:	d008      	beq.n	80045b0 <memmove+0x28>
 800459e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045a6:	e7f8      	b.n	800459a <memmove+0x12>
 80045a8:	4402      	add	r2, r0
 80045aa:	4601      	mov	r1, r0
 80045ac:	428a      	cmp	r2, r1
 80045ae:	d100      	bne.n	80045b2 <memmove+0x2a>
 80045b0:	bd10      	pop	{r4, pc}
 80045b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045ba:	e7f7      	b.n	80045ac <memmove+0x24>

080045bc <_sbrk_r>:
 80045bc:	b538      	push	{r3, r4, r5, lr}
 80045be:	4d06      	ldr	r5, [pc, #24]	@ (80045d8 <_sbrk_r+0x1c>)
 80045c0:	2300      	movs	r3, #0
 80045c2:	4604      	mov	r4, r0
 80045c4:	4608      	mov	r0, r1
 80045c6:	602b      	str	r3, [r5, #0]
 80045c8:	f7fc f946 	bl	8000858 <_sbrk>
 80045cc:	1c43      	adds	r3, r0, #1
 80045ce:	d102      	bne.n	80045d6 <_sbrk_r+0x1a>
 80045d0:	682b      	ldr	r3, [r5, #0]
 80045d2:	b103      	cbz	r3, 80045d6 <_sbrk_r+0x1a>
 80045d4:	6023      	str	r3, [r4, #0]
 80045d6:	bd38      	pop	{r3, r4, r5, pc}
 80045d8:	200002cc 	.word	0x200002cc

080045dc <memcpy>:
 80045dc:	440a      	add	r2, r1
 80045de:	4291      	cmp	r1, r2
 80045e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80045e4:	d100      	bne.n	80045e8 <memcpy+0xc>
 80045e6:	4770      	bx	lr
 80045e8:	b510      	push	{r4, lr}
 80045ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045f2:	4291      	cmp	r1, r2
 80045f4:	d1f9      	bne.n	80045ea <memcpy+0xe>
 80045f6:	bd10      	pop	{r4, pc}

080045f8 <_realloc_r>:
 80045f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045fc:	4680      	mov	r8, r0
 80045fe:	4615      	mov	r5, r2
 8004600:	460c      	mov	r4, r1
 8004602:	b921      	cbnz	r1, 800460e <_realloc_r+0x16>
 8004604:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004608:	4611      	mov	r1, r2
 800460a:	f7ff bc4b 	b.w	8003ea4 <_malloc_r>
 800460e:	b92a      	cbnz	r2, 800461c <_realloc_r+0x24>
 8004610:	f7ff fbdc 	bl	8003dcc <_free_r>
 8004614:	2400      	movs	r4, #0
 8004616:	4620      	mov	r0, r4
 8004618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800461c:	f000 f81a 	bl	8004654 <_malloc_usable_size_r>
 8004620:	4285      	cmp	r5, r0
 8004622:	4606      	mov	r6, r0
 8004624:	d802      	bhi.n	800462c <_realloc_r+0x34>
 8004626:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800462a:	d8f4      	bhi.n	8004616 <_realloc_r+0x1e>
 800462c:	4629      	mov	r1, r5
 800462e:	4640      	mov	r0, r8
 8004630:	f7ff fc38 	bl	8003ea4 <_malloc_r>
 8004634:	4607      	mov	r7, r0
 8004636:	2800      	cmp	r0, #0
 8004638:	d0ec      	beq.n	8004614 <_realloc_r+0x1c>
 800463a:	42b5      	cmp	r5, r6
 800463c:	462a      	mov	r2, r5
 800463e:	4621      	mov	r1, r4
 8004640:	bf28      	it	cs
 8004642:	4632      	movcs	r2, r6
 8004644:	f7ff ffca 	bl	80045dc <memcpy>
 8004648:	4621      	mov	r1, r4
 800464a:	4640      	mov	r0, r8
 800464c:	f7ff fbbe 	bl	8003dcc <_free_r>
 8004650:	463c      	mov	r4, r7
 8004652:	e7e0      	b.n	8004616 <_realloc_r+0x1e>

08004654 <_malloc_usable_size_r>:
 8004654:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004658:	1f18      	subs	r0, r3, #4
 800465a:	2b00      	cmp	r3, #0
 800465c:	bfbc      	itt	lt
 800465e:	580b      	ldrlt	r3, [r1, r0]
 8004660:	18c0      	addlt	r0, r0, r3
 8004662:	4770      	bx	lr

08004664 <_init>:
 8004664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004666:	bf00      	nop
 8004668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800466a:	bc08      	pop	{r3}
 800466c:	469e      	mov	lr, r3
 800466e:	4770      	bx	lr

08004670 <_fini>:
 8004670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004672:	bf00      	nop
 8004674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004676:	bc08      	pop	{r3}
 8004678:	469e      	mov	lr, r3
 800467a:	4770      	bx	lr
