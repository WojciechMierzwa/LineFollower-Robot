
Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b80  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08006d10  08006d10  00007d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e28  08006e28  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006e28  08006e28  00007e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e30  08006e30  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e30  08006e30  00007e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e34  08006e34  00007e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006e38  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  2000006c  08006ea4  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  08006ea4  00008424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fdf7  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000233e  00000000  00000000  00017e93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  0001a1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b2d  00000000  00000000  0001b028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ce84  00000000  00000000  0001bb55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d3f  00000000  00000000  000389d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a837c  00000000  00000000  0004a718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f2a94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004548  00000000  00000000  000f2ad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000f7020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006cf8 	.word	0x08006cf8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08006cf8 	.word	0x08006cf8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f001 fbeb 	bl	8001a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 fae9 	bl	8000850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 fd65 	bl	8000d4c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000282:	f000 fd33 	bl	8000cec <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000286:	f000 fd01 	bl	8000c8c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800028a:	f000 fb43 	bl	8000914 <MX_TIM1_Init>
  MX_TIM16_Init();
 800028e:	f000 fc5d 	bl	8000b4c <MX_TIM16_Init>
  MX_TIM2_Init();
 8000292:	f000 fbf7 	bl	8000a84 <MX_TIM2_Init>
  MX_TIM17_Init();
 8000296:	f000 fcd3 	bl	8000c40 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 800029a:	48a8      	ldr	r0, [pc, #672]	@ (800053c <main+0x2cc>)
 800029c:	f003 fbea 	bl	8003a74 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 80002a0:	2200      	movs	r2, #0
 80002a2:	2102      	movs	r1, #2
 80002a4:	48a6      	ldr	r0, [pc, #664]	@ (8000540 <main+0x2d0>)
 80002a6:	f001 ff6f 	bl	8002188 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80002aa:	2100      	movs	r1, #0
 80002ac:	48a5      	ldr	r0, [pc, #660]	@ (8000544 <main+0x2d4>)
 80002ae:	f003 fc85 	bl	8003bbc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80002b2:	2100      	movs	r1, #0
 80002b4:	48a1      	ldr	r0, [pc, #644]	@ (800053c <main+0x2cc>)
 80002b6:	f003 fc81 	bl	8003bbc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80002ba:	210c      	movs	r1, #12
 80002bc:	489f      	ldr	r0, [pc, #636]	@ (800053c <main+0x2cc>)
 80002be:	f003 fc7d 	bl	8003bbc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80002c2:	2100      	movs	r1, #0
 80002c4:	48a0      	ldr	r0, [pc, #640]	@ (8000548 <main+0x2d8>)
 80002c6:	f003 fc79 	bl	8003bbc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80002ca:	2108      	movs	r1, #8
 80002cc:	489e      	ldr	r0, [pc, #632]	@ (8000548 <main+0x2d8>)
 80002ce:	f003 fc75 	bl	8003bbc <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //set_ang(0, 0);

  uint16_t counter=1;
 80002d2:	2301      	movs	r3, #1
 80002d4:	80fb      	strh	r3, [r7, #6]
  uint16_t distance;
  set_ang(450, 0);
 80002d6:	2100      	movs	r1, #0
 80002d8:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 80002dc:	f000 fe4e 	bl	8000f7c <set_ang>


  /**/

  srand(time(NULL));
 80002e0:	2000      	movs	r0, #0
 80002e2:	f005 fe41 	bl	8005f68 <time>
 80002e6:	4602      	mov	r2, r0
 80002e8:	460b      	mov	r3, r1
 80002ea:	4613      	mov	r3, r2
 80002ec:	4618      	mov	r0, r3
 80002ee:	f005 fcff 	bl	8005cf0 <srand>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(counter>3){
 80002f2:	88fb      	ldrh	r3, [r7, #6]
 80002f4:	2b03      	cmp	r3, #3
 80002f6:	d901      	bls.n	80002fc <main+0x8c>
	  	  	        	counter=1;
 80002f8:	2301      	movs	r3, #1
 80002fa:	80fb      	strh	r3, [r7, #6]
	  	  	        }
	  	  if (HAL_GPIO_ReadPin(ButtonExt_GPIO_Port, ButtonExt_Pin) == GPIO_PIN_SET)
 80002fc:	2104      	movs	r1, #4
 80002fe:	4893      	ldr	r0, [pc, #588]	@ (800054c <main+0x2dc>)
 8000300:	f001 ff2a 	bl	8002158 <HAL_GPIO_ReadPin>
 8000304:	4603      	mov	r3, r0
 8000306:	2b01      	cmp	r3, #1
 8000308:	d106      	bne.n	8000318 <main+0xa8>
	  	      {
	  	        counter++;
 800030a:	88fb      	ldrh	r3, [r7, #6]
 800030c:	3301      	adds	r3, #1
 800030e:	80fb      	strh	r3, [r7, #6]
	  	        HAL_Delay(500);
 8000310:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000314:	f001 fc02 	bl	8001b1c <HAL_Delay>

	  	      }

	  	  	  display_reset();
 8000318:	f001 f806 	bl	8001328 <display_reset>
	  	      switch (counter)
 800031c:	88fb      	ldrh	r3, [r7, #6]
 800031e:	3b01      	subs	r3, #1
 8000320:	2b05      	cmp	r3, #5
 8000322:	d8e6      	bhi.n	80002f2 <main+0x82>
 8000324:	a201      	add	r2, pc, #4	@ (adr r2, 800032c <main+0xbc>)
 8000326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800032a:	bf00      	nop
 800032c:	08000345 	.word	0x08000345
 8000330:	0800042f 	.word	0x0800042f
 8000334:	08000561 	.word	0x08000561
 8000338:	0800064b 	.word	0x0800064b
 800033c:	08000733 	.word	0x08000733
 8000340:	08000759 	.word	0x08000759
	  	      {
	  	      case 1:
	  	        display_reset();
 8000344:	f000 fff0 	bl	8001328 <display_reset>
	  	        display1();
 8000348:	f000 ff1e 	bl	8001188 <display1>
	  	        if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 800034c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000350:	487b      	ldr	r0, [pc, #492]	@ (8000540 <main+0x2d0>)
 8000352:	f001 ff01 	bl	8002158 <HAL_GPIO_ReadPin>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	f040 8260 	bne.w	800081e <main+0x5ae>
	  	        {
	  	        	//linefollower niezmodyfikowany nie widzi lini jedzie do tyłu
	  	        	countdown();
 800035e:	f001 f815 	bl	800138c <countdown>
	  	        	while(1){
	  	        		detect_states[0] = HAL_GPIO_ReadPin(DETECT1_GPIO_Port, DETECT1_Pin);
 8000362:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000366:	4876      	ldr	r0, [pc, #472]	@ (8000540 <main+0x2d0>)
 8000368:	f001 fef6 	bl	8002158 <HAL_GPIO_ReadPin>
 800036c:	4603      	mov	r3, r0
 800036e:	461a      	mov	r2, r3
 8000370:	4b77      	ldr	r3, [pc, #476]	@ (8000550 <main+0x2e0>)
 8000372:	701a      	strb	r2, [r3, #0]
	  	        		detect_states[1] = HAL_GPIO_ReadPin(DETECT2_GPIO_Port, DETECT2_Pin);
 8000374:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000378:	4871      	ldr	r0, [pc, #452]	@ (8000540 <main+0x2d0>)
 800037a:	f001 feed 	bl	8002158 <HAL_GPIO_ReadPin>
 800037e:	4603      	mov	r3, r0
 8000380:	461a      	mov	r2, r3
 8000382:	4b73      	ldr	r3, [pc, #460]	@ (8000550 <main+0x2e0>)
 8000384:	705a      	strb	r2, [r3, #1]
	  	        		detect_states[2] = HAL_GPIO_ReadPin(DETECT3_GPIO_Port, DETECT3_Pin);
 8000386:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800038a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800038e:	f001 fee3 	bl	8002158 <HAL_GPIO_ReadPin>
 8000392:	4603      	mov	r3, r0
 8000394:	461a      	mov	r2, r3
 8000396:	4b6e      	ldr	r3, [pc, #440]	@ (8000550 <main+0x2e0>)
 8000398:	709a      	strb	r2, [r3, #2]
	  	        		detect_states[3] = HAL_GPIO_ReadPin(DETECT4_GPIO_Port, DETECT4_Pin);
 800039a:	2180      	movs	r1, #128	@ 0x80
 800039c:	486b      	ldr	r0, [pc, #428]	@ (800054c <main+0x2dc>)
 800039e:	f001 fedb 	bl	8002158 <HAL_GPIO_ReadPin>
 80003a2:	4603      	mov	r3, r0
 80003a4:	461a      	mov	r2, r3
 80003a6:	4b6a      	ldr	r3, [pc, #424]	@ (8000550 <main+0x2e0>)
 80003a8:	70da      	strb	r2, [r3, #3]
	  	        		detect_states[4] = HAL_GPIO_ReadPin(DETECT5_GPIO_Port, DETECT5_Pin);
 80003aa:	2104      	movs	r1, #4
 80003ac:	4864      	ldr	r0, [pc, #400]	@ (8000540 <main+0x2d0>)
 80003ae:	f001 fed3 	bl	8002158 <HAL_GPIO_ReadPin>
 80003b2:	4603      	mov	r3, r0
 80003b4:	461a      	mov	r2, r3
 80003b6:	4b66      	ldr	r3, [pc, #408]	@ (8000550 <main+0x2e0>)
 80003b8:	711a      	strb	r2, [r3, #4]


	  	        		if(detect_states[2]==0)
 80003ba:	4b65      	ldr	r3, [pc, #404]	@ (8000550 <main+0x2e0>)
 80003bc:	789b      	ldrb	r3, [r3, #2]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d105      	bne.n	80003ce <main+0x15e>
	  	        		{
	  	        			motor_forward(cycle);
 80003c2:	4b64      	ldr	r3, [pc, #400]	@ (8000554 <main+0x2e4>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4618      	mov	r0, r3
 80003c8:	f000 fe1a 	bl	8001000 <motor_forward>
 80003cc:	e7c9      	b.n	8000362 <main+0xf2>
	  	        		}
	  	        		else{
	  	        			if(detect_states[1]==0 || detect_states[0]==0)
 80003ce:	4b60      	ldr	r3, [pc, #384]	@ (8000550 <main+0x2e0>)
 80003d0:	785b      	ldrb	r3, [r3, #1]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d003      	beq.n	80003de <main+0x16e>
 80003d6:	4b5e      	ldr	r3, [pc, #376]	@ (8000550 <main+0x2e0>)
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d10a      	bne.n	80003f4 <main+0x184>
	  	        			{
	  	        				motor_left(cycle);
 80003de:	4b5d      	ldr	r3, [pc, #372]	@ (8000554 <main+0x2e4>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4618      	mov	r0, r3
 80003e4:	f000 fe34 	bl	8001050 <motor_left>
	  	        				set_ang(900, 0);
 80003e8:	2100      	movs	r1, #0
 80003ea:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80003ee:	f000 fdc5 	bl	8000f7c <set_ang>
 80003f2:	e01b      	b.n	800042c <main+0x1bc>
	  	        			}
	  	        			else if(detect_states[3]==0 || detect_states[4]==0){
 80003f4:	4b56      	ldr	r3, [pc, #344]	@ (8000550 <main+0x2e0>)
 80003f6:	78db      	ldrb	r3, [r3, #3]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d003      	beq.n	8000404 <main+0x194>
 80003fc:	4b54      	ldr	r3, [pc, #336]	@ (8000550 <main+0x2e0>)
 80003fe:	791b      	ldrb	r3, [r3, #4]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d109      	bne.n	8000418 <main+0x1a8>
	  	        				motor_right(cycle);
 8000404:	4b53      	ldr	r3, [pc, #332]	@ (8000554 <main+0x2e4>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4618      	mov	r0, r3
 800040a:	f000 fe4d 	bl	80010a8 <motor_right>
	  	        				set_ang(0, 0);
 800040e:	2100      	movs	r1, #0
 8000410:	2000      	movs	r0, #0
 8000412:	f000 fdb3 	bl	8000f7c <set_ang>
 8000416:	e009      	b.n	800042c <main+0x1bc>
	  	        			}
	  	        			else{
	  	        				motor_backward(cycle);
 8000418:	4b4e      	ldr	r3, [pc, #312]	@ (8000554 <main+0x2e4>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4618      	mov	r0, r3
 800041e:	f000 fe6f 	bl	8001100 <motor_backward>
	  	        				set_ang(450, 0);
 8000422:	2100      	movs	r1, #0
 8000424:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000428:	f000 fda8 	bl	8000f7c <set_ang>
	  	        		detect_states[0] = HAL_GPIO_ReadPin(DETECT1_GPIO_Port, DETECT1_Pin);
 800042c:	e799      	b.n	8000362 <main+0xf2>
	  	        		}
	  	        	}
	  	        }
	  	        break;
	  	    case 2:
	  	    	  	        display_reset();
 800042e:	f000 ff7b 	bl	8001328 <display_reset>
	  	    	  	        display2();
 8000432:	f000 feb9 	bl	80011a8 <display2>
	  	    	  	        if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8000436:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800043a:	4841      	ldr	r0, [pc, #260]	@ (8000540 <main+0x2d0>)
 800043c:	f001 fe8c 	bl	8002158 <HAL_GPIO_ReadPin>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	f040 81ed 	bne.w	8000822 <main+0x5b2>
	  	    	  	        {
	  	    	  	        	//linefollower zmodyfikowany o 2 dodatkowe czujniki
	  	    	  	        	countdown();
 8000448:	f000 ffa0 	bl	800138c <countdown>
	  	    	  	        	while(1){
	  	    	  	        		detect_states[0] = HAL_GPIO_ReadPin(DETECT1_GPIO_Port, DETECT1_Pin);
 800044c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000450:	483b      	ldr	r0, [pc, #236]	@ (8000540 <main+0x2d0>)
 8000452:	f001 fe81 	bl	8002158 <HAL_GPIO_ReadPin>
 8000456:	4603      	mov	r3, r0
 8000458:	461a      	mov	r2, r3
 800045a:	4b3d      	ldr	r3, [pc, #244]	@ (8000550 <main+0x2e0>)
 800045c:	701a      	strb	r2, [r3, #0]
	  	    	  	        		detect_states[1] = HAL_GPIO_ReadPin(DETECT2_GPIO_Port, DETECT2_Pin);
 800045e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000462:	4837      	ldr	r0, [pc, #220]	@ (8000540 <main+0x2d0>)
 8000464:	f001 fe78 	bl	8002158 <HAL_GPIO_ReadPin>
 8000468:	4603      	mov	r3, r0
 800046a:	461a      	mov	r2, r3
 800046c:	4b38      	ldr	r3, [pc, #224]	@ (8000550 <main+0x2e0>)
 800046e:	705a      	strb	r2, [r3, #1]
	  	    	  	        		detect_states[2] = HAL_GPIO_ReadPin(DETECT3_GPIO_Port, DETECT3_Pin);
 8000470:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000474:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000478:	f001 fe6e 	bl	8002158 <HAL_GPIO_ReadPin>
 800047c:	4603      	mov	r3, r0
 800047e:	461a      	mov	r2, r3
 8000480:	4b33      	ldr	r3, [pc, #204]	@ (8000550 <main+0x2e0>)
 8000482:	709a      	strb	r2, [r3, #2]
	  	    	  	        		detect_states[3] = HAL_GPIO_ReadPin(DETECT4_GPIO_Port, DETECT4_Pin);
 8000484:	2180      	movs	r1, #128	@ 0x80
 8000486:	4831      	ldr	r0, [pc, #196]	@ (800054c <main+0x2dc>)
 8000488:	f001 fe66 	bl	8002158 <HAL_GPIO_ReadPin>
 800048c:	4603      	mov	r3, r0
 800048e:	461a      	mov	r2, r3
 8000490:	4b2f      	ldr	r3, [pc, #188]	@ (8000550 <main+0x2e0>)
 8000492:	70da      	strb	r2, [r3, #3]
	  	    	  	        		detect_states[4] = HAL_GPIO_ReadPin(DETECT5_GPIO_Port, DETECT5_Pin);
 8000494:	2104      	movs	r1, #4
 8000496:	482a      	ldr	r0, [pc, #168]	@ (8000540 <main+0x2d0>)
 8000498:	f001 fe5e 	bl	8002158 <HAL_GPIO_ReadPin>
 800049c:	4603      	mov	r3, r0
 800049e:	461a      	mov	r2, r3
 80004a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000550 <main+0x2e0>)
 80004a2:	711a      	strb	r2, [r3, #4]

	  	    	  	        		//pomoc dla lini nalezy dodac nowe if i dodac 2 funkcje slightleft slightright(funkjce zwiazane z motor)
	  	    	  	        		detect3L=HAL_GPIO_ReadPin(DETECT3L_GPIO_Port, DETECT3L_Pin);
 80004a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004a8:	4828      	ldr	r0, [pc, #160]	@ (800054c <main+0x2dc>)
 80004aa:	f001 fe55 	bl	8002158 <HAL_GPIO_ReadPin>
 80004ae:	4603      	mov	r3, r0
 80004b0:	461a      	mov	r2, r3
 80004b2:	4b29      	ldr	r3, [pc, #164]	@ (8000558 <main+0x2e8>)
 80004b4:	701a      	strb	r2, [r3, #0]
	  	    	  	        		detect3P=HAL_GPIO_ReadPin(DETECT3P_GPIO_Port, DETECT3P_Pin);
 80004b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004ba:	4824      	ldr	r0, [pc, #144]	@ (800054c <main+0x2dc>)
 80004bc:	f001 fe4c 	bl	8002158 <HAL_GPIO_ReadPin>
 80004c0:	4603      	mov	r3, r0
 80004c2:	461a      	mov	r2, r3
 80004c4:	4b25      	ldr	r3, [pc, #148]	@ (800055c <main+0x2ec>)
 80004c6:	701a      	strb	r2, [r3, #0]


	  	    	  	        		if(detect_states[2]==0)
 80004c8:	4b21      	ldr	r3, [pc, #132]	@ (8000550 <main+0x2e0>)
 80004ca:	789b      	ldrb	r3, [r3, #2]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d105      	bne.n	80004dc <main+0x26c>
	  	    	  	        		{
	  	    	  	        			motor_forward(cycle);
 80004d0:	4b20      	ldr	r3, [pc, #128]	@ (8000554 <main+0x2e4>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4618      	mov	r0, r3
 80004d6:	f000 fd93 	bl	8001000 <motor_forward>
 80004da:	e7b7      	b.n	800044c <main+0x1dc>
	  	    	  	        		}
	  	    	  	        		else{
	  	    	  	        			if(detect_states[1]==0 || detect_states[0]==0)
 80004dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000550 <main+0x2e0>)
 80004de:	785b      	ldrb	r3, [r3, #1]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d003      	beq.n	80004ec <main+0x27c>
 80004e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000550 <main+0x2e0>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d10a      	bne.n	8000502 <main+0x292>
	  	    	  	        			{
	  	    	  	        				motor_left(cycle);
 80004ec:	4b19      	ldr	r3, [pc, #100]	@ (8000554 <main+0x2e4>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4618      	mov	r0, r3
 80004f2:	f000 fdad 	bl	8001050 <motor_left>
	  	    	  	        				set_ang(900, 0);
 80004f6:	2100      	movs	r1, #0
 80004f8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80004fc:	f000 fd3e 	bl	8000f7c <set_ang>
 8000500:	e01b      	b.n	800053a <main+0x2ca>
	  	    	  	        			}
	  	    	  	        			else if(detect_states[3]==0 || detect_states[4]==0){
 8000502:	4b13      	ldr	r3, [pc, #76]	@ (8000550 <main+0x2e0>)
 8000504:	78db      	ldrb	r3, [r3, #3]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d003      	beq.n	8000512 <main+0x2a2>
 800050a:	4b11      	ldr	r3, [pc, #68]	@ (8000550 <main+0x2e0>)
 800050c:	791b      	ldrb	r3, [r3, #4]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d109      	bne.n	8000526 <main+0x2b6>
	  	    	  	        				motor_right(cycle);
 8000512:	4b10      	ldr	r3, [pc, #64]	@ (8000554 <main+0x2e4>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4618      	mov	r0, r3
 8000518:	f000 fdc6 	bl	80010a8 <motor_right>
	  	    	  	        				set_ang(0, 0);
 800051c:	2100      	movs	r1, #0
 800051e:	2000      	movs	r0, #0
 8000520:	f000 fd2c 	bl	8000f7c <set_ang>
 8000524:	e009      	b.n	800053a <main+0x2ca>
	  	    	  	        			}
	  	    	  	        			else{
	  	    	  	        				motor_backward(cycle);
 8000526:	4b0b      	ldr	r3, [pc, #44]	@ (8000554 <main+0x2e4>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4618      	mov	r0, r3
 800052c:	f000 fde8 	bl	8001100 <motor_backward>
	  	    	  	        				set_ang(450, 0);
 8000530:	2100      	movs	r1, #0
 8000532:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000536:	f000 fd21 	bl	8000f7c <set_ang>
	  	    	  	        		detect_states[0] = HAL_GPIO_ReadPin(DETECT1_GPIO_Port, DETECT1_Pin);
 800053a:	e787      	b.n	800044c <main+0x1dc>
 800053c:	20000088 	.word	0x20000088
 8000540:	48000800 	.word	0x48000800
 8000544:	20000120 	.word	0x20000120
 8000548:	200000d4 	.word	0x200000d4
 800054c:	48000400 	.word	0x48000400
 8000550:	200002c8 	.word	0x200002c8
 8000554:	20000000 	.word	0x20000000
 8000558:	200002cd 	.word	0x200002cd
 800055c:	200002ce 	.word	0x200002ce
	  	    	  	        		}
	  	    	  	        	}
	  	    	  	        }
	  	    	  	        break;
	  	  case 3:
	  	  	  	        display_reset();
 8000560:	f000 fee2 	bl	8001328 <display_reset>
	  	  	  	        display3();
 8000564:	f000 fe48 	bl	80011f8 <display3>
	  	  	  	        if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8000568:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800056c:	48b2      	ldr	r0, [pc, #712]	@ (8000838 <main+0x5c8>)
 800056e:	f001 fdf3 	bl	8002158 <HAL_GPIO_ReadPin>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	f040 8156 	bne.w	8000826 <main+0x5b6>
	  	  	  	        {
	  	  	  	        	//linefollower zmodyfikowany niewidzi linii jedzie w prawo
	  	  	  	        	countdown();
 800057a:	f000 ff07 	bl	800138c <countdown>
	  	  	  	        	while(1){
	  	  	  	        		detect_states[0] = HAL_GPIO_ReadPin(DETECT1_GPIO_Port, DETECT1_Pin);
 800057e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000582:	48ad      	ldr	r0, [pc, #692]	@ (8000838 <main+0x5c8>)
 8000584:	f001 fde8 	bl	8002158 <HAL_GPIO_ReadPin>
 8000588:	4603      	mov	r3, r0
 800058a:	461a      	mov	r2, r3
 800058c:	4bab      	ldr	r3, [pc, #684]	@ (800083c <main+0x5cc>)
 800058e:	701a      	strb	r2, [r3, #0]
	  	  	  	        		detect_states[1] = HAL_GPIO_ReadPin(DETECT2_GPIO_Port, DETECT2_Pin);
 8000590:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000594:	48a8      	ldr	r0, [pc, #672]	@ (8000838 <main+0x5c8>)
 8000596:	f001 fddf 	bl	8002158 <HAL_GPIO_ReadPin>
 800059a:	4603      	mov	r3, r0
 800059c:	461a      	mov	r2, r3
 800059e:	4ba7      	ldr	r3, [pc, #668]	@ (800083c <main+0x5cc>)
 80005a0:	705a      	strb	r2, [r3, #1]
	  	  	  	        		detect_states[2] = HAL_GPIO_ReadPin(DETECT3_GPIO_Port, DETECT3_Pin);
 80005a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005aa:	f001 fdd5 	bl	8002158 <HAL_GPIO_ReadPin>
 80005ae:	4603      	mov	r3, r0
 80005b0:	461a      	mov	r2, r3
 80005b2:	4ba2      	ldr	r3, [pc, #648]	@ (800083c <main+0x5cc>)
 80005b4:	709a      	strb	r2, [r3, #2]
	  	  	  	        		detect_states[3] = HAL_GPIO_ReadPin(DETECT4_GPIO_Port, DETECT4_Pin);
 80005b6:	2180      	movs	r1, #128	@ 0x80
 80005b8:	48a1      	ldr	r0, [pc, #644]	@ (8000840 <main+0x5d0>)
 80005ba:	f001 fdcd 	bl	8002158 <HAL_GPIO_ReadPin>
 80005be:	4603      	mov	r3, r0
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b9e      	ldr	r3, [pc, #632]	@ (800083c <main+0x5cc>)
 80005c4:	70da      	strb	r2, [r3, #3]
	  	  	  	        		detect_states[4] = HAL_GPIO_ReadPin(DETECT5_GPIO_Port, DETECT5_Pin);
 80005c6:	2104      	movs	r1, #4
 80005c8:	489b      	ldr	r0, [pc, #620]	@ (8000838 <main+0x5c8>)
 80005ca:	f001 fdc5 	bl	8002158 <HAL_GPIO_ReadPin>
 80005ce:	4603      	mov	r3, r0
 80005d0:	461a      	mov	r2, r3
 80005d2:	4b9a      	ldr	r3, [pc, #616]	@ (800083c <main+0x5cc>)
 80005d4:	711a      	strb	r2, [r3, #4]

	  	  	  	        		if(detect_states[2]==0)
 80005d6:	4b99      	ldr	r3, [pc, #612]	@ (800083c <main+0x5cc>)
 80005d8:	789b      	ldrb	r3, [r3, #2]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d105      	bne.n	80005ea <main+0x37a>
	  	  	  	        		{
	  	  	  	        			motor_forward(cycle);
 80005de:	4b99      	ldr	r3, [pc, #612]	@ (8000844 <main+0x5d4>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fd0c 	bl	8001000 <motor_forward>
 80005e8:	e7c9      	b.n	800057e <main+0x30e>
	  	  	  	        		}
	  	  	  	        		else{
	  	  	  	        			if(detect_states[1]==0 || detect_states[0]==0)
 80005ea:	4b94      	ldr	r3, [pc, #592]	@ (800083c <main+0x5cc>)
 80005ec:	785b      	ldrb	r3, [r3, #1]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d003      	beq.n	80005fa <main+0x38a>
 80005f2:	4b92      	ldr	r3, [pc, #584]	@ (800083c <main+0x5cc>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d10a      	bne.n	8000610 <main+0x3a0>
	  	  	  	        			{
	  	  	  	        				motor_left(cycle);
 80005fa:	4b92      	ldr	r3, [pc, #584]	@ (8000844 <main+0x5d4>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 fd26 	bl	8001050 <motor_left>
	  	  	  	        				set_ang(900, 0);
 8000604:	2100      	movs	r1, #0
 8000606:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800060a:	f000 fcb7 	bl	8000f7c <set_ang>
 800060e:	e01b      	b.n	8000648 <main+0x3d8>
	  	  	  	        			}
	  	  	  	        			else if(detect_states[3]==0 || detect_states[4]==0){
 8000610:	4b8a      	ldr	r3, [pc, #552]	@ (800083c <main+0x5cc>)
 8000612:	78db      	ldrb	r3, [r3, #3]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d003      	beq.n	8000620 <main+0x3b0>
 8000618:	4b88      	ldr	r3, [pc, #544]	@ (800083c <main+0x5cc>)
 800061a:	791b      	ldrb	r3, [r3, #4]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d109      	bne.n	8000634 <main+0x3c4>
	  	  	  	        				motor_right(cycle);
 8000620:	4b88      	ldr	r3, [pc, #544]	@ (8000844 <main+0x5d4>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4618      	mov	r0, r3
 8000626:	f000 fd3f 	bl	80010a8 <motor_right>
	  	  	  	        				set_ang(0, 0);
 800062a:	2100      	movs	r1, #0
 800062c:	2000      	movs	r0, #0
 800062e:	f000 fca5 	bl	8000f7c <set_ang>
 8000632:	e009      	b.n	8000648 <main+0x3d8>
	  	  	  	        			}
	  	  	  	        			else{
	  	  	  	        			motor_left(cycle);
 8000634:	4b83      	ldr	r3, [pc, #524]	@ (8000844 <main+0x5d4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4618      	mov	r0, r3
 800063a:	f000 fd09 	bl	8001050 <motor_left>
	  	  	  	        			set_ang(900, 0);
 800063e:	2100      	movs	r1, #0
 8000640:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8000644:	f000 fc9a 	bl	8000f7c <set_ang>
	  	  	  	        		detect_states[0] = HAL_GPIO_ReadPin(DETECT1_GPIO_Port, DETECT1_Pin);
 8000648:	e799      	b.n	800057e <main+0x30e>
	  	  	  	        		}
	  	  	  	        	}
	  	  	  	        }
	  	  	  	        break;
	  	  	  	  	  case 4:
	  		  	        display_reset();
 800064a:	f000 fe6d 	bl	8001328 <display_reset>
	  		  	        display4();
 800064e:	f000 fdf9 	bl	8001244 <display4>
	  		  	        if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8000652:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000656:	4878      	ldr	r0, [pc, #480]	@ (8000838 <main+0x5c8>)
 8000658:	f001 fd7e 	bl	8002158 <HAL_GPIO_ReadPin>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	f040 80e3 	bne.w	800082a <main+0x5ba>
	  		  	        {
	  		  	        //linefollower zmodyfikowany niewidzi linii jedzie w lewo
	  		  	        	countdown();
 8000664:	f000 fe92 	bl	800138c <countdown>
	  		  	        	while(1){
	  		  	        		detect_states[0] = HAL_GPIO_ReadPin(DETECT1_GPIO_Port, DETECT1_Pin);
 8000668:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800066c:	4872      	ldr	r0, [pc, #456]	@ (8000838 <main+0x5c8>)
 800066e:	f001 fd73 	bl	8002158 <HAL_GPIO_ReadPin>
 8000672:	4603      	mov	r3, r0
 8000674:	461a      	mov	r2, r3
 8000676:	4b71      	ldr	r3, [pc, #452]	@ (800083c <main+0x5cc>)
 8000678:	701a      	strb	r2, [r3, #0]
	  		  	        		detect_states[1] = HAL_GPIO_ReadPin(DETECT2_GPIO_Port, DETECT2_Pin);
 800067a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800067e:	486e      	ldr	r0, [pc, #440]	@ (8000838 <main+0x5c8>)
 8000680:	f001 fd6a 	bl	8002158 <HAL_GPIO_ReadPin>
 8000684:	4603      	mov	r3, r0
 8000686:	461a      	mov	r2, r3
 8000688:	4b6c      	ldr	r3, [pc, #432]	@ (800083c <main+0x5cc>)
 800068a:	705a      	strb	r2, [r3, #1]
	  		  	        		detect_states[2] = HAL_GPIO_ReadPin(DETECT3_GPIO_Port, DETECT3_Pin);
 800068c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000690:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000694:	f001 fd60 	bl	8002158 <HAL_GPIO_ReadPin>
 8000698:	4603      	mov	r3, r0
 800069a:	461a      	mov	r2, r3
 800069c:	4b67      	ldr	r3, [pc, #412]	@ (800083c <main+0x5cc>)
 800069e:	709a      	strb	r2, [r3, #2]
	  		  	        		detect_states[3] = HAL_GPIO_ReadPin(DETECT4_GPIO_Port, DETECT4_Pin);
 80006a0:	2180      	movs	r1, #128	@ 0x80
 80006a2:	4867      	ldr	r0, [pc, #412]	@ (8000840 <main+0x5d0>)
 80006a4:	f001 fd58 	bl	8002158 <HAL_GPIO_ReadPin>
 80006a8:	4603      	mov	r3, r0
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b63      	ldr	r3, [pc, #396]	@ (800083c <main+0x5cc>)
 80006ae:	70da      	strb	r2, [r3, #3]
	  		  	        		detect_states[4] = HAL_GPIO_ReadPin(DETECT5_GPIO_Port, DETECT5_Pin);
 80006b0:	2104      	movs	r1, #4
 80006b2:	4861      	ldr	r0, [pc, #388]	@ (8000838 <main+0x5c8>)
 80006b4:	f001 fd50 	bl	8002158 <HAL_GPIO_ReadPin>
 80006b8:	4603      	mov	r3, r0
 80006ba:	461a      	mov	r2, r3
 80006bc:	4b5f      	ldr	r3, [pc, #380]	@ (800083c <main+0x5cc>)
 80006be:	711a      	strb	r2, [r3, #4]

	  		  	        		if(detect_states[2]==0)
 80006c0:	4b5e      	ldr	r3, [pc, #376]	@ (800083c <main+0x5cc>)
 80006c2:	789b      	ldrb	r3, [r3, #2]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d105      	bne.n	80006d4 <main+0x464>
	  		  	        		{
	  		  	        			motor_forward(cycle);
 80006c8:	4b5e      	ldr	r3, [pc, #376]	@ (8000844 <main+0x5d4>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 fc97 	bl	8001000 <motor_forward>
 80006d2:	e7c9      	b.n	8000668 <main+0x3f8>
	  		  	        		}
	  		  	        		else{
	  		  	        			if(detect_states[1]==0 || detect_states[0]==0)
 80006d4:	4b59      	ldr	r3, [pc, #356]	@ (800083c <main+0x5cc>)
 80006d6:	785b      	ldrb	r3, [r3, #1]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d003      	beq.n	80006e4 <main+0x474>
 80006dc:	4b57      	ldr	r3, [pc, #348]	@ (800083c <main+0x5cc>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d10a      	bne.n	80006fa <main+0x48a>
	  		  	        			{
	  		  	        				motor_left(cycle);
 80006e4:	4b57      	ldr	r3, [pc, #348]	@ (8000844 <main+0x5d4>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 fcb1 	bl	8001050 <motor_left>
	  		  	        				set_ang(900, 0);
 80006ee:	2100      	movs	r1, #0
 80006f0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80006f4:	f000 fc42 	bl	8000f7c <set_ang>
 80006f8:	e01a      	b.n	8000730 <main+0x4c0>
	  		  	        			}
	  		  	        			else if(detect_states[3]==0 || detect_states[4]==0){
 80006fa:	4b50      	ldr	r3, [pc, #320]	@ (800083c <main+0x5cc>)
 80006fc:	78db      	ldrb	r3, [r3, #3]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d003      	beq.n	800070a <main+0x49a>
 8000702:	4b4e      	ldr	r3, [pc, #312]	@ (800083c <main+0x5cc>)
 8000704:	791b      	ldrb	r3, [r3, #4]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d109      	bne.n	800071e <main+0x4ae>
	  		  	        				motor_right(cycle);
 800070a:	4b4e      	ldr	r3, [pc, #312]	@ (8000844 <main+0x5d4>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4618      	mov	r0, r3
 8000710:	f000 fcca 	bl	80010a8 <motor_right>
	  		  	        				set_ang(0, 0);
 8000714:	2100      	movs	r1, #0
 8000716:	2000      	movs	r0, #0
 8000718:	f000 fc30 	bl	8000f7c <set_ang>
 800071c:	e008      	b.n	8000730 <main+0x4c0>
	  		  	        			}
	  		  	        			else{
	  		  	        				motor_right(cycle);
 800071e:	4b49      	ldr	r3, [pc, #292]	@ (8000844 <main+0x5d4>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4618      	mov	r0, r3
 8000724:	f000 fcc0 	bl	80010a8 <motor_right>
	  		  	        				set_ang(0, 0);
 8000728:	2100      	movs	r1, #0
 800072a:	2000      	movs	r0, #0
 800072c:	f000 fc26 	bl	8000f7c <set_ang>
	  		  	        		detect_states[0] = HAL_GPIO_ReadPin(DETECT1_GPIO_Port, DETECT1_Pin);
 8000730:	e79a      	b.n	8000668 <main+0x3f8>
	  		  	        	}
	  		  	        }
	  		  	        break;
	  	      case 5:
	  	    	  //sterowanie bluetoothem
	  	    	display_reset();
 8000732:	f000 fdf9 	bl	8001328 <display_reset>
	  	    	display5();
 8000736:	f000 fda3 	bl	8001280 <display5>
	  	    	if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET){
 800073a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800073e:	483e      	ldr	r0, [pc, #248]	@ (8000838 <main+0x5c8>)
 8000740:	f001 fd0a 	bl	8002158 <HAL_GPIO_ReadPin>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d171      	bne.n	800082e <main+0x5be>
	  	    		countdown();
 800074a:	f000 fe1f 	bl	800138c <countdown>
	  	    		display_reset();
 800074e:	f000 fdeb 	bl	8001328 <display_reset>
	  	    		while(1){
	  	    			bluetooth();
 8000752:	f000 fbb7 	bl	8000ec4 <bluetooth>
 8000756:	e7fc      	b.n	8000752 <main+0x4e2>
	  	    		}
	  	    	}
	  	        break;
	  	      case 6:
	  	    	//sterowanie po kablu
	  	    	display_reset();
 8000758:	f000 fde6 	bl	8001328 <display_reset>
	  	    	display6();
 800075c:	f000 fdb6 	bl	80012cc <display6>
	  	    	if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET){
 8000760:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000764:	4834      	ldr	r0, [pc, #208]	@ (8000838 <main+0x5c8>)
 8000766:	f001 fcf7 	bl	8002158 <HAL_GPIO_ReadPin>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d160      	bne.n	8000832 <main+0x5c2>
	  	    		countdown();
 8000770:	f000 fe0c 	bl	800138c <countdown>
	  	    		display_reset();
 8000774:	f000 fdd8 	bl	8001328 <display_reset>
	  	    		while(1){
	  	    			if(HAL_UART_Receive(&huart2, &receivedChar, 1, 0) == HAL_OK) {
 8000778:	2300      	movs	r3, #0
 800077a:	2201      	movs	r2, #1
 800077c:	4932      	ldr	r1, [pc, #200]	@ (8000848 <main+0x5d8>)
 800077e:	4833      	ldr	r0, [pc, #204]	@ (800084c <main+0x5dc>)
 8000780:	f004 fb50 	bl	8004e24 <HAL_UART_Receive>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d1f6      	bne.n	8000778 <main+0x508>
	  	    				if (receivedChar == 's') {
 800078a:	4b2f      	ldr	r3, [pc, #188]	@ (8000848 <main+0x5d8>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b73      	cmp	r3, #115	@ 0x73
 8000790:	d10a      	bne.n	80007a8 <main+0x538>
	  	    					set_ang(450, 0);
 8000792:	2100      	movs	r1, #0
 8000794:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000798:	f000 fbf0 	bl	8000f7c <set_ang>
	  	    					motor_backward(cycle);
 800079c:	4b29      	ldr	r3, [pc, #164]	@ (8000844 <main+0x5d4>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 fcad 	bl	8001100 <motor_backward>
 80007a6:	e036      	b.n	8000816 <main+0x5a6>
	  	    				} else if (receivedChar == 'w') {
 80007a8:	4b27      	ldr	r3, [pc, #156]	@ (8000848 <main+0x5d8>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b77      	cmp	r3, #119	@ 0x77
 80007ae:	d10a      	bne.n	80007c6 <main+0x556>
	  	    					set_ang(450, 0);
 80007b0:	2100      	movs	r1, #0
 80007b2:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 80007b6:	f000 fbe1 	bl	8000f7c <set_ang>
	  	    					motor_forward(cycle);
 80007ba:	4b22      	ldr	r3, [pc, #136]	@ (8000844 <main+0x5d4>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 fc1e 	bl	8001000 <motor_forward>
 80007c4:	e027      	b.n	8000816 <main+0x5a6>
	  	    				} else if (receivedChar == 'a') {
 80007c6:	4b20      	ldr	r3, [pc, #128]	@ (8000848 <main+0x5d8>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b61      	cmp	r3, #97	@ 0x61
 80007cc:	d10a      	bne.n	80007e4 <main+0x574>
	  	    					set_ang(900, 0);
 80007ce:	2100      	movs	r1, #0
 80007d0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80007d4:	f000 fbd2 	bl	8000f7c <set_ang>
	  	    					motor_left(cycle);
 80007d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000844 <main+0x5d4>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 fc37 	bl	8001050 <motor_left>
 80007e2:	e018      	b.n	8000816 <main+0x5a6>
	  	    				} else if (receivedChar == 'd') {
 80007e4:	4b18      	ldr	r3, [pc, #96]	@ (8000848 <main+0x5d8>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b64      	cmp	r3, #100	@ 0x64
 80007ea:	d109      	bne.n	8000800 <main+0x590>
	  	    					set_ang(0, 0);
 80007ec:	2100      	movs	r1, #0
 80007ee:	2000      	movs	r0, #0
 80007f0:	f000 fbc4 	bl	8000f7c <set_ang>
	  	    					motor_right(cycle);
 80007f4:	4b13      	ldr	r3, [pc, #76]	@ (8000844 <main+0x5d4>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 fc55 	bl	80010a8 <motor_right>
 80007fe:	e00a      	b.n	8000816 <main+0x5a6>
	  	    				} else if (receivedChar == 'q') {
 8000800:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <main+0x5d8>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b71      	cmp	r3, #113	@ 0x71
 8000806:	d106      	bne.n	8000816 <main+0x5a6>
	  	    					set_ang(450, 0);
 8000808:	2100      	movs	r1, #0
 800080a:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 800080e:	f000 fbb5 	bl	8000f7c <set_ang>
	  	    					motor_stop();
 8000812:	f000 fc9d 	bl	8001150 <motor_stop>
	  	    				}
	  	    				HAL_Delay(100);
 8000816:	2064      	movs	r0, #100	@ 0x64
 8000818:	f001 f980 	bl	8001b1c <HAL_Delay>
	  	    			if(HAL_UART_Receive(&huart2, &receivedChar, 1, 0) == HAL_OK) {
 800081c:	e7ac      	b.n	8000778 <main+0x508>
	  	        break;
 800081e:	bf00      	nop
 8000820:	e567      	b.n	80002f2 <main+0x82>
	  	    	  	        break;
 8000822:	bf00      	nop
 8000824:	e565      	b.n	80002f2 <main+0x82>
	  	  	  	        break;
 8000826:	bf00      	nop
 8000828:	e563      	b.n	80002f2 <main+0x82>
	  		  	        break;
 800082a:	bf00      	nop
 800082c:	e561      	b.n	80002f2 <main+0x82>
	  	        break;
 800082e:	bf00      	nop
 8000830:	e55f      	b.n	80002f2 <main+0x82>
	  	    			}
	  	    		}
	  	    	}
	  	        break;
 8000832:	bf00      	nop
 8000834:	e55d      	b.n	80002f2 <main+0x82>
 8000836:	bf00      	nop
 8000838:	48000800 	.word	0x48000800
 800083c:	200002c8 	.word	0x200002c8
 8000840:	48000400 	.word	0x48000400
 8000844:	20000000 	.word	0x20000000
 8000848:	200002cf 	.word	0x200002cf
 800084c:	20000240 	.word	0x20000240

08000850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b09c      	sub	sp, #112	@ 0x70
 8000854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000856:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800085a:	2228      	movs	r2, #40	@ 0x28
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f005 fb79 	bl	8005f56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000864:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000874:	463b      	mov	r3, r7
 8000876:	2234      	movs	r2, #52	@ 0x34
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f005 fb6b 	bl	8005f56 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000880:	2301      	movs	r3, #1
 8000882:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000884:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000888:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800088e:	2301      	movs	r3, #1
 8000890:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000892:	2302      	movs	r3, #2
 8000894:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000896:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800089a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800089c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80008a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 fc86 	bl	80021b8 <HAL_RCC_OscConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80008b2:	f000 fd89 	bl	80013c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b6:	230f      	movs	r3, #15
 80008b8:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ba:	2302      	movs	r3, #2
 80008bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008cc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80008d0:	2102      	movs	r1, #2
 80008d2:	4618      	mov	r0, r3
 80008d4:	f002 fcae 	bl	8003234 <HAL_RCC_ClockConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80008de:	f000 fd73 	bl	80013c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 80008e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000910 <SystemClock_Config+0xc0>)
 80008e4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM17;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80008ea:	2300      	movs	r3, #0
 80008ec:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f6:	463b      	mov	r3, r7
 80008f8:	4618      	mov	r0, r3
 80008fa:	f002 fed1 	bl	80036a0 <HAL_RCCEx_PeriphCLKConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000904:	f000 fd60 	bl	80013c8 <Error_Handler>
  }
}
 8000908:	bf00      	nop
 800090a:	3770      	adds	r7, #112	@ 0x70
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	00181001 	.word	0x00181001

08000914 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b09a      	sub	sp, #104	@ 0x68
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800091a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000928:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000934:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
 8000944:	615a      	str	r2, [r3, #20]
 8000946:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	222c      	movs	r2, #44	@ 0x2c
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f005 fb01 	bl	8005f56 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000954:	4b49      	ldr	r3, [pc, #292]	@ (8000a7c <MX_TIM1_Init+0x168>)
 8000956:	4a4a      	ldr	r2, [pc, #296]	@ (8000a80 <MX_TIM1_Init+0x16c>)
 8000958:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800095a:	4b48      	ldr	r3, [pc, #288]	@ (8000a7c <MX_TIM1_Init+0x168>)
 800095c:	2247      	movs	r2, #71	@ 0x47
 800095e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000960:	4b46      	ldr	r3, [pc, #280]	@ (8000a7c <MX_TIM1_Init+0x168>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000966:	4b45      	ldr	r3, [pc, #276]	@ (8000a7c <MX_TIM1_Init+0x168>)
 8000968:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800096c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096e:	4b43      	ldr	r3, [pc, #268]	@ (8000a7c <MX_TIM1_Init+0x168>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000974:	4b41      	ldr	r3, [pc, #260]	@ (8000a7c <MX_TIM1_Init+0x168>)
 8000976:	2200      	movs	r2, #0
 8000978:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097a:	4b40      	ldr	r3, [pc, #256]	@ (8000a7c <MX_TIM1_Init+0x168>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000980:	483e      	ldr	r0, [pc, #248]	@ (8000a7c <MX_TIM1_Init+0x168>)
 8000982:	f003 f81f 	bl	80039c4 <HAL_TIM_Base_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800098c:	f000 fd1c 	bl	80013c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000990:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000994:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000996:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800099a:	4619      	mov	r1, r3
 800099c:	4837      	ldr	r0, [pc, #220]	@ (8000a7c <MX_TIM1_Init+0x168>)
 800099e:	f003 fc27 	bl	80041f0 <HAL_TIM_ConfigClockSource>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80009a8:	f000 fd0e 	bl	80013c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009ac:	4833      	ldr	r0, [pc, #204]	@ (8000a7c <MX_TIM1_Init+0x168>)
 80009ae:	f003 f8ad 	bl	8003b0c <HAL_TIM_PWM_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80009b8:	f000 fd06 	bl	80013c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009bc:	2300      	movs	r3, #0
 80009be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009c0:	2300      	movs	r3, #0
 80009c2:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009c8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80009cc:	4619      	mov	r1, r3
 80009ce:	482b      	ldr	r0, [pc, #172]	@ (8000a7c <MX_TIM1_Init+0x168>)
 80009d0:	f004 f8de 	bl	8004b90 <HAL_TIMEx_MasterConfigSynchronization>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80009da:	f000 fcf5 	bl	80013c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009de:	2360      	movs	r3, #96	@ 0x60
 80009e0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e6:	2300      	movs	r3, #0
 80009e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009ea:	2300      	movs	r3, #0
 80009ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009f2:	2300      	movs	r3, #0
 80009f4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009f6:	2300      	movs	r3, #0
 80009f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009fa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009fe:	2200      	movs	r2, #0
 8000a00:	4619      	mov	r1, r3
 8000a02:	481e      	ldr	r0, [pc, #120]	@ (8000a7c <MX_TIM1_Init+0x168>)
 8000a04:	f003 fae0 	bl	8003fc8 <HAL_TIM_PWM_ConfigChannel>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000a0e:	f000 fcdb 	bl	80013c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a12:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a16:	220c      	movs	r2, #12
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4818      	ldr	r0, [pc, #96]	@ (8000a7c <MX_TIM1_Init+0x168>)
 8000a1c:	f003 fad4 	bl	8003fc8 <HAL_TIM_PWM_ConfigChannel>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000a26:	f000 fccf 	bl	80013c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4807      	ldr	r0, [pc, #28]	@ (8000a7c <MX_TIM1_Init+0x168>)
 8000a60:	f004 f8fc 	bl	8004c5c <HAL_TIMEx_ConfigBreakDeadTime>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000a6a:	f000 fcad 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a6e:	4803      	ldr	r0, [pc, #12]	@ (8000a7c <MX_TIM1_Init+0x168>)
 8000a70:	f000 fd50 	bl	8001514 <HAL_TIM_MspPostInit>

}
 8000a74:	bf00      	nop
 8000a76:	3768      	adds	r7, #104	@ 0x68
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000088 	.word	0x20000088
 8000a80:	40012c00 	.word	0x40012c00

08000a84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	@ 0x28
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a96:	463b      	mov	r3, r7
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
 8000aa4:	615a      	str	r2, [r3, #20]
 8000aa6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aa8:	4b27      	ldr	r3, [pc, #156]	@ (8000b48 <MX_TIM2_Init+0xc4>)
 8000aaa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000aae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000ab0:	4b25      	ldr	r3, [pc, #148]	@ (8000b48 <MX_TIM2_Init+0xc4>)
 8000ab2:	2247      	movs	r2, #71	@ 0x47
 8000ab4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab6:	4b24      	ldr	r3, [pc, #144]	@ (8000b48 <MX_TIM2_Init+0xc4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000abc:	4b22      	ldr	r3, [pc, #136]	@ (8000b48 <MX_TIM2_Init+0xc4>)
 8000abe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ac2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac4:	4b20      	ldr	r3, [pc, #128]	@ (8000b48 <MX_TIM2_Init+0xc4>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aca:	4b1f      	ldr	r3, [pc, #124]	@ (8000b48 <MX_TIM2_Init+0xc4>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ad0:	481d      	ldr	r0, [pc, #116]	@ (8000b48 <MX_TIM2_Init+0xc4>)
 8000ad2:	f003 f81b 	bl	8003b0c <HAL_TIM_PWM_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000adc:	f000 fc74 	bl	80013c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4619      	mov	r1, r3
 8000aee:	4816      	ldr	r0, [pc, #88]	@ (8000b48 <MX_TIM2_Init+0xc4>)
 8000af0:	f004 f84e 	bl	8004b90 <HAL_TIMEx_MasterConfigSynchronization>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000afa:	f000 fc65 	bl	80013c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000afe:	2360      	movs	r3, #96	@ 0x60
 8000b00:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b0e:	463b      	mov	r3, r7
 8000b10:	2200      	movs	r2, #0
 8000b12:	4619      	mov	r1, r3
 8000b14:	480c      	ldr	r0, [pc, #48]	@ (8000b48 <MX_TIM2_Init+0xc4>)
 8000b16:	f003 fa57 	bl	8003fc8 <HAL_TIM_PWM_ConfigChannel>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000b20:	f000 fc52 	bl	80013c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b24:	463b      	mov	r3, r7
 8000b26:	2208      	movs	r2, #8
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4807      	ldr	r0, [pc, #28]	@ (8000b48 <MX_TIM2_Init+0xc4>)
 8000b2c:	f003 fa4c 	bl	8003fc8 <HAL_TIM_PWM_ConfigChannel>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000b36:	f000 fc47 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b3a:	4803      	ldr	r0, [pc, #12]	@ (8000b48 <MX_TIM2_Init+0xc4>)
 8000b3c:	f000 fcea 	bl	8001514 <HAL_TIM_MspPostInit>

}
 8000b40:	bf00      	nop
 8000b42:	3728      	adds	r7, #40	@ 0x28
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	200000d4 	.word	0x200000d4

08000b4c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b092      	sub	sp, #72	@ 0x48
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]
 8000b62:	615a      	str	r2, [r3, #20]
 8000b64:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b66:	463b      	mov	r3, r7
 8000b68:	222c      	movs	r2, #44	@ 0x2c
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f005 f9f2 	bl	8005f56 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000b72:	4b31      	ldr	r3, [pc, #196]	@ (8000c38 <MX_TIM16_Init+0xec>)
 8000b74:	4a31      	ldr	r2, [pc, #196]	@ (8000c3c <MX_TIM16_Init+0xf0>)
 8000b76:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 71;
 8000b78:	4b2f      	ldr	r3, [pc, #188]	@ (8000c38 <MX_TIM16_Init+0xec>)
 8000b7a:	2247      	movs	r2, #71	@ 0x47
 8000b7c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7e:	4b2e      	ldr	r3, [pc, #184]	@ (8000c38 <MX_TIM16_Init+0xec>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 19999;
 8000b84:	4b2c      	ldr	r3, [pc, #176]	@ (8000c38 <MX_TIM16_Init+0xec>)
 8000b86:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000b8a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8c:	4b2a      	ldr	r3, [pc, #168]	@ (8000c38 <MX_TIM16_Init+0xec>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b92:	4b29      	ldr	r3, [pc, #164]	@ (8000c38 <MX_TIM16_Init+0xec>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b98:	4b27      	ldr	r3, [pc, #156]	@ (8000c38 <MX_TIM16_Init+0xec>)
 8000b9a:	2280      	movs	r2, #128	@ 0x80
 8000b9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b9e:	4826      	ldr	r0, [pc, #152]	@ (8000c38 <MX_TIM16_Init+0xec>)
 8000ba0:	f002 ff10 	bl	80039c4 <HAL_TIM_Base_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000baa:	f000 fc0d 	bl	80013c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000bae:	4822      	ldr	r0, [pc, #136]	@ (8000c38 <MX_TIM16_Init+0xec>)
 8000bb0:	f002 ffac 	bl	8003b0c <HAL_TIM_PWM_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000bba:	f000 fc05 	bl	80013c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bbe:	2360      	movs	r3, #96	@ 0x60
 8000bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bda:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bde:	2200      	movs	r2, #0
 8000be0:	4619      	mov	r1, r3
 8000be2:	4815      	ldr	r0, [pc, #84]	@ (8000c38 <MX_TIM16_Init+0xec>)
 8000be4:	f003 f9f0 	bl	8003fc8 <HAL_TIM_PWM_ConfigChannel>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000bee:	f000 fbeb 	bl	80013c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c0a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000c14:	463b      	mov	r3, r7
 8000c16:	4619      	mov	r1, r3
 8000c18:	4807      	ldr	r0, [pc, #28]	@ (8000c38 <MX_TIM16_Init+0xec>)
 8000c1a:	f004 f81f 	bl	8004c5c <HAL_TIMEx_ConfigBreakDeadTime>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000c24:	f000 fbd0 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000c28:	4803      	ldr	r0, [pc, #12]	@ (8000c38 <MX_TIM16_Init+0xec>)
 8000c2a:	f000 fc73 	bl	8001514 <HAL_TIM_MspPostInit>

}
 8000c2e:	bf00      	nop
 8000c30:	3748      	adds	r7, #72	@ 0x48
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000120 	.word	0x20000120
 8000c3c:	40014400 	.word	0x40014400

08000c40 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	@ (8000c84 <MX_TIM17_Init+0x44>)
 8000c46:	4a10      	ldr	r2, [pc, #64]	@ (8000c88 <MX_TIM17_Init+0x48>)
 8000c48:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 71;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <MX_TIM17_Init+0x44>)
 8000c4c:	2247      	movs	r2, #71	@ 0x47
 8000c4e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <MX_TIM17_Init+0x44>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <MX_TIM17_Init+0x44>)
 8000c58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c5c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5e:	4b09      	ldr	r3, [pc, #36]	@ (8000c84 <MX_TIM17_Init+0x44>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000c64:	4b07      	ldr	r3, [pc, #28]	@ (8000c84 <MX_TIM17_Init+0x44>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6a:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <MX_TIM17_Init+0x44>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000c70:	4804      	ldr	r0, [pc, #16]	@ (8000c84 <MX_TIM17_Init+0x44>)
 8000c72:	f002 fea7 	bl	80039c4 <HAL_TIM_Base_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000c7c:	f000 fba4 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	2000016c 	.word	0x2000016c
 8000c88:	40014800 	.word	0x40014800

08000c8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c90:	4b14      	ldr	r3, [pc, #80]	@ (8000ce4 <MX_USART1_UART_Init+0x58>)
 8000c92:	4a15      	ldr	r2, [pc, #84]	@ (8000ce8 <MX_USART1_UART_Init+0x5c>)
 8000c94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000c96:	4b13      	ldr	r3, [pc, #76]	@ (8000ce4 <MX_USART1_UART_Init+0x58>)
 8000c98:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000c9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ce4 <MX_USART1_UART_Init+0x58>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce4 <MX_USART1_UART_Init+0x58>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <MX_USART1_UART_Init+0x58>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <MX_USART1_UART_Init+0x58>)
 8000cb2:	220c      	movs	r2, #12
 8000cb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <MX_USART1_UART_Init+0x58>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <MX_USART1_UART_Init+0x58>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cc2:	4b08      	ldr	r3, [pc, #32]	@ (8000ce4 <MX_USART1_UART_Init+0x58>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <MX_USART1_UART_Init+0x58>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cce:	4805      	ldr	r0, [pc, #20]	@ (8000ce4 <MX_USART1_UART_Init+0x58>)
 8000cd0:	f004 f85a 	bl	8004d88 <HAL_UART_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000cda:	f000 fb75 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200001b8 	.word	0x200001b8
 8000ce8:	40013800 	.word	0x40013800

08000cec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cf0:	4b14      	ldr	r3, [pc, #80]	@ (8000d44 <MX_USART2_UART_Init+0x58>)
 8000cf2:	4a15      	ldr	r2, [pc, #84]	@ (8000d48 <MX_USART2_UART_Init+0x5c>)
 8000cf4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000cf6:	4b13      	ldr	r3, [pc, #76]	@ (8000d44 <MX_USART2_UART_Init+0x58>)
 8000cf8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000cfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfe:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <MX_USART2_UART_Init+0x58>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	@ (8000d44 <MX_USART2_UART_Init+0x58>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <MX_USART2_UART_Init+0x58>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	@ (8000d44 <MX_USART2_UART_Init+0x58>)
 8000d12:	220c      	movs	r2, #12
 8000d14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d16:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <MX_USART2_UART_Init+0x58>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d1c:	4b09      	ldr	r3, [pc, #36]	@ (8000d44 <MX_USART2_UART_Init+0x58>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d22:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <MX_USART2_UART_Init+0x58>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d28:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <MX_USART2_UART_Init+0x58>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d2e:	4805      	ldr	r0, [pc, #20]	@ (8000d44 <MX_USART2_UART_Init+0x58>)
 8000d30:	f004 f82a 	bl	8004d88 <HAL_UART_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d3a:	f000 fb45 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000240 	.word	0x20000240
 8000d48:	40004400 	.word	0x40004400

08000d4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	@ 0x28
 8000d50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d62:	4b55      	ldr	r3, [pc, #340]	@ (8000eb8 <MX_GPIO_Init+0x16c>)
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	4a54      	ldr	r2, [pc, #336]	@ (8000eb8 <MX_GPIO_Init+0x16c>)
 8000d68:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000d6c:	6153      	str	r3, [r2, #20]
 8000d6e:	4b52      	ldr	r3, [pc, #328]	@ (8000eb8 <MX_GPIO_Init+0x16c>)
 8000d70:	695b      	ldr	r3, [r3, #20]
 8000d72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d7a:	4b4f      	ldr	r3, [pc, #316]	@ (8000eb8 <MX_GPIO_Init+0x16c>)
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	4a4e      	ldr	r2, [pc, #312]	@ (8000eb8 <MX_GPIO_Init+0x16c>)
 8000d80:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d84:	6153      	str	r3, [r2, #20]
 8000d86:	4b4c      	ldr	r3, [pc, #304]	@ (8000eb8 <MX_GPIO_Init+0x16c>)
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	4b49      	ldr	r3, [pc, #292]	@ (8000eb8 <MX_GPIO_Init+0x16c>)
 8000d94:	695b      	ldr	r3, [r3, #20]
 8000d96:	4a48      	ldr	r2, [pc, #288]	@ (8000eb8 <MX_GPIO_Init+0x16c>)
 8000d98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d9c:	6153      	str	r3, [r2, #20]
 8000d9e:	4b46      	ldr	r3, [pc, #280]	@ (8000eb8 <MX_GPIO_Init+0x16c>)
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000daa:	4b43      	ldr	r3, [pc, #268]	@ (8000eb8 <MX_GPIO_Init+0x16c>)
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	4a42      	ldr	r2, [pc, #264]	@ (8000eb8 <MX_GPIO_Init+0x16c>)
 8000db0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000db4:	6153      	str	r3, [r2, #20]
 8000db6:	4b40      	ldr	r3, [pc, #256]	@ (8000eb8 <MX_GPIO_Init+0x16c>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TRIGGER_Pin|C_Pin|B_Pin|A_Pin, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8000dc8:	483c      	ldr	r0, [pc, #240]	@ (8000ebc <MX_GPIO_Init+0x170>)
 8000dca:	f001 f9dd 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|E_Pin|D_Pin, GPIO_PIN_RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f641 0103 	movw	r1, #6147	@ 0x1803
 8000dd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dd8:	f001 f9d6 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, G_Pin|F_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 8000de2:	4837      	ldr	r0, [pc, #220]	@ (8000ec0 <MX_GPIO_Init+0x174>)
 8000de4:	f001 f9d0 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000de8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000df2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	482f      	ldr	r0, [pc, #188]	@ (8000ebc <MX_GPIO_Init+0x170>)
 8000e00:	f001 f838 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : ECHO_Pin DETECT5_Pin DETECT1_Pin DETECT2_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin|DETECT5_Pin|DETECT1_Pin|DETECT2_Pin;
 8000e04:	f241 4305 	movw	r3, #5125	@ 0x1405
 8000e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	4828      	ldr	r0, [pc, #160]	@ (8000ebc <MX_GPIO_Init+0x170>)
 8000e1a:	f001 f82b 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIGGER_Pin C_Pin B_Pin A_Pin */
  GPIO_InitStruct.Pin = TRIGGER_Pin|C_Pin|B_Pin|A_Pin;
 8000e1e:	f44f 73b1 	mov.w	r3, #354	@ 0x162
 8000e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e24:	2301      	movs	r3, #1
 8000e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4619      	mov	r1, r3
 8000e36:	4821      	ldr	r0, [pc, #132]	@ (8000ebc <MX_GPIO_Init+0x170>)
 8000e38:	f001 f81c 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin E_Pin D_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|E_Pin|D_Pin;
 8000e3c:	f641 0303 	movw	r3, #6147	@ 0x1803
 8000e40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4619      	mov	r1, r3
 8000e54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e58:	f001 f80c 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : ButtonExt_Pin DETECT4_Pin DETECT3L_Pin DETECT3P_Pin */
  GPIO_InitStruct.Pin = ButtonExt_Pin|DETECT4_Pin|DETECT3L_Pin|DETECT3P_Pin;
 8000e5c:	f44f 7361 	mov.w	r3, #900	@ 0x384
 8000e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4813      	ldr	r0, [pc, #76]	@ (8000ec0 <MX_GPIO_Init+0x174>)
 8000e72:	f000 ffff 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : G_Pin F_Pin LD2_Pin */
  GPIO_InitStruct.Pin = G_Pin|F_Pin|LD2_Pin;
 8000e76:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	480c      	ldr	r0, [pc, #48]	@ (8000ec0 <MX_GPIO_Init+0x174>)
 8000e90:	f000 fff0 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : DETECT3_Pin */
  GPIO_InitStruct.Pin = DETECT3_Pin;
 8000e94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DETECT3_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eac:	f000 ffe2 	bl	8001e74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eb0:	bf00      	nop
 8000eb2:	3728      	adds	r7, #40	@ 0x28
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	48000800 	.word	0x48000800
 8000ec0:	48000400 	.word	0x48000400

08000ec4 <bluetooth>:

}



void bluetooth(void) { // obsługa sterowania poprzez moduł bluetooth zs-040/hc-06
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	while(1){

		if(HAL_UART_Receive(&huart1, &receivedChar, 1, 100) == HAL_OK) {
 8000ec8:	2364      	movs	r3, #100	@ 0x64
 8000eca:	2201      	movs	r2, #1
 8000ecc:	4928      	ldr	r1, [pc, #160]	@ (8000f70 <bluetooth+0xac>)
 8000ece:	4829      	ldr	r0, [pc, #164]	@ (8000f74 <bluetooth+0xb0>)
 8000ed0:	f003 ffa8 	bl	8004e24 <HAL_UART_Receive>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d1f6      	bne.n	8000ec8 <bluetooth+0x4>
		        if (receivedChar == 's') {
 8000eda:	4b25      	ldr	r3, [pc, #148]	@ (8000f70 <bluetooth+0xac>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b73      	cmp	r3, #115	@ 0x73
 8000ee0:	d10c      	bne.n	8000efc <bluetooth+0x38>
		        	display1();
 8000ee2:	f000 f951 	bl	8001188 <display1>
		        	set_ang(450, 0);
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000eec:	f000 f846 	bl	8000f7c <set_ang>
		            motor_backward(cycle);
 8000ef0:	4b21      	ldr	r3, [pc, #132]	@ (8000f78 <bluetooth+0xb4>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 f903 	bl	8001100 <motor_backward>
 8000efa:	e7e5      	b.n	8000ec8 <bluetooth+0x4>
		        } else if (receivedChar == 'w') {
 8000efc:	4b1c      	ldr	r3, [pc, #112]	@ (8000f70 <bluetooth+0xac>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b77      	cmp	r3, #119	@ 0x77
 8000f02:	d10c      	bne.n	8000f1e <bluetooth+0x5a>
		        	display2();
 8000f04:	f000 f950 	bl	80011a8 <display2>
		        	set_ang(450, 0);
 8000f08:	2100      	movs	r1, #0
 8000f0a:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000f0e:	f000 f835 	bl	8000f7c <set_ang>
		            motor_forward(cycle);
 8000f12:	4b19      	ldr	r3, [pc, #100]	@ (8000f78 <bluetooth+0xb4>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 f872 	bl	8001000 <motor_forward>
 8000f1c:	e7d4      	b.n	8000ec8 <bluetooth+0x4>
		        } else if (receivedChar == 'a') {
 8000f1e:	4b14      	ldr	r3, [pc, #80]	@ (8000f70 <bluetooth+0xac>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b61      	cmp	r3, #97	@ 0x61
 8000f24:	d10a      	bne.n	8000f3c <bluetooth+0x78>
		        	set_ang(900, 0);
 8000f26:	2100      	movs	r1, #0
 8000f28:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8000f2c:	f000 f826 	bl	8000f7c <set_ang>
		            motor_left(cycle);
 8000f30:	4b11      	ldr	r3, [pc, #68]	@ (8000f78 <bluetooth+0xb4>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f000 f88b 	bl	8001050 <motor_left>
 8000f3a:	e7c5      	b.n	8000ec8 <bluetooth+0x4>
		        } else if (receivedChar == 'd') {
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f70 <bluetooth+0xac>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b64      	cmp	r3, #100	@ 0x64
 8000f42:	d109      	bne.n	8000f58 <bluetooth+0x94>
		        	set_ang(0, 0);
 8000f44:	2100      	movs	r1, #0
 8000f46:	2000      	movs	r0, #0
 8000f48:	f000 f818 	bl	8000f7c <set_ang>
		            motor_right(cycle);
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f78 <bluetooth+0xb4>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 f8a9 	bl	80010a8 <motor_right>
 8000f56:	e7b7      	b.n	8000ec8 <bluetooth+0x4>
		        } else if (receivedChar == 'q') {
 8000f58:	4b05      	ldr	r3, [pc, #20]	@ (8000f70 <bluetooth+0xac>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b71      	cmp	r3, #113	@ 0x71
 8000f5e:	d1b3      	bne.n	8000ec8 <bluetooth+0x4>
		        	set_ang(450, 0);
 8000f60:	2100      	movs	r1, #0
 8000f62:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000f66:	f000 f809 	bl	8000f7c <set_ang>
		            motor_stop();
 8000f6a:	f000 f8f1 	bl	8001150 <motor_stop>
		if(HAL_UART_Receive(&huart1, &receivedChar, 1, 100) == HAL_OK) {
 8000f6e:	e7ab      	b.n	8000ec8 <bluetooth+0x4>
 8000f70:	200002cf 	.word	0x200002cf
 8000f74:	200001b8 	.word	0x200001b8
 8000f78:	20000000 	.word	0x20000000

08000f7c <set_ang>:

}


void set_ang(uint16_t ang, uint8_t mode)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	460a      	mov	r2, r1
 8000f86:	80fb      	strh	r3, [r7, #6]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	717b      	strb	r3, [r7, #5]
	uint16_t val;

	if(ang > ANGLE_MAX)
 8000f8c:	88fb      	ldrh	r3, [r7, #6]
 8000f8e:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8000f92:	d902      	bls.n	8000f9a <set_ang+0x1e>
	{
		ang = ANGLE_MAX;
 8000f94:	f44f 7361 	mov.w	r3, #900	@ 0x384
 8000f98:	80fb      	strh	r3, [r7, #6]
	else if (ang < ANGLE_MIN)
	{
		ang = ANGLE_MIN;
	}

	if(mode)
 8000f9a:	797b      	ldrb	r3, [r7, #5]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d010      	beq.n	8000fc2 <set_ang+0x46>
	{
		val = PWM_MIN + ((ang - ANGLE_MIN) * STEP) / 1000;
 8000fa0:	88fa      	ldrh	r2, [r7, #6]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	015b      	lsls	r3, r3, #5
 8000fa6:	4413      	add	r3, r2
 8000fa8:	015b      	lsls	r3, r3, #5
 8000faa:	1a9b      	subs	r3, r3, r2
 8000fac:	4a12      	ldr	r2, [pc, #72]	@ (8000ff8 <set_ang+0x7c>)
 8000fae:	fb82 1203 	smull	r1, r2, r2, r3
 8000fb2:	1192      	asrs	r2, r2, #6
 8000fb4:	17db      	asrs	r3, r3, #31
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	f203 434c 	addw	r3, r3, #1100	@ 0x44c
 8000fbe:	81fb      	strh	r3, [r7, #14]
 8000fc0:	e00f      	b.n	8000fe2 <set_ang+0x66>
	}
	else
	{
		val = PWM_MAX - ((ang - ANGLE_MIN) * STEP) / 1000;
 8000fc2:	88fa      	ldrh	r2, [r7, #6]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	015b      	lsls	r3, r3, #5
 8000fc8:	4413      	add	r3, r2
 8000fca:	015b      	lsls	r3, r3, #5
 8000fcc:	1a9b      	subs	r3, r3, r2
 8000fce:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff8 <set_ang+0x7c>)
 8000fd0:	fb82 1203 	smull	r1, r2, r2, r3
 8000fd4:	1192      	asrs	r2, r2, #6
 8000fd6:	17db      	asrs	r3, r3, #31
 8000fd8:	1a9b      	subs	r3, r3, r2
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	f603 0302 	addw	r3, r3, #2050	@ 0x802
 8000fe0:	81fb      	strh	r3, [r7, #14]
	}

	__HAL_TIM_SET_COMPARE(&TIM_NO, TIM_CH_NO, val);
 8000fe2:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <set_ang+0x80>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	89fa      	ldrh	r2, [r7, #14]
 8000fe8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	10624dd3 	.word	0x10624dd3
 8000ffc:	20000120 	.word	0x20000120

08001000 <motor_forward>:
    (detect_states[0] != 0 && detect_states[1] != 0) ? turnover(&axle, 'a') :
    (detect_states[2] != 0 && detect_states[3] != 0 && detect_states[4] != 0) ? turnover(&axle, 'd') : 0;
}

void motor_forward(uint32_t duty_cycle)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001008:	4b0d      	ldr	r3, [pc, #52]	@ (8001040 <motor_forward+0x40>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2200      	movs	r2, #0
 800100e:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, cycle);
 8001010:	4b0b      	ldr	r3, [pc, #44]	@ (8001040 <motor_forward+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0b      	ldr	r2, [pc, #44]	@ (8001044 <motor_forward+0x44>)
 8001016:	6812      	ldr	r2, [r2, #0]
 8001018:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800101a:	4b0b      	ldr	r3, [pc, #44]	@ (8001048 <motor_forward+0x48>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2200      	movs	r2, #0
 8001020:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, cycle/3);
 8001022:	4b08      	ldr	r3, [pc, #32]	@ (8001044 <motor_forward+0x44>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <motor_forward+0x48>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4908      	ldr	r1, [pc, #32]	@ (800104c <motor_forward+0x4c>)
 800102c:	fba1 1202 	umull	r1, r2, r1, r2
 8001030:	0852      	lsrs	r2, r2, #1
 8001032:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	20000088 	.word	0x20000088
 8001044:	20000000 	.word	0x20000000
 8001048:	200000d4 	.word	0x200000d4
 800104c:	aaaaaaab 	.word	0xaaaaaaab

08001050 <motor_left>:
void motor_left(uint32_t duty_cycle)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001058:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <motor_left+0x48>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2200      	movs	r2, #0
 800105e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, duty_cycle);
 8001060:	4b0d      	ldr	r3, [pc, #52]	@ (8001098 <motor_left+0x48>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle*2/3);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	005a      	lsls	r2, r3, #1
 800106c:	4b0b      	ldr	r3, [pc, #44]	@ (800109c <motor_left+0x4c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	490b      	ldr	r1, [pc, #44]	@ (80010a0 <motor_left+0x50>)
 8001072:	fba1 1202 	umull	r1, r2, r1, r2
 8001076:	0852      	lsrs	r2, r2, #1
 8001078:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 800107a:	4b08      	ldr	r3, [pc, #32]	@ (800109c <motor_left+0x4c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2200      	movs	r2, #0
 8001080:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8001082:	2201      	movs	r2, #1
 8001084:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001088:	4806      	ldr	r0, [pc, #24]	@ (80010a4 <motor_left+0x54>)
 800108a:	f001 f87d 	bl	8002188 <HAL_GPIO_WritePin>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000088 	.word	0x20000088
 800109c:	200000d4 	.word	0x200000d4
 80010a0:	aaaaaaab 	.word	0xaaaaaaab
 80010a4:	48000400 	.word	0x48000400

080010a8 <motor_right>:
void motor_right(uint32_t duty_cycle)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle*2/3);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	005a      	lsls	r2, r3, #1
 80010b4:	4b0e      	ldr	r3, [pc, #56]	@ (80010f0 <motor_right+0x48>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	490e      	ldr	r1, [pc, #56]	@ (80010f4 <motor_right+0x4c>)
 80010ba:	fba1 1202 	umull	r1, r2, r1, r2
 80010be:	0852      	lsrs	r2, r2, #1
 80010c0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80010c2:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <motor_right+0x48>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2200      	movs	r2, #0
 80010c8:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80010ca:	4b0b      	ldr	r3, [pc, #44]	@ (80010f8 <motor_right+0x50>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2200      	movs	r2, #0
 80010d0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle);
 80010d2:	4b09      	ldr	r3, [pc, #36]	@ (80010f8 <motor_right+0x50>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 80010da:	2201      	movs	r2, #1
 80010dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010e0:	4806      	ldr	r0, [pc, #24]	@ (80010fc <motor_right+0x54>)
 80010e2:	f001 f851 	bl	8002188 <HAL_GPIO_WritePin>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000088 	.word	0x20000088
 80010f4:	aaaaaaab 	.word	0xaaaaaaab
 80010f8:	200000d4 	.word	0x200000d4
 80010fc:	48000400 	.word	0x48000400

08001100 <motor_backward>:

// Function to move motors backward
void motor_backward(uint32_t duty_cycle)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, cycle);
 8001108:	4b0d      	ldr	r3, [pc, #52]	@ (8001140 <motor_backward+0x40>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0d      	ldr	r2, [pc, #52]	@ (8001144 <motor_backward+0x44>)
 800110e:	6812      	ldr	r2, [r2, #0]
 8001110:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001112:	4b0b      	ldr	r3, [pc, #44]	@ (8001140 <motor_backward+0x40>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2200      	movs	r2, #0
 8001118:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, cycle/3);
 800111a:	4b0a      	ldr	r3, [pc, #40]	@ (8001144 <motor_backward+0x44>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <motor_backward+0x48>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	490a      	ldr	r1, [pc, #40]	@ (800114c <motor_backward+0x4c>)
 8001124:	fba1 1202 	umull	r1, r2, r1, r2
 8001128:	0852      	lsrs	r2, r2, #1
 800112a:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 800112c:	4b06      	ldr	r3, [pc, #24]	@ (8001148 <motor_backward+0x48>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2200      	movs	r2, #0
 8001132:	63da      	str	r2, [r3, #60]	@ 0x3c

}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	20000088 	.word	0x20000088
 8001144:	20000000 	.word	0x20000000
 8001148:	200000d4 	.word	0x200000d4
 800114c:	aaaaaaab 	.word	0xaaaaaaab

08001150 <motor_stop>:

// Function to stop motors
void motor_stop(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001154:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <motor_stop+0x30>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2200      	movs	r2, #0
 800115a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800115c:	4b08      	ldr	r3, [pc, #32]	@ (8001180 <motor_stop+0x30>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2200      	movs	r2, #0
 8001162:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001164:	4b07      	ldr	r3, [pc, #28]	@ (8001184 <motor_stop+0x34>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2200      	movs	r2, #0
 800116a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 800116c:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <motor_stop+0x34>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2200      	movs	r2, #0
 8001172:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000088 	.word	0x20000088
 8001184:	200000d4 	.word	0x200000d4

08001188 <display1>:
void display1(void){
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	2140      	movs	r1, #64	@ 0x40
 8001190:	4804      	ldr	r0, [pc, #16]	@ (80011a4 <display1+0x1c>)
 8001192:	f000 fff9 	bl	8002188 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8001196:	2201      	movs	r2, #1
 8001198:	2120      	movs	r1, #32
 800119a:	4802      	ldr	r0, [pc, #8]	@ (80011a4 <display1+0x1c>)
 800119c:	f000 fff4 	bl	8002188 <HAL_GPIO_WritePin>
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	48000800 	.word	0x48000800

080011a8 <display2>:
void display2(void){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	//2
		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011b2:	480f      	ldr	r0, [pc, #60]	@ (80011f0 <display2+0x48>)
 80011b4:	f000 ffe8 	bl	8002188 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 80011b8:	2201      	movs	r2, #1
 80011ba:	2140      	movs	r1, #64	@ 0x40
 80011bc:	480c      	ldr	r0, [pc, #48]	@ (80011f0 <display2+0x48>)
 80011be:	f000 ffe3 	bl	8002188 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 80011c2:	2201      	movs	r2, #1
 80011c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011c8:	480a      	ldr	r0, [pc, #40]	@ (80011f4 <display2+0x4c>)
 80011ca:	f000 ffdd 	bl	8002188 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 80011ce:	2201      	movs	r2, #1
 80011d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011d8:	f000 ffd6 	bl	8002188 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 80011dc:	2201      	movs	r2, #1
 80011de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011e6:	f000 ffcf 	bl	8002188 <HAL_GPIO_WritePin>

}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	48000800 	.word	0x48000800
 80011f4:	48000400 	.word	0x48000400

080011f8 <display3>:
void display3(void){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	//3
		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001202:	480e      	ldr	r0, [pc, #56]	@ (800123c <display3+0x44>)
 8001204:	f000 ffc0 	bl	8002188 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8001208:	2201      	movs	r2, #1
 800120a:	2140      	movs	r1, #64	@ 0x40
 800120c:	480b      	ldr	r0, [pc, #44]	@ (800123c <display3+0x44>)
 800120e:	f000 ffbb 	bl	8002188 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8001212:	2201      	movs	r2, #1
 8001214:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001218:	4809      	ldr	r0, [pc, #36]	@ (8001240 <display3+0x48>)
 800121a:	f000 ffb5 	bl	8002188 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 800121e:	2201      	movs	r2, #1
 8001220:	2120      	movs	r1, #32
 8001222:	4806      	ldr	r0, [pc, #24]	@ (800123c <display3+0x44>)
 8001224:	f000 ffb0 	bl	8002188 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8001228:	2201      	movs	r2, #1
 800122a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800122e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001232:	f000 ffa9 	bl	8002188 <HAL_GPIO_WritePin>
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	48000800 	.word	0x48000800
 8001240:	48000400 	.word	0x48000400

08001244 <display4>:
void display4(void){
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
	//4
		  	HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8001248:	2201      	movs	r2, #1
 800124a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800124e:	480a      	ldr	r0, [pc, #40]	@ (8001278 <display4+0x34>)
 8001250:	f000 ff9a 	bl	8002188 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8001254:	2201      	movs	r2, #1
 8001256:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800125a:	4807      	ldr	r0, [pc, #28]	@ (8001278 <display4+0x34>)
 800125c:	f000 ff94 	bl	8002188 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8001260:	2201      	movs	r2, #1
 8001262:	2140      	movs	r1, #64	@ 0x40
 8001264:	4805      	ldr	r0, [pc, #20]	@ (800127c <display4+0x38>)
 8001266:	f000 ff8f 	bl	8002188 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 800126a:	2201      	movs	r2, #1
 800126c:	2120      	movs	r1, #32
 800126e:	4803      	ldr	r0, [pc, #12]	@ (800127c <display4+0x38>)
 8001270:	f000 ff8a 	bl	8002188 <HAL_GPIO_WritePin>
}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	48000400 	.word	0x48000400
 800127c:	48000800 	.word	0x48000800

08001280 <display5>:
void display5(void){
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8001284:	2201      	movs	r2, #1
 8001286:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800128a:	480e      	ldr	r0, [pc, #56]	@ (80012c4 <display5+0x44>)
 800128c:	f000 ff7c 	bl	8002188 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8001290:	2201      	movs	r2, #1
 8001292:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001296:	480c      	ldr	r0, [pc, #48]	@ (80012c8 <display5+0x48>)
 8001298:	f000 ff76 	bl	8002188 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 800129c:	2201      	movs	r2, #1
 800129e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012a2:	4809      	ldr	r0, [pc, #36]	@ (80012c8 <display5+0x48>)
 80012a4:	f000 ff70 	bl	8002188 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 80012a8:	2201      	movs	r2, #1
 80012aa:	2120      	movs	r1, #32
 80012ac:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <display5+0x44>)
 80012ae:	f000 ff6b 	bl	8002188 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 80012b2:	2201      	movs	r2, #1
 80012b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012bc:	f000 ff64 	bl	8002188 <HAL_GPIO_WritePin>
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	48000800 	.word	0x48000800
 80012c8:	48000400 	.word	0x48000400

080012cc <display6>:
void display6(void){
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 80012d0:	2201      	movs	r2, #1
 80012d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012d6:	4812      	ldr	r0, [pc, #72]	@ (8001320 <display6+0x54>)
 80012d8:	f000 ff56 	bl	8002188 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 80012dc:	2201      	movs	r2, #1
 80012de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012e2:	4810      	ldr	r0, [pc, #64]	@ (8001324 <display6+0x58>)
 80012e4:	f000 ff50 	bl	8002188 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 80012e8:	2201      	movs	r2, #1
 80012ea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012ee:	480d      	ldr	r0, [pc, #52]	@ (8001324 <display6+0x58>)
 80012f0:	f000 ff4a 	bl	8002188 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 80012f4:	2201      	movs	r2, #1
 80012f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012fe:	f000 ff43 	bl	8002188 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8001302:	2201      	movs	r2, #1
 8001304:	2120      	movs	r1, #32
 8001306:	4806      	ldr	r0, [pc, #24]	@ (8001320 <display6+0x54>)
 8001308:	f000 ff3e 	bl	8002188 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 800130c:	2201      	movs	r2, #1
 800130e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001312:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001316:	f000 ff37 	bl	8002188 <HAL_GPIO_WritePin>
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	48000800 	.word	0x48000800
 8001324:	48000400 	.word	0x48000400

08001328 <display_reset>:
void display_reset(void){
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 800132c:	2200      	movs	r2, #0
 800132e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001332:	4814      	ldr	r0, [pc, #80]	@ (8001384 <display_reset+0x5c>)
 8001334:	f000 ff28 	bl	8002188 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8001338:	2200      	movs	r2, #0
 800133a:	2140      	movs	r1, #64	@ 0x40
 800133c:	4811      	ldr	r0, [pc, #68]	@ (8001384 <display_reset+0x5c>)
 800133e:	f000 ff23 	bl	8002188 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 8001342:	2200      	movs	r2, #0
 8001344:	2120      	movs	r1, #32
 8001346:	480f      	ldr	r0, [pc, #60]	@ (8001384 <display_reset+0x5c>)
 8001348:	f000 ff1e 	bl	8002188 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001352:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001356:	f000 ff17 	bl	8002188 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001360:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001364:	f000 ff10 	bl	8002188 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800136e:	4806      	ldr	r0, [pc, #24]	@ (8001388 <display_reset+0x60>)
 8001370:	f000 ff0a 	bl	8002188 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 8001374:	2200      	movs	r2, #0
 8001376:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800137a:	4803      	ldr	r0, [pc, #12]	@ (8001388 <display_reset+0x60>)
 800137c:	f000 ff04 	bl	8002188 <HAL_GPIO_WritePin>

}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	48000800 	.word	0x48000800
 8001388:	48000400 	.word	0x48000400

0800138c <countdown>:

void countdown(void){
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
	display_reset();
 8001390:	f7ff ffca 	bl	8001328 <display_reset>
	display3();
 8001394:	f7ff ff30 	bl	80011f8 <display3>
	HAL_Delay(1000);
 8001398:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800139c:	f000 fbbe 	bl	8001b1c <HAL_Delay>
	display_reset();
 80013a0:	f7ff ffc2 	bl	8001328 <display_reset>
	display2();
 80013a4:	f7ff ff00 	bl	80011a8 <display2>
	HAL_Delay(1000);
 80013a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013ac:	f000 fbb6 	bl	8001b1c <HAL_Delay>
	display_reset();
 80013b0:	f7ff ffba 	bl	8001328 <display_reset>
	display1();
 80013b4:	f7ff fee8 	bl	8001188 <display1>
	HAL_Delay(1000);
 80013b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013bc:	f000 fbae 	bl	8001b1c <HAL_Delay>
	display_reset();
 80013c0:	f7ff ffb2 	bl	8001328 <display_reset>
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013cc:	b672      	cpsid	i
}
 80013ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <Error_Handler+0x8>

080013d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	4b0f      	ldr	r3, [pc, #60]	@ (8001418 <HAL_MspInit+0x44>)
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	4a0e      	ldr	r2, [pc, #56]	@ (8001418 <HAL_MspInit+0x44>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6193      	str	r3, [r2, #24]
 80013e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <HAL_MspInit+0x44>)
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f2:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <HAL_MspInit+0x44>)
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	4a08      	ldr	r2, [pc, #32]	@ (8001418 <HAL_MspInit+0x44>)
 80013f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013fc:	61d3      	str	r3, [r2, #28]
 80013fe:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <HAL_MspInit+0x44>)
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800140a:	2007      	movs	r0, #7
 800140c:	f000 fc7a 	bl	8001d04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40021000 	.word	0x40021000

0800141c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a27      	ldr	r2, [pc, #156]	@ (80014c8 <HAL_TIM_Base_MspInit+0xac>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d11c      	bne.n	8001468 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800142e:	4b27      	ldr	r3, [pc, #156]	@ (80014cc <HAL_TIM_Base_MspInit+0xb0>)
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	4a26      	ldr	r2, [pc, #152]	@ (80014cc <HAL_TIM_Base_MspInit+0xb0>)
 8001434:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001438:	6193      	str	r3, [r2, #24]
 800143a:	4b24      	ldr	r3, [pc, #144]	@ (80014cc <HAL_TIM_Base_MspInit+0xb0>)
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	2018      	movs	r0, #24
 800144c:	f000 fc65 	bl	8001d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001450:	2018      	movs	r0, #24
 8001452:	f000 fc7e 	bl	8001d52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	201a      	movs	r0, #26
 800145c:	f000 fc5d 	bl	8001d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001460:	201a      	movs	r0, #26
 8001462:	f000 fc76 	bl	8001d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001466:	e02a      	b.n	80014be <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a18      	ldr	r2, [pc, #96]	@ (80014d0 <HAL_TIM_Base_MspInit+0xb4>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d10c      	bne.n	800148c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001472:	4b16      	ldr	r3, [pc, #88]	@ (80014cc <HAL_TIM_Base_MspInit+0xb0>)
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	4a15      	ldr	r2, [pc, #84]	@ (80014cc <HAL_TIM_Base_MspInit+0xb0>)
 8001478:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800147c:	6193      	str	r3, [r2, #24]
 800147e:	4b13      	ldr	r3, [pc, #76]	@ (80014cc <HAL_TIM_Base_MspInit+0xb0>)
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]
}
 800148a:	e018      	b.n	80014be <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM17)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a10      	ldr	r2, [pc, #64]	@ (80014d4 <HAL_TIM_Base_MspInit+0xb8>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d113      	bne.n	80014be <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001496:	4b0d      	ldr	r3, [pc, #52]	@ (80014cc <HAL_TIM_Base_MspInit+0xb0>)
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	4a0c      	ldr	r2, [pc, #48]	@ (80014cc <HAL_TIM_Base_MspInit+0xb0>)
 800149c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014a0:	6193      	str	r3, [r2, #24]
 80014a2:	4b0a      	ldr	r3, [pc, #40]	@ (80014cc <HAL_TIM_Base_MspInit+0xb0>)
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2100      	movs	r1, #0
 80014b2:	201a      	movs	r0, #26
 80014b4:	f000 fc31 	bl	8001d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80014b8:	201a      	movs	r0, #26
 80014ba:	f000 fc4a 	bl	8001d52 <HAL_NVIC_EnableIRQ>
}
 80014be:	bf00      	nop
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40012c00 	.word	0x40012c00
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40014400 	.word	0x40014400
 80014d4:	40014800 	.word	0x40014800

080014d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014e8:	d10b      	bne.n	8001502 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ea:	4b09      	ldr	r3, [pc, #36]	@ (8001510 <HAL_TIM_PWM_MspInit+0x38>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	4a08      	ldr	r2, [pc, #32]	@ (8001510 <HAL_TIM_PWM_MspInit+0x38>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	61d3      	str	r3, [r2, #28]
 80014f6:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <HAL_TIM_PWM_MspInit+0x38>)
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001502:	bf00      	nop
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000

08001514 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08c      	sub	sp, #48	@ 0x30
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a51      	ldr	r2, [pc, #324]	@ (8001678 <HAL_TIM_MspPostInit+0x164>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d13a      	bne.n	80015ac <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001536:	4b51      	ldr	r3, [pc, #324]	@ (800167c <HAL_TIM_MspPostInit+0x168>)
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	4a50      	ldr	r2, [pc, #320]	@ (800167c <HAL_TIM_MspPostInit+0x168>)
 800153c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001540:	6153      	str	r3, [r2, #20]
 8001542:	4b4e      	ldr	r3, [pc, #312]	@ (800167c <HAL_TIM_MspPostInit+0x168>)
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800154a:	61bb      	str	r3, [r7, #24]
 800154c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	4b4b      	ldr	r3, [pc, #300]	@ (800167c <HAL_TIM_MspPostInit+0x168>)
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	4a4a      	ldr	r2, [pc, #296]	@ (800167c <HAL_TIM_MspPostInit+0x168>)
 8001554:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001558:	6153      	str	r3, [r2, #20]
 800155a:	4b48      	ldr	r3, [pc, #288]	@ (800167c <HAL_TIM_MspPostInit+0x168>)
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001562:	617b      	str	r3, [r7, #20]
 8001564:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = L2_Pin;
 8001566:	2308      	movs	r3, #8
 8001568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001576:	2302      	movs	r3, #2
 8001578:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(L2_GPIO_Port, &GPIO_InitStruct);
 800157a:	f107 031c 	add.w	r3, r7, #28
 800157e:	4619      	mov	r1, r3
 8001580:	483f      	ldr	r0, [pc, #252]	@ (8001680 <HAL_TIM_MspPostInit+0x16c>)
 8001582:	f000 fc77 	bl	8001e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = L1_Pin;
 8001586:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800158a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001594:	2300      	movs	r3, #0
 8001596:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001598:	2306      	movs	r3, #6
 800159a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(L1_GPIO_Port, &GPIO_InitStruct);
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	4619      	mov	r1, r3
 80015a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015a6:	f000 fc65 	bl	8001e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80015aa:	e061      	b.n	8001670 <HAL_TIM_MspPostInit+0x15c>
  else if(htim->Instance==TIM2)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015b4:	d13a      	bne.n	800162c <HAL_TIM_MspPostInit+0x118>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	4b31      	ldr	r3, [pc, #196]	@ (800167c <HAL_TIM_MspPostInit+0x168>)
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	4a30      	ldr	r2, [pc, #192]	@ (800167c <HAL_TIM_MspPostInit+0x168>)
 80015bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015c0:	6153      	str	r3, [r2, #20]
 80015c2:	4b2e      	ldr	r3, [pc, #184]	@ (800167c <HAL_TIM_MspPostInit+0x168>)
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ce:	4b2b      	ldr	r3, [pc, #172]	@ (800167c <HAL_TIM_MspPostInit+0x168>)
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	4a2a      	ldr	r2, [pc, #168]	@ (800167c <HAL_TIM_MspPostInit+0x168>)
 80015d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015d8:	6153      	str	r3, [r2, #20]
 80015da:	4b28      	ldr	r3, [pc, #160]	@ (800167c <HAL_TIM_MspPostInit+0x168>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = P1_Pin;
 80015e6:	2320      	movs	r3, #32
 80015e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	2302      	movs	r3, #2
 80015ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015f6:	2301      	movs	r3, #1
 80015f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(P1_GPIO_Port, &GPIO_InitStruct);
 80015fa:	f107 031c 	add.w	r3, r7, #28
 80015fe:	4619      	mov	r1, r3
 8001600:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001604:	f000 fc36 	bl	8001e74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = P2_Pin;
 8001608:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800160c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800161a:	2301      	movs	r3, #1
 800161c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(P2_GPIO_Port, &GPIO_InitStruct);
 800161e:	f107 031c 	add.w	r3, r7, #28
 8001622:	4619      	mov	r1, r3
 8001624:	4817      	ldr	r0, [pc, #92]	@ (8001684 <HAL_TIM_MspPostInit+0x170>)
 8001626:	f000 fc25 	bl	8001e74 <HAL_GPIO_Init>
}
 800162a:	e021      	b.n	8001670 <HAL_TIM_MspPostInit+0x15c>
  else if(htim->Instance==TIM16)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a15      	ldr	r2, [pc, #84]	@ (8001688 <HAL_TIM_MspPostInit+0x174>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d11c      	bne.n	8001670 <HAL_TIM_MspPostInit+0x15c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	4b11      	ldr	r3, [pc, #68]	@ (800167c <HAL_TIM_MspPostInit+0x168>)
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	4a10      	ldr	r2, [pc, #64]	@ (800167c <HAL_TIM_MspPostInit+0x168>)
 800163c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001640:	6153      	str	r3, [r2, #20]
 8001642:	4b0e      	ldr	r3, [pc, #56]	@ (800167c <HAL_TIM_MspPostInit+0x168>)
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800164e:	2340      	movs	r3, #64	@ 0x40
 8001650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001652:	2302      	movs	r3, #2
 8001654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165a:	2300      	movs	r3, #0
 800165c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800165e:	2301      	movs	r3, #1
 8001660:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001662:	f107 031c 	add.w	r3, r7, #28
 8001666:	4619      	mov	r1, r3
 8001668:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800166c:	f000 fc02 	bl	8001e74 <HAL_GPIO_Init>
}
 8001670:	bf00      	nop
 8001672:	3730      	adds	r7, #48	@ 0x30
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40012c00 	.word	0x40012c00
 800167c:	40021000 	.word	0x40021000
 8001680:	48000800 	.word	0x48000800
 8001684:	48000400 	.word	0x48000400
 8001688:	40014400 	.word	0x40014400

0800168c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08c      	sub	sp, #48	@ 0x30
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 031c 	add.w	r3, r7, #28
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a37      	ldr	r2, [pc, #220]	@ (8001788 <HAL_UART_MspInit+0xfc>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d132      	bne.n	8001714 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016ae:	4b37      	ldr	r3, [pc, #220]	@ (800178c <HAL_UART_MspInit+0x100>)
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	4a36      	ldr	r2, [pc, #216]	@ (800178c <HAL_UART_MspInit+0x100>)
 80016b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016b8:	6193      	str	r3, [r2, #24]
 80016ba:	4b34      	ldr	r3, [pc, #208]	@ (800178c <HAL_UART_MspInit+0x100>)
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016c2:	61bb      	str	r3, [r7, #24]
 80016c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	4b31      	ldr	r3, [pc, #196]	@ (800178c <HAL_UART_MspInit+0x100>)
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	4a30      	ldr	r2, [pc, #192]	@ (800178c <HAL_UART_MspInit+0x100>)
 80016cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016d0:	6153      	str	r3, [r2, #20]
 80016d2:	4b2e      	ldr	r3, [pc, #184]	@ (800178c <HAL_UART_MspInit+0x100>)
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016de:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80016e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ec:	2303      	movs	r3, #3
 80016ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016f0:	2307      	movs	r3, #7
 80016f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f4:	f107 031c 	add.w	r3, r7, #28
 80016f8:	4619      	mov	r1, r3
 80016fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016fe:	f000 fbb9 	bl	8001e74 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2100      	movs	r1, #0
 8001706:	2025      	movs	r0, #37	@ 0x25
 8001708:	f000 fb07 	bl	8001d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800170c:	2025      	movs	r0, #37	@ 0x25
 800170e:	f000 fb20 	bl	8001d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001712:	e035      	b.n	8001780 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART2)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a1d      	ldr	r2, [pc, #116]	@ (8001790 <HAL_UART_MspInit+0x104>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d130      	bne.n	8001780 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART2_CLK_ENABLE();
 800171e:	4b1b      	ldr	r3, [pc, #108]	@ (800178c <HAL_UART_MspInit+0x100>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	4a1a      	ldr	r2, [pc, #104]	@ (800178c <HAL_UART_MspInit+0x100>)
 8001724:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001728:	61d3      	str	r3, [r2, #28]
 800172a:	4b18      	ldr	r3, [pc, #96]	@ (800178c <HAL_UART_MspInit+0x100>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	4b15      	ldr	r3, [pc, #84]	@ (800178c <HAL_UART_MspInit+0x100>)
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	4a14      	ldr	r2, [pc, #80]	@ (800178c <HAL_UART_MspInit+0x100>)
 800173c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001740:	6153      	str	r3, [r2, #20]
 8001742:	4b12      	ldr	r3, [pc, #72]	@ (800178c <HAL_UART_MspInit+0x100>)
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800174e:	230c      	movs	r3, #12
 8001750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800175e:	2307      	movs	r3, #7
 8001760:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	f107 031c 	add.w	r3, r7, #28
 8001766:	4619      	mov	r1, r3
 8001768:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800176c:	f000 fb82 	bl	8001e74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001770:	2200      	movs	r2, #0
 8001772:	2100      	movs	r1, #0
 8001774:	2026      	movs	r0, #38	@ 0x26
 8001776:	f000 fad0 	bl	8001d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800177a:	2026      	movs	r0, #38	@ 0x26
 800177c:	f000 fae9 	bl	8001d52 <HAL_NVIC_EnableIRQ>
}
 8001780:	bf00      	nop
 8001782:	3730      	adds	r7, #48	@ 0x30
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40013800 	.word	0x40013800
 800178c:	40021000 	.word	0x40021000
 8001790:	40004400 	.word	0x40004400

08001794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <NMI_Handler+0x4>

0800179c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <HardFault_Handler+0x4>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <MemManage_Handler+0x4>

080017ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <BusFault_Handler+0x4>

080017b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <UsageFault_Handler+0x4>

080017bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ea:	f000 f977 	bl	8001adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017f8:	4802      	ldr	r0, [pc, #8]	@ (8001804 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80017fa:	f002 fac5 	bl	8003d88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000088 	.word	0x20000088

08001808 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800180c:	4803      	ldr	r0, [pc, #12]	@ (800181c <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 800180e:	f002 fabb 	bl	8003d88 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8001812:	4803      	ldr	r0, [pc, #12]	@ (8001820 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8001814:	f002 fab8 	bl	8003d88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000088 	.word	0x20000088
 8001820:	2000016c 	.word	0x2000016c

08001824 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001828:	4802      	ldr	r0, [pc, #8]	@ (8001834 <USART1_IRQHandler+0x10>)
 800182a:	f003 fbc5 	bl	8004fb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200001b8 	.word	0x200001b8

08001838 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800183c:	4802      	ldr	r0, [pc, #8]	@ (8001848 <USART2_IRQHandler+0x10>)
 800183e:	f003 fbbb 	bl	8004fb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000240 	.word	0x20000240

0800184c <_getpid>:
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
 8001850:	2301      	movs	r3, #1
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <_kill>:
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
 8001866:	f004 fbf3 	bl	8006050 <__errno>
 800186a:	4603      	mov	r3, r0
 800186c:	2216      	movs	r2, #22
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	f04f 33ff 	mov.w	r3, #4294967295
 8001874:	4618      	mov	r0, r3
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <_exit>:
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	f04f 31ff 	mov.w	r1, #4294967295
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ffe7 	bl	800185c <_kill>
 800188e:	bf00      	nop
 8001890:	e7fd      	b.n	800188e <_exit+0x12>

08001892 <_read>:
 8001892:	b580      	push	{r7, lr}
 8001894:	b086      	sub	sp, #24
 8001896:	af00      	add	r7, sp, #0
 8001898:	60f8      	str	r0, [r7, #12]
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	e00a      	b.n	80018ba <_read+0x28>
 80018a4:	f3af 8000 	nop.w
 80018a8:	4601      	mov	r1, r0
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	1c5a      	adds	r2, r3, #1
 80018ae:	60ba      	str	r2, [r7, #8]
 80018b0:	b2ca      	uxtb	r2, r1
 80018b2:	701a      	strb	r2, [r3, #0]
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	3301      	adds	r3, #1
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	429a      	cmp	r2, r3
 80018c0:	dbf0      	blt.n	80018a4 <_read+0x12>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <_write>:
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	e009      	b.n	80018f2 <_write+0x26>
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	1c5a      	adds	r2, r3, #1
 80018e2:	60ba      	str	r2, [r7, #8]
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f3af 8000 	nop.w
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	3301      	adds	r3, #1
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	dbf1      	blt.n	80018de <_write+0x12>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <_close>:
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	f04f 33ff 	mov.w	r3, #4294967295
 8001910:	4618      	mov	r0, r3
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <_fstat>:
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	2300      	movs	r3, #0
 8001930:	4618      	mov	r0, r3
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <_isatty>:
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	2301      	movs	r3, #1
 8001946:	4618      	mov	r0, r3
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <_lseek>:
 8001952:	b480      	push	{r7}
 8001954:	b085      	sub	sp, #20
 8001956:	af00      	add	r7, sp, #0
 8001958:	60f8      	str	r0, [r7, #12]
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
 800195e:	2300      	movs	r3, #0
 8001960:	4618      	mov	r0, r3
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <_sbrk>:
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	4a14      	ldr	r2, [pc, #80]	@ (80019c8 <_sbrk+0x5c>)
 8001976:	4b15      	ldr	r3, [pc, #84]	@ (80019cc <_sbrk+0x60>)
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	4b13      	ldr	r3, [pc, #76]	@ (80019d0 <_sbrk+0x64>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d102      	bne.n	800198e <_sbrk+0x22>
 8001988:	4b11      	ldr	r3, [pc, #68]	@ (80019d0 <_sbrk+0x64>)
 800198a:	4a12      	ldr	r2, [pc, #72]	@ (80019d4 <_sbrk+0x68>)
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	4b10      	ldr	r3, [pc, #64]	@ (80019d0 <_sbrk+0x64>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	429a      	cmp	r2, r3
 800199a:	d207      	bcs.n	80019ac <_sbrk+0x40>
 800199c:	f004 fb58 	bl	8006050 <__errno>
 80019a0:	4603      	mov	r3, r0
 80019a2:	220c      	movs	r2, #12
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295
 80019aa:	e009      	b.n	80019c0 <_sbrk+0x54>
 80019ac:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <_sbrk+0x64>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	4b07      	ldr	r3, [pc, #28]	@ (80019d0 <_sbrk+0x64>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	4a05      	ldr	r2, [pc, #20]	@ (80019d0 <_sbrk+0x64>)
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20004000 	.word	0x20004000
 80019cc:	00000400 	.word	0x00000400
 80019d0:	200002d0 	.word	0x200002d0
 80019d4:	20000428 	.word	0x20000428

080019d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <SystemInit+0x20>)
 80019de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019e2:	4a05      	ldr	r2, [pc, #20]	@ (80019f8 <SystemInit+0x20>)
 80019e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <Reset_Handler>:
 80019fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a34 <LoopForever+0x2>
 8001a00:	f7ff ffea 	bl	80019d8 <SystemInit>
 8001a04:	480c      	ldr	r0, [pc, #48]	@ (8001a38 <LoopForever+0x6>)
 8001a06:	490d      	ldr	r1, [pc, #52]	@ (8001a3c <LoopForever+0xa>)
 8001a08:	4a0d      	ldr	r2, [pc, #52]	@ (8001a40 <LoopForever+0xe>)
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	e002      	b.n	8001a14 <LoopCopyDataInit>

08001a0e <CopyDataInit>:
 8001a0e:	58d4      	ldr	r4, [r2, r3]
 8001a10:	50c4      	str	r4, [r0, r3]
 8001a12:	3304      	adds	r3, #4

08001a14 <LoopCopyDataInit>:
 8001a14:	18c4      	adds	r4, r0, r3
 8001a16:	428c      	cmp	r4, r1
 8001a18:	d3f9      	bcc.n	8001a0e <CopyDataInit>
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a44 <LoopForever+0x12>)
 8001a1c:	4c0a      	ldr	r4, [pc, #40]	@ (8001a48 <LoopForever+0x16>)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e001      	b.n	8001a26 <LoopFillZerobss>

08001a22 <FillZerobss>:
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	3204      	adds	r2, #4

08001a26 <LoopFillZerobss>:
 8001a26:	42a2      	cmp	r2, r4
 8001a28:	d3fb      	bcc.n	8001a22 <FillZerobss>
 8001a2a:	f004 fb17 	bl	800605c <__libc_init_array>
 8001a2e:	f7fe fc1f 	bl	8000270 <main>

08001a32 <LoopForever>:
 8001a32:	e7fe      	b.n	8001a32 <LoopForever>
 8001a34:	20004000 	.word	0x20004000
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	2000006c 	.word	0x2000006c
 8001a40:	08006e38 	.word	0x08006e38
 8001a44:	2000006c 	.word	0x2000006c
 8001a48:	20000424 	.word	0x20000424

08001a4c <ADC1_IRQHandler>:
 8001a4c:	e7fe      	b.n	8001a4c <ADC1_IRQHandler>
	...

08001a50 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a54:	4b08      	ldr	r3, [pc, #32]	@ (8001a78 <HAL_Init+0x28>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a07      	ldr	r2, [pc, #28]	@ (8001a78 <HAL_Init+0x28>)
 8001a5a:	f043 0310 	orr.w	r3, r3, #16
 8001a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a60:	2003      	movs	r0, #3
 8001a62:	f000 f94f 	bl	8001d04 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a66:	2000      	movs	r0, #0
 8001a68:	f000 f808 	bl	8001a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a6c:	f7ff fcb2 	bl	80013d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40022000 	.word	0x40022000

08001a7c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a84:	4b12      	ldr	r3, [pc, #72]	@ (8001ad0 <HAL_InitTick+0x54>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b12      	ldr	r3, [pc, #72]	@ (8001ad4 <HAL_InitTick+0x58>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 f967 	bl	8001d6e <HAL_SYSTICK_Config>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e00e      	b.n	8001ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b0f      	cmp	r3, #15
 8001aae:	d80a      	bhi.n	8001ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab8:	f000 f92f 	bl	8001d1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001abc:	4a06      	ldr	r2, [pc, #24]	@ (8001ad8 <HAL_InitTick+0x5c>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e000      	b.n	8001ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000004 	.word	0x20000004
 8001ad4:	2000000c 	.word	0x2000000c
 8001ad8:	20000008 	.word	0x20000008

08001adc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <HAL_IncTick+0x20>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b06      	ldr	r3, [pc, #24]	@ (8001b00 <HAL_IncTick+0x24>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4413      	add	r3, r2
 8001aec:	4a04      	ldr	r2, [pc, #16]	@ (8001b00 <HAL_IncTick+0x24>)
 8001aee:	6013      	str	r3, [r2, #0]
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	2000000c 	.word	0x2000000c
 8001b00:	200002d4 	.word	0x200002d4

08001b04 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return uwTick;  
 8001b08:	4b03      	ldr	r3, [pc, #12]	@ (8001b18 <HAL_GetTick+0x14>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	200002d4 	.word	0x200002d4

08001b1c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b24:	f7ff ffee 	bl	8001b04 <HAL_GetTick>
 8001b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b34:	d005      	beq.n	8001b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b36:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <HAL_Delay+0x44>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4413      	add	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001b42:	bf00      	nop
 8001b44:	f7ff ffde 	bl	8001b04 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d8f7      	bhi.n	8001b44 <HAL_Delay+0x28>
  {
  }
}
 8001b54:	bf00      	nop
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	2000000c 	.word	0x2000000c

08001b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b80:	4013      	ands	r3, r2
 8001b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b96:	4a04      	ldr	r2, [pc, #16]	@ (8001ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	60d3      	str	r3, [r2, #12]
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb0:	4b04      	ldr	r3, [pc, #16]	@ (8001bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	0a1b      	lsrs	r3, r3, #8
 8001bb6:	f003 0307 	and.w	r3, r3, #7
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	db0b      	blt.n	8001bf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	f003 021f 	and.w	r2, r3, #31
 8001be0:	4907      	ldr	r1, [pc, #28]	@ (8001c00 <__NVIC_EnableIRQ+0x38>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	095b      	lsrs	r3, r3, #5
 8001be8:	2001      	movs	r0, #1
 8001bea:	fa00 f202 	lsl.w	r2, r0, r2
 8001bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000e100 	.word	0xe000e100

08001c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	6039      	str	r1, [r7, #0]
 8001c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	db0a      	blt.n	8001c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	490c      	ldr	r1, [pc, #48]	@ (8001c50 <__NVIC_SetPriority+0x4c>)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	0112      	lsls	r2, r2, #4
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	440b      	add	r3, r1
 8001c28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c2c:	e00a      	b.n	8001c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	4908      	ldr	r1, [pc, #32]	@ (8001c54 <__NVIC_SetPriority+0x50>)
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	3b04      	subs	r3, #4
 8001c3c:	0112      	lsls	r2, r2, #4
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	440b      	add	r3, r1
 8001c42:	761a      	strb	r2, [r3, #24]
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000e100 	.word	0xe000e100
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b089      	sub	sp, #36	@ 0x24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f1c3 0307 	rsb	r3, r3, #7
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	bf28      	it	cs
 8001c76:	2304      	movcs	r3, #4
 8001c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	2b06      	cmp	r3, #6
 8001c80:	d902      	bls.n	8001c88 <NVIC_EncodePriority+0x30>
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3b03      	subs	r3, #3
 8001c86:	e000      	b.n	8001c8a <NVIC_EncodePriority+0x32>
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43da      	mvns	r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8001caa:	43d9      	mvns	r1, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb0:	4313      	orrs	r3, r2
         );
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3724      	adds	r7, #36	@ 0x24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
	...

08001cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cd0:	d301      	bcc.n	8001cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e00f      	b.n	8001cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d00 <SysTick_Config+0x40>)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cde:	210f      	movs	r1, #15
 8001ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce4:	f7ff ff8e 	bl	8001c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ce8:	4b05      	ldr	r3, [pc, #20]	@ (8001d00 <SysTick_Config+0x40>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cee:	4b04      	ldr	r3, [pc, #16]	@ (8001d00 <SysTick_Config+0x40>)
 8001cf0:	2207      	movs	r2, #7
 8001cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	e000e010 	.word	0xe000e010

08001d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff ff29 	bl	8001b64 <__NVIC_SetPriorityGrouping>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b086      	sub	sp, #24
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	4603      	mov	r3, r0
 8001d22:	60b9      	str	r1, [r7, #8]
 8001d24:	607a      	str	r2, [r7, #4]
 8001d26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d2c:	f7ff ff3e 	bl	8001bac <__NVIC_GetPriorityGrouping>
 8001d30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	6978      	ldr	r0, [r7, #20]
 8001d38:	f7ff ff8e 	bl	8001c58 <NVIC_EncodePriority>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ff5d 	bl	8001c04 <__NVIC_SetPriority>
}
 8001d4a:	bf00      	nop
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	4603      	mov	r3, r0
 8001d5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ff31 	bl	8001bc8 <__NVIC_EnableIRQ>
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff ffa2 	bl	8001cc0 <SysTick_Config>
 8001d7c:	4603      	mov	r3, r0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d008      	beq.n	8001daa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e020      	b.n	8001dec <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 020e 	bic.w	r2, r2, #14
 8001db8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 0201 	bic.w	r2, r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e00:	2300      	movs	r3, #0
 8001e02:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d005      	beq.n	8001e1a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2204      	movs	r2, #4
 8001e12:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	73fb      	strb	r3, [r7, #15]
 8001e18:	e027      	b.n	8001e6a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 020e 	bic.w	r2, r2, #14
 8001e28:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 0201 	bic.w	r2, r2, #1
 8001e38:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e42:	2101      	movs	r1, #1
 8001e44:	fa01 f202 	lsl.w	r2, r1, r2
 8001e48:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	4798      	blx	r3
    } 
  }
  return status;
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b087      	sub	sp, #28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e82:	e14e      	b.n	8002122 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	2101      	movs	r1, #1
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e90:	4013      	ands	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 8140 	beq.w	800211c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d005      	beq.n	8001eb4 <HAL_GPIO_Init+0x40>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d130      	bne.n	8001f16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	68da      	ldr	r2, [r3, #12]
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eea:	2201      	movs	r2, #1
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	091b      	lsrs	r3, r3, #4
 8001f00:	f003 0201 	and.w	r2, r3, #1
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	2b03      	cmp	r3, #3
 8001f20:	d017      	beq.n	8001f52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4013      	ands	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d123      	bne.n	8001fa6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	08da      	lsrs	r2, r3, #3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3208      	adds	r2, #8
 8001f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	220f      	movs	r2, #15
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	691a      	ldr	r2, [r3, #16]
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	08da      	lsrs	r2, r3, #3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3208      	adds	r2, #8
 8001fa0:	6939      	ldr	r1, [r7, #16]
 8001fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 0203 	and.w	r2, r3, #3
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 809a 	beq.w	800211c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe8:	4b55      	ldr	r3, [pc, #340]	@ (8002140 <HAL_GPIO_Init+0x2cc>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	4a54      	ldr	r2, [pc, #336]	@ (8002140 <HAL_GPIO_Init+0x2cc>)
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	6193      	str	r3, [r2, #24]
 8001ff4:	4b52      	ldr	r3, [pc, #328]	@ (8002140 <HAL_GPIO_Init+0x2cc>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002000:	4a50      	ldr	r2, [pc, #320]	@ (8002144 <HAL_GPIO_Init+0x2d0>)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	089b      	lsrs	r3, r3, #2
 8002006:	3302      	adds	r3, #2
 8002008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	220f      	movs	r2, #15
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	4013      	ands	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800202a:	d013      	beq.n	8002054 <HAL_GPIO_Init+0x1e0>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a46      	ldr	r2, [pc, #280]	@ (8002148 <HAL_GPIO_Init+0x2d4>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d00d      	beq.n	8002050 <HAL_GPIO_Init+0x1dc>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a45      	ldr	r2, [pc, #276]	@ (800214c <HAL_GPIO_Init+0x2d8>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d007      	beq.n	800204c <HAL_GPIO_Init+0x1d8>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a44      	ldr	r2, [pc, #272]	@ (8002150 <HAL_GPIO_Init+0x2dc>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d101      	bne.n	8002048 <HAL_GPIO_Init+0x1d4>
 8002044:	2303      	movs	r3, #3
 8002046:	e006      	b.n	8002056 <HAL_GPIO_Init+0x1e2>
 8002048:	2305      	movs	r3, #5
 800204a:	e004      	b.n	8002056 <HAL_GPIO_Init+0x1e2>
 800204c:	2302      	movs	r3, #2
 800204e:	e002      	b.n	8002056 <HAL_GPIO_Init+0x1e2>
 8002050:	2301      	movs	r3, #1
 8002052:	e000      	b.n	8002056 <HAL_GPIO_Init+0x1e2>
 8002054:	2300      	movs	r3, #0
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	f002 0203 	and.w	r2, r2, #3
 800205c:	0092      	lsls	r2, r2, #2
 800205e:	4093      	lsls	r3, r2
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	4313      	orrs	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002066:	4937      	ldr	r1, [pc, #220]	@ (8002144 <HAL_GPIO_Init+0x2d0>)
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	089b      	lsrs	r3, r3, #2
 800206c:	3302      	adds	r3, #2
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002074:	4b37      	ldr	r3, [pc, #220]	@ (8002154 <HAL_GPIO_Init+0x2e0>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	43db      	mvns	r3, r3
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4013      	ands	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4313      	orrs	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002098:	4a2e      	ldr	r2, [pc, #184]	@ (8002154 <HAL_GPIO_Init+0x2e0>)
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800209e:	4b2d      	ldr	r3, [pc, #180]	@ (8002154 <HAL_GPIO_Init+0x2e0>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4013      	ands	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4313      	orrs	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020c2:	4a24      	ldr	r2, [pc, #144]	@ (8002154 <HAL_GPIO_Init+0x2e0>)
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020c8:	4b22      	ldr	r3, [pc, #136]	@ (8002154 <HAL_GPIO_Init+0x2e0>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4013      	ands	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80020ec:	4a19      	ldr	r2, [pc, #100]	@ (8002154 <HAL_GPIO_Init+0x2e0>)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020f2:	4b18      	ldr	r3, [pc, #96]	@ (8002154 <HAL_GPIO_Init+0x2e0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	43db      	mvns	r3, r3
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4013      	ands	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4313      	orrs	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002116:	4a0f      	ldr	r2, [pc, #60]	@ (8002154 <HAL_GPIO_Init+0x2e0>)
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	3301      	adds	r3, #1
 8002120:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	fa22 f303 	lsr.w	r3, r2, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	f47f aea9 	bne.w	8001e84 <HAL_GPIO_Init+0x10>
  }
}
 8002132:	bf00      	nop
 8002134:	bf00      	nop
 8002136:	371c      	adds	r7, #28
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	40021000 	.word	0x40021000
 8002144:	40010000 	.word	0x40010000
 8002148:	48000400 	.word	0x48000400
 800214c:	48000800 	.word	0x48000800
 8002150:	48000c00 	.word	0x48000c00
 8002154:	40010400 	.word	0x40010400

08002158 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	887b      	ldrh	r3, [r7, #2]
 800216a:	4013      	ands	r3, r2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d002      	beq.n	8002176 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002170:	2301      	movs	r3, #1
 8002172:	73fb      	strb	r3, [r7, #15]
 8002174:	e001      	b.n	800217a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002176:	2300      	movs	r3, #0
 8002178:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800217a:	7bfb      	ldrb	r3, [r7, #15]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	807b      	strh	r3, [r7, #2]
 8002194:	4613      	mov	r3, r2
 8002196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002198:	787b      	ldrb	r3, [r7, #1]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800219e:	887a      	ldrh	r2, [r7, #2]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021a4:	e002      	b.n	80021ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021a6:	887a      	ldrh	r2, [r7, #2]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80021be:	af00      	add	r7, sp, #0
 80021c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021c8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d102      	bne.n	80021de <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	f001 b823 	b.w	8003224 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 817d 	beq.w	80024ee <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80021f4:	4bbc      	ldr	r3, [pc, #752]	@ (80024e8 <HAL_RCC_OscConfig+0x330>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 030c 	and.w	r3, r3, #12
 80021fc:	2b04      	cmp	r3, #4
 80021fe:	d00c      	beq.n	800221a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002200:	4bb9      	ldr	r3, [pc, #740]	@ (80024e8 <HAL_RCC_OscConfig+0x330>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 030c 	and.w	r3, r3, #12
 8002208:	2b08      	cmp	r3, #8
 800220a:	d15c      	bne.n	80022c6 <HAL_RCC_OscConfig+0x10e>
 800220c:	4bb6      	ldr	r3, [pc, #728]	@ (80024e8 <HAL_RCC_OscConfig+0x330>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002214:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002218:	d155      	bne.n	80022c6 <HAL_RCC_OscConfig+0x10e>
 800221a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800221e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002222:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002226:	fa93 f3a3 	rbit	r3, r3
 800222a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800222e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002232:	fab3 f383 	clz	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	095b      	lsrs	r3, r3, #5
 800223a:	b2db      	uxtb	r3, r3
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b01      	cmp	r3, #1
 8002244:	d102      	bne.n	800224c <HAL_RCC_OscConfig+0x94>
 8002246:	4ba8      	ldr	r3, [pc, #672]	@ (80024e8 <HAL_RCC_OscConfig+0x330>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	e015      	b.n	8002278 <HAL_RCC_OscConfig+0xc0>
 800224c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002250:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002254:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002258:	fa93 f3a3 	rbit	r3, r3
 800225c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002260:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002264:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002268:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800226c:	fa93 f3a3 	rbit	r3, r3
 8002270:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002274:	4b9c      	ldr	r3, [pc, #624]	@ (80024e8 <HAL_RCC_OscConfig+0x330>)
 8002276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002278:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800227c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002280:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002284:	fa92 f2a2 	rbit	r2, r2
 8002288:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800228c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002290:	fab2 f282 	clz	r2, r2
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	f042 0220 	orr.w	r2, r2, #32
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	f002 021f 	and.w	r2, r2, #31
 80022a0:	2101      	movs	r1, #1
 80022a2:	fa01 f202 	lsl.w	r2, r1, r2
 80022a6:	4013      	ands	r3, r2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 811f 	beq.w	80024ec <HAL_RCC_OscConfig+0x334>
 80022ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f040 8116 	bne.w	80024ec <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	f000 bfaf 	b.w	8003224 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022d6:	d106      	bne.n	80022e6 <HAL_RCC_OscConfig+0x12e>
 80022d8:	4b83      	ldr	r3, [pc, #524]	@ (80024e8 <HAL_RCC_OscConfig+0x330>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a82      	ldr	r2, [pc, #520]	@ (80024e8 <HAL_RCC_OscConfig+0x330>)
 80022de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022e2:	6013      	str	r3, [r2, #0]
 80022e4:	e036      	b.n	8002354 <HAL_RCC_OscConfig+0x19c>
 80022e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10c      	bne.n	8002310 <HAL_RCC_OscConfig+0x158>
 80022f6:	4b7c      	ldr	r3, [pc, #496]	@ (80024e8 <HAL_RCC_OscConfig+0x330>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a7b      	ldr	r2, [pc, #492]	@ (80024e8 <HAL_RCC_OscConfig+0x330>)
 80022fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	4b79      	ldr	r3, [pc, #484]	@ (80024e8 <HAL_RCC_OscConfig+0x330>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a78      	ldr	r2, [pc, #480]	@ (80024e8 <HAL_RCC_OscConfig+0x330>)
 8002308:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	e021      	b.n	8002354 <HAL_RCC_OscConfig+0x19c>
 8002310:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002314:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002320:	d10c      	bne.n	800233c <HAL_RCC_OscConfig+0x184>
 8002322:	4b71      	ldr	r3, [pc, #452]	@ (80024e8 <HAL_RCC_OscConfig+0x330>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a70      	ldr	r2, [pc, #448]	@ (80024e8 <HAL_RCC_OscConfig+0x330>)
 8002328:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	4b6e      	ldr	r3, [pc, #440]	@ (80024e8 <HAL_RCC_OscConfig+0x330>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a6d      	ldr	r2, [pc, #436]	@ (80024e8 <HAL_RCC_OscConfig+0x330>)
 8002334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	e00b      	b.n	8002354 <HAL_RCC_OscConfig+0x19c>
 800233c:	4b6a      	ldr	r3, [pc, #424]	@ (80024e8 <HAL_RCC_OscConfig+0x330>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a69      	ldr	r2, [pc, #420]	@ (80024e8 <HAL_RCC_OscConfig+0x330>)
 8002342:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	4b67      	ldr	r3, [pc, #412]	@ (80024e8 <HAL_RCC_OscConfig+0x330>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a66      	ldr	r2, [pc, #408]	@ (80024e8 <HAL_RCC_OscConfig+0x330>)
 800234e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002352:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002354:	4b64      	ldr	r3, [pc, #400]	@ (80024e8 <HAL_RCC_OscConfig+0x330>)
 8002356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002358:	f023 020f 	bic.w	r2, r3, #15
 800235c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002360:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	495f      	ldr	r1, [pc, #380]	@ (80024e8 <HAL_RCC_OscConfig+0x330>)
 800236a:	4313      	orrs	r3, r2
 800236c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800236e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002372:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d059      	beq.n	8002432 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237e:	f7ff fbc1 	bl	8001b04 <HAL_GetTick>
 8002382:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002386:	e00a      	b.n	800239e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002388:	f7ff fbbc 	bl	8001b04 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b64      	cmp	r3, #100	@ 0x64
 8002396:	d902      	bls.n	800239e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	f000 bf43 	b.w	8003224 <HAL_RCC_OscConfig+0x106c>
 800239e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023a2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80023aa:	fa93 f3a3 	rbit	r3, r3
 80023ae:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80023b2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	fab3 f383 	clz	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	095b      	lsrs	r3, r3, #5
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d102      	bne.n	80023d0 <HAL_RCC_OscConfig+0x218>
 80023ca:	4b47      	ldr	r3, [pc, #284]	@ (80024e8 <HAL_RCC_OscConfig+0x330>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	e015      	b.n	80023fc <HAL_RCC_OscConfig+0x244>
 80023d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023d4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80023dc:	fa93 f3a3 	rbit	r3, r3
 80023e0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80023e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023e8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80023ec:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80023f8:	4b3b      	ldr	r3, [pc, #236]	@ (80024e8 <HAL_RCC_OscConfig+0x330>)
 80023fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002400:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002404:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002408:	fa92 f2a2 	rbit	r2, r2
 800240c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002410:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002414:	fab2 f282 	clz	r2, r2
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	f042 0220 	orr.w	r2, r2, #32
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	f002 021f 	and.w	r2, r2, #31
 8002424:	2101      	movs	r1, #1
 8002426:	fa01 f202 	lsl.w	r2, r1, r2
 800242a:	4013      	ands	r3, r2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0ab      	beq.n	8002388 <HAL_RCC_OscConfig+0x1d0>
 8002430:	e05d      	b.n	80024ee <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002432:	f7ff fb67 	bl	8001b04 <HAL_GetTick>
 8002436:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243a:	e00a      	b.n	8002452 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800243c:	f7ff fb62 	bl	8001b04 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b64      	cmp	r3, #100	@ 0x64
 800244a:	d902      	bls.n	8002452 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	f000 bee9 	b.w	8003224 <HAL_RCC_OscConfig+0x106c>
 8002452:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002456:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800245e:	fa93 f3a3 	rbit	r3, r3
 8002462:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002466:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800246a:	fab3 f383 	clz	r3, r3
 800246e:	b2db      	uxtb	r3, r3
 8002470:	095b      	lsrs	r3, r3, #5
 8002472:	b2db      	uxtb	r3, r3
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b01      	cmp	r3, #1
 800247c:	d102      	bne.n	8002484 <HAL_RCC_OscConfig+0x2cc>
 800247e:	4b1a      	ldr	r3, [pc, #104]	@ (80024e8 <HAL_RCC_OscConfig+0x330>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	e015      	b.n	80024b0 <HAL_RCC_OscConfig+0x2f8>
 8002484:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002488:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002490:	fa93 f3a3 	rbit	r3, r3
 8002494:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002498:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800249c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80024a0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80024a4:	fa93 f3a3 	rbit	r3, r3
 80024a8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80024ac:	4b0e      	ldr	r3, [pc, #56]	@ (80024e8 <HAL_RCC_OscConfig+0x330>)
 80024ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80024b4:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80024b8:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80024bc:	fa92 f2a2 	rbit	r2, r2
 80024c0:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80024c4:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80024c8:	fab2 f282 	clz	r2, r2
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	f042 0220 	orr.w	r2, r2, #32
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	f002 021f 	and.w	r2, r2, #31
 80024d8:	2101      	movs	r1, #1
 80024da:	fa01 f202 	lsl.w	r2, r1, r2
 80024de:	4013      	ands	r3, r2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1ab      	bne.n	800243c <HAL_RCC_OscConfig+0x284>
 80024e4:	e003      	b.n	80024ee <HAL_RCC_OscConfig+0x336>
 80024e6:	bf00      	nop
 80024e8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 817d 	beq.w	80027fe <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002504:	4ba6      	ldr	r3, [pc, #664]	@ (80027a0 <HAL_RCC_OscConfig+0x5e8>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 030c 	and.w	r3, r3, #12
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00b      	beq.n	8002528 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002510:	4ba3      	ldr	r3, [pc, #652]	@ (80027a0 <HAL_RCC_OscConfig+0x5e8>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 030c 	and.w	r3, r3, #12
 8002518:	2b08      	cmp	r3, #8
 800251a:	d172      	bne.n	8002602 <HAL_RCC_OscConfig+0x44a>
 800251c:	4ba0      	ldr	r3, [pc, #640]	@ (80027a0 <HAL_RCC_OscConfig+0x5e8>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d16c      	bne.n	8002602 <HAL_RCC_OscConfig+0x44a>
 8002528:	2302      	movs	r3, #2
 800252a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002532:	fa93 f3a3 	rbit	r3, r3
 8002536:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800253a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800253e:	fab3 f383 	clz	r3, r3
 8002542:	b2db      	uxtb	r3, r3
 8002544:	095b      	lsrs	r3, r3, #5
 8002546:	b2db      	uxtb	r3, r3
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b01      	cmp	r3, #1
 8002550:	d102      	bne.n	8002558 <HAL_RCC_OscConfig+0x3a0>
 8002552:	4b93      	ldr	r3, [pc, #588]	@ (80027a0 <HAL_RCC_OscConfig+0x5e8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	e013      	b.n	8002580 <HAL_RCC_OscConfig+0x3c8>
 8002558:	2302      	movs	r3, #2
 800255a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002562:	fa93 f3a3 	rbit	r3, r3
 8002566:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800256a:	2302      	movs	r3, #2
 800256c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002570:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002574:	fa93 f3a3 	rbit	r3, r3
 8002578:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800257c:	4b88      	ldr	r3, [pc, #544]	@ (80027a0 <HAL_RCC_OscConfig+0x5e8>)
 800257e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002580:	2202      	movs	r2, #2
 8002582:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002586:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800258a:	fa92 f2a2 	rbit	r2, r2
 800258e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002592:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002596:	fab2 f282 	clz	r2, r2
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	f042 0220 	orr.w	r2, r2, #32
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	f002 021f 	and.w	r2, r2, #31
 80025a6:	2101      	movs	r1, #1
 80025a8:	fa01 f202 	lsl.w	r2, r1, r2
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00a      	beq.n	80025c8 <HAL_RCC_OscConfig+0x410>
 80025b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d002      	beq.n	80025c8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	f000 be2e 	b.w	8003224 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c8:	4b75      	ldr	r3, [pc, #468]	@ (80027a0 <HAL_RCC_OscConfig+0x5e8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	21f8      	movs	r1, #248	@ 0xf8
 80025de:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e2:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80025e6:	fa91 f1a1 	rbit	r1, r1
 80025ea:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80025ee:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80025f2:	fab1 f181 	clz	r1, r1
 80025f6:	b2c9      	uxtb	r1, r1
 80025f8:	408b      	lsls	r3, r1
 80025fa:	4969      	ldr	r1, [pc, #420]	@ (80027a0 <HAL_RCC_OscConfig+0x5e8>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002600:	e0fd      	b.n	80027fe <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002602:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002606:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 8088 	beq.w	8002724 <HAL_RCC_OscConfig+0x56c>
 8002614:	2301      	movs	r3, #1
 8002616:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800261e:	fa93 f3a3 	rbit	r3, r3
 8002622:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002626:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800262a:	fab3 f383 	clz	r3, r3
 800262e:	b2db      	uxtb	r3, r3
 8002630:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002634:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	461a      	mov	r2, r3
 800263c:	2301      	movs	r3, #1
 800263e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002640:	f7ff fa60 	bl	8001b04 <HAL_GetTick>
 8002644:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002648:	e00a      	b.n	8002660 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800264a:	f7ff fa5b 	bl	8001b04 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d902      	bls.n	8002660 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	f000 bde2 	b.w	8003224 <HAL_RCC_OscConfig+0x106c>
 8002660:	2302      	movs	r3, #2
 8002662:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002666:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800266a:	fa93 f3a3 	rbit	r3, r3
 800266e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002672:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002676:	fab3 f383 	clz	r3, r3
 800267a:	b2db      	uxtb	r3, r3
 800267c:	095b      	lsrs	r3, r3, #5
 800267e:	b2db      	uxtb	r3, r3
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b01      	cmp	r3, #1
 8002688:	d102      	bne.n	8002690 <HAL_RCC_OscConfig+0x4d8>
 800268a:	4b45      	ldr	r3, [pc, #276]	@ (80027a0 <HAL_RCC_OscConfig+0x5e8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	e013      	b.n	80026b8 <HAL_RCC_OscConfig+0x500>
 8002690:	2302      	movs	r3, #2
 8002692:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002696:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800269a:	fa93 f3a3 	rbit	r3, r3
 800269e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80026a2:	2302      	movs	r3, #2
 80026a4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80026a8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80026ac:	fa93 f3a3 	rbit	r3, r3
 80026b0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80026b4:	4b3a      	ldr	r3, [pc, #232]	@ (80027a0 <HAL_RCC_OscConfig+0x5e8>)
 80026b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b8:	2202      	movs	r2, #2
 80026ba:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80026be:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80026c2:	fa92 f2a2 	rbit	r2, r2
 80026c6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80026ca:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80026ce:	fab2 f282 	clz	r2, r2
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	f042 0220 	orr.w	r2, r2, #32
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	f002 021f 	and.w	r2, r2, #31
 80026de:	2101      	movs	r1, #1
 80026e0:	fa01 f202 	lsl.w	r2, r1, r2
 80026e4:	4013      	ands	r3, r2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0af      	beq.n	800264a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ea:	4b2d      	ldr	r3, [pc, #180]	@ (80027a0 <HAL_RCC_OscConfig+0x5e8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	21f8      	movs	r1, #248	@ 0xf8
 8002700:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002704:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002708:	fa91 f1a1 	rbit	r1, r1
 800270c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002710:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002714:	fab1 f181 	clz	r1, r1
 8002718:	b2c9      	uxtb	r1, r1
 800271a:	408b      	lsls	r3, r1
 800271c:	4920      	ldr	r1, [pc, #128]	@ (80027a0 <HAL_RCC_OscConfig+0x5e8>)
 800271e:	4313      	orrs	r3, r2
 8002720:	600b      	str	r3, [r1, #0]
 8002722:	e06c      	b.n	80027fe <HAL_RCC_OscConfig+0x646>
 8002724:	2301      	movs	r3, #1
 8002726:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800272e:	fa93 f3a3 	rbit	r3, r3
 8002732:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002736:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800273a:	fab3 f383 	clz	r3, r3
 800273e:	b2db      	uxtb	r3, r3
 8002740:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002744:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	461a      	mov	r2, r3
 800274c:	2300      	movs	r3, #0
 800274e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002750:	f7ff f9d8 	bl	8001b04 <HAL_GetTick>
 8002754:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002758:	e00a      	b.n	8002770 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800275a:	f7ff f9d3 	bl	8001b04 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d902      	bls.n	8002770 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	f000 bd5a 	b.w	8003224 <HAL_RCC_OscConfig+0x106c>
 8002770:	2302      	movs	r3, #2
 8002772:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002776:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800277a:	fa93 f3a3 	rbit	r3, r3
 800277e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002782:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002786:	fab3 f383 	clz	r3, r3
 800278a:	b2db      	uxtb	r3, r3
 800278c:	095b      	lsrs	r3, r3, #5
 800278e:	b2db      	uxtb	r3, r3
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b01      	cmp	r3, #1
 8002798:	d104      	bne.n	80027a4 <HAL_RCC_OscConfig+0x5ec>
 800279a:	4b01      	ldr	r3, [pc, #4]	@ (80027a0 <HAL_RCC_OscConfig+0x5e8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	e015      	b.n	80027cc <HAL_RCC_OscConfig+0x614>
 80027a0:	40021000 	.word	0x40021000
 80027a4:	2302      	movs	r3, #2
 80027a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80027ae:	fa93 f3a3 	rbit	r3, r3
 80027b2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80027b6:	2302      	movs	r3, #2
 80027b8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80027bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80027c0:	fa93 f3a3 	rbit	r3, r3
 80027c4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80027c8:	4bc8      	ldr	r3, [pc, #800]	@ (8002aec <HAL_RCC_OscConfig+0x934>)
 80027ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027cc:	2202      	movs	r2, #2
 80027ce:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80027d2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80027d6:	fa92 f2a2 	rbit	r2, r2
 80027da:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80027de:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80027e2:	fab2 f282 	clz	r2, r2
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	f042 0220 	orr.w	r2, r2, #32
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	f002 021f 	and.w	r2, r2, #31
 80027f2:	2101      	movs	r1, #1
 80027f4:	fa01 f202 	lsl.w	r2, r1, r2
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1ad      	bne.n	800275a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002802:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 8110 	beq.w	8002a34 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002814:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002818:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d079      	beq.n	8002918 <HAL_RCC_OscConfig+0x760>
 8002824:	2301      	movs	r3, #1
 8002826:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800282e:	fa93 f3a3 	rbit	r3, r3
 8002832:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002836:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800283a:	fab3 f383 	clz	r3, r3
 800283e:	b2db      	uxtb	r3, r3
 8002840:	461a      	mov	r2, r3
 8002842:	4bab      	ldr	r3, [pc, #684]	@ (8002af0 <HAL_RCC_OscConfig+0x938>)
 8002844:	4413      	add	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	461a      	mov	r2, r3
 800284a:	2301      	movs	r3, #1
 800284c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800284e:	f7ff f959 	bl	8001b04 <HAL_GetTick>
 8002852:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002856:	e00a      	b.n	800286e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002858:	f7ff f954 	bl	8001b04 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d902      	bls.n	800286e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	f000 bcdb 	b.w	8003224 <HAL_RCC_OscConfig+0x106c>
 800286e:	2302      	movs	r3, #2
 8002870:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002874:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002878:	fa93 f3a3 	rbit	r3, r3
 800287c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002880:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002884:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002888:	2202      	movs	r2, #2
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002890:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	fa93 f2a3 	rbit	r2, r3
 800289a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800289e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80028ac:	2202      	movs	r2, #2
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	fa93 f2a3 	rbit	r2, r3
 80028be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80028c6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c8:	4b88      	ldr	r3, [pc, #544]	@ (8002aec <HAL_RCC_OscConfig+0x934>)
 80028ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80028d4:	2102      	movs	r1, #2
 80028d6:	6019      	str	r1, [r3, #0]
 80028d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028dc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	fa93 f1a3 	rbit	r1, r3
 80028e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ea:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80028ee:	6019      	str	r1, [r3, #0]
  return result;
 80028f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	fab3 f383 	clz	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002904:	b2db      	uxtb	r3, r3
 8002906:	f003 031f 	and.w	r3, r3, #31
 800290a:	2101      	movs	r1, #1
 800290c:	fa01 f303 	lsl.w	r3, r1, r3
 8002910:	4013      	ands	r3, r2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0a0      	beq.n	8002858 <HAL_RCC_OscConfig+0x6a0>
 8002916:	e08d      	b.n	8002a34 <HAL_RCC_OscConfig+0x87c>
 8002918:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002920:	2201      	movs	r2, #1
 8002922:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002924:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002928:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	fa93 f2a3 	rbit	r2, r3
 8002932:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002936:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800293a:	601a      	str	r2, [r3, #0]
  return result;
 800293c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002940:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002944:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002946:	fab3 f383 	clz	r3, r3
 800294a:	b2db      	uxtb	r3, r3
 800294c:	461a      	mov	r2, r3
 800294e:	4b68      	ldr	r3, [pc, #416]	@ (8002af0 <HAL_RCC_OscConfig+0x938>)
 8002950:	4413      	add	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	461a      	mov	r2, r3
 8002956:	2300      	movs	r3, #0
 8002958:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800295a:	f7ff f8d3 	bl	8001b04 <HAL_GetTick>
 800295e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002962:	e00a      	b.n	800297a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002964:	f7ff f8ce 	bl	8001b04 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d902      	bls.n	800297a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	f000 bc55 	b.w	8003224 <HAL_RCC_OscConfig+0x106c>
 800297a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800297e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002982:	2202      	movs	r2, #2
 8002984:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	fa93 f2a3 	rbit	r2, r3
 8002994:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002998:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80029a6:	2202      	movs	r2, #2
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ae:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	fa93 f2a3 	rbit	r2, r3
 80029b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80029ca:	2202      	movs	r2, #2
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	fa93 f2a3 	rbit	r2, r3
 80029dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80029e4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e6:	4b41      	ldr	r3, [pc, #260]	@ (8002aec <HAL_RCC_OscConfig+0x934>)
 80029e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ee:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80029f2:	2102      	movs	r1, #2
 80029f4:	6019      	str	r1, [r3, #0]
 80029f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	fa93 f1a3 	rbit	r1, r3
 8002a04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a08:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a0c:	6019      	str	r1, [r3, #0]
  return result;
 8002a0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a12:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	fab3 f383 	clz	r3, r3
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	f003 031f 	and.w	r3, r3, #31
 8002a28:	2101      	movs	r1, #1
 8002a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d197      	bne.n	8002964 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 81a1 	beq.w	8002d8c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a50:	4b26      	ldr	r3, [pc, #152]	@ (8002aec <HAL_RCC_OscConfig+0x934>)
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d116      	bne.n	8002a8a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a5c:	4b23      	ldr	r3, [pc, #140]	@ (8002aec <HAL_RCC_OscConfig+0x934>)
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	4a22      	ldr	r2, [pc, #136]	@ (8002aec <HAL_RCC_OscConfig+0x934>)
 8002a62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a66:	61d3      	str	r3, [r2, #28]
 8002a68:	4b20      	ldr	r3, [pc, #128]	@ (8002aec <HAL_RCC_OscConfig+0x934>)
 8002a6a:	69db      	ldr	r3, [r3, #28]
 8002a6c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002a70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a74:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a7e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002a82:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a84:	2301      	movs	r3, #1
 8002a86:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002af4 <HAL_RCC_OscConfig+0x93c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d11a      	bne.n	8002acc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a96:	4b17      	ldr	r3, [pc, #92]	@ (8002af4 <HAL_RCC_OscConfig+0x93c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a16      	ldr	r2, [pc, #88]	@ (8002af4 <HAL_RCC_OscConfig+0x93c>)
 8002a9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aa0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aa2:	f7ff f82f 	bl	8001b04 <HAL_GetTick>
 8002aa6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aaa:	e009      	b.n	8002ac0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aac:	f7ff f82a 	bl	8001b04 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b64      	cmp	r3, #100	@ 0x64
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e3b1      	b.n	8003224 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8002af4 <HAL_RCC_OscConfig+0x93c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0ef      	beq.n	8002aac <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002acc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d10d      	bne.n	8002af8 <HAL_RCC_OscConfig+0x940>
 8002adc:	4b03      	ldr	r3, [pc, #12]	@ (8002aec <HAL_RCC_OscConfig+0x934>)
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	4a02      	ldr	r2, [pc, #8]	@ (8002aec <HAL_RCC_OscConfig+0x934>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	6213      	str	r3, [r2, #32]
 8002ae8:	e03c      	b.n	8002b64 <HAL_RCC_OscConfig+0x9ac>
 8002aea:	bf00      	nop
 8002aec:	40021000 	.word	0x40021000
 8002af0:	10908120 	.word	0x10908120
 8002af4:	40007000 	.word	0x40007000
 8002af8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002afc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10c      	bne.n	8002b22 <HAL_RCC_OscConfig+0x96a>
 8002b08:	4bc1      	ldr	r3, [pc, #772]	@ (8002e10 <HAL_RCC_OscConfig+0xc58>)
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	4ac0      	ldr	r2, [pc, #768]	@ (8002e10 <HAL_RCC_OscConfig+0xc58>)
 8002b0e:	f023 0301 	bic.w	r3, r3, #1
 8002b12:	6213      	str	r3, [r2, #32]
 8002b14:	4bbe      	ldr	r3, [pc, #760]	@ (8002e10 <HAL_RCC_OscConfig+0xc58>)
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	4abd      	ldr	r2, [pc, #756]	@ (8002e10 <HAL_RCC_OscConfig+0xc58>)
 8002b1a:	f023 0304 	bic.w	r3, r3, #4
 8002b1e:	6213      	str	r3, [r2, #32]
 8002b20:	e020      	b.n	8002b64 <HAL_RCC_OscConfig+0x9ac>
 8002b22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	2b05      	cmp	r3, #5
 8002b30:	d10c      	bne.n	8002b4c <HAL_RCC_OscConfig+0x994>
 8002b32:	4bb7      	ldr	r3, [pc, #732]	@ (8002e10 <HAL_RCC_OscConfig+0xc58>)
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	4ab6      	ldr	r2, [pc, #728]	@ (8002e10 <HAL_RCC_OscConfig+0xc58>)
 8002b38:	f043 0304 	orr.w	r3, r3, #4
 8002b3c:	6213      	str	r3, [r2, #32]
 8002b3e:	4bb4      	ldr	r3, [pc, #720]	@ (8002e10 <HAL_RCC_OscConfig+0xc58>)
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	4ab3      	ldr	r2, [pc, #716]	@ (8002e10 <HAL_RCC_OscConfig+0xc58>)
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	6213      	str	r3, [r2, #32]
 8002b4a:	e00b      	b.n	8002b64 <HAL_RCC_OscConfig+0x9ac>
 8002b4c:	4bb0      	ldr	r3, [pc, #704]	@ (8002e10 <HAL_RCC_OscConfig+0xc58>)
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	4aaf      	ldr	r2, [pc, #700]	@ (8002e10 <HAL_RCC_OscConfig+0xc58>)
 8002b52:	f023 0301 	bic.w	r3, r3, #1
 8002b56:	6213      	str	r3, [r2, #32]
 8002b58:	4bad      	ldr	r3, [pc, #692]	@ (8002e10 <HAL_RCC_OscConfig+0xc58>)
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	4aac      	ldr	r2, [pc, #688]	@ (8002e10 <HAL_RCC_OscConfig+0xc58>)
 8002b5e:	f023 0304 	bic.w	r3, r3, #4
 8002b62:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b68:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 8081 	beq.w	8002c78 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b76:	f7fe ffc5 	bl	8001b04 <HAL_GetTick>
 8002b7a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7e:	e00b      	b.n	8002b98 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b80:	f7fe ffc0 	bl	8001b04 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e345      	b.n	8003224 <HAL_RCC_OscConfig+0x106c>
 8002b98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b9c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	fa93 f2a3 	rbit	r2, r3
 8002bb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bcc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	fa93 f2a3 	rbit	r2, r3
 8002bd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bda:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002bde:	601a      	str	r2, [r3, #0]
  return result;
 8002be0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002be8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bea:	fab3 f383 	clz	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	095b      	lsrs	r3, r3, #5
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	f043 0302 	orr.w	r3, r3, #2
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d102      	bne.n	8002c04 <HAL_RCC_OscConfig+0xa4c>
 8002bfe:	4b84      	ldr	r3, [pc, #528]	@ (8002e10 <HAL_RCC_OscConfig+0xc58>)
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	e013      	b.n	8002c2c <HAL_RCC_OscConfig+0xa74>
 8002c04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c08:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c14:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	fa93 f2a3 	rbit	r2, r3
 8002c1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c22:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	4b79      	ldr	r3, [pc, #484]	@ (8002e10 <HAL_RCC_OscConfig+0xc58>)
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c30:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002c34:	2102      	movs	r1, #2
 8002c36:	6011      	str	r1, [r2, #0]
 8002c38:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c3c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002c40:	6812      	ldr	r2, [r2, #0]
 8002c42:	fa92 f1a2 	rbit	r1, r2
 8002c46:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c4a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002c4e:	6011      	str	r1, [r2, #0]
  return result;
 8002c50:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c54:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	fab2 f282 	clz	r2, r2
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	f002 021f 	and.w	r2, r2, #31
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c70:	4013      	ands	r3, r2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d084      	beq.n	8002b80 <HAL_RCC_OscConfig+0x9c8>
 8002c76:	e07f      	b.n	8002d78 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c78:	f7fe ff44 	bl	8001b04 <HAL_GetTick>
 8002c7c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c80:	e00b      	b.n	8002c9a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c82:	f7fe ff3f 	bl	8001b04 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e2c4      	b.n	8003224 <HAL_RCC_OscConfig+0x106c>
 8002c9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c9e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002caa:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	fa93 f2a3 	rbit	r2, r3
 8002cb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cce:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	fa93 f2a3 	rbit	r2, r3
 8002cd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cdc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002ce0:	601a      	str	r2, [r3, #0]
  return result;
 8002ce2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002cea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cec:	fab3 f383 	clz	r3, r3
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	f043 0302 	orr.w	r3, r3, #2
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d102      	bne.n	8002d06 <HAL_RCC_OscConfig+0xb4e>
 8002d00:	4b43      	ldr	r3, [pc, #268]	@ (8002e10 <HAL_RCC_OscConfig+0xc58>)
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	e013      	b.n	8002d2e <HAL_RCC_OscConfig+0xb76>
 8002d06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d0a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002d0e:	2202      	movs	r2, #2
 8002d10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d16:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	fa93 f2a3 	rbit	r2, r3
 8002d20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d24:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	4b39      	ldr	r3, [pc, #228]	@ (8002e10 <HAL_RCC_OscConfig+0xc58>)
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d32:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002d36:	2102      	movs	r1, #2
 8002d38:	6011      	str	r1, [r2, #0]
 8002d3a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d3e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002d42:	6812      	ldr	r2, [r2, #0]
 8002d44:	fa92 f1a2 	rbit	r1, r2
 8002d48:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d4c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002d50:	6011      	str	r1, [r2, #0]
  return result;
 8002d52:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d56:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002d5a:	6812      	ldr	r2, [r2, #0]
 8002d5c:	fab2 f282 	clz	r2, r2
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	f002 021f 	and.w	r2, r2, #31
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d72:	4013      	ands	r3, r2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d184      	bne.n	8002c82 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d78:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d105      	bne.n	8002d8c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d80:	4b23      	ldr	r3, [pc, #140]	@ (8002e10 <HAL_RCC_OscConfig+0xc58>)
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	4a22      	ldr	r2, [pc, #136]	@ (8002e10 <HAL_RCC_OscConfig+0xc58>)
 8002d86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d8a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d90:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 8242 	beq.w	8003222 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8002e10 <HAL_RCC_OscConfig+0xc58>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	2b08      	cmp	r3, #8
 8002da8:	f000 8213 	beq.w	80031d2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	f040 8162 	bne.w	8003082 <HAL_RCC_OscConfig+0xeca>
 8002dbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc2:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002dc6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002dca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	fa93 f2a3 	rbit	r2, r3
 8002dda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dde:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002de2:	601a      	str	r2, [r3, #0]
  return result;
 8002de4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002dec:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dee:	fab3 f383 	clz	r3, r3
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002df8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	461a      	mov	r2, r3
 8002e00:	2300      	movs	r3, #0
 8002e02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e04:	f7fe fe7e 	bl	8001b04 <HAL_GetTick>
 8002e08:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e0c:	e00c      	b.n	8002e28 <HAL_RCC_OscConfig+0xc70>
 8002e0e:	bf00      	nop
 8002e10:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e14:	f7fe fe76 	bl	8001b04 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e1fd      	b.n	8003224 <HAL_RCC_OscConfig+0x106c>
 8002e28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e2c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002e30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e3a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	fa93 f2a3 	rbit	r2, r3
 8002e44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e48:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002e4c:	601a      	str	r2, [r3, #0]
  return result;
 8002e4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e52:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002e56:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e58:	fab3 f383 	clz	r3, r3
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	095b      	lsrs	r3, r3, #5
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d102      	bne.n	8002e72 <HAL_RCC_OscConfig+0xcba>
 8002e6c:	4bb0      	ldr	r3, [pc, #704]	@ (8003130 <HAL_RCC_OscConfig+0xf78>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	e027      	b.n	8002ec2 <HAL_RCC_OscConfig+0xd0a>
 8002e72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e76:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002e7a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e84:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	fa93 f2a3 	rbit	r2, r3
 8002e8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e92:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e9c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002ea0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eaa:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	fa93 f2a3 	rbit	r2, r3
 8002eb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	4b9c      	ldr	r3, [pc, #624]	@ (8003130 <HAL_RCC_OscConfig+0xf78>)
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ec6:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002eca:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002ece:	6011      	str	r1, [r2, #0]
 8002ed0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ed4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002ed8:	6812      	ldr	r2, [r2, #0]
 8002eda:	fa92 f1a2 	rbit	r1, r2
 8002ede:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ee2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002ee6:	6011      	str	r1, [r2, #0]
  return result;
 8002ee8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002eec:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002ef0:	6812      	ldr	r2, [r2, #0]
 8002ef2:	fab2 f282 	clz	r2, r2
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	f042 0220 	orr.w	r2, r2, #32
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	f002 021f 	and.w	r2, r2, #31
 8002f02:	2101      	movs	r1, #1
 8002f04:	fa01 f202 	lsl.w	r2, r1, r2
 8002f08:	4013      	ands	r3, r2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d182      	bne.n	8002e14 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f0e:	4b88      	ldr	r3, [pc, #544]	@ (8003130 <HAL_RCC_OscConfig+0xf78>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002f16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002f22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	430b      	orrs	r3, r1
 8002f30:	497f      	ldr	r1, [pc, #508]	@ (8003130 <HAL_RCC_OscConfig+0xf78>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	604b      	str	r3, [r1, #4]
 8002f36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f3a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002f3e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f48:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	fa93 f2a3 	rbit	r2, r3
 8002f52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f56:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002f5a:	601a      	str	r2, [r3, #0]
  return result;
 8002f5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f60:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002f64:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f66:	fab3 f383 	clz	r3, r3
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002f70:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	461a      	mov	r2, r3
 8002f78:	2301      	movs	r3, #1
 8002f7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7c:	f7fe fdc2 	bl	8001b04 <HAL_GetTick>
 8002f80:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f84:	e009      	b.n	8002f9a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f86:	f7fe fdbd 	bl	8001b04 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e144      	b.n	8003224 <HAL_RCC_OscConfig+0x106c>
 8002f9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f9e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002fa2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fac:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	fa93 f2a3 	rbit	r2, r3
 8002fb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fba:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002fbe:	601a      	str	r2, [r3, #0]
  return result;
 8002fc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002fc8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fca:	fab3 f383 	clz	r3, r3
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	095b      	lsrs	r3, r3, #5
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d102      	bne.n	8002fe4 <HAL_RCC_OscConfig+0xe2c>
 8002fde:	4b54      	ldr	r3, [pc, #336]	@ (8003130 <HAL_RCC_OscConfig+0xf78>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	e027      	b.n	8003034 <HAL_RCC_OscConfig+0xe7c>
 8002fe4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002fec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ff0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	fa93 f2a3 	rbit	r2, r3
 8003000:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003004:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800300e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003012:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800301c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	fa93 f2a3 	rbit	r2, r3
 8003026:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800302a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	4b3f      	ldr	r3, [pc, #252]	@ (8003130 <HAL_RCC_OscConfig+0xf78>)
 8003032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003034:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003038:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800303c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003040:	6011      	str	r1, [r2, #0]
 8003042:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003046:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	fa92 f1a2 	rbit	r1, r2
 8003050:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003054:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003058:	6011      	str	r1, [r2, #0]
  return result;
 800305a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800305e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	fab2 f282 	clz	r2, r2
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	f042 0220 	orr.w	r2, r2, #32
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	f002 021f 	and.w	r2, r2, #31
 8003074:	2101      	movs	r1, #1
 8003076:	fa01 f202 	lsl.w	r2, r1, r2
 800307a:	4013      	ands	r3, r2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d082      	beq.n	8002f86 <HAL_RCC_OscConfig+0xdce>
 8003080:	e0cf      	b.n	8003222 <HAL_RCC_OscConfig+0x106a>
 8003082:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003086:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800308a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800308e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003094:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	fa93 f2a3 	rbit	r2, r3
 800309e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80030a6:	601a      	str	r2, [r3, #0]
  return result;
 80030a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ac:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80030b0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b2:	fab3 f383 	clz	r3, r3
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80030bc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	461a      	mov	r2, r3
 80030c4:	2300      	movs	r3, #0
 80030c6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c8:	f7fe fd1c 	bl	8001b04 <HAL_GetTick>
 80030cc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030d0:	e009      	b.n	80030e6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d2:	f7fe fd17 	bl	8001b04 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e09e      	b.n	8003224 <HAL_RCC_OscConfig+0x106c>
 80030e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ea:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80030ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	fa93 f2a3 	rbit	r2, r3
 8003102:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003106:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800310a:	601a      	str	r2, [r3, #0]
  return result;
 800310c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003110:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003114:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003116:	fab3 f383 	clz	r3, r3
 800311a:	b2db      	uxtb	r3, r3
 800311c:	095b      	lsrs	r3, r3, #5
 800311e:	b2db      	uxtb	r3, r3
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b01      	cmp	r3, #1
 8003128:	d104      	bne.n	8003134 <HAL_RCC_OscConfig+0xf7c>
 800312a:	4b01      	ldr	r3, [pc, #4]	@ (8003130 <HAL_RCC_OscConfig+0xf78>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	e029      	b.n	8003184 <HAL_RCC_OscConfig+0xfcc>
 8003130:	40021000 	.word	0x40021000
 8003134:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003138:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800313c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003140:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003146:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	fa93 f2a3 	rbit	r2, r3
 8003150:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003154:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800315e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003162:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800316c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	fa93 f2a3 	rbit	r2, r3
 8003176:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800317a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	4b2b      	ldr	r3, [pc, #172]	@ (8003230 <HAL_RCC_OscConfig+0x1078>)
 8003182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003184:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003188:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800318c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003190:	6011      	str	r1, [r2, #0]
 8003192:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003196:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800319a:	6812      	ldr	r2, [r2, #0]
 800319c:	fa92 f1a2 	rbit	r1, r2
 80031a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031a4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80031a8:	6011      	str	r1, [r2, #0]
  return result;
 80031aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031ae:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	fab2 f282 	clz	r2, r2
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	f042 0220 	orr.w	r2, r2, #32
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	f002 021f 	and.w	r2, r2, #31
 80031c4:	2101      	movs	r1, #1
 80031c6:	fa01 f202 	lsl.w	r2, r1, r2
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d180      	bne.n	80030d2 <HAL_RCC_OscConfig+0xf1a>
 80031d0:	e027      	b.n	8003222 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e01e      	b.n	8003224 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031e6:	4b12      	ldr	r3, [pc, #72]	@ (8003230 <HAL_RCC_OscConfig+0x1078>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80031f2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80031f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	429a      	cmp	r2, r3
 8003204:	d10b      	bne.n	800321e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003206:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800320a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800320e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003212:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800321a:	429a      	cmp	r2, r3
 800321c:	d001      	beq.n	8003222 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e000      	b.n	8003224 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40021000 	.word	0x40021000

08003234 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b09e      	sub	sp, #120	@ 0x78
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e162      	b.n	8003512 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800324c:	4b90      	ldr	r3, [pc, #576]	@ (8003490 <HAL_RCC_ClockConfig+0x25c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d910      	bls.n	800327c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325a:	4b8d      	ldr	r3, [pc, #564]	@ (8003490 <HAL_RCC_ClockConfig+0x25c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f023 0207 	bic.w	r2, r3, #7
 8003262:	498b      	ldr	r1, [pc, #556]	@ (8003490 <HAL_RCC_ClockConfig+0x25c>)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	4313      	orrs	r3, r2
 8003268:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800326a:	4b89      	ldr	r3, [pc, #548]	@ (8003490 <HAL_RCC_ClockConfig+0x25c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d001      	beq.n	800327c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e14a      	b.n	8003512 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d008      	beq.n	800329a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003288:	4b82      	ldr	r3, [pc, #520]	@ (8003494 <HAL_RCC_ClockConfig+0x260>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	497f      	ldr	r1, [pc, #508]	@ (8003494 <HAL_RCC_ClockConfig+0x260>)
 8003296:	4313      	orrs	r3, r2
 8003298:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 80dc 	beq.w	8003460 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d13c      	bne.n	800332a <HAL_RCC_ClockConfig+0xf6>
 80032b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032b4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032b8:	fa93 f3a3 	rbit	r3, r3
 80032bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80032be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c0:	fab3 f383 	clz	r3, r3
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	f043 0301 	orr.w	r3, r3, #1
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d102      	bne.n	80032da <HAL_RCC_ClockConfig+0xa6>
 80032d4:	4b6f      	ldr	r3, [pc, #444]	@ (8003494 <HAL_RCC_ClockConfig+0x260>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	e00f      	b.n	80032fa <HAL_RCC_ClockConfig+0xc6>
 80032da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032de:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032e2:	fa93 f3a3 	rbit	r3, r3
 80032e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80032e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80032ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032f0:	fa93 f3a3 	rbit	r3, r3
 80032f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032f6:	4b67      	ldr	r3, [pc, #412]	@ (8003494 <HAL_RCC_ClockConfig+0x260>)
 80032f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80032fe:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003300:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003302:	fa92 f2a2 	rbit	r2, r2
 8003306:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003308:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800330a:	fab2 f282 	clz	r2, r2
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	f042 0220 	orr.w	r2, r2, #32
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	f002 021f 	and.w	r2, r2, #31
 800331a:	2101      	movs	r1, #1
 800331c:	fa01 f202 	lsl.w	r2, r1, r2
 8003320:	4013      	ands	r3, r2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d17b      	bne.n	800341e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e0f3      	b.n	8003512 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b02      	cmp	r3, #2
 8003330:	d13c      	bne.n	80033ac <HAL_RCC_ClockConfig+0x178>
 8003332:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003336:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003338:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800333a:	fa93 f3a3 	rbit	r3, r3
 800333e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003340:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003342:	fab3 f383 	clz	r3, r3
 8003346:	b2db      	uxtb	r3, r3
 8003348:	095b      	lsrs	r3, r3, #5
 800334a:	b2db      	uxtb	r3, r3
 800334c:	f043 0301 	orr.w	r3, r3, #1
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b01      	cmp	r3, #1
 8003354:	d102      	bne.n	800335c <HAL_RCC_ClockConfig+0x128>
 8003356:	4b4f      	ldr	r3, [pc, #316]	@ (8003494 <HAL_RCC_ClockConfig+0x260>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	e00f      	b.n	800337c <HAL_RCC_ClockConfig+0x148>
 800335c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003360:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003362:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003364:	fa93 f3a3 	rbit	r3, r3
 8003368:	647b      	str	r3, [r7, #68]	@ 0x44
 800336a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800336e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003370:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003372:	fa93 f3a3 	rbit	r3, r3
 8003376:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003378:	4b46      	ldr	r3, [pc, #280]	@ (8003494 <HAL_RCC_ClockConfig+0x260>)
 800337a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003380:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003382:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003384:	fa92 f2a2 	rbit	r2, r2
 8003388:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800338a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800338c:	fab2 f282 	clz	r2, r2
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	f042 0220 	orr.w	r2, r2, #32
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	f002 021f 	and.w	r2, r2, #31
 800339c:	2101      	movs	r1, #1
 800339e:	fa01 f202 	lsl.w	r2, r1, r2
 80033a2:	4013      	ands	r3, r2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d13a      	bne.n	800341e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e0b2      	b.n	8003512 <HAL_RCC_ClockConfig+0x2de>
 80033ac:	2302      	movs	r3, #2
 80033ae:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b2:	fa93 f3a3 	rbit	r3, r3
 80033b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80033b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ba:	fab3 f383 	clz	r3, r3
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	095b      	lsrs	r3, r3, #5
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	f043 0301 	orr.w	r3, r3, #1
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d102      	bne.n	80033d4 <HAL_RCC_ClockConfig+0x1a0>
 80033ce:	4b31      	ldr	r3, [pc, #196]	@ (8003494 <HAL_RCC_ClockConfig+0x260>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	e00d      	b.n	80033f0 <HAL_RCC_ClockConfig+0x1bc>
 80033d4:	2302      	movs	r3, #2
 80033d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033da:	fa93 f3a3 	rbit	r3, r3
 80033de:	627b      	str	r3, [r7, #36]	@ 0x24
 80033e0:	2302      	movs	r3, #2
 80033e2:	623b      	str	r3, [r7, #32]
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	fa93 f3a3 	rbit	r3, r3
 80033ea:	61fb      	str	r3, [r7, #28]
 80033ec:	4b29      	ldr	r3, [pc, #164]	@ (8003494 <HAL_RCC_ClockConfig+0x260>)
 80033ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f0:	2202      	movs	r2, #2
 80033f2:	61ba      	str	r2, [r7, #24]
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	fa92 f2a2 	rbit	r2, r2
 80033fa:	617a      	str	r2, [r7, #20]
  return result;
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	fab2 f282 	clz	r2, r2
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	f042 0220 	orr.w	r2, r2, #32
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	f002 021f 	and.w	r2, r2, #31
 800340e:	2101      	movs	r1, #1
 8003410:	fa01 f202 	lsl.w	r2, r1, r2
 8003414:	4013      	ands	r3, r2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e079      	b.n	8003512 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800341e:	4b1d      	ldr	r3, [pc, #116]	@ (8003494 <HAL_RCC_ClockConfig+0x260>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f023 0203 	bic.w	r2, r3, #3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	491a      	ldr	r1, [pc, #104]	@ (8003494 <HAL_RCC_ClockConfig+0x260>)
 800342c:	4313      	orrs	r3, r2
 800342e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003430:	f7fe fb68 	bl	8001b04 <HAL_GetTick>
 8003434:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003436:	e00a      	b.n	800344e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003438:	f7fe fb64 	bl	8001b04 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003446:	4293      	cmp	r3, r2
 8003448:	d901      	bls.n	800344e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e061      	b.n	8003512 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344e:	4b11      	ldr	r3, [pc, #68]	@ (8003494 <HAL_RCC_ClockConfig+0x260>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f003 020c 	and.w	r2, r3, #12
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	429a      	cmp	r2, r3
 800345e:	d1eb      	bne.n	8003438 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003460:	4b0b      	ldr	r3, [pc, #44]	@ (8003490 <HAL_RCC_ClockConfig+0x25c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	429a      	cmp	r2, r3
 800346c:	d214      	bcs.n	8003498 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346e:	4b08      	ldr	r3, [pc, #32]	@ (8003490 <HAL_RCC_ClockConfig+0x25c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f023 0207 	bic.w	r2, r3, #7
 8003476:	4906      	ldr	r1, [pc, #24]	@ (8003490 <HAL_RCC_ClockConfig+0x25c>)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	4313      	orrs	r3, r2
 800347c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800347e:	4b04      	ldr	r3, [pc, #16]	@ (8003490 <HAL_RCC_ClockConfig+0x25c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d005      	beq.n	8003498 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e040      	b.n	8003512 <HAL_RCC_ClockConfig+0x2de>
 8003490:	40022000 	.word	0x40022000
 8003494:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d008      	beq.n	80034b6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034a4:	4b1d      	ldr	r3, [pc, #116]	@ (800351c <HAL_RCC_ClockConfig+0x2e8>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	491a      	ldr	r1, [pc, #104]	@ (800351c <HAL_RCC_ClockConfig+0x2e8>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d009      	beq.n	80034d6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034c2:	4b16      	ldr	r3, [pc, #88]	@ (800351c <HAL_RCC_ClockConfig+0x2e8>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	4912      	ldr	r1, [pc, #72]	@ (800351c <HAL_RCC_ClockConfig+0x2e8>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80034d6:	f000 f829 	bl	800352c <HAL_RCC_GetSysClockFreq>
 80034da:	4601      	mov	r1, r0
 80034dc:	4b0f      	ldr	r3, [pc, #60]	@ (800351c <HAL_RCC_ClockConfig+0x2e8>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034e4:	22f0      	movs	r2, #240	@ 0xf0
 80034e6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	fa92 f2a2 	rbit	r2, r2
 80034ee:	60fa      	str	r2, [r7, #12]
  return result;
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	fab2 f282 	clz	r2, r2
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	40d3      	lsrs	r3, r2
 80034fa:	4a09      	ldr	r2, [pc, #36]	@ (8003520 <HAL_RCC_ClockConfig+0x2ec>)
 80034fc:	5cd3      	ldrb	r3, [r2, r3]
 80034fe:	fa21 f303 	lsr.w	r3, r1, r3
 8003502:	4a08      	ldr	r2, [pc, #32]	@ (8003524 <HAL_RCC_ClockConfig+0x2f0>)
 8003504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003506:	4b08      	ldr	r3, [pc, #32]	@ (8003528 <HAL_RCC_ClockConfig+0x2f4>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f7fe fab6 	bl	8001a7c <HAL_InitTick>
  
  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3778      	adds	r7, #120	@ 0x78
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40021000 	.word	0x40021000
 8003520:	08006d10 	.word	0x08006d10
 8003524:	20000004 	.word	0x20000004
 8003528:	20000008 	.word	0x20000008

0800352c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800352c:	b480      	push	{r7}
 800352e:	b08b      	sub	sp, #44	@ 0x2c
 8003530:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003532:	2300      	movs	r3, #0
 8003534:	61fb      	str	r3, [r7, #28]
 8003536:	2300      	movs	r3, #0
 8003538:	61bb      	str	r3, [r7, #24]
 800353a:	2300      	movs	r3, #0
 800353c:	627b      	str	r3, [r7, #36]	@ 0x24
 800353e:	2300      	movs	r3, #0
 8003540:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003546:	4b29      	ldr	r3, [pc, #164]	@ (80035ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f003 030c 	and.w	r3, r3, #12
 8003552:	2b04      	cmp	r3, #4
 8003554:	d002      	beq.n	800355c <HAL_RCC_GetSysClockFreq+0x30>
 8003556:	2b08      	cmp	r3, #8
 8003558:	d003      	beq.n	8003562 <HAL_RCC_GetSysClockFreq+0x36>
 800355a:	e03c      	b.n	80035d6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800355c:	4b24      	ldr	r3, [pc, #144]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800355e:	623b      	str	r3, [r7, #32]
      break;
 8003560:	e03c      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003568:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 800356c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	fa92 f2a2 	rbit	r2, r2
 8003574:	607a      	str	r2, [r7, #4]
  return result;
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	fab2 f282 	clz	r2, r2
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	40d3      	lsrs	r3, r2
 8003580:	4a1c      	ldr	r2, [pc, #112]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003582:	5cd3      	ldrb	r3, [r2, r3]
 8003584:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003586:	4b19      	ldr	r3, [pc, #100]	@ (80035ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	220f      	movs	r2, #15
 8003590:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	fa92 f2a2 	rbit	r2, r2
 8003598:	60fa      	str	r2, [r7, #12]
  return result;
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	fab2 f282 	clz	r2, r2
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	40d3      	lsrs	r3, r2
 80035a4:	4a14      	ldr	r2, [pc, #80]	@ (80035f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80035a6:	5cd3      	ldrb	r3, [r2, r3]
 80035a8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d008      	beq.n	80035c6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80035b4:	4a0e      	ldr	r2, [pc, #56]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	fb02 f303 	mul.w	r3, r2, r3
 80035c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80035c4:	e004      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	4a0c      	ldr	r2, [pc, #48]	@ (80035fc <HAL_RCC_GetSysClockFreq+0xd0>)
 80035ca:	fb02 f303 	mul.w	r3, r2, r3
 80035ce:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80035d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d2:	623b      	str	r3, [r7, #32]
      break;
 80035d4:	e002      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035d6:	4b06      	ldr	r3, [pc, #24]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035d8:	623b      	str	r3, [r7, #32]
      break;
 80035da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035dc:	6a3b      	ldr	r3, [r7, #32]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	372c      	adds	r7, #44	@ 0x2c
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	40021000 	.word	0x40021000
 80035f0:	007a1200 	.word	0x007a1200
 80035f4:	08006d28 	.word	0x08006d28
 80035f8:	08006d38 	.word	0x08006d38
 80035fc:	003d0900 	.word	0x003d0900

08003600 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003604:	4b03      	ldr	r3, [pc, #12]	@ (8003614 <HAL_RCC_GetHCLKFreq+0x14>)
 8003606:	681b      	ldr	r3, [r3, #0]
}
 8003608:	4618      	mov	r0, r3
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	20000004 	.word	0x20000004

08003618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800361e:	f7ff ffef 	bl	8003600 <HAL_RCC_GetHCLKFreq>
 8003622:	4601      	mov	r1, r0
 8003624:	4b0b      	ldr	r3, [pc, #44]	@ (8003654 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800362c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003630:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	fa92 f2a2 	rbit	r2, r2
 8003638:	603a      	str	r2, [r7, #0]
  return result;
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	fab2 f282 	clz	r2, r2
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	40d3      	lsrs	r3, r2
 8003644:	4a04      	ldr	r2, [pc, #16]	@ (8003658 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003646:	5cd3      	ldrb	r3, [r2, r3]
 8003648:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800364c:	4618      	mov	r0, r3
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40021000 	.word	0x40021000
 8003658:	08006d20 	.word	0x08006d20

0800365c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003662:	f7ff ffcd 	bl	8003600 <HAL_RCC_GetHCLKFreq>
 8003666:	4601      	mov	r1, r0
 8003668:	4b0b      	ldr	r3, [pc, #44]	@ (8003698 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003670:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003674:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	fa92 f2a2 	rbit	r2, r2
 800367c:	603a      	str	r2, [r7, #0]
  return result;
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	fab2 f282 	clz	r2, r2
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	40d3      	lsrs	r3, r2
 8003688:	4a04      	ldr	r2, [pc, #16]	@ (800369c <HAL_RCC_GetPCLK2Freq+0x40>)
 800368a:	5cd3      	ldrb	r3, [r2, r3]
 800368c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003690:	4618      	mov	r0, r3
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40021000 	.word	0x40021000
 800369c:	08006d20 	.word	0x08006d20

080036a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b092      	sub	sp, #72	@ 0x48
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80036b0:	2300      	movs	r3, #0
 80036b2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 80d4 	beq.w	800386c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036c4:	4b4e      	ldr	r3, [pc, #312]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10e      	bne.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036d0:	4b4b      	ldr	r3, [pc, #300]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	4a4a      	ldr	r2, [pc, #296]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036da:	61d3      	str	r3, [r2, #28]
 80036dc:	4b48      	ldr	r3, [pc, #288]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036e4:	60bb      	str	r3, [r7, #8]
 80036e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036e8:	2301      	movs	r3, #1
 80036ea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ee:	4b45      	ldr	r3, [pc, #276]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d118      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036fa:	4b42      	ldr	r3, [pc, #264]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a41      	ldr	r2, [pc, #260]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003700:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003704:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003706:	f7fe f9fd 	bl	8001b04 <HAL_GetTick>
 800370a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370c:	e008      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800370e:	f7fe f9f9 	bl	8001b04 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b64      	cmp	r3, #100	@ 0x64
 800371a:	d901      	bls.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e14b      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003720:	4b38      	ldr	r3, [pc, #224]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0f0      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800372c:	4b34      	ldr	r3, [pc, #208]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003734:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 8084 	beq.w	8003846 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003746:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003748:	429a      	cmp	r2, r3
 800374a:	d07c      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800374c:	4b2c      	ldr	r3, [pc, #176]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003754:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003756:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800375a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800375e:	fa93 f3a3 	rbit	r3, r3
 8003762:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003766:	fab3 f383 	clz	r3, r3
 800376a:	b2db      	uxtb	r3, r3
 800376c:	461a      	mov	r2, r3
 800376e:	4b26      	ldr	r3, [pc, #152]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	461a      	mov	r2, r3
 8003776:	2301      	movs	r3, #1
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800377e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003782:	fa93 f3a3 	rbit	r3, r3
 8003786:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800378a:	fab3 f383 	clz	r3, r3
 800378e:	b2db      	uxtb	r3, r3
 8003790:	461a      	mov	r2, r3
 8003792:	4b1d      	ldr	r3, [pc, #116]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003794:	4413      	add	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	461a      	mov	r2, r3
 800379a:	2300      	movs	r3, #0
 800379c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800379e:	4a18      	ldr	r2, [pc, #96]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037a2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d04b      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ae:	f7fe f9a9 	bl	8001b04 <HAL_GetTick>
 80037b2:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b4:	e00a      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b6:	f7fe f9a5 	bl	8001b04 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d901      	bls.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e0f5      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80037cc:	2302      	movs	r3, #2
 80037ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d2:	fa93 f3a3 	rbit	r3, r3
 80037d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80037d8:	2302      	movs	r3, #2
 80037da:	623b      	str	r3, [r7, #32]
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	fa93 f3a3 	rbit	r3, r3
 80037e2:	61fb      	str	r3, [r7, #28]
  return result;
 80037e4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e6:	fab3 f383 	clz	r3, r3
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	095b      	lsrs	r3, r3, #5
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	f043 0302 	orr.w	r3, r3, #2
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d108      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80037fa:	4b01      	ldr	r3, [pc, #4]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	e00d      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003800:	40021000 	.word	0x40021000
 8003804:	40007000 	.word	0x40007000
 8003808:	10908100 	.word	0x10908100
 800380c:	2302      	movs	r3, #2
 800380e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	fa93 f3a3 	rbit	r3, r3
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	4b69      	ldr	r3, [pc, #420]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800381a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381c:	2202      	movs	r2, #2
 800381e:	613a      	str	r2, [r7, #16]
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	fa92 f2a2 	rbit	r2, r2
 8003826:	60fa      	str	r2, [r7, #12]
  return result;
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	fab2 f282 	clz	r2, r2
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	f002 021f 	and.w	r2, r2, #31
 800383a:	2101      	movs	r1, #1
 800383c:	fa01 f202 	lsl.w	r2, r1, r2
 8003840:	4013      	ands	r3, r2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0b7      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003846:	4b5e      	ldr	r3, [pc, #376]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	495b      	ldr	r1, [pc, #364]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003854:	4313      	orrs	r3, r2
 8003856:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003858:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800385c:	2b01      	cmp	r3, #1
 800385e:	d105      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003860:	4b57      	ldr	r3, [pc, #348]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	4a56      	ldr	r2, [pc, #344]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003866:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800386a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b00      	cmp	r3, #0
 8003876:	d008      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003878:	4b51      	ldr	r3, [pc, #324]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800387a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387c:	f023 0203 	bic.w	r2, r3, #3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	494e      	ldr	r1, [pc, #312]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003886:	4313      	orrs	r3, r2
 8003888:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0320 	and.w	r3, r3, #32
 8003892:	2b00      	cmp	r3, #0
 8003894:	d008      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003896:	4b4a      	ldr	r3, [pc, #296]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389a:	f023 0210 	bic.w	r2, r3, #16
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	4947      	ldr	r1, [pc, #284]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d008      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80038b4:	4b42      	ldr	r3, [pc, #264]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c0:	493f      	ldr	r1, [pc, #252]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d008      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038d2:	4b3b      	ldr	r3, [pc, #236]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d6:	f023 0220 	bic.w	r2, r3, #32
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	4938      	ldr	r1, [pc, #224]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d008      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038f0:	4b33      	ldr	r3, [pc, #204]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	4930      	ldr	r1, [pc, #192]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800390a:	2b00      	cmp	r3, #0
 800390c:	d008      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800390e:	4b2c      	ldr	r3, [pc, #176]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	4929      	ldr	r1, [pc, #164]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800391c:	4313      	orrs	r3, r2
 800391e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003928:	2b00      	cmp	r3, #0
 800392a:	d008      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800392c:	4b24      	ldr	r3, [pc, #144]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800392e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003930:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	4921      	ldr	r1, [pc, #132]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800393a:	4313      	orrs	r3, r2
 800393c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d008      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800394a:	4b1d      	ldr	r3, [pc, #116]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	491a      	ldr	r1, [pc, #104]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003958:	4313      	orrs	r3, r2
 800395a:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d008      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003968:	4b15      	ldr	r3, [pc, #84]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800396a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003974:	4912      	ldr	r1, [pc, #72]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003976:	4313      	orrs	r3, r2
 8003978:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d008      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003986:	4b0e      	ldr	r3, [pc, #56]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003992:	490b      	ldr	r1, [pc, #44]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003994:	4313      	orrs	r3, r2
 8003996:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d008      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80039a4:	4b06      	ldr	r3, [pc, #24]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b0:	4903      	ldr	r1, [pc, #12]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3748      	adds	r7, #72	@ 0x48
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40021000 	.word	0x40021000

080039c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e049      	b.n	8003a6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d106      	bne.n	80039f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7fd fd16 	bl	800141c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3304      	adds	r3, #4
 8003a00:	4619      	mov	r1, r3
 8003a02:	4610      	mov	r0, r2
 8003a04:	f000 fcf0 	bl	80043e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
	...

08003a74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d001      	beq.n	8003a8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e033      	b.n	8003af4 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a19      	ldr	r2, [pc, #100]	@ (8003b00 <HAL_TIM_Base_Start+0x8c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d009      	beq.n	8003ab2 <HAL_TIM_Base_Start+0x3e>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aa6:	d004      	beq.n	8003ab2 <HAL_TIM_Base_Start+0x3e>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a15      	ldr	r2, [pc, #84]	@ (8003b04 <HAL_TIM_Base_Start+0x90>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d115      	bne.n	8003ade <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	4b13      	ldr	r3, [pc, #76]	@ (8003b08 <HAL_TIM_Base_Start+0x94>)
 8003aba:	4013      	ands	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2b06      	cmp	r3, #6
 8003ac2:	d015      	beq.n	8003af0 <HAL_TIM_Base_Start+0x7c>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aca:	d011      	beq.n	8003af0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0201 	orr.w	r2, r2, #1
 8003ada:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003adc:	e008      	b.n	8003af0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f042 0201 	orr.w	r2, r2, #1
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	e000      	b.n	8003af2 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	40012c00 	.word	0x40012c00
 8003b04:	40014000 	.word	0x40014000
 8003b08:	00010007 	.word	0x00010007

08003b0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e049      	b.n	8003bb2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d106      	bne.n	8003b38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7fd fcd0 	bl	80014d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3304      	adds	r3, #4
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4610      	mov	r0, r2
 8003b4c:	f000 fc4c 	bl	80043e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
	...

08003bbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d109      	bne.n	8003be0 <HAL_TIM_PWM_Start+0x24>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	bf14      	ite	ne
 8003bd8:	2301      	movne	r3, #1
 8003bda:	2300      	moveq	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	e03c      	b.n	8003c5a <HAL_TIM_PWM_Start+0x9e>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d109      	bne.n	8003bfa <HAL_TIM_PWM_Start+0x3e>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	bf14      	ite	ne
 8003bf2:	2301      	movne	r3, #1
 8003bf4:	2300      	moveq	r3, #0
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	e02f      	b.n	8003c5a <HAL_TIM_PWM_Start+0x9e>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d109      	bne.n	8003c14 <HAL_TIM_PWM_Start+0x58>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	bf14      	ite	ne
 8003c0c:	2301      	movne	r3, #1
 8003c0e:	2300      	moveq	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	e022      	b.n	8003c5a <HAL_TIM_PWM_Start+0x9e>
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	2b0c      	cmp	r3, #12
 8003c18:	d109      	bne.n	8003c2e <HAL_TIM_PWM_Start+0x72>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	bf14      	ite	ne
 8003c26:	2301      	movne	r3, #1
 8003c28:	2300      	moveq	r3, #0
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	e015      	b.n	8003c5a <HAL_TIM_PWM_Start+0x9e>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b10      	cmp	r3, #16
 8003c32:	d109      	bne.n	8003c48 <HAL_TIM_PWM_Start+0x8c>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	bf14      	ite	ne
 8003c40:	2301      	movne	r3, #1
 8003c42:	2300      	moveq	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	e008      	b.n	8003c5a <HAL_TIM_PWM_Start+0x9e>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	bf14      	ite	ne
 8003c54:	2301      	movne	r3, #1
 8003c56:	2300      	moveq	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e083      	b.n	8003d6a <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d104      	bne.n	8003c72 <HAL_TIM_PWM_Start+0xb6>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c70:	e023      	b.n	8003cba <HAL_TIM_PWM_Start+0xfe>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d104      	bne.n	8003c82 <HAL_TIM_PWM_Start+0xc6>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c80:	e01b      	b.n	8003cba <HAL_TIM_PWM_Start+0xfe>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d104      	bne.n	8003c92 <HAL_TIM_PWM_Start+0xd6>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c90:	e013      	b.n	8003cba <HAL_TIM_PWM_Start+0xfe>
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	2b0c      	cmp	r3, #12
 8003c96:	d104      	bne.n	8003ca2 <HAL_TIM_PWM_Start+0xe6>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ca0:	e00b      	b.n	8003cba <HAL_TIM_PWM_Start+0xfe>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b10      	cmp	r3, #16
 8003ca6:	d104      	bne.n	8003cb2 <HAL_TIM_PWM_Start+0xf6>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cb0:	e003      	b.n	8003cba <HAL_TIM_PWM_Start+0xfe>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	6839      	ldr	r1, [r7, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 ff3e 	bl	8004b44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a29      	ldr	r2, [pc, #164]	@ (8003d74 <HAL_TIM_PWM_Start+0x1b8>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d00e      	beq.n	8003cf0 <HAL_TIM_PWM_Start+0x134>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a28      	ldr	r2, [pc, #160]	@ (8003d78 <HAL_TIM_PWM_Start+0x1bc>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d009      	beq.n	8003cf0 <HAL_TIM_PWM_Start+0x134>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a26      	ldr	r2, [pc, #152]	@ (8003d7c <HAL_TIM_PWM_Start+0x1c0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d004      	beq.n	8003cf0 <HAL_TIM_PWM_Start+0x134>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a25      	ldr	r2, [pc, #148]	@ (8003d80 <HAL_TIM_PWM_Start+0x1c4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d101      	bne.n	8003cf4 <HAL_TIM_PWM_Start+0x138>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e000      	b.n	8003cf6 <HAL_TIM_PWM_Start+0x13a>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d007      	beq.n	8003d0a <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d08:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a19      	ldr	r2, [pc, #100]	@ (8003d74 <HAL_TIM_PWM_Start+0x1b8>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d009      	beq.n	8003d28 <HAL_TIM_PWM_Start+0x16c>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d1c:	d004      	beq.n	8003d28 <HAL_TIM_PWM_Start+0x16c>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a15      	ldr	r2, [pc, #84]	@ (8003d78 <HAL_TIM_PWM_Start+0x1bc>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d115      	bne.n	8003d54 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	4b15      	ldr	r3, [pc, #84]	@ (8003d84 <HAL_TIM_PWM_Start+0x1c8>)
 8003d30:	4013      	ands	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2b06      	cmp	r3, #6
 8003d38:	d015      	beq.n	8003d66 <HAL_TIM_PWM_Start+0x1aa>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d40:	d011      	beq.n	8003d66 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f042 0201 	orr.w	r2, r2, #1
 8003d50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d52:	e008      	b.n	8003d66 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 0201 	orr.w	r2, r2, #1
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	e000      	b.n	8003d68 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40012c00 	.word	0x40012c00
 8003d78:	40014000 	.word	0x40014000
 8003d7c:	40014400 	.word	0x40014400
 8003d80:	40014800 	.word	0x40014800
 8003d84:	00010007 	.word	0x00010007

08003d88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d122      	bne.n	8003de4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d11b      	bne.n	8003de4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f06f 0202 	mvn.w	r2, #2
 8003db4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	f003 0303 	and.w	r3, r3, #3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 faed 	bl	80043aa <HAL_TIM_IC_CaptureCallback>
 8003dd0:	e005      	b.n	8003dde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 fadf 	bl	8004396 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 faf0 	bl	80043be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f003 0304 	and.w	r3, r3, #4
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	d122      	bne.n	8003e38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b04      	cmp	r3, #4
 8003dfe:	d11b      	bne.n	8003e38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f06f 0204 	mvn.w	r2, #4
 8003e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 fac3 	bl	80043aa <HAL_TIM_IC_CaptureCallback>
 8003e24:	e005      	b.n	8003e32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 fab5 	bl	8004396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 fac6 	bl	80043be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	2b08      	cmp	r3, #8
 8003e44:	d122      	bne.n	8003e8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f003 0308 	and.w	r3, r3, #8
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d11b      	bne.n	8003e8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f06f 0208 	mvn.w	r2, #8
 8003e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2204      	movs	r2, #4
 8003e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	f003 0303 	and.w	r3, r3, #3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 fa99 	bl	80043aa <HAL_TIM_IC_CaptureCallback>
 8003e78:	e005      	b.n	8003e86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 fa8b 	bl	8004396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 fa9c 	bl	80043be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	f003 0310 	and.w	r3, r3, #16
 8003e96:	2b10      	cmp	r3, #16
 8003e98:	d122      	bne.n	8003ee0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f003 0310 	and.w	r3, r3, #16
 8003ea4:	2b10      	cmp	r3, #16
 8003ea6:	d11b      	bne.n	8003ee0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f06f 0210 	mvn.w	r2, #16
 8003eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2208      	movs	r2, #8
 8003eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 fa6f 	bl	80043aa <HAL_TIM_IC_CaptureCallback>
 8003ecc:	e005      	b.n	8003eda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 fa61 	bl	8004396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 fa72 	bl	80043be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d10e      	bne.n	8003f0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d107      	bne.n	8003f0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f06f 0201 	mvn.w	r2, #1
 8003f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 fa3b 	bl	8004382 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f16:	2b80      	cmp	r3, #128	@ 0x80
 8003f18:	d10e      	bne.n	8003f38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f24:	2b80      	cmp	r3, #128	@ 0x80
 8003f26:	d107      	bne.n	8003f38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 ff14 	bl	8004d60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f46:	d10e      	bne.n	8003f66 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f52:	2b80      	cmp	r3, #128	@ 0x80
 8003f54:	d107      	bne.n	8003f66 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 ff07 	bl	8004d74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f70:	2b40      	cmp	r3, #64	@ 0x40
 8003f72:	d10e      	bne.n	8003f92 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f7e:	2b40      	cmp	r3, #64	@ 0x40
 8003f80:	d107      	bne.n	8003f92 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 fa20 	bl	80043d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	f003 0320 	and.w	r3, r3, #32
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d10e      	bne.n	8003fbe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	2b20      	cmp	r3, #32
 8003fac:	d107      	bne.n	8003fbe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f06f 0220 	mvn.w	r2, #32
 8003fb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 fec7 	bl	8004d4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fbe:	bf00      	nop
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e0ff      	b.n	80041e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b14      	cmp	r3, #20
 8003ff2:	f200 80f0 	bhi.w	80041d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8003ffc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffc:	08004051 	.word	0x08004051
 8004000:	080041d7 	.word	0x080041d7
 8004004:	080041d7 	.word	0x080041d7
 8004008:	080041d7 	.word	0x080041d7
 800400c:	08004091 	.word	0x08004091
 8004010:	080041d7 	.word	0x080041d7
 8004014:	080041d7 	.word	0x080041d7
 8004018:	080041d7 	.word	0x080041d7
 800401c:	080040d3 	.word	0x080040d3
 8004020:	080041d7 	.word	0x080041d7
 8004024:	080041d7 	.word	0x080041d7
 8004028:	080041d7 	.word	0x080041d7
 800402c:	08004113 	.word	0x08004113
 8004030:	080041d7 	.word	0x080041d7
 8004034:	080041d7 	.word	0x080041d7
 8004038:	080041d7 	.word	0x080041d7
 800403c:	08004155 	.word	0x08004155
 8004040:	080041d7 	.word	0x080041d7
 8004044:	080041d7 	.word	0x080041d7
 8004048:	080041d7 	.word	0x080041d7
 800404c:	08004195 	.word	0x08004195
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68b9      	ldr	r1, [r7, #8]
 8004056:	4618      	mov	r0, r3
 8004058:	f000 fa34 	bl	80044c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	699a      	ldr	r2, [r3, #24]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0208 	orr.w	r2, r2, #8
 800406a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699a      	ldr	r2, [r3, #24]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 0204 	bic.w	r2, r2, #4
 800407a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6999      	ldr	r1, [r3, #24]
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	691a      	ldr	r2, [r3, #16]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	619a      	str	r2, [r3, #24]
      break;
 800408e:	e0a5      	b.n	80041dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68b9      	ldr	r1, [r7, #8]
 8004096:	4618      	mov	r0, r3
 8004098:	f000 fa9a 	bl	80045d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699a      	ldr	r2, [r3, #24]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699a      	ldr	r2, [r3, #24]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6999      	ldr	r1, [r3, #24]
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	021a      	lsls	r2, r3, #8
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	619a      	str	r2, [r3, #24]
      break;
 80040d0:	e084      	b.n	80041dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68b9      	ldr	r1, [r7, #8]
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 faf9 	bl	80046d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69da      	ldr	r2, [r3, #28]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f042 0208 	orr.w	r2, r2, #8
 80040ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	69da      	ldr	r2, [r3, #28]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0204 	bic.w	r2, r2, #4
 80040fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69d9      	ldr	r1, [r3, #28]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	691a      	ldr	r2, [r3, #16]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	61da      	str	r2, [r3, #28]
      break;
 8004110:	e064      	b.n	80041dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68b9      	ldr	r1, [r7, #8]
 8004118:	4618      	mov	r0, r3
 800411a:	f000 fb57 	bl	80047cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69da      	ldr	r2, [r3, #28]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800412c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69da      	ldr	r2, [r3, #28]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800413c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69d9      	ldr	r1, [r3, #28]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	021a      	lsls	r2, r3, #8
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	61da      	str	r2, [r3, #28]
      break;
 8004152:	e043      	b.n	80041dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68b9      	ldr	r1, [r7, #8]
 800415a:	4618      	mov	r0, r3
 800415c:	f000 fb9a 	bl	8004894 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0208 	orr.w	r2, r2, #8
 800416e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0204 	bic.w	r2, r2, #4
 800417e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	691a      	ldr	r2, [r3, #16]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004192:	e023      	b.n	80041dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68b9      	ldr	r1, [r7, #8]
 800419a:	4618      	mov	r0, r3
 800419c:	f000 fbd8 	bl	8004950 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041ae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041be:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	021a      	lsls	r2, r3, #8
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80041d4:	e002      	b.n	80041dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	75fb      	strb	r3, [r7, #23]
      break;
 80041da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80041e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop

080041f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004204:	2b01      	cmp	r3, #1
 8004206:	d101      	bne.n	800420c <HAL_TIM_ConfigClockSource+0x1c>
 8004208:	2302      	movs	r3, #2
 800420a:	e0b6      	b.n	800437a <HAL_TIM_ConfigClockSource+0x18a>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800422a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800422e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004236:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004248:	d03e      	beq.n	80042c8 <HAL_TIM_ConfigClockSource+0xd8>
 800424a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800424e:	f200 8087 	bhi.w	8004360 <HAL_TIM_ConfigClockSource+0x170>
 8004252:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004256:	f000 8086 	beq.w	8004366 <HAL_TIM_ConfigClockSource+0x176>
 800425a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800425e:	d87f      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x170>
 8004260:	2b70      	cmp	r3, #112	@ 0x70
 8004262:	d01a      	beq.n	800429a <HAL_TIM_ConfigClockSource+0xaa>
 8004264:	2b70      	cmp	r3, #112	@ 0x70
 8004266:	d87b      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x170>
 8004268:	2b60      	cmp	r3, #96	@ 0x60
 800426a:	d050      	beq.n	800430e <HAL_TIM_ConfigClockSource+0x11e>
 800426c:	2b60      	cmp	r3, #96	@ 0x60
 800426e:	d877      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x170>
 8004270:	2b50      	cmp	r3, #80	@ 0x50
 8004272:	d03c      	beq.n	80042ee <HAL_TIM_ConfigClockSource+0xfe>
 8004274:	2b50      	cmp	r3, #80	@ 0x50
 8004276:	d873      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x170>
 8004278:	2b40      	cmp	r3, #64	@ 0x40
 800427a:	d058      	beq.n	800432e <HAL_TIM_ConfigClockSource+0x13e>
 800427c:	2b40      	cmp	r3, #64	@ 0x40
 800427e:	d86f      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x170>
 8004280:	2b30      	cmp	r3, #48	@ 0x30
 8004282:	d064      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x15e>
 8004284:	2b30      	cmp	r3, #48	@ 0x30
 8004286:	d86b      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x170>
 8004288:	2b20      	cmp	r3, #32
 800428a:	d060      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x15e>
 800428c:	2b20      	cmp	r3, #32
 800428e:	d867      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x170>
 8004290:	2b00      	cmp	r3, #0
 8004292:	d05c      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x15e>
 8004294:	2b10      	cmp	r3, #16
 8004296:	d05a      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x15e>
 8004298:	e062      	b.n	8004360 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042aa:	f000 fc2b 	bl	8004b04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80042bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	609a      	str	r2, [r3, #8]
      break;
 80042c6:	e04f      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042d8:	f000 fc14 	bl	8004b04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042ea:	609a      	str	r2, [r3, #8]
      break;
 80042ec:	e03c      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042fa:	461a      	mov	r2, r3
 80042fc:	f000 fb88 	bl	8004a10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2150      	movs	r1, #80	@ 0x50
 8004306:	4618      	mov	r0, r3
 8004308:	f000 fbe1 	bl	8004ace <TIM_ITRx_SetConfig>
      break;
 800430c:	e02c      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800431a:	461a      	mov	r2, r3
 800431c:	f000 fba7 	bl	8004a6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2160      	movs	r1, #96	@ 0x60
 8004326:	4618      	mov	r0, r3
 8004328:	f000 fbd1 	bl	8004ace <TIM_ITRx_SetConfig>
      break;
 800432c:	e01c      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800433a:	461a      	mov	r2, r3
 800433c:	f000 fb68 	bl	8004a10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2140      	movs	r1, #64	@ 0x40
 8004346:	4618      	mov	r0, r3
 8004348:	f000 fbc1 	bl	8004ace <TIM_ITRx_SetConfig>
      break;
 800434c:	e00c      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4619      	mov	r1, r3
 8004358:	4610      	mov	r0, r2
 800435a:	f000 fbb8 	bl	8004ace <TIM_ITRx_SetConfig>
      break;
 800435e:	e003      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	73fb      	strb	r3, [r7, #15]
      break;
 8004364:	e000      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004366:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004378:	7bfb      	ldrb	r3, [r7, #15]
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
	...

080043e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a2e      	ldr	r2, [pc, #184]	@ (80044b4 <TIM_Base_SetConfig+0xcc>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d003      	beq.n	8004408 <TIM_Base_SetConfig+0x20>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004406:	d108      	bne.n	800441a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800440e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	4313      	orrs	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a25      	ldr	r2, [pc, #148]	@ (80044b4 <TIM_Base_SetConfig+0xcc>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d00f      	beq.n	8004442 <TIM_Base_SetConfig+0x5a>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004428:	d00b      	beq.n	8004442 <TIM_Base_SetConfig+0x5a>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a22      	ldr	r2, [pc, #136]	@ (80044b8 <TIM_Base_SetConfig+0xd0>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d007      	beq.n	8004442 <TIM_Base_SetConfig+0x5a>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a21      	ldr	r2, [pc, #132]	@ (80044bc <TIM_Base_SetConfig+0xd4>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d003      	beq.n	8004442 <TIM_Base_SetConfig+0x5a>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a20      	ldr	r2, [pc, #128]	@ (80044c0 <TIM_Base_SetConfig+0xd8>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d108      	bne.n	8004454 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	4313      	orrs	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a0e      	ldr	r2, [pc, #56]	@ (80044b4 <TIM_Base_SetConfig+0xcc>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d00b      	beq.n	8004498 <TIM_Base_SetConfig+0xb0>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a0d      	ldr	r2, [pc, #52]	@ (80044b8 <TIM_Base_SetConfig+0xd0>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d007      	beq.n	8004498 <TIM_Base_SetConfig+0xb0>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a0c      	ldr	r2, [pc, #48]	@ (80044bc <TIM_Base_SetConfig+0xd4>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d003      	beq.n	8004498 <TIM_Base_SetConfig+0xb0>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a0b      	ldr	r2, [pc, #44]	@ (80044c0 <TIM_Base_SetConfig+0xd8>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d103      	bne.n	80044a0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	691a      	ldr	r2, [r3, #16]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	615a      	str	r2, [r3, #20]
}
 80044a6:	bf00      	nop
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	40012c00 	.word	0x40012c00
 80044b8:	40014000 	.word	0x40014000
 80044bc:	40014400 	.word	0x40014400
 80044c0:	40014800 	.word	0x40014800

080044c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	f023 0201 	bic.w	r2, r3, #1
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f023 0303 	bic.w	r3, r3, #3
 80044fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f023 0302 	bic.w	r3, r3, #2
 8004510:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	4313      	orrs	r3, r2
 800451a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a28      	ldr	r2, [pc, #160]	@ (80045c0 <TIM_OC1_SetConfig+0xfc>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d00b      	beq.n	800453c <TIM_OC1_SetConfig+0x78>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a27      	ldr	r2, [pc, #156]	@ (80045c4 <TIM_OC1_SetConfig+0x100>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d007      	beq.n	800453c <TIM_OC1_SetConfig+0x78>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a26      	ldr	r2, [pc, #152]	@ (80045c8 <TIM_OC1_SetConfig+0x104>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d003      	beq.n	800453c <TIM_OC1_SetConfig+0x78>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a25      	ldr	r2, [pc, #148]	@ (80045cc <TIM_OC1_SetConfig+0x108>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d10c      	bne.n	8004556 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f023 0308 	bic.w	r3, r3, #8
 8004542:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	4313      	orrs	r3, r2
 800454c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f023 0304 	bic.w	r3, r3, #4
 8004554:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a19      	ldr	r2, [pc, #100]	@ (80045c0 <TIM_OC1_SetConfig+0xfc>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d00b      	beq.n	8004576 <TIM_OC1_SetConfig+0xb2>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a18      	ldr	r2, [pc, #96]	@ (80045c4 <TIM_OC1_SetConfig+0x100>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d007      	beq.n	8004576 <TIM_OC1_SetConfig+0xb2>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a17      	ldr	r2, [pc, #92]	@ (80045c8 <TIM_OC1_SetConfig+0x104>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d003      	beq.n	8004576 <TIM_OC1_SetConfig+0xb2>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a16      	ldr	r2, [pc, #88]	@ (80045cc <TIM_OC1_SetConfig+0x108>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d111      	bne.n	800459a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800457c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004584:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	4313      	orrs	r3, r2
 800458e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	4313      	orrs	r3, r2
 8004598:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	621a      	str	r2, [r3, #32]
}
 80045b4:	bf00      	nop
 80045b6:	371c      	adds	r7, #28
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	40012c00 	.word	0x40012c00
 80045c4:	40014000 	.word	0x40014000
 80045c8:	40014400 	.word	0x40014400
 80045cc:	40014800 	.word	0x40014800

080045d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	f023 0210 	bic.w	r2, r3, #16
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800460a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	021b      	lsls	r3, r3, #8
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	4313      	orrs	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f023 0320 	bic.w	r3, r3, #32
 800461e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	011b      	lsls	r3, r3, #4
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	4313      	orrs	r3, r2
 800462a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a24      	ldr	r2, [pc, #144]	@ (80046c0 <TIM_OC2_SetConfig+0xf0>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d10d      	bne.n	8004650 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800463a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	011b      	lsls	r3, r3, #4
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	4313      	orrs	r3, r2
 8004646:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800464e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a1b      	ldr	r2, [pc, #108]	@ (80046c0 <TIM_OC2_SetConfig+0xf0>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d00b      	beq.n	8004670 <TIM_OC2_SetConfig+0xa0>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a1a      	ldr	r2, [pc, #104]	@ (80046c4 <TIM_OC2_SetConfig+0xf4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d007      	beq.n	8004670 <TIM_OC2_SetConfig+0xa0>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a19      	ldr	r2, [pc, #100]	@ (80046c8 <TIM_OC2_SetConfig+0xf8>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d003      	beq.n	8004670 <TIM_OC2_SetConfig+0xa0>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a18      	ldr	r2, [pc, #96]	@ (80046cc <TIM_OC2_SetConfig+0xfc>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d113      	bne.n	8004698 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004676:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800467e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	4313      	orrs	r3, r2
 800468a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	4313      	orrs	r3, r2
 8004696:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	621a      	str	r2, [r3, #32]
}
 80046b2:	bf00      	nop
 80046b4:	371c      	adds	r7, #28
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	40012c00 	.word	0x40012c00
 80046c4:	40014000 	.word	0x40014000
 80046c8:	40014400 	.word	0x40014400
 80046cc:	40014800 	.word	0x40014800

080046d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f023 0303 	bic.w	r3, r3, #3
 800470a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	4313      	orrs	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800471c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	021b      	lsls	r3, r3, #8
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	4313      	orrs	r3, r2
 8004728:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a23      	ldr	r2, [pc, #140]	@ (80047bc <TIM_OC3_SetConfig+0xec>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d10d      	bne.n	800474e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004738:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	021b      	lsls	r3, r3, #8
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	4313      	orrs	r3, r2
 8004744:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800474c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a1a      	ldr	r2, [pc, #104]	@ (80047bc <TIM_OC3_SetConfig+0xec>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00b      	beq.n	800476e <TIM_OC3_SetConfig+0x9e>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a19      	ldr	r2, [pc, #100]	@ (80047c0 <TIM_OC3_SetConfig+0xf0>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d007      	beq.n	800476e <TIM_OC3_SetConfig+0x9e>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a18      	ldr	r2, [pc, #96]	@ (80047c4 <TIM_OC3_SetConfig+0xf4>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d003      	beq.n	800476e <TIM_OC3_SetConfig+0x9e>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a17      	ldr	r2, [pc, #92]	@ (80047c8 <TIM_OC3_SetConfig+0xf8>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d113      	bne.n	8004796 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004774:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800477c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	011b      	lsls	r3, r3, #4
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4313      	orrs	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4313      	orrs	r3, r2
 8004794:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	621a      	str	r2, [r3, #32]
}
 80047b0:	bf00      	nop
 80047b2:	371c      	adds	r7, #28
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	40012c00 	.word	0x40012c00
 80047c0:	40014000 	.word	0x40014000
 80047c4:	40014400 	.word	0x40014400
 80047c8:	40014800 	.word	0x40014800

080047cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	021b      	lsls	r3, r3, #8
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	4313      	orrs	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800481a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	031b      	lsls	r3, r3, #12
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	4313      	orrs	r3, r2
 8004826:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a16      	ldr	r2, [pc, #88]	@ (8004884 <TIM_OC4_SetConfig+0xb8>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d00b      	beq.n	8004848 <TIM_OC4_SetConfig+0x7c>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a15      	ldr	r2, [pc, #84]	@ (8004888 <TIM_OC4_SetConfig+0xbc>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d007      	beq.n	8004848 <TIM_OC4_SetConfig+0x7c>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a14      	ldr	r2, [pc, #80]	@ (800488c <TIM_OC4_SetConfig+0xc0>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d003      	beq.n	8004848 <TIM_OC4_SetConfig+0x7c>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a13      	ldr	r2, [pc, #76]	@ (8004890 <TIM_OC4_SetConfig+0xc4>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d109      	bne.n	800485c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800484e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	019b      	lsls	r3, r3, #6
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	4313      	orrs	r3, r2
 800485a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	621a      	str	r2, [r3, #32]
}
 8004876:	bf00      	nop
 8004878:	371c      	adds	r7, #28
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	40012c00 	.word	0x40012c00
 8004888:	40014000 	.word	0x40014000
 800488c:	40014400 	.word	0x40014400
 8004890:	40014800 	.word	0x40014800

08004894 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80048d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	041b      	lsls	r3, r3, #16
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a15      	ldr	r2, [pc, #84]	@ (8004940 <TIM_OC5_SetConfig+0xac>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d00b      	beq.n	8004906 <TIM_OC5_SetConfig+0x72>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a14      	ldr	r2, [pc, #80]	@ (8004944 <TIM_OC5_SetConfig+0xb0>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d007      	beq.n	8004906 <TIM_OC5_SetConfig+0x72>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a13      	ldr	r2, [pc, #76]	@ (8004948 <TIM_OC5_SetConfig+0xb4>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d003      	beq.n	8004906 <TIM_OC5_SetConfig+0x72>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a12      	ldr	r2, [pc, #72]	@ (800494c <TIM_OC5_SetConfig+0xb8>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d109      	bne.n	800491a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800490c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	021b      	lsls	r3, r3, #8
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	4313      	orrs	r3, r2
 8004918:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	621a      	str	r2, [r3, #32]
}
 8004934:	bf00      	nop
 8004936:	371c      	adds	r7, #28
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	40012c00 	.word	0x40012c00
 8004944:	40014000 	.word	0x40014000
 8004948:	40014400 	.word	0x40014400
 800494c:	40014800 	.word	0x40014800

08004950 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800497e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	021b      	lsls	r3, r3, #8
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	4313      	orrs	r3, r2
 800498e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004996:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	051b      	lsls	r3, r3, #20
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a16      	ldr	r2, [pc, #88]	@ (8004a00 <TIM_OC6_SetConfig+0xb0>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d00b      	beq.n	80049c4 <TIM_OC6_SetConfig+0x74>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a15      	ldr	r2, [pc, #84]	@ (8004a04 <TIM_OC6_SetConfig+0xb4>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d007      	beq.n	80049c4 <TIM_OC6_SetConfig+0x74>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a14      	ldr	r2, [pc, #80]	@ (8004a08 <TIM_OC6_SetConfig+0xb8>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d003      	beq.n	80049c4 <TIM_OC6_SetConfig+0x74>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a13      	ldr	r2, [pc, #76]	@ (8004a0c <TIM_OC6_SetConfig+0xbc>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d109      	bne.n	80049d8 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	029b      	lsls	r3, r3, #10
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	621a      	str	r2, [r3, #32]
}
 80049f2:	bf00      	nop
 80049f4:	371c      	adds	r7, #28
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	40012c00 	.word	0x40012c00
 8004a04:	40014000 	.word	0x40014000
 8004a08:	40014400 	.word	0x40014400
 8004a0c:	40014800 	.word	0x40014800

08004a10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	f023 0201 	bic.w	r2, r3, #1
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f023 030a 	bic.w	r3, r3, #10
 8004a4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	621a      	str	r2, [r3, #32]
}
 8004a62:	bf00      	nop
 8004a64:	371c      	adds	r7, #28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b087      	sub	sp, #28
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	f023 0210 	bic.w	r2, r3, #16
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	031b      	lsls	r3, r3, #12
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004aaa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	621a      	str	r2, [r3, #32]
}
 8004ac2:	bf00      	nop
 8004ac4:	371c      	adds	r7, #28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b085      	sub	sp, #20
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ae4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	f043 0307 	orr.w	r3, r3, #7
 8004af0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	609a      	str	r2, [r3, #8]
}
 8004af8:	bf00      	nop
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
 8004b10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	021a      	lsls	r2, r3, #8
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	431a      	orrs	r2, r3
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	609a      	str	r2, [r3, #8]
}
 8004b38:	bf00      	nop
 8004b3a:	371c      	adds	r7, #28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f003 031f 	and.w	r3, r3, #31
 8004b56:	2201      	movs	r2, #1
 8004b58:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a1a      	ldr	r2, [r3, #32]
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	43db      	mvns	r3, r3
 8004b66:	401a      	ands	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6a1a      	ldr	r2, [r3, #32]
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	f003 031f 	and.w	r3, r3, #31
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	621a      	str	r2, [r3, #32]
}
 8004b82:	bf00      	nop
 8004b84:	371c      	adds	r7, #28
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
	...

08004b90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e04f      	b.n	8004c48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a21      	ldr	r2, [pc, #132]	@ (8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d108      	bne.n	8004be4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004bd8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a14      	ldr	r2, [pc, #80]	@ (8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d009      	beq.n	8004c1c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c10:	d004      	beq.n	8004c1c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a10      	ldr	r2, [pc, #64]	@ (8004c58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d10c      	bne.n	8004c36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	40012c00 	.word	0x40012c00
 8004c58:	40014000 	.word	0x40014000

08004c5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004c66:	2300      	movs	r3, #0
 8004c68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d101      	bne.n	8004c78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c74:	2302      	movs	r3, #2
 8004c76:	e060      	b.n	8004d3a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	041b      	lsls	r3, r3, #16
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a14      	ldr	r2, [pc, #80]	@ (8004d48 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d115      	bne.n	8004d28 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d06:	051b      	lsls	r3, r3, #20
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	6a1b      	ldr	r3, [r3, #32]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3714      	adds	r7, #20
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	40012c00 	.word	0x40012c00

08004d4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e040      	b.n	8004e1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d106      	bne.n	8004db0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7fc fc6e 	bl	800168c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2224      	movs	r2, #36	@ 0x24
 8004db4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 0201 	bic.w	r2, r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fbfc 	bl	80055c4 <UART_SetConfig>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d101      	bne.n	8004dd6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e022      	b.n	8004e1c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 fd26 	bl	8005830 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004df2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689a      	ldr	r2, [r3, #8]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0201 	orr.w	r2, r2, #1
 8004e12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 fdad 	bl	8005974 <UART_CheckIdleState>
 8004e1a:	4603      	mov	r3, r0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3708      	adds	r7, #8
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b08a      	sub	sp, #40	@ 0x28
 8004e28:	af02      	add	r7, sp, #8
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	603b      	str	r3, [r7, #0]
 8004e30:	4613      	mov	r3, r2
 8004e32:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e3a:	2b20      	cmp	r3, #32
 8004e3c:	f040 80b6 	bne.w	8004fac <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d002      	beq.n	8004e4c <HAL_UART_Receive+0x28>
 8004e46:	88fb      	ldrh	r3, [r7, #6]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e0ae      	b.n	8004fae <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2222      	movs	r2, #34	@ 0x22
 8004e5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e66:	f7fc fe4d 	bl	8001b04 <HAL_GetTick>
 8004e6a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	88fa      	ldrh	r2, [r7, #6]
 8004e70:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	88fa      	ldrh	r2, [r7, #6]
 8004e78:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e84:	d10e      	bne.n	8004ea4 <HAL_UART_Receive+0x80>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d105      	bne.n	8004e9a <HAL_UART_Receive+0x76>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004e94:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e98:	e02d      	b.n	8004ef6 <HAL_UART_Receive+0xd2>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	22ff      	movs	r2, #255	@ 0xff
 8004e9e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004ea2:	e028      	b.n	8004ef6 <HAL_UART_Receive+0xd2>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10d      	bne.n	8004ec8 <HAL_UART_Receive+0xa4>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d104      	bne.n	8004ebe <HAL_UART_Receive+0x9a>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	22ff      	movs	r2, #255	@ 0xff
 8004eb8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004ebc:	e01b      	b.n	8004ef6 <HAL_UART_Receive+0xd2>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	227f      	movs	r2, #127	@ 0x7f
 8004ec2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004ec6:	e016      	b.n	8004ef6 <HAL_UART_Receive+0xd2>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ed0:	d10d      	bne.n	8004eee <HAL_UART_Receive+0xca>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d104      	bne.n	8004ee4 <HAL_UART_Receive+0xc0>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	227f      	movs	r2, #127	@ 0x7f
 8004ede:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004ee2:	e008      	b.n	8004ef6 <HAL_UART_Receive+0xd2>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	223f      	movs	r2, #63	@ 0x3f
 8004ee8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004eec:	e003      	b.n	8004ef6 <HAL_UART_Receive+0xd2>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004efc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f06:	d108      	bne.n	8004f1a <HAL_UART_Receive+0xf6>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d104      	bne.n	8004f1a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004f10:	2300      	movs	r3, #0
 8004f12:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	61bb      	str	r3, [r7, #24]
 8004f18:	e003      	b.n	8004f22 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004f22:	e037      	b.n	8004f94 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	2120      	movs	r1, #32
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 fdc8 	bl	8005ac4 <UART_WaitOnFlagUntilTimeout>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d005      	beq.n	8004f46 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e033      	b.n	8004fae <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10c      	bne.n	8004f66 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	8a7b      	ldrh	r3, [r7, #18]
 8004f56:	4013      	ands	r3, r2
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	3302      	adds	r3, #2
 8004f62:	61bb      	str	r3, [r7, #24]
 8004f64:	e00d      	b.n	8004f82 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	8a7b      	ldrh	r3, [r7, #18]
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	4013      	ands	r3, r2
 8004f76:	b2da      	uxtb	r2, r3
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1c1      	bne.n	8004f24 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	e000      	b.n	8004fae <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004fac:	2302      	movs	r3, #2
  }
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3720      	adds	r7, #32
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
	...

08004fb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b0ba      	sub	sp, #232	@ 0xe8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004fde:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004fe2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004fec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d115      	bne.n	8005020 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ff8:	f003 0320 	and.w	r3, r3, #32
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00f      	beq.n	8005020 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005004:	f003 0320 	and.w	r3, r3, #32
 8005008:	2b00      	cmp	r3, #0
 800500a:	d009      	beq.n	8005020 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 82ab 	beq.w	800556c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	4798      	blx	r3
      }
      return;
 800501e:	e2a5      	b.n	800556c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005020:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 8117 	beq.w	8005258 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800502a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d106      	bne.n	8005044 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005036:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800503a:	4b85      	ldr	r3, [pc, #532]	@ (8005250 <HAL_UART_IRQHandler+0x298>)
 800503c:	4013      	ands	r3, r2
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 810a 	beq.w	8005258 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b00      	cmp	r3, #0
 800504e:	d011      	beq.n	8005074 <HAL_UART_IRQHandler+0xbc>
 8005050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00b      	beq.n	8005074 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2201      	movs	r2, #1
 8005062:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800506a:	f043 0201 	orr.w	r2, r3, #1
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	2b00      	cmp	r3, #0
 800507e:	d011      	beq.n	80050a4 <HAL_UART_IRQHandler+0xec>
 8005080:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00b      	beq.n	80050a4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2202      	movs	r2, #2
 8005092:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800509a:	f043 0204 	orr.w	r2, r3, #4
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050a8:	f003 0304 	and.w	r3, r3, #4
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d011      	beq.n	80050d4 <HAL_UART_IRQHandler+0x11c>
 80050b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00b      	beq.n	80050d4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2204      	movs	r2, #4
 80050c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050ca:	f043 0202 	orr.w	r2, r3, #2
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80050d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050d8:	f003 0308 	and.w	r3, r3, #8
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d017      	beq.n	8005110 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80050e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050e4:	f003 0320 	and.w	r3, r3, #32
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d105      	bne.n	80050f8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80050ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050f0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00b      	beq.n	8005110 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2208      	movs	r2, #8
 80050fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005106:	f043 0208 	orr.w	r2, r3, #8
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005114:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005118:	2b00      	cmp	r3, #0
 800511a:	d012      	beq.n	8005142 <HAL_UART_IRQHandler+0x18a>
 800511c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005120:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00c      	beq.n	8005142 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005130:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005138:	f043 0220 	orr.w	r2, r3, #32
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 8211 	beq.w	8005570 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800514e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005152:	f003 0320 	and.w	r3, r3, #32
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00d      	beq.n	8005176 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800515a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800515e:	f003 0320 	and.w	r3, r3, #32
 8005162:	2b00      	cmp	r3, #0
 8005164:	d007      	beq.n	8005176 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800516a:	2b00      	cmp	r3, #0
 800516c:	d003      	beq.n	8005176 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800517c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800518a:	2b40      	cmp	r3, #64	@ 0x40
 800518c:	d005      	beq.n	800519a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800518e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005192:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005196:	2b00      	cmp	r3, #0
 8005198:	d04f      	beq.n	800523a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 fcf9 	bl	8005b92 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051aa:	2b40      	cmp	r3, #64	@ 0x40
 80051ac:	d141      	bne.n	8005232 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	3308      	adds	r3, #8
 80051b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80051bc:	e853 3f00 	ldrex	r3, [r3]
 80051c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80051c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80051c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	3308      	adds	r3, #8
 80051d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80051da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80051de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80051e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80051ea:	e841 2300 	strex	r3, r2, [r1]
 80051ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80051f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1d9      	bne.n	80051ae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d013      	beq.n	800522a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005206:	4a13      	ldr	r2, [pc, #76]	@ (8005254 <HAL_UART_IRQHandler+0x29c>)
 8005208:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800520e:	4618      	mov	r0, r3
 8005210:	f7fc fdf2 	bl	8001df8 <HAL_DMA_Abort_IT>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d017      	beq.n	800524a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800521e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005224:	4610      	mov	r0, r2
 8005226:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005228:	e00f      	b.n	800524a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f9b4 	bl	8005598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005230:	e00b      	b.n	800524a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f9b0 	bl	8005598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005238:	e007      	b.n	800524a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f9ac 	bl	8005598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005248:	e192      	b.n	8005570 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800524a:	bf00      	nop
    return;
 800524c:	e190      	b.n	8005570 <HAL_UART_IRQHandler+0x5b8>
 800524e:	bf00      	nop
 8005250:	04000120 	.word	0x04000120
 8005254:	08005c5b 	.word	0x08005c5b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800525c:	2b01      	cmp	r3, #1
 800525e:	f040 814b 	bne.w	80054f8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005266:	f003 0310 	and.w	r3, r3, #16
 800526a:	2b00      	cmp	r3, #0
 800526c:	f000 8144 	beq.w	80054f8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005274:	f003 0310 	and.w	r3, r3, #16
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 813d 	beq.w	80054f8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2210      	movs	r2, #16
 8005284:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005290:	2b40      	cmp	r3, #64	@ 0x40
 8005292:	f040 80b5 	bne.w	8005400 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 8164 	beq.w	8005574 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80052b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80052b6:	429a      	cmp	r2, r3
 80052b8:	f080 815c 	bcs.w	8005574 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80052c2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	2b20      	cmp	r3, #32
 80052ce:	f000 8086 	beq.w	80053de <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052da:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80052de:	e853 3f00 	ldrex	r3, [r3]
 80052e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80052e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80052ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052ee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	461a      	mov	r2, r3
 80052f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80052fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005300:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005304:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005308:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800530c:	e841 2300 	strex	r3, r2, [r1]
 8005310:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005314:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1da      	bne.n	80052d2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	3308      	adds	r3, #8
 8005322:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005324:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005326:	e853 3f00 	ldrex	r3, [r3]
 800532a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800532c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800532e:	f023 0301 	bic.w	r3, r3, #1
 8005332:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	3308      	adds	r3, #8
 800533c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005340:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005344:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005346:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005348:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800534c:	e841 2300 	strex	r3, r2, [r1]
 8005350:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005352:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1e1      	bne.n	800531c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3308      	adds	r3, #8
 800535e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005360:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005362:	e853 3f00 	ldrex	r3, [r3]
 8005366:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005368:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800536a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800536e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	3308      	adds	r3, #8
 8005378:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800537c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800537e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005380:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005382:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005384:	e841 2300 	strex	r3, r2, [r1]
 8005388:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800538a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1e3      	bne.n	8005358 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2220      	movs	r2, #32
 8005394:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053a6:	e853 3f00 	ldrex	r3, [r3]
 80053aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80053ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053ae:	f023 0310 	bic.w	r3, r3, #16
 80053b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	461a      	mov	r2, r3
 80053bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80053c2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80053c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80053c8:	e841 2300 	strex	r3, r2, [r1]
 80053cc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80053ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1e4      	bne.n	800539e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053d8:	4618      	mov	r0, r3
 80053da:	f7fc fcd4 	bl	8001d86 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2202      	movs	r2, #2
 80053e2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	4619      	mov	r1, r3
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f8d7 	bl	80055ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053fe:	e0b9      	b.n	8005574 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800540c:	b29b      	uxth	r3, r3
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800541a:	b29b      	uxth	r3, r3
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 80ab 	beq.w	8005578 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005422:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005426:	2b00      	cmp	r3, #0
 8005428:	f000 80a6 	beq.w	8005578 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005434:	e853 3f00 	ldrex	r3, [r3]
 8005438:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800543a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800543c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005440:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	461a      	mov	r2, r3
 800544a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800544e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005450:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005452:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005454:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005456:	e841 2300 	strex	r3, r2, [r1]
 800545a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800545c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1e4      	bne.n	800542c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	3308      	adds	r3, #8
 8005468:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546c:	e853 3f00 	ldrex	r3, [r3]
 8005470:	623b      	str	r3, [r7, #32]
   return(result);
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	f023 0301 	bic.w	r3, r3, #1
 8005478:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3308      	adds	r3, #8
 8005482:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005486:	633a      	str	r2, [r7, #48]	@ 0x30
 8005488:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800548c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800548e:	e841 2300 	strex	r3, r2, [r1]
 8005492:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1e3      	bne.n	8005462 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2220      	movs	r2, #32
 800549e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	e853 3f00 	ldrex	r3, [r3]
 80054ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f023 0310 	bic.w	r3, r3, #16
 80054c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	461a      	mov	r2, r3
 80054cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80054d0:	61fb      	str	r3, [r7, #28]
 80054d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d4:	69b9      	ldr	r1, [r7, #24]
 80054d6:	69fa      	ldr	r2, [r7, #28]
 80054d8:	e841 2300 	strex	r3, r2, [r1]
 80054dc:	617b      	str	r3, [r7, #20]
   return(result);
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1e4      	bne.n	80054ae <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80054ee:	4619      	mov	r1, r3
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 f85b 	bl	80055ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80054f6:	e03f      	b.n	8005578 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80054f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00e      	beq.n	8005522 <HAL_UART_IRQHandler+0x56a>
 8005504:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005508:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d008      	beq.n	8005522 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005518:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fbdd 	bl	8005cda <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005520:	e02d      	b.n	800557e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00e      	beq.n	800554c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800552e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005536:	2b00      	cmp	r3, #0
 8005538:	d008      	beq.n	800554c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800553e:	2b00      	cmp	r3, #0
 8005540:	d01c      	beq.n	800557c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	4798      	blx	r3
    }
    return;
 800554a:	e017      	b.n	800557c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800554c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005554:	2b00      	cmp	r3, #0
 8005556:	d012      	beq.n	800557e <HAL_UART_IRQHandler+0x5c6>
 8005558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800555c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00c      	beq.n	800557e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 fb8e 	bl	8005c86 <UART_EndTransmit_IT>
    return;
 800556a:	e008      	b.n	800557e <HAL_UART_IRQHandler+0x5c6>
      return;
 800556c:	bf00      	nop
 800556e:	e006      	b.n	800557e <HAL_UART_IRQHandler+0x5c6>
    return;
 8005570:	bf00      	nop
 8005572:	e004      	b.n	800557e <HAL_UART_IRQHandler+0x5c6>
      return;
 8005574:	bf00      	nop
 8005576:	e002      	b.n	800557e <HAL_UART_IRQHandler+0x5c6>
      return;
 8005578:	bf00      	nop
 800557a:	e000      	b.n	800557e <HAL_UART_IRQHandler+0x5c6>
    return;
 800557c:	bf00      	nop
  }

}
 800557e:	37e8      	adds	r7, #232	@ 0xe8
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	460b      	mov	r3, r1
 80055b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b088      	sub	sp, #32
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	431a      	orrs	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	4b8a      	ldr	r3, [pc, #552]	@ (8005818 <UART_SetConfig+0x254>)
 80055f0:	4013      	ands	r3, r2
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	6812      	ldr	r2, [r2, #0]
 80055f6:	6979      	ldr	r1, [r7, #20]
 80055f8:	430b      	orrs	r3, r1
 80055fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68da      	ldr	r2, [r3, #12]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	4313      	orrs	r3, r2
 8005620:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	430a      	orrs	r2, r1
 8005634:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a78      	ldr	r2, [pc, #480]	@ (800581c <UART_SetConfig+0x258>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d120      	bne.n	8005682 <UART_SetConfig+0xbe>
 8005640:	4b77      	ldr	r3, [pc, #476]	@ (8005820 <UART_SetConfig+0x25c>)
 8005642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005644:	f003 0303 	and.w	r3, r3, #3
 8005648:	2b03      	cmp	r3, #3
 800564a:	d817      	bhi.n	800567c <UART_SetConfig+0xb8>
 800564c:	a201      	add	r2, pc, #4	@ (adr r2, 8005654 <UART_SetConfig+0x90>)
 800564e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005652:	bf00      	nop
 8005654:	08005665 	.word	0x08005665
 8005658:	08005671 	.word	0x08005671
 800565c:	08005677 	.word	0x08005677
 8005660:	0800566b 	.word	0x0800566b
 8005664:	2300      	movs	r3, #0
 8005666:	77fb      	strb	r3, [r7, #31]
 8005668:	e01d      	b.n	80056a6 <UART_SetConfig+0xe2>
 800566a:	2302      	movs	r3, #2
 800566c:	77fb      	strb	r3, [r7, #31]
 800566e:	e01a      	b.n	80056a6 <UART_SetConfig+0xe2>
 8005670:	2304      	movs	r3, #4
 8005672:	77fb      	strb	r3, [r7, #31]
 8005674:	e017      	b.n	80056a6 <UART_SetConfig+0xe2>
 8005676:	2308      	movs	r3, #8
 8005678:	77fb      	strb	r3, [r7, #31]
 800567a:	e014      	b.n	80056a6 <UART_SetConfig+0xe2>
 800567c:	2310      	movs	r3, #16
 800567e:	77fb      	strb	r3, [r7, #31]
 8005680:	e011      	b.n	80056a6 <UART_SetConfig+0xe2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a67      	ldr	r2, [pc, #412]	@ (8005824 <UART_SetConfig+0x260>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d102      	bne.n	8005692 <UART_SetConfig+0xce>
 800568c:	2300      	movs	r3, #0
 800568e:	77fb      	strb	r3, [r7, #31]
 8005690:	e009      	b.n	80056a6 <UART_SetConfig+0xe2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a64      	ldr	r2, [pc, #400]	@ (8005828 <UART_SetConfig+0x264>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d102      	bne.n	80056a2 <UART_SetConfig+0xde>
 800569c:	2300      	movs	r3, #0
 800569e:	77fb      	strb	r3, [r7, #31]
 80056a0:	e001      	b.n	80056a6 <UART_SetConfig+0xe2>
 80056a2:	2310      	movs	r3, #16
 80056a4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056ae:	d15a      	bne.n	8005766 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80056b0:	7ffb      	ldrb	r3, [r7, #31]
 80056b2:	2b08      	cmp	r3, #8
 80056b4:	d827      	bhi.n	8005706 <UART_SetConfig+0x142>
 80056b6:	a201      	add	r2, pc, #4	@ (adr r2, 80056bc <UART_SetConfig+0xf8>)
 80056b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056bc:	080056e1 	.word	0x080056e1
 80056c0:	080056e9 	.word	0x080056e9
 80056c4:	080056f1 	.word	0x080056f1
 80056c8:	08005707 	.word	0x08005707
 80056cc:	080056f7 	.word	0x080056f7
 80056d0:	08005707 	.word	0x08005707
 80056d4:	08005707 	.word	0x08005707
 80056d8:	08005707 	.word	0x08005707
 80056dc:	080056ff 	.word	0x080056ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056e0:	f7fd ff9a 	bl	8003618 <HAL_RCC_GetPCLK1Freq>
 80056e4:	61b8      	str	r0, [r7, #24]
        break;
 80056e6:	e013      	b.n	8005710 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056e8:	f7fd ffb8 	bl	800365c <HAL_RCC_GetPCLK2Freq>
 80056ec:	61b8      	str	r0, [r7, #24]
        break;
 80056ee:	e00f      	b.n	8005710 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056f0:	4b4e      	ldr	r3, [pc, #312]	@ (800582c <UART_SetConfig+0x268>)
 80056f2:	61bb      	str	r3, [r7, #24]
        break;
 80056f4:	e00c      	b.n	8005710 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056f6:	f7fd ff19 	bl	800352c <HAL_RCC_GetSysClockFreq>
 80056fa:	61b8      	str	r0, [r7, #24]
        break;
 80056fc:	e008      	b.n	8005710 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005702:	61bb      	str	r3, [r7, #24]
        break;
 8005704:	e004      	b.n	8005710 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005706:	2300      	movs	r3, #0
 8005708:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	77bb      	strb	r3, [r7, #30]
        break;
 800570e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d074      	beq.n	8005800 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	005a      	lsls	r2, r3, #1
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	085b      	lsrs	r3, r3, #1
 8005720:	441a      	add	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	fbb2 f3f3 	udiv	r3, r2, r3
 800572a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	2b0f      	cmp	r3, #15
 8005730:	d916      	bls.n	8005760 <UART_SetConfig+0x19c>
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005738:	d212      	bcs.n	8005760 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	b29b      	uxth	r3, r3
 800573e:	f023 030f 	bic.w	r3, r3, #15
 8005742:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	085b      	lsrs	r3, r3, #1
 8005748:	b29b      	uxth	r3, r3
 800574a:	f003 0307 	and.w	r3, r3, #7
 800574e:	b29a      	uxth	r2, r3
 8005750:	89fb      	ldrh	r3, [r7, #14]
 8005752:	4313      	orrs	r3, r2
 8005754:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	89fa      	ldrh	r2, [r7, #14]
 800575c:	60da      	str	r2, [r3, #12]
 800575e:	e04f      	b.n	8005800 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	77bb      	strb	r3, [r7, #30]
 8005764:	e04c      	b.n	8005800 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005766:	7ffb      	ldrb	r3, [r7, #31]
 8005768:	2b08      	cmp	r3, #8
 800576a:	d828      	bhi.n	80057be <UART_SetConfig+0x1fa>
 800576c:	a201      	add	r2, pc, #4	@ (adr r2, 8005774 <UART_SetConfig+0x1b0>)
 800576e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005772:	bf00      	nop
 8005774:	08005799 	.word	0x08005799
 8005778:	080057a1 	.word	0x080057a1
 800577c:	080057a9 	.word	0x080057a9
 8005780:	080057bf 	.word	0x080057bf
 8005784:	080057af 	.word	0x080057af
 8005788:	080057bf 	.word	0x080057bf
 800578c:	080057bf 	.word	0x080057bf
 8005790:	080057bf 	.word	0x080057bf
 8005794:	080057b7 	.word	0x080057b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005798:	f7fd ff3e 	bl	8003618 <HAL_RCC_GetPCLK1Freq>
 800579c:	61b8      	str	r0, [r7, #24]
        break;
 800579e:	e013      	b.n	80057c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057a0:	f7fd ff5c 	bl	800365c <HAL_RCC_GetPCLK2Freq>
 80057a4:	61b8      	str	r0, [r7, #24]
        break;
 80057a6:	e00f      	b.n	80057c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057a8:	4b20      	ldr	r3, [pc, #128]	@ (800582c <UART_SetConfig+0x268>)
 80057aa:	61bb      	str	r3, [r7, #24]
        break;
 80057ac:	e00c      	b.n	80057c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057ae:	f7fd febd 	bl	800352c <HAL_RCC_GetSysClockFreq>
 80057b2:	61b8      	str	r0, [r7, #24]
        break;
 80057b4:	e008      	b.n	80057c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057ba:	61bb      	str	r3, [r7, #24]
        break;
 80057bc:	e004      	b.n	80057c8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	77bb      	strb	r3, [r7, #30]
        break;
 80057c6:	bf00      	nop
    }

    if (pclk != 0U)
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d018      	beq.n	8005800 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	085a      	lsrs	r2, r3, #1
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	441a      	add	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	2b0f      	cmp	r3, #15
 80057e6:	d909      	bls.n	80057fc <UART_SetConfig+0x238>
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057ee:	d205      	bcs.n	80057fc <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	60da      	str	r2, [r3, #12]
 80057fa:	e001      	b.n	8005800 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800580c:	7fbb      	ldrb	r3, [r7, #30]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3720      	adds	r7, #32
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	efff69f3 	.word	0xefff69f3
 800581c:	40013800 	.word	0x40013800
 8005820:	40021000 	.word	0x40021000
 8005824:	40004400 	.word	0x40004400
 8005828:	40004800 	.word	0x40004800
 800582c:	007a1200 	.word	0x007a1200

08005830 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00a      	beq.n	800585a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00a      	beq.n	800587c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	430a      	orrs	r2, r1
 800587a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005880:	f003 0304 	and.w	r3, r3, #4
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00a      	beq.n	800589e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a2:	f003 0308 	and.w	r3, r3, #8
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00a      	beq.n	80058c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c4:	f003 0310 	and.w	r3, r3, #16
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00a      	beq.n	80058e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e6:	f003 0320 	and.w	r3, r3, #32
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00a      	beq.n	8005904 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	430a      	orrs	r2, r1
 8005902:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800590c:	2b00      	cmp	r3, #0
 800590e:	d01a      	beq.n	8005946 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	430a      	orrs	r2, r1
 8005924:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800592e:	d10a      	bne.n	8005946 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00a      	beq.n	8005968 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	430a      	orrs	r2, r1
 8005966:	605a      	str	r2, [r3, #4]
  }
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b098      	sub	sp, #96	@ 0x60
 8005978:	af02      	add	r7, sp, #8
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005984:	f7fc f8be 	bl	8001b04 <HAL_GetTick>
 8005988:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0308 	and.w	r3, r3, #8
 8005994:	2b08      	cmp	r3, #8
 8005996:	d12e      	bne.n	80059f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005998:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059a0:	2200      	movs	r2, #0
 80059a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f88c 	bl	8005ac4 <UART_WaitOnFlagUntilTimeout>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d021      	beq.n	80059f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ba:	e853 3f00 	ldrex	r3, [r3]
 80059be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80059c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	461a      	mov	r2, r3
 80059ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80059d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80059d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059d8:	e841 2300 	strex	r3, r2, [r1]
 80059dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80059de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1e6      	bne.n	80059b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2220      	movs	r2, #32
 80059e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e062      	b.n	8005abc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d149      	bne.n	8005a98 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f856 	bl	8005ac4 <UART_WaitOnFlagUntilTimeout>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d03c      	beq.n	8005a98 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a26:	e853 3f00 	ldrex	r3, [r3]
 8005a2a:	623b      	str	r3, [r7, #32]
   return(result);
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	461a      	mov	r2, r3
 8005a3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a44:	e841 2300 	strex	r3, r2, [r1]
 8005a48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1e6      	bne.n	8005a1e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	3308      	adds	r3, #8
 8005a56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	e853 3f00 	ldrex	r3, [r3]
 8005a5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f023 0301 	bic.w	r3, r3, #1
 8005a66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	3308      	adds	r3, #8
 8005a6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a70:	61fa      	str	r2, [r7, #28]
 8005a72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a74:	69b9      	ldr	r1, [r7, #24]
 8005a76:	69fa      	ldr	r2, [r7, #28]
 8005a78:	e841 2300 	strex	r3, r2, [r1]
 8005a7c:	617b      	str	r3, [r7, #20]
   return(result);
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1e5      	bne.n	8005a50 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2220      	movs	r2, #32
 8005a88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e011      	b.n	8005abc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3758      	adds	r7, #88	@ 0x58
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	603b      	str	r3, [r7, #0]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ad4:	e049      	b.n	8005b6a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005adc:	d045      	beq.n	8005b6a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ade:	f7fc f811 	bl	8001b04 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d302      	bcc.n	8005af4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e048      	b.n	8005b8a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0304 	and.w	r3, r3, #4
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d031      	beq.n	8005b6a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	69db      	ldr	r3, [r3, #28]
 8005b0c:	f003 0308 	and.w	r3, r3, #8
 8005b10:	2b08      	cmp	r3, #8
 8005b12:	d110      	bne.n	8005b36 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2208      	movs	r2, #8
 8005b1a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 f838 	bl	8005b92 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2208      	movs	r2, #8
 8005b26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e029      	b.n	8005b8a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	69db      	ldr	r3, [r3, #28]
 8005b3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b44:	d111      	bne.n	8005b6a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f000 f81e 	bl	8005b92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e00f      	b.n	8005b8a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	69da      	ldr	r2, [r3, #28]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	4013      	ands	r3, r2
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	bf0c      	ite	eq
 8005b7a:	2301      	moveq	r3, #1
 8005b7c:	2300      	movne	r3, #0
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	461a      	mov	r2, r3
 8005b82:	79fb      	ldrb	r3, [r7, #7]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d0a6      	beq.n	8005ad6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b095      	sub	sp, #84	@ 0x54
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ba2:	e853 3f00 	ldrex	r3, [r3]
 8005ba6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005baa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005bbe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005bc0:	e841 2300 	strex	r3, r2, [r1]
 8005bc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1e6      	bne.n	8005b9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	3308      	adds	r3, #8
 8005bd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	e853 3f00 	ldrex	r3, [r3]
 8005bda:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	f023 0301 	bic.w	r3, r3, #1
 8005be2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	3308      	adds	r3, #8
 8005bea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005bee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bf4:	e841 2300 	strex	r3, r2, [r1]
 8005bf8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1e5      	bne.n	8005bcc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d118      	bne.n	8005c3a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	e853 3f00 	ldrex	r3, [r3]
 8005c14:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	f023 0310 	bic.w	r3, r3, #16
 8005c1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	461a      	mov	r2, r3
 8005c24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c26:	61bb      	str	r3, [r7, #24]
 8005c28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2a:	6979      	ldr	r1, [r7, #20]
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	e841 2300 	strex	r3, r2, [r1]
 8005c32:	613b      	str	r3, [r7, #16]
   return(result);
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1e6      	bne.n	8005c08 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005c4e:	bf00      	nop
 8005c50:	3754      	adds	r7, #84	@ 0x54
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b084      	sub	sp, #16
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f7ff fc8d 	bl	8005598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c7e:	bf00      	nop
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b088      	sub	sp, #32
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	e853 3f00 	ldrex	r3, [r3]
 8005c9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ca2:	61fb      	str	r3, [r7, #28]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	61bb      	str	r3, [r7, #24]
 8005cae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb0:	6979      	ldr	r1, [r7, #20]
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	e841 2300 	strex	r3, r2, [r1]
 8005cb8:	613b      	str	r3, [r7, #16]
   return(result);
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1e6      	bne.n	8005c8e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7ff fc59 	bl	8005584 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cd2:	bf00      	nop
 8005cd4:	3720      	adds	r7, #32
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b083      	sub	sp, #12
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
	...

08005cf0 <srand>:
 8005cf0:	b538      	push	{r3, r4, r5, lr}
 8005cf2:	4b10      	ldr	r3, [pc, #64]	@ (8005d34 <srand+0x44>)
 8005cf4:	681d      	ldr	r5, [r3, #0]
 8005cf6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005cf8:	4604      	mov	r4, r0
 8005cfa:	b9b3      	cbnz	r3, 8005d2a <srand+0x3a>
 8005cfc:	2018      	movs	r0, #24
 8005cfe:	f000 fa3d 	bl	800617c <malloc>
 8005d02:	4602      	mov	r2, r0
 8005d04:	6328      	str	r0, [r5, #48]	@ 0x30
 8005d06:	b920      	cbnz	r0, 8005d12 <srand+0x22>
 8005d08:	4b0b      	ldr	r3, [pc, #44]	@ (8005d38 <srand+0x48>)
 8005d0a:	480c      	ldr	r0, [pc, #48]	@ (8005d3c <srand+0x4c>)
 8005d0c:	2146      	movs	r1, #70	@ 0x46
 8005d0e:	f000 f9cd 	bl	80060ac <__assert_func>
 8005d12:	490b      	ldr	r1, [pc, #44]	@ (8005d40 <srand+0x50>)
 8005d14:	4b0b      	ldr	r3, [pc, #44]	@ (8005d44 <srand+0x54>)
 8005d16:	e9c0 1300 	strd	r1, r3, [r0]
 8005d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8005d48 <srand+0x58>)
 8005d1c:	6083      	str	r3, [r0, #8]
 8005d1e:	230b      	movs	r3, #11
 8005d20:	8183      	strh	r3, [r0, #12]
 8005d22:	2100      	movs	r1, #0
 8005d24:	2001      	movs	r0, #1
 8005d26:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005d2a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	611c      	str	r4, [r3, #16]
 8005d30:	615a      	str	r2, [r3, #20]
 8005d32:	bd38      	pop	{r3, r4, r5, pc}
 8005d34:	2000001c 	.word	0x2000001c
 8005d38:	08006d48 	.word	0x08006d48
 8005d3c:	08006d5f 	.word	0x08006d5f
 8005d40:	abcd330e 	.word	0xabcd330e
 8005d44:	e66d1234 	.word	0xe66d1234
 8005d48:	0005deec 	.word	0x0005deec

08005d4c <std>:
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	b510      	push	{r4, lr}
 8005d50:	4604      	mov	r4, r0
 8005d52:	e9c0 3300 	strd	r3, r3, [r0]
 8005d56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d5a:	6083      	str	r3, [r0, #8]
 8005d5c:	8181      	strh	r1, [r0, #12]
 8005d5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d60:	81c2      	strh	r2, [r0, #14]
 8005d62:	6183      	str	r3, [r0, #24]
 8005d64:	4619      	mov	r1, r3
 8005d66:	2208      	movs	r2, #8
 8005d68:	305c      	adds	r0, #92	@ 0x5c
 8005d6a:	f000 f8f4 	bl	8005f56 <memset>
 8005d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005da4 <std+0x58>)
 8005d70:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d72:	4b0d      	ldr	r3, [pc, #52]	@ (8005da8 <std+0x5c>)
 8005d74:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d76:	4b0d      	ldr	r3, [pc, #52]	@ (8005dac <std+0x60>)
 8005d78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8005db0 <std+0x64>)
 8005d7c:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005db4 <std+0x68>)
 8005d80:	6224      	str	r4, [r4, #32]
 8005d82:	429c      	cmp	r4, r3
 8005d84:	d006      	beq.n	8005d94 <std+0x48>
 8005d86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d8a:	4294      	cmp	r4, r2
 8005d8c:	d002      	beq.n	8005d94 <std+0x48>
 8005d8e:	33d0      	adds	r3, #208	@ 0xd0
 8005d90:	429c      	cmp	r4, r3
 8005d92:	d105      	bne.n	8005da0 <std+0x54>
 8005d94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d9c:	f000 b982 	b.w	80060a4 <__retarget_lock_init_recursive>
 8005da0:	bd10      	pop	{r4, pc}
 8005da2:	bf00      	nop
 8005da4:	08005ed1 	.word	0x08005ed1
 8005da8:	08005ef3 	.word	0x08005ef3
 8005dac:	08005f2b 	.word	0x08005f2b
 8005db0:	08005f4f 	.word	0x08005f4f
 8005db4:	200002d8 	.word	0x200002d8

08005db8 <stdio_exit_handler>:
 8005db8:	4a02      	ldr	r2, [pc, #8]	@ (8005dc4 <stdio_exit_handler+0xc>)
 8005dba:	4903      	ldr	r1, [pc, #12]	@ (8005dc8 <stdio_exit_handler+0x10>)
 8005dbc:	4803      	ldr	r0, [pc, #12]	@ (8005dcc <stdio_exit_handler+0x14>)
 8005dbe:	f000 b869 	b.w	8005e94 <_fwalk_sglue>
 8005dc2:	bf00      	nop
 8005dc4:	20000010 	.word	0x20000010
 8005dc8:	080063f1 	.word	0x080063f1
 8005dcc:	20000020 	.word	0x20000020

08005dd0 <cleanup_stdio>:
 8005dd0:	6841      	ldr	r1, [r0, #4]
 8005dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8005e04 <cleanup_stdio+0x34>)
 8005dd4:	4299      	cmp	r1, r3
 8005dd6:	b510      	push	{r4, lr}
 8005dd8:	4604      	mov	r4, r0
 8005dda:	d001      	beq.n	8005de0 <cleanup_stdio+0x10>
 8005ddc:	f000 fb08 	bl	80063f0 <_fflush_r>
 8005de0:	68a1      	ldr	r1, [r4, #8]
 8005de2:	4b09      	ldr	r3, [pc, #36]	@ (8005e08 <cleanup_stdio+0x38>)
 8005de4:	4299      	cmp	r1, r3
 8005de6:	d002      	beq.n	8005dee <cleanup_stdio+0x1e>
 8005de8:	4620      	mov	r0, r4
 8005dea:	f000 fb01 	bl	80063f0 <_fflush_r>
 8005dee:	68e1      	ldr	r1, [r4, #12]
 8005df0:	4b06      	ldr	r3, [pc, #24]	@ (8005e0c <cleanup_stdio+0x3c>)
 8005df2:	4299      	cmp	r1, r3
 8005df4:	d004      	beq.n	8005e00 <cleanup_stdio+0x30>
 8005df6:	4620      	mov	r0, r4
 8005df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dfc:	f000 baf8 	b.w	80063f0 <_fflush_r>
 8005e00:	bd10      	pop	{r4, pc}
 8005e02:	bf00      	nop
 8005e04:	200002d8 	.word	0x200002d8
 8005e08:	20000340 	.word	0x20000340
 8005e0c:	200003a8 	.word	0x200003a8

08005e10 <global_stdio_init.part.0>:
 8005e10:	b510      	push	{r4, lr}
 8005e12:	4b0b      	ldr	r3, [pc, #44]	@ (8005e40 <global_stdio_init.part.0+0x30>)
 8005e14:	4c0b      	ldr	r4, [pc, #44]	@ (8005e44 <global_stdio_init.part.0+0x34>)
 8005e16:	4a0c      	ldr	r2, [pc, #48]	@ (8005e48 <global_stdio_init.part.0+0x38>)
 8005e18:	601a      	str	r2, [r3, #0]
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	2104      	movs	r1, #4
 8005e20:	f7ff ff94 	bl	8005d4c <std>
 8005e24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005e28:	2201      	movs	r2, #1
 8005e2a:	2109      	movs	r1, #9
 8005e2c:	f7ff ff8e 	bl	8005d4c <std>
 8005e30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005e34:	2202      	movs	r2, #2
 8005e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e3a:	2112      	movs	r1, #18
 8005e3c:	f7ff bf86 	b.w	8005d4c <std>
 8005e40:	20000410 	.word	0x20000410
 8005e44:	200002d8 	.word	0x200002d8
 8005e48:	08005db9 	.word	0x08005db9

08005e4c <__sfp_lock_acquire>:
 8005e4c:	4801      	ldr	r0, [pc, #4]	@ (8005e54 <__sfp_lock_acquire+0x8>)
 8005e4e:	f000 b92a 	b.w	80060a6 <__retarget_lock_acquire_recursive>
 8005e52:	bf00      	nop
 8005e54:	20000419 	.word	0x20000419

08005e58 <__sfp_lock_release>:
 8005e58:	4801      	ldr	r0, [pc, #4]	@ (8005e60 <__sfp_lock_release+0x8>)
 8005e5a:	f000 b925 	b.w	80060a8 <__retarget_lock_release_recursive>
 8005e5e:	bf00      	nop
 8005e60:	20000419 	.word	0x20000419

08005e64 <__sinit>:
 8005e64:	b510      	push	{r4, lr}
 8005e66:	4604      	mov	r4, r0
 8005e68:	f7ff fff0 	bl	8005e4c <__sfp_lock_acquire>
 8005e6c:	6a23      	ldr	r3, [r4, #32]
 8005e6e:	b11b      	cbz	r3, 8005e78 <__sinit+0x14>
 8005e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e74:	f7ff bff0 	b.w	8005e58 <__sfp_lock_release>
 8005e78:	4b04      	ldr	r3, [pc, #16]	@ (8005e8c <__sinit+0x28>)
 8005e7a:	6223      	str	r3, [r4, #32]
 8005e7c:	4b04      	ldr	r3, [pc, #16]	@ (8005e90 <__sinit+0x2c>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1f5      	bne.n	8005e70 <__sinit+0xc>
 8005e84:	f7ff ffc4 	bl	8005e10 <global_stdio_init.part.0>
 8005e88:	e7f2      	b.n	8005e70 <__sinit+0xc>
 8005e8a:	bf00      	nop
 8005e8c:	08005dd1 	.word	0x08005dd1
 8005e90:	20000410 	.word	0x20000410

08005e94 <_fwalk_sglue>:
 8005e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e98:	4607      	mov	r7, r0
 8005e9a:	4688      	mov	r8, r1
 8005e9c:	4614      	mov	r4, r2
 8005e9e:	2600      	movs	r6, #0
 8005ea0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ea4:	f1b9 0901 	subs.w	r9, r9, #1
 8005ea8:	d505      	bpl.n	8005eb6 <_fwalk_sglue+0x22>
 8005eaa:	6824      	ldr	r4, [r4, #0]
 8005eac:	2c00      	cmp	r4, #0
 8005eae:	d1f7      	bne.n	8005ea0 <_fwalk_sglue+0xc>
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eb6:	89ab      	ldrh	r3, [r5, #12]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d907      	bls.n	8005ecc <_fwalk_sglue+0x38>
 8005ebc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	d003      	beq.n	8005ecc <_fwalk_sglue+0x38>
 8005ec4:	4629      	mov	r1, r5
 8005ec6:	4638      	mov	r0, r7
 8005ec8:	47c0      	blx	r8
 8005eca:	4306      	orrs	r6, r0
 8005ecc:	3568      	adds	r5, #104	@ 0x68
 8005ece:	e7e9      	b.n	8005ea4 <_fwalk_sglue+0x10>

08005ed0 <__sread>:
 8005ed0:	b510      	push	{r4, lr}
 8005ed2:	460c      	mov	r4, r1
 8005ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ed8:	f000 f896 	bl	8006008 <_read_r>
 8005edc:	2800      	cmp	r0, #0
 8005ede:	bfab      	itete	ge
 8005ee0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005ee2:	89a3      	ldrhlt	r3, [r4, #12]
 8005ee4:	181b      	addge	r3, r3, r0
 8005ee6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005eea:	bfac      	ite	ge
 8005eec:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005eee:	81a3      	strhlt	r3, [r4, #12]
 8005ef0:	bd10      	pop	{r4, pc}

08005ef2 <__swrite>:
 8005ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ef6:	461f      	mov	r7, r3
 8005ef8:	898b      	ldrh	r3, [r1, #12]
 8005efa:	05db      	lsls	r3, r3, #23
 8005efc:	4605      	mov	r5, r0
 8005efe:	460c      	mov	r4, r1
 8005f00:	4616      	mov	r6, r2
 8005f02:	d505      	bpl.n	8005f10 <__swrite+0x1e>
 8005f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f08:	2302      	movs	r3, #2
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f000 f86a 	bl	8005fe4 <_lseek_r>
 8005f10:	89a3      	ldrh	r3, [r4, #12]
 8005f12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f1a:	81a3      	strh	r3, [r4, #12]
 8005f1c:	4632      	mov	r2, r6
 8005f1e:	463b      	mov	r3, r7
 8005f20:	4628      	mov	r0, r5
 8005f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f26:	f000 b881 	b.w	800602c <_write_r>

08005f2a <__sseek>:
 8005f2a:	b510      	push	{r4, lr}
 8005f2c:	460c      	mov	r4, r1
 8005f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f32:	f000 f857 	bl	8005fe4 <_lseek_r>
 8005f36:	1c43      	adds	r3, r0, #1
 8005f38:	89a3      	ldrh	r3, [r4, #12]
 8005f3a:	bf15      	itete	ne
 8005f3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f46:	81a3      	strheq	r3, [r4, #12]
 8005f48:	bf18      	it	ne
 8005f4a:	81a3      	strhne	r3, [r4, #12]
 8005f4c:	bd10      	pop	{r4, pc}

08005f4e <__sclose>:
 8005f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f52:	f000 b825 	b.w	8005fa0 <_close_r>

08005f56 <memset>:
 8005f56:	4402      	add	r2, r0
 8005f58:	4603      	mov	r3, r0
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d100      	bne.n	8005f60 <memset+0xa>
 8005f5e:	4770      	bx	lr
 8005f60:	f803 1b01 	strb.w	r1, [r3], #1
 8005f64:	e7f9      	b.n	8005f5a <memset+0x4>
	...

08005f68 <time>:
 8005f68:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8005f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8005f9c <time+0x34>)
 8005f6c:	f04f 36ff 	mov.w	r6, #4294967295
 8005f70:	f04f 37ff 	mov.w	r7, #4294967295
 8005f74:	4669      	mov	r1, sp
 8005f76:	4604      	mov	r4, r0
 8005f78:	2200      	movs	r2, #0
 8005f7a:	6818      	ldr	r0, [r3, #0]
 8005f7c:	e9cd 6700 	strd	r6, r7, [sp]
 8005f80:	f000 f81e 	bl	8005fc0 <_gettimeofday_r>
 8005f84:	2800      	cmp	r0, #0
 8005f86:	bfb8      	it	lt
 8005f88:	e9cd 6700 	strdlt	r6, r7, [sp]
 8005f8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f90:	b10c      	cbz	r4, 8005f96 <time+0x2e>
 8005f92:	e9c4 0100 	strd	r0, r1, [r4]
 8005f96:	b004      	add	sp, #16
 8005f98:	bdd0      	pop	{r4, r6, r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	2000001c 	.word	0x2000001c

08005fa0 <_close_r>:
 8005fa0:	b538      	push	{r3, r4, r5, lr}
 8005fa2:	4d06      	ldr	r5, [pc, #24]	@ (8005fbc <_close_r+0x1c>)
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	4604      	mov	r4, r0
 8005fa8:	4608      	mov	r0, r1
 8005faa:	602b      	str	r3, [r5, #0]
 8005fac:	f7fb fcaa 	bl	8001904 <_close>
 8005fb0:	1c43      	adds	r3, r0, #1
 8005fb2:	d102      	bne.n	8005fba <_close_r+0x1a>
 8005fb4:	682b      	ldr	r3, [r5, #0]
 8005fb6:	b103      	cbz	r3, 8005fba <_close_r+0x1a>
 8005fb8:	6023      	str	r3, [r4, #0]
 8005fba:	bd38      	pop	{r3, r4, r5, pc}
 8005fbc:	20000414 	.word	0x20000414

08005fc0 <_gettimeofday_r>:
 8005fc0:	b538      	push	{r3, r4, r5, lr}
 8005fc2:	4d07      	ldr	r5, [pc, #28]	@ (8005fe0 <_gettimeofday_r+0x20>)
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	4604      	mov	r4, r0
 8005fc8:	4608      	mov	r0, r1
 8005fca:	4611      	mov	r1, r2
 8005fcc:	602b      	str	r3, [r5, #0]
 8005fce:	f000 fe8b 	bl	8006ce8 <_gettimeofday>
 8005fd2:	1c43      	adds	r3, r0, #1
 8005fd4:	d102      	bne.n	8005fdc <_gettimeofday_r+0x1c>
 8005fd6:	682b      	ldr	r3, [r5, #0]
 8005fd8:	b103      	cbz	r3, 8005fdc <_gettimeofday_r+0x1c>
 8005fda:	6023      	str	r3, [r4, #0]
 8005fdc:	bd38      	pop	{r3, r4, r5, pc}
 8005fde:	bf00      	nop
 8005fe0:	20000414 	.word	0x20000414

08005fe4 <_lseek_r>:
 8005fe4:	b538      	push	{r3, r4, r5, lr}
 8005fe6:	4d07      	ldr	r5, [pc, #28]	@ (8006004 <_lseek_r+0x20>)
 8005fe8:	4604      	mov	r4, r0
 8005fea:	4608      	mov	r0, r1
 8005fec:	4611      	mov	r1, r2
 8005fee:	2200      	movs	r2, #0
 8005ff0:	602a      	str	r2, [r5, #0]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	f7fb fcad 	bl	8001952 <_lseek>
 8005ff8:	1c43      	adds	r3, r0, #1
 8005ffa:	d102      	bne.n	8006002 <_lseek_r+0x1e>
 8005ffc:	682b      	ldr	r3, [r5, #0]
 8005ffe:	b103      	cbz	r3, 8006002 <_lseek_r+0x1e>
 8006000:	6023      	str	r3, [r4, #0]
 8006002:	bd38      	pop	{r3, r4, r5, pc}
 8006004:	20000414 	.word	0x20000414

08006008 <_read_r>:
 8006008:	b538      	push	{r3, r4, r5, lr}
 800600a:	4d07      	ldr	r5, [pc, #28]	@ (8006028 <_read_r+0x20>)
 800600c:	4604      	mov	r4, r0
 800600e:	4608      	mov	r0, r1
 8006010:	4611      	mov	r1, r2
 8006012:	2200      	movs	r2, #0
 8006014:	602a      	str	r2, [r5, #0]
 8006016:	461a      	mov	r2, r3
 8006018:	f7fb fc3b 	bl	8001892 <_read>
 800601c:	1c43      	adds	r3, r0, #1
 800601e:	d102      	bne.n	8006026 <_read_r+0x1e>
 8006020:	682b      	ldr	r3, [r5, #0]
 8006022:	b103      	cbz	r3, 8006026 <_read_r+0x1e>
 8006024:	6023      	str	r3, [r4, #0]
 8006026:	bd38      	pop	{r3, r4, r5, pc}
 8006028:	20000414 	.word	0x20000414

0800602c <_write_r>:
 800602c:	b538      	push	{r3, r4, r5, lr}
 800602e:	4d07      	ldr	r5, [pc, #28]	@ (800604c <_write_r+0x20>)
 8006030:	4604      	mov	r4, r0
 8006032:	4608      	mov	r0, r1
 8006034:	4611      	mov	r1, r2
 8006036:	2200      	movs	r2, #0
 8006038:	602a      	str	r2, [r5, #0]
 800603a:	461a      	mov	r2, r3
 800603c:	f7fb fc46 	bl	80018cc <_write>
 8006040:	1c43      	adds	r3, r0, #1
 8006042:	d102      	bne.n	800604a <_write_r+0x1e>
 8006044:	682b      	ldr	r3, [r5, #0]
 8006046:	b103      	cbz	r3, 800604a <_write_r+0x1e>
 8006048:	6023      	str	r3, [r4, #0]
 800604a:	bd38      	pop	{r3, r4, r5, pc}
 800604c:	20000414 	.word	0x20000414

08006050 <__errno>:
 8006050:	4b01      	ldr	r3, [pc, #4]	@ (8006058 <__errno+0x8>)
 8006052:	6818      	ldr	r0, [r3, #0]
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	2000001c 	.word	0x2000001c

0800605c <__libc_init_array>:
 800605c:	b570      	push	{r4, r5, r6, lr}
 800605e:	4d0d      	ldr	r5, [pc, #52]	@ (8006094 <__libc_init_array+0x38>)
 8006060:	4c0d      	ldr	r4, [pc, #52]	@ (8006098 <__libc_init_array+0x3c>)
 8006062:	1b64      	subs	r4, r4, r5
 8006064:	10a4      	asrs	r4, r4, #2
 8006066:	2600      	movs	r6, #0
 8006068:	42a6      	cmp	r6, r4
 800606a:	d109      	bne.n	8006080 <__libc_init_array+0x24>
 800606c:	4d0b      	ldr	r5, [pc, #44]	@ (800609c <__libc_init_array+0x40>)
 800606e:	4c0c      	ldr	r4, [pc, #48]	@ (80060a0 <__libc_init_array+0x44>)
 8006070:	f000 fe42 	bl	8006cf8 <_init>
 8006074:	1b64      	subs	r4, r4, r5
 8006076:	10a4      	asrs	r4, r4, #2
 8006078:	2600      	movs	r6, #0
 800607a:	42a6      	cmp	r6, r4
 800607c:	d105      	bne.n	800608a <__libc_init_array+0x2e>
 800607e:	bd70      	pop	{r4, r5, r6, pc}
 8006080:	f855 3b04 	ldr.w	r3, [r5], #4
 8006084:	4798      	blx	r3
 8006086:	3601      	adds	r6, #1
 8006088:	e7ee      	b.n	8006068 <__libc_init_array+0xc>
 800608a:	f855 3b04 	ldr.w	r3, [r5], #4
 800608e:	4798      	blx	r3
 8006090:	3601      	adds	r6, #1
 8006092:	e7f2      	b.n	800607a <__libc_init_array+0x1e>
 8006094:	08006e30 	.word	0x08006e30
 8006098:	08006e30 	.word	0x08006e30
 800609c:	08006e30 	.word	0x08006e30
 80060a0:	08006e34 	.word	0x08006e34

080060a4 <__retarget_lock_init_recursive>:
 80060a4:	4770      	bx	lr

080060a6 <__retarget_lock_acquire_recursive>:
 80060a6:	4770      	bx	lr

080060a8 <__retarget_lock_release_recursive>:
 80060a8:	4770      	bx	lr
	...

080060ac <__assert_func>:
 80060ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80060ae:	4614      	mov	r4, r2
 80060b0:	461a      	mov	r2, r3
 80060b2:	4b09      	ldr	r3, [pc, #36]	@ (80060d8 <__assert_func+0x2c>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4605      	mov	r5, r0
 80060b8:	68d8      	ldr	r0, [r3, #12]
 80060ba:	b954      	cbnz	r4, 80060d2 <__assert_func+0x26>
 80060bc:	4b07      	ldr	r3, [pc, #28]	@ (80060dc <__assert_func+0x30>)
 80060be:	461c      	mov	r4, r3
 80060c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80060c4:	9100      	str	r1, [sp, #0]
 80060c6:	462b      	mov	r3, r5
 80060c8:	4905      	ldr	r1, [pc, #20]	@ (80060e0 <__assert_func+0x34>)
 80060ca:	f000 f9b9 	bl	8006440 <fiprintf>
 80060ce:	f000 f9d9 	bl	8006484 <abort>
 80060d2:	4b04      	ldr	r3, [pc, #16]	@ (80060e4 <__assert_func+0x38>)
 80060d4:	e7f4      	b.n	80060c0 <__assert_func+0x14>
 80060d6:	bf00      	nop
 80060d8:	2000001c 	.word	0x2000001c
 80060dc:	08006df2 	.word	0x08006df2
 80060e0:	08006dc4 	.word	0x08006dc4
 80060e4:	08006db7 	.word	0x08006db7

080060e8 <_free_r>:
 80060e8:	b538      	push	{r3, r4, r5, lr}
 80060ea:	4605      	mov	r5, r0
 80060ec:	2900      	cmp	r1, #0
 80060ee:	d041      	beq.n	8006174 <_free_r+0x8c>
 80060f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060f4:	1f0c      	subs	r4, r1, #4
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	bfb8      	it	lt
 80060fa:	18e4      	addlt	r4, r4, r3
 80060fc:	f000 f8e8 	bl	80062d0 <__malloc_lock>
 8006100:	4a1d      	ldr	r2, [pc, #116]	@ (8006178 <_free_r+0x90>)
 8006102:	6813      	ldr	r3, [r2, #0]
 8006104:	b933      	cbnz	r3, 8006114 <_free_r+0x2c>
 8006106:	6063      	str	r3, [r4, #4]
 8006108:	6014      	str	r4, [r2, #0]
 800610a:	4628      	mov	r0, r5
 800610c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006110:	f000 b8e4 	b.w	80062dc <__malloc_unlock>
 8006114:	42a3      	cmp	r3, r4
 8006116:	d908      	bls.n	800612a <_free_r+0x42>
 8006118:	6820      	ldr	r0, [r4, #0]
 800611a:	1821      	adds	r1, r4, r0
 800611c:	428b      	cmp	r3, r1
 800611e:	bf01      	itttt	eq
 8006120:	6819      	ldreq	r1, [r3, #0]
 8006122:	685b      	ldreq	r3, [r3, #4]
 8006124:	1809      	addeq	r1, r1, r0
 8006126:	6021      	streq	r1, [r4, #0]
 8006128:	e7ed      	b.n	8006106 <_free_r+0x1e>
 800612a:	461a      	mov	r2, r3
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	b10b      	cbz	r3, 8006134 <_free_r+0x4c>
 8006130:	42a3      	cmp	r3, r4
 8006132:	d9fa      	bls.n	800612a <_free_r+0x42>
 8006134:	6811      	ldr	r1, [r2, #0]
 8006136:	1850      	adds	r0, r2, r1
 8006138:	42a0      	cmp	r0, r4
 800613a:	d10b      	bne.n	8006154 <_free_r+0x6c>
 800613c:	6820      	ldr	r0, [r4, #0]
 800613e:	4401      	add	r1, r0
 8006140:	1850      	adds	r0, r2, r1
 8006142:	4283      	cmp	r3, r0
 8006144:	6011      	str	r1, [r2, #0]
 8006146:	d1e0      	bne.n	800610a <_free_r+0x22>
 8006148:	6818      	ldr	r0, [r3, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	6053      	str	r3, [r2, #4]
 800614e:	4408      	add	r0, r1
 8006150:	6010      	str	r0, [r2, #0]
 8006152:	e7da      	b.n	800610a <_free_r+0x22>
 8006154:	d902      	bls.n	800615c <_free_r+0x74>
 8006156:	230c      	movs	r3, #12
 8006158:	602b      	str	r3, [r5, #0]
 800615a:	e7d6      	b.n	800610a <_free_r+0x22>
 800615c:	6820      	ldr	r0, [r4, #0]
 800615e:	1821      	adds	r1, r4, r0
 8006160:	428b      	cmp	r3, r1
 8006162:	bf04      	itt	eq
 8006164:	6819      	ldreq	r1, [r3, #0]
 8006166:	685b      	ldreq	r3, [r3, #4]
 8006168:	6063      	str	r3, [r4, #4]
 800616a:	bf04      	itt	eq
 800616c:	1809      	addeq	r1, r1, r0
 800616e:	6021      	streq	r1, [r4, #0]
 8006170:	6054      	str	r4, [r2, #4]
 8006172:	e7ca      	b.n	800610a <_free_r+0x22>
 8006174:	bd38      	pop	{r3, r4, r5, pc}
 8006176:	bf00      	nop
 8006178:	20000420 	.word	0x20000420

0800617c <malloc>:
 800617c:	4b02      	ldr	r3, [pc, #8]	@ (8006188 <malloc+0xc>)
 800617e:	4601      	mov	r1, r0
 8006180:	6818      	ldr	r0, [r3, #0]
 8006182:	f000 b825 	b.w	80061d0 <_malloc_r>
 8006186:	bf00      	nop
 8006188:	2000001c 	.word	0x2000001c

0800618c <sbrk_aligned>:
 800618c:	b570      	push	{r4, r5, r6, lr}
 800618e:	4e0f      	ldr	r6, [pc, #60]	@ (80061cc <sbrk_aligned+0x40>)
 8006190:	460c      	mov	r4, r1
 8006192:	6831      	ldr	r1, [r6, #0]
 8006194:	4605      	mov	r5, r0
 8006196:	b911      	cbnz	r1, 800619e <sbrk_aligned+0x12>
 8006198:	f000 f964 	bl	8006464 <_sbrk_r>
 800619c:	6030      	str	r0, [r6, #0]
 800619e:	4621      	mov	r1, r4
 80061a0:	4628      	mov	r0, r5
 80061a2:	f000 f95f 	bl	8006464 <_sbrk_r>
 80061a6:	1c43      	adds	r3, r0, #1
 80061a8:	d103      	bne.n	80061b2 <sbrk_aligned+0x26>
 80061aa:	f04f 34ff 	mov.w	r4, #4294967295
 80061ae:	4620      	mov	r0, r4
 80061b0:	bd70      	pop	{r4, r5, r6, pc}
 80061b2:	1cc4      	adds	r4, r0, #3
 80061b4:	f024 0403 	bic.w	r4, r4, #3
 80061b8:	42a0      	cmp	r0, r4
 80061ba:	d0f8      	beq.n	80061ae <sbrk_aligned+0x22>
 80061bc:	1a21      	subs	r1, r4, r0
 80061be:	4628      	mov	r0, r5
 80061c0:	f000 f950 	bl	8006464 <_sbrk_r>
 80061c4:	3001      	adds	r0, #1
 80061c6:	d1f2      	bne.n	80061ae <sbrk_aligned+0x22>
 80061c8:	e7ef      	b.n	80061aa <sbrk_aligned+0x1e>
 80061ca:	bf00      	nop
 80061cc:	2000041c 	.word	0x2000041c

080061d0 <_malloc_r>:
 80061d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061d4:	1ccd      	adds	r5, r1, #3
 80061d6:	f025 0503 	bic.w	r5, r5, #3
 80061da:	3508      	adds	r5, #8
 80061dc:	2d0c      	cmp	r5, #12
 80061de:	bf38      	it	cc
 80061e0:	250c      	movcc	r5, #12
 80061e2:	2d00      	cmp	r5, #0
 80061e4:	4606      	mov	r6, r0
 80061e6:	db01      	blt.n	80061ec <_malloc_r+0x1c>
 80061e8:	42a9      	cmp	r1, r5
 80061ea:	d904      	bls.n	80061f6 <_malloc_r+0x26>
 80061ec:	230c      	movs	r3, #12
 80061ee:	6033      	str	r3, [r6, #0]
 80061f0:	2000      	movs	r0, #0
 80061f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80062cc <_malloc_r+0xfc>
 80061fa:	f000 f869 	bl	80062d0 <__malloc_lock>
 80061fe:	f8d8 3000 	ldr.w	r3, [r8]
 8006202:	461c      	mov	r4, r3
 8006204:	bb44      	cbnz	r4, 8006258 <_malloc_r+0x88>
 8006206:	4629      	mov	r1, r5
 8006208:	4630      	mov	r0, r6
 800620a:	f7ff ffbf 	bl	800618c <sbrk_aligned>
 800620e:	1c43      	adds	r3, r0, #1
 8006210:	4604      	mov	r4, r0
 8006212:	d158      	bne.n	80062c6 <_malloc_r+0xf6>
 8006214:	f8d8 4000 	ldr.w	r4, [r8]
 8006218:	4627      	mov	r7, r4
 800621a:	2f00      	cmp	r7, #0
 800621c:	d143      	bne.n	80062a6 <_malloc_r+0xd6>
 800621e:	2c00      	cmp	r4, #0
 8006220:	d04b      	beq.n	80062ba <_malloc_r+0xea>
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	4639      	mov	r1, r7
 8006226:	4630      	mov	r0, r6
 8006228:	eb04 0903 	add.w	r9, r4, r3
 800622c:	f000 f91a 	bl	8006464 <_sbrk_r>
 8006230:	4581      	cmp	r9, r0
 8006232:	d142      	bne.n	80062ba <_malloc_r+0xea>
 8006234:	6821      	ldr	r1, [r4, #0]
 8006236:	1a6d      	subs	r5, r5, r1
 8006238:	4629      	mov	r1, r5
 800623a:	4630      	mov	r0, r6
 800623c:	f7ff ffa6 	bl	800618c <sbrk_aligned>
 8006240:	3001      	adds	r0, #1
 8006242:	d03a      	beq.n	80062ba <_malloc_r+0xea>
 8006244:	6823      	ldr	r3, [r4, #0]
 8006246:	442b      	add	r3, r5
 8006248:	6023      	str	r3, [r4, #0]
 800624a:	f8d8 3000 	ldr.w	r3, [r8]
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	bb62      	cbnz	r2, 80062ac <_malloc_r+0xdc>
 8006252:	f8c8 7000 	str.w	r7, [r8]
 8006256:	e00f      	b.n	8006278 <_malloc_r+0xa8>
 8006258:	6822      	ldr	r2, [r4, #0]
 800625a:	1b52      	subs	r2, r2, r5
 800625c:	d420      	bmi.n	80062a0 <_malloc_r+0xd0>
 800625e:	2a0b      	cmp	r2, #11
 8006260:	d917      	bls.n	8006292 <_malloc_r+0xc2>
 8006262:	1961      	adds	r1, r4, r5
 8006264:	42a3      	cmp	r3, r4
 8006266:	6025      	str	r5, [r4, #0]
 8006268:	bf18      	it	ne
 800626a:	6059      	strne	r1, [r3, #4]
 800626c:	6863      	ldr	r3, [r4, #4]
 800626e:	bf08      	it	eq
 8006270:	f8c8 1000 	streq.w	r1, [r8]
 8006274:	5162      	str	r2, [r4, r5]
 8006276:	604b      	str	r3, [r1, #4]
 8006278:	4630      	mov	r0, r6
 800627a:	f000 f82f 	bl	80062dc <__malloc_unlock>
 800627e:	f104 000b 	add.w	r0, r4, #11
 8006282:	1d23      	adds	r3, r4, #4
 8006284:	f020 0007 	bic.w	r0, r0, #7
 8006288:	1ac2      	subs	r2, r0, r3
 800628a:	bf1c      	itt	ne
 800628c:	1a1b      	subne	r3, r3, r0
 800628e:	50a3      	strne	r3, [r4, r2]
 8006290:	e7af      	b.n	80061f2 <_malloc_r+0x22>
 8006292:	6862      	ldr	r2, [r4, #4]
 8006294:	42a3      	cmp	r3, r4
 8006296:	bf0c      	ite	eq
 8006298:	f8c8 2000 	streq.w	r2, [r8]
 800629c:	605a      	strne	r2, [r3, #4]
 800629e:	e7eb      	b.n	8006278 <_malloc_r+0xa8>
 80062a0:	4623      	mov	r3, r4
 80062a2:	6864      	ldr	r4, [r4, #4]
 80062a4:	e7ae      	b.n	8006204 <_malloc_r+0x34>
 80062a6:	463c      	mov	r4, r7
 80062a8:	687f      	ldr	r7, [r7, #4]
 80062aa:	e7b6      	b.n	800621a <_malloc_r+0x4a>
 80062ac:	461a      	mov	r2, r3
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	42a3      	cmp	r3, r4
 80062b2:	d1fb      	bne.n	80062ac <_malloc_r+0xdc>
 80062b4:	2300      	movs	r3, #0
 80062b6:	6053      	str	r3, [r2, #4]
 80062b8:	e7de      	b.n	8006278 <_malloc_r+0xa8>
 80062ba:	230c      	movs	r3, #12
 80062bc:	6033      	str	r3, [r6, #0]
 80062be:	4630      	mov	r0, r6
 80062c0:	f000 f80c 	bl	80062dc <__malloc_unlock>
 80062c4:	e794      	b.n	80061f0 <_malloc_r+0x20>
 80062c6:	6005      	str	r5, [r0, #0]
 80062c8:	e7d6      	b.n	8006278 <_malloc_r+0xa8>
 80062ca:	bf00      	nop
 80062cc:	20000420 	.word	0x20000420

080062d0 <__malloc_lock>:
 80062d0:	4801      	ldr	r0, [pc, #4]	@ (80062d8 <__malloc_lock+0x8>)
 80062d2:	f7ff bee8 	b.w	80060a6 <__retarget_lock_acquire_recursive>
 80062d6:	bf00      	nop
 80062d8:	20000418 	.word	0x20000418

080062dc <__malloc_unlock>:
 80062dc:	4801      	ldr	r0, [pc, #4]	@ (80062e4 <__malloc_unlock+0x8>)
 80062de:	f7ff bee3 	b.w	80060a8 <__retarget_lock_release_recursive>
 80062e2:	bf00      	nop
 80062e4:	20000418 	.word	0x20000418

080062e8 <__sflush_r>:
 80062e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062f0:	0716      	lsls	r6, r2, #28
 80062f2:	4605      	mov	r5, r0
 80062f4:	460c      	mov	r4, r1
 80062f6:	d454      	bmi.n	80063a2 <__sflush_r+0xba>
 80062f8:	684b      	ldr	r3, [r1, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	dc02      	bgt.n	8006304 <__sflush_r+0x1c>
 80062fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006300:	2b00      	cmp	r3, #0
 8006302:	dd48      	ble.n	8006396 <__sflush_r+0xae>
 8006304:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006306:	2e00      	cmp	r6, #0
 8006308:	d045      	beq.n	8006396 <__sflush_r+0xae>
 800630a:	2300      	movs	r3, #0
 800630c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006310:	682f      	ldr	r7, [r5, #0]
 8006312:	6a21      	ldr	r1, [r4, #32]
 8006314:	602b      	str	r3, [r5, #0]
 8006316:	d030      	beq.n	800637a <__sflush_r+0x92>
 8006318:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800631a:	89a3      	ldrh	r3, [r4, #12]
 800631c:	0759      	lsls	r1, r3, #29
 800631e:	d505      	bpl.n	800632c <__sflush_r+0x44>
 8006320:	6863      	ldr	r3, [r4, #4]
 8006322:	1ad2      	subs	r2, r2, r3
 8006324:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006326:	b10b      	cbz	r3, 800632c <__sflush_r+0x44>
 8006328:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800632a:	1ad2      	subs	r2, r2, r3
 800632c:	2300      	movs	r3, #0
 800632e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006330:	6a21      	ldr	r1, [r4, #32]
 8006332:	4628      	mov	r0, r5
 8006334:	47b0      	blx	r6
 8006336:	1c43      	adds	r3, r0, #1
 8006338:	89a3      	ldrh	r3, [r4, #12]
 800633a:	d106      	bne.n	800634a <__sflush_r+0x62>
 800633c:	6829      	ldr	r1, [r5, #0]
 800633e:	291d      	cmp	r1, #29
 8006340:	d82b      	bhi.n	800639a <__sflush_r+0xb2>
 8006342:	4a2a      	ldr	r2, [pc, #168]	@ (80063ec <__sflush_r+0x104>)
 8006344:	410a      	asrs	r2, r1
 8006346:	07d6      	lsls	r6, r2, #31
 8006348:	d427      	bmi.n	800639a <__sflush_r+0xb2>
 800634a:	2200      	movs	r2, #0
 800634c:	6062      	str	r2, [r4, #4]
 800634e:	04d9      	lsls	r1, r3, #19
 8006350:	6922      	ldr	r2, [r4, #16]
 8006352:	6022      	str	r2, [r4, #0]
 8006354:	d504      	bpl.n	8006360 <__sflush_r+0x78>
 8006356:	1c42      	adds	r2, r0, #1
 8006358:	d101      	bne.n	800635e <__sflush_r+0x76>
 800635a:	682b      	ldr	r3, [r5, #0]
 800635c:	b903      	cbnz	r3, 8006360 <__sflush_r+0x78>
 800635e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006360:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006362:	602f      	str	r7, [r5, #0]
 8006364:	b1b9      	cbz	r1, 8006396 <__sflush_r+0xae>
 8006366:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800636a:	4299      	cmp	r1, r3
 800636c:	d002      	beq.n	8006374 <__sflush_r+0x8c>
 800636e:	4628      	mov	r0, r5
 8006370:	f7ff feba 	bl	80060e8 <_free_r>
 8006374:	2300      	movs	r3, #0
 8006376:	6363      	str	r3, [r4, #52]	@ 0x34
 8006378:	e00d      	b.n	8006396 <__sflush_r+0xae>
 800637a:	2301      	movs	r3, #1
 800637c:	4628      	mov	r0, r5
 800637e:	47b0      	blx	r6
 8006380:	4602      	mov	r2, r0
 8006382:	1c50      	adds	r0, r2, #1
 8006384:	d1c9      	bne.n	800631a <__sflush_r+0x32>
 8006386:	682b      	ldr	r3, [r5, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d0c6      	beq.n	800631a <__sflush_r+0x32>
 800638c:	2b1d      	cmp	r3, #29
 800638e:	d001      	beq.n	8006394 <__sflush_r+0xac>
 8006390:	2b16      	cmp	r3, #22
 8006392:	d11e      	bne.n	80063d2 <__sflush_r+0xea>
 8006394:	602f      	str	r7, [r5, #0]
 8006396:	2000      	movs	r0, #0
 8006398:	e022      	b.n	80063e0 <__sflush_r+0xf8>
 800639a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800639e:	b21b      	sxth	r3, r3
 80063a0:	e01b      	b.n	80063da <__sflush_r+0xf2>
 80063a2:	690f      	ldr	r7, [r1, #16]
 80063a4:	2f00      	cmp	r7, #0
 80063a6:	d0f6      	beq.n	8006396 <__sflush_r+0xae>
 80063a8:	0793      	lsls	r3, r2, #30
 80063aa:	680e      	ldr	r6, [r1, #0]
 80063ac:	bf08      	it	eq
 80063ae:	694b      	ldreq	r3, [r1, #20]
 80063b0:	600f      	str	r7, [r1, #0]
 80063b2:	bf18      	it	ne
 80063b4:	2300      	movne	r3, #0
 80063b6:	eba6 0807 	sub.w	r8, r6, r7
 80063ba:	608b      	str	r3, [r1, #8]
 80063bc:	f1b8 0f00 	cmp.w	r8, #0
 80063c0:	dde9      	ble.n	8006396 <__sflush_r+0xae>
 80063c2:	6a21      	ldr	r1, [r4, #32]
 80063c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80063c6:	4643      	mov	r3, r8
 80063c8:	463a      	mov	r2, r7
 80063ca:	4628      	mov	r0, r5
 80063cc:	47b0      	blx	r6
 80063ce:	2800      	cmp	r0, #0
 80063d0:	dc08      	bgt.n	80063e4 <__sflush_r+0xfc>
 80063d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063da:	81a3      	strh	r3, [r4, #12]
 80063dc:	f04f 30ff 	mov.w	r0, #4294967295
 80063e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063e4:	4407      	add	r7, r0
 80063e6:	eba8 0800 	sub.w	r8, r8, r0
 80063ea:	e7e7      	b.n	80063bc <__sflush_r+0xd4>
 80063ec:	dfbffffe 	.word	0xdfbffffe

080063f0 <_fflush_r>:
 80063f0:	b538      	push	{r3, r4, r5, lr}
 80063f2:	690b      	ldr	r3, [r1, #16]
 80063f4:	4605      	mov	r5, r0
 80063f6:	460c      	mov	r4, r1
 80063f8:	b913      	cbnz	r3, 8006400 <_fflush_r+0x10>
 80063fa:	2500      	movs	r5, #0
 80063fc:	4628      	mov	r0, r5
 80063fe:	bd38      	pop	{r3, r4, r5, pc}
 8006400:	b118      	cbz	r0, 800640a <_fflush_r+0x1a>
 8006402:	6a03      	ldr	r3, [r0, #32]
 8006404:	b90b      	cbnz	r3, 800640a <_fflush_r+0x1a>
 8006406:	f7ff fd2d 	bl	8005e64 <__sinit>
 800640a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0f3      	beq.n	80063fa <_fflush_r+0xa>
 8006412:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006414:	07d0      	lsls	r0, r2, #31
 8006416:	d404      	bmi.n	8006422 <_fflush_r+0x32>
 8006418:	0599      	lsls	r1, r3, #22
 800641a:	d402      	bmi.n	8006422 <_fflush_r+0x32>
 800641c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800641e:	f7ff fe42 	bl	80060a6 <__retarget_lock_acquire_recursive>
 8006422:	4628      	mov	r0, r5
 8006424:	4621      	mov	r1, r4
 8006426:	f7ff ff5f 	bl	80062e8 <__sflush_r>
 800642a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800642c:	07da      	lsls	r2, r3, #31
 800642e:	4605      	mov	r5, r0
 8006430:	d4e4      	bmi.n	80063fc <_fflush_r+0xc>
 8006432:	89a3      	ldrh	r3, [r4, #12]
 8006434:	059b      	lsls	r3, r3, #22
 8006436:	d4e1      	bmi.n	80063fc <_fflush_r+0xc>
 8006438:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800643a:	f7ff fe35 	bl	80060a8 <__retarget_lock_release_recursive>
 800643e:	e7dd      	b.n	80063fc <_fflush_r+0xc>

08006440 <fiprintf>:
 8006440:	b40e      	push	{r1, r2, r3}
 8006442:	b503      	push	{r0, r1, lr}
 8006444:	4601      	mov	r1, r0
 8006446:	ab03      	add	r3, sp, #12
 8006448:	4805      	ldr	r0, [pc, #20]	@ (8006460 <fiprintf+0x20>)
 800644a:	f853 2b04 	ldr.w	r2, [r3], #4
 800644e:	6800      	ldr	r0, [r0, #0]
 8006450:	9301      	str	r3, [sp, #4]
 8006452:	f000 f847 	bl	80064e4 <_vfiprintf_r>
 8006456:	b002      	add	sp, #8
 8006458:	f85d eb04 	ldr.w	lr, [sp], #4
 800645c:	b003      	add	sp, #12
 800645e:	4770      	bx	lr
 8006460:	2000001c 	.word	0x2000001c

08006464 <_sbrk_r>:
 8006464:	b538      	push	{r3, r4, r5, lr}
 8006466:	4d06      	ldr	r5, [pc, #24]	@ (8006480 <_sbrk_r+0x1c>)
 8006468:	2300      	movs	r3, #0
 800646a:	4604      	mov	r4, r0
 800646c:	4608      	mov	r0, r1
 800646e:	602b      	str	r3, [r5, #0]
 8006470:	f7fb fa7c 	bl	800196c <_sbrk>
 8006474:	1c43      	adds	r3, r0, #1
 8006476:	d102      	bne.n	800647e <_sbrk_r+0x1a>
 8006478:	682b      	ldr	r3, [r5, #0]
 800647a:	b103      	cbz	r3, 800647e <_sbrk_r+0x1a>
 800647c:	6023      	str	r3, [r4, #0]
 800647e:	bd38      	pop	{r3, r4, r5, pc}
 8006480:	20000414 	.word	0x20000414

08006484 <abort>:
 8006484:	b508      	push	{r3, lr}
 8006486:	2006      	movs	r0, #6
 8006488:	f000 fb8e 	bl	8006ba8 <raise>
 800648c:	2001      	movs	r0, #1
 800648e:	f7fb f9f5 	bl	800187c <_exit>

08006492 <__sfputc_r>:
 8006492:	6893      	ldr	r3, [r2, #8]
 8006494:	3b01      	subs	r3, #1
 8006496:	2b00      	cmp	r3, #0
 8006498:	b410      	push	{r4}
 800649a:	6093      	str	r3, [r2, #8]
 800649c:	da08      	bge.n	80064b0 <__sfputc_r+0x1e>
 800649e:	6994      	ldr	r4, [r2, #24]
 80064a0:	42a3      	cmp	r3, r4
 80064a2:	db01      	blt.n	80064a8 <__sfputc_r+0x16>
 80064a4:	290a      	cmp	r1, #10
 80064a6:	d103      	bne.n	80064b0 <__sfputc_r+0x1e>
 80064a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064ac:	f000 bac0 	b.w	8006a30 <__swbuf_r>
 80064b0:	6813      	ldr	r3, [r2, #0]
 80064b2:	1c58      	adds	r0, r3, #1
 80064b4:	6010      	str	r0, [r2, #0]
 80064b6:	7019      	strb	r1, [r3, #0]
 80064b8:	4608      	mov	r0, r1
 80064ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <__sfputs_r>:
 80064c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c2:	4606      	mov	r6, r0
 80064c4:	460f      	mov	r7, r1
 80064c6:	4614      	mov	r4, r2
 80064c8:	18d5      	adds	r5, r2, r3
 80064ca:	42ac      	cmp	r4, r5
 80064cc:	d101      	bne.n	80064d2 <__sfputs_r+0x12>
 80064ce:	2000      	movs	r0, #0
 80064d0:	e007      	b.n	80064e2 <__sfputs_r+0x22>
 80064d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064d6:	463a      	mov	r2, r7
 80064d8:	4630      	mov	r0, r6
 80064da:	f7ff ffda 	bl	8006492 <__sfputc_r>
 80064de:	1c43      	adds	r3, r0, #1
 80064e0:	d1f3      	bne.n	80064ca <__sfputs_r+0xa>
 80064e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080064e4 <_vfiprintf_r>:
 80064e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e8:	460d      	mov	r5, r1
 80064ea:	b09d      	sub	sp, #116	@ 0x74
 80064ec:	4614      	mov	r4, r2
 80064ee:	4698      	mov	r8, r3
 80064f0:	4606      	mov	r6, r0
 80064f2:	b118      	cbz	r0, 80064fc <_vfiprintf_r+0x18>
 80064f4:	6a03      	ldr	r3, [r0, #32]
 80064f6:	b90b      	cbnz	r3, 80064fc <_vfiprintf_r+0x18>
 80064f8:	f7ff fcb4 	bl	8005e64 <__sinit>
 80064fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064fe:	07d9      	lsls	r1, r3, #31
 8006500:	d405      	bmi.n	800650e <_vfiprintf_r+0x2a>
 8006502:	89ab      	ldrh	r3, [r5, #12]
 8006504:	059a      	lsls	r2, r3, #22
 8006506:	d402      	bmi.n	800650e <_vfiprintf_r+0x2a>
 8006508:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800650a:	f7ff fdcc 	bl	80060a6 <__retarget_lock_acquire_recursive>
 800650e:	89ab      	ldrh	r3, [r5, #12]
 8006510:	071b      	lsls	r3, r3, #28
 8006512:	d501      	bpl.n	8006518 <_vfiprintf_r+0x34>
 8006514:	692b      	ldr	r3, [r5, #16]
 8006516:	b99b      	cbnz	r3, 8006540 <_vfiprintf_r+0x5c>
 8006518:	4629      	mov	r1, r5
 800651a:	4630      	mov	r0, r6
 800651c:	f000 fac6 	bl	8006aac <__swsetup_r>
 8006520:	b170      	cbz	r0, 8006540 <_vfiprintf_r+0x5c>
 8006522:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006524:	07dc      	lsls	r4, r3, #31
 8006526:	d504      	bpl.n	8006532 <_vfiprintf_r+0x4e>
 8006528:	f04f 30ff 	mov.w	r0, #4294967295
 800652c:	b01d      	add	sp, #116	@ 0x74
 800652e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006532:	89ab      	ldrh	r3, [r5, #12]
 8006534:	0598      	lsls	r0, r3, #22
 8006536:	d4f7      	bmi.n	8006528 <_vfiprintf_r+0x44>
 8006538:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800653a:	f7ff fdb5 	bl	80060a8 <__retarget_lock_release_recursive>
 800653e:	e7f3      	b.n	8006528 <_vfiprintf_r+0x44>
 8006540:	2300      	movs	r3, #0
 8006542:	9309      	str	r3, [sp, #36]	@ 0x24
 8006544:	2320      	movs	r3, #32
 8006546:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800654a:	f8cd 800c 	str.w	r8, [sp, #12]
 800654e:	2330      	movs	r3, #48	@ 0x30
 8006550:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006700 <_vfiprintf_r+0x21c>
 8006554:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006558:	f04f 0901 	mov.w	r9, #1
 800655c:	4623      	mov	r3, r4
 800655e:	469a      	mov	sl, r3
 8006560:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006564:	b10a      	cbz	r2, 800656a <_vfiprintf_r+0x86>
 8006566:	2a25      	cmp	r2, #37	@ 0x25
 8006568:	d1f9      	bne.n	800655e <_vfiprintf_r+0x7a>
 800656a:	ebba 0b04 	subs.w	fp, sl, r4
 800656e:	d00b      	beq.n	8006588 <_vfiprintf_r+0xa4>
 8006570:	465b      	mov	r3, fp
 8006572:	4622      	mov	r2, r4
 8006574:	4629      	mov	r1, r5
 8006576:	4630      	mov	r0, r6
 8006578:	f7ff ffa2 	bl	80064c0 <__sfputs_r>
 800657c:	3001      	adds	r0, #1
 800657e:	f000 80a7 	beq.w	80066d0 <_vfiprintf_r+0x1ec>
 8006582:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006584:	445a      	add	r2, fp
 8006586:	9209      	str	r2, [sp, #36]	@ 0x24
 8006588:	f89a 3000 	ldrb.w	r3, [sl]
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 809f 	beq.w	80066d0 <_vfiprintf_r+0x1ec>
 8006592:	2300      	movs	r3, #0
 8006594:	f04f 32ff 	mov.w	r2, #4294967295
 8006598:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800659c:	f10a 0a01 	add.w	sl, sl, #1
 80065a0:	9304      	str	r3, [sp, #16]
 80065a2:	9307      	str	r3, [sp, #28]
 80065a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80065a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80065aa:	4654      	mov	r4, sl
 80065ac:	2205      	movs	r2, #5
 80065ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065b2:	4853      	ldr	r0, [pc, #332]	@ (8006700 <_vfiprintf_r+0x21c>)
 80065b4:	f7f9 fe0c 	bl	80001d0 <memchr>
 80065b8:	9a04      	ldr	r2, [sp, #16]
 80065ba:	b9d8      	cbnz	r0, 80065f4 <_vfiprintf_r+0x110>
 80065bc:	06d1      	lsls	r1, r2, #27
 80065be:	bf44      	itt	mi
 80065c0:	2320      	movmi	r3, #32
 80065c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065c6:	0713      	lsls	r3, r2, #28
 80065c8:	bf44      	itt	mi
 80065ca:	232b      	movmi	r3, #43	@ 0x2b
 80065cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065d0:	f89a 3000 	ldrb.w	r3, [sl]
 80065d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80065d6:	d015      	beq.n	8006604 <_vfiprintf_r+0x120>
 80065d8:	9a07      	ldr	r2, [sp, #28]
 80065da:	4654      	mov	r4, sl
 80065dc:	2000      	movs	r0, #0
 80065de:	f04f 0c0a 	mov.w	ip, #10
 80065e2:	4621      	mov	r1, r4
 80065e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065e8:	3b30      	subs	r3, #48	@ 0x30
 80065ea:	2b09      	cmp	r3, #9
 80065ec:	d94b      	bls.n	8006686 <_vfiprintf_r+0x1a2>
 80065ee:	b1b0      	cbz	r0, 800661e <_vfiprintf_r+0x13a>
 80065f0:	9207      	str	r2, [sp, #28]
 80065f2:	e014      	b.n	800661e <_vfiprintf_r+0x13a>
 80065f4:	eba0 0308 	sub.w	r3, r0, r8
 80065f8:	fa09 f303 	lsl.w	r3, r9, r3
 80065fc:	4313      	orrs	r3, r2
 80065fe:	9304      	str	r3, [sp, #16]
 8006600:	46a2      	mov	sl, r4
 8006602:	e7d2      	b.n	80065aa <_vfiprintf_r+0xc6>
 8006604:	9b03      	ldr	r3, [sp, #12]
 8006606:	1d19      	adds	r1, r3, #4
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	9103      	str	r1, [sp, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	bfbb      	ittet	lt
 8006610:	425b      	neglt	r3, r3
 8006612:	f042 0202 	orrlt.w	r2, r2, #2
 8006616:	9307      	strge	r3, [sp, #28]
 8006618:	9307      	strlt	r3, [sp, #28]
 800661a:	bfb8      	it	lt
 800661c:	9204      	strlt	r2, [sp, #16]
 800661e:	7823      	ldrb	r3, [r4, #0]
 8006620:	2b2e      	cmp	r3, #46	@ 0x2e
 8006622:	d10a      	bne.n	800663a <_vfiprintf_r+0x156>
 8006624:	7863      	ldrb	r3, [r4, #1]
 8006626:	2b2a      	cmp	r3, #42	@ 0x2a
 8006628:	d132      	bne.n	8006690 <_vfiprintf_r+0x1ac>
 800662a:	9b03      	ldr	r3, [sp, #12]
 800662c:	1d1a      	adds	r2, r3, #4
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	9203      	str	r2, [sp, #12]
 8006632:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006636:	3402      	adds	r4, #2
 8006638:	9305      	str	r3, [sp, #20]
 800663a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006710 <_vfiprintf_r+0x22c>
 800663e:	7821      	ldrb	r1, [r4, #0]
 8006640:	2203      	movs	r2, #3
 8006642:	4650      	mov	r0, sl
 8006644:	f7f9 fdc4 	bl	80001d0 <memchr>
 8006648:	b138      	cbz	r0, 800665a <_vfiprintf_r+0x176>
 800664a:	9b04      	ldr	r3, [sp, #16]
 800664c:	eba0 000a 	sub.w	r0, r0, sl
 8006650:	2240      	movs	r2, #64	@ 0x40
 8006652:	4082      	lsls	r2, r0
 8006654:	4313      	orrs	r3, r2
 8006656:	3401      	adds	r4, #1
 8006658:	9304      	str	r3, [sp, #16]
 800665a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800665e:	4829      	ldr	r0, [pc, #164]	@ (8006704 <_vfiprintf_r+0x220>)
 8006660:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006664:	2206      	movs	r2, #6
 8006666:	f7f9 fdb3 	bl	80001d0 <memchr>
 800666a:	2800      	cmp	r0, #0
 800666c:	d03f      	beq.n	80066ee <_vfiprintf_r+0x20a>
 800666e:	4b26      	ldr	r3, [pc, #152]	@ (8006708 <_vfiprintf_r+0x224>)
 8006670:	bb1b      	cbnz	r3, 80066ba <_vfiprintf_r+0x1d6>
 8006672:	9b03      	ldr	r3, [sp, #12]
 8006674:	3307      	adds	r3, #7
 8006676:	f023 0307 	bic.w	r3, r3, #7
 800667a:	3308      	adds	r3, #8
 800667c:	9303      	str	r3, [sp, #12]
 800667e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006680:	443b      	add	r3, r7
 8006682:	9309      	str	r3, [sp, #36]	@ 0x24
 8006684:	e76a      	b.n	800655c <_vfiprintf_r+0x78>
 8006686:	fb0c 3202 	mla	r2, ip, r2, r3
 800668a:	460c      	mov	r4, r1
 800668c:	2001      	movs	r0, #1
 800668e:	e7a8      	b.n	80065e2 <_vfiprintf_r+0xfe>
 8006690:	2300      	movs	r3, #0
 8006692:	3401      	adds	r4, #1
 8006694:	9305      	str	r3, [sp, #20]
 8006696:	4619      	mov	r1, r3
 8006698:	f04f 0c0a 	mov.w	ip, #10
 800669c:	4620      	mov	r0, r4
 800669e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066a2:	3a30      	subs	r2, #48	@ 0x30
 80066a4:	2a09      	cmp	r2, #9
 80066a6:	d903      	bls.n	80066b0 <_vfiprintf_r+0x1cc>
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d0c6      	beq.n	800663a <_vfiprintf_r+0x156>
 80066ac:	9105      	str	r1, [sp, #20]
 80066ae:	e7c4      	b.n	800663a <_vfiprintf_r+0x156>
 80066b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80066b4:	4604      	mov	r4, r0
 80066b6:	2301      	movs	r3, #1
 80066b8:	e7f0      	b.n	800669c <_vfiprintf_r+0x1b8>
 80066ba:	ab03      	add	r3, sp, #12
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	462a      	mov	r2, r5
 80066c0:	4b12      	ldr	r3, [pc, #72]	@ (800670c <_vfiprintf_r+0x228>)
 80066c2:	a904      	add	r1, sp, #16
 80066c4:	4630      	mov	r0, r6
 80066c6:	f3af 8000 	nop.w
 80066ca:	4607      	mov	r7, r0
 80066cc:	1c78      	adds	r0, r7, #1
 80066ce:	d1d6      	bne.n	800667e <_vfiprintf_r+0x19a>
 80066d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80066d2:	07d9      	lsls	r1, r3, #31
 80066d4:	d405      	bmi.n	80066e2 <_vfiprintf_r+0x1fe>
 80066d6:	89ab      	ldrh	r3, [r5, #12]
 80066d8:	059a      	lsls	r2, r3, #22
 80066da:	d402      	bmi.n	80066e2 <_vfiprintf_r+0x1fe>
 80066dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80066de:	f7ff fce3 	bl	80060a8 <__retarget_lock_release_recursive>
 80066e2:	89ab      	ldrh	r3, [r5, #12]
 80066e4:	065b      	lsls	r3, r3, #25
 80066e6:	f53f af1f 	bmi.w	8006528 <_vfiprintf_r+0x44>
 80066ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80066ec:	e71e      	b.n	800652c <_vfiprintf_r+0x48>
 80066ee:	ab03      	add	r3, sp, #12
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	462a      	mov	r2, r5
 80066f4:	4b05      	ldr	r3, [pc, #20]	@ (800670c <_vfiprintf_r+0x228>)
 80066f6:	a904      	add	r1, sp, #16
 80066f8:	4630      	mov	r0, r6
 80066fa:	f000 f879 	bl	80067f0 <_printf_i>
 80066fe:	e7e4      	b.n	80066ca <_vfiprintf_r+0x1e6>
 8006700:	08006df3 	.word	0x08006df3
 8006704:	08006dfd 	.word	0x08006dfd
 8006708:	00000000 	.word	0x00000000
 800670c:	080064c1 	.word	0x080064c1
 8006710:	08006df9 	.word	0x08006df9

08006714 <_printf_common>:
 8006714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006718:	4616      	mov	r6, r2
 800671a:	4698      	mov	r8, r3
 800671c:	688a      	ldr	r2, [r1, #8]
 800671e:	690b      	ldr	r3, [r1, #16]
 8006720:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006724:	4293      	cmp	r3, r2
 8006726:	bfb8      	it	lt
 8006728:	4613      	movlt	r3, r2
 800672a:	6033      	str	r3, [r6, #0]
 800672c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006730:	4607      	mov	r7, r0
 8006732:	460c      	mov	r4, r1
 8006734:	b10a      	cbz	r2, 800673a <_printf_common+0x26>
 8006736:	3301      	adds	r3, #1
 8006738:	6033      	str	r3, [r6, #0]
 800673a:	6823      	ldr	r3, [r4, #0]
 800673c:	0699      	lsls	r1, r3, #26
 800673e:	bf42      	ittt	mi
 8006740:	6833      	ldrmi	r3, [r6, #0]
 8006742:	3302      	addmi	r3, #2
 8006744:	6033      	strmi	r3, [r6, #0]
 8006746:	6825      	ldr	r5, [r4, #0]
 8006748:	f015 0506 	ands.w	r5, r5, #6
 800674c:	d106      	bne.n	800675c <_printf_common+0x48>
 800674e:	f104 0a19 	add.w	sl, r4, #25
 8006752:	68e3      	ldr	r3, [r4, #12]
 8006754:	6832      	ldr	r2, [r6, #0]
 8006756:	1a9b      	subs	r3, r3, r2
 8006758:	42ab      	cmp	r3, r5
 800675a:	dc26      	bgt.n	80067aa <_printf_common+0x96>
 800675c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006760:	6822      	ldr	r2, [r4, #0]
 8006762:	3b00      	subs	r3, #0
 8006764:	bf18      	it	ne
 8006766:	2301      	movne	r3, #1
 8006768:	0692      	lsls	r2, r2, #26
 800676a:	d42b      	bmi.n	80067c4 <_printf_common+0xb0>
 800676c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006770:	4641      	mov	r1, r8
 8006772:	4638      	mov	r0, r7
 8006774:	47c8      	blx	r9
 8006776:	3001      	adds	r0, #1
 8006778:	d01e      	beq.n	80067b8 <_printf_common+0xa4>
 800677a:	6823      	ldr	r3, [r4, #0]
 800677c:	6922      	ldr	r2, [r4, #16]
 800677e:	f003 0306 	and.w	r3, r3, #6
 8006782:	2b04      	cmp	r3, #4
 8006784:	bf02      	ittt	eq
 8006786:	68e5      	ldreq	r5, [r4, #12]
 8006788:	6833      	ldreq	r3, [r6, #0]
 800678a:	1aed      	subeq	r5, r5, r3
 800678c:	68a3      	ldr	r3, [r4, #8]
 800678e:	bf0c      	ite	eq
 8006790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006794:	2500      	movne	r5, #0
 8006796:	4293      	cmp	r3, r2
 8006798:	bfc4      	itt	gt
 800679a:	1a9b      	subgt	r3, r3, r2
 800679c:	18ed      	addgt	r5, r5, r3
 800679e:	2600      	movs	r6, #0
 80067a0:	341a      	adds	r4, #26
 80067a2:	42b5      	cmp	r5, r6
 80067a4:	d11a      	bne.n	80067dc <_printf_common+0xc8>
 80067a6:	2000      	movs	r0, #0
 80067a8:	e008      	b.n	80067bc <_printf_common+0xa8>
 80067aa:	2301      	movs	r3, #1
 80067ac:	4652      	mov	r2, sl
 80067ae:	4641      	mov	r1, r8
 80067b0:	4638      	mov	r0, r7
 80067b2:	47c8      	blx	r9
 80067b4:	3001      	adds	r0, #1
 80067b6:	d103      	bne.n	80067c0 <_printf_common+0xac>
 80067b8:	f04f 30ff 	mov.w	r0, #4294967295
 80067bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c0:	3501      	adds	r5, #1
 80067c2:	e7c6      	b.n	8006752 <_printf_common+0x3e>
 80067c4:	18e1      	adds	r1, r4, r3
 80067c6:	1c5a      	adds	r2, r3, #1
 80067c8:	2030      	movs	r0, #48	@ 0x30
 80067ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80067ce:	4422      	add	r2, r4
 80067d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80067d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80067d8:	3302      	adds	r3, #2
 80067da:	e7c7      	b.n	800676c <_printf_common+0x58>
 80067dc:	2301      	movs	r3, #1
 80067de:	4622      	mov	r2, r4
 80067e0:	4641      	mov	r1, r8
 80067e2:	4638      	mov	r0, r7
 80067e4:	47c8      	blx	r9
 80067e6:	3001      	adds	r0, #1
 80067e8:	d0e6      	beq.n	80067b8 <_printf_common+0xa4>
 80067ea:	3601      	adds	r6, #1
 80067ec:	e7d9      	b.n	80067a2 <_printf_common+0x8e>
	...

080067f0 <_printf_i>:
 80067f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067f4:	7e0f      	ldrb	r7, [r1, #24]
 80067f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067f8:	2f78      	cmp	r7, #120	@ 0x78
 80067fa:	4691      	mov	r9, r2
 80067fc:	4680      	mov	r8, r0
 80067fe:	460c      	mov	r4, r1
 8006800:	469a      	mov	sl, r3
 8006802:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006806:	d807      	bhi.n	8006818 <_printf_i+0x28>
 8006808:	2f62      	cmp	r7, #98	@ 0x62
 800680a:	d80a      	bhi.n	8006822 <_printf_i+0x32>
 800680c:	2f00      	cmp	r7, #0
 800680e:	f000 80d2 	beq.w	80069b6 <_printf_i+0x1c6>
 8006812:	2f58      	cmp	r7, #88	@ 0x58
 8006814:	f000 80b9 	beq.w	800698a <_printf_i+0x19a>
 8006818:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800681c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006820:	e03a      	b.n	8006898 <_printf_i+0xa8>
 8006822:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006826:	2b15      	cmp	r3, #21
 8006828:	d8f6      	bhi.n	8006818 <_printf_i+0x28>
 800682a:	a101      	add	r1, pc, #4	@ (adr r1, 8006830 <_printf_i+0x40>)
 800682c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006830:	08006889 	.word	0x08006889
 8006834:	0800689d 	.word	0x0800689d
 8006838:	08006819 	.word	0x08006819
 800683c:	08006819 	.word	0x08006819
 8006840:	08006819 	.word	0x08006819
 8006844:	08006819 	.word	0x08006819
 8006848:	0800689d 	.word	0x0800689d
 800684c:	08006819 	.word	0x08006819
 8006850:	08006819 	.word	0x08006819
 8006854:	08006819 	.word	0x08006819
 8006858:	08006819 	.word	0x08006819
 800685c:	0800699d 	.word	0x0800699d
 8006860:	080068c7 	.word	0x080068c7
 8006864:	08006957 	.word	0x08006957
 8006868:	08006819 	.word	0x08006819
 800686c:	08006819 	.word	0x08006819
 8006870:	080069bf 	.word	0x080069bf
 8006874:	08006819 	.word	0x08006819
 8006878:	080068c7 	.word	0x080068c7
 800687c:	08006819 	.word	0x08006819
 8006880:	08006819 	.word	0x08006819
 8006884:	0800695f 	.word	0x0800695f
 8006888:	6833      	ldr	r3, [r6, #0]
 800688a:	1d1a      	adds	r2, r3, #4
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6032      	str	r2, [r6, #0]
 8006890:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006894:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006898:	2301      	movs	r3, #1
 800689a:	e09d      	b.n	80069d8 <_printf_i+0x1e8>
 800689c:	6833      	ldr	r3, [r6, #0]
 800689e:	6820      	ldr	r0, [r4, #0]
 80068a0:	1d19      	adds	r1, r3, #4
 80068a2:	6031      	str	r1, [r6, #0]
 80068a4:	0606      	lsls	r6, r0, #24
 80068a6:	d501      	bpl.n	80068ac <_printf_i+0xbc>
 80068a8:	681d      	ldr	r5, [r3, #0]
 80068aa:	e003      	b.n	80068b4 <_printf_i+0xc4>
 80068ac:	0645      	lsls	r5, r0, #25
 80068ae:	d5fb      	bpl.n	80068a8 <_printf_i+0xb8>
 80068b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80068b4:	2d00      	cmp	r5, #0
 80068b6:	da03      	bge.n	80068c0 <_printf_i+0xd0>
 80068b8:	232d      	movs	r3, #45	@ 0x2d
 80068ba:	426d      	negs	r5, r5
 80068bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068c0:	4859      	ldr	r0, [pc, #356]	@ (8006a28 <_printf_i+0x238>)
 80068c2:	230a      	movs	r3, #10
 80068c4:	e011      	b.n	80068ea <_printf_i+0xfa>
 80068c6:	6821      	ldr	r1, [r4, #0]
 80068c8:	6833      	ldr	r3, [r6, #0]
 80068ca:	0608      	lsls	r0, r1, #24
 80068cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80068d0:	d402      	bmi.n	80068d8 <_printf_i+0xe8>
 80068d2:	0649      	lsls	r1, r1, #25
 80068d4:	bf48      	it	mi
 80068d6:	b2ad      	uxthmi	r5, r5
 80068d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80068da:	4853      	ldr	r0, [pc, #332]	@ (8006a28 <_printf_i+0x238>)
 80068dc:	6033      	str	r3, [r6, #0]
 80068de:	bf14      	ite	ne
 80068e0:	230a      	movne	r3, #10
 80068e2:	2308      	moveq	r3, #8
 80068e4:	2100      	movs	r1, #0
 80068e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80068ea:	6866      	ldr	r6, [r4, #4]
 80068ec:	60a6      	str	r6, [r4, #8]
 80068ee:	2e00      	cmp	r6, #0
 80068f0:	bfa2      	ittt	ge
 80068f2:	6821      	ldrge	r1, [r4, #0]
 80068f4:	f021 0104 	bicge.w	r1, r1, #4
 80068f8:	6021      	strge	r1, [r4, #0]
 80068fa:	b90d      	cbnz	r5, 8006900 <_printf_i+0x110>
 80068fc:	2e00      	cmp	r6, #0
 80068fe:	d04b      	beq.n	8006998 <_printf_i+0x1a8>
 8006900:	4616      	mov	r6, r2
 8006902:	fbb5 f1f3 	udiv	r1, r5, r3
 8006906:	fb03 5711 	mls	r7, r3, r1, r5
 800690a:	5dc7      	ldrb	r7, [r0, r7]
 800690c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006910:	462f      	mov	r7, r5
 8006912:	42bb      	cmp	r3, r7
 8006914:	460d      	mov	r5, r1
 8006916:	d9f4      	bls.n	8006902 <_printf_i+0x112>
 8006918:	2b08      	cmp	r3, #8
 800691a:	d10b      	bne.n	8006934 <_printf_i+0x144>
 800691c:	6823      	ldr	r3, [r4, #0]
 800691e:	07df      	lsls	r7, r3, #31
 8006920:	d508      	bpl.n	8006934 <_printf_i+0x144>
 8006922:	6923      	ldr	r3, [r4, #16]
 8006924:	6861      	ldr	r1, [r4, #4]
 8006926:	4299      	cmp	r1, r3
 8006928:	bfde      	ittt	le
 800692a:	2330      	movle	r3, #48	@ 0x30
 800692c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006930:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006934:	1b92      	subs	r2, r2, r6
 8006936:	6122      	str	r2, [r4, #16]
 8006938:	f8cd a000 	str.w	sl, [sp]
 800693c:	464b      	mov	r3, r9
 800693e:	aa03      	add	r2, sp, #12
 8006940:	4621      	mov	r1, r4
 8006942:	4640      	mov	r0, r8
 8006944:	f7ff fee6 	bl	8006714 <_printf_common>
 8006948:	3001      	adds	r0, #1
 800694a:	d14a      	bne.n	80069e2 <_printf_i+0x1f2>
 800694c:	f04f 30ff 	mov.w	r0, #4294967295
 8006950:	b004      	add	sp, #16
 8006952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006956:	6823      	ldr	r3, [r4, #0]
 8006958:	f043 0320 	orr.w	r3, r3, #32
 800695c:	6023      	str	r3, [r4, #0]
 800695e:	4833      	ldr	r0, [pc, #204]	@ (8006a2c <_printf_i+0x23c>)
 8006960:	2778      	movs	r7, #120	@ 0x78
 8006962:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006966:	6823      	ldr	r3, [r4, #0]
 8006968:	6831      	ldr	r1, [r6, #0]
 800696a:	061f      	lsls	r7, r3, #24
 800696c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006970:	d402      	bmi.n	8006978 <_printf_i+0x188>
 8006972:	065f      	lsls	r7, r3, #25
 8006974:	bf48      	it	mi
 8006976:	b2ad      	uxthmi	r5, r5
 8006978:	6031      	str	r1, [r6, #0]
 800697a:	07d9      	lsls	r1, r3, #31
 800697c:	bf44      	itt	mi
 800697e:	f043 0320 	orrmi.w	r3, r3, #32
 8006982:	6023      	strmi	r3, [r4, #0]
 8006984:	b11d      	cbz	r5, 800698e <_printf_i+0x19e>
 8006986:	2310      	movs	r3, #16
 8006988:	e7ac      	b.n	80068e4 <_printf_i+0xf4>
 800698a:	4827      	ldr	r0, [pc, #156]	@ (8006a28 <_printf_i+0x238>)
 800698c:	e7e9      	b.n	8006962 <_printf_i+0x172>
 800698e:	6823      	ldr	r3, [r4, #0]
 8006990:	f023 0320 	bic.w	r3, r3, #32
 8006994:	6023      	str	r3, [r4, #0]
 8006996:	e7f6      	b.n	8006986 <_printf_i+0x196>
 8006998:	4616      	mov	r6, r2
 800699a:	e7bd      	b.n	8006918 <_printf_i+0x128>
 800699c:	6833      	ldr	r3, [r6, #0]
 800699e:	6825      	ldr	r5, [r4, #0]
 80069a0:	6961      	ldr	r1, [r4, #20]
 80069a2:	1d18      	adds	r0, r3, #4
 80069a4:	6030      	str	r0, [r6, #0]
 80069a6:	062e      	lsls	r6, r5, #24
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	d501      	bpl.n	80069b0 <_printf_i+0x1c0>
 80069ac:	6019      	str	r1, [r3, #0]
 80069ae:	e002      	b.n	80069b6 <_printf_i+0x1c6>
 80069b0:	0668      	lsls	r0, r5, #25
 80069b2:	d5fb      	bpl.n	80069ac <_printf_i+0x1bc>
 80069b4:	8019      	strh	r1, [r3, #0]
 80069b6:	2300      	movs	r3, #0
 80069b8:	6123      	str	r3, [r4, #16]
 80069ba:	4616      	mov	r6, r2
 80069bc:	e7bc      	b.n	8006938 <_printf_i+0x148>
 80069be:	6833      	ldr	r3, [r6, #0]
 80069c0:	1d1a      	adds	r2, r3, #4
 80069c2:	6032      	str	r2, [r6, #0]
 80069c4:	681e      	ldr	r6, [r3, #0]
 80069c6:	6862      	ldr	r2, [r4, #4]
 80069c8:	2100      	movs	r1, #0
 80069ca:	4630      	mov	r0, r6
 80069cc:	f7f9 fc00 	bl	80001d0 <memchr>
 80069d0:	b108      	cbz	r0, 80069d6 <_printf_i+0x1e6>
 80069d2:	1b80      	subs	r0, r0, r6
 80069d4:	6060      	str	r0, [r4, #4]
 80069d6:	6863      	ldr	r3, [r4, #4]
 80069d8:	6123      	str	r3, [r4, #16]
 80069da:	2300      	movs	r3, #0
 80069dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069e0:	e7aa      	b.n	8006938 <_printf_i+0x148>
 80069e2:	6923      	ldr	r3, [r4, #16]
 80069e4:	4632      	mov	r2, r6
 80069e6:	4649      	mov	r1, r9
 80069e8:	4640      	mov	r0, r8
 80069ea:	47d0      	blx	sl
 80069ec:	3001      	adds	r0, #1
 80069ee:	d0ad      	beq.n	800694c <_printf_i+0x15c>
 80069f0:	6823      	ldr	r3, [r4, #0]
 80069f2:	079b      	lsls	r3, r3, #30
 80069f4:	d413      	bmi.n	8006a1e <_printf_i+0x22e>
 80069f6:	68e0      	ldr	r0, [r4, #12]
 80069f8:	9b03      	ldr	r3, [sp, #12]
 80069fa:	4298      	cmp	r0, r3
 80069fc:	bfb8      	it	lt
 80069fe:	4618      	movlt	r0, r3
 8006a00:	e7a6      	b.n	8006950 <_printf_i+0x160>
 8006a02:	2301      	movs	r3, #1
 8006a04:	4632      	mov	r2, r6
 8006a06:	4649      	mov	r1, r9
 8006a08:	4640      	mov	r0, r8
 8006a0a:	47d0      	blx	sl
 8006a0c:	3001      	adds	r0, #1
 8006a0e:	d09d      	beq.n	800694c <_printf_i+0x15c>
 8006a10:	3501      	adds	r5, #1
 8006a12:	68e3      	ldr	r3, [r4, #12]
 8006a14:	9903      	ldr	r1, [sp, #12]
 8006a16:	1a5b      	subs	r3, r3, r1
 8006a18:	42ab      	cmp	r3, r5
 8006a1a:	dcf2      	bgt.n	8006a02 <_printf_i+0x212>
 8006a1c:	e7eb      	b.n	80069f6 <_printf_i+0x206>
 8006a1e:	2500      	movs	r5, #0
 8006a20:	f104 0619 	add.w	r6, r4, #25
 8006a24:	e7f5      	b.n	8006a12 <_printf_i+0x222>
 8006a26:	bf00      	nop
 8006a28:	08006e04 	.word	0x08006e04
 8006a2c:	08006e15 	.word	0x08006e15

08006a30 <__swbuf_r>:
 8006a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a32:	460e      	mov	r6, r1
 8006a34:	4614      	mov	r4, r2
 8006a36:	4605      	mov	r5, r0
 8006a38:	b118      	cbz	r0, 8006a42 <__swbuf_r+0x12>
 8006a3a:	6a03      	ldr	r3, [r0, #32]
 8006a3c:	b90b      	cbnz	r3, 8006a42 <__swbuf_r+0x12>
 8006a3e:	f7ff fa11 	bl	8005e64 <__sinit>
 8006a42:	69a3      	ldr	r3, [r4, #24]
 8006a44:	60a3      	str	r3, [r4, #8]
 8006a46:	89a3      	ldrh	r3, [r4, #12]
 8006a48:	071a      	lsls	r2, r3, #28
 8006a4a:	d501      	bpl.n	8006a50 <__swbuf_r+0x20>
 8006a4c:	6923      	ldr	r3, [r4, #16]
 8006a4e:	b943      	cbnz	r3, 8006a62 <__swbuf_r+0x32>
 8006a50:	4621      	mov	r1, r4
 8006a52:	4628      	mov	r0, r5
 8006a54:	f000 f82a 	bl	8006aac <__swsetup_r>
 8006a58:	b118      	cbz	r0, 8006a62 <__swbuf_r+0x32>
 8006a5a:	f04f 37ff 	mov.w	r7, #4294967295
 8006a5e:	4638      	mov	r0, r7
 8006a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a62:	6823      	ldr	r3, [r4, #0]
 8006a64:	6922      	ldr	r2, [r4, #16]
 8006a66:	1a98      	subs	r0, r3, r2
 8006a68:	6963      	ldr	r3, [r4, #20]
 8006a6a:	b2f6      	uxtb	r6, r6
 8006a6c:	4283      	cmp	r3, r0
 8006a6e:	4637      	mov	r7, r6
 8006a70:	dc05      	bgt.n	8006a7e <__swbuf_r+0x4e>
 8006a72:	4621      	mov	r1, r4
 8006a74:	4628      	mov	r0, r5
 8006a76:	f7ff fcbb 	bl	80063f0 <_fflush_r>
 8006a7a:	2800      	cmp	r0, #0
 8006a7c:	d1ed      	bne.n	8006a5a <__swbuf_r+0x2a>
 8006a7e:	68a3      	ldr	r3, [r4, #8]
 8006a80:	3b01      	subs	r3, #1
 8006a82:	60a3      	str	r3, [r4, #8]
 8006a84:	6823      	ldr	r3, [r4, #0]
 8006a86:	1c5a      	adds	r2, r3, #1
 8006a88:	6022      	str	r2, [r4, #0]
 8006a8a:	701e      	strb	r6, [r3, #0]
 8006a8c:	6962      	ldr	r2, [r4, #20]
 8006a8e:	1c43      	adds	r3, r0, #1
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d004      	beq.n	8006a9e <__swbuf_r+0x6e>
 8006a94:	89a3      	ldrh	r3, [r4, #12]
 8006a96:	07db      	lsls	r3, r3, #31
 8006a98:	d5e1      	bpl.n	8006a5e <__swbuf_r+0x2e>
 8006a9a:	2e0a      	cmp	r6, #10
 8006a9c:	d1df      	bne.n	8006a5e <__swbuf_r+0x2e>
 8006a9e:	4621      	mov	r1, r4
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	f7ff fca5 	bl	80063f0 <_fflush_r>
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	d0d9      	beq.n	8006a5e <__swbuf_r+0x2e>
 8006aaa:	e7d6      	b.n	8006a5a <__swbuf_r+0x2a>

08006aac <__swsetup_r>:
 8006aac:	b538      	push	{r3, r4, r5, lr}
 8006aae:	4b29      	ldr	r3, [pc, #164]	@ (8006b54 <__swsetup_r+0xa8>)
 8006ab0:	4605      	mov	r5, r0
 8006ab2:	6818      	ldr	r0, [r3, #0]
 8006ab4:	460c      	mov	r4, r1
 8006ab6:	b118      	cbz	r0, 8006ac0 <__swsetup_r+0x14>
 8006ab8:	6a03      	ldr	r3, [r0, #32]
 8006aba:	b90b      	cbnz	r3, 8006ac0 <__swsetup_r+0x14>
 8006abc:	f7ff f9d2 	bl	8005e64 <__sinit>
 8006ac0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ac4:	0719      	lsls	r1, r3, #28
 8006ac6:	d422      	bmi.n	8006b0e <__swsetup_r+0x62>
 8006ac8:	06da      	lsls	r2, r3, #27
 8006aca:	d407      	bmi.n	8006adc <__swsetup_r+0x30>
 8006acc:	2209      	movs	r2, #9
 8006ace:	602a      	str	r2, [r5, #0]
 8006ad0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ad4:	81a3      	strh	r3, [r4, #12]
 8006ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8006ada:	e033      	b.n	8006b44 <__swsetup_r+0x98>
 8006adc:	0758      	lsls	r0, r3, #29
 8006ade:	d512      	bpl.n	8006b06 <__swsetup_r+0x5a>
 8006ae0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ae2:	b141      	cbz	r1, 8006af6 <__swsetup_r+0x4a>
 8006ae4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ae8:	4299      	cmp	r1, r3
 8006aea:	d002      	beq.n	8006af2 <__swsetup_r+0x46>
 8006aec:	4628      	mov	r0, r5
 8006aee:	f7ff fafb 	bl	80060e8 <_free_r>
 8006af2:	2300      	movs	r3, #0
 8006af4:	6363      	str	r3, [r4, #52]	@ 0x34
 8006af6:	89a3      	ldrh	r3, [r4, #12]
 8006af8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006afc:	81a3      	strh	r3, [r4, #12]
 8006afe:	2300      	movs	r3, #0
 8006b00:	6063      	str	r3, [r4, #4]
 8006b02:	6923      	ldr	r3, [r4, #16]
 8006b04:	6023      	str	r3, [r4, #0]
 8006b06:	89a3      	ldrh	r3, [r4, #12]
 8006b08:	f043 0308 	orr.w	r3, r3, #8
 8006b0c:	81a3      	strh	r3, [r4, #12]
 8006b0e:	6923      	ldr	r3, [r4, #16]
 8006b10:	b94b      	cbnz	r3, 8006b26 <__swsetup_r+0x7a>
 8006b12:	89a3      	ldrh	r3, [r4, #12]
 8006b14:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006b18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b1c:	d003      	beq.n	8006b26 <__swsetup_r+0x7a>
 8006b1e:	4621      	mov	r1, r4
 8006b20:	4628      	mov	r0, r5
 8006b22:	f000 f883 	bl	8006c2c <__smakebuf_r>
 8006b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b2a:	f013 0201 	ands.w	r2, r3, #1
 8006b2e:	d00a      	beq.n	8006b46 <__swsetup_r+0x9a>
 8006b30:	2200      	movs	r2, #0
 8006b32:	60a2      	str	r2, [r4, #8]
 8006b34:	6962      	ldr	r2, [r4, #20]
 8006b36:	4252      	negs	r2, r2
 8006b38:	61a2      	str	r2, [r4, #24]
 8006b3a:	6922      	ldr	r2, [r4, #16]
 8006b3c:	b942      	cbnz	r2, 8006b50 <__swsetup_r+0xa4>
 8006b3e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006b42:	d1c5      	bne.n	8006ad0 <__swsetup_r+0x24>
 8006b44:	bd38      	pop	{r3, r4, r5, pc}
 8006b46:	0799      	lsls	r1, r3, #30
 8006b48:	bf58      	it	pl
 8006b4a:	6962      	ldrpl	r2, [r4, #20]
 8006b4c:	60a2      	str	r2, [r4, #8]
 8006b4e:	e7f4      	b.n	8006b3a <__swsetup_r+0x8e>
 8006b50:	2000      	movs	r0, #0
 8006b52:	e7f7      	b.n	8006b44 <__swsetup_r+0x98>
 8006b54:	2000001c 	.word	0x2000001c

08006b58 <_raise_r>:
 8006b58:	291f      	cmp	r1, #31
 8006b5a:	b538      	push	{r3, r4, r5, lr}
 8006b5c:	4605      	mov	r5, r0
 8006b5e:	460c      	mov	r4, r1
 8006b60:	d904      	bls.n	8006b6c <_raise_r+0x14>
 8006b62:	2316      	movs	r3, #22
 8006b64:	6003      	str	r3, [r0, #0]
 8006b66:	f04f 30ff 	mov.w	r0, #4294967295
 8006b6a:	bd38      	pop	{r3, r4, r5, pc}
 8006b6c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006b6e:	b112      	cbz	r2, 8006b76 <_raise_r+0x1e>
 8006b70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b74:	b94b      	cbnz	r3, 8006b8a <_raise_r+0x32>
 8006b76:	4628      	mov	r0, r5
 8006b78:	f000 f830 	bl	8006bdc <_getpid_r>
 8006b7c:	4622      	mov	r2, r4
 8006b7e:	4601      	mov	r1, r0
 8006b80:	4628      	mov	r0, r5
 8006b82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b86:	f000 b817 	b.w	8006bb8 <_kill_r>
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d00a      	beq.n	8006ba4 <_raise_r+0x4c>
 8006b8e:	1c59      	adds	r1, r3, #1
 8006b90:	d103      	bne.n	8006b9a <_raise_r+0x42>
 8006b92:	2316      	movs	r3, #22
 8006b94:	6003      	str	r3, [r0, #0]
 8006b96:	2001      	movs	r0, #1
 8006b98:	e7e7      	b.n	8006b6a <_raise_r+0x12>
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	4798      	blx	r3
 8006ba4:	2000      	movs	r0, #0
 8006ba6:	e7e0      	b.n	8006b6a <_raise_r+0x12>

08006ba8 <raise>:
 8006ba8:	4b02      	ldr	r3, [pc, #8]	@ (8006bb4 <raise+0xc>)
 8006baa:	4601      	mov	r1, r0
 8006bac:	6818      	ldr	r0, [r3, #0]
 8006bae:	f7ff bfd3 	b.w	8006b58 <_raise_r>
 8006bb2:	bf00      	nop
 8006bb4:	2000001c 	.word	0x2000001c

08006bb8 <_kill_r>:
 8006bb8:	b538      	push	{r3, r4, r5, lr}
 8006bba:	4d07      	ldr	r5, [pc, #28]	@ (8006bd8 <_kill_r+0x20>)
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	4604      	mov	r4, r0
 8006bc0:	4608      	mov	r0, r1
 8006bc2:	4611      	mov	r1, r2
 8006bc4:	602b      	str	r3, [r5, #0]
 8006bc6:	f7fa fe49 	bl	800185c <_kill>
 8006bca:	1c43      	adds	r3, r0, #1
 8006bcc:	d102      	bne.n	8006bd4 <_kill_r+0x1c>
 8006bce:	682b      	ldr	r3, [r5, #0]
 8006bd0:	b103      	cbz	r3, 8006bd4 <_kill_r+0x1c>
 8006bd2:	6023      	str	r3, [r4, #0]
 8006bd4:	bd38      	pop	{r3, r4, r5, pc}
 8006bd6:	bf00      	nop
 8006bd8:	20000414 	.word	0x20000414

08006bdc <_getpid_r>:
 8006bdc:	f7fa be36 	b.w	800184c <_getpid>

08006be0 <__swhatbuf_r>:
 8006be0:	b570      	push	{r4, r5, r6, lr}
 8006be2:	460c      	mov	r4, r1
 8006be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006be8:	2900      	cmp	r1, #0
 8006bea:	b096      	sub	sp, #88	@ 0x58
 8006bec:	4615      	mov	r5, r2
 8006bee:	461e      	mov	r6, r3
 8006bf0:	da0d      	bge.n	8006c0e <__swhatbuf_r+0x2e>
 8006bf2:	89a3      	ldrh	r3, [r4, #12]
 8006bf4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006bf8:	f04f 0100 	mov.w	r1, #0
 8006bfc:	bf14      	ite	ne
 8006bfe:	2340      	movne	r3, #64	@ 0x40
 8006c00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006c04:	2000      	movs	r0, #0
 8006c06:	6031      	str	r1, [r6, #0]
 8006c08:	602b      	str	r3, [r5, #0]
 8006c0a:	b016      	add	sp, #88	@ 0x58
 8006c0c:	bd70      	pop	{r4, r5, r6, pc}
 8006c0e:	466a      	mov	r2, sp
 8006c10:	f000 f848 	bl	8006ca4 <_fstat_r>
 8006c14:	2800      	cmp	r0, #0
 8006c16:	dbec      	blt.n	8006bf2 <__swhatbuf_r+0x12>
 8006c18:	9901      	ldr	r1, [sp, #4]
 8006c1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006c1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006c22:	4259      	negs	r1, r3
 8006c24:	4159      	adcs	r1, r3
 8006c26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c2a:	e7eb      	b.n	8006c04 <__swhatbuf_r+0x24>

08006c2c <__smakebuf_r>:
 8006c2c:	898b      	ldrh	r3, [r1, #12]
 8006c2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c30:	079d      	lsls	r5, r3, #30
 8006c32:	4606      	mov	r6, r0
 8006c34:	460c      	mov	r4, r1
 8006c36:	d507      	bpl.n	8006c48 <__smakebuf_r+0x1c>
 8006c38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006c3c:	6023      	str	r3, [r4, #0]
 8006c3e:	6123      	str	r3, [r4, #16]
 8006c40:	2301      	movs	r3, #1
 8006c42:	6163      	str	r3, [r4, #20]
 8006c44:	b003      	add	sp, #12
 8006c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c48:	ab01      	add	r3, sp, #4
 8006c4a:	466a      	mov	r2, sp
 8006c4c:	f7ff ffc8 	bl	8006be0 <__swhatbuf_r>
 8006c50:	9f00      	ldr	r7, [sp, #0]
 8006c52:	4605      	mov	r5, r0
 8006c54:	4639      	mov	r1, r7
 8006c56:	4630      	mov	r0, r6
 8006c58:	f7ff faba 	bl	80061d0 <_malloc_r>
 8006c5c:	b948      	cbnz	r0, 8006c72 <__smakebuf_r+0x46>
 8006c5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c62:	059a      	lsls	r2, r3, #22
 8006c64:	d4ee      	bmi.n	8006c44 <__smakebuf_r+0x18>
 8006c66:	f023 0303 	bic.w	r3, r3, #3
 8006c6a:	f043 0302 	orr.w	r3, r3, #2
 8006c6e:	81a3      	strh	r3, [r4, #12]
 8006c70:	e7e2      	b.n	8006c38 <__smakebuf_r+0xc>
 8006c72:	89a3      	ldrh	r3, [r4, #12]
 8006c74:	6020      	str	r0, [r4, #0]
 8006c76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c7a:	81a3      	strh	r3, [r4, #12]
 8006c7c:	9b01      	ldr	r3, [sp, #4]
 8006c7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006c82:	b15b      	cbz	r3, 8006c9c <__smakebuf_r+0x70>
 8006c84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c88:	4630      	mov	r0, r6
 8006c8a:	f000 f81d 	bl	8006cc8 <_isatty_r>
 8006c8e:	b128      	cbz	r0, 8006c9c <__smakebuf_r+0x70>
 8006c90:	89a3      	ldrh	r3, [r4, #12]
 8006c92:	f023 0303 	bic.w	r3, r3, #3
 8006c96:	f043 0301 	orr.w	r3, r3, #1
 8006c9a:	81a3      	strh	r3, [r4, #12]
 8006c9c:	89a3      	ldrh	r3, [r4, #12]
 8006c9e:	431d      	orrs	r5, r3
 8006ca0:	81a5      	strh	r5, [r4, #12]
 8006ca2:	e7cf      	b.n	8006c44 <__smakebuf_r+0x18>

08006ca4 <_fstat_r>:
 8006ca4:	b538      	push	{r3, r4, r5, lr}
 8006ca6:	4d07      	ldr	r5, [pc, #28]	@ (8006cc4 <_fstat_r+0x20>)
 8006ca8:	2300      	movs	r3, #0
 8006caa:	4604      	mov	r4, r0
 8006cac:	4608      	mov	r0, r1
 8006cae:	4611      	mov	r1, r2
 8006cb0:	602b      	str	r3, [r5, #0]
 8006cb2:	f7fa fe33 	bl	800191c <_fstat>
 8006cb6:	1c43      	adds	r3, r0, #1
 8006cb8:	d102      	bne.n	8006cc0 <_fstat_r+0x1c>
 8006cba:	682b      	ldr	r3, [r5, #0]
 8006cbc:	b103      	cbz	r3, 8006cc0 <_fstat_r+0x1c>
 8006cbe:	6023      	str	r3, [r4, #0]
 8006cc0:	bd38      	pop	{r3, r4, r5, pc}
 8006cc2:	bf00      	nop
 8006cc4:	20000414 	.word	0x20000414

08006cc8 <_isatty_r>:
 8006cc8:	b538      	push	{r3, r4, r5, lr}
 8006cca:	4d06      	ldr	r5, [pc, #24]	@ (8006ce4 <_isatty_r+0x1c>)
 8006ccc:	2300      	movs	r3, #0
 8006cce:	4604      	mov	r4, r0
 8006cd0:	4608      	mov	r0, r1
 8006cd2:	602b      	str	r3, [r5, #0]
 8006cd4:	f7fa fe32 	bl	800193c <_isatty>
 8006cd8:	1c43      	adds	r3, r0, #1
 8006cda:	d102      	bne.n	8006ce2 <_isatty_r+0x1a>
 8006cdc:	682b      	ldr	r3, [r5, #0]
 8006cde:	b103      	cbz	r3, 8006ce2 <_isatty_r+0x1a>
 8006ce0:	6023      	str	r3, [r4, #0]
 8006ce2:	bd38      	pop	{r3, r4, r5, pc}
 8006ce4:	20000414 	.word	0x20000414

08006ce8 <_gettimeofday>:
 8006ce8:	4b02      	ldr	r3, [pc, #8]	@ (8006cf4 <_gettimeofday+0xc>)
 8006cea:	2258      	movs	r2, #88	@ 0x58
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf2:	4770      	bx	lr
 8006cf4:	20000414 	.word	0x20000414

08006cf8 <_init>:
 8006cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cfa:	bf00      	nop
 8006cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cfe:	bc08      	pop	{r3}
 8006d00:	469e      	mov	lr, r3
 8006d02:	4770      	bx	lr

08006d04 <_fini>:
 8006d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d06:	bf00      	nop
 8006d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d0a:	bc08      	pop	{r3}
 8006d0c:	469e      	mov	lr, r3
 8006d0e:	4770      	bx	lr
