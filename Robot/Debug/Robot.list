
Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ff4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800517c  0800517c  0000617c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051b4  080051b4  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  080051b4  080051b4  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051b4  080051b4  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051b4  080051b4  000061b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051b8  080051b8  000061b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080051bc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  2000000c  080051c8  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  080051c8  000071d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef5a  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000204d  00000000  00000000  00015f96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  00017fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a31  00000000  00000000  00018ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bc23  00000000  00000000  00019711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001086b  00000000  00000000  00035334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5eb9  00000000  00000000  00045b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eba58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003668  00000000  00000000  000eba9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000ef104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005164 	.word	0x08005164

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005164 	.word	0x08005164

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fd19 	bl	8000c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f833 	bl	800023c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f9bf 	bl	8000558 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001da:	f000 f98d 	bl	80004f8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80001de:	f000 f95b 	bl	8000498 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80001e2:	f000 f88b 	bl	80002fc <MX_TIM1_Init>
  MX_TIM16_Init();
 80001e6:	f000 f8dd 	bl	80003a4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,&rxData,1); // uruchomienie obs≈Çugi uart dla bluetooth hc-06
 80001ea:	2201      	movs	r2, #1
 80001ec:	490e      	ldr	r1, [pc, #56]	@ (8000228 <main+0x60>)
 80001ee:	480f      	ldr	r0, [pc, #60]	@ (800022c <main+0x64>)
 80001f0:	f003 fe3d 	bl	8003e6e <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start(&htim1);
 80001f4:	480e      	ldr	r0, [pc, #56]	@ (8000230 <main+0x68>)
 80001f6:	f002 fcff 	bl	8002bf8 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 80001fa:	2200      	movs	r2, #0
 80001fc:	2102      	movs	r1, #2
 80001fe:	480d      	ldr	r0, [pc, #52]	@ (8000234 <main+0x6c>)
 8000200:	f001 f884 	bl	800130c <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000204:	2100      	movs	r1, #0
 8000206:	480c      	ldr	r0, [pc, #48]	@ (8000238 <main+0x70>)
 8000208:	f002 fda4 	bl	8002d54 <HAL_TIM_PWM_Start>
  char receivedChar;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  set_ang(0, 0);
 800020c:	2100      	movs	r1, #0
 800020e:	2000      	movs	r0, #0
 8000210:	f000 fb1e 	bl	8000850 <set_ang>
  uint16_t axle=0;
 8000214:	2300      	movs	r3, #0
 8000216:	80fb      	strh	r3, [r7, #6]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //detectObstacle();
	  turnover(&axle, receivedChar);
 8000218:	7bfa      	ldrb	r2, [r7, #15]
 800021a:	1dbb      	adds	r3, r7, #6
 800021c:	4611      	mov	r1, r2
 800021e:	4618      	mov	r0, r3
 8000220:	f000 fa82 	bl	8000728 <turnover>
 8000224:	e7f8      	b.n	8000218 <main+0x50>
 8000226:	bf00      	nop
 8000228:	200001d0 	.word	0x200001d0
 800022c:	200000c0 	.word	0x200000c0
 8000230:	20000028 	.word	0x20000028
 8000234:	48000800 	.word	0x48000800
 8000238:	20000074 	.word	0x20000074

0800023c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b09c      	sub	sp, #112	@ 0x70
 8000240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000242:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000246:	2228      	movs	r2, #40	@ 0x28
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f004 ff5e 	bl	800510c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000254:	2200      	movs	r2, #0
 8000256:	601a      	str	r2, [r3, #0]
 8000258:	605a      	str	r2, [r3, #4]
 800025a:	609a      	str	r2, [r3, #8]
 800025c:	60da      	str	r2, [r3, #12]
 800025e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000260:	463b      	mov	r3, r7
 8000262:	2234      	movs	r2, #52	@ 0x34
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f004 ff50 	bl	800510c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800026c:	2301      	movs	r3, #1
 800026e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000270:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000274:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027a:	2301      	movs	r3, #1
 800027c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027e:	2302      	movs	r3, #2
 8000280:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000282:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000286:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000288:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800028c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000292:	4618      	mov	r0, r3
 8000294:	f001 f852 	bl	800133c <HAL_RCC_OscConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800029e:	f000 fb19 	bl	80008d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a2:	230f      	movs	r3, #15
 80002a4:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a6:	2302      	movs	r3, #2
 80002a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80002bc:	2102      	movs	r1, #2
 80002be:	4618      	mov	r0, r3
 80002c0:	f002 f87a 	bl	80023b8 <HAL_RCC_ClockConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002ca:	f000 fb03 	bl	80008d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 80002ce:	4b0a      	ldr	r3, [pc, #40]	@ (80002f8 <SystemClock_Config+0xbc>)
 80002d0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM16;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80002d6:	2300      	movs	r3, #0
 80002d8:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80002da:	2300      	movs	r3, #0
 80002dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002de:	463b      	mov	r3, r7
 80002e0:	4618      	mov	r0, r3
 80002e2:	f002 fa9f 	bl	8002824 <HAL_RCCEx_PeriphCLKConfig>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002ec:	f000 faf2 	bl	80008d4 <Error_Handler>
  }
}
 80002f0:	bf00      	nop
 80002f2:	3770      	adds	r7, #112	@ 0x70
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	00081001 	.word	0x00081001

080002fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b088      	sub	sp, #32
 8000300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000302:	f107 0310 	add.w	r3, r7, #16
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800031a:	4b20      	ldr	r3, [pc, #128]	@ (800039c <MX_TIM1_Init+0xa0>)
 800031c:	4a20      	ldr	r2, [pc, #128]	@ (80003a0 <MX_TIM1_Init+0xa4>)
 800031e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000320:	4b1e      	ldr	r3, [pc, #120]	@ (800039c <MX_TIM1_Init+0xa0>)
 8000322:	2247      	movs	r2, #71	@ 0x47
 8000324:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000326:	4b1d      	ldr	r3, [pc, #116]	@ (800039c <MX_TIM1_Init+0xa0>)
 8000328:	2200      	movs	r2, #0
 800032a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800032c:	4b1b      	ldr	r3, [pc, #108]	@ (800039c <MX_TIM1_Init+0xa0>)
 800032e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000332:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000334:	4b19      	ldr	r3, [pc, #100]	@ (800039c <MX_TIM1_Init+0xa0>)
 8000336:	2200      	movs	r2, #0
 8000338:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800033a:	4b18      	ldr	r3, [pc, #96]	@ (800039c <MX_TIM1_Init+0xa0>)
 800033c:	2200      	movs	r2, #0
 800033e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000340:	4b16      	ldr	r3, [pc, #88]	@ (800039c <MX_TIM1_Init+0xa0>)
 8000342:	2200      	movs	r2, #0
 8000344:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000346:	4815      	ldr	r0, [pc, #84]	@ (800039c <MX_TIM1_Init+0xa0>)
 8000348:	f002 fbfe 	bl	8002b48 <HAL_TIM_Base_Init>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000352:	f000 fabf 	bl	80008d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000356:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800035a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800035c:	f107 0310 	add.w	r3, r7, #16
 8000360:	4619      	mov	r1, r3
 8000362:	480e      	ldr	r0, [pc, #56]	@ (800039c <MX_TIM1_Init+0xa0>)
 8000364:	f002 fef0 	bl	8003148 <HAL_TIM_ConfigClockSource>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800036e:	f000 fab1 	bl	80008d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000372:	2300      	movs	r3, #0
 8000374:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000376:	2300      	movs	r3, #0
 8000378:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	4619      	mov	r1, r3
 8000382:	4806      	ldr	r0, [pc, #24]	@ (800039c <MX_TIM1_Init+0xa0>)
 8000384:	f003 fb7e 	bl	8003a84 <HAL_TIMEx_MasterConfigSynchronization>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800038e:	f000 faa1 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000392:	bf00      	nop
 8000394:	3720      	adds	r7, #32
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	20000028 	.word	0x20000028
 80003a0:	40012c00 	.word	0x40012c00

080003a4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b092      	sub	sp, #72	@ 0x48
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80003aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
 80003b8:	611a      	str	r2, [r3, #16]
 80003ba:	615a      	str	r2, [r3, #20]
 80003bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003be:	463b      	mov	r3, r7
 80003c0:	222c      	movs	r2, #44	@ 0x2c
 80003c2:	2100      	movs	r1, #0
 80003c4:	4618      	mov	r0, r3
 80003c6:	f004 fea1 	bl	800510c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80003ca:	4b31      	ldr	r3, [pc, #196]	@ (8000490 <MX_TIM16_Init+0xec>)
 80003cc:	4a31      	ldr	r2, [pc, #196]	@ (8000494 <MX_TIM16_Init+0xf0>)
 80003ce:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 71;
 80003d0:	4b2f      	ldr	r3, [pc, #188]	@ (8000490 <MX_TIM16_Init+0xec>)
 80003d2:	2247      	movs	r2, #71	@ 0x47
 80003d4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003d6:	4b2e      	ldr	r3, [pc, #184]	@ (8000490 <MX_TIM16_Init+0xec>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 19999;
 80003dc:	4b2c      	ldr	r3, [pc, #176]	@ (8000490 <MX_TIM16_Init+0xec>)
 80003de:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80003e2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003e4:	4b2a      	ldr	r3, [pc, #168]	@ (8000490 <MX_TIM16_Init+0xec>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80003ea:	4b29      	ldr	r3, [pc, #164]	@ (8000490 <MX_TIM16_Init+0xec>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003f0:	4b27      	ldr	r3, [pc, #156]	@ (8000490 <MX_TIM16_Init+0xec>)
 80003f2:	2280      	movs	r2, #128	@ 0x80
 80003f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80003f6:	4826      	ldr	r0, [pc, #152]	@ (8000490 <MX_TIM16_Init+0xec>)
 80003f8:	f002 fba6 	bl	8002b48 <HAL_TIM_Base_Init>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000402:	f000 fa67 	bl	80008d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000406:	4822      	ldr	r0, [pc, #136]	@ (8000490 <MX_TIM16_Init+0xec>)
 8000408:	f002 fc42 	bl	8002c90 <HAL_TIM_PWM_Init>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000412:	f000 fa5f 	bl	80008d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000416:	2360      	movs	r3, #96	@ 0x60
 8000418:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 800041a:	2300      	movs	r3, #0
 800041c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800041e:	2300      	movs	r3, #0
 8000420:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000422:	2300      	movs	r3, #0
 8000424:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000426:	2300      	movs	r3, #0
 8000428:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800042a:	2300      	movs	r3, #0
 800042c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800042e:	2300      	movs	r3, #0
 8000430:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000432:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000436:	2200      	movs	r2, #0
 8000438:	4619      	mov	r1, r3
 800043a:	4815      	ldr	r0, [pc, #84]	@ (8000490 <MX_TIM16_Init+0xec>)
 800043c:	f002 fd70 	bl	8002f20 <HAL_TIM_PWM_ConfigChannel>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000446:	f000 fa45 	bl	80008d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800044a:	2300      	movs	r3, #0
 800044c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800044e:	2300      	movs	r3, #0
 8000450:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000452:	2300      	movs	r3, #0
 8000454:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000456:	2300      	movs	r3, #0
 8000458:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800045a:	2300      	movs	r3, #0
 800045c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800045e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000462:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000464:	2300      	movs	r3, #0
 8000466:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000468:	2300      	movs	r3, #0
 800046a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800046c:	463b      	mov	r3, r7
 800046e:	4619      	mov	r1, r3
 8000470:	4807      	ldr	r0, [pc, #28]	@ (8000490 <MX_TIM16_Init+0xec>)
 8000472:	f003 fb6d 	bl	8003b50 <HAL_TIMEx_ConfigBreakDeadTime>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 800047c:	f000 fa2a 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000480:	4803      	ldr	r0, [pc, #12]	@ (8000490 <MX_TIM16_Init+0xec>)
 8000482:	f000 fa85 	bl	8000990 <HAL_TIM_MspPostInit>

}
 8000486:	bf00      	nop
 8000488:	3748      	adds	r7, #72	@ 0x48
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	20000074 	.word	0x20000074
 8000494:	40014400 	.word	0x40014400

08000498 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800049c:	4b14      	ldr	r3, [pc, #80]	@ (80004f0 <MX_USART1_UART_Init+0x58>)
 800049e:	4a15      	ldr	r2, [pc, #84]	@ (80004f4 <MX_USART1_UART_Init+0x5c>)
 80004a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80004a2:	4b13      	ldr	r3, [pc, #76]	@ (80004f0 <MX_USART1_UART_Init+0x58>)
 80004a4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80004a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004aa:	4b11      	ldr	r3, [pc, #68]	@ (80004f0 <MX_USART1_UART_Init+0x58>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004b0:	4b0f      	ldr	r3, [pc, #60]	@ (80004f0 <MX_USART1_UART_Init+0x58>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004b6:	4b0e      	ldr	r3, [pc, #56]	@ (80004f0 <MX_USART1_UART_Init+0x58>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004bc:	4b0c      	ldr	r3, [pc, #48]	@ (80004f0 <MX_USART1_UART_Init+0x58>)
 80004be:	220c      	movs	r2, #12
 80004c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004c2:	4b0b      	ldr	r3, [pc, #44]	@ (80004f0 <MX_USART1_UART_Init+0x58>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004c8:	4b09      	ldr	r3, [pc, #36]	@ (80004f0 <MX_USART1_UART_Init+0x58>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ce:	4b08      	ldr	r3, [pc, #32]	@ (80004f0 <MX_USART1_UART_Init+0x58>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004d4:	4b06      	ldr	r3, [pc, #24]	@ (80004f0 <MX_USART1_UART_Init+0x58>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004da:	4805      	ldr	r0, [pc, #20]	@ (80004f0 <MX_USART1_UART_Init+0x58>)
 80004dc:	f003 fbb0 	bl	8003c40 <HAL_UART_Init>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80004e6:	f000 f9f5 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	200000c0 	.word	0x200000c0
 80004f4:	40013800 	.word	0x40013800

080004f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004fc:	4b14      	ldr	r3, [pc, #80]	@ (8000550 <MX_USART2_UART_Init+0x58>)
 80004fe:	4a15      	ldr	r2, [pc, #84]	@ (8000554 <MX_USART2_UART_Init+0x5c>)
 8000500:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000502:	4b13      	ldr	r3, [pc, #76]	@ (8000550 <MX_USART2_UART_Init+0x58>)
 8000504:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000508:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800050a:	4b11      	ldr	r3, [pc, #68]	@ (8000550 <MX_USART2_UART_Init+0x58>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000510:	4b0f      	ldr	r3, [pc, #60]	@ (8000550 <MX_USART2_UART_Init+0x58>)
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000516:	4b0e      	ldr	r3, [pc, #56]	@ (8000550 <MX_USART2_UART_Init+0x58>)
 8000518:	2200      	movs	r2, #0
 800051a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800051c:	4b0c      	ldr	r3, [pc, #48]	@ (8000550 <MX_USART2_UART_Init+0x58>)
 800051e:	220c      	movs	r2, #12
 8000520:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000522:	4b0b      	ldr	r3, [pc, #44]	@ (8000550 <MX_USART2_UART_Init+0x58>)
 8000524:	2200      	movs	r2, #0
 8000526:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000528:	4b09      	ldr	r3, [pc, #36]	@ (8000550 <MX_USART2_UART_Init+0x58>)
 800052a:	2200      	movs	r2, #0
 800052c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800052e:	4b08      	ldr	r3, [pc, #32]	@ (8000550 <MX_USART2_UART_Init+0x58>)
 8000530:	2200      	movs	r2, #0
 8000532:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000534:	4b06      	ldr	r3, [pc, #24]	@ (8000550 <MX_USART2_UART_Init+0x58>)
 8000536:	2200      	movs	r2, #0
 8000538:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800053a:	4805      	ldr	r0, [pc, #20]	@ (8000550 <MX_USART2_UART_Init+0x58>)
 800053c:	f003 fb80 	bl	8003c40 <HAL_UART_Init>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000546:	f000 f9c5 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000148 	.word	0x20000148
 8000554:	40004400 	.word	0x40004400

08000558 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b08a      	sub	sp, #40	@ 0x28
 800055c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056e:	4b53      	ldr	r3, [pc, #332]	@ (80006bc <MX_GPIO_Init+0x164>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	4a52      	ldr	r2, [pc, #328]	@ (80006bc <MX_GPIO_Init+0x164>)
 8000574:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000578:	6153      	str	r3, [r2, #20]
 800057a:	4b50      	ldr	r3, [pc, #320]	@ (80006bc <MX_GPIO_Init+0x164>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000582:	613b      	str	r3, [r7, #16]
 8000584:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000586:	4b4d      	ldr	r3, [pc, #308]	@ (80006bc <MX_GPIO_Init+0x164>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	4a4c      	ldr	r2, [pc, #304]	@ (80006bc <MX_GPIO_Init+0x164>)
 800058c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000590:	6153      	str	r3, [r2, #20]
 8000592:	4b4a      	ldr	r3, [pc, #296]	@ (80006bc <MX_GPIO_Init+0x164>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059e:	4b47      	ldr	r3, [pc, #284]	@ (80006bc <MX_GPIO_Init+0x164>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	4a46      	ldr	r2, [pc, #280]	@ (80006bc <MX_GPIO_Init+0x164>)
 80005a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005a8:	6153      	str	r3, [r2, #20]
 80005aa:	4b44      	ldr	r3, [pc, #272]	@ (80006bc <MX_GPIO_Init+0x164>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b6:	4b41      	ldr	r3, [pc, #260]	@ (80006bc <MX_GPIO_Init+0x164>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	4a40      	ldr	r2, [pc, #256]	@ (80006bc <MX_GPIO_Init+0x164>)
 80005bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005c0:	6153      	str	r3, [r2, #20]
 80005c2:	4b3e      	ldr	r3, [pc, #248]	@ (80006bc <MX_GPIO_Init+0x164>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2102      	movs	r1, #2
 80005d2:	483b      	ldr	r0, [pc, #236]	@ (80006c0 <MX_GPIO_Init+0x168>)
 80005d4:	f000 fe9a 	bl	800130c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	2101      	movs	r1, #1
 80005dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005e0:	f000 fe94 	bl	800130c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005ea:	4836      	ldr	r0, [pc, #216]	@ (80006c4 <MX_GPIO_Init+0x16c>)
 80005ec:	f000 fe8e 	bl	800130c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005f6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000600:	f107 0314 	add.w	r3, r7, #20
 8000604:	4619      	mov	r1, r3
 8000606:	482e      	ldr	r0, [pc, #184]	@ (80006c0 <MX_GPIO_Init+0x168>)
 8000608:	f000 fd0e 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : ECHO_Pin DETECT5_Pin DETECT1_Pin DETECT2_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin|DETECT5_Pin|DETECT1_Pin|DETECT2_Pin;
 800060c:	f241 4305 	movw	r3, #5125	@ 0x1405
 8000610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000612:	2300      	movs	r3, #0
 8000614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	4619      	mov	r1, r3
 8000620:	4827      	ldr	r0, [pc, #156]	@ (80006c0 <MX_GPIO_Init+0x168>)
 8000622:	f000 fd01 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIGGER_Pin */
  GPIO_InitStruct.Pin = TRIGGER_Pin;
 8000626:	2302      	movs	r3, #2
 8000628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062a:	2301      	movs	r3, #1
 800062c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000632:	2300      	movs	r3, #0
 8000634:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	4619      	mov	r1, r3
 800063c:	4820      	ldr	r0, [pc, #128]	@ (80006c0 <MX_GPIO_Init+0x168>)
 800063e:	f000 fcf3 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000642:	2301      	movs	r3, #1
 8000644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000646:	2301      	movs	r3, #1
 8000648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064e:	2300      	movs	r3, #0
 8000650:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	4619      	mov	r1, r3
 8000658:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800065c:	f000 fce4 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000660:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	2301      	movs	r3, #1
 8000668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	2300      	movs	r3, #0
 8000670:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	4619      	mov	r1, r3
 8000678:	4812      	ldr	r0, [pc, #72]	@ (80006c4 <MX_GPIO_Init+0x16c>)
 800067a:	f000 fcd5 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : DETECT3_Pin */
  GPIO_InitStruct.Pin = DETECT3_Pin;
 800067e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000684:	2300      	movs	r3, #0
 8000686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DETECT3_GPIO_Port, &GPIO_InitStruct);
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	4619      	mov	r1, r3
 8000692:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000696:	f000 fcc7 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : DETECT4_Pin */
  GPIO_InitStruct.Pin = DETECT4_Pin;
 800069a:	2380      	movs	r3, #128	@ 0x80
 800069c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800069e:	2300      	movs	r3, #0
 80006a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DETECT4_GPIO_Port, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	4805      	ldr	r0, [pc, #20]	@ (80006c4 <MX_GPIO_Init+0x16c>)
 80006ae:	f000 fcbb 	bl	8001028 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006b2:	bf00      	nop
 80006b4:	3728      	adds	r7, #40	@ 0x28
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40021000 	.word	0x40021000
 80006c0:	48000800 	.word	0x48000800
 80006c4:	48000400 	.word	0x48000400

080006c8 <HAL_UART_RxCpltCallback>:
	}
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // funkcja do obs≈Çugi bt po uart na podstawie przerwania
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a10      	ldr	r2, [pc, #64]	@ (8000718 <HAL_UART_RxCpltCallback+0x50>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d119      	bne.n	800070e <HAL_UART_RxCpltCallback+0x46>
  {
    if(rxData==78) // Ascii value of 'N' is 78 (N for NO)
 80006da:	4b10      	ldr	r3, [pc, #64]	@ (800071c <HAL_UART_RxCpltCallback+0x54>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b4e      	cmp	r3, #78	@ 0x4e
 80006e0:	d106      	bne.n	80006f0 <HAL_UART_RxCpltCallback+0x28>
    {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006e8:	480d      	ldr	r0, [pc, #52]	@ (8000720 <HAL_UART_RxCpltCallback+0x58>)
 80006ea:	f000 fe0f 	bl	800130c <HAL_GPIO_WritePin>
 80006ee:	e009      	b.n	8000704 <HAL_UART_RxCpltCallback+0x3c>
    }
    else if (rxData==89) // Ascii value of 'Y' is 89 (Y for YES)
 80006f0:	4b0a      	ldr	r3, [pc, #40]	@ (800071c <HAL_UART_RxCpltCallback+0x54>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b59      	cmp	r3, #89	@ 0x59
 80006f6:	d105      	bne.n	8000704 <HAL_UART_RxCpltCallback+0x3c>
    {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006fe:	4808      	ldr	r0, [pc, #32]	@ (8000720 <HAL_UART_RxCpltCallback+0x58>)
 8000700:	f000 fe04 	bl	800130c <HAL_GPIO_WritePin>
    }
    HAL_UART_Receive_IT(&huart1,&rxData,1);
 8000704:	2201      	movs	r2, #1
 8000706:	4905      	ldr	r1, [pc, #20]	@ (800071c <HAL_UART_RxCpltCallback+0x54>)
 8000708:	4806      	ldr	r0, [pc, #24]	@ (8000724 <HAL_UART_RxCpltCallback+0x5c>)
 800070a:	f003 fbb0 	bl	8003e6e <HAL_UART_Receive_IT>
  }
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40013800 	.word	0x40013800
 800071c:	200001d0 	.word	0x200001d0
 8000720:	48000400 	.word	0x48000400
 8000724:	200000c0 	.word	0x200000c0

08000728 <turnover>:
void turnover(uint16_t *axle, char receivedChar){
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	460b      	mov	r3, r1
 8000732:	70fb      	strb	r3, [r7, #3]
	while ((*axle)> 0)
 8000734:	e01d      	b.n	8000772 <turnover+0x4a>
		  {
		      // Sprawdzenie dostƒôpno≈õci danych w strumieniu UART
		      if (HAL_UART_Receive(&huart2, &receivedChar, 1, 0) == HAL_OK)
 8000736:	1cf9      	adds	r1, r7, #3
 8000738:	2300      	movs	r3, #0
 800073a:	2201      	movs	r2, #1
 800073c:	4843      	ldr	r0, [pc, #268]	@ (800084c <turnover+0x124>)
 800073e:	f003 facd 	bl	8003cdc <HAL_UART_Receive>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d105      	bne.n	8000754 <turnover+0x2c>
		      {
		          // Obs≈Çuga odebranego znaku
		          if (receivedChar == 'a')
 8000748:	78fb      	ldrb	r3, [r7, #3]
 800074a:	2b61      	cmp	r3, #97	@ 0x61
 800074c:	d016      	beq.n	800077c <turnover+0x54>
		          {
		              // Przerwanie pƒôtli i obs≈Çuga znaku 'a'
		              break;
		          }
		          if(receivedChar == 'd');
 800074e:	78fb      	ldrb	r3, [r7, #3]
 8000750:	2b64      	cmp	r3, #100	@ 0x64
 8000752:	d16a      	bne.n	800082a <turnover+0x102>
		          else{
		        	  goto hell;
		          }
		      }
		      // Aktualizacja warto≈õci axle
		      (*axle)--;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	3b01      	subs	r3, #1
 800075a:	b29a      	uxth	r2, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	801a      	strh	r2, [r3, #0]
		      set_ang(*axle, 0);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	881b      	ldrh	r3, [r3, #0]
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f000 f872 	bl	8000850 <set_ang>
		      HAL_Delay(0.1);
 800076c:	2000      	movs	r0, #0
 800076e:	f000 faaf 	bl	8000cd0 <HAL_Delay>
	while ((*axle)> 0)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	881b      	ldrh	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d1dd      	bne.n	8000736 <turnover+0xe>
 800077a:	e01f      	b.n	80007bc <turnover+0x94>
		              break;
 800077c:	bf00      	nop
		  }

		  // Pƒôtla zwiƒôkszajƒÖca warto≈õƒá axle
		  while ((*axle) < 900)
 800077e:	e01d      	b.n	80007bc <turnover+0x94>
		  {
		      // Sprawdzenie dostƒôpno≈õci danych w strumieniu UART
		      if (HAL_UART_Receive(&huart2, &receivedChar, 1, 0) == HAL_OK)
 8000780:	1cf9      	adds	r1, r7, #3
 8000782:	2300      	movs	r3, #0
 8000784:	2201      	movs	r2, #1
 8000786:	4831      	ldr	r0, [pc, #196]	@ (800084c <turnover+0x124>)
 8000788:	f003 faa8 	bl	8003cdc <HAL_UART_Receive>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d105      	bne.n	800079e <turnover+0x76>
		      {
		          // Obs≈Çuga odebranego znaku
		          if (receivedChar == 'd')
 8000792:	78fb      	ldrb	r3, [r7, #3]
 8000794:	2b64      	cmp	r3, #100	@ 0x64
 8000796:	d017      	beq.n	80007c8 <turnover+0xa0>
		          {
		              // Przerwanie pƒôtli i obs≈Çuga znaku 'd'
		              break;
		          }
		          if(receivedChar == 'a');
 8000798:	78fb      	ldrb	r3, [r7, #3]
 800079a:	2b61      	cmp	r3, #97	@ 0x61
 800079c:	d147      	bne.n	800082e <turnover+0x106>
		          else{
		        	  goto hell;
		          }
		      }
		      // Aktualizacja warto≈õci axle
		      (*axle)++;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	3301      	adds	r3, #1
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	801a      	strh	r2, [r3, #0]
		      set_ang(*axle, 0);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 f84d 	bl	8000850 <set_ang>
		      HAL_Delay(0.1);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f000 fa8a 	bl	8000cd0 <HAL_Delay>
		  while ((*axle) < 900)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	881b      	ldrh	r3, [r3, #0]
 80007c0:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 80007c4:	d3dc      	bcc.n	8000780 <turnover+0x58>
		  }

		  // Pƒôtla ustawiajƒÖca warto≈õƒá axle na 450
		  while ((*axle) != 450)
 80007c6:	e038      	b.n	800083a <turnover+0x112>
		              break;
 80007c8:	bf00      	nop
		  while ((*axle) != 450)
 80007ca:	e036      	b.n	800083a <turnover+0x112>
		  {
		      // Sprawdzenie dostƒôpno≈õci danych w strumieniu UART
		      if (HAL_UART_Receive(&huart2, &receivedChar, 1, 0) == HAL_OK)
 80007cc:	1cf9      	adds	r1, r7, #3
 80007ce:	2300      	movs	r3, #0
 80007d0:	2201      	movs	r2, #1
 80007d2:	481e      	ldr	r0, [pc, #120]	@ (800084c <turnover+0x124>)
 80007d4:	f003 fa82 	bl	8003cdc <HAL_UART_Receive>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d105      	bne.n	80007ea <turnover+0xc2>
		      {
		          // Obs≈Çuga odebranego znaku
		          if (receivedChar == 'a' || receivedChar == 'd')
 80007de:	78fb      	ldrb	r3, [r7, #3]
 80007e0:	2b61      	cmp	r3, #97	@ 0x61
 80007e2:	d02f      	beq.n	8000844 <turnover+0x11c>
 80007e4:	78fb      	ldrb	r3, [r7, #3]
 80007e6:	2b64      	cmp	r3, #100	@ 0x64
 80007e8:	d02c      	beq.n	8000844 <turnover+0x11c>
		              // Przerwanie pƒôtli i obs≈Çuga znaku 'a' lub 'd'
		              break;
		          }
		      }
		      // Aktualizacja warto≈õci axle
		      if ((*axle) < 450)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 80007f2:	d205      	bcs.n	8000800 <turnover+0xd8>
		      {
		          (*axle)++;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	881b      	ldrh	r3, [r3, #0]
 80007f8:	3301      	adds	r3, #1
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	801a      	strh	r2, [r3, #0]
		      }
		      if ((*axle) > 450)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8000808:	d905      	bls.n	8000816 <turnover+0xee>
		      {
		          (*axle)--;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	881b      	ldrh	r3, [r3, #0]
 800080e:	3b01      	subs	r3, #1
 8000810:	b29a      	uxth	r2, r3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	801a      	strh	r2, [r3, #0]
		      }
		      set_ang(*axle, 0);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	881b      	ldrh	r3, [r3, #0]
 800081a:	2100      	movs	r1, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f000 f817 	bl	8000850 <set_ang>
		      HAL_Delay(0.1);
 8000822:	2000      	movs	r0, #0
 8000824:	f000 fa54 	bl	8000cd0 <HAL_Delay>
 8000828:	e002      	b.n	8000830 <turnover+0x108>
		        	  goto hell;
 800082a:	bf00      	nop
 800082c:	e000      	b.n	8000830 <turnover+0x108>
		        	  goto hell;
 800082e:	bf00      	nop

		      hell: set_ang(450, 0);
 8000830:	2100      	movs	r1, #0
 8000832:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000836:	f000 f80b 	bl	8000850 <set_ang>
		  while ((*axle) != 450)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8000842:	d1c3      	bne.n	80007cc <turnover+0xa4>
		  }
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000148 	.word	0x20000148

08000850 <set_ang>:
void set_ang(uint16_t ang, uint8_t mode)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	460a      	mov	r2, r1
 800085a:	80fb      	strh	r3, [r7, #6]
 800085c:	4613      	mov	r3, r2
 800085e:	717b      	strb	r3, [r7, #5]
	uint16_t val;

	if(ang > ANGLE_MAX)
 8000860:	88fb      	ldrh	r3, [r7, #6]
 8000862:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8000866:	d902      	bls.n	800086e <set_ang+0x1e>
	{
		ang = ANGLE_MAX;
 8000868:	f44f 7361 	mov.w	r3, #900	@ 0x384
 800086c:	80fb      	strh	r3, [r7, #6]
	else if (ang < ANGLE_MIN)
	{
		ang = ANGLE_MIN;
	}

	if(mode)
 800086e:	797b      	ldrb	r3, [r7, #5]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d010      	beq.n	8000896 <set_ang+0x46>
	{
		val = PWM_MIN + ((ang - ANGLE_MIN) * STEP) / 1000;
 8000874:	88fa      	ldrh	r2, [r7, #6]
 8000876:	4613      	mov	r3, r2
 8000878:	015b      	lsls	r3, r3, #5
 800087a:	4413      	add	r3, r2
 800087c:	015b      	lsls	r3, r3, #5
 800087e:	1a9b      	subs	r3, r3, r2
 8000880:	4a12      	ldr	r2, [pc, #72]	@ (80008cc <set_ang+0x7c>)
 8000882:	fb82 1203 	smull	r1, r2, r2, r3
 8000886:	1192      	asrs	r2, r2, #6
 8000888:	17db      	asrs	r3, r3, #31
 800088a:	1ad3      	subs	r3, r2, r3
 800088c:	b29b      	uxth	r3, r3
 800088e:	f203 434c 	addw	r3, r3, #1100	@ 0x44c
 8000892:	81fb      	strh	r3, [r7, #14]
 8000894:	e00f      	b.n	80008b6 <set_ang+0x66>
	}
	else
	{
		val = PWM_MAX - ((ang - ANGLE_MIN) * STEP) / 1000;
 8000896:	88fa      	ldrh	r2, [r7, #6]
 8000898:	4613      	mov	r3, r2
 800089a:	015b      	lsls	r3, r3, #5
 800089c:	4413      	add	r3, r2
 800089e:	015b      	lsls	r3, r3, #5
 80008a0:	1a9b      	subs	r3, r3, r2
 80008a2:	4a0a      	ldr	r2, [pc, #40]	@ (80008cc <set_ang+0x7c>)
 80008a4:	fb82 1203 	smull	r1, r2, r2, r3
 80008a8:	1192      	asrs	r2, r2, #6
 80008aa:	17db      	asrs	r3, r3, #31
 80008ac:	1a9b      	subs	r3, r3, r2
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	f603 0302 	addw	r3, r3, #2050	@ 0x802
 80008b4:	81fb      	strh	r3, [r7, #14]
	}

	__HAL_TIM_SET_COMPARE(&TIM_NO, TIM_CH_NO, val);
 80008b6:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <set_ang+0x80>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	89fa      	ldrh	r2, [r7, #14]
 80008bc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80008be:	bf00      	nop
 80008c0:	3714      	adds	r7, #20
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	10624dd3 	.word	0x10624dd3
 80008d0:	20000074 	.word	0x20000074

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <Error_Handler+0x8>

080008e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <HAL_MspInit+0x44>)
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000924 <HAL_MspInit+0x44>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6193      	str	r3, [r2, #24]
 80008f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <HAL_MspInit+0x44>)
 80008f4:	699b      	ldr	r3, [r3, #24]
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <HAL_MspInit+0x44>)
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	4a08      	ldr	r2, [pc, #32]	@ (8000924 <HAL_MspInit+0x44>)
 8000904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000908:	61d3      	str	r3, [r2, #28]
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <HAL_MspInit+0x44>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000916:	2007      	movs	r0, #7
 8000918:	f000 face 	bl	8000eb8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40021000 	.word	0x40021000

08000928 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a13      	ldr	r2, [pc, #76]	@ (8000984 <HAL_TIM_Base_MspInit+0x5c>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d10c      	bne.n	8000954 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800093a:	4b13      	ldr	r3, [pc, #76]	@ (8000988 <HAL_TIM_Base_MspInit+0x60>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	4a12      	ldr	r2, [pc, #72]	@ (8000988 <HAL_TIM_Base_MspInit+0x60>)
 8000940:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000944:	6193      	str	r3, [r2, #24]
 8000946:	4b10      	ldr	r3, [pc, #64]	@ (8000988 <HAL_TIM_Base_MspInit+0x60>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000952:	e010      	b.n	8000976 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a0c      	ldr	r2, [pc, #48]	@ (800098c <HAL_TIM_Base_MspInit+0x64>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d10b      	bne.n	8000976 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800095e:	4b0a      	ldr	r3, [pc, #40]	@ (8000988 <HAL_TIM_Base_MspInit+0x60>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	4a09      	ldr	r2, [pc, #36]	@ (8000988 <HAL_TIM_Base_MspInit+0x60>)
 8000964:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000968:	6193      	str	r3, [r2, #24]
 800096a:	4b07      	ldr	r3, [pc, #28]	@ (8000988 <HAL_TIM_Base_MspInit+0x60>)
 800096c:	699b      	ldr	r3, [r3, #24]
 800096e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
}
 8000976:	bf00      	nop
 8000978:	3714      	adds	r7, #20
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40012c00 	.word	0x40012c00
 8000988:	40021000 	.word	0x40021000
 800098c:	40014400 	.word	0x40014400

08000990 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a11      	ldr	r2, [pc, #68]	@ (80009f4 <HAL_TIM_MspPostInit+0x64>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d11c      	bne.n	80009ec <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <HAL_TIM_MspPostInit+0x68>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	4a10      	ldr	r2, [pc, #64]	@ (80009f8 <HAL_TIM_MspPostInit+0x68>)
 80009b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009bc:	6153      	str	r3, [r2, #20]
 80009be:	4b0e      	ldr	r3, [pc, #56]	@ (80009f8 <HAL_TIM_MspPostInit+0x68>)
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009ca:	2340      	movs	r3, #64	@ 0x40
 80009cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80009da:	2301      	movs	r3, #1
 80009dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	f107 030c 	add.w	r3, r7, #12
 80009e2:	4619      	mov	r1, r3
 80009e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009e8:	f000 fb1e 	bl	8001028 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80009ec:	bf00      	nop
 80009ee:	3720      	adds	r7, #32
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40014400 	.word	0x40014400
 80009f8:	40021000 	.word	0x40021000

080009fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08c      	sub	sp, #48	@ 0x30
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a37      	ldr	r2, [pc, #220]	@ (8000af8 <HAL_UART_MspInit+0xfc>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d132      	bne.n	8000a84 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a1e:	4b37      	ldr	r3, [pc, #220]	@ (8000afc <HAL_UART_MspInit+0x100>)
 8000a20:	699b      	ldr	r3, [r3, #24]
 8000a22:	4a36      	ldr	r2, [pc, #216]	@ (8000afc <HAL_UART_MspInit+0x100>)
 8000a24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a28:	6193      	str	r3, [r2, #24]
 8000a2a:	4b34      	ldr	r3, [pc, #208]	@ (8000afc <HAL_UART_MspInit+0x100>)
 8000a2c:	699b      	ldr	r3, [r3, #24]
 8000a2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a32:	61bb      	str	r3, [r7, #24]
 8000a34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	4b31      	ldr	r3, [pc, #196]	@ (8000afc <HAL_UART_MspInit+0x100>)
 8000a38:	695b      	ldr	r3, [r3, #20]
 8000a3a:	4a30      	ldr	r2, [pc, #192]	@ (8000afc <HAL_UART_MspInit+0x100>)
 8000a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a40:	6153      	str	r3, [r2, #20]
 8000a42:	4b2e      	ldr	r3, [pc, #184]	@ (8000afc <HAL_UART_MspInit+0x100>)
 8000a44:	695b      	ldr	r3, [r3, #20]
 8000a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a4e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a60:	2307      	movs	r3, #7
 8000a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6e:	f000 fadb 	bl	8001028 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	2025      	movs	r0, #37	@ 0x25
 8000a78:	f000 fa29 	bl	8000ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a7c:	2025      	movs	r0, #37	@ 0x25
 8000a7e:	f000 fa42 	bl	8000f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a82:	e035      	b.n	8000af0 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART2)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a1d      	ldr	r2, [pc, #116]	@ (8000b00 <HAL_UART_MspInit+0x104>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d130      	bne.n	8000af0 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000afc <HAL_UART_MspInit+0x100>)
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	4a1a      	ldr	r2, [pc, #104]	@ (8000afc <HAL_UART_MspInit+0x100>)
 8000a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a98:	61d3      	str	r3, [r2, #28]
 8000a9a:	4b18      	ldr	r3, [pc, #96]	@ (8000afc <HAL_UART_MspInit+0x100>)
 8000a9c:	69db      	ldr	r3, [r3, #28]
 8000a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <HAL_UART_MspInit+0x100>)
 8000aa8:	695b      	ldr	r3, [r3, #20]
 8000aaa:	4a14      	ldr	r2, [pc, #80]	@ (8000afc <HAL_UART_MspInit+0x100>)
 8000aac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ab0:	6153      	str	r3, [r2, #20]
 8000ab2:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <HAL_UART_MspInit+0x100>)
 8000ab4:	695b      	ldr	r3, [r3, #20]
 8000ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000abe:	230c      	movs	r3, #12
 8000ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ace:	2307      	movs	r3, #7
 8000ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000adc:	f000 faa4 	bl	8001028 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2026      	movs	r0, #38	@ 0x26
 8000ae6:	f000 f9f2 	bl	8000ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000aea:	2026      	movs	r0, #38	@ 0x26
 8000aec:	f000 fa0b 	bl	8000f06 <HAL_NVIC_EnableIRQ>
}
 8000af0:	bf00      	nop
 8000af2:	3730      	adds	r7, #48	@ 0x30
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40013800 	.word	0x40013800
 8000afc:	40021000 	.word	0x40021000
 8000b00:	40004400 	.word	0x40004400

08000b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <NMI_Handler+0x4>

08000b0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <HardFault_Handler+0x4>

08000b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <MemManage_Handler+0x4>

08000b1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <BusFault_Handler+0x4>

08000b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <UsageFault_Handler+0x4>

08000b2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5a:	f000 f899 	bl	8000c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b68:	4802      	ldr	r0, [pc, #8]	@ (8000b74 <USART1_IRQHandler+0x10>)
 8000b6a:	f003 f9c5 	bl	8003ef8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200000c0 	.word	0x200000c0

08000b78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b7c:	4802      	ldr	r0, [pc, #8]	@ (8000b88 <USART2_IRQHandler+0x10>)
 8000b7e:	f003 f9bb 	bl	8003ef8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000148 	.word	0x20000148

08000b8c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b90:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <SystemInit+0x20>)
 8000b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b96:	4a05      	ldr	r2, [pc, #20]	@ (8000bac <SystemInit+0x20>)
 8000b98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <Reset_Handler>:
 8000bb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000be8 <LoopForever+0x2>
 8000bb4:	f7ff ffea 	bl	8000b8c <SystemInit>
 8000bb8:	480c      	ldr	r0, [pc, #48]	@ (8000bec <LoopForever+0x6>)
 8000bba:	490d      	ldr	r1, [pc, #52]	@ (8000bf0 <LoopForever+0xa>)
 8000bbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf4 <LoopForever+0xe>)
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:
 8000bc2:	58d4      	ldr	r4, [r2, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:
 8000bc8:	18c4      	adds	r4, r0, r3
 8000bca:	428c      	cmp	r4, r1
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>
 8000bce:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf8 <LoopForever+0x12>)
 8000bd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000bfc <LoopForever+0x16>)
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:
 8000bd6:	6013      	str	r3, [r2, #0]
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:
 8000bda:	42a2      	cmp	r2, r4
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>
 8000bde:	f004 fa9d 	bl	800511c <__libc_init_array>
 8000be2:	f7ff faf1 	bl	80001c8 <main>

08000be6 <LoopForever>:
 8000be6:	e7fe      	b.n	8000be6 <LoopForever>
 8000be8:	20004000 	.word	0x20004000
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	2000000c 	.word	0x2000000c
 8000bf4:	080051bc 	.word	0x080051bc
 8000bf8:	2000000c 	.word	0x2000000c
 8000bfc:	200001d8 	.word	0x200001d8

08000c00 <ADC1_IRQHandler>:
 8000c00:	e7fe      	b.n	8000c00 <ADC1_IRQHandler>
	...

08000c04 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c08:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <HAL_Init+0x28>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a07      	ldr	r2, [pc, #28]	@ (8000c2c <HAL_Init+0x28>)
 8000c0e:	f043 0310 	orr.w	r3, r3, #16
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c14:	2003      	movs	r0, #3
 8000c16:	f000 f94f 	bl	8000eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f000 f808 	bl	8000c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c20:	f7ff fe5e 	bl	80008e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40022000 	.word	0x40022000

08000c30 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c38:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <HAL_InitTick+0x54>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4b12      	ldr	r3, [pc, #72]	@ (8000c88 <HAL_InitTick+0x58>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	4619      	mov	r1, r3
 8000c42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 f967 	bl	8000f22 <HAL_SYSTICK_Config>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00e      	b.n	8000c7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b0f      	cmp	r3, #15
 8000c62:	d80a      	bhi.n	8000c7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c64:	2200      	movs	r2, #0
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	f000 f92f 	bl	8000ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c70:	4a06      	ldr	r2, [pc, #24]	@ (8000c8c <HAL_InitTick+0x5c>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c76:	2300      	movs	r3, #0
 8000c78:	e000      	b.n	8000c7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000000 	.word	0x20000000
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	20000004 	.word	0x20000004

08000c90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <HAL_IncTick+0x20>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <HAL_IncTick+0x24>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a04      	ldr	r2, [pc, #16]	@ (8000cb4 <HAL_IncTick+0x24>)
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	200001d4 	.word	0x200001d4

08000cb8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cbc:	4b03      	ldr	r3, [pc, #12]	@ (8000ccc <HAL_GetTick+0x14>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	200001d4 	.word	0x200001d4

08000cd0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd8:	f7ff ffee 	bl	8000cb8 <HAL_GetTick>
 8000cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce8:	d005      	beq.n	8000cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cea:	4b0a      	ldr	r3, [pc, #40]	@ (8000d14 <HAL_Delay+0x44>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000cf6:	bf00      	nop
 8000cf8:	f7ff ffde 	bl	8000cb8 <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d8f7      	bhi.n	8000cf8 <HAL_Delay+0x28>
  {
  }
}
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000008 	.word	0x20000008

08000d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d28:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d34:	4013      	ands	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	@ (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	60d3      	str	r3, [r2, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d64:	4b04      	ldr	r3, [pc, #16]	@ (8000d78 <__NVIC_GetPriorityGrouping+0x18>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	f003 0307 	and.w	r3, r3, #7
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	db0b      	blt.n	8000da6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	f003 021f 	and.w	r2, r3, #31
 8000d94:	4907      	ldr	r1, [pc, #28]	@ (8000db4 <__NVIC_EnableIRQ+0x38>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	095b      	lsrs	r3, r3, #5
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000e100 	.word	0xe000e100

08000db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	6039      	str	r1, [r7, #0]
 8000dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	db0a      	blt.n	8000de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	490c      	ldr	r1, [pc, #48]	@ (8000e04 <__NVIC_SetPriority+0x4c>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	0112      	lsls	r2, r2, #4
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	440b      	add	r3, r1
 8000ddc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de0:	e00a      	b.n	8000df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4908      	ldr	r1, [pc, #32]	@ (8000e08 <__NVIC_SetPriority+0x50>)
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	f003 030f 	and.w	r3, r3, #15
 8000dee:	3b04      	subs	r3, #4
 8000df0:	0112      	lsls	r2, r2, #4
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	440b      	add	r3, r1
 8000df6:	761a      	strb	r2, [r3, #24]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000e100 	.word	0xe000e100
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b089      	sub	sp, #36	@ 0x24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f1c3 0307 	rsb	r3, r3, #7
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	bf28      	it	cs
 8000e2a:	2304      	movcs	r3, #4
 8000e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3304      	adds	r3, #4
 8000e32:	2b06      	cmp	r3, #6
 8000e34:	d902      	bls.n	8000e3c <NVIC_EncodePriority+0x30>
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3b03      	subs	r3, #3
 8000e3a:	e000      	b.n	8000e3e <NVIC_EncodePriority+0x32>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	f04f 32ff 	mov.w	r2, #4294967295
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	401a      	ands	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e54:	f04f 31ff 	mov.w	r1, #4294967295
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5e:	43d9      	mvns	r1, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	4313      	orrs	r3, r2
         );
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3724      	adds	r7, #36	@ 0x24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
	...

08000e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e84:	d301      	bcc.n	8000e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e86:	2301      	movs	r3, #1
 8000e88:	e00f      	b.n	8000eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb4 <SysTick_Config+0x40>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e92:	210f      	movs	r1, #15
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295
 8000e98:	f7ff ff8e 	bl	8000db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e9c:	4b05      	ldr	r3, [pc, #20]	@ (8000eb4 <SysTick_Config+0x40>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea2:	4b04      	ldr	r3, [pc, #16]	@ (8000eb4 <SysTick_Config+0x40>)
 8000ea4:	2207      	movs	r2, #7
 8000ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	e000e010 	.word	0xe000e010

08000eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff ff29 	bl	8000d18 <__NVIC_SetPriorityGrouping>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b086      	sub	sp, #24
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee0:	f7ff ff3e 	bl	8000d60 <__NVIC_GetPriorityGrouping>
 8000ee4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	68b9      	ldr	r1, [r7, #8]
 8000eea:	6978      	ldr	r0, [r7, #20]
 8000eec:	f7ff ff8e 	bl	8000e0c <NVIC_EncodePriority>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff5d 	bl	8000db8 <__NVIC_SetPriority>
}
 8000efe:	bf00      	nop
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff31 	bl	8000d7c <__NVIC_EnableIRQ>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff ffa2 	bl	8000e74 <SysTick_Config>
 8000f30:	4603      	mov	r3, r0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d008      	beq.n	8000f5e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2204      	movs	r2, #4
 8000f50:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e020      	b.n	8000fa0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f022 020e 	bic.w	r2, r2, #14
 8000f6c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f022 0201 	bic.w	r2, r2, #1
 8000f7c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f86:	2101      	movs	r1, #1
 8000f88:	fa01 f202 	lsl.w	r2, r1, r2
 8000f8c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2201      	movs	r2, #1
 8000f92:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d005      	beq.n	8000fce <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2204      	movs	r2, #4
 8000fc6:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	73fb      	strb	r3, [r7, #15]
 8000fcc:	e027      	b.n	800101e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f022 020e 	bic.w	r2, r2, #14
 8000fdc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f022 0201 	bic.w	r2, r2, #1
 8000fec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2201      	movs	r2, #1
 8001002:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	4798      	blx	r3
    } 
  }
  return status;
 800101e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001028:	b480      	push	{r7}
 800102a:	b087      	sub	sp, #28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001036:	e14e      	b.n	80012d6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	2101      	movs	r1, #1
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	fa01 f303 	lsl.w	r3, r1, r3
 8001044:	4013      	ands	r3, r2
 8001046:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 8140 	beq.w	80012d0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	2b01      	cmp	r3, #1
 800105a:	d005      	beq.n	8001068 <HAL_GPIO_Init+0x40>
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d130      	bne.n	80010ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	2203      	movs	r2, #3
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	68da      	ldr	r2, [r3, #12]
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4313      	orrs	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800109e:	2201      	movs	r2, #1
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	091b      	lsrs	r3, r3, #4
 80010b4:	f003 0201 	and.w	r2, r3, #1
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	2b03      	cmp	r3, #3
 80010d4:	d017      	beq.n	8001106 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	2203      	movs	r2, #3
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	689a      	ldr	r2, [r3, #8]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d123      	bne.n	800115a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	08da      	lsrs	r2, r3, #3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3208      	adds	r2, #8
 800111a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800111e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	220f      	movs	r2, #15
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4013      	ands	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	691a      	ldr	r2, [r3, #16]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	08da      	lsrs	r2, r3, #3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3208      	adds	r2, #8
 8001154:	6939      	ldr	r1, [r7, #16]
 8001156:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	2203      	movs	r2, #3
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4013      	ands	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0203 	and.w	r2, r3, #3
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 809a 	beq.w	80012d0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119c:	4b55      	ldr	r3, [pc, #340]	@ (80012f4 <HAL_GPIO_Init+0x2cc>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	4a54      	ldr	r2, [pc, #336]	@ (80012f4 <HAL_GPIO_Init+0x2cc>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6193      	str	r3, [r2, #24]
 80011a8:	4b52      	ldr	r3, [pc, #328]	@ (80012f4 <HAL_GPIO_Init+0x2cc>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011b4:	4a50      	ldr	r2, [pc, #320]	@ (80012f8 <HAL_GPIO_Init+0x2d0>)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	089b      	lsrs	r3, r3, #2
 80011ba:	3302      	adds	r3, #2
 80011bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	220f      	movs	r2, #15
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011de:	d013      	beq.n	8001208 <HAL_GPIO_Init+0x1e0>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a46      	ldr	r2, [pc, #280]	@ (80012fc <HAL_GPIO_Init+0x2d4>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d00d      	beq.n	8001204 <HAL_GPIO_Init+0x1dc>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a45      	ldr	r2, [pc, #276]	@ (8001300 <HAL_GPIO_Init+0x2d8>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d007      	beq.n	8001200 <HAL_GPIO_Init+0x1d8>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a44      	ldr	r2, [pc, #272]	@ (8001304 <HAL_GPIO_Init+0x2dc>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d101      	bne.n	80011fc <HAL_GPIO_Init+0x1d4>
 80011f8:	2303      	movs	r3, #3
 80011fa:	e006      	b.n	800120a <HAL_GPIO_Init+0x1e2>
 80011fc:	2305      	movs	r3, #5
 80011fe:	e004      	b.n	800120a <HAL_GPIO_Init+0x1e2>
 8001200:	2302      	movs	r3, #2
 8001202:	e002      	b.n	800120a <HAL_GPIO_Init+0x1e2>
 8001204:	2301      	movs	r3, #1
 8001206:	e000      	b.n	800120a <HAL_GPIO_Init+0x1e2>
 8001208:	2300      	movs	r3, #0
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	f002 0203 	and.w	r2, r2, #3
 8001210:	0092      	lsls	r2, r2, #2
 8001212:	4093      	lsls	r3, r2
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800121a:	4937      	ldr	r1, [pc, #220]	@ (80012f8 <HAL_GPIO_Init+0x2d0>)
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	089b      	lsrs	r3, r3, #2
 8001220:	3302      	adds	r3, #2
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001228:	4b37      	ldr	r3, [pc, #220]	@ (8001308 <HAL_GPIO_Init+0x2e0>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	43db      	mvns	r3, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800124c:	4a2e      	ldr	r2, [pc, #184]	@ (8001308 <HAL_GPIO_Init+0x2e0>)
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001252:	4b2d      	ldr	r3, [pc, #180]	@ (8001308 <HAL_GPIO_Init+0x2e0>)
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	43db      	mvns	r3, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4013      	ands	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001276:	4a24      	ldr	r2, [pc, #144]	@ (8001308 <HAL_GPIO_Init+0x2e0>)
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800127c:	4b22      	ldr	r3, [pc, #136]	@ (8001308 <HAL_GPIO_Init+0x2e0>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	43db      	mvns	r3, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012a0:	4a19      	ldr	r2, [pc, #100]	@ (8001308 <HAL_GPIO_Init+0x2e0>)
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012a6:	4b18      	ldr	r3, [pc, #96]	@ (8001308 <HAL_GPIO_Init+0x2e0>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001308 <HAL_GPIO_Init+0x2e0>)
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	3301      	adds	r3, #1
 80012d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	fa22 f303 	lsr.w	r3, r2, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f47f aea9 	bne.w	8001038 <HAL_GPIO_Init+0x10>
  }
}
 80012e6:	bf00      	nop
 80012e8:	bf00      	nop
 80012ea:	371c      	adds	r7, #28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40010000 	.word	0x40010000
 80012fc:	48000400 	.word	0x48000400
 8001300:	48000800 	.word	0x48000800
 8001304:	48000c00 	.word	0x48000c00
 8001308:	40010400 	.word	0x40010400

0800130c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
 8001318:	4613      	mov	r3, r2
 800131a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800131c:	787b      	ldrb	r3, [r7, #1]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001322:	887a      	ldrh	r2, [r7, #2]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001328:	e002      	b.n	8001330 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800132a:	887a      	ldrh	r2, [r7, #2]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001342:	af00      	add	r7, sp, #0
 8001344:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001348:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800134c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800134e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001352:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d102      	bne.n	8001362 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	f001 b823 	b.w	80023a8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001362:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001366:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 817d 	beq.w	8001672 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001378:	4bbc      	ldr	r3, [pc, #752]	@ (800166c <HAL_RCC_OscConfig+0x330>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 030c 	and.w	r3, r3, #12
 8001380:	2b04      	cmp	r3, #4
 8001382:	d00c      	beq.n	800139e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001384:	4bb9      	ldr	r3, [pc, #740]	@ (800166c <HAL_RCC_OscConfig+0x330>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 030c 	and.w	r3, r3, #12
 800138c:	2b08      	cmp	r3, #8
 800138e:	d15c      	bne.n	800144a <HAL_RCC_OscConfig+0x10e>
 8001390:	4bb6      	ldr	r3, [pc, #728]	@ (800166c <HAL_RCC_OscConfig+0x330>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800139c:	d155      	bne.n	800144a <HAL_RCC_OscConfig+0x10e>
 800139e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013a2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80013aa:	fa93 f3a3 	rbit	r3, r3
 80013ae:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80013b2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b6:	fab3 f383 	clz	r3, r3
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	095b      	lsrs	r3, r3, #5
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d102      	bne.n	80013d0 <HAL_RCC_OscConfig+0x94>
 80013ca:	4ba8      	ldr	r3, [pc, #672]	@ (800166c <HAL_RCC_OscConfig+0x330>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	e015      	b.n	80013fc <HAL_RCC_OscConfig+0xc0>
 80013d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013d4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80013dc:	fa93 f3a3 	rbit	r3, r3
 80013e0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80013e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013e8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80013ec:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80013f0:	fa93 f3a3 	rbit	r3, r3
 80013f4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80013f8:	4b9c      	ldr	r3, [pc, #624]	@ (800166c <HAL_RCC_OscConfig+0x330>)
 80013fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013fc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001400:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001404:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001408:	fa92 f2a2 	rbit	r2, r2
 800140c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001410:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001414:	fab2 f282 	clz	r2, r2
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	f042 0220 	orr.w	r2, r2, #32
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	f002 021f 	and.w	r2, r2, #31
 8001424:	2101      	movs	r1, #1
 8001426:	fa01 f202 	lsl.w	r2, r1, r2
 800142a:	4013      	ands	r3, r2
 800142c:	2b00      	cmp	r3, #0
 800142e:	f000 811f 	beq.w	8001670 <HAL_RCC_OscConfig+0x334>
 8001432:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001436:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	f040 8116 	bne.w	8001670 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	f000 bfaf 	b.w	80023a8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800144a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800144e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800145a:	d106      	bne.n	800146a <HAL_RCC_OscConfig+0x12e>
 800145c:	4b83      	ldr	r3, [pc, #524]	@ (800166c <HAL_RCC_OscConfig+0x330>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a82      	ldr	r2, [pc, #520]	@ (800166c <HAL_RCC_OscConfig+0x330>)
 8001462:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001466:	6013      	str	r3, [r2, #0]
 8001468:	e036      	b.n	80014d8 <HAL_RCC_OscConfig+0x19c>
 800146a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800146e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10c      	bne.n	8001494 <HAL_RCC_OscConfig+0x158>
 800147a:	4b7c      	ldr	r3, [pc, #496]	@ (800166c <HAL_RCC_OscConfig+0x330>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a7b      	ldr	r2, [pc, #492]	@ (800166c <HAL_RCC_OscConfig+0x330>)
 8001480:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	4b79      	ldr	r3, [pc, #484]	@ (800166c <HAL_RCC_OscConfig+0x330>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a78      	ldr	r2, [pc, #480]	@ (800166c <HAL_RCC_OscConfig+0x330>)
 800148c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	e021      	b.n	80014d8 <HAL_RCC_OscConfig+0x19c>
 8001494:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001498:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014a4:	d10c      	bne.n	80014c0 <HAL_RCC_OscConfig+0x184>
 80014a6:	4b71      	ldr	r3, [pc, #452]	@ (800166c <HAL_RCC_OscConfig+0x330>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a70      	ldr	r2, [pc, #448]	@ (800166c <HAL_RCC_OscConfig+0x330>)
 80014ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	4b6e      	ldr	r3, [pc, #440]	@ (800166c <HAL_RCC_OscConfig+0x330>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a6d      	ldr	r2, [pc, #436]	@ (800166c <HAL_RCC_OscConfig+0x330>)
 80014b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	e00b      	b.n	80014d8 <HAL_RCC_OscConfig+0x19c>
 80014c0:	4b6a      	ldr	r3, [pc, #424]	@ (800166c <HAL_RCC_OscConfig+0x330>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a69      	ldr	r2, [pc, #420]	@ (800166c <HAL_RCC_OscConfig+0x330>)
 80014c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b67      	ldr	r3, [pc, #412]	@ (800166c <HAL_RCC_OscConfig+0x330>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a66      	ldr	r2, [pc, #408]	@ (800166c <HAL_RCC_OscConfig+0x330>)
 80014d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014d6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014d8:	4b64      	ldr	r3, [pc, #400]	@ (800166c <HAL_RCC_OscConfig+0x330>)
 80014da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014dc:	f023 020f 	bic.w	r2, r3, #15
 80014e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	495f      	ldr	r1, [pc, #380]	@ (800166c <HAL_RCC_OscConfig+0x330>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d059      	beq.n	80015b6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001502:	f7ff fbd9 	bl	8000cb8 <HAL_GetTick>
 8001506:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150a:	e00a      	b.n	8001522 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800150c:	f7ff fbd4 	bl	8000cb8 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b64      	cmp	r3, #100	@ 0x64
 800151a:	d902      	bls.n	8001522 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	f000 bf43 	b.w	80023a8 <HAL_RCC_OscConfig+0x106c>
 8001522:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001526:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800152e:	fa93 f3a3 	rbit	r3, r3
 8001532:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001536:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153a:	fab3 f383 	clz	r3, r3
 800153e:	b2db      	uxtb	r3, r3
 8001540:	095b      	lsrs	r3, r3, #5
 8001542:	b2db      	uxtb	r3, r3
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b01      	cmp	r3, #1
 800154c:	d102      	bne.n	8001554 <HAL_RCC_OscConfig+0x218>
 800154e:	4b47      	ldr	r3, [pc, #284]	@ (800166c <HAL_RCC_OscConfig+0x330>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	e015      	b.n	8001580 <HAL_RCC_OscConfig+0x244>
 8001554:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001558:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001560:	fa93 f3a3 	rbit	r3, r3
 8001564:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001568:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800156c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001570:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001574:	fa93 f3a3 	rbit	r3, r3
 8001578:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800157c:	4b3b      	ldr	r3, [pc, #236]	@ (800166c <HAL_RCC_OscConfig+0x330>)
 800157e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001580:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001584:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001588:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800158c:	fa92 f2a2 	rbit	r2, r2
 8001590:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001594:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001598:	fab2 f282 	clz	r2, r2
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	f042 0220 	orr.w	r2, r2, #32
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	f002 021f 	and.w	r2, r2, #31
 80015a8:	2101      	movs	r1, #1
 80015aa:	fa01 f202 	lsl.w	r2, r1, r2
 80015ae:	4013      	ands	r3, r2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0ab      	beq.n	800150c <HAL_RCC_OscConfig+0x1d0>
 80015b4:	e05d      	b.n	8001672 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b6:	f7ff fb7f 	bl	8000cb8 <HAL_GetTick>
 80015ba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015be:	e00a      	b.n	80015d6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c0:	f7ff fb7a 	bl	8000cb8 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b64      	cmp	r3, #100	@ 0x64
 80015ce:	d902      	bls.n	80015d6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	f000 bee9 	b.w	80023a8 <HAL_RCC_OscConfig+0x106c>
 80015d6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015da:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015de:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80015e2:	fa93 f3a3 	rbit	r3, r3
 80015e6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80015ea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ee:	fab3 f383 	clz	r3, r3
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	095b      	lsrs	r3, r3, #5
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d102      	bne.n	8001608 <HAL_RCC_OscConfig+0x2cc>
 8001602:	4b1a      	ldr	r3, [pc, #104]	@ (800166c <HAL_RCC_OscConfig+0x330>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	e015      	b.n	8001634 <HAL_RCC_OscConfig+0x2f8>
 8001608:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800160c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001610:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001614:	fa93 f3a3 	rbit	r3, r3
 8001618:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800161c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001620:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001624:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001628:	fa93 f3a3 	rbit	r3, r3
 800162c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001630:	4b0e      	ldr	r3, [pc, #56]	@ (800166c <HAL_RCC_OscConfig+0x330>)
 8001632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001634:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001638:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800163c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001640:	fa92 f2a2 	rbit	r2, r2
 8001644:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001648:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800164c:	fab2 f282 	clz	r2, r2
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	f042 0220 	orr.w	r2, r2, #32
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	f002 021f 	and.w	r2, r2, #31
 800165c:	2101      	movs	r1, #1
 800165e:	fa01 f202 	lsl.w	r2, r1, r2
 8001662:	4013      	ands	r3, r2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1ab      	bne.n	80015c0 <HAL_RCC_OscConfig+0x284>
 8001668:	e003      	b.n	8001672 <HAL_RCC_OscConfig+0x336>
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001672:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001676:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 817d 	beq.w	8001982 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001688:	4ba6      	ldr	r3, [pc, #664]	@ (8001924 <HAL_RCC_OscConfig+0x5e8>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 030c 	and.w	r3, r3, #12
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00b      	beq.n	80016ac <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001694:	4ba3      	ldr	r3, [pc, #652]	@ (8001924 <HAL_RCC_OscConfig+0x5e8>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 030c 	and.w	r3, r3, #12
 800169c:	2b08      	cmp	r3, #8
 800169e:	d172      	bne.n	8001786 <HAL_RCC_OscConfig+0x44a>
 80016a0:	4ba0      	ldr	r3, [pc, #640]	@ (8001924 <HAL_RCC_OscConfig+0x5e8>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d16c      	bne.n	8001786 <HAL_RCC_OscConfig+0x44a>
 80016ac:	2302      	movs	r3, #2
 80016ae:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80016b6:	fa93 f3a3 	rbit	r3, r3
 80016ba:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80016be:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c2:	fab3 f383 	clz	r3, r3
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	095b      	lsrs	r3, r3, #5
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d102      	bne.n	80016dc <HAL_RCC_OscConfig+0x3a0>
 80016d6:	4b93      	ldr	r3, [pc, #588]	@ (8001924 <HAL_RCC_OscConfig+0x5e8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	e013      	b.n	8001704 <HAL_RCC_OscConfig+0x3c8>
 80016dc:	2302      	movs	r3, #2
 80016de:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80016e6:	fa93 f3a3 	rbit	r3, r3
 80016ea:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80016ee:	2302      	movs	r3, #2
 80016f0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80016f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80016f8:	fa93 f3a3 	rbit	r3, r3
 80016fc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001700:	4b88      	ldr	r3, [pc, #544]	@ (8001924 <HAL_RCC_OscConfig+0x5e8>)
 8001702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001704:	2202      	movs	r2, #2
 8001706:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800170a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800170e:	fa92 f2a2 	rbit	r2, r2
 8001712:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001716:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800171a:	fab2 f282 	clz	r2, r2
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	f042 0220 	orr.w	r2, r2, #32
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	f002 021f 	and.w	r2, r2, #31
 800172a:	2101      	movs	r1, #1
 800172c:	fa01 f202 	lsl.w	r2, r1, r2
 8001730:	4013      	ands	r3, r2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00a      	beq.n	800174c <HAL_RCC_OscConfig+0x410>
 8001736:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800173a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d002      	beq.n	800174c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	f000 be2e 	b.w	80023a8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174c:	4b75      	ldr	r3, [pc, #468]	@ (8001924 <HAL_RCC_OscConfig+0x5e8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001754:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001758:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	21f8      	movs	r1, #248	@ 0xf8
 8001762:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001766:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800176a:	fa91 f1a1 	rbit	r1, r1
 800176e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001772:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001776:	fab1 f181 	clz	r1, r1
 800177a:	b2c9      	uxtb	r1, r1
 800177c:	408b      	lsls	r3, r1
 800177e:	4969      	ldr	r1, [pc, #420]	@ (8001924 <HAL_RCC_OscConfig+0x5e8>)
 8001780:	4313      	orrs	r3, r2
 8001782:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001784:	e0fd      	b.n	8001982 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001786:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800178a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 8088 	beq.w	80018a8 <HAL_RCC_OscConfig+0x56c>
 8001798:	2301      	movs	r3, #1
 800179a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80017a2:	fa93 f3a3 	rbit	r3, r3
 80017a6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80017aa:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017ae:	fab3 f383 	clz	r3, r3
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80017b8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	461a      	mov	r2, r3
 80017c0:	2301      	movs	r3, #1
 80017c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c4:	f7ff fa78 	bl	8000cb8 <HAL_GetTick>
 80017c8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017cc:	e00a      	b.n	80017e4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ce:	f7ff fa73 	bl	8000cb8 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d902      	bls.n	80017e4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	f000 bde2 	b.w	80023a8 <HAL_RCC_OscConfig+0x106c>
 80017e4:	2302      	movs	r3, #2
 80017e6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ea:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80017ee:	fa93 f3a3 	rbit	r3, r3
 80017f2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80017f6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fa:	fab3 f383 	clz	r3, r3
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	095b      	lsrs	r3, r3, #5
 8001802:	b2db      	uxtb	r3, r3
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b01      	cmp	r3, #1
 800180c:	d102      	bne.n	8001814 <HAL_RCC_OscConfig+0x4d8>
 800180e:	4b45      	ldr	r3, [pc, #276]	@ (8001924 <HAL_RCC_OscConfig+0x5e8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	e013      	b.n	800183c <HAL_RCC_OscConfig+0x500>
 8001814:	2302      	movs	r3, #2
 8001816:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800181e:	fa93 f3a3 	rbit	r3, r3
 8001822:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001826:	2302      	movs	r3, #2
 8001828:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800182c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001830:	fa93 f3a3 	rbit	r3, r3
 8001834:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001838:	4b3a      	ldr	r3, [pc, #232]	@ (8001924 <HAL_RCC_OscConfig+0x5e8>)
 800183a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800183c:	2202      	movs	r2, #2
 800183e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001842:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001846:	fa92 f2a2 	rbit	r2, r2
 800184a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800184e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001852:	fab2 f282 	clz	r2, r2
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	f042 0220 	orr.w	r2, r2, #32
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	f002 021f 	and.w	r2, r2, #31
 8001862:	2101      	movs	r1, #1
 8001864:	fa01 f202 	lsl.w	r2, r1, r2
 8001868:	4013      	ands	r3, r2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0af      	beq.n	80017ce <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186e:	4b2d      	ldr	r3, [pc, #180]	@ (8001924 <HAL_RCC_OscConfig+0x5e8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001876:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800187a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	21f8      	movs	r1, #248	@ 0xf8
 8001884:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001888:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800188c:	fa91 f1a1 	rbit	r1, r1
 8001890:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001894:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001898:	fab1 f181 	clz	r1, r1
 800189c:	b2c9      	uxtb	r1, r1
 800189e:	408b      	lsls	r3, r1
 80018a0:	4920      	ldr	r1, [pc, #128]	@ (8001924 <HAL_RCC_OscConfig+0x5e8>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	600b      	str	r3, [r1, #0]
 80018a6:	e06c      	b.n	8001982 <HAL_RCC_OscConfig+0x646>
 80018a8:	2301      	movs	r3, #1
 80018aa:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80018b2:	fa93 f3a3 	rbit	r3, r3
 80018b6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80018ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018be:	fab3 f383 	clz	r3, r3
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80018c8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	461a      	mov	r2, r3
 80018d0:	2300      	movs	r3, #0
 80018d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d4:	f7ff f9f0 	bl	8000cb8 <HAL_GetTick>
 80018d8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018dc:	e00a      	b.n	80018f4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018de:	f7ff f9eb 	bl	8000cb8 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d902      	bls.n	80018f4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	f000 bd5a 	b.w	80023a8 <HAL_RCC_OscConfig+0x106c>
 80018f4:	2302      	movs	r3, #2
 80018f6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80018fe:	fa93 f3a3 	rbit	r3, r3
 8001902:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001906:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800190a:	fab3 f383 	clz	r3, r3
 800190e:	b2db      	uxtb	r3, r3
 8001910:	095b      	lsrs	r3, r3, #5
 8001912:	b2db      	uxtb	r3, r3
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b01      	cmp	r3, #1
 800191c:	d104      	bne.n	8001928 <HAL_RCC_OscConfig+0x5ec>
 800191e:	4b01      	ldr	r3, [pc, #4]	@ (8001924 <HAL_RCC_OscConfig+0x5e8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	e015      	b.n	8001950 <HAL_RCC_OscConfig+0x614>
 8001924:	40021000 	.word	0x40021000
 8001928:	2302      	movs	r3, #2
 800192a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001932:	fa93 f3a3 	rbit	r3, r3
 8001936:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800193a:	2302      	movs	r3, #2
 800193c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001940:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001944:	fa93 f3a3 	rbit	r3, r3
 8001948:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800194c:	4bc8      	ldr	r3, [pc, #800]	@ (8001c70 <HAL_RCC_OscConfig+0x934>)
 800194e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001950:	2202      	movs	r2, #2
 8001952:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001956:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800195a:	fa92 f2a2 	rbit	r2, r2
 800195e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001962:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001966:	fab2 f282 	clz	r2, r2
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	f042 0220 	orr.w	r2, r2, #32
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	f002 021f 	and.w	r2, r2, #31
 8001976:	2101      	movs	r1, #1
 8001978:	fa01 f202 	lsl.w	r2, r1, r2
 800197c:	4013      	ands	r3, r2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1ad      	bne.n	80018de <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001982:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001986:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	2b00      	cmp	r3, #0
 8001994:	f000 8110 	beq.w	8001bb8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001998:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800199c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d079      	beq.n	8001a9c <HAL_RCC_OscConfig+0x760>
 80019a8:	2301      	movs	r3, #1
 80019aa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80019b2:	fa93 f3a3 	rbit	r3, r3
 80019b6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80019ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019be:	fab3 f383 	clz	r3, r3
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	461a      	mov	r2, r3
 80019c6:	4bab      	ldr	r3, [pc, #684]	@ (8001c74 <HAL_RCC_OscConfig+0x938>)
 80019c8:	4413      	add	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	461a      	mov	r2, r3
 80019ce:	2301      	movs	r3, #1
 80019d0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d2:	f7ff f971 	bl	8000cb8 <HAL_GetTick>
 80019d6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019da:	e00a      	b.n	80019f2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019dc:	f7ff f96c 	bl	8000cb8 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d902      	bls.n	80019f2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	f000 bcdb 	b.w	80023a8 <HAL_RCC_OscConfig+0x106c>
 80019f2:	2302      	movs	r3, #2
 80019f4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80019fc:	fa93 f3a3 	rbit	r3, r3
 8001a00:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001a04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a08:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a14:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	fa93 f2a3 	rbit	r2, r3
 8001a1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a30:	2202      	movs	r2, #2
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	fa93 f2a3 	rbit	r2, r3
 8001a42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a46:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001a4a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4c:	4b88      	ldr	r3, [pc, #544]	@ (8001c70 <HAL_RCC_OscConfig+0x934>)
 8001a4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a54:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001a58:	2102      	movs	r1, #2
 8001a5a:	6019      	str	r1, [r3, #0]
 8001a5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a60:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	fa93 f1a3 	rbit	r1, r3
 8001a6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a6e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001a72:	6019      	str	r1, [r3, #0]
  return result;
 8001a74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a78:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	fab3 f383 	clz	r3, r3
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	f003 031f 	and.w	r3, r3, #31
 8001a8e:	2101      	movs	r1, #1
 8001a90:	fa01 f303 	lsl.w	r3, r1, r3
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0a0      	beq.n	80019dc <HAL_RCC_OscConfig+0x6a0>
 8001a9a:	e08d      	b.n	8001bb8 <HAL_RCC_OscConfig+0x87c>
 8001a9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aac:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	fa93 f2a3 	rbit	r2, r3
 8001ab6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aba:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001abe:	601a      	str	r2, [r3, #0]
  return result;
 8001ac0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ac4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001ac8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aca:	fab3 f383 	clz	r3, r3
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4b68      	ldr	r3, [pc, #416]	@ (8001c74 <HAL_RCC_OscConfig+0x938>)
 8001ad4:	4413      	add	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	461a      	mov	r2, r3
 8001ada:	2300      	movs	r3, #0
 8001adc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ade:	f7ff f8eb 	bl	8000cb8 <HAL_GetTick>
 8001ae2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae6:	e00a      	b.n	8001afe <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae8:	f7ff f8e6 	bl	8000cb8 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d902      	bls.n	8001afe <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	f000 bc55 	b.w	80023a8 <HAL_RCC_OscConfig+0x106c>
 8001afe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b02:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001b06:	2202      	movs	r2, #2
 8001b08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b0e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	fa93 f2a3 	rbit	r2, r3
 8001b18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b1c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b26:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b32:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	fa93 f2a3 	rbit	r2, r3
 8001b3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b40:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b4a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001b4e:	2202      	movs	r2, #2
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b56:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	fa93 f2a3 	rbit	r2, r3
 8001b60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b64:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001b68:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b6a:	4b41      	ldr	r3, [pc, #260]	@ (8001c70 <HAL_RCC_OscConfig+0x934>)
 8001b6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b72:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001b76:	2102      	movs	r1, #2
 8001b78:	6019      	str	r1, [r3, #0]
 8001b7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b7e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	fa93 f1a3 	rbit	r1, r3
 8001b88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b8c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001b90:	6019      	str	r1, [r3, #0]
  return result;
 8001b92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b96:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	fab3 f383 	clz	r3, r3
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	f003 031f 	and.w	r3, r3, #31
 8001bac:	2101      	movs	r1, #1
 8001bae:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d197      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bbc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 81a1 	beq.w	8001f10 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bd4:	4b26      	ldr	r3, [pc, #152]	@ (8001c70 <HAL_RCC_OscConfig+0x934>)
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d116      	bne.n	8001c0e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001be0:	4b23      	ldr	r3, [pc, #140]	@ (8001c70 <HAL_RCC_OscConfig+0x934>)
 8001be2:	69db      	ldr	r3, [r3, #28]
 8001be4:	4a22      	ldr	r2, [pc, #136]	@ (8001c70 <HAL_RCC_OscConfig+0x934>)
 8001be6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bea:	61d3      	str	r3, [r2, #28]
 8001bec:	4b20      	ldr	r3, [pc, #128]	@ (8001c70 <HAL_RCC_OscConfig+0x934>)
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001bf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c02:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001c06:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c78 <HAL_RCC_OscConfig+0x93c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d11a      	bne.n	8001c50 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c1a:	4b17      	ldr	r3, [pc, #92]	@ (8001c78 <HAL_RCC_OscConfig+0x93c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a16      	ldr	r2, [pc, #88]	@ (8001c78 <HAL_RCC_OscConfig+0x93c>)
 8001c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c24:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c26:	f7ff f847 	bl	8000cb8 <HAL_GetTick>
 8001c2a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2e:	e009      	b.n	8001c44 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c30:	f7ff f842 	bl	8000cb8 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b64      	cmp	r3, #100	@ 0x64
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e3b1      	b.n	80023a8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c44:	4b0c      	ldr	r3, [pc, #48]	@ (8001c78 <HAL_RCC_OscConfig+0x93c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0ef      	beq.n	8001c30 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d10d      	bne.n	8001c7c <HAL_RCC_OscConfig+0x940>
 8001c60:	4b03      	ldr	r3, [pc, #12]	@ (8001c70 <HAL_RCC_OscConfig+0x934>)
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	4a02      	ldr	r2, [pc, #8]	@ (8001c70 <HAL_RCC_OscConfig+0x934>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6213      	str	r3, [r2, #32]
 8001c6c:	e03c      	b.n	8001ce8 <HAL_RCC_OscConfig+0x9ac>
 8001c6e:	bf00      	nop
 8001c70:	40021000 	.word	0x40021000
 8001c74:	10908120 	.word	0x10908120
 8001c78:	40007000 	.word	0x40007000
 8001c7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c80:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10c      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x96a>
 8001c8c:	4bc1      	ldr	r3, [pc, #772]	@ (8001f94 <HAL_RCC_OscConfig+0xc58>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	4ac0      	ldr	r2, [pc, #768]	@ (8001f94 <HAL_RCC_OscConfig+0xc58>)
 8001c92:	f023 0301 	bic.w	r3, r3, #1
 8001c96:	6213      	str	r3, [r2, #32]
 8001c98:	4bbe      	ldr	r3, [pc, #760]	@ (8001f94 <HAL_RCC_OscConfig+0xc58>)
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	4abd      	ldr	r2, [pc, #756]	@ (8001f94 <HAL_RCC_OscConfig+0xc58>)
 8001c9e:	f023 0304 	bic.w	r3, r3, #4
 8001ca2:	6213      	str	r3, [r2, #32]
 8001ca4:	e020      	b.n	8001ce8 <HAL_RCC_OscConfig+0x9ac>
 8001ca6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001caa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	2b05      	cmp	r3, #5
 8001cb4:	d10c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x994>
 8001cb6:	4bb7      	ldr	r3, [pc, #732]	@ (8001f94 <HAL_RCC_OscConfig+0xc58>)
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	4ab6      	ldr	r2, [pc, #728]	@ (8001f94 <HAL_RCC_OscConfig+0xc58>)
 8001cbc:	f043 0304 	orr.w	r3, r3, #4
 8001cc0:	6213      	str	r3, [r2, #32]
 8001cc2:	4bb4      	ldr	r3, [pc, #720]	@ (8001f94 <HAL_RCC_OscConfig+0xc58>)
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	4ab3      	ldr	r2, [pc, #716]	@ (8001f94 <HAL_RCC_OscConfig+0xc58>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	6213      	str	r3, [r2, #32]
 8001cce:	e00b      	b.n	8001ce8 <HAL_RCC_OscConfig+0x9ac>
 8001cd0:	4bb0      	ldr	r3, [pc, #704]	@ (8001f94 <HAL_RCC_OscConfig+0xc58>)
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	4aaf      	ldr	r2, [pc, #700]	@ (8001f94 <HAL_RCC_OscConfig+0xc58>)
 8001cd6:	f023 0301 	bic.w	r3, r3, #1
 8001cda:	6213      	str	r3, [r2, #32]
 8001cdc:	4bad      	ldr	r3, [pc, #692]	@ (8001f94 <HAL_RCC_OscConfig+0xc58>)
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	4aac      	ldr	r2, [pc, #688]	@ (8001f94 <HAL_RCC_OscConfig+0xc58>)
 8001ce2:	f023 0304 	bic.w	r3, r3, #4
 8001ce6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ce8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 8081 	beq.w	8001dfc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfa:	f7fe ffdd 	bl	8000cb8 <HAL_GetTick>
 8001cfe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d02:	e00b      	b.n	8001d1c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d04:	f7fe ffd8 	bl	8000cb8 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e345      	b.n	80023a8 <HAL_RCC_OscConfig+0x106c>
 8001d1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d20:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001d24:	2202      	movs	r2, #2
 8001d26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d2c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	fa93 f2a3 	rbit	r2, r3
 8001d36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d3a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d44:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001d48:	2202      	movs	r2, #2
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d50:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	fa93 f2a3 	rbit	r2, r3
 8001d5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d5e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001d62:	601a      	str	r2, [r3, #0]
  return result;
 8001d64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d68:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001d6c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d6e:	fab3 f383 	clz	r3, r3
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	095b      	lsrs	r3, r3, #5
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	f043 0302 	orr.w	r3, r3, #2
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d102      	bne.n	8001d88 <HAL_RCC_OscConfig+0xa4c>
 8001d82:	4b84      	ldr	r3, [pc, #528]	@ (8001f94 <HAL_RCC_OscConfig+0xc58>)
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	e013      	b.n	8001db0 <HAL_RCC_OscConfig+0xa74>
 8001d88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d8c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001d90:	2202      	movs	r2, #2
 8001d92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d98:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	fa93 f2a3 	rbit	r2, r3
 8001da2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	4b79      	ldr	r3, [pc, #484]	@ (8001f94 <HAL_RCC_OscConfig+0xc58>)
 8001dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001db4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001db8:	2102      	movs	r1, #2
 8001dba:	6011      	str	r1, [r2, #0]
 8001dbc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001dc0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001dc4:	6812      	ldr	r2, [r2, #0]
 8001dc6:	fa92 f1a2 	rbit	r1, r2
 8001dca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001dce:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001dd2:	6011      	str	r1, [r2, #0]
  return result;
 8001dd4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001dd8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	fab2 f282 	clz	r2, r2
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	f002 021f 	and.w	r2, r2, #31
 8001dee:	2101      	movs	r1, #1
 8001df0:	fa01 f202 	lsl.w	r2, r1, r2
 8001df4:	4013      	ands	r3, r2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d084      	beq.n	8001d04 <HAL_RCC_OscConfig+0x9c8>
 8001dfa:	e07f      	b.n	8001efc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfc:	f7fe ff5c 	bl	8000cb8 <HAL_GetTick>
 8001e00:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e04:	e00b      	b.n	8001e1e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e06:	f7fe ff57 	bl	8000cb8 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e2c4      	b.n	80023a8 <HAL_RCC_OscConfig+0x106c>
 8001e1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e22:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001e26:	2202      	movs	r2, #2
 8001e28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e2e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	fa93 f2a3 	rbit	r2, r3
 8001e38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e3c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e46:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e52:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	fa93 f2a3 	rbit	r2, r3
 8001e5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e60:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001e64:	601a      	str	r2, [r3, #0]
  return result;
 8001e66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e6a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001e6e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e70:	fab3 f383 	clz	r3, r3
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	095b      	lsrs	r3, r3, #5
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	f043 0302 	orr.w	r3, r3, #2
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d102      	bne.n	8001e8a <HAL_RCC_OscConfig+0xb4e>
 8001e84:	4b43      	ldr	r3, [pc, #268]	@ (8001f94 <HAL_RCC_OscConfig+0xc58>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	e013      	b.n	8001eb2 <HAL_RCC_OscConfig+0xb76>
 8001e8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e8e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001e92:	2202      	movs	r2, #2
 8001e94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e9a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	fa93 f2a3 	rbit	r2, r3
 8001ea4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	4b39      	ldr	r3, [pc, #228]	@ (8001f94 <HAL_RCC_OscConfig+0xc58>)
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001eb6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001eba:	2102      	movs	r1, #2
 8001ebc:	6011      	str	r1, [r2, #0]
 8001ebe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ec2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001ec6:	6812      	ldr	r2, [r2, #0]
 8001ec8:	fa92 f1a2 	rbit	r1, r2
 8001ecc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ed0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001ed4:	6011      	str	r1, [r2, #0]
  return result;
 8001ed6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001eda:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	fab2 f282 	clz	r2, r2
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	f002 021f 	and.w	r2, r2, #31
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d184      	bne.n	8001e06 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001efc:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d105      	bne.n	8001f10 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f04:	4b23      	ldr	r3, [pc, #140]	@ (8001f94 <HAL_RCC_OscConfig+0xc58>)
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	4a22      	ldr	r2, [pc, #136]	@ (8001f94 <HAL_RCC_OscConfig+0xc58>)
 8001f0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f0e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f14:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 8242 	beq.w	80023a6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f22:	4b1c      	ldr	r3, [pc, #112]	@ (8001f94 <HAL_RCC_OscConfig+0xc58>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	f000 8213 	beq.w	8002356 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f34:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	f040 8162 	bne.w	8002206 <HAL_RCC_OscConfig+0xeca>
 8001f42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f46:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001f4a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001f4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f54:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	fa93 f2a3 	rbit	r2, r3
 8001f5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f62:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001f66:	601a      	str	r2, [r3, #0]
  return result;
 8001f68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f6c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001f70:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f72:	fab3 f383 	clz	r3, r3
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f7c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	461a      	mov	r2, r3
 8001f84:	2300      	movs	r3, #0
 8001f86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f88:	f7fe fe96 	bl	8000cb8 <HAL_GetTick>
 8001f8c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f90:	e00c      	b.n	8001fac <HAL_RCC_OscConfig+0xc70>
 8001f92:	bf00      	nop
 8001f94:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f98:	f7fe fe8e 	bl	8000cb8 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e1fd      	b.n	80023a8 <HAL_RCC_OscConfig+0x106c>
 8001fac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001fb4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fbe:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	fa93 f2a3 	rbit	r2, r3
 8001fc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fcc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001fd0:	601a      	str	r2, [r3, #0]
  return result;
 8001fd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001fda:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fdc:	fab3 f383 	clz	r3, r3
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	095b      	lsrs	r3, r3, #5
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d102      	bne.n	8001ff6 <HAL_RCC_OscConfig+0xcba>
 8001ff0:	4bb0      	ldr	r3, [pc, #704]	@ (80022b4 <HAL_RCC_OscConfig+0xf78>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	e027      	b.n	8002046 <HAL_RCC_OscConfig+0xd0a>
 8001ff6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ffa:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001ffe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002002:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002004:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002008:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	fa93 f2a3 	rbit	r2, r3
 8002012:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002016:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002020:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002024:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800202e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	fa93 f2a3 	rbit	r2, r3
 8002038:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800203c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	4b9c      	ldr	r3, [pc, #624]	@ (80022b4 <HAL_RCC_OscConfig+0xf78>)
 8002044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002046:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800204a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800204e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002052:	6011      	str	r1, [r2, #0]
 8002054:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002058:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800205c:	6812      	ldr	r2, [r2, #0]
 800205e:	fa92 f1a2 	rbit	r1, r2
 8002062:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002066:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800206a:	6011      	str	r1, [r2, #0]
  return result;
 800206c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002070:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002074:	6812      	ldr	r2, [r2, #0]
 8002076:	fab2 f282 	clz	r2, r2
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	f042 0220 	orr.w	r2, r2, #32
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	f002 021f 	and.w	r2, r2, #31
 8002086:	2101      	movs	r1, #1
 8002088:	fa01 f202 	lsl.w	r2, r1, r2
 800208c:	4013      	ands	r3, r2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d182      	bne.n	8001f98 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002092:	4b88      	ldr	r3, [pc, #544]	@ (80022b4 <HAL_RCC_OscConfig+0xf78>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800209a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800209e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80020a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	430b      	orrs	r3, r1
 80020b4:	497f      	ldr	r1, [pc, #508]	@ (80022b4 <HAL_RCC_OscConfig+0xf78>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	604b      	str	r3, [r1, #4]
 80020ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020be:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80020c2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80020c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020cc:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	fa93 f2a3 	rbit	r2, r3
 80020d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020da:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80020de:	601a      	str	r2, [r3, #0]
  return result;
 80020e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80020e8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020ea:	fab3 f383 	clz	r3, r3
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80020f4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	461a      	mov	r2, r3
 80020fc:	2301      	movs	r3, #1
 80020fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002100:	f7fe fdda 	bl	8000cb8 <HAL_GetTick>
 8002104:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002108:	e009      	b.n	800211e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800210a:	f7fe fdd5 	bl	8000cb8 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e144      	b.n	80023a8 <HAL_RCC_OscConfig+0x106c>
 800211e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002122:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002126:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800212a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002130:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	fa93 f2a3 	rbit	r2, r3
 800213a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800213e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002142:	601a      	str	r2, [r3, #0]
  return result;
 8002144:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002148:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800214c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800214e:	fab3 f383 	clz	r3, r3
 8002152:	b2db      	uxtb	r3, r3
 8002154:	095b      	lsrs	r3, r3, #5
 8002156:	b2db      	uxtb	r3, r3
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b01      	cmp	r3, #1
 8002160:	d102      	bne.n	8002168 <HAL_RCC_OscConfig+0xe2c>
 8002162:	4b54      	ldr	r3, [pc, #336]	@ (80022b4 <HAL_RCC_OscConfig+0xf78>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	e027      	b.n	80021b8 <HAL_RCC_OscConfig+0xe7c>
 8002168:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800216c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002170:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002174:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002176:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800217a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	fa93 f2a3 	rbit	r2, r3
 8002184:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002188:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002192:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002196:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	fa93 f2a3 	rbit	r2, r3
 80021aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ae:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	4b3f      	ldr	r3, [pc, #252]	@ (80022b4 <HAL_RCC_OscConfig+0xf78>)
 80021b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021bc:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80021c0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80021c4:	6011      	str	r1, [r2, #0]
 80021c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021ca:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80021ce:	6812      	ldr	r2, [r2, #0]
 80021d0:	fa92 f1a2 	rbit	r1, r2
 80021d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021d8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80021dc:	6011      	str	r1, [r2, #0]
  return result;
 80021de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021e2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	fab2 f282 	clz	r2, r2
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	f042 0220 	orr.w	r2, r2, #32
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	f002 021f 	and.w	r2, r2, #31
 80021f8:	2101      	movs	r1, #1
 80021fa:	fa01 f202 	lsl.w	r2, r1, r2
 80021fe:	4013      	ands	r3, r2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d082      	beq.n	800210a <HAL_RCC_OscConfig+0xdce>
 8002204:	e0cf      	b.n	80023a6 <HAL_RCC_OscConfig+0x106a>
 8002206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800220a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800220e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002212:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002218:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	fa93 f2a3 	rbit	r2, r3
 8002222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002226:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800222a:	601a      	str	r2, [r3, #0]
  return result;
 800222c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002230:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002234:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002236:	fab3 f383 	clz	r3, r3
 800223a:	b2db      	uxtb	r3, r3
 800223c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002240:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	461a      	mov	r2, r3
 8002248:	2300      	movs	r3, #0
 800224a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224c:	f7fe fd34 	bl	8000cb8 <HAL_GetTick>
 8002250:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002254:	e009      	b.n	800226a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002256:	f7fe fd2f 	bl	8000cb8 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e09e      	b.n	80023a8 <HAL_RCC_OscConfig+0x106c>
 800226a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800226e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002272:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002276:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800227c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	fa93 f2a3 	rbit	r2, r3
 8002286:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800228a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800228e:	601a      	str	r2, [r3, #0]
  return result;
 8002290:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002294:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002298:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800229a:	fab3 f383 	clz	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	095b      	lsrs	r3, r3, #5
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d104      	bne.n	80022b8 <HAL_RCC_OscConfig+0xf7c>
 80022ae:	4b01      	ldr	r3, [pc, #4]	@ (80022b4 <HAL_RCC_OscConfig+0xf78>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	e029      	b.n	8002308 <HAL_RCC_OscConfig+0xfcc>
 80022b4:	40021000 	.word	0x40021000
 80022b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022bc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80022c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ca:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	fa93 f2a3 	rbit	r2, r3
 80022d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80022e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	fa93 f2a3 	rbit	r2, r3
 80022fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fe:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	4b2b      	ldr	r3, [pc, #172]	@ (80023b4 <HAL_RCC_OscConfig+0x1078>)
 8002306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002308:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800230c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002310:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002314:	6011      	str	r1, [r2, #0]
 8002316:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800231a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	fa92 f1a2 	rbit	r1, r2
 8002324:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002328:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800232c:	6011      	str	r1, [r2, #0]
  return result;
 800232e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002332:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002336:	6812      	ldr	r2, [r2, #0]
 8002338:	fab2 f282 	clz	r2, r2
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	f042 0220 	orr.w	r2, r2, #32
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	f002 021f 	and.w	r2, r2, #31
 8002348:	2101      	movs	r1, #1
 800234a:	fa01 f202 	lsl.w	r2, r1, r2
 800234e:	4013      	ands	r3, r2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d180      	bne.n	8002256 <HAL_RCC_OscConfig+0xf1a>
 8002354:	e027      	b.n	80023a6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002356:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800235a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d101      	bne.n	800236a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e01e      	b.n	80023a8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800236a:	4b12      	ldr	r3, [pc, #72]	@ (80023b4 <HAL_RCC_OscConfig+0x1078>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002372:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002376:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800237a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800237e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	429a      	cmp	r2, r3
 8002388:	d10b      	bne.n	80023a2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800238a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800238e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002392:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002396:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800239e:	429a      	cmp	r2, r3
 80023a0:	d001      	beq.n	80023a6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40021000 	.word	0x40021000

080023b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b09e      	sub	sp, #120	@ 0x78
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e162      	b.n	8002696 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023d0:	4b90      	ldr	r3, [pc, #576]	@ (8002614 <HAL_RCC_ClockConfig+0x25c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d910      	bls.n	8002400 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023de:	4b8d      	ldr	r3, [pc, #564]	@ (8002614 <HAL_RCC_ClockConfig+0x25c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f023 0207 	bic.w	r2, r3, #7
 80023e6:	498b      	ldr	r1, [pc, #556]	@ (8002614 <HAL_RCC_ClockConfig+0x25c>)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ee:	4b89      	ldr	r3, [pc, #548]	@ (8002614 <HAL_RCC_ClockConfig+0x25c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d001      	beq.n	8002400 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e14a      	b.n	8002696 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d008      	beq.n	800241e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800240c:	4b82      	ldr	r3, [pc, #520]	@ (8002618 <HAL_RCC_ClockConfig+0x260>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	497f      	ldr	r1, [pc, #508]	@ (8002618 <HAL_RCC_ClockConfig+0x260>)
 800241a:	4313      	orrs	r3, r2
 800241c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 80dc 	beq.w	80025e4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d13c      	bne.n	80024ae <HAL_RCC_ClockConfig+0xf6>
 8002434:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002438:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002442:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002444:	fab3 f383 	clz	r3, r3
 8002448:	b2db      	uxtb	r3, r3
 800244a:	095b      	lsrs	r3, r3, #5
 800244c:	b2db      	uxtb	r3, r3
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b01      	cmp	r3, #1
 8002456:	d102      	bne.n	800245e <HAL_RCC_ClockConfig+0xa6>
 8002458:	4b6f      	ldr	r3, [pc, #444]	@ (8002618 <HAL_RCC_ClockConfig+0x260>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	e00f      	b.n	800247e <HAL_RCC_ClockConfig+0xc6>
 800245e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002462:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002464:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002466:	fa93 f3a3 	rbit	r3, r3
 800246a:	667b      	str	r3, [r7, #100]	@ 0x64
 800246c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002470:	663b      	str	r3, [r7, #96]	@ 0x60
 8002472:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002474:	fa93 f3a3 	rbit	r3, r3
 8002478:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800247a:	4b67      	ldr	r3, [pc, #412]	@ (8002618 <HAL_RCC_ClockConfig+0x260>)
 800247c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002482:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002484:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002486:	fa92 f2a2 	rbit	r2, r2
 800248a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800248c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800248e:	fab2 f282 	clz	r2, r2
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	f042 0220 	orr.w	r2, r2, #32
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	f002 021f 	and.w	r2, r2, #31
 800249e:	2101      	movs	r1, #1
 80024a0:	fa01 f202 	lsl.w	r2, r1, r2
 80024a4:	4013      	ands	r3, r2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d17b      	bne.n	80025a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e0f3      	b.n	8002696 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d13c      	bne.n	8002530 <HAL_RCC_ClockConfig+0x178>
 80024b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024ba:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024be:	fa93 f3a3 	rbit	r3, r3
 80024c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80024c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c6:	fab3 f383 	clz	r3, r3
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	095b      	lsrs	r3, r3, #5
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d102      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x128>
 80024da:	4b4f      	ldr	r3, [pc, #316]	@ (8002618 <HAL_RCC_ClockConfig+0x260>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	e00f      	b.n	8002500 <HAL_RCC_ClockConfig+0x148>
 80024e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024e8:	fa93 f3a3 	rbit	r3, r3
 80024ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80024ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80024f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024f6:	fa93 f3a3 	rbit	r3, r3
 80024fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024fc:	4b46      	ldr	r3, [pc, #280]	@ (8002618 <HAL_RCC_ClockConfig+0x260>)
 80024fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002500:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002504:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002506:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002508:	fa92 f2a2 	rbit	r2, r2
 800250c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800250e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002510:	fab2 f282 	clz	r2, r2
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	f042 0220 	orr.w	r2, r2, #32
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	f002 021f 	and.w	r2, r2, #31
 8002520:	2101      	movs	r1, #1
 8002522:	fa01 f202 	lsl.w	r2, r1, r2
 8002526:	4013      	ands	r3, r2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d13a      	bne.n	80025a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0b2      	b.n	8002696 <HAL_RCC_ClockConfig+0x2de>
 8002530:	2302      	movs	r3, #2
 8002532:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002536:	fa93 f3a3 	rbit	r3, r3
 800253a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800253c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253e:	fab3 f383 	clz	r3, r3
 8002542:	b2db      	uxtb	r3, r3
 8002544:	095b      	lsrs	r3, r3, #5
 8002546:	b2db      	uxtb	r3, r3
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b01      	cmp	r3, #1
 8002550:	d102      	bne.n	8002558 <HAL_RCC_ClockConfig+0x1a0>
 8002552:	4b31      	ldr	r3, [pc, #196]	@ (8002618 <HAL_RCC_ClockConfig+0x260>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	e00d      	b.n	8002574 <HAL_RCC_ClockConfig+0x1bc>
 8002558:	2302      	movs	r3, #2
 800255a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800255e:	fa93 f3a3 	rbit	r3, r3
 8002562:	627b      	str	r3, [r7, #36]	@ 0x24
 8002564:	2302      	movs	r3, #2
 8002566:	623b      	str	r3, [r7, #32]
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	fa93 f3a3 	rbit	r3, r3
 800256e:	61fb      	str	r3, [r7, #28]
 8002570:	4b29      	ldr	r3, [pc, #164]	@ (8002618 <HAL_RCC_ClockConfig+0x260>)
 8002572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002574:	2202      	movs	r2, #2
 8002576:	61ba      	str	r2, [r7, #24]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	fa92 f2a2 	rbit	r2, r2
 800257e:	617a      	str	r2, [r7, #20]
  return result;
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	fab2 f282 	clz	r2, r2
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	f042 0220 	orr.w	r2, r2, #32
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	f002 021f 	and.w	r2, r2, #31
 8002592:	2101      	movs	r1, #1
 8002594:	fa01 f202 	lsl.w	r2, r1, r2
 8002598:	4013      	ands	r3, r2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e079      	b.n	8002696 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002618 <HAL_RCC_ClockConfig+0x260>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f023 0203 	bic.w	r2, r3, #3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	491a      	ldr	r1, [pc, #104]	@ (8002618 <HAL_RCC_ClockConfig+0x260>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025b4:	f7fe fb80 	bl	8000cb8 <HAL_GetTick>
 80025b8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ba:	e00a      	b.n	80025d2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025bc:	f7fe fb7c 	bl	8000cb8 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e061      	b.n	8002696 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d2:	4b11      	ldr	r3, [pc, #68]	@ (8002618 <HAL_RCC_ClockConfig+0x260>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 020c 	and.w	r2, r3, #12
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d1eb      	bne.n	80025bc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002614 <HAL_RCC_ClockConfig+0x25c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d214      	bcs.n	800261c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	4b08      	ldr	r3, [pc, #32]	@ (8002614 <HAL_RCC_ClockConfig+0x25c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 0207 	bic.w	r2, r3, #7
 80025fa:	4906      	ldr	r1, [pc, #24]	@ (8002614 <HAL_RCC_ClockConfig+0x25c>)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	4313      	orrs	r3, r2
 8002600:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002602:	4b04      	ldr	r3, [pc, #16]	@ (8002614 <HAL_RCC_ClockConfig+0x25c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d005      	beq.n	800261c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e040      	b.n	8002696 <HAL_RCC_ClockConfig+0x2de>
 8002614:	40022000 	.word	0x40022000
 8002618:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002628:	4b1d      	ldr	r3, [pc, #116]	@ (80026a0 <HAL_RCC_ClockConfig+0x2e8>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	491a      	ldr	r1, [pc, #104]	@ (80026a0 <HAL_RCC_ClockConfig+0x2e8>)
 8002636:	4313      	orrs	r3, r2
 8002638:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	d009      	beq.n	800265a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002646:	4b16      	ldr	r3, [pc, #88]	@ (80026a0 <HAL_RCC_ClockConfig+0x2e8>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4912      	ldr	r1, [pc, #72]	@ (80026a0 <HAL_RCC_ClockConfig+0x2e8>)
 8002656:	4313      	orrs	r3, r2
 8002658:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800265a:	f000 f829 	bl	80026b0 <HAL_RCC_GetSysClockFreq>
 800265e:	4601      	mov	r1, r0
 8002660:	4b0f      	ldr	r3, [pc, #60]	@ (80026a0 <HAL_RCC_ClockConfig+0x2e8>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002668:	22f0      	movs	r2, #240	@ 0xf0
 800266a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	fa92 f2a2 	rbit	r2, r2
 8002672:	60fa      	str	r2, [r7, #12]
  return result;
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	fab2 f282 	clz	r2, r2
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	40d3      	lsrs	r3, r2
 800267e:	4a09      	ldr	r2, [pc, #36]	@ (80026a4 <HAL_RCC_ClockConfig+0x2ec>)
 8002680:	5cd3      	ldrb	r3, [r2, r3]
 8002682:	fa21 f303 	lsr.w	r3, r1, r3
 8002686:	4a08      	ldr	r2, [pc, #32]	@ (80026a8 <HAL_RCC_ClockConfig+0x2f0>)
 8002688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800268a:	4b08      	ldr	r3, [pc, #32]	@ (80026ac <HAL_RCC_ClockConfig+0x2f4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7fe face 	bl	8000c30 <HAL_InitTick>
  
  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3778      	adds	r7, #120	@ 0x78
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40021000 	.word	0x40021000
 80026a4:	0800517c 	.word	0x0800517c
 80026a8:	20000000 	.word	0x20000000
 80026ac:	20000004 	.word	0x20000004

080026b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b08b      	sub	sp, #44	@ 0x2c
 80026b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	61fb      	str	r3, [r7, #28]
 80026ba:	2300      	movs	r3, #0
 80026bc:	61bb      	str	r3, [r7, #24]
 80026be:	2300      	movs	r3, #0
 80026c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80026ca:	4b29      	ldr	r3, [pc, #164]	@ (8002770 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f003 030c 	and.w	r3, r3, #12
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d002      	beq.n	80026e0 <HAL_RCC_GetSysClockFreq+0x30>
 80026da:	2b08      	cmp	r3, #8
 80026dc:	d003      	beq.n	80026e6 <HAL_RCC_GetSysClockFreq+0x36>
 80026de:	e03c      	b.n	800275a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026e0:	4b24      	ldr	r3, [pc, #144]	@ (8002774 <HAL_RCC_GetSysClockFreq+0xc4>)
 80026e2:	623b      	str	r3, [r7, #32]
      break;
 80026e4:	e03c      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80026ec:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 80026f0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	fa92 f2a2 	rbit	r2, r2
 80026f8:	607a      	str	r2, [r7, #4]
  return result;
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	fab2 f282 	clz	r2, r2
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	40d3      	lsrs	r3, r2
 8002704:	4a1c      	ldr	r2, [pc, #112]	@ (8002778 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002706:	5cd3      	ldrb	r3, [r2, r3]
 8002708:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800270a:	4b19      	ldr	r3, [pc, #100]	@ (8002770 <HAL_RCC_GetSysClockFreq+0xc0>)
 800270c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	220f      	movs	r2, #15
 8002714:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	fa92 f2a2 	rbit	r2, r2
 800271c:	60fa      	str	r2, [r7, #12]
  return result;
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	fab2 f282 	clz	r2, r2
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	40d3      	lsrs	r3, r2
 8002728:	4a14      	ldr	r2, [pc, #80]	@ (800277c <HAL_RCC_GetSysClockFreq+0xcc>)
 800272a:	5cd3      	ldrb	r3, [r2, r3]
 800272c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d008      	beq.n	800274a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002738:	4a0e      	ldr	r2, [pc, #56]	@ (8002774 <HAL_RCC_GetSysClockFreq+0xc4>)
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	fb02 f303 	mul.w	r3, r2, r3
 8002746:	627b      	str	r3, [r7, #36]	@ 0x24
 8002748:	e004      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	4a0c      	ldr	r2, [pc, #48]	@ (8002780 <HAL_RCC_GetSysClockFreq+0xd0>)
 800274e:	fb02 f303 	mul.w	r3, r2, r3
 8002752:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002756:	623b      	str	r3, [r7, #32]
      break;
 8002758:	e002      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800275a:	4b06      	ldr	r3, [pc, #24]	@ (8002774 <HAL_RCC_GetSysClockFreq+0xc4>)
 800275c:	623b      	str	r3, [r7, #32]
      break;
 800275e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002760:	6a3b      	ldr	r3, [r7, #32]
}
 8002762:	4618      	mov	r0, r3
 8002764:	372c      	adds	r7, #44	@ 0x2c
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40021000 	.word	0x40021000
 8002774:	007a1200 	.word	0x007a1200
 8002778:	08005194 	.word	0x08005194
 800277c:	080051a4 	.word	0x080051a4
 8002780:	003d0900 	.word	0x003d0900

08002784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002788:	4b03      	ldr	r3, [pc, #12]	@ (8002798 <HAL_RCC_GetHCLKFreq+0x14>)
 800278a:	681b      	ldr	r3, [r3, #0]
}
 800278c:	4618      	mov	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	20000000 	.word	0x20000000

0800279c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80027a2:	f7ff ffef 	bl	8002784 <HAL_RCC_GetHCLKFreq>
 80027a6:	4601      	mov	r1, r0
 80027a8:	4b0b      	ldr	r3, [pc, #44]	@ (80027d8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80027b0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80027b4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	fa92 f2a2 	rbit	r2, r2
 80027bc:	603a      	str	r2, [r7, #0]
  return result;
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	fab2 f282 	clz	r2, r2
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	40d3      	lsrs	r3, r2
 80027c8:	4a04      	ldr	r2, [pc, #16]	@ (80027dc <HAL_RCC_GetPCLK1Freq+0x40>)
 80027ca:	5cd3      	ldrb	r3, [r2, r3]
 80027cc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40021000 	.word	0x40021000
 80027dc:	0800518c 	.word	0x0800518c

080027e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80027e6:	f7ff ffcd 	bl	8002784 <HAL_RCC_GetHCLKFreq>
 80027ea:	4601      	mov	r1, r0
 80027ec:	4b0b      	ldr	r3, [pc, #44]	@ (800281c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80027f4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80027f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	fa92 f2a2 	rbit	r2, r2
 8002800:	603a      	str	r2, [r7, #0]
  return result;
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	fab2 f282 	clz	r2, r2
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	40d3      	lsrs	r3, r2
 800280c:	4a04      	ldr	r2, [pc, #16]	@ (8002820 <HAL_RCC_GetPCLK2Freq+0x40>)
 800280e:	5cd3      	ldrb	r3, [r2, r3]
 8002810:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40021000 	.word	0x40021000
 8002820:	0800518c 	.word	0x0800518c

08002824 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b092      	sub	sp, #72	@ 0x48
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002834:	2300      	movs	r3, #0
 8002836:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 80d4 	beq.w	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002848:	4b4e      	ldr	r3, [pc, #312]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10e      	bne.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002854:	4b4b      	ldr	r3, [pc, #300]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	4a4a      	ldr	r2, [pc, #296]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800285a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800285e:	61d3      	str	r3, [r2, #28]
 8002860:	4b48      	ldr	r3, [pc, #288]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800286c:	2301      	movs	r3, #1
 800286e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002872:	4b45      	ldr	r3, [pc, #276]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800287a:	2b00      	cmp	r3, #0
 800287c:	d118      	bne.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800287e:	4b42      	ldr	r3, [pc, #264]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a41      	ldr	r2, [pc, #260]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002888:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800288a:	f7fe fa15 	bl	8000cb8 <HAL_GetTick>
 800288e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002890:	e008      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002892:	f7fe fa11 	bl	8000cb8 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b64      	cmp	r3, #100	@ 0x64
 800289e:	d901      	bls.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e14b      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a4:	4b38      	ldr	r3, [pc, #224]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0f0      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028b0:	4b34      	ldr	r3, [pc, #208]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 8084 	beq.w	80029ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028ca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d07c      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028d0:	4b2c      	ldr	r3, [pc, #176]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028de:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e2:	fa93 f3a3 	rbit	r3, r3
 80028e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80028e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028ea:	fab3 f383 	clz	r3, r3
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	4b26      	ldr	r3, [pc, #152]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028f4:	4413      	add	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	461a      	mov	r2, r3
 80028fa:	2301      	movs	r3, #1
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002902:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002906:	fa93 f3a3 	rbit	r3, r3
 800290a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800290c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800290e:	fab3 f383 	clz	r3, r3
 8002912:	b2db      	uxtb	r3, r3
 8002914:	461a      	mov	r2, r3
 8002916:	4b1d      	ldr	r3, [pc, #116]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	461a      	mov	r2, r3
 800291e:	2300      	movs	r3, #0
 8002920:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002922:	4a18      	ldr	r2, [pc, #96]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002926:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d04b      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002932:	f7fe f9c1 	bl	8000cb8 <HAL_GetTick>
 8002936:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002938:	e00a      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800293a:	f7fe f9bd 	bl	8000cb8 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002948:	4293      	cmp	r3, r2
 800294a:	d901      	bls.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e0f5      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002950:	2302      	movs	r3, #2
 8002952:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002956:	fa93 f3a3 	rbit	r3, r3
 800295a:	627b      	str	r3, [r7, #36]	@ 0x24
 800295c:	2302      	movs	r3, #2
 800295e:	623b      	str	r3, [r7, #32]
 8002960:	6a3b      	ldr	r3, [r7, #32]
 8002962:	fa93 f3a3 	rbit	r3, r3
 8002966:	61fb      	str	r3, [r7, #28]
  return result;
 8002968:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	095b      	lsrs	r3, r3, #5
 8002972:	b2db      	uxtb	r3, r3
 8002974:	f043 0302 	orr.w	r3, r3, #2
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d108      	bne.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800297e:	4b01      	ldr	r3, [pc, #4]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	e00d      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002984:	40021000 	.word	0x40021000
 8002988:	40007000 	.word	0x40007000
 800298c:	10908100 	.word	0x10908100
 8002990:	2302      	movs	r3, #2
 8002992:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	4b69      	ldr	r3, [pc, #420]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800299e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a0:	2202      	movs	r2, #2
 80029a2:	613a      	str	r2, [r7, #16]
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	fa92 f2a2 	rbit	r2, r2
 80029aa:	60fa      	str	r2, [r7, #12]
  return result;
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	fab2 f282 	clz	r2, r2
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	f002 021f 	and.w	r2, r2, #31
 80029be:	2101      	movs	r1, #1
 80029c0:	fa01 f202 	lsl.w	r2, r1, r2
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0b7      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80029ca:	4b5e      	ldr	r3, [pc, #376]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	495b      	ldr	r1, [pc, #364]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029dc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d105      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e4:	4b57      	ldr	r3, [pc, #348]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	4a56      	ldr	r2, [pc, #344]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80029ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d008      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029fc:	4b51      	ldr	r3, [pc, #324]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80029fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a00:	f023 0203 	bic.w	r2, r3, #3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	494e      	ldr	r1, [pc, #312]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0320 	and.w	r3, r3, #32
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d008      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a1a:	4b4a      	ldr	r3, [pc, #296]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1e:	f023 0210 	bic.w	r2, r3, #16
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	4947      	ldr	r1, [pc, #284]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002a38:	4b42      	ldr	r3, [pc, #264]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a44:	493f      	ldr	r1, [pc, #252]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d008      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a56:	4b3b      	ldr	r3, [pc, #236]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5a:	f023 0220 	bic.w	r2, r3, #32
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	4938      	ldr	r1, [pc, #224]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d008      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a74:	4b33      	ldr	r3, [pc, #204]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a78:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	4930      	ldr	r1, [pc, #192]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d008      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a92:	4b2c      	ldr	r3, [pc, #176]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	4929      	ldr	r1, [pc, #164]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d008      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002ab0:	4b24      	ldr	r3, [pc, #144]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab4:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	4921      	ldr	r1, [pc, #132]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d008      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ace:	4b1d      	ldr	r3, [pc, #116]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	491a      	ldr	r1, [pc, #104]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d008      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002aec:	4b15      	ldr	r3, [pc, #84]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af8:	4912      	ldr	r1, [pc, #72]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d008      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b16:	490b      	ldr	r1, [pc, #44]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d008      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002b28:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b34:	4903      	ldr	r1, [pc, #12]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3748      	adds	r7, #72	@ 0x48
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40021000 	.word	0x40021000

08002b48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e049      	b.n	8002bee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d106      	bne.n	8002b74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7fd feda 	bl	8000928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3304      	adds	r3, #4
 8002b84:	4619      	mov	r1, r3
 8002b86:	4610      	mov	r0, r2
 8002b88:	f000 fba8 	bl	80032dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d001      	beq.n	8002c10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e033      	b.n	8002c78 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2202      	movs	r2, #2
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a19      	ldr	r2, [pc, #100]	@ (8002c84 <HAL_TIM_Base_Start+0x8c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d009      	beq.n	8002c36 <HAL_TIM_Base_Start+0x3e>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c2a:	d004      	beq.n	8002c36 <HAL_TIM_Base_Start+0x3e>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a15      	ldr	r2, [pc, #84]	@ (8002c88 <HAL_TIM_Base_Start+0x90>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d115      	bne.n	8002c62 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	4b13      	ldr	r3, [pc, #76]	@ (8002c8c <HAL_TIM_Base_Start+0x94>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2b06      	cmp	r3, #6
 8002c46:	d015      	beq.n	8002c74 <HAL_TIM_Base_Start+0x7c>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c4e:	d011      	beq.n	8002c74 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0201 	orr.w	r2, r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c60:	e008      	b.n	8002c74 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f042 0201 	orr.w	r2, r2, #1
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	e000      	b.n	8002c76 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c74:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	40012c00 	.word	0x40012c00
 8002c88:	40014000 	.word	0x40014000
 8002c8c:	00010007 	.word	0x00010007

08002c90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e049      	b.n	8002d36 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d106      	bne.n	8002cbc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f841 	bl	8002d3e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3304      	adds	r3, #4
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4610      	mov	r0, r2
 8002cd0:	f000 fb04 	bl	80032dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
	...

08002d54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d109      	bne.n	8002d78 <HAL_TIM_PWM_Start+0x24>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	bf14      	ite	ne
 8002d70:	2301      	movne	r3, #1
 8002d72:	2300      	moveq	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	e03c      	b.n	8002df2 <HAL_TIM_PWM_Start+0x9e>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d109      	bne.n	8002d92 <HAL_TIM_PWM_Start+0x3e>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	bf14      	ite	ne
 8002d8a:	2301      	movne	r3, #1
 8002d8c:	2300      	moveq	r3, #0
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	e02f      	b.n	8002df2 <HAL_TIM_PWM_Start+0x9e>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d109      	bne.n	8002dac <HAL_TIM_PWM_Start+0x58>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	bf14      	ite	ne
 8002da4:	2301      	movne	r3, #1
 8002da6:	2300      	moveq	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	e022      	b.n	8002df2 <HAL_TIM_PWM_Start+0x9e>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	2b0c      	cmp	r3, #12
 8002db0:	d109      	bne.n	8002dc6 <HAL_TIM_PWM_Start+0x72>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	bf14      	ite	ne
 8002dbe:	2301      	movne	r3, #1
 8002dc0:	2300      	moveq	r3, #0
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	e015      	b.n	8002df2 <HAL_TIM_PWM_Start+0x9e>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b10      	cmp	r3, #16
 8002dca:	d109      	bne.n	8002de0 <HAL_TIM_PWM_Start+0x8c>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	bf14      	ite	ne
 8002dd8:	2301      	movne	r3, #1
 8002dda:	2300      	moveq	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	e008      	b.n	8002df2 <HAL_TIM_PWM_Start+0x9e>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	bf14      	ite	ne
 8002dec:	2301      	movne	r3, #1
 8002dee:	2300      	moveq	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e083      	b.n	8002f02 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d104      	bne.n	8002e0a <HAL_TIM_PWM_Start+0xb6>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e08:	e023      	b.n	8002e52 <HAL_TIM_PWM_Start+0xfe>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d104      	bne.n	8002e1a <HAL_TIM_PWM_Start+0xc6>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e18:	e01b      	b.n	8002e52 <HAL_TIM_PWM_Start+0xfe>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d104      	bne.n	8002e2a <HAL_TIM_PWM_Start+0xd6>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e28:	e013      	b.n	8002e52 <HAL_TIM_PWM_Start+0xfe>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b0c      	cmp	r3, #12
 8002e2e:	d104      	bne.n	8002e3a <HAL_TIM_PWM_Start+0xe6>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2202      	movs	r2, #2
 8002e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e38:	e00b      	b.n	8002e52 <HAL_TIM_PWM_Start+0xfe>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b10      	cmp	r3, #16
 8002e3e:	d104      	bne.n	8002e4a <HAL_TIM_PWM_Start+0xf6>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e48:	e003      	b.n	8002e52 <HAL_TIM_PWM_Start+0xfe>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2201      	movs	r2, #1
 8002e58:	6839      	ldr	r1, [r7, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fdec 	bl	8003a38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a29      	ldr	r2, [pc, #164]	@ (8002f0c <HAL_TIM_PWM_Start+0x1b8>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d00e      	beq.n	8002e88 <HAL_TIM_PWM_Start+0x134>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a28      	ldr	r2, [pc, #160]	@ (8002f10 <HAL_TIM_PWM_Start+0x1bc>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d009      	beq.n	8002e88 <HAL_TIM_PWM_Start+0x134>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a26      	ldr	r2, [pc, #152]	@ (8002f14 <HAL_TIM_PWM_Start+0x1c0>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d004      	beq.n	8002e88 <HAL_TIM_PWM_Start+0x134>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a25      	ldr	r2, [pc, #148]	@ (8002f18 <HAL_TIM_PWM_Start+0x1c4>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d101      	bne.n	8002e8c <HAL_TIM_PWM_Start+0x138>
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e000      	b.n	8002e8e <HAL_TIM_PWM_Start+0x13a>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d007      	beq.n	8002ea2 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ea0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a19      	ldr	r2, [pc, #100]	@ (8002f0c <HAL_TIM_PWM_Start+0x1b8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d009      	beq.n	8002ec0 <HAL_TIM_PWM_Start+0x16c>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eb4:	d004      	beq.n	8002ec0 <HAL_TIM_PWM_Start+0x16c>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a15      	ldr	r2, [pc, #84]	@ (8002f10 <HAL_TIM_PWM_Start+0x1bc>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d115      	bne.n	8002eec <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	4b15      	ldr	r3, [pc, #84]	@ (8002f1c <HAL_TIM_PWM_Start+0x1c8>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2b06      	cmp	r3, #6
 8002ed0:	d015      	beq.n	8002efe <HAL_TIM_PWM_Start+0x1aa>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ed8:	d011      	beq.n	8002efe <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f042 0201 	orr.w	r2, r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eea:	e008      	b.n	8002efe <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0201 	orr.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	e000      	b.n	8002f00 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002efe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40012c00 	.word	0x40012c00
 8002f10:	40014000 	.word	0x40014000
 8002f14:	40014400 	.word	0x40014400
 8002f18:	40014800 	.word	0x40014800
 8002f1c:	00010007 	.word	0x00010007

08002f20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d101      	bne.n	8002f3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e0ff      	b.n	800313e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b14      	cmp	r3, #20
 8002f4a:	f200 80f0 	bhi.w	800312e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f54:	08002fa9 	.word	0x08002fa9
 8002f58:	0800312f 	.word	0x0800312f
 8002f5c:	0800312f 	.word	0x0800312f
 8002f60:	0800312f 	.word	0x0800312f
 8002f64:	08002fe9 	.word	0x08002fe9
 8002f68:	0800312f 	.word	0x0800312f
 8002f6c:	0800312f 	.word	0x0800312f
 8002f70:	0800312f 	.word	0x0800312f
 8002f74:	0800302b 	.word	0x0800302b
 8002f78:	0800312f 	.word	0x0800312f
 8002f7c:	0800312f 	.word	0x0800312f
 8002f80:	0800312f 	.word	0x0800312f
 8002f84:	0800306b 	.word	0x0800306b
 8002f88:	0800312f 	.word	0x0800312f
 8002f8c:	0800312f 	.word	0x0800312f
 8002f90:	0800312f 	.word	0x0800312f
 8002f94:	080030ad 	.word	0x080030ad
 8002f98:	0800312f 	.word	0x0800312f
 8002f9c:	0800312f 	.word	0x0800312f
 8002fa0:	0800312f 	.word	0x0800312f
 8002fa4:	080030ed 	.word	0x080030ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68b9      	ldr	r1, [r7, #8]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 fa02 	bl	80033b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699a      	ldr	r2, [r3, #24]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0208 	orr.w	r2, r2, #8
 8002fc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699a      	ldr	r2, [r3, #24]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0204 	bic.w	r2, r2, #4
 8002fd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6999      	ldr	r1, [r3, #24]
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	691a      	ldr	r2, [r3, #16]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	619a      	str	r2, [r3, #24]
      break;
 8002fe6:	e0a5      	b.n	8003134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68b9      	ldr	r1, [r7, #8]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 fa68 	bl	80034c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699a      	ldr	r2, [r3, #24]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003002:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	699a      	ldr	r2, [r3, #24]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003012:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6999      	ldr	r1, [r3, #24]
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	021a      	lsls	r2, r3, #8
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	619a      	str	r2, [r3, #24]
      break;
 8003028:	e084      	b.n	8003134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68b9      	ldr	r1, [r7, #8]
 8003030:	4618      	mov	r0, r3
 8003032:	f000 fac7 	bl	80035c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69da      	ldr	r2, [r3, #28]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f042 0208 	orr.w	r2, r2, #8
 8003044:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	69da      	ldr	r2, [r3, #28]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 0204 	bic.w	r2, r2, #4
 8003054:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	69d9      	ldr	r1, [r3, #28]
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	61da      	str	r2, [r3, #28]
      break;
 8003068:	e064      	b.n	8003134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68b9      	ldr	r1, [r7, #8]
 8003070:	4618      	mov	r0, r3
 8003072:	f000 fb25 	bl	80036c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69da      	ldr	r2, [r3, #28]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003084:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	69da      	ldr	r2, [r3, #28]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003094:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	69d9      	ldr	r1, [r3, #28]
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	021a      	lsls	r2, r3, #8
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	61da      	str	r2, [r3, #28]
      break;
 80030aa:	e043      	b.n	8003134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68b9      	ldr	r1, [r7, #8]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 fb68 	bl	8003788 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0208 	orr.w	r2, r2, #8
 80030c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0204 	bic.w	r2, r2, #4
 80030d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	691a      	ldr	r2, [r3, #16]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80030ea:	e023      	b.n	8003134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68b9      	ldr	r1, [r7, #8]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 fba6 	bl	8003844 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003106:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003116:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	021a      	lsls	r2, r3, #8
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800312c:	e002      	b.n	8003134 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	75fb      	strb	r3, [r7, #23]
      break;
 8003132:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800313c:	7dfb      	ldrb	r3, [r7, #23]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop

08003148 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800315c:	2b01      	cmp	r3, #1
 800315e:	d101      	bne.n	8003164 <HAL_TIM_ConfigClockSource+0x1c>
 8003160:	2302      	movs	r3, #2
 8003162:	e0b6      	b.n	80032d2 <HAL_TIM_ConfigClockSource+0x18a>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003182:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003186:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800318e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031a0:	d03e      	beq.n	8003220 <HAL_TIM_ConfigClockSource+0xd8>
 80031a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031a6:	f200 8087 	bhi.w	80032b8 <HAL_TIM_ConfigClockSource+0x170>
 80031aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031ae:	f000 8086 	beq.w	80032be <HAL_TIM_ConfigClockSource+0x176>
 80031b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031b6:	d87f      	bhi.n	80032b8 <HAL_TIM_ConfigClockSource+0x170>
 80031b8:	2b70      	cmp	r3, #112	@ 0x70
 80031ba:	d01a      	beq.n	80031f2 <HAL_TIM_ConfigClockSource+0xaa>
 80031bc:	2b70      	cmp	r3, #112	@ 0x70
 80031be:	d87b      	bhi.n	80032b8 <HAL_TIM_ConfigClockSource+0x170>
 80031c0:	2b60      	cmp	r3, #96	@ 0x60
 80031c2:	d050      	beq.n	8003266 <HAL_TIM_ConfigClockSource+0x11e>
 80031c4:	2b60      	cmp	r3, #96	@ 0x60
 80031c6:	d877      	bhi.n	80032b8 <HAL_TIM_ConfigClockSource+0x170>
 80031c8:	2b50      	cmp	r3, #80	@ 0x50
 80031ca:	d03c      	beq.n	8003246 <HAL_TIM_ConfigClockSource+0xfe>
 80031cc:	2b50      	cmp	r3, #80	@ 0x50
 80031ce:	d873      	bhi.n	80032b8 <HAL_TIM_ConfigClockSource+0x170>
 80031d0:	2b40      	cmp	r3, #64	@ 0x40
 80031d2:	d058      	beq.n	8003286 <HAL_TIM_ConfigClockSource+0x13e>
 80031d4:	2b40      	cmp	r3, #64	@ 0x40
 80031d6:	d86f      	bhi.n	80032b8 <HAL_TIM_ConfigClockSource+0x170>
 80031d8:	2b30      	cmp	r3, #48	@ 0x30
 80031da:	d064      	beq.n	80032a6 <HAL_TIM_ConfigClockSource+0x15e>
 80031dc:	2b30      	cmp	r3, #48	@ 0x30
 80031de:	d86b      	bhi.n	80032b8 <HAL_TIM_ConfigClockSource+0x170>
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d060      	beq.n	80032a6 <HAL_TIM_ConfigClockSource+0x15e>
 80031e4:	2b20      	cmp	r3, #32
 80031e6:	d867      	bhi.n	80032b8 <HAL_TIM_ConfigClockSource+0x170>
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d05c      	beq.n	80032a6 <HAL_TIM_ConfigClockSource+0x15e>
 80031ec:	2b10      	cmp	r3, #16
 80031ee:	d05a      	beq.n	80032a6 <HAL_TIM_ConfigClockSource+0x15e>
 80031f0:	e062      	b.n	80032b8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003202:	f000 fbf9 	bl	80039f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003214:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	609a      	str	r2, [r3, #8]
      break;
 800321e:	e04f      	b.n	80032c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003230:	f000 fbe2 	bl	80039f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689a      	ldr	r2, [r3, #8]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003242:	609a      	str	r2, [r3, #8]
      break;
 8003244:	e03c      	b.n	80032c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003252:	461a      	mov	r2, r3
 8003254:	f000 fb56 	bl	8003904 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2150      	movs	r1, #80	@ 0x50
 800325e:	4618      	mov	r0, r3
 8003260:	f000 fbaf 	bl	80039c2 <TIM_ITRx_SetConfig>
      break;
 8003264:	e02c      	b.n	80032c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003272:	461a      	mov	r2, r3
 8003274:	f000 fb75 	bl	8003962 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2160      	movs	r1, #96	@ 0x60
 800327e:	4618      	mov	r0, r3
 8003280:	f000 fb9f 	bl	80039c2 <TIM_ITRx_SetConfig>
      break;
 8003284:	e01c      	b.n	80032c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003292:	461a      	mov	r2, r3
 8003294:	f000 fb36 	bl	8003904 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2140      	movs	r1, #64	@ 0x40
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 fb8f 	bl	80039c2 <TIM_ITRx_SetConfig>
      break;
 80032a4:	e00c      	b.n	80032c0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4619      	mov	r1, r3
 80032b0:	4610      	mov	r0, r2
 80032b2:	f000 fb86 	bl	80039c2 <TIM_ITRx_SetConfig>
      break;
 80032b6:	e003      	b.n	80032c0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	73fb      	strb	r3, [r7, #15]
      break;
 80032bc:	e000      	b.n	80032c0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80032be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a2e      	ldr	r2, [pc, #184]	@ (80033a8 <TIM_Base_SetConfig+0xcc>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d003      	beq.n	80032fc <TIM_Base_SetConfig+0x20>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032fa:	d108      	bne.n	800330e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003302:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	4313      	orrs	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a25      	ldr	r2, [pc, #148]	@ (80033a8 <TIM_Base_SetConfig+0xcc>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00f      	beq.n	8003336 <TIM_Base_SetConfig+0x5a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800331c:	d00b      	beq.n	8003336 <TIM_Base_SetConfig+0x5a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a22      	ldr	r2, [pc, #136]	@ (80033ac <TIM_Base_SetConfig+0xd0>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d007      	beq.n	8003336 <TIM_Base_SetConfig+0x5a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a21      	ldr	r2, [pc, #132]	@ (80033b0 <TIM_Base_SetConfig+0xd4>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d003      	beq.n	8003336 <TIM_Base_SetConfig+0x5a>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a20      	ldr	r2, [pc, #128]	@ (80033b4 <TIM_Base_SetConfig+0xd8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d108      	bne.n	8003348 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800333c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	4313      	orrs	r3, r2
 8003346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	4313      	orrs	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a0e      	ldr	r2, [pc, #56]	@ (80033a8 <TIM_Base_SetConfig+0xcc>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d00b      	beq.n	800338c <TIM_Base_SetConfig+0xb0>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a0d      	ldr	r2, [pc, #52]	@ (80033ac <TIM_Base_SetConfig+0xd0>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d007      	beq.n	800338c <TIM_Base_SetConfig+0xb0>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a0c      	ldr	r2, [pc, #48]	@ (80033b0 <TIM_Base_SetConfig+0xd4>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d003      	beq.n	800338c <TIM_Base_SetConfig+0xb0>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a0b      	ldr	r2, [pc, #44]	@ (80033b4 <TIM_Base_SetConfig+0xd8>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d103      	bne.n	8003394 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	691a      	ldr	r2, [r3, #16]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	615a      	str	r2, [r3, #20]
}
 800339a:	bf00      	nop
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	40012c00 	.word	0x40012c00
 80033ac:	40014000 	.word	0x40014000
 80033b0:	40014400 	.word	0x40014400
 80033b4:	40014800 	.word	0x40014800

080033b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b087      	sub	sp, #28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	f023 0201 	bic.w	r2, r3, #1
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f023 0303 	bic.w	r3, r3, #3
 80033f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f023 0302 	bic.w	r3, r3, #2
 8003404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4313      	orrs	r3, r2
 800340e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a28      	ldr	r2, [pc, #160]	@ (80034b4 <TIM_OC1_SetConfig+0xfc>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d00b      	beq.n	8003430 <TIM_OC1_SetConfig+0x78>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a27      	ldr	r2, [pc, #156]	@ (80034b8 <TIM_OC1_SetConfig+0x100>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d007      	beq.n	8003430 <TIM_OC1_SetConfig+0x78>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a26      	ldr	r2, [pc, #152]	@ (80034bc <TIM_OC1_SetConfig+0x104>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d003      	beq.n	8003430 <TIM_OC1_SetConfig+0x78>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a25      	ldr	r2, [pc, #148]	@ (80034c0 <TIM_OC1_SetConfig+0x108>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d10c      	bne.n	800344a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f023 0308 	bic.w	r3, r3, #8
 8003436:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	4313      	orrs	r3, r2
 8003440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f023 0304 	bic.w	r3, r3, #4
 8003448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a19      	ldr	r2, [pc, #100]	@ (80034b4 <TIM_OC1_SetConfig+0xfc>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00b      	beq.n	800346a <TIM_OC1_SetConfig+0xb2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a18      	ldr	r2, [pc, #96]	@ (80034b8 <TIM_OC1_SetConfig+0x100>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d007      	beq.n	800346a <TIM_OC1_SetConfig+0xb2>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a17      	ldr	r2, [pc, #92]	@ (80034bc <TIM_OC1_SetConfig+0x104>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d003      	beq.n	800346a <TIM_OC1_SetConfig+0xb2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a16      	ldr	r2, [pc, #88]	@ (80034c0 <TIM_OC1_SetConfig+0x108>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d111      	bne.n	800348e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003470:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003478:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	621a      	str	r2, [r3, #32]
}
 80034a8:	bf00      	nop
 80034aa:	371c      	adds	r7, #28
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	40012c00 	.word	0x40012c00
 80034b8:	40014000 	.word	0x40014000
 80034bc:	40014400 	.word	0x40014400
 80034c0:	40014800 	.word	0x40014800

080034c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b087      	sub	sp, #28
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	f023 0210 	bic.w	r2, r3, #16
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	021b      	lsls	r3, r3, #8
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4313      	orrs	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f023 0320 	bic.w	r3, r3, #32
 8003512:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	4313      	orrs	r3, r2
 800351e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a24      	ldr	r2, [pc, #144]	@ (80035b4 <TIM_OC2_SetConfig+0xf0>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d10d      	bne.n	8003544 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800352e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	4313      	orrs	r3, r2
 800353a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003542:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a1b      	ldr	r2, [pc, #108]	@ (80035b4 <TIM_OC2_SetConfig+0xf0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d00b      	beq.n	8003564 <TIM_OC2_SetConfig+0xa0>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a1a      	ldr	r2, [pc, #104]	@ (80035b8 <TIM_OC2_SetConfig+0xf4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d007      	beq.n	8003564 <TIM_OC2_SetConfig+0xa0>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a19      	ldr	r2, [pc, #100]	@ (80035bc <TIM_OC2_SetConfig+0xf8>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d003      	beq.n	8003564 <TIM_OC2_SetConfig+0xa0>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a18      	ldr	r2, [pc, #96]	@ (80035c0 <TIM_OC2_SetConfig+0xfc>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d113      	bne.n	800358c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800356a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003572:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	4313      	orrs	r3, r2
 800357e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	621a      	str	r2, [r3, #32]
}
 80035a6:	bf00      	nop
 80035a8:	371c      	adds	r7, #28
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	40012c00 	.word	0x40012c00
 80035b8:	40014000 	.word	0x40014000
 80035bc:	40014400 	.word	0x40014400
 80035c0:	40014800 	.word	0x40014800

080035c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b087      	sub	sp, #28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f023 0303 	bic.w	r3, r3, #3
 80035fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	4313      	orrs	r3, r2
 8003608:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003610:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	4313      	orrs	r3, r2
 800361c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a23      	ldr	r2, [pc, #140]	@ (80036b0 <TIM_OC3_SetConfig+0xec>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d10d      	bne.n	8003642 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800362c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	021b      	lsls	r3, r3, #8
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	4313      	orrs	r3, r2
 8003638:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003640:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a1a      	ldr	r2, [pc, #104]	@ (80036b0 <TIM_OC3_SetConfig+0xec>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d00b      	beq.n	8003662 <TIM_OC3_SetConfig+0x9e>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a19      	ldr	r2, [pc, #100]	@ (80036b4 <TIM_OC3_SetConfig+0xf0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d007      	beq.n	8003662 <TIM_OC3_SetConfig+0x9e>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a18      	ldr	r2, [pc, #96]	@ (80036b8 <TIM_OC3_SetConfig+0xf4>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d003      	beq.n	8003662 <TIM_OC3_SetConfig+0x9e>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a17      	ldr	r2, [pc, #92]	@ (80036bc <TIM_OC3_SetConfig+0xf8>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d113      	bne.n	800368a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	621a      	str	r2, [r3, #32]
}
 80036a4:	bf00      	nop
 80036a6:	371c      	adds	r7, #28
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	40012c00 	.word	0x40012c00
 80036b4:	40014000 	.word	0x40014000
 80036b8:	40014400 	.word	0x40014400
 80036bc:	40014800 	.word	0x40014800

080036c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b087      	sub	sp, #28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	021b      	lsls	r3, r3, #8
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	4313      	orrs	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800370e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	031b      	lsls	r3, r3, #12
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	4313      	orrs	r3, r2
 800371a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a16      	ldr	r2, [pc, #88]	@ (8003778 <TIM_OC4_SetConfig+0xb8>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d00b      	beq.n	800373c <TIM_OC4_SetConfig+0x7c>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a15      	ldr	r2, [pc, #84]	@ (800377c <TIM_OC4_SetConfig+0xbc>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d007      	beq.n	800373c <TIM_OC4_SetConfig+0x7c>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a14      	ldr	r2, [pc, #80]	@ (8003780 <TIM_OC4_SetConfig+0xc0>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d003      	beq.n	800373c <TIM_OC4_SetConfig+0x7c>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a13      	ldr	r2, [pc, #76]	@ (8003784 <TIM_OC4_SetConfig+0xc4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d109      	bne.n	8003750 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003742:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	019b      	lsls	r3, r3, #6
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	4313      	orrs	r3, r2
 800374e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	621a      	str	r2, [r3, #32]
}
 800376a:	bf00      	nop
 800376c:	371c      	adds	r7, #28
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40012c00 	.word	0x40012c00
 800377c:	40014000 	.word	0x40014000
 8003780:	40014400 	.word	0x40014400
 8003784:	40014800 	.word	0x40014800

08003788 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003788:	b480      	push	{r7}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80037cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	041b      	lsls	r3, r3, #16
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a15      	ldr	r2, [pc, #84]	@ (8003834 <TIM_OC5_SetConfig+0xac>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00b      	beq.n	80037fa <TIM_OC5_SetConfig+0x72>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a14      	ldr	r2, [pc, #80]	@ (8003838 <TIM_OC5_SetConfig+0xb0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d007      	beq.n	80037fa <TIM_OC5_SetConfig+0x72>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a13      	ldr	r2, [pc, #76]	@ (800383c <TIM_OC5_SetConfig+0xb4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d003      	beq.n	80037fa <TIM_OC5_SetConfig+0x72>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a12      	ldr	r2, [pc, #72]	@ (8003840 <TIM_OC5_SetConfig+0xb8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d109      	bne.n	800380e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003800:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	021b      	lsls	r3, r3, #8
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	4313      	orrs	r3, r2
 800380c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	621a      	str	r2, [r3, #32]
}
 8003828:	bf00      	nop
 800382a:	371c      	adds	r7, #28
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	40012c00 	.word	0x40012c00
 8003838:	40014000 	.word	0x40014000
 800383c:	40014400 	.word	0x40014400
 8003840:	40014800 	.word	0x40014800

08003844 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003844:	b480      	push	{r7}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800386a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003872:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	021b      	lsls	r3, r3, #8
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4313      	orrs	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800388a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	051b      	lsls	r3, r3, #20
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a16      	ldr	r2, [pc, #88]	@ (80038f4 <TIM_OC6_SetConfig+0xb0>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00b      	beq.n	80038b8 <TIM_OC6_SetConfig+0x74>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a15      	ldr	r2, [pc, #84]	@ (80038f8 <TIM_OC6_SetConfig+0xb4>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d007      	beq.n	80038b8 <TIM_OC6_SetConfig+0x74>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a14      	ldr	r2, [pc, #80]	@ (80038fc <TIM_OC6_SetConfig+0xb8>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d003      	beq.n	80038b8 <TIM_OC6_SetConfig+0x74>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a13      	ldr	r2, [pc, #76]	@ (8003900 <TIM_OC6_SetConfig+0xbc>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d109      	bne.n	80038cc <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	029b      	lsls	r3, r3, #10
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	621a      	str	r2, [r3, #32]
}
 80038e6:	bf00      	nop
 80038e8:	371c      	adds	r7, #28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	40012c00 	.word	0x40012c00
 80038f8:	40014000 	.word	0x40014000
 80038fc:	40014400 	.word	0x40014400
 8003900:	40014800 	.word	0x40014800

08003904 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003904:	b480      	push	{r7}
 8003906:	b087      	sub	sp, #28
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	f023 0201 	bic.w	r2, r3, #1
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800392e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f023 030a 	bic.w	r3, r3, #10
 8003940:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	4313      	orrs	r3, r2
 8003948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	621a      	str	r2, [r3, #32]
}
 8003956:	bf00      	nop
 8003958:	371c      	adds	r7, #28
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003962:	b480      	push	{r7}
 8003964:	b087      	sub	sp, #28
 8003966:	af00      	add	r7, sp, #0
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	f023 0210 	bic.w	r2, r3, #16
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800398c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	031b      	lsls	r3, r3, #12
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	4313      	orrs	r3, r2
 8003996:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800399e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	621a      	str	r2, [r3, #32]
}
 80039b6:	bf00      	nop
 80039b8:	371c      	adds	r7, #28
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b085      	sub	sp, #20
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4313      	orrs	r3, r2
 80039e0:	f043 0307 	orr.w	r3, r3, #7
 80039e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	609a      	str	r2, [r3, #8]
}
 80039ec:	bf00      	nop
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	021a      	lsls	r2, r3, #8
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	609a      	str	r2, [r3, #8]
}
 8003a2c:	bf00      	nop
 8003a2e:	371c      	adds	r7, #28
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	f003 031f 	and.w	r3, r3, #31
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a1a      	ldr	r2, [r3, #32]
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	401a      	ands	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6a1a      	ldr	r2, [r3, #32]
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f003 031f 	and.w	r3, r3, #31
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a70:	431a      	orrs	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	621a      	str	r2, [r3, #32]
}
 8003a76:	bf00      	nop
 8003a78:	371c      	adds	r7, #28
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
	...

08003a84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d101      	bne.n	8003a9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	e04f      	b.n	8003b3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a21      	ldr	r2, [pc, #132]	@ (8003b48 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d108      	bne.n	8003ad8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003acc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ade:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a14      	ldr	r2, [pc, #80]	@ (8003b48 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d009      	beq.n	8003b10 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b04:	d004      	beq.n	8003b10 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a10      	ldr	r2, [pc, #64]	@ (8003b4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d10c      	bne.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	40012c00 	.word	0x40012c00
 8003b4c:	40014000 	.word	0x40014000

08003b50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d101      	bne.n	8003b6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	e060      	b.n	8003c2e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	041b      	lsls	r3, r3, #16
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a14      	ldr	r2, [pc, #80]	@ (8003c3c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d115      	bne.n	8003c1c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfa:	051b      	lsls	r3, r3, #20
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	40012c00 	.word	0x40012c00

08003c40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e040      	b.n	8003cd4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d106      	bne.n	8003c68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7fc feca 	bl	80009fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2224      	movs	r2, #36	@ 0x24
 8003c6c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0201 	bic.w	r2, r2, #1
 8003c7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 fc40 	bl	8004504 <UART_SetConfig>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d101      	bne.n	8003c8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e022      	b.n	8003cd4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 fd6a 	bl	8004770 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003caa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 0201 	orr.w	r2, r2, #1
 8003cca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 fdf1 	bl	80048b4 <UART_CheckIdleState>
 8003cd2:	4603      	mov	r3, r0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3708      	adds	r7, #8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08a      	sub	sp, #40	@ 0x28
 8003ce0:	af02      	add	r7, sp, #8
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	603b      	str	r3, [r7, #0]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cf2:	2b20      	cmp	r3, #32
 8003cf4:	f040 80b6 	bne.w	8003e64 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <HAL_UART_Receive+0x28>
 8003cfe:	88fb      	ldrh	r3, [r7, #6]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e0ae      	b.n	8003e66 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2222      	movs	r2, #34	@ 0x22
 8003d14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d1e:	f7fc ffcb 	bl	8000cb8 <HAL_GetTick>
 8003d22:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	88fa      	ldrh	r2, [r7, #6]
 8003d28:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	88fa      	ldrh	r2, [r7, #6]
 8003d30:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d3c:	d10e      	bne.n	8003d5c <HAL_UART_Receive+0x80>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d105      	bne.n	8003d52 <HAL_UART_Receive+0x76>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003d4c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003d50:	e02d      	b.n	8003dae <HAL_UART_Receive+0xd2>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	22ff      	movs	r2, #255	@ 0xff
 8003d56:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003d5a:	e028      	b.n	8003dae <HAL_UART_Receive+0xd2>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10d      	bne.n	8003d80 <HAL_UART_Receive+0xa4>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d104      	bne.n	8003d76 <HAL_UART_Receive+0x9a>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	22ff      	movs	r2, #255	@ 0xff
 8003d70:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003d74:	e01b      	b.n	8003dae <HAL_UART_Receive+0xd2>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	227f      	movs	r2, #127	@ 0x7f
 8003d7a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003d7e:	e016      	b.n	8003dae <HAL_UART_Receive+0xd2>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d88:	d10d      	bne.n	8003da6 <HAL_UART_Receive+0xca>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d104      	bne.n	8003d9c <HAL_UART_Receive+0xc0>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	227f      	movs	r2, #127	@ 0x7f
 8003d96:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003d9a:	e008      	b.n	8003dae <HAL_UART_Receive+0xd2>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	223f      	movs	r2, #63	@ 0x3f
 8003da0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003da4:	e003      	b.n	8003dae <HAL_UART_Receive+0xd2>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003db4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dbe:	d108      	bne.n	8003dd2 <HAL_UART_Receive+0xf6>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d104      	bne.n	8003dd2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	61bb      	str	r3, [r7, #24]
 8003dd0:	e003      	b.n	8003dda <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003dda:	e037      	b.n	8003e4c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	2200      	movs	r2, #0
 8003de4:	2120      	movs	r1, #32
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 fe0c 	bl	8004a04 <UART_WaitOnFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d005      	beq.n	8003dfe <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2220      	movs	r2, #32
 8003df6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e033      	b.n	8003e66 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10c      	bne.n	8003e1e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	8a7b      	ldrh	r3, [r7, #18]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	3302      	adds	r3, #2
 8003e1a:	61bb      	str	r3, [r7, #24]
 8003e1c:	e00d      	b.n	8003e3a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	8a7b      	ldrh	r3, [r7, #18]
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	3301      	adds	r3, #1
 8003e38:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	3b01      	subs	r3, #1
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1c1      	bne.n	8003ddc <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8003e60:	2300      	movs	r3, #0
 8003e62:	e000      	b.n	8003e66 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003e64:	2302      	movs	r3, #2
  }
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3720      	adds	r7, #32
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b08a      	sub	sp, #40	@ 0x28
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e82:	2b20      	cmp	r3, #32
 8003e84:	d132      	bne.n	8003eec <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d002      	beq.n	8003e92 <HAL_UART_Receive_IT+0x24>
 8003e8c:	88fb      	ldrh	r3, [r7, #6]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e02b      	b.n	8003eee <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d018      	beq.n	8003edc <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	e853 3f00 	ldrex	r3, [r3]
 8003eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ebe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec8:	623b      	str	r3, [r7, #32]
 8003eca:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ecc:	69f9      	ldr	r1, [r7, #28]
 8003ece:	6a3a      	ldr	r2, [r7, #32]
 8003ed0:	e841 2300 	strex	r3, r2, [r1]
 8003ed4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1e6      	bne.n	8003eaa <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003edc:	88fb      	ldrh	r3, [r7, #6]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	68b9      	ldr	r1, [r7, #8]
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 fdf6 	bl	8004ad4 <UART_Start_Receive_IT>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	e000      	b.n	8003eee <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003eec:	2302      	movs	r3, #2
  }
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3728      	adds	r7, #40	@ 0x28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b0ba      	sub	sp, #232	@ 0xe8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003f1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003f22:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003f26:	4013      	ands	r3, r2
 8003f28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003f2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d115      	bne.n	8003f60 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f38:	f003 0320 	and.w	r3, r3, #32
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00f      	beq.n	8003f60 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f44:	f003 0320 	and.w	r3, r3, #32
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d009      	beq.n	8003f60 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 82ab 	beq.w	80044ac <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	4798      	blx	r3
      }
      return;
 8003f5e:	e2a5      	b.n	80044ac <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003f60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 8117 	beq.w	8004198 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d106      	bne.n	8003f84 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003f76:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003f7a:	4b85      	ldr	r3, [pc, #532]	@ (8004190 <HAL_UART_IRQHandler+0x298>)
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 810a 	beq.w	8004198 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d011      	beq.n	8003fb4 <HAL_UART_IRQHandler+0xbc>
 8003f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00b      	beq.n	8003fb4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003faa:	f043 0201 	orr.w	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d011      	beq.n	8003fe4 <HAL_UART_IRQHandler+0xec>
 8003fc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00b      	beq.n	8003fe4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fda:	f043 0204 	orr.w	r2, r3, #4
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d011      	beq.n	8004014 <HAL_UART_IRQHandler+0x11c>
 8003ff0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00b      	beq.n	8004014 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2204      	movs	r2, #4
 8004002:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800400a:	f043 0202 	orr.w	r2, r3, #2
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004018:	f003 0308 	and.w	r3, r3, #8
 800401c:	2b00      	cmp	r3, #0
 800401e:	d017      	beq.n	8004050 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004024:	f003 0320 	and.w	r3, r3, #32
 8004028:	2b00      	cmp	r3, #0
 800402a:	d105      	bne.n	8004038 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800402c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004030:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00b      	beq.n	8004050 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2208      	movs	r2, #8
 800403e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004046:	f043 0208 	orr.w	r2, r3, #8
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004054:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004058:	2b00      	cmp	r3, #0
 800405a:	d012      	beq.n	8004082 <HAL_UART_IRQHandler+0x18a>
 800405c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004060:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00c      	beq.n	8004082 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004070:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004078:	f043 0220 	orr.w	r2, r3, #32
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 8211 	beq.w	80044b0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800408e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004092:	f003 0320 	and.w	r3, r3, #32
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00d      	beq.n	80040b6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800409a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800409e:	f003 0320 	and.w	r3, r3, #32
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d007      	beq.n	80040b6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ca:	2b40      	cmp	r3, #64	@ 0x40
 80040cc:	d005      	beq.n	80040da <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80040ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040d2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d04f      	beq.n	800417a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 fdc0 	bl	8004c60 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ea:	2b40      	cmp	r3, #64	@ 0x40
 80040ec:	d141      	bne.n	8004172 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3308      	adds	r3, #8
 80040f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80040fc:	e853 3f00 	ldrex	r3, [r3]
 8004100:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004104:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004108:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800410c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3308      	adds	r3, #8
 8004116:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800411a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800411e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004122:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004126:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800412a:	e841 2300 	strex	r3, r2, [r1]
 800412e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1d9      	bne.n	80040ee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800413e:	2b00      	cmp	r3, #0
 8004140:	d013      	beq.n	800416a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004146:	4a13      	ldr	r2, [pc, #76]	@ (8004194 <HAL_UART_IRQHandler+0x29c>)
 8004148:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800414e:	4618      	mov	r0, r3
 8004150:	f7fc ff2c 	bl	8000fac <HAL_DMA_Abort_IT>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d017      	beq.n	800418a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800415e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004164:	4610      	mov	r0, r2
 8004166:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004168:	e00f      	b.n	800418a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f9b4 	bl	80044d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004170:	e00b      	b.n	800418a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f9b0 	bl	80044d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004178:	e007      	b.n	800418a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f9ac 	bl	80044d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004188:	e192      	b.n	80044b0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800418a:	bf00      	nop
    return;
 800418c:	e190      	b.n	80044b0 <HAL_UART_IRQHandler+0x5b8>
 800418e:	bf00      	nop
 8004190:	04000120 	.word	0x04000120
 8004194:	08004d29 	.word	0x08004d29

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800419c:	2b01      	cmp	r3, #1
 800419e:	f040 814b 	bne.w	8004438 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80041a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041a6:	f003 0310 	and.w	r3, r3, #16
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 8144 	beq.w	8004438 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80041b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041b4:	f003 0310 	and.w	r3, r3, #16
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 813d 	beq.w	8004438 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2210      	movs	r2, #16
 80041c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041d0:	2b40      	cmp	r3, #64	@ 0x40
 80041d2:	f040 80b5 	bne.w	8004340 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 8164 	beq.w	80044b4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80041f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041f6:	429a      	cmp	r2, r3
 80041f8:	f080 815c 	bcs.w	80044b4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004202:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	2b20      	cmp	r3, #32
 800420e:	f000 8086 	beq.w	800431e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800421e:	e853 3f00 	ldrex	r3, [r3]
 8004222:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004226:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800422a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800422e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	461a      	mov	r2, r3
 8004238:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800423c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004240:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004244:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004248:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800424c:	e841 2300 	strex	r3, r2, [r1]
 8004250:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004254:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1da      	bne.n	8004212 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3308      	adds	r3, #8
 8004262:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800426c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800426e:	f023 0301 	bic.w	r3, r3, #1
 8004272:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	3308      	adds	r3, #8
 800427c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004280:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004284:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004286:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004288:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800428c:	e841 2300 	strex	r3, r2, [r1]
 8004290:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004292:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1e1      	bne.n	800425c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3308      	adds	r3, #8
 800429e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042a2:	e853 3f00 	ldrex	r3, [r3]
 80042a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80042a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	3308      	adds	r3, #8
 80042b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80042bc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80042be:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80042c2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80042c4:	e841 2300 	strex	r3, r2, [r1]
 80042c8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80042ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1e3      	bne.n	8004298 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042e6:	e853 3f00 	ldrex	r3, [r3]
 80042ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80042ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042ee:	f023 0310 	bic.w	r3, r3, #16
 80042f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	461a      	mov	r2, r3
 80042fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004300:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004302:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004304:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004306:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004308:	e841 2300 	strex	r3, r2, [r1]
 800430c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800430e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1e4      	bne.n	80042de <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004318:	4618      	mov	r0, r3
 800431a:	f7fc fe0e 	bl	8000f3a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2202      	movs	r2, #2
 8004322:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004330:	b29b      	uxth	r3, r3
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	b29b      	uxth	r3, r3
 8004336:	4619      	mov	r1, r3
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f8d7 	bl	80044ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800433e:	e0b9      	b.n	80044b4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800434c:	b29b      	uxth	r3, r3
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800435a:	b29b      	uxth	r3, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 80ab 	beq.w	80044b8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004362:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 80a6 	beq.w	80044b8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004374:	e853 3f00 	ldrex	r3, [r3]
 8004378:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800437a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800437c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004380:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	461a      	mov	r2, r3
 800438a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800438e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004390:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004392:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004394:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004396:	e841 2300 	strex	r3, r2, [r1]
 800439a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800439c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1e4      	bne.n	800436c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3308      	adds	r3, #8
 80043a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	e853 3f00 	ldrex	r3, [r3]
 80043b0:	623b      	str	r3, [r7, #32]
   return(result);
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	f023 0301 	bic.w	r3, r3, #1
 80043b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3308      	adds	r3, #8
 80043c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80043c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80043c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043ce:	e841 2300 	strex	r3, r2, [r1]
 80043d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1e3      	bne.n	80043a2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2220      	movs	r2, #32
 80043de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	e853 3f00 	ldrex	r3, [r3]
 80043fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 0310 	bic.w	r3, r3, #16
 8004402:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	461a      	mov	r2, r3
 800440c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004410:	61fb      	str	r3, [r7, #28]
 8004412:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004414:	69b9      	ldr	r1, [r7, #24]
 8004416:	69fa      	ldr	r2, [r7, #28]
 8004418:	e841 2300 	strex	r3, r2, [r1]
 800441c:	617b      	str	r3, [r7, #20]
   return(result);
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1e4      	bne.n	80043ee <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800442a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800442e:	4619      	mov	r1, r3
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f85b 	bl	80044ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004436:	e03f      	b.n	80044b8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800443c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00e      	beq.n	8004462 <HAL_UART_IRQHandler+0x56a>
 8004444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004448:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004458:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 fe4c 	bl	80050f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004460:	e02d      	b.n	80044be <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00e      	beq.n	800448c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800446e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004476:	2b00      	cmp	r3, #0
 8004478:	d008      	beq.n	800448c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800447e:	2b00      	cmp	r3, #0
 8004480:	d01c      	beq.n	80044bc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	4798      	blx	r3
    }
    return;
 800448a:	e017      	b.n	80044bc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800448c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004494:	2b00      	cmp	r3, #0
 8004496:	d012      	beq.n	80044be <HAL_UART_IRQHandler+0x5c6>
 8004498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800449c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00c      	beq.n	80044be <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 fc55 	bl	8004d54 <UART_EndTransmit_IT>
    return;
 80044aa:	e008      	b.n	80044be <HAL_UART_IRQHandler+0x5c6>
      return;
 80044ac:	bf00      	nop
 80044ae:	e006      	b.n	80044be <HAL_UART_IRQHandler+0x5c6>
    return;
 80044b0:	bf00      	nop
 80044b2:	e004      	b.n	80044be <HAL_UART_IRQHandler+0x5c6>
      return;
 80044b4:	bf00      	nop
 80044b6:	e002      	b.n	80044be <HAL_UART_IRQHandler+0x5c6>
      return;
 80044b8:	bf00      	nop
 80044ba:	e000      	b.n	80044be <HAL_UART_IRQHandler+0x5c6>
    return;
 80044bc:	bf00      	nop
  }

}
 80044be:	37e8      	adds	r7, #232	@ 0xe8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b088      	sub	sp, #32
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800450c:	2300      	movs	r3, #0
 800450e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	431a      	orrs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	69db      	ldr	r3, [r3, #28]
 8004524:	4313      	orrs	r3, r2
 8004526:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	4b8a      	ldr	r3, [pc, #552]	@ (8004758 <UART_SetConfig+0x254>)
 8004530:	4013      	ands	r3, r2
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6812      	ldr	r2, [r2, #0]
 8004536:	6979      	ldr	r1, [r7, #20]
 8004538:	430b      	orrs	r3, r1
 800453a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68da      	ldr	r2, [r3, #12]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	4313      	orrs	r3, r2
 8004560:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	430a      	orrs	r2, r1
 8004574:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a78      	ldr	r2, [pc, #480]	@ (800475c <UART_SetConfig+0x258>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d120      	bne.n	80045c2 <UART_SetConfig+0xbe>
 8004580:	4b77      	ldr	r3, [pc, #476]	@ (8004760 <UART_SetConfig+0x25c>)
 8004582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004584:	f003 0303 	and.w	r3, r3, #3
 8004588:	2b03      	cmp	r3, #3
 800458a:	d817      	bhi.n	80045bc <UART_SetConfig+0xb8>
 800458c:	a201      	add	r2, pc, #4	@ (adr r2, 8004594 <UART_SetConfig+0x90>)
 800458e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004592:	bf00      	nop
 8004594:	080045a5 	.word	0x080045a5
 8004598:	080045b1 	.word	0x080045b1
 800459c:	080045b7 	.word	0x080045b7
 80045a0:	080045ab 	.word	0x080045ab
 80045a4:	2300      	movs	r3, #0
 80045a6:	77fb      	strb	r3, [r7, #31]
 80045a8:	e01d      	b.n	80045e6 <UART_SetConfig+0xe2>
 80045aa:	2302      	movs	r3, #2
 80045ac:	77fb      	strb	r3, [r7, #31]
 80045ae:	e01a      	b.n	80045e6 <UART_SetConfig+0xe2>
 80045b0:	2304      	movs	r3, #4
 80045b2:	77fb      	strb	r3, [r7, #31]
 80045b4:	e017      	b.n	80045e6 <UART_SetConfig+0xe2>
 80045b6:	2308      	movs	r3, #8
 80045b8:	77fb      	strb	r3, [r7, #31]
 80045ba:	e014      	b.n	80045e6 <UART_SetConfig+0xe2>
 80045bc:	2310      	movs	r3, #16
 80045be:	77fb      	strb	r3, [r7, #31]
 80045c0:	e011      	b.n	80045e6 <UART_SetConfig+0xe2>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a67      	ldr	r2, [pc, #412]	@ (8004764 <UART_SetConfig+0x260>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d102      	bne.n	80045d2 <UART_SetConfig+0xce>
 80045cc:	2300      	movs	r3, #0
 80045ce:	77fb      	strb	r3, [r7, #31]
 80045d0:	e009      	b.n	80045e6 <UART_SetConfig+0xe2>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a64      	ldr	r2, [pc, #400]	@ (8004768 <UART_SetConfig+0x264>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d102      	bne.n	80045e2 <UART_SetConfig+0xde>
 80045dc:	2300      	movs	r3, #0
 80045de:	77fb      	strb	r3, [r7, #31]
 80045e0:	e001      	b.n	80045e6 <UART_SetConfig+0xe2>
 80045e2:	2310      	movs	r3, #16
 80045e4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045ee:	d15a      	bne.n	80046a6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80045f0:	7ffb      	ldrb	r3, [r7, #31]
 80045f2:	2b08      	cmp	r3, #8
 80045f4:	d827      	bhi.n	8004646 <UART_SetConfig+0x142>
 80045f6:	a201      	add	r2, pc, #4	@ (adr r2, 80045fc <UART_SetConfig+0xf8>)
 80045f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fc:	08004621 	.word	0x08004621
 8004600:	08004629 	.word	0x08004629
 8004604:	08004631 	.word	0x08004631
 8004608:	08004647 	.word	0x08004647
 800460c:	08004637 	.word	0x08004637
 8004610:	08004647 	.word	0x08004647
 8004614:	08004647 	.word	0x08004647
 8004618:	08004647 	.word	0x08004647
 800461c:	0800463f 	.word	0x0800463f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004620:	f7fe f8bc 	bl	800279c <HAL_RCC_GetPCLK1Freq>
 8004624:	61b8      	str	r0, [r7, #24]
        break;
 8004626:	e013      	b.n	8004650 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004628:	f7fe f8da 	bl	80027e0 <HAL_RCC_GetPCLK2Freq>
 800462c:	61b8      	str	r0, [r7, #24]
        break;
 800462e:	e00f      	b.n	8004650 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004630:	4b4e      	ldr	r3, [pc, #312]	@ (800476c <UART_SetConfig+0x268>)
 8004632:	61bb      	str	r3, [r7, #24]
        break;
 8004634:	e00c      	b.n	8004650 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004636:	f7fe f83b 	bl	80026b0 <HAL_RCC_GetSysClockFreq>
 800463a:	61b8      	str	r0, [r7, #24]
        break;
 800463c:	e008      	b.n	8004650 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800463e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004642:	61bb      	str	r3, [r7, #24]
        break;
 8004644:	e004      	b.n	8004650 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004646:	2300      	movs	r3, #0
 8004648:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	77bb      	strb	r3, [r7, #30]
        break;
 800464e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d074      	beq.n	8004740 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	005a      	lsls	r2, r3, #1
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	085b      	lsrs	r3, r3, #1
 8004660:	441a      	add	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	fbb2 f3f3 	udiv	r3, r2, r3
 800466a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	2b0f      	cmp	r3, #15
 8004670:	d916      	bls.n	80046a0 <UART_SetConfig+0x19c>
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004678:	d212      	bcs.n	80046a0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	b29b      	uxth	r3, r3
 800467e:	f023 030f 	bic.w	r3, r3, #15
 8004682:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	085b      	lsrs	r3, r3, #1
 8004688:	b29b      	uxth	r3, r3
 800468a:	f003 0307 	and.w	r3, r3, #7
 800468e:	b29a      	uxth	r2, r3
 8004690:	89fb      	ldrh	r3, [r7, #14]
 8004692:	4313      	orrs	r3, r2
 8004694:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	89fa      	ldrh	r2, [r7, #14]
 800469c:	60da      	str	r2, [r3, #12]
 800469e:	e04f      	b.n	8004740 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	77bb      	strb	r3, [r7, #30]
 80046a4:	e04c      	b.n	8004740 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046a6:	7ffb      	ldrb	r3, [r7, #31]
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d828      	bhi.n	80046fe <UART_SetConfig+0x1fa>
 80046ac:	a201      	add	r2, pc, #4	@ (adr r2, 80046b4 <UART_SetConfig+0x1b0>)
 80046ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b2:	bf00      	nop
 80046b4:	080046d9 	.word	0x080046d9
 80046b8:	080046e1 	.word	0x080046e1
 80046bc:	080046e9 	.word	0x080046e9
 80046c0:	080046ff 	.word	0x080046ff
 80046c4:	080046ef 	.word	0x080046ef
 80046c8:	080046ff 	.word	0x080046ff
 80046cc:	080046ff 	.word	0x080046ff
 80046d0:	080046ff 	.word	0x080046ff
 80046d4:	080046f7 	.word	0x080046f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046d8:	f7fe f860 	bl	800279c <HAL_RCC_GetPCLK1Freq>
 80046dc:	61b8      	str	r0, [r7, #24]
        break;
 80046de:	e013      	b.n	8004708 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046e0:	f7fe f87e 	bl	80027e0 <HAL_RCC_GetPCLK2Freq>
 80046e4:	61b8      	str	r0, [r7, #24]
        break;
 80046e6:	e00f      	b.n	8004708 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046e8:	4b20      	ldr	r3, [pc, #128]	@ (800476c <UART_SetConfig+0x268>)
 80046ea:	61bb      	str	r3, [r7, #24]
        break;
 80046ec:	e00c      	b.n	8004708 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ee:	f7fd ffdf 	bl	80026b0 <HAL_RCC_GetSysClockFreq>
 80046f2:	61b8      	str	r0, [r7, #24]
        break;
 80046f4:	e008      	b.n	8004708 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046fa:	61bb      	str	r3, [r7, #24]
        break;
 80046fc:	e004      	b.n	8004708 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80046fe:	2300      	movs	r3, #0
 8004700:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	77bb      	strb	r3, [r7, #30]
        break;
 8004706:	bf00      	nop
    }

    if (pclk != 0U)
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d018      	beq.n	8004740 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	085a      	lsrs	r2, r3, #1
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	441a      	add	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004720:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	2b0f      	cmp	r3, #15
 8004726:	d909      	bls.n	800473c <UART_SetConfig+0x238>
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800472e:	d205      	bcs.n	800473c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	b29a      	uxth	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	60da      	str	r2, [r3, #12]
 800473a:	e001      	b.n	8004740 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800474c:	7fbb      	ldrb	r3, [r7, #30]
}
 800474e:	4618      	mov	r0, r3
 8004750:	3720      	adds	r7, #32
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	efff69f3 	.word	0xefff69f3
 800475c:	40013800 	.word	0x40013800
 8004760:	40021000 	.word	0x40021000
 8004764:	40004400 	.word	0x40004400
 8004768:	40004800 	.word	0x40004800
 800476c:	007a1200 	.word	0x007a1200

08004770 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00a      	beq.n	800479a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00a      	beq.n	80047de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e2:	f003 0308 	and.w	r3, r3, #8
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004804:	f003 0310 	and.w	r3, r3, #16
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00a      	beq.n	8004822 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004826:	f003 0320 	and.w	r3, r3, #32
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800484c:	2b00      	cmp	r3, #0
 800484e:	d01a      	beq.n	8004886 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800486a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800486e:	d10a      	bne.n	8004886 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	605a      	str	r2, [r3, #4]
  }
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b098      	sub	sp, #96	@ 0x60
 80048b8:	af02      	add	r7, sp, #8
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048c4:	f7fc f9f8 	bl	8000cb8 <HAL_GetTick>
 80048c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0308 	and.w	r3, r3, #8
 80048d4:	2b08      	cmp	r3, #8
 80048d6:	d12e      	bne.n	8004936 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048e0:	2200      	movs	r2, #0
 80048e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f88c 	bl	8004a04 <UART_WaitOnFlagUntilTimeout>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d021      	beq.n	8004936 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048fa:	e853 3f00 	ldrex	r3, [r3]
 80048fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004902:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004906:	653b      	str	r3, [r7, #80]	@ 0x50
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	461a      	mov	r2, r3
 800490e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004910:	647b      	str	r3, [r7, #68]	@ 0x44
 8004912:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004914:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004916:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004918:	e841 2300 	strex	r3, r2, [r1]
 800491c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800491e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1e6      	bne.n	80048f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2220      	movs	r2, #32
 8004928:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e062      	b.n	80049fc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b04      	cmp	r3, #4
 8004942:	d149      	bne.n	80049d8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004944:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800494c:	2200      	movs	r2, #0
 800494e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f856 	bl	8004a04 <UART_WaitOnFlagUntilTimeout>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d03c      	beq.n	80049d8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004966:	e853 3f00 	ldrex	r3, [r3]
 800496a:	623b      	str	r3, [r7, #32]
   return(result);
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004972:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	461a      	mov	r2, r3
 800497a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800497c:	633b      	str	r3, [r7, #48]	@ 0x30
 800497e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004980:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004982:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004984:	e841 2300 	strex	r3, r2, [r1]
 8004988:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800498a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1e6      	bne.n	800495e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	3308      	adds	r3, #8
 8004996:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	e853 3f00 	ldrex	r3, [r3]
 800499e:	60fb      	str	r3, [r7, #12]
   return(result);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f023 0301 	bic.w	r3, r3, #1
 80049a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3308      	adds	r3, #8
 80049ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049b0:	61fa      	str	r2, [r7, #28]
 80049b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b4:	69b9      	ldr	r1, [r7, #24]
 80049b6:	69fa      	ldr	r2, [r7, #28]
 80049b8:	e841 2300 	strex	r3, r2, [r1]
 80049bc:	617b      	str	r3, [r7, #20]
   return(result);
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1e5      	bne.n	8004990 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e011      	b.n	80049fc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2220      	movs	r2, #32
 80049dc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2220      	movs	r2, #32
 80049e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3758      	adds	r7, #88	@ 0x58
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	603b      	str	r3, [r7, #0]
 8004a10:	4613      	mov	r3, r2
 8004a12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a14:	e049      	b.n	8004aaa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1c:	d045      	beq.n	8004aaa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a1e:	f7fc f94b 	bl	8000cb8 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d302      	bcc.n	8004a34 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e048      	b.n	8004aca <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0304 	and.w	r3, r3, #4
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d031      	beq.n	8004aaa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	69db      	ldr	r3, [r3, #28]
 8004a4c:	f003 0308 	and.w	r3, r3, #8
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d110      	bne.n	8004a76 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2208      	movs	r2, #8
 8004a5a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 f8ff 	bl	8004c60 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2208      	movs	r2, #8
 8004a66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e029      	b.n	8004aca <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a84:	d111      	bne.n	8004aaa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 f8e5 	bl	8004c60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e00f      	b.n	8004aca <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	69da      	ldr	r2, [r3, #28]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	bf0c      	ite	eq
 8004aba:	2301      	moveq	r3, #1
 8004abc:	2300      	movne	r3, #0
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	79fb      	ldrb	r3, [r7, #7]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d0a6      	beq.n	8004a16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
	...

08004ad4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b097      	sub	sp, #92	@ 0x5c
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	88fa      	ldrh	r2, [r7, #6]
 8004aec:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	88fa      	ldrh	r2, [r7, #6]
 8004af4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b06:	d10e      	bne.n	8004b26 <UART_Start_Receive_IT+0x52>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d105      	bne.n	8004b1c <UART_Start_Receive_IT+0x48>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004b16:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004b1a:	e02d      	b.n	8004b78 <UART_Start_Receive_IT+0xa4>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	22ff      	movs	r2, #255	@ 0xff
 8004b20:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004b24:	e028      	b.n	8004b78 <UART_Start_Receive_IT+0xa4>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10d      	bne.n	8004b4a <UART_Start_Receive_IT+0x76>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d104      	bne.n	8004b40 <UART_Start_Receive_IT+0x6c>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	22ff      	movs	r2, #255	@ 0xff
 8004b3a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004b3e:	e01b      	b.n	8004b78 <UART_Start_Receive_IT+0xa4>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	227f      	movs	r2, #127	@ 0x7f
 8004b44:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004b48:	e016      	b.n	8004b78 <UART_Start_Receive_IT+0xa4>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b52:	d10d      	bne.n	8004b70 <UART_Start_Receive_IT+0x9c>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d104      	bne.n	8004b66 <UART_Start_Receive_IT+0x92>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	227f      	movs	r2, #127	@ 0x7f
 8004b60:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004b64:	e008      	b.n	8004b78 <UART_Start_Receive_IT+0xa4>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	223f      	movs	r2, #63	@ 0x3f
 8004b6a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004b6e:	e003      	b.n	8004b78 <UART_Start_Receive_IT+0xa4>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2222      	movs	r2, #34	@ 0x22
 8004b84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	3308      	adds	r3, #8
 8004b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b92:	e853 3f00 	ldrex	r3, [r3]
 8004b96:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b9a:	f043 0301 	orr.w	r3, r3, #1
 8004b9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	3308      	adds	r3, #8
 8004ba6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004ba8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004baa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bac:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004bae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004bb0:	e841 2300 	strex	r3, r2, [r1]
 8004bb4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004bb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1e5      	bne.n	8004b88 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bc4:	d107      	bne.n	8004bd6 <UART_Start_Receive_IT+0x102>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d103      	bne.n	8004bd6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	4a21      	ldr	r2, [pc, #132]	@ (8004c58 <UART_Start_Receive_IT+0x184>)
 8004bd2:	669a      	str	r2, [r3, #104]	@ 0x68
 8004bd4:	e002      	b.n	8004bdc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	4a20      	ldr	r2, [pc, #128]	@ (8004c5c <UART_Start_Receive_IT+0x188>)
 8004bda:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d019      	beq.n	8004c18 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bec:	e853 3f00 	ldrex	r3, [r3]
 8004bf0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004bf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c02:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c04:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c06:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004c08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c0a:	e841 2300 	strex	r3, r2, [r1]
 8004c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1e6      	bne.n	8004be4 <UART_Start_Receive_IT+0x110>
 8004c16:	e018      	b.n	8004c4a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	e853 3f00 	ldrex	r3, [r3]
 8004c24:	613b      	str	r3, [r7, #16]
   return(result);
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	f043 0320 	orr.w	r3, r3, #32
 8004c2c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	461a      	mov	r2, r3
 8004c34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c36:	623b      	str	r3, [r7, #32]
 8004c38:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3a:	69f9      	ldr	r1, [r7, #28]
 8004c3c:	6a3a      	ldr	r2, [r7, #32]
 8004c3e:	e841 2300 	strex	r3, r2, [r1]
 8004c42:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1e6      	bne.n	8004c18 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	375c      	adds	r7, #92	@ 0x5c
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	08004f51 	.word	0x08004f51
 8004c5c:	08004da9 	.word	0x08004da9

08004c60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b095      	sub	sp, #84	@ 0x54
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c70:	e853 3f00 	ldrex	r3, [r3]
 8004c74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	461a      	mov	r2, r3
 8004c84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c86:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c88:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c8e:	e841 2300 	strex	r3, r2, [r1]
 8004c92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1e6      	bne.n	8004c68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	3308      	adds	r3, #8
 8004ca0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca2:	6a3b      	ldr	r3, [r7, #32]
 8004ca4:	e853 3f00 	ldrex	r3, [r3]
 8004ca8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	f023 0301 	bic.w	r3, r3, #1
 8004cb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3308      	adds	r3, #8
 8004cb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cc2:	e841 2300 	strex	r3, r2, [r1]
 8004cc6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1e5      	bne.n	8004c9a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d118      	bne.n	8004d08 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	e853 3f00 	ldrex	r3, [r3]
 8004ce2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f023 0310 	bic.w	r3, r3, #16
 8004cea:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cf4:	61bb      	str	r3, [r7, #24]
 8004cf6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf8:	6979      	ldr	r1, [r7, #20]
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	e841 2300 	strex	r3, r2, [r1]
 8004d00:	613b      	str	r3, [r7, #16]
   return(result);
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1e6      	bne.n	8004cd6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004d1c:	bf00      	nop
 8004d1e:	3754      	adds	r7, #84	@ 0x54
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f7ff fbc6 	bl	80044d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d4c:	bf00      	nop
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b088      	sub	sp, #32
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	e853 3f00 	ldrex	r3, [r3]
 8004d68:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d70:	61fb      	str	r3, [r7, #28]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	461a      	mov	r2, r3
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	61bb      	str	r3, [r7, #24]
 8004d7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7e:	6979      	ldr	r1, [r7, #20]
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	e841 2300 	strex	r3, r2, [r1]
 8004d86:	613b      	str	r3, [r7, #16]
   return(result);
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1e6      	bne.n	8004d5c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2220      	movs	r2, #32
 8004d92:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7ff fb92 	bl	80044c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004da0:	bf00      	nop
 8004da2:	3720      	adds	r7, #32
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b09c      	sub	sp, #112	@ 0x70
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004db6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dc0:	2b22      	cmp	r3, #34	@ 0x22
 8004dc2:	f040 80b9 	bne.w	8004f38 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004dcc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004dd0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004dd4:	b2d9      	uxtb	r1, r3
 8004dd6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de0:	400a      	ands	r2, r1
 8004de2:	b2d2      	uxtb	r2, r2
 8004de4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dea:	1c5a      	adds	r2, r3, #1
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f040 809c 	bne.w	8004f48 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e18:	e853 3f00 	ldrex	r3, [r3]
 8004e1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004e1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e30:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e36:	e841 2300 	strex	r3, r2, [r1]
 8004e3a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1e6      	bne.n	8004e10 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	3308      	adds	r3, #8
 8004e48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e4c:	e853 3f00 	ldrex	r3, [r3]
 8004e50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e54:	f023 0301 	bic.w	r3, r3, #1
 8004e58:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	3308      	adds	r3, #8
 8004e60:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004e62:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e64:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e6a:	e841 2300 	strex	r3, r2, [r1]
 8004e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1e5      	bne.n	8004e42 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2220      	movs	r2, #32
 8004e7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d018      	beq.n	8004eca <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea0:	e853 3f00 	ldrex	r3, [r3]
 8004ea4:	623b      	str	r3, [r7, #32]
   return(result);
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004eac:	663b      	str	r3, [r7, #96]	@ 0x60
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004eb6:	633b      	str	r3, [r7, #48]	@ 0x30
 8004eb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ebc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ebe:	e841 2300 	strex	r3, r2, [r1]
 8004ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1e6      	bne.n	8004e98 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d12e      	bne.n	8004f30 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	e853 3f00 	ldrex	r3, [r3]
 8004ee4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f023 0310 	bic.w	r3, r3, #16
 8004eec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ef6:	61fb      	str	r3, [r7, #28]
 8004ef8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efa:	69b9      	ldr	r1, [r7, #24]
 8004efc:	69fa      	ldr	r2, [r7, #28]
 8004efe:	e841 2300 	strex	r3, r2, [r1]
 8004f02:	617b      	str	r3, [r7, #20]
   return(result);
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1e6      	bne.n	8004ed8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	69db      	ldr	r3, [r3, #28]
 8004f10:	f003 0310 	and.w	r3, r3, #16
 8004f14:	2b10      	cmp	r3, #16
 8004f16:	d103      	bne.n	8004f20 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2210      	movs	r2, #16
 8004f1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004f26:	4619      	mov	r1, r3
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f7ff fadf 	bl	80044ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f2e:	e00b      	b.n	8004f48 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f7fb fbc9 	bl	80006c8 <HAL_UART_RxCpltCallback>
}
 8004f36:	e007      	b.n	8004f48 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	699a      	ldr	r2, [r3, #24]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0208 	orr.w	r2, r2, #8
 8004f46:	619a      	str	r2, [r3, #24]
}
 8004f48:	bf00      	nop
 8004f4a:	3770      	adds	r7, #112	@ 0x70
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b09c      	sub	sp, #112	@ 0x70
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004f5e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f68:	2b22      	cmp	r3, #34	@ 0x22
 8004f6a:	f040 80b9 	bne.w	80050e0 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004f74:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f7c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004f7e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004f82:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004f86:	4013      	ands	r3, r2
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f8c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f92:	1c9a      	adds	r2, r3, #2
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f040 809c 	bne.w	80050f0 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fc0:	e853 3f00 	ldrex	r3, [r3]
 8004fc4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004fc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fcc:	667b      	str	r3, [r7, #100]	@ 0x64
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fd6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004fd8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fda:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004fdc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004fde:	e841 2300 	strex	r3, r2, [r1]
 8004fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004fe4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1e6      	bne.n	8004fb8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	3308      	adds	r3, #8
 8004ff0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ff4:	e853 3f00 	ldrex	r3, [r3]
 8004ff8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffc:	f023 0301 	bic.w	r3, r3, #1
 8005000:	663b      	str	r3, [r7, #96]	@ 0x60
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	3308      	adds	r3, #8
 8005008:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800500a:	643a      	str	r2, [r7, #64]	@ 0x40
 800500c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005010:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005012:	e841 2300 	strex	r3, r2, [r1]
 8005016:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1e5      	bne.n	8004fea <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2220      	movs	r2, #32
 8005022:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d018      	beq.n	8005072 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005046:	6a3b      	ldr	r3, [r7, #32]
 8005048:	e853 3f00 	ldrex	r3, [r3]
 800504c:	61fb      	str	r3, [r7, #28]
   return(result);
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005054:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	461a      	mov	r2, r3
 800505c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800505e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005060:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005062:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005064:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005066:	e841 2300 	strex	r3, r2, [r1]
 800506a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800506c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1e6      	bne.n	8005040 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005076:	2b01      	cmp	r3, #1
 8005078:	d12e      	bne.n	80050d8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	e853 3f00 	ldrex	r3, [r3]
 800508c:	60bb      	str	r3, [r7, #8]
   return(result);
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	f023 0310 	bic.w	r3, r3, #16
 8005094:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	461a      	mov	r2, r3
 800509c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800509e:	61bb      	str	r3, [r7, #24]
 80050a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a2:	6979      	ldr	r1, [r7, #20]
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	e841 2300 	strex	r3, r2, [r1]
 80050aa:	613b      	str	r3, [r7, #16]
   return(result);
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1e6      	bne.n	8005080 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	f003 0310 	and.w	r3, r3, #16
 80050bc:	2b10      	cmp	r3, #16
 80050be:	d103      	bne.n	80050c8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2210      	movs	r2, #16
 80050c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80050ce:	4619      	mov	r1, r3
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7ff fa0b 	bl	80044ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80050d6:	e00b      	b.n	80050f0 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f7fb faf5 	bl	80006c8 <HAL_UART_RxCpltCallback>
}
 80050de:	e007      	b.n	80050f0 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	699a      	ldr	r2, [r3, #24]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f042 0208 	orr.w	r2, r2, #8
 80050ee:	619a      	str	r2, [r3, #24]
}
 80050f0:	bf00      	nop
 80050f2:	3770      	adds	r7, #112	@ 0x70
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <memset>:
 800510c:	4402      	add	r2, r0
 800510e:	4603      	mov	r3, r0
 8005110:	4293      	cmp	r3, r2
 8005112:	d100      	bne.n	8005116 <memset+0xa>
 8005114:	4770      	bx	lr
 8005116:	f803 1b01 	strb.w	r1, [r3], #1
 800511a:	e7f9      	b.n	8005110 <memset+0x4>

0800511c <__libc_init_array>:
 800511c:	b570      	push	{r4, r5, r6, lr}
 800511e:	4d0d      	ldr	r5, [pc, #52]	@ (8005154 <__libc_init_array+0x38>)
 8005120:	4c0d      	ldr	r4, [pc, #52]	@ (8005158 <__libc_init_array+0x3c>)
 8005122:	1b64      	subs	r4, r4, r5
 8005124:	10a4      	asrs	r4, r4, #2
 8005126:	2600      	movs	r6, #0
 8005128:	42a6      	cmp	r6, r4
 800512a:	d109      	bne.n	8005140 <__libc_init_array+0x24>
 800512c:	4d0b      	ldr	r5, [pc, #44]	@ (800515c <__libc_init_array+0x40>)
 800512e:	4c0c      	ldr	r4, [pc, #48]	@ (8005160 <__libc_init_array+0x44>)
 8005130:	f000 f818 	bl	8005164 <_init>
 8005134:	1b64      	subs	r4, r4, r5
 8005136:	10a4      	asrs	r4, r4, #2
 8005138:	2600      	movs	r6, #0
 800513a:	42a6      	cmp	r6, r4
 800513c:	d105      	bne.n	800514a <__libc_init_array+0x2e>
 800513e:	bd70      	pop	{r4, r5, r6, pc}
 8005140:	f855 3b04 	ldr.w	r3, [r5], #4
 8005144:	4798      	blx	r3
 8005146:	3601      	adds	r6, #1
 8005148:	e7ee      	b.n	8005128 <__libc_init_array+0xc>
 800514a:	f855 3b04 	ldr.w	r3, [r5], #4
 800514e:	4798      	blx	r3
 8005150:	3601      	adds	r6, #1
 8005152:	e7f2      	b.n	800513a <__libc_init_array+0x1e>
 8005154:	080051b4 	.word	0x080051b4
 8005158:	080051b4 	.word	0x080051b4
 800515c:	080051b4 	.word	0x080051b4
 8005160:	080051b8 	.word	0x080051b8

08005164 <_init>:
 8005164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005166:	bf00      	nop
 8005168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800516a:	bc08      	pop	{r3}
 800516c:	469e      	mov	lr, r3
 800516e:	4770      	bx	lr

08005170 <_fini>:
 8005170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005172:	bf00      	nop
 8005174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005176:	bc08      	pop	{r3}
 8005178:	469e      	mov	lr, r3
 800517a:	4770      	bx	lr
