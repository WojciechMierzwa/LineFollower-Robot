
Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052dc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005464  08005464  00006464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800549c  0800549c  00007010  2**0
                  CONTENTS
  4 .ARM          00000000  0800549c  0800549c  00007010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800549c  0800549c  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800549c  0800549c  0000649c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054a0  080054a0  000064a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080054a4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000010  080054b4  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  080054b4  00007228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1a0  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c2  00000000  00000000  000161e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  000182a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a6a  00000000  00000000  00018fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bc53  00000000  00000000  00019a52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010af1  00000000  00000000  000356a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5fd4  00000000  00000000  00046196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ec16a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037a4  00000000  00000000  000ec1b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000ef954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800544c 	.word	0x0800544c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	0800544c 	.word	0x0800544c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 febc 	bl	8000f48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f880 	bl	80002d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 fad4 	bl	8000780 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 faa2 	bl	8000720 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80001dc:	f000 fa70 	bl	80006c0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80001e0:	f000 f8d8 	bl	8000394 <MX_TIM1_Init>
  MX_TIM16_Init();
 80001e4:	f000 f9f2 	bl	80005cc <MX_TIM16_Init>
  MX_TIM2_Init();
 80001e8:	f000 f98c 	bl	8000504 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,&receivedChar,1); // uruchomienie obs≈Çugi uart dla bluetooth hc-06
 80001ec:	2201      	movs	r2, #1
 80001ee:	492f      	ldr	r1, [pc, #188]	@ (80002ac <main+0xe4>)
 80001f0:	482f      	ldr	r0, [pc, #188]	@ (80002b0 <main+0xe8>)
 80001f2:	f003 ffb0 	bl	8004156 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start(&htim1);
 80001f6:	482f      	ldr	r0, [pc, #188]	@ (80002b4 <main+0xec>)
 80001f8:	f002 fe7c 	bl	8002ef4 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 80001fc:	2200      	movs	r2, #0
 80001fe:	2102      	movs	r1, #2
 8000200:	482d      	ldr	r0, [pc, #180]	@ (80002b8 <main+0xf0>)
 8000202:	f001 fa01 	bl	8001608 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000206:	2100      	movs	r1, #0
 8000208:	482c      	ldr	r0, [pc, #176]	@ (80002bc <main+0xf4>)
 800020a:	f002 ff17 	bl	800303c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800020e:	2100      	movs	r1, #0
 8000210:	4828      	ldr	r0, [pc, #160]	@ (80002b4 <main+0xec>)
 8000212:	f002 ff13 	bl	800303c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000216:	210c      	movs	r1, #12
 8000218:	4826      	ldr	r0, [pc, #152]	@ (80002b4 <main+0xec>)
 800021a:	f002 ff0f 	bl	800303c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800021e:	2100      	movs	r1, #0
 8000220:	4827      	ldr	r0, [pc, #156]	@ (80002c0 <main+0xf8>)
 8000222:	f002 ff0b 	bl	800303c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000226:	2108      	movs	r1, #8
 8000228:	4825      	ldr	r0, [pc, #148]	@ (80002c0 <main+0xf8>)
 800022a:	f002 ff07 	bl	800303c <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive(&huart2, &receivedChar,1 ,HAL_MAX_DELAY);
 800022e:	f04f 33ff 	mov.w	r3, #4294967295
 8000232:	2201      	movs	r2, #1
 8000234:	491d      	ldr	r1, [pc, #116]	@ (80002ac <main+0xe4>)
 8000236:	4823      	ldr	r0, [pc, #140]	@ (80002c4 <main+0xfc>)
 8000238:	f003 fec4 	bl	8003fc4 <HAL_UART_Receive>
		  			  receivedChar='s';
		  		  }
*/


		  	  	  if(receivedChar == 's')
 800023c:	4b1b      	ldr	r3, [pc, #108]	@ (80002ac <main+0xe4>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b73      	cmp	r3, #115	@ 0x73
 8000242:	d105      	bne.n	8000250 <main+0x88>
		  	  	  	  	  	      {
		  	  	  	  	  	    		  motor_backward(cycle);
 8000244:	4b20      	ldr	r3, [pc, #128]	@ (80002c8 <main+0x100>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4618      	mov	r0, r3
 800024a:	f000 fbfd 	bl	8000a48 <motor_backward>
 800024e:	e7ee      	b.n	800022e <main+0x66>


		  	  	  	  	  	      }
		  	  	  	  	  	      else if (receivedChar == 'w')
 8000250:	4b16      	ldr	r3, [pc, #88]	@ (80002ac <main+0xe4>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	2b77      	cmp	r3, #119	@ 0x77
 8000256:	d10e      	bne.n	8000276 <main+0xae>
		  	  	  	  	  	      {

		  	  	  	  	  	        motor_forward(cycle);
 8000258:	4b1b      	ldr	r3, [pc, #108]	@ (80002c8 <main+0x100>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4618      	mov	r0, r3
 800025e:	f000 fb77 	bl	8000950 <motor_forward>
		  	  	  	  	  	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000262:	2201      	movs	r2, #1
 8000264:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000268:	4818      	ldr	r0, [pc, #96]	@ (80002cc <main+0x104>)
 800026a:	f001 f9cd 	bl	8001608 <HAL_GPIO_WritePin>
		  	  	  	  	  	        buttonPressed = 1;
 800026e:	4b18      	ldr	r3, [pc, #96]	@ (80002d0 <main+0x108>)
 8000270:	2201      	movs	r2, #1
 8000272:	701a      	strb	r2, [r3, #0]
 8000274:	e7db      	b.n	800022e <main+0x66>
		  	  	  	  	  	      }
		  	  	  	  	  	      else if(receivedChar == 'a'){
 8000276:	4b0d      	ldr	r3, [pc, #52]	@ (80002ac <main+0xe4>)
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	2b61      	cmp	r3, #97	@ 0x61
 800027c:	d105      	bne.n	800028a <main+0xc2>
		  	  	  	  	  	    	  motor_left(cycle);
 800027e:	4b12      	ldr	r3, [pc, #72]	@ (80002c8 <main+0x100>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4618      	mov	r0, r3
 8000284:	f000 fb8c 	bl	80009a0 <motor_left>
 8000288:	e7d1      	b.n	800022e <main+0x66>
		  	  	  	  	  	      }
		  	  	  	  	  	      else if(receivedChar == 'd'){
 800028a:	4b08      	ldr	r3, [pc, #32]	@ (80002ac <main+0xe4>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2b64      	cmp	r3, #100	@ 0x64
 8000290:	d105      	bne.n	800029e <main+0xd6>
		  	  	  	  	  	    		  motor_right(cycle);
 8000292:	4b0d      	ldr	r3, [pc, #52]	@ (80002c8 <main+0x100>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4618      	mov	r0, r3
 8000298:	f000 fbac 	bl	80009f4 <motor_right>
 800029c:	e7c7      	b.n	800022e <main+0x66>
		  	  	  	  	  	      }
		  	  	  	  	  	      else if(receivedChar == 'q'){
 800029e:	4b03      	ldr	r3, [pc, #12]	@ (80002ac <main+0xe4>)
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	2b71      	cmp	r3, #113	@ 0x71
 80002a4:	d1c3      	bne.n	800022e <main+0x66>
		  	  	  	  	  	    	  motor_stop();
 80002a6:	f000 fbf7 	bl	8000a98 <motor_stop>
	  HAL_UART_Receive(&huart2, &receivedChar,1 ,HAL_MAX_DELAY);
 80002aa:	e7c0      	b.n	800022e <main+0x66>
 80002ac:	20000221 	.word	0x20000221
 80002b0:	20000110 	.word	0x20000110
 80002b4:	2000002c 	.word	0x2000002c
 80002b8:	48000800 	.word	0x48000800
 80002bc:	200000c4 	.word	0x200000c4
 80002c0:	20000078 	.word	0x20000078
 80002c4:	20000198 	.word	0x20000198
 80002c8:	20000000 	.word	0x20000000
 80002cc:	48000400 	.word	0x48000400
 80002d0:	20000220 	.word	0x20000220

080002d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b09c      	sub	sp, #112	@ 0x70
 80002d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002da:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80002de:	2228      	movs	r2, #40	@ 0x28
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f005 f886 	bl	80053f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80002ec:	2200      	movs	r2, #0
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	605a      	str	r2, [r3, #4]
 80002f2:	609a      	str	r2, [r3, #8]
 80002f4:	60da      	str	r2, [r3, #12]
 80002f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f8:	463b      	mov	r3, r7
 80002fa:	2234      	movs	r2, #52	@ 0x34
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f005 f878 	bl	80053f4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000304:	2301      	movs	r3, #1
 8000306:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000308:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800030c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000312:	2301      	movs	r3, #1
 8000314:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000316:	2302      	movs	r3, #2
 8000318:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800031a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800031e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000320:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000324:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000326:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800032a:	4618      	mov	r0, r3
 800032c:	f001 f984 	bl	8001638 <HAL_RCC_OscConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000336:	f000 fbcb 	bl	8000ad0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033a:	230f      	movs	r3, #15
 800033c:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800033e:	2302      	movs	r3, #2
 8000340:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000346:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800034a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034c:	2300      	movs	r3, #0
 800034e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000350:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000354:	2102      	movs	r1, #2
 8000356:	4618      	mov	r0, r3
 8000358:	f002 f9ac 	bl	80026b4 <HAL_RCC_ClockConfig>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000362:	f000 fbb5 	bl	8000ad0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 8000366:	4b0a      	ldr	r3, [pc, #40]	@ (8000390 <SystemClock_Config+0xbc>)
 8000368:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM16;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800036a:	2300      	movs	r3, #0
 800036c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800036e:	2300      	movs	r3, #0
 8000370:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8000372:	2300      	movs	r3, #0
 8000374:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000376:	463b      	mov	r3, r7
 8000378:	4618      	mov	r0, r3
 800037a:	f002 fbd1 	bl	8002b20 <HAL_RCCEx_PeriphCLKConfig>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000384:	f000 fba4 	bl	8000ad0 <Error_Handler>
  }
}
 8000388:	bf00      	nop
 800038a:	3770      	adds	r7, #112	@ 0x70
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	00081001 	.word	0x00081001

08000394 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b09a      	sub	sp, #104	@ 0x68
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800039a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003a8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	605a      	str	r2, [r3, #4]
 80003b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003b4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	605a      	str	r2, [r3, #4]
 80003be:	609a      	str	r2, [r3, #8]
 80003c0:	60da      	str	r2, [r3, #12]
 80003c2:	611a      	str	r2, [r3, #16]
 80003c4:	615a      	str	r2, [r3, #20]
 80003c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	222c      	movs	r2, #44	@ 0x2c
 80003cc:	2100      	movs	r1, #0
 80003ce:	4618      	mov	r0, r3
 80003d0:	f005 f810 	bl	80053f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003d4:	4b49      	ldr	r3, [pc, #292]	@ (80004fc <MX_TIM1_Init+0x168>)
 80003d6:	4a4a      	ldr	r2, [pc, #296]	@ (8000500 <MX_TIM1_Init+0x16c>)
 80003d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80003da:	4b48      	ldr	r3, [pc, #288]	@ (80004fc <MX_TIM1_Init+0x168>)
 80003dc:	2247      	movs	r2, #71	@ 0x47
 80003de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e0:	4b46      	ldr	r3, [pc, #280]	@ (80004fc <MX_TIM1_Init+0x168>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80003e6:	4b45      	ldr	r3, [pc, #276]	@ (80004fc <MX_TIM1_Init+0x168>)
 80003e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80003ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ee:	4b43      	ldr	r3, [pc, #268]	@ (80004fc <MX_TIM1_Init+0x168>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003f4:	4b41      	ldr	r3, [pc, #260]	@ (80004fc <MX_TIM1_Init+0x168>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003fa:	4b40      	ldr	r3, [pc, #256]	@ (80004fc <MX_TIM1_Init+0x168>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000400:	483e      	ldr	r0, [pc, #248]	@ (80004fc <MX_TIM1_Init+0x168>)
 8000402:	f002 fd1f 	bl	8002e44 <HAL_TIM_Base_Init>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800040c:	f000 fb60 	bl	8000ad0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000410:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000414:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000416:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800041a:	4619      	mov	r1, r3
 800041c:	4837      	ldr	r0, [pc, #220]	@ (80004fc <MX_TIM1_Init+0x168>)
 800041e:	f003 f807 	bl	8003430 <HAL_TIM_ConfigClockSource>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000428:	f000 fb52 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800042c:	4833      	ldr	r0, [pc, #204]	@ (80004fc <MX_TIM1_Init+0x168>)
 800042e:	f002 fdad 	bl	8002f8c <HAL_TIM_PWM_Init>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000438:	f000 fb4a 	bl	8000ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800043c:	2300      	movs	r3, #0
 800043e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000440:	2300      	movs	r3, #0
 8000442:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000444:	2300      	movs	r3, #0
 8000446:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000448:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800044c:	4619      	mov	r1, r3
 800044e:	482b      	ldr	r0, [pc, #172]	@ (80004fc <MX_TIM1_Init+0x168>)
 8000450:	f003 fc8c 	bl	8003d6c <HAL_TIMEx_MasterConfigSynchronization>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800045a:	f000 fb39 	bl	8000ad0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800045e:	2360      	movs	r3, #96	@ 0x60
 8000460:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000462:	2300      	movs	r3, #0
 8000464:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000466:	2300      	movs	r3, #0
 8000468:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800046a:	2300      	movs	r3, #0
 800046c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800046e:	2300      	movs	r3, #0
 8000470:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000472:	2300      	movs	r3, #0
 8000474:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000476:	2300      	movs	r3, #0
 8000478:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800047a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800047e:	2200      	movs	r2, #0
 8000480:	4619      	mov	r1, r3
 8000482:	481e      	ldr	r0, [pc, #120]	@ (80004fc <MX_TIM1_Init+0x168>)
 8000484:	f002 fec0 	bl	8003208 <HAL_TIM_PWM_ConfigChannel>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800048e:	f000 fb1f 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000492:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000496:	220c      	movs	r2, #12
 8000498:	4619      	mov	r1, r3
 800049a:	4818      	ldr	r0, [pc, #96]	@ (80004fc <MX_TIM1_Init+0x168>)
 800049c:	f002 feb4 	bl	8003208 <HAL_TIM_PWM_ConfigChannel>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80004a6:	f000 fb13 	bl	8000ad0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004aa:	2300      	movs	r3, #0
 80004ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004ae:	2300      	movs	r3, #0
 80004b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004b2:	2300      	movs	r3, #0
 80004b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004b6:	2300      	movs	r3, #0
 80004b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004ba:	2300      	movs	r3, #0
 80004bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80004c4:	2300      	movs	r3, #0
 80004c6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80004c8:	2300      	movs	r3, #0
 80004ca:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80004cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80004d0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004d6:	2300      	movs	r3, #0
 80004d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	4619      	mov	r1, r3
 80004de:	4807      	ldr	r0, [pc, #28]	@ (80004fc <MX_TIM1_Init+0x168>)
 80004e0:	f003 fcaa 	bl	8003e38 <HAL_TIMEx_ConfigBreakDeadTime>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80004ea:	f000 faf1 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004ee:	4803      	ldr	r0, [pc, #12]	@ (80004fc <MX_TIM1_Init+0x168>)
 80004f0:	f000 fb6a 	bl	8000bc8 <HAL_TIM_MspPostInit>

}
 80004f4:	bf00      	nop
 80004f6:	3768      	adds	r7, #104	@ 0x68
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	2000002c 	.word	0x2000002c
 8000500:	40012c00 	.word	0x40012c00

08000504 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08a      	sub	sp, #40	@ 0x28
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800050a:	f107 031c 	add.w	r3, r7, #28
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000516:	463b      	mov	r3, r7
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]
 8000524:	615a      	str	r2, [r3, #20]
 8000526:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000528:	4b27      	ldr	r3, [pc, #156]	@ (80005c8 <MX_TIM2_Init+0xc4>)
 800052a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800052e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000530:	4b25      	ldr	r3, [pc, #148]	@ (80005c8 <MX_TIM2_Init+0xc4>)
 8000532:	2247      	movs	r2, #71	@ 0x47
 8000534:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000536:	4b24      	ldr	r3, [pc, #144]	@ (80005c8 <MX_TIM2_Init+0xc4>)
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800053c:	4b22      	ldr	r3, [pc, #136]	@ (80005c8 <MX_TIM2_Init+0xc4>)
 800053e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000542:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000544:	4b20      	ldr	r3, [pc, #128]	@ (80005c8 <MX_TIM2_Init+0xc4>)
 8000546:	2200      	movs	r2, #0
 8000548:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800054a:	4b1f      	ldr	r3, [pc, #124]	@ (80005c8 <MX_TIM2_Init+0xc4>)
 800054c:	2200      	movs	r2, #0
 800054e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000550:	481d      	ldr	r0, [pc, #116]	@ (80005c8 <MX_TIM2_Init+0xc4>)
 8000552:	f002 fd1b 	bl	8002f8c <HAL_TIM_PWM_Init>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800055c:	f000 fab8 	bl	8000ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000560:	2300      	movs	r3, #0
 8000562:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000564:	2300      	movs	r3, #0
 8000566:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000568:	f107 031c 	add.w	r3, r7, #28
 800056c:	4619      	mov	r1, r3
 800056e:	4816      	ldr	r0, [pc, #88]	@ (80005c8 <MX_TIM2_Init+0xc4>)
 8000570:	f003 fbfc 	bl	8003d6c <HAL_TIMEx_MasterConfigSynchronization>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800057a:	f000 faa9 	bl	8000ad0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800057e:	2360      	movs	r3, #96	@ 0x60
 8000580:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800058e:	463b      	mov	r3, r7
 8000590:	2200      	movs	r2, #0
 8000592:	4619      	mov	r1, r3
 8000594:	480c      	ldr	r0, [pc, #48]	@ (80005c8 <MX_TIM2_Init+0xc4>)
 8000596:	f002 fe37 	bl	8003208 <HAL_TIM_PWM_ConfigChannel>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80005a0:	f000 fa96 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005a4:	463b      	mov	r3, r7
 80005a6:	2208      	movs	r2, #8
 80005a8:	4619      	mov	r1, r3
 80005aa:	4807      	ldr	r0, [pc, #28]	@ (80005c8 <MX_TIM2_Init+0xc4>)
 80005ac:	f002 fe2c 	bl	8003208 <HAL_TIM_PWM_ConfigChannel>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80005b6:	f000 fa8b 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80005ba:	4803      	ldr	r0, [pc, #12]	@ (80005c8 <MX_TIM2_Init+0xc4>)
 80005bc:	f000 fb04 	bl	8000bc8 <HAL_TIM_MspPostInit>

}
 80005c0:	bf00      	nop
 80005c2:	3728      	adds	r7, #40	@ 0x28
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000078 	.word	0x20000078

080005cc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b092      	sub	sp, #72	@ 0x48
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80005d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]
 80005e0:	611a      	str	r2, [r3, #16]
 80005e2:	615a      	str	r2, [r3, #20]
 80005e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005e6:	463b      	mov	r3, r7
 80005e8:	222c      	movs	r2, #44	@ 0x2c
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f004 ff01 	bl	80053f4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80005f2:	4b31      	ldr	r3, [pc, #196]	@ (80006b8 <MX_TIM16_Init+0xec>)
 80005f4:	4a31      	ldr	r2, [pc, #196]	@ (80006bc <MX_TIM16_Init+0xf0>)
 80005f6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 71;
 80005f8:	4b2f      	ldr	r3, [pc, #188]	@ (80006b8 <MX_TIM16_Init+0xec>)
 80005fa:	2247      	movs	r2, #71	@ 0x47
 80005fc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005fe:	4b2e      	ldr	r3, [pc, #184]	@ (80006b8 <MX_TIM16_Init+0xec>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 19999;
 8000604:	4b2c      	ldr	r3, [pc, #176]	@ (80006b8 <MX_TIM16_Init+0xec>)
 8000606:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800060a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800060c:	4b2a      	ldr	r3, [pc, #168]	@ (80006b8 <MX_TIM16_Init+0xec>)
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000612:	4b29      	ldr	r3, [pc, #164]	@ (80006b8 <MX_TIM16_Init+0xec>)
 8000614:	2200      	movs	r2, #0
 8000616:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000618:	4b27      	ldr	r3, [pc, #156]	@ (80006b8 <MX_TIM16_Init+0xec>)
 800061a:	2280      	movs	r2, #128	@ 0x80
 800061c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800061e:	4826      	ldr	r0, [pc, #152]	@ (80006b8 <MX_TIM16_Init+0xec>)
 8000620:	f002 fc10 	bl	8002e44 <HAL_TIM_Base_Init>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800062a:	f000 fa51 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800062e:	4822      	ldr	r0, [pc, #136]	@ (80006b8 <MX_TIM16_Init+0xec>)
 8000630:	f002 fcac 	bl	8002f8c <HAL_TIM_PWM_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800063a:	f000 fa49 	bl	8000ad0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800063e:	2360      	movs	r3, #96	@ 0x60
 8000640:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000646:	2300      	movs	r3, #0
 8000648:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800064a:	2300      	movs	r3, #0
 800064c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800064e:	2300      	movs	r3, #0
 8000650:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000652:	2300      	movs	r3, #0
 8000654:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000656:	2300      	movs	r3, #0
 8000658:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800065a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800065e:	2200      	movs	r2, #0
 8000660:	4619      	mov	r1, r3
 8000662:	4815      	ldr	r0, [pc, #84]	@ (80006b8 <MX_TIM16_Init+0xec>)
 8000664:	f002 fdd0 	bl	8003208 <HAL_TIM_PWM_ConfigChannel>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800066e:	f000 fa2f 	bl	8000ad0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000672:	2300      	movs	r3, #0
 8000674:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000686:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800068a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000690:	2300      	movs	r3, #0
 8000692:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000694:	463b      	mov	r3, r7
 8000696:	4619      	mov	r1, r3
 8000698:	4807      	ldr	r0, [pc, #28]	@ (80006b8 <MX_TIM16_Init+0xec>)
 800069a:	f003 fbcd 	bl	8003e38 <HAL_TIMEx_ConfigBreakDeadTime>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80006a4:	f000 fa14 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80006a8:	4803      	ldr	r0, [pc, #12]	@ (80006b8 <MX_TIM16_Init+0xec>)
 80006aa:	f000 fa8d 	bl	8000bc8 <HAL_TIM_MspPostInit>

}
 80006ae:	bf00      	nop
 80006b0:	3748      	adds	r7, #72	@ 0x48
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	200000c4 	.word	0x200000c4
 80006bc:	40014400 	.word	0x40014400

080006c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006c4:	4b14      	ldr	r3, [pc, #80]	@ (8000718 <MX_USART1_UART_Init+0x58>)
 80006c6:	4a15      	ldr	r2, [pc, #84]	@ (800071c <MX_USART1_UART_Init+0x5c>)
 80006c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006ca:	4b13      	ldr	r3, [pc, #76]	@ (8000718 <MX_USART1_UART_Init+0x58>)
 80006cc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80006d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006d2:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <MX_USART1_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <MX_USART1_UART_Init+0x58>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <MX_USART1_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <MX_USART1_UART_Init+0x58>)
 80006e6:	220c      	movs	r2, #12
 80006e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <MX_USART1_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f0:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <MX_USART1_UART_Init+0x58>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f6:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <MX_USART1_UART_Init+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006fc:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <MX_USART1_UART_Init+0x58>)
 80006fe:	2200      	movs	r2, #0
 8000700:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	@ (8000718 <MX_USART1_UART_Init+0x58>)
 8000704:	f003 fc10 	bl	8003f28 <HAL_UART_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800070e:	f000 f9df 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000110 	.word	0x20000110
 800071c:	40013800 	.word	0x40013800

08000720 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000724:	4b14      	ldr	r3, [pc, #80]	@ (8000778 <MX_USART2_UART_Init+0x58>)
 8000726:	4a15      	ldr	r2, [pc, #84]	@ (800077c <MX_USART2_UART_Init+0x5c>)
 8000728:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800072a:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <MX_USART2_UART_Init+0x58>)
 800072c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000730:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_USART2_UART_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <MX_USART2_UART_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_USART2_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_USART2_UART_Init+0x58>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <MX_USART2_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_USART2_UART_Init+0x58>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000756:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <MX_USART2_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_USART2_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	@ (8000778 <MX_USART2_UART_Init+0x58>)
 8000764:	f003 fbe0 	bl	8003f28 <HAL_UART_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800076e:	f000 f9af 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000198 	.word	0x20000198
 800077c:	40004400 	.word	0x40004400

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	@ 0x28
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	4b53      	ldr	r3, [pc, #332]	@ (80008e4 <MX_GPIO_Init+0x164>)
 8000798:	695b      	ldr	r3, [r3, #20]
 800079a:	4a52      	ldr	r2, [pc, #328]	@ (80008e4 <MX_GPIO_Init+0x164>)
 800079c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80007a0:	6153      	str	r3, [r2, #20]
 80007a2:	4b50      	ldr	r3, [pc, #320]	@ (80008e4 <MX_GPIO_Init+0x164>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ae:	4b4d      	ldr	r3, [pc, #308]	@ (80008e4 <MX_GPIO_Init+0x164>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	4a4c      	ldr	r2, [pc, #304]	@ (80008e4 <MX_GPIO_Init+0x164>)
 80007b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007b8:	6153      	str	r3, [r2, #20]
 80007ba:	4b4a      	ldr	r3, [pc, #296]	@ (80008e4 <MX_GPIO_Init+0x164>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	4b47      	ldr	r3, [pc, #284]	@ (80008e4 <MX_GPIO_Init+0x164>)
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	4a46      	ldr	r2, [pc, #280]	@ (80008e4 <MX_GPIO_Init+0x164>)
 80007cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007d0:	6153      	str	r3, [r2, #20]
 80007d2:	4b44      	ldr	r3, [pc, #272]	@ (80008e4 <MX_GPIO_Init+0x164>)
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	4b41      	ldr	r3, [pc, #260]	@ (80008e4 <MX_GPIO_Init+0x164>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	4a40      	ldr	r2, [pc, #256]	@ (80008e4 <MX_GPIO_Init+0x164>)
 80007e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007e8:	6153      	str	r3, [r2, #20]
 80007ea:	4b3e      	ldr	r3, [pc, #248]	@ (80008e4 <MX_GPIO_Init+0x164>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2102      	movs	r1, #2
 80007fa:	483b      	ldr	r0, [pc, #236]	@ (80008e8 <MX_GPIO_Init+0x168>)
 80007fc:	f000 ff04 	bl	8001608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000800:	2200      	movs	r2, #0
 8000802:	2101      	movs	r1, #1
 8000804:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000808:	f000 fefe 	bl	8001608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000812:	4836      	ldr	r0, [pc, #216]	@ (80008ec <MX_GPIO_Init+0x16c>)
 8000814:	f000 fef8 	bl	8001608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000818:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800081e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4619      	mov	r1, r3
 800082e:	482e      	ldr	r0, [pc, #184]	@ (80008e8 <MX_GPIO_Init+0x168>)
 8000830:	f000 fd78 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pins : ECHO_Pin DETECT5_Pin DETECT1_Pin DETECT2_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin|DETECT5_Pin|DETECT1_Pin|DETECT2_Pin;
 8000834:	f241 4305 	movw	r3, #5125	@ 0x1405
 8000838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083a:	2300      	movs	r3, #0
 800083c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4619      	mov	r1, r3
 8000848:	4827      	ldr	r0, [pc, #156]	@ (80008e8 <MX_GPIO_Init+0x168>)
 800084a:	f000 fd6b 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIGGER_Pin */
  GPIO_InitStruct.Pin = TRIGGER_Pin;
 800084e:	2302      	movs	r3, #2
 8000850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIGGER_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	4619      	mov	r1, r3
 8000864:	4820      	ldr	r0, [pc, #128]	@ (80008e8 <MX_GPIO_Init+0x168>)
 8000866:	f000 fd5d 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800086a:	2301      	movs	r3, #1
 800086c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000884:	f000 fd4e 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000888:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	4812      	ldr	r0, [pc, #72]	@ (80008ec <MX_GPIO_Init+0x16c>)
 80008a2:	f000 fd3f 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pin : DETECT3_Pin */
  GPIO_InitStruct.Pin = DETECT3_Pin;
 80008a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DETECT3_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008be:	f000 fd31 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pin : DETECT4_Pin */
  GPIO_InitStruct.Pin = DETECT4_Pin;
 80008c2:	2380      	movs	r3, #128	@ 0x80
 80008c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DETECT4_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	4619      	mov	r1, r3
 80008d4:	4805      	ldr	r0, [pc, #20]	@ (80008ec <MX_GPIO_Init+0x16c>)
 80008d6:	f000 fd25 	bl	8001324 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008da:	bf00      	nop
 80008dc:	3728      	adds	r7, #40	@ 0x28
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40021000 	.word	0x40021000
 80008e8:	48000800 	.word	0x48000800
 80008ec:	48000400 	.word	0x48000400

080008f0 <HAL_UART_RxCpltCallback>:
	}
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // funkcja do obs≈Çugi bt po uart na podstawie przerwania
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a10      	ldr	r2, [pc, #64]	@ (8000940 <HAL_UART_RxCpltCallback+0x50>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d119      	bne.n	8000936 <HAL_UART_RxCpltCallback+0x46>
  {
    if(receivedChar=='N')
 8000902:	4b10      	ldr	r3, [pc, #64]	@ (8000944 <HAL_UART_RxCpltCallback+0x54>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b4e      	cmp	r3, #78	@ 0x4e
 8000908:	d106      	bne.n	8000918 <HAL_UART_RxCpltCallback+0x28>
    {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000910:	480d      	ldr	r0, [pc, #52]	@ (8000948 <HAL_UART_RxCpltCallback+0x58>)
 8000912:	f000 fe79 	bl	8001608 <HAL_GPIO_WritePin>
 8000916:	e009      	b.n	800092c <HAL_UART_RxCpltCallback+0x3c>
    }
    else if (receivedChar=='Y')
 8000918:	4b0a      	ldr	r3, [pc, #40]	@ (8000944 <HAL_UART_RxCpltCallback+0x54>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b59      	cmp	r3, #89	@ 0x59
 800091e:	d105      	bne.n	800092c <HAL_UART_RxCpltCallback+0x3c>
    {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000920:	2201      	movs	r2, #1
 8000922:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000926:	4808      	ldr	r0, [pc, #32]	@ (8000948 <HAL_UART_RxCpltCallback+0x58>)
 8000928:	f000 fe6e 	bl	8001608 <HAL_GPIO_WritePin>
    }
    HAL_UART_Receive_IT(&huart1,&receivedChar,1);
 800092c:	2201      	movs	r2, #1
 800092e:	4905      	ldr	r1, [pc, #20]	@ (8000944 <HAL_UART_RxCpltCallback+0x54>)
 8000930:	4806      	ldr	r0, [pc, #24]	@ (800094c <HAL_UART_RxCpltCallback+0x5c>)
 8000932:	f003 fc10 	bl	8004156 <HAL_UART_Receive_IT>
    		  	  	    	  motor_stop();
    		  	  	      }
    }
    HAL_UART_Receive_IT(&huart2,&receivedChar,1);
*/
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40013800 	.word	0x40013800
 8000944:	20000221 	.word	0x20000221
 8000948:	48000400 	.word	0x48000400
 800094c:	20000110 	.word	0x20000110

08000950 <motor_forward>:
    (detect_states[0] != 0 && detect_states[1] != 0) ? turnover(&axle, 'a') :
    (detect_states[2] != 0 && detect_states[3] != 0 && detect_states[4] != 0) ? turnover(&axle, 'd') : 0;
}

void motor_forward(uint32_t duty_cycle)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle);
 8000958:	4b0e      	ldr	r3, [pc, #56]	@ (8000994 <motor_forward+0x44>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8000960:	4b0c      	ldr	r3, [pc, #48]	@ (8000994 <motor_forward+0x44>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2200      	movs	r2, #0
 8000966:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle*3/4);
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	4613      	mov	r3, r2
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	441a      	add	r2, r3
 8000970:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <motor_forward+0x48>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	0892      	lsrs	r2, r2, #2
 8000976:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000978:	4b07      	ldr	r3, [pc, #28]	@ (8000998 <motor_forward+0x48>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2200      	movs	r2, #0
 800097e:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000980:	2201      	movs	r2, #1
 8000982:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000986:	4805      	ldr	r0, [pc, #20]	@ (800099c <motor_forward+0x4c>)
 8000988:	f000 fe3e 	bl	8001608 <HAL_GPIO_WritePin>
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	2000002c 	.word	0x2000002c
 8000998:	20000078 	.word	0x20000078
 800099c:	48000400 	.word	0x48000400

080009a0 <motor_left>:
void motor_left(uint32_t duty_cycle)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80009a8:	4b0e      	ldr	r3, [pc, #56]	@ (80009e4 <motor_left+0x44>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2200      	movs	r2, #0
 80009ae:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, duty_cycle/5);
 80009b0:	4b0c      	ldr	r3, [pc, #48]	@ (80009e4 <motor_left+0x44>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	490c      	ldr	r1, [pc, #48]	@ (80009e8 <motor_left+0x48>)
 80009b8:	fba1 1202 	umull	r1, r2, r1, r2
 80009bc:	0892      	lsrs	r2, r2, #2
 80009be:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle);
 80009c0:	4b0a      	ldr	r3, [pc, #40]	@ (80009ec <motor_left+0x4c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80009c8:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <motor_left+0x4c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2200      	movs	r2, #0
 80009ce:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 80009d0:	2201      	movs	r2, #1
 80009d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009d6:	4806      	ldr	r0, [pc, #24]	@ (80009f0 <motor_left+0x50>)
 80009d8:	f000 fe16 	bl	8001608 <HAL_GPIO_WritePin>
}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	2000002c 	.word	0x2000002c
 80009e8:	cccccccd 	.word	0xcccccccd
 80009ec:	20000078 	.word	0x20000078
 80009f0:	48000400 	.word	0x48000400

080009f4 <motor_right>:
void motor_right(uint32_t duty_cycle)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle);
 80009fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <motor_right+0x44>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	687a      	ldr	r2, [r7, #4]
 8000a02:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8000a04:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <motor_right+0x44>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a3c <motor_right+0x48>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2200      	movs	r2, #0
 8000a12:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle/5);
 8000a14:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <motor_right+0x48>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	4909      	ldr	r1, [pc, #36]	@ (8000a40 <motor_right+0x4c>)
 8000a1c:	fba1 1202 	umull	r1, r2, r1, r2
 8000a20:	0892      	lsrs	r2, r2, #2
 8000a22:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000a24:	2201      	movs	r2, #1
 8000a26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a2a:	4806      	ldr	r0, [pc, #24]	@ (8000a44 <motor_right+0x50>)
 8000a2c:	f000 fdec 	bl	8001608 <HAL_GPIO_WritePin>
}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	2000002c 	.word	0x2000002c
 8000a3c:	20000078 	.word	0x20000078
 8000a40:	cccccccd 	.word	0xcccccccd
 8000a44:	48000400 	.word	0x48000400

08000a48 <motor_backward>:

// Function to move motors backward
void motor_backward(uint32_t duty_cycle)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000a50:	4b0e      	ldr	r3, [pc, #56]	@ (8000a8c <motor_backward+0x44>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2200      	movs	r2, #0
 8000a56:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, duty_cycle);
 8000a58:	4b0c      	ldr	r3, [pc, #48]	@ (8000a8c <motor_backward+0x44>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000a60:	4b0b      	ldr	r3, [pc, #44]	@ (8000a90 <motor_backward+0x48>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2200      	movs	r2, #0
 8000a66:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle*3/4);
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	441a      	add	r2, r3
 8000a70:	4b07      	ldr	r3, [pc, #28]	@ (8000a90 <motor_backward+0x48>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	0892      	lsrs	r2, r2, #2
 8000a76:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a7e:	4805      	ldr	r0, [pc, #20]	@ (8000a94 <motor_backward+0x4c>)
 8000a80:	f000 fdc2 	bl	8001608 <HAL_GPIO_WritePin>
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	2000002c 	.word	0x2000002c
 8000a90:	20000078 	.word	0x20000078
 8000a94:	48000400 	.word	0x48000400

08000a98 <motor_stop>:

// Function to stop motors
void motor_stop(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac8 <motor_stop+0x30>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8000aa4:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <motor_stop+0x30>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000aac:	4b07      	ldr	r3, [pc, #28]	@ (8000acc <motor_stop+0x34>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000ab4:	4b05      	ldr	r3, [pc, #20]	@ (8000acc <motor_stop+0x34>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	2000002c 	.word	0x2000002c
 8000acc:	20000078 	.word	0x20000078

08000ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
}
 8000ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <Error_Handler+0x8>

08000adc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <HAL_MspInit+0x44>)
 8000ae4:	699b      	ldr	r3, [r3, #24]
 8000ae6:	4a0e      	ldr	r2, [pc, #56]	@ (8000b20 <HAL_MspInit+0x44>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6193      	str	r3, [r2, #24]
 8000aee:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <HAL_MspInit+0x44>)
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	4b09      	ldr	r3, [pc, #36]	@ (8000b20 <HAL_MspInit+0x44>)
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	4a08      	ldr	r2, [pc, #32]	@ (8000b20 <HAL_MspInit+0x44>)
 8000b00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b04:	61d3      	str	r3, [r2, #28]
 8000b06:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <HAL_MspInit+0x44>)
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b12:	2007      	movs	r0, #7
 8000b14:	f000 fb4e 	bl	80011b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40021000 	.word	0x40021000

08000b24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a13      	ldr	r2, [pc, #76]	@ (8000b80 <HAL_TIM_Base_MspInit+0x5c>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d10c      	bne.n	8000b50 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b36:	4b13      	ldr	r3, [pc, #76]	@ (8000b84 <HAL_TIM_Base_MspInit+0x60>)
 8000b38:	699b      	ldr	r3, [r3, #24]
 8000b3a:	4a12      	ldr	r2, [pc, #72]	@ (8000b84 <HAL_TIM_Base_MspInit+0x60>)
 8000b3c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b40:	6193      	str	r3, [r2, #24]
 8000b42:	4b10      	ldr	r3, [pc, #64]	@ (8000b84 <HAL_TIM_Base_MspInit+0x60>)
 8000b44:	699b      	ldr	r3, [r3, #24]
 8000b46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000b4e:	e010      	b.n	8000b72 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0c      	ldr	r2, [pc, #48]	@ (8000b88 <HAL_TIM_Base_MspInit+0x64>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d10b      	bne.n	8000b72 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b84 <HAL_TIM_Base_MspInit+0x60>)
 8000b5c:	699b      	ldr	r3, [r3, #24]
 8000b5e:	4a09      	ldr	r2, [pc, #36]	@ (8000b84 <HAL_TIM_Base_MspInit+0x60>)
 8000b60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b64:	6193      	str	r3, [r2, #24]
 8000b66:	4b07      	ldr	r3, [pc, #28]	@ (8000b84 <HAL_TIM_Base_MspInit+0x60>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
}
 8000b72:	bf00      	nop
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40012c00 	.word	0x40012c00
 8000b84:	40021000 	.word	0x40021000
 8000b88:	40014400 	.word	0x40014400

08000b8c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b9c:	d10b      	bne.n	8000bb6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b9e:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <HAL_TIM_PWM_MspInit+0x38>)
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	4a08      	ldr	r2, [pc, #32]	@ (8000bc4 <HAL_TIM_PWM_MspInit+0x38>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	61d3      	str	r3, [r2, #28]
 8000baa:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <HAL_TIM_PWM_MspInit+0x38>)
 8000bac:	69db      	ldr	r3, [r3, #28]
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bb6:	bf00      	nop
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08c      	sub	sp, #48	@ 0x30
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a51      	ldr	r2, [pc, #324]	@ (8000d2c <HAL_TIM_MspPostInit+0x164>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d13a      	bne.n	8000c60 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bea:	4b51      	ldr	r3, [pc, #324]	@ (8000d30 <HAL_TIM_MspPostInit+0x168>)
 8000bec:	695b      	ldr	r3, [r3, #20]
 8000bee:	4a50      	ldr	r2, [pc, #320]	@ (8000d30 <HAL_TIM_MspPostInit+0x168>)
 8000bf0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000bf4:	6153      	str	r3, [r2, #20]
 8000bf6:	4b4e      	ldr	r3, [pc, #312]	@ (8000d30 <HAL_TIM_MspPostInit+0x168>)
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000bfe:	61bb      	str	r3, [r7, #24]
 8000c00:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	4b4b      	ldr	r3, [pc, #300]	@ (8000d30 <HAL_TIM_MspPostInit+0x168>)
 8000c04:	695b      	ldr	r3, [r3, #20]
 8000c06:	4a4a      	ldr	r2, [pc, #296]	@ (8000d30 <HAL_TIM_MspPostInit+0x168>)
 8000c08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c0c:	6153      	str	r3, [r2, #20]
 8000c0e:	4b48      	ldr	r3, [pc, #288]	@ (8000d30 <HAL_TIM_MspPostInit+0x168>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = L2_Pin;
 8000c1a:	2308      	movs	r3, #8
 8000c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(L2_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4619      	mov	r1, r3
 8000c34:	483f      	ldr	r0, [pc, #252]	@ (8000d34 <HAL_TIM_MspPostInit+0x16c>)
 8000c36:	f000 fb75 	bl	8001324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = L1_Pin;
 8000c3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000c4c:	2306      	movs	r3, #6
 8000c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(L1_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 031c 	add.w	r3, r7, #28
 8000c54:	4619      	mov	r1, r3
 8000c56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c5a:	f000 fb63 	bl	8001324 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000c5e:	e061      	b.n	8000d24 <HAL_TIM_MspPostInit+0x15c>
  else if(htim->Instance==TIM2)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c68:	d13a      	bne.n	8000ce0 <HAL_TIM_MspPostInit+0x118>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	4b31      	ldr	r3, [pc, #196]	@ (8000d30 <HAL_TIM_MspPostInit+0x168>)
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	4a30      	ldr	r2, [pc, #192]	@ (8000d30 <HAL_TIM_MspPostInit+0x168>)
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c74:	6153      	str	r3, [r2, #20]
 8000c76:	4b2e      	ldr	r3, [pc, #184]	@ (8000d30 <HAL_TIM_MspPostInit+0x168>)
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c82:	4b2b      	ldr	r3, [pc, #172]	@ (8000d30 <HAL_TIM_MspPostInit+0x168>)
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	4a2a      	ldr	r2, [pc, #168]	@ (8000d30 <HAL_TIM_MspPostInit+0x168>)
 8000c88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c8c:	6153      	str	r3, [r2, #20]
 8000c8e:	4b28      	ldr	r3, [pc, #160]	@ (8000d30 <HAL_TIM_MspPostInit+0x168>)
 8000c90:	695b      	ldr	r3, [r3, #20]
 8000c92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = P1_Pin;
 8000c9a:	2320      	movs	r3, #32
 8000c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000caa:	2301      	movs	r3, #1
 8000cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(P1_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cb8:	f000 fb34 	bl	8001324 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = P2_Pin;
 8000cbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(P2_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4817      	ldr	r0, [pc, #92]	@ (8000d38 <HAL_TIM_MspPostInit+0x170>)
 8000cda:	f000 fb23 	bl	8001324 <HAL_GPIO_Init>
}
 8000cde:	e021      	b.n	8000d24 <HAL_TIM_MspPostInit+0x15c>
  else if(htim->Instance==TIM16)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a15      	ldr	r2, [pc, #84]	@ (8000d3c <HAL_TIM_MspPostInit+0x174>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d11c      	bne.n	8000d24 <HAL_TIM_MspPostInit+0x15c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <HAL_TIM_MspPostInit+0x168>)
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	4a10      	ldr	r2, [pc, #64]	@ (8000d30 <HAL_TIM_MspPostInit+0x168>)
 8000cf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cf4:	6153      	str	r3, [r2, #20]
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d30 <HAL_TIM_MspPostInit+0x168>)
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d02:	2340      	movs	r3, #64	@ 0x40
 8000d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8000d12:	2301      	movs	r3, #1
 8000d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 031c 	add.w	r3, r7, #28
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d20:	f000 fb00 	bl	8001324 <HAL_GPIO_Init>
}
 8000d24:	bf00      	nop
 8000d26:	3730      	adds	r7, #48	@ 0x30
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40012c00 	.word	0x40012c00
 8000d30:	40021000 	.word	0x40021000
 8000d34:	48000800 	.word	0x48000800
 8000d38:	48000400 	.word	0x48000400
 8000d3c:	40014400 	.word	0x40014400

08000d40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08c      	sub	sp, #48	@ 0x30
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a37      	ldr	r2, [pc, #220]	@ (8000e3c <HAL_UART_MspInit+0xfc>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d132      	bne.n	8000dc8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d62:	4b37      	ldr	r3, [pc, #220]	@ (8000e40 <HAL_UART_MspInit+0x100>)
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	4a36      	ldr	r2, [pc, #216]	@ (8000e40 <HAL_UART_MspInit+0x100>)
 8000d68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d6c:	6193      	str	r3, [r2, #24]
 8000d6e:	4b34      	ldr	r3, [pc, #208]	@ (8000e40 <HAL_UART_MspInit+0x100>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d76:	61bb      	str	r3, [r7, #24]
 8000d78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b31      	ldr	r3, [pc, #196]	@ (8000e40 <HAL_UART_MspInit+0x100>)
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	4a30      	ldr	r2, [pc, #192]	@ (8000e40 <HAL_UART_MspInit+0x100>)
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d84:	6153      	str	r3, [r2, #20]
 8000d86:	4b2e      	ldr	r3, [pc, #184]	@ (8000e40 <HAL_UART_MspInit+0x100>)
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d92:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000da0:	2303      	movs	r3, #3
 8000da2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000da4:	2307      	movs	r3, #7
 8000da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	4619      	mov	r1, r3
 8000dae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000db2:	f000 fab7 	bl	8001324 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2100      	movs	r1, #0
 8000dba:	2025      	movs	r0, #37	@ 0x25
 8000dbc:	f000 fa05 	bl	80011ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dc0:	2025      	movs	r0, #37	@ 0x25
 8000dc2:	f000 fa1e 	bl	8001202 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dc6:	e035      	b.n	8000e34 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART2)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8000e44 <HAL_UART_MspInit+0x104>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d130      	bne.n	8000e34 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e40 <HAL_UART_MspInit+0x100>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	4a1a      	ldr	r2, [pc, #104]	@ (8000e40 <HAL_UART_MspInit+0x100>)
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ddc:	61d3      	str	r3, [r2, #28]
 8000dde:	4b18      	ldr	r3, [pc, #96]	@ (8000e40 <HAL_UART_MspInit+0x100>)
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <HAL_UART_MspInit+0x100>)
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	4a14      	ldr	r2, [pc, #80]	@ (8000e40 <HAL_UART_MspInit+0x100>)
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df4:	6153      	str	r3, [r2, #20]
 8000df6:	4b12      	ldr	r3, [pc, #72]	@ (8000e40 <HAL_UART_MspInit+0x100>)
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e02:	230c      	movs	r3, #12
 8000e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e12:	2307      	movs	r3, #7
 8000e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e16:	f107 031c 	add.w	r3, r7, #28
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e20:	f000 fa80 	bl	8001324 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2100      	movs	r1, #0
 8000e28:	2026      	movs	r0, #38	@ 0x26
 8000e2a:	f000 f9ce 	bl	80011ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e2e:	2026      	movs	r0, #38	@ 0x26
 8000e30:	f000 f9e7 	bl	8001202 <HAL_NVIC_EnableIRQ>
}
 8000e34:	bf00      	nop
 8000e36:	3730      	adds	r7, #48	@ 0x30
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40013800 	.word	0x40013800
 8000e40:	40021000 	.word	0x40021000
 8000e44:	40004400 	.word	0x40004400

08000e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <NMI_Handler+0x4>

08000e50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <HardFault_Handler+0x4>

08000e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <MemManage_Handler+0x4>

08000e60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <BusFault_Handler+0x4>

08000e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <UsageFault_Handler+0x4>

08000e70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e9e:	f000 f899 	bl	8000fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000eac:	4802      	ldr	r0, [pc, #8]	@ (8000eb8 <USART1_IRQHandler+0x10>)
 8000eae:	f003 f997 	bl	80041e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000110 	.word	0x20000110

08000ebc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ec0:	4802      	ldr	r0, [pc, #8]	@ (8000ecc <USART2_IRQHandler+0x10>)
 8000ec2:	f003 f98d 	bl	80041e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000198 	.word	0x20000198

08000ed0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed4:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <SystemInit+0x20>)
 8000ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000eda:	4a05      	ldr	r2, [pc, #20]	@ (8000ef0 <SystemInit+0x20>)
 8000edc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ee0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <Reset_Handler>:
 8000ef4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f2c <LoopForever+0x2>
 8000ef8:	f7ff ffea 	bl	8000ed0 <SystemInit>
 8000efc:	480c      	ldr	r0, [pc, #48]	@ (8000f30 <LoopForever+0x6>)
 8000efe:	490d      	ldr	r1, [pc, #52]	@ (8000f34 <LoopForever+0xa>)
 8000f00:	4a0d      	ldr	r2, [pc, #52]	@ (8000f38 <LoopForever+0xe>)
 8000f02:	2300      	movs	r3, #0
 8000f04:	e002      	b.n	8000f0c <LoopCopyDataInit>

08000f06 <CopyDataInit>:
 8000f06:	58d4      	ldr	r4, [r2, r3]
 8000f08:	50c4      	str	r4, [r0, r3]
 8000f0a:	3304      	adds	r3, #4

08000f0c <LoopCopyDataInit>:
 8000f0c:	18c4      	adds	r4, r0, r3
 8000f0e:	428c      	cmp	r4, r1
 8000f10:	d3f9      	bcc.n	8000f06 <CopyDataInit>
 8000f12:	4a0a      	ldr	r2, [pc, #40]	@ (8000f3c <LoopForever+0x12>)
 8000f14:	4c0a      	ldr	r4, [pc, #40]	@ (8000f40 <LoopForever+0x16>)
 8000f16:	2300      	movs	r3, #0
 8000f18:	e001      	b.n	8000f1e <LoopFillZerobss>

08000f1a <FillZerobss>:
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	3204      	adds	r2, #4

08000f1e <LoopFillZerobss>:
 8000f1e:	42a2      	cmp	r2, r4
 8000f20:	d3fb      	bcc.n	8000f1a <FillZerobss>
 8000f22:	f004 fa6f 	bl	8005404 <__libc_init_array>
 8000f26:	f7ff f94f 	bl	80001c8 <main>

08000f2a <LoopForever>:
 8000f2a:	e7fe      	b.n	8000f2a <LoopForever>
 8000f2c:	20004000 	.word	0x20004000
 8000f30:	20000000 	.word	0x20000000
 8000f34:	20000010 	.word	0x20000010
 8000f38:	080054a4 	.word	0x080054a4
 8000f3c:	20000010 	.word	0x20000010
 8000f40:	20000228 	.word	0x20000228

08000f44 <ADC1_IRQHandler>:
 8000f44:	e7fe      	b.n	8000f44 <ADC1_IRQHandler>
	...

08000f48 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f4c:	4b08      	ldr	r3, [pc, #32]	@ (8000f70 <HAL_Init+0x28>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a07      	ldr	r2, [pc, #28]	@ (8000f70 <HAL_Init+0x28>)
 8000f52:	f043 0310 	orr.w	r3, r3, #16
 8000f56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f58:	2003      	movs	r0, #3
 8000f5a:	f000 f92b 	bl	80011b4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f000 f808 	bl	8000f74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f64:	f7ff fdba 	bl	8000adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40022000 	.word	0x40022000

08000f74 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f7c:	4b12      	ldr	r3, [pc, #72]	@ (8000fc8 <HAL_InitTick+0x54>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4b12      	ldr	r3, [pc, #72]	@ (8000fcc <HAL_InitTick+0x58>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4619      	mov	r1, r3
 8000f86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 f943 	bl	800121e <HAL_SYSTICK_Config>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00e      	b.n	8000fc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b0f      	cmp	r3, #15
 8000fa6:	d80a      	bhi.n	8000fbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	f000 f90b 	bl	80011ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb4:	4a06      	ldr	r2, [pc, #24]	@ (8000fd0 <HAL_InitTick+0x5c>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	e000      	b.n	8000fc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000004 	.word	0x20000004
 8000fcc:	2000000c 	.word	0x2000000c
 8000fd0:	20000008 	.word	0x20000008

08000fd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <HAL_IncTick+0x20>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <HAL_IncTick+0x24>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4a04      	ldr	r2, [pc, #16]	@ (8000ff8 <HAL_IncTick+0x24>)
 8000fe6:	6013      	str	r3, [r2, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	2000000c 	.word	0x2000000c
 8000ff8:	20000224 	.word	0x20000224

08000ffc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return uwTick;  
 8001000:	4b03      	ldr	r3, [pc, #12]	@ (8001010 <HAL_GetTick+0x14>)
 8001002:	681b      	ldr	r3, [r3, #0]
}
 8001004:	4618      	mov	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000224 	.word	0x20000224

08001014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001024:	4b0c      	ldr	r3, [pc, #48]	@ (8001058 <__NVIC_SetPriorityGrouping+0x44>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001030:	4013      	ands	r3, r2
 8001032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800103c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001040:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001046:	4a04      	ldr	r2, [pc, #16]	@ (8001058 <__NVIC_SetPriorityGrouping+0x44>)
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	60d3      	str	r3, [r2, #12]
}
 800104c:	bf00      	nop
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001060:	4b04      	ldr	r3, [pc, #16]	@ (8001074 <__NVIC_GetPriorityGrouping+0x18>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	0a1b      	lsrs	r3, r3, #8
 8001066:	f003 0307 	and.w	r3, r3, #7
}
 800106a:	4618      	mov	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	2b00      	cmp	r3, #0
 8001088:	db0b      	blt.n	80010a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	f003 021f 	and.w	r2, r3, #31
 8001090:	4907      	ldr	r1, [pc, #28]	@ (80010b0 <__NVIC_EnableIRQ+0x38>)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	095b      	lsrs	r3, r3, #5
 8001098:	2001      	movs	r0, #1
 800109a:	fa00 f202 	lsl.w	r2, r0, r2
 800109e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000e100 	.word	0xe000e100

080010b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	6039      	str	r1, [r7, #0]
 80010be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	db0a      	blt.n	80010de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	490c      	ldr	r1, [pc, #48]	@ (8001100 <__NVIC_SetPriority+0x4c>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	0112      	lsls	r2, r2, #4
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	440b      	add	r3, r1
 80010d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010dc:	e00a      	b.n	80010f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4908      	ldr	r1, [pc, #32]	@ (8001104 <__NVIC_SetPriority+0x50>)
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	f003 030f 	and.w	r3, r3, #15
 80010ea:	3b04      	subs	r3, #4
 80010ec:	0112      	lsls	r2, r2, #4
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	440b      	add	r3, r1
 80010f2:	761a      	strb	r2, [r3, #24]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000e100 	.word	0xe000e100
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001108:	b480      	push	{r7}
 800110a:	b089      	sub	sp, #36	@ 0x24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f1c3 0307 	rsb	r3, r3, #7
 8001122:	2b04      	cmp	r3, #4
 8001124:	bf28      	it	cs
 8001126:	2304      	movcs	r3, #4
 8001128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3304      	adds	r3, #4
 800112e:	2b06      	cmp	r3, #6
 8001130:	d902      	bls.n	8001138 <NVIC_EncodePriority+0x30>
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3b03      	subs	r3, #3
 8001136:	e000      	b.n	800113a <NVIC_EncodePriority+0x32>
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	f04f 32ff 	mov.w	r2, #4294967295
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43da      	mvns	r2, r3
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	401a      	ands	r2, r3
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001150:	f04f 31ff 	mov.w	r1, #4294967295
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	fa01 f303 	lsl.w	r3, r1, r3
 800115a:	43d9      	mvns	r1, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001160:	4313      	orrs	r3, r2
         );
}
 8001162:	4618      	mov	r0, r3
 8001164:	3724      	adds	r7, #36	@ 0x24
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
	...

08001170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3b01      	subs	r3, #1
 800117c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001180:	d301      	bcc.n	8001186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001182:	2301      	movs	r3, #1
 8001184:	e00f      	b.n	80011a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001186:	4a0a      	ldr	r2, [pc, #40]	@ (80011b0 <SysTick_Config+0x40>)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3b01      	subs	r3, #1
 800118c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800118e:	210f      	movs	r1, #15
 8001190:	f04f 30ff 	mov.w	r0, #4294967295
 8001194:	f7ff ff8e 	bl	80010b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001198:	4b05      	ldr	r3, [pc, #20]	@ (80011b0 <SysTick_Config+0x40>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119e:	4b04      	ldr	r3, [pc, #16]	@ (80011b0 <SysTick_Config+0x40>)
 80011a0:	2207      	movs	r2, #7
 80011a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	e000e010 	.word	0xe000e010

080011b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff ff29 	bl	8001014 <__NVIC_SetPriorityGrouping>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b086      	sub	sp, #24
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
 80011d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011dc:	f7ff ff3e 	bl	800105c <__NVIC_GetPriorityGrouping>
 80011e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	68b9      	ldr	r1, [r7, #8]
 80011e6:	6978      	ldr	r0, [r7, #20]
 80011e8:	f7ff ff8e 	bl	8001108 <NVIC_EncodePriority>
 80011ec:	4602      	mov	r2, r0
 80011ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f2:	4611      	mov	r1, r2
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff5d 	bl	80010b4 <__NVIC_SetPriority>
}
 80011fa:	bf00      	nop
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	4603      	mov	r3, r0
 800120a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800120c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff31 	bl	8001078 <__NVIC_EnableIRQ>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ffa2 	bl	8001170 <SysTick_Config>
 800122c:	4603      	mov	r3, r0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001244:	2b02      	cmp	r3, #2
 8001246:	d008      	beq.n	800125a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2204      	movs	r2, #4
 800124c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e020      	b.n	800129c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f022 020e 	bic.w	r2, r2, #14
 8001268:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 0201 	bic.w	r2, r2, #1
 8001278:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001282:	2101      	movs	r1, #1
 8001284:	fa01 f202 	lsl.w	r2, r1, r2
 8001288:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2201      	movs	r2, #1
 800128e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012b0:	2300      	movs	r3, #0
 80012b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d005      	beq.n	80012ca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2204      	movs	r2, #4
 80012c2:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	73fb      	strb	r3, [r7, #15]
 80012c8:	e027      	b.n	800131a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 020e 	bic.w	r2, r2, #14
 80012d8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f022 0201 	bic.w	r2, r2, #1
 80012e8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012f2:	2101      	movs	r1, #1
 80012f4:	fa01 f202 	lsl.w	r2, r1, r2
 80012f8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2201      	movs	r2, #1
 80012fe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	4798      	blx	r3
    } 
  }
  return status;
 800131a:	7bfb      	ldrb	r3, [r7, #15]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001324:	b480      	push	{r7}
 8001326:	b087      	sub	sp, #28
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001332:	e14e      	b.n	80015d2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	2101      	movs	r1, #1
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	fa01 f303 	lsl.w	r3, r1, r3
 8001340:	4013      	ands	r3, r2
 8001342:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2b00      	cmp	r3, #0
 8001348:	f000 8140 	beq.w	80015cc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 0303 	and.w	r3, r3, #3
 8001354:	2b01      	cmp	r3, #1
 8001356:	d005      	beq.n	8001364 <HAL_GPIO_Init+0x40>
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d130      	bne.n	80013c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	2203      	movs	r2, #3
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	68da      	ldr	r2, [r3, #12]
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800139a:	2201      	movs	r2, #1
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4013      	ands	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	091b      	lsrs	r3, r3, #4
 80013b0:	f003 0201 	and.w	r2, r3, #1
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d017      	beq.n	8001402 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	2203      	movs	r2, #3
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f003 0303 	and.w	r3, r3, #3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d123      	bne.n	8001456 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	08da      	lsrs	r2, r3, #3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3208      	adds	r2, #8
 8001416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800141a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	220f      	movs	r2, #15
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	691a      	ldr	r2, [r3, #16]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	f003 0307 	and.w	r3, r3, #7
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	08da      	lsrs	r2, r3, #3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3208      	adds	r2, #8
 8001450:	6939      	ldr	r1, [r7, #16]
 8001452:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	2203      	movs	r2, #3
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 0203 	and.w	r2, r3, #3
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 809a 	beq.w	80015cc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001498:	4b55      	ldr	r3, [pc, #340]	@ (80015f0 <HAL_GPIO_Init+0x2cc>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4a54      	ldr	r2, [pc, #336]	@ (80015f0 <HAL_GPIO_Init+0x2cc>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	6193      	str	r3, [r2, #24]
 80014a4:	4b52      	ldr	r3, [pc, #328]	@ (80015f0 <HAL_GPIO_Init+0x2cc>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014b0:	4a50      	ldr	r2, [pc, #320]	@ (80015f4 <HAL_GPIO_Init+0x2d0>)
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	089b      	lsrs	r3, r3, #2
 80014b6:	3302      	adds	r3, #2
 80014b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	220f      	movs	r2, #15
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4013      	ands	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80014da:	d013      	beq.n	8001504 <HAL_GPIO_Init+0x1e0>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a46      	ldr	r2, [pc, #280]	@ (80015f8 <HAL_GPIO_Init+0x2d4>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d00d      	beq.n	8001500 <HAL_GPIO_Init+0x1dc>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a45      	ldr	r2, [pc, #276]	@ (80015fc <HAL_GPIO_Init+0x2d8>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d007      	beq.n	80014fc <HAL_GPIO_Init+0x1d8>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a44      	ldr	r2, [pc, #272]	@ (8001600 <HAL_GPIO_Init+0x2dc>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d101      	bne.n	80014f8 <HAL_GPIO_Init+0x1d4>
 80014f4:	2303      	movs	r3, #3
 80014f6:	e006      	b.n	8001506 <HAL_GPIO_Init+0x1e2>
 80014f8:	2305      	movs	r3, #5
 80014fa:	e004      	b.n	8001506 <HAL_GPIO_Init+0x1e2>
 80014fc:	2302      	movs	r3, #2
 80014fe:	e002      	b.n	8001506 <HAL_GPIO_Init+0x1e2>
 8001500:	2301      	movs	r3, #1
 8001502:	e000      	b.n	8001506 <HAL_GPIO_Init+0x1e2>
 8001504:	2300      	movs	r3, #0
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	f002 0203 	and.w	r2, r2, #3
 800150c:	0092      	lsls	r2, r2, #2
 800150e:	4093      	lsls	r3, r2
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001516:	4937      	ldr	r1, [pc, #220]	@ (80015f4 <HAL_GPIO_Init+0x2d0>)
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	089b      	lsrs	r3, r3, #2
 800151c:	3302      	adds	r3, #2
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001524:	4b37      	ldr	r3, [pc, #220]	@ (8001604 <HAL_GPIO_Init+0x2e0>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	43db      	mvns	r3, r3
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4013      	ands	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001548:	4a2e      	ldr	r2, [pc, #184]	@ (8001604 <HAL_GPIO_Init+0x2e0>)
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800154e:	4b2d      	ldr	r3, [pc, #180]	@ (8001604 <HAL_GPIO_Init+0x2e0>)
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	43db      	mvns	r3, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4313      	orrs	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001572:	4a24      	ldr	r2, [pc, #144]	@ (8001604 <HAL_GPIO_Init+0x2e0>)
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001578:	4b22      	ldr	r3, [pc, #136]	@ (8001604 <HAL_GPIO_Init+0x2e0>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	43db      	mvns	r3, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800159c:	4a19      	ldr	r2, [pc, #100]	@ (8001604 <HAL_GPIO_Init+0x2e0>)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015a2:	4b18      	ldr	r3, [pc, #96]	@ (8001604 <HAL_GPIO_Init+0x2e0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	43db      	mvns	r3, r3
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001604 <HAL_GPIO_Init+0x2e0>)
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	3301      	adds	r3, #1
 80015d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	fa22 f303 	lsr.w	r3, r2, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f47f aea9 	bne.w	8001334 <HAL_GPIO_Init+0x10>
  }
}
 80015e2:	bf00      	nop
 80015e4:	bf00      	nop
 80015e6:	371c      	adds	r7, #28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40010000 	.word	0x40010000
 80015f8:	48000400 	.word	0x48000400
 80015fc:	48000800 	.word	0x48000800
 8001600:	48000c00 	.word	0x48000c00
 8001604:	40010400 	.word	0x40010400

08001608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	460b      	mov	r3, r1
 8001612:	807b      	strh	r3, [r7, #2]
 8001614:	4613      	mov	r3, r2
 8001616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001618:	787b      	ldrb	r3, [r7, #1]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800161e:	887a      	ldrh	r2, [r7, #2]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001624:	e002      	b.n	800162c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001626:	887a      	ldrh	r2, [r7, #2]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800163e:	af00      	add	r7, sp, #0
 8001640:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001644:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001648:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800164a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800164e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d102      	bne.n	800165e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	f001 b823 	b.w	80026a4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800165e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001662:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b00      	cmp	r3, #0
 8001670:	f000 817d 	beq.w	800196e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001674:	4bbc      	ldr	r3, [pc, #752]	@ (8001968 <HAL_RCC_OscConfig+0x330>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 030c 	and.w	r3, r3, #12
 800167c:	2b04      	cmp	r3, #4
 800167e:	d00c      	beq.n	800169a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001680:	4bb9      	ldr	r3, [pc, #740]	@ (8001968 <HAL_RCC_OscConfig+0x330>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 030c 	and.w	r3, r3, #12
 8001688:	2b08      	cmp	r3, #8
 800168a:	d15c      	bne.n	8001746 <HAL_RCC_OscConfig+0x10e>
 800168c:	4bb6      	ldr	r3, [pc, #728]	@ (8001968 <HAL_RCC_OscConfig+0x330>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001694:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001698:	d155      	bne.n	8001746 <HAL_RCC_OscConfig+0x10e>
 800169a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800169e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80016a6:	fa93 f3a3 	rbit	r3, r3
 80016aa:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016ae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b2:	fab3 f383 	clz	r3, r3
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	095b      	lsrs	r3, r3, #5
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d102      	bne.n	80016cc <HAL_RCC_OscConfig+0x94>
 80016c6:	4ba8      	ldr	r3, [pc, #672]	@ (8001968 <HAL_RCC_OscConfig+0x330>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	e015      	b.n	80016f8 <HAL_RCC_OscConfig+0xc0>
 80016cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016d0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80016d8:	fa93 f3a3 	rbit	r3, r3
 80016dc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80016e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016e4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80016e8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80016ec:	fa93 f3a3 	rbit	r3, r3
 80016f0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80016f4:	4b9c      	ldr	r3, [pc, #624]	@ (8001968 <HAL_RCC_OscConfig+0x330>)
 80016f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016fc:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001700:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001704:	fa92 f2a2 	rbit	r2, r2
 8001708:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800170c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001710:	fab2 f282 	clz	r2, r2
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	f042 0220 	orr.w	r2, r2, #32
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	f002 021f 	and.w	r2, r2, #31
 8001720:	2101      	movs	r1, #1
 8001722:	fa01 f202 	lsl.w	r2, r1, r2
 8001726:	4013      	ands	r3, r2
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 811f 	beq.w	800196c <HAL_RCC_OscConfig+0x334>
 800172e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001732:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	f040 8116 	bne.w	800196c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	f000 bfaf 	b.w	80026a4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001746:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800174a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001756:	d106      	bne.n	8001766 <HAL_RCC_OscConfig+0x12e>
 8001758:	4b83      	ldr	r3, [pc, #524]	@ (8001968 <HAL_RCC_OscConfig+0x330>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a82      	ldr	r2, [pc, #520]	@ (8001968 <HAL_RCC_OscConfig+0x330>)
 800175e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	e036      	b.n	80017d4 <HAL_RCC_OscConfig+0x19c>
 8001766:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800176a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10c      	bne.n	8001790 <HAL_RCC_OscConfig+0x158>
 8001776:	4b7c      	ldr	r3, [pc, #496]	@ (8001968 <HAL_RCC_OscConfig+0x330>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a7b      	ldr	r2, [pc, #492]	@ (8001968 <HAL_RCC_OscConfig+0x330>)
 800177c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	4b79      	ldr	r3, [pc, #484]	@ (8001968 <HAL_RCC_OscConfig+0x330>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a78      	ldr	r2, [pc, #480]	@ (8001968 <HAL_RCC_OscConfig+0x330>)
 8001788:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	e021      	b.n	80017d4 <HAL_RCC_OscConfig+0x19c>
 8001790:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001794:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017a0:	d10c      	bne.n	80017bc <HAL_RCC_OscConfig+0x184>
 80017a2:	4b71      	ldr	r3, [pc, #452]	@ (8001968 <HAL_RCC_OscConfig+0x330>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a70      	ldr	r2, [pc, #448]	@ (8001968 <HAL_RCC_OscConfig+0x330>)
 80017a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	4b6e      	ldr	r3, [pc, #440]	@ (8001968 <HAL_RCC_OscConfig+0x330>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a6d      	ldr	r2, [pc, #436]	@ (8001968 <HAL_RCC_OscConfig+0x330>)
 80017b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	e00b      	b.n	80017d4 <HAL_RCC_OscConfig+0x19c>
 80017bc:	4b6a      	ldr	r3, [pc, #424]	@ (8001968 <HAL_RCC_OscConfig+0x330>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a69      	ldr	r2, [pc, #420]	@ (8001968 <HAL_RCC_OscConfig+0x330>)
 80017c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017c6:	6013      	str	r3, [r2, #0]
 80017c8:	4b67      	ldr	r3, [pc, #412]	@ (8001968 <HAL_RCC_OscConfig+0x330>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a66      	ldr	r2, [pc, #408]	@ (8001968 <HAL_RCC_OscConfig+0x330>)
 80017ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017d2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017d4:	4b64      	ldr	r3, [pc, #400]	@ (8001968 <HAL_RCC_OscConfig+0x330>)
 80017d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d8:	f023 020f 	bic.w	r2, r3, #15
 80017dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	495f      	ldr	r1, [pc, #380]	@ (8001968 <HAL_RCC_OscConfig+0x330>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d059      	beq.n	80018b2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fe:	f7ff fbfd 	bl	8000ffc <HAL_GetTick>
 8001802:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001806:	e00a      	b.n	800181e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001808:	f7ff fbf8 	bl	8000ffc <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b64      	cmp	r3, #100	@ 0x64
 8001816:	d902      	bls.n	800181e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	f000 bf43 	b.w	80026a4 <HAL_RCC_OscConfig+0x106c>
 800181e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001822:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001826:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800182a:	fa93 f3a3 	rbit	r3, r3
 800182e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001832:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001836:	fab3 f383 	clz	r3, r3
 800183a:	b2db      	uxtb	r3, r3
 800183c:	095b      	lsrs	r3, r3, #5
 800183e:	b2db      	uxtb	r3, r3
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b01      	cmp	r3, #1
 8001848:	d102      	bne.n	8001850 <HAL_RCC_OscConfig+0x218>
 800184a:	4b47      	ldr	r3, [pc, #284]	@ (8001968 <HAL_RCC_OscConfig+0x330>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	e015      	b.n	800187c <HAL_RCC_OscConfig+0x244>
 8001850:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001854:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001858:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800185c:	fa93 f3a3 	rbit	r3, r3
 8001860:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001864:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001868:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800186c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001870:	fa93 f3a3 	rbit	r3, r3
 8001874:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001878:	4b3b      	ldr	r3, [pc, #236]	@ (8001968 <HAL_RCC_OscConfig+0x330>)
 800187a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001880:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001884:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001888:	fa92 f2a2 	rbit	r2, r2
 800188c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001890:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001894:	fab2 f282 	clz	r2, r2
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	f042 0220 	orr.w	r2, r2, #32
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	f002 021f 	and.w	r2, r2, #31
 80018a4:	2101      	movs	r1, #1
 80018a6:	fa01 f202 	lsl.w	r2, r1, r2
 80018aa:	4013      	ands	r3, r2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d0ab      	beq.n	8001808 <HAL_RCC_OscConfig+0x1d0>
 80018b0:	e05d      	b.n	800196e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b2:	f7ff fba3 	bl	8000ffc <HAL_GetTick>
 80018b6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ba:	e00a      	b.n	80018d2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018bc:	f7ff fb9e 	bl	8000ffc <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b64      	cmp	r3, #100	@ 0x64
 80018ca:	d902      	bls.n	80018d2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	f000 bee9 	b.w	80026a4 <HAL_RCC_OscConfig+0x106c>
 80018d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018d6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018da:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80018de:	fa93 f3a3 	rbit	r3, r3
 80018e2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80018e6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ea:	fab3 f383 	clz	r3, r3
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	095b      	lsrs	r3, r3, #5
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d102      	bne.n	8001904 <HAL_RCC_OscConfig+0x2cc>
 80018fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001968 <HAL_RCC_OscConfig+0x330>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	e015      	b.n	8001930 <HAL_RCC_OscConfig+0x2f8>
 8001904:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001908:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001910:	fa93 f3a3 	rbit	r3, r3
 8001914:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001918:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800191c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001920:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001924:	fa93 f3a3 	rbit	r3, r3
 8001928:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800192c:	4b0e      	ldr	r3, [pc, #56]	@ (8001968 <HAL_RCC_OscConfig+0x330>)
 800192e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001930:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001934:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001938:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800193c:	fa92 f2a2 	rbit	r2, r2
 8001940:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001944:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001948:	fab2 f282 	clz	r2, r2
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	f042 0220 	orr.w	r2, r2, #32
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	f002 021f 	and.w	r2, r2, #31
 8001958:	2101      	movs	r1, #1
 800195a:	fa01 f202 	lsl.w	r2, r1, r2
 800195e:	4013      	ands	r3, r2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1ab      	bne.n	80018bc <HAL_RCC_OscConfig+0x284>
 8001964:	e003      	b.n	800196e <HAL_RCC_OscConfig+0x336>
 8001966:	bf00      	nop
 8001968:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800196e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001972:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 817d 	beq.w	8001c7e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001984:	4ba6      	ldr	r3, [pc, #664]	@ (8001c20 <HAL_RCC_OscConfig+0x5e8>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 030c 	and.w	r3, r3, #12
 800198c:	2b00      	cmp	r3, #0
 800198e:	d00b      	beq.n	80019a8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001990:	4ba3      	ldr	r3, [pc, #652]	@ (8001c20 <HAL_RCC_OscConfig+0x5e8>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 030c 	and.w	r3, r3, #12
 8001998:	2b08      	cmp	r3, #8
 800199a:	d172      	bne.n	8001a82 <HAL_RCC_OscConfig+0x44a>
 800199c:	4ba0      	ldr	r3, [pc, #640]	@ (8001c20 <HAL_RCC_OscConfig+0x5e8>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d16c      	bne.n	8001a82 <HAL_RCC_OscConfig+0x44a>
 80019a8:	2302      	movs	r3, #2
 80019aa:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ae:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80019b2:	fa93 f3a3 	rbit	r3, r3
 80019b6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80019ba:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019be:	fab3 f383 	clz	r3, r3
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	095b      	lsrs	r3, r3, #5
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d102      	bne.n	80019d8 <HAL_RCC_OscConfig+0x3a0>
 80019d2:	4b93      	ldr	r3, [pc, #588]	@ (8001c20 <HAL_RCC_OscConfig+0x5e8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	e013      	b.n	8001a00 <HAL_RCC_OscConfig+0x3c8>
 80019d8:	2302      	movs	r3, #2
 80019da:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019de:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80019e2:	fa93 f3a3 	rbit	r3, r3
 80019e6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80019ea:	2302      	movs	r3, #2
 80019ec:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80019f0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80019f4:	fa93 f3a3 	rbit	r3, r3
 80019f8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80019fc:	4b88      	ldr	r3, [pc, #544]	@ (8001c20 <HAL_RCC_OscConfig+0x5e8>)
 80019fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a00:	2202      	movs	r2, #2
 8001a02:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001a06:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001a0a:	fa92 f2a2 	rbit	r2, r2
 8001a0e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001a12:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001a16:	fab2 f282 	clz	r2, r2
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	f042 0220 	orr.w	r2, r2, #32
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	f002 021f 	and.w	r2, r2, #31
 8001a26:	2101      	movs	r1, #1
 8001a28:	fa01 f202 	lsl.w	r2, r1, r2
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00a      	beq.n	8001a48 <HAL_RCC_OscConfig+0x410>
 8001a32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d002      	beq.n	8001a48 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	f000 be2e 	b.w	80026a4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a48:	4b75      	ldr	r3, [pc, #468]	@ (8001c20 <HAL_RCC_OscConfig+0x5e8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	21f8      	movs	r1, #248	@ 0xf8
 8001a5e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a62:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001a66:	fa91 f1a1 	rbit	r1, r1
 8001a6a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001a6e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001a72:	fab1 f181 	clz	r1, r1
 8001a76:	b2c9      	uxtb	r1, r1
 8001a78:	408b      	lsls	r3, r1
 8001a7a:	4969      	ldr	r1, [pc, #420]	@ (8001c20 <HAL_RCC_OscConfig+0x5e8>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a80:	e0fd      	b.n	8001c7e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 8088 	beq.w	8001ba4 <HAL_RCC_OscConfig+0x56c>
 8001a94:	2301      	movs	r3, #1
 8001a96:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001a9e:	fa93 f3a3 	rbit	r3, r3
 8001aa2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001aa6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aaa:	fab3 f383 	clz	r3, r3
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ab4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	461a      	mov	r2, r3
 8001abc:	2301      	movs	r3, #1
 8001abe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac0:	f7ff fa9c 	bl	8000ffc <HAL_GetTick>
 8001ac4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac8:	e00a      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aca:	f7ff fa97 	bl	8000ffc <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d902      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	f000 bde2 	b.w	80026a4 <HAL_RCC_OscConfig+0x106c>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001aea:	fa93 f3a3 	rbit	r3, r3
 8001aee:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001af2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af6:	fab3 f383 	clz	r3, r3
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	095b      	lsrs	r3, r3, #5
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d102      	bne.n	8001b10 <HAL_RCC_OscConfig+0x4d8>
 8001b0a:	4b45      	ldr	r3, [pc, #276]	@ (8001c20 <HAL_RCC_OscConfig+0x5e8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	e013      	b.n	8001b38 <HAL_RCC_OscConfig+0x500>
 8001b10:	2302      	movs	r3, #2
 8001b12:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b16:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001b1a:	fa93 f3a3 	rbit	r3, r3
 8001b1e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001b22:	2302      	movs	r3, #2
 8001b24:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001b28:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001b2c:	fa93 f3a3 	rbit	r3, r3
 8001b30:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001b34:	4b3a      	ldr	r3, [pc, #232]	@ (8001c20 <HAL_RCC_OscConfig+0x5e8>)
 8001b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b38:	2202      	movs	r2, #2
 8001b3a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001b3e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001b42:	fa92 f2a2 	rbit	r2, r2
 8001b46:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001b4a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001b4e:	fab2 f282 	clz	r2, r2
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	f042 0220 	orr.w	r2, r2, #32
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	f002 021f 	and.w	r2, r2, #31
 8001b5e:	2101      	movs	r1, #1
 8001b60:	fa01 f202 	lsl.w	r2, r1, r2
 8001b64:	4013      	ands	r3, r2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0af      	beq.n	8001aca <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b6a:	4b2d      	ldr	r3, [pc, #180]	@ (8001c20 <HAL_RCC_OscConfig+0x5e8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	21f8      	movs	r1, #248	@ 0xf8
 8001b80:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b84:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001b88:	fa91 f1a1 	rbit	r1, r1
 8001b8c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001b90:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001b94:	fab1 f181 	clz	r1, r1
 8001b98:	b2c9      	uxtb	r1, r1
 8001b9a:	408b      	lsls	r3, r1
 8001b9c:	4920      	ldr	r1, [pc, #128]	@ (8001c20 <HAL_RCC_OscConfig+0x5e8>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]
 8001ba2:	e06c      	b.n	8001c7e <HAL_RCC_OscConfig+0x646>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001bae:	fa93 f3a3 	rbit	r3, r3
 8001bb2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001bb6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bba:	fab3 f383 	clz	r3, r3
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001bc4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	461a      	mov	r2, r3
 8001bcc:	2300      	movs	r3, #0
 8001bce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd0:	f7ff fa14 	bl	8000ffc <HAL_GetTick>
 8001bd4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd8:	e00a      	b.n	8001bf0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bda:	f7ff fa0f 	bl	8000ffc <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d902      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	f000 bd5a 	b.w	80026a4 <HAL_RCC_OscConfig+0x106c>
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001bfa:	fa93 f3a3 	rbit	r3, r3
 8001bfe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001c02:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c06:	fab3 f383 	clz	r3, r3
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	095b      	lsrs	r3, r3, #5
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d104      	bne.n	8001c24 <HAL_RCC_OscConfig+0x5ec>
 8001c1a:	4b01      	ldr	r3, [pc, #4]	@ (8001c20 <HAL_RCC_OscConfig+0x5e8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	e015      	b.n	8001c4c <HAL_RCC_OscConfig+0x614>
 8001c20:	40021000 	.word	0x40021000
 8001c24:	2302      	movs	r3, #2
 8001c26:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001c2e:	fa93 f3a3 	rbit	r3, r3
 8001c32:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001c36:	2302      	movs	r3, #2
 8001c38:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001c3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001c40:	fa93 f3a3 	rbit	r3, r3
 8001c44:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001c48:	4bc8      	ldr	r3, [pc, #800]	@ (8001f6c <HAL_RCC_OscConfig+0x934>)
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001c52:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001c56:	fa92 f2a2 	rbit	r2, r2
 8001c5a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001c5e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001c62:	fab2 f282 	clz	r2, r2
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	f042 0220 	orr.w	r2, r2, #32
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	f002 021f 	and.w	r2, r2, #31
 8001c72:	2101      	movs	r1, #1
 8001c74:	fa01 f202 	lsl.w	r2, r1, r2
 8001c78:	4013      	ands	r3, r2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1ad      	bne.n	8001bda <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 8110 	beq.w	8001eb4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d079      	beq.n	8001d98 <HAL_RCC_OscConfig+0x760>
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001caa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001cae:	fa93 f3a3 	rbit	r3, r3
 8001cb2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001cb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cba:	fab3 f383 	clz	r3, r3
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4bab      	ldr	r3, [pc, #684]	@ (8001f70 <HAL_RCC_OscConfig+0x938>)
 8001cc4:	4413      	add	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	461a      	mov	r2, r3
 8001cca:	2301      	movs	r3, #1
 8001ccc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cce:	f7ff f995 	bl	8000ffc <HAL_GetTick>
 8001cd2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd6:	e00a      	b.n	8001cee <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cd8:	f7ff f990 	bl	8000ffc <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d902      	bls.n	8001cee <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	f000 bcdb 	b.w	80026a4 <HAL_RCC_OscConfig+0x106c>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001cf8:	fa93 f3a3 	rbit	r3, r3
 8001cfc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001d00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d04:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001d08:	2202      	movs	r2, #2
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d10:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	fa93 f2a3 	rbit	r2, r3
 8001d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	fa93 f2a3 	rbit	r2, r3
 8001d3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d42:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d46:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d48:	4b88      	ldr	r3, [pc, #544]	@ (8001f6c <HAL_RCC_OscConfig+0x934>)
 8001d4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d50:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001d54:	2102      	movs	r1, #2
 8001d56:	6019      	str	r1, [r3, #0]
 8001d58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d5c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	fa93 f1a3 	rbit	r1, r3
 8001d66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d6a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d6e:	6019      	str	r1, [r3, #0]
  return result;
 8001d70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d74:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	fab3 f383 	clz	r3, r3
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	f003 031f 	and.w	r3, r3, #31
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d90:	4013      	ands	r3, r2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0a0      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x6a0>
 8001d96:	e08d      	b.n	8001eb4 <HAL_RCC_OscConfig+0x87c>
 8001d98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d9c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001da0:	2201      	movs	r2, #1
 8001da2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	fa93 f2a3 	rbit	r2, r3
 8001db2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001db6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001dba:	601a      	str	r2, [r3, #0]
  return result;
 8001dbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001dc4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dc6:	fab3 f383 	clz	r3, r3
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4b68      	ldr	r3, [pc, #416]	@ (8001f70 <HAL_RCC_OscConfig+0x938>)
 8001dd0:	4413      	add	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dda:	f7ff f90f 	bl	8000ffc <HAL_GetTick>
 8001dde:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de2:	e00a      	b.n	8001dfa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001de4:	f7ff f90a 	bl	8000ffc <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d902      	bls.n	8001dfa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	f000 bc55 	b.w	80026a4 <HAL_RCC_OscConfig+0x106c>
 8001dfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dfe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001e02:	2202      	movs	r2, #2
 8001e04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e0a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	fa93 f2a3 	rbit	r2, r3
 8001e14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e18:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e22:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001e26:	2202      	movs	r2, #2
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e2e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	fa93 f2a3 	rbit	r2, r3
 8001e38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e3c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e46:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e52:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	fa93 f2a3 	rbit	r2, r3
 8001e5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e60:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001e64:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e66:	4b41      	ldr	r3, [pc, #260]	@ (8001f6c <HAL_RCC_OscConfig+0x934>)
 8001e68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e6e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001e72:	2102      	movs	r1, #2
 8001e74:	6019      	str	r1, [r3, #0]
 8001e76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e7a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	fa93 f1a3 	rbit	r1, r3
 8001e84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e88:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001e8c:	6019      	str	r1, [r3, #0]
  return result;
 8001e8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e92:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	fab3 f383 	clz	r3, r3
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	f003 031f 	and.w	r3, r3, #31
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d197      	bne.n	8001de4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eb8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 81a1 	beq.w	800220c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed0:	4b26      	ldr	r3, [pc, #152]	@ (8001f6c <HAL_RCC_OscConfig+0x934>)
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d116      	bne.n	8001f0a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001edc:	4b23      	ldr	r3, [pc, #140]	@ (8001f6c <HAL_RCC_OscConfig+0x934>)
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	4a22      	ldr	r2, [pc, #136]	@ (8001f6c <HAL_RCC_OscConfig+0x934>)
 8001ee2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ee6:	61d3      	str	r3, [r2, #28]
 8001ee8:	4b20      	ldr	r3, [pc, #128]	@ (8001f6c <HAL_RCC_OscConfig+0x934>)
 8001eea:	69db      	ldr	r3, [r3, #28]
 8001eec:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001ef0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001efe:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001f02:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f04:	2301      	movs	r3, #1
 8001f06:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f74 <HAL_RCC_OscConfig+0x93c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d11a      	bne.n	8001f4c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f16:	4b17      	ldr	r3, [pc, #92]	@ (8001f74 <HAL_RCC_OscConfig+0x93c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a16      	ldr	r2, [pc, #88]	@ (8001f74 <HAL_RCC_OscConfig+0x93c>)
 8001f1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f20:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f22:	f7ff f86b 	bl	8000ffc <HAL_GetTick>
 8001f26:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2a:	e009      	b.n	8001f40 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f2c:	f7ff f866 	bl	8000ffc <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b64      	cmp	r3, #100	@ 0x64
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e3b1      	b.n	80026a4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f40:	4b0c      	ldr	r3, [pc, #48]	@ (8001f74 <HAL_RCC_OscConfig+0x93c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0ef      	beq.n	8001f2c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d10d      	bne.n	8001f78 <HAL_RCC_OscConfig+0x940>
 8001f5c:	4b03      	ldr	r3, [pc, #12]	@ (8001f6c <HAL_RCC_OscConfig+0x934>)
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	4a02      	ldr	r2, [pc, #8]	@ (8001f6c <HAL_RCC_OscConfig+0x934>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	6213      	str	r3, [r2, #32]
 8001f68:	e03c      	b.n	8001fe4 <HAL_RCC_OscConfig+0x9ac>
 8001f6a:	bf00      	nop
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	10908120 	.word	0x10908120
 8001f74:	40007000 	.word	0x40007000
 8001f78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d10c      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x96a>
 8001f88:	4bc1      	ldr	r3, [pc, #772]	@ (8002290 <HAL_RCC_OscConfig+0xc58>)
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	4ac0      	ldr	r2, [pc, #768]	@ (8002290 <HAL_RCC_OscConfig+0xc58>)
 8001f8e:	f023 0301 	bic.w	r3, r3, #1
 8001f92:	6213      	str	r3, [r2, #32]
 8001f94:	4bbe      	ldr	r3, [pc, #760]	@ (8002290 <HAL_RCC_OscConfig+0xc58>)
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	4abd      	ldr	r2, [pc, #756]	@ (8002290 <HAL_RCC_OscConfig+0xc58>)
 8001f9a:	f023 0304 	bic.w	r3, r3, #4
 8001f9e:	6213      	str	r3, [r2, #32]
 8001fa0:	e020      	b.n	8001fe4 <HAL_RCC_OscConfig+0x9ac>
 8001fa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fa6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	2b05      	cmp	r3, #5
 8001fb0:	d10c      	bne.n	8001fcc <HAL_RCC_OscConfig+0x994>
 8001fb2:	4bb7      	ldr	r3, [pc, #732]	@ (8002290 <HAL_RCC_OscConfig+0xc58>)
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	4ab6      	ldr	r2, [pc, #728]	@ (8002290 <HAL_RCC_OscConfig+0xc58>)
 8001fb8:	f043 0304 	orr.w	r3, r3, #4
 8001fbc:	6213      	str	r3, [r2, #32]
 8001fbe:	4bb4      	ldr	r3, [pc, #720]	@ (8002290 <HAL_RCC_OscConfig+0xc58>)
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	4ab3      	ldr	r2, [pc, #716]	@ (8002290 <HAL_RCC_OscConfig+0xc58>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6213      	str	r3, [r2, #32]
 8001fca:	e00b      	b.n	8001fe4 <HAL_RCC_OscConfig+0x9ac>
 8001fcc:	4bb0      	ldr	r3, [pc, #704]	@ (8002290 <HAL_RCC_OscConfig+0xc58>)
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	4aaf      	ldr	r2, [pc, #700]	@ (8002290 <HAL_RCC_OscConfig+0xc58>)
 8001fd2:	f023 0301 	bic.w	r3, r3, #1
 8001fd6:	6213      	str	r3, [r2, #32]
 8001fd8:	4bad      	ldr	r3, [pc, #692]	@ (8002290 <HAL_RCC_OscConfig+0xc58>)
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	4aac      	ldr	r2, [pc, #688]	@ (8002290 <HAL_RCC_OscConfig+0xc58>)
 8001fde:	f023 0304 	bic.w	r3, r3, #4
 8001fe2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fe4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 8081 	beq.w	80020f8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff6:	f7ff f801 	bl	8000ffc <HAL_GetTick>
 8001ffa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ffe:	e00b      	b.n	8002018 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002000:	f7fe fffc 	bl	8000ffc <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002010:	4293      	cmp	r3, r2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e345      	b.n	80026a4 <HAL_RCC_OscConfig+0x106c>
 8002018:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800201c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002020:	2202      	movs	r2, #2
 8002022:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002028:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	fa93 f2a3 	rbit	r2, r3
 8002032:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002036:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002040:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002044:	2202      	movs	r2, #2
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800204c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	fa93 f2a3 	rbit	r2, r3
 8002056:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800205a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800205e:	601a      	str	r2, [r3, #0]
  return result;
 8002060:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002064:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002068:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800206a:	fab3 f383 	clz	r3, r3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	095b      	lsrs	r3, r3, #5
 8002072:	b2db      	uxtb	r3, r3
 8002074:	f043 0302 	orr.w	r3, r3, #2
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d102      	bne.n	8002084 <HAL_RCC_OscConfig+0xa4c>
 800207e:	4b84      	ldr	r3, [pc, #528]	@ (8002290 <HAL_RCC_OscConfig+0xc58>)
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	e013      	b.n	80020ac <HAL_RCC_OscConfig+0xa74>
 8002084:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002088:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800208c:	2202      	movs	r2, #2
 800208e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002090:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002094:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	fa93 f2a3 	rbit	r2, r3
 800209e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	4b79      	ldr	r3, [pc, #484]	@ (8002290 <HAL_RCC_OscConfig+0xc58>)
 80020aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020b0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80020b4:	2102      	movs	r1, #2
 80020b6:	6011      	str	r1, [r2, #0]
 80020b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020bc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	fa92 f1a2 	rbit	r1, r2
 80020c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020ca:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80020ce:	6011      	str	r1, [r2, #0]
  return result;
 80020d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020d4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80020d8:	6812      	ldr	r2, [r2, #0]
 80020da:	fab2 f282 	clz	r2, r2
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	f002 021f 	and.w	r2, r2, #31
 80020ea:	2101      	movs	r1, #1
 80020ec:	fa01 f202 	lsl.w	r2, r1, r2
 80020f0:	4013      	ands	r3, r2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d084      	beq.n	8002000 <HAL_RCC_OscConfig+0x9c8>
 80020f6:	e07f      	b.n	80021f8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f8:	f7fe ff80 	bl	8000ffc <HAL_GetTick>
 80020fc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002100:	e00b      	b.n	800211a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002102:	f7fe ff7b 	bl	8000ffc <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002112:	4293      	cmp	r3, r2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e2c4      	b.n	80026a4 <HAL_RCC_OscConfig+0x106c>
 800211a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800211e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002122:	2202      	movs	r2, #2
 8002124:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002126:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800212a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	fa93 f2a3 	rbit	r2, r3
 8002134:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002138:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002142:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002146:	2202      	movs	r2, #2
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800214e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	fa93 f2a3 	rbit	r2, r3
 8002158:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800215c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002160:	601a      	str	r2, [r3, #0]
  return result;
 8002162:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002166:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800216a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800216c:	fab3 f383 	clz	r3, r3
 8002170:	b2db      	uxtb	r3, r3
 8002172:	095b      	lsrs	r3, r3, #5
 8002174:	b2db      	uxtb	r3, r3
 8002176:	f043 0302 	orr.w	r3, r3, #2
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d102      	bne.n	8002186 <HAL_RCC_OscConfig+0xb4e>
 8002180:	4b43      	ldr	r3, [pc, #268]	@ (8002290 <HAL_RCC_OscConfig+0xc58>)
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	e013      	b.n	80021ae <HAL_RCC_OscConfig+0xb76>
 8002186:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800218a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800218e:	2202      	movs	r2, #2
 8002190:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002196:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	fa93 f2a3 	rbit	r2, r3
 80021a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	4b39      	ldr	r3, [pc, #228]	@ (8002290 <HAL_RCC_OscConfig+0xc58>)
 80021ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021b2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80021b6:	2102      	movs	r1, #2
 80021b8:	6011      	str	r1, [r2, #0]
 80021ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021be:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	fa92 f1a2 	rbit	r1, r2
 80021c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021cc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80021d0:	6011      	str	r1, [r2, #0]
  return result;
 80021d2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021d6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	fab2 f282 	clz	r2, r2
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	f002 021f 	and.w	r2, r2, #31
 80021ec:	2101      	movs	r1, #1
 80021ee:	fa01 f202 	lsl.w	r2, r1, r2
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d184      	bne.n	8002102 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021f8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d105      	bne.n	800220c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002200:	4b23      	ldr	r3, [pc, #140]	@ (8002290 <HAL_RCC_OscConfig+0xc58>)
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	4a22      	ldr	r2, [pc, #136]	@ (8002290 <HAL_RCC_OscConfig+0xc58>)
 8002206:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800220a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800220c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002210:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 8242 	beq.w	80026a2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800221e:	4b1c      	ldr	r3, [pc, #112]	@ (8002290 <HAL_RCC_OscConfig+0xc58>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b08      	cmp	r3, #8
 8002228:	f000 8213 	beq.w	8002652 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800222c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002230:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	2b02      	cmp	r3, #2
 800223a:	f040 8162 	bne.w	8002502 <HAL_RCC_OscConfig+0xeca>
 800223e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002242:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002246:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800224a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002250:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	fa93 f2a3 	rbit	r2, r3
 800225a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800225e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002262:	601a      	str	r2, [r3, #0]
  return result;
 8002264:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002268:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800226c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226e:	fab3 f383 	clz	r3, r3
 8002272:	b2db      	uxtb	r3, r3
 8002274:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002278:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	461a      	mov	r2, r3
 8002280:	2300      	movs	r3, #0
 8002282:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002284:	f7fe feba 	bl	8000ffc <HAL_GetTick>
 8002288:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800228c:	e00c      	b.n	80022a8 <HAL_RCC_OscConfig+0xc70>
 800228e:	bf00      	nop
 8002290:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002294:	f7fe feb2 	bl	8000ffc <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e1fd      	b.n	80026a4 <HAL_RCC_OscConfig+0x106c>
 80022a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ac:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80022b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ba:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	fa93 f2a3 	rbit	r2, r3
 80022c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80022cc:	601a      	str	r2, [r3, #0]
  return result;
 80022ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80022d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d8:	fab3 f383 	clz	r3, r3
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	095b      	lsrs	r3, r3, #5
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d102      	bne.n	80022f2 <HAL_RCC_OscConfig+0xcba>
 80022ec:	4bb0      	ldr	r3, [pc, #704]	@ (80025b0 <HAL_RCC_OscConfig+0xf78>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	e027      	b.n	8002342 <HAL_RCC_OscConfig+0xd0a>
 80022f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80022fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002300:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002304:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	fa93 f2a3 	rbit	r2, r3
 800230e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002312:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800231c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002320:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800232a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	fa93 f2a3 	rbit	r2, r3
 8002334:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002338:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	4b9c      	ldr	r3, [pc, #624]	@ (80025b0 <HAL_RCC_OscConfig+0xf78>)
 8002340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002342:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002346:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800234a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800234e:	6011      	str	r1, [r2, #0]
 8002350:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002354:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002358:	6812      	ldr	r2, [r2, #0]
 800235a:	fa92 f1a2 	rbit	r1, r2
 800235e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002362:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002366:	6011      	str	r1, [r2, #0]
  return result;
 8002368:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800236c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	fab2 f282 	clz	r2, r2
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	f042 0220 	orr.w	r2, r2, #32
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	f002 021f 	and.w	r2, r2, #31
 8002382:	2101      	movs	r1, #1
 8002384:	fa01 f202 	lsl.w	r2, r1, r2
 8002388:	4013      	ands	r3, r2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d182      	bne.n	8002294 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800238e:	4b88      	ldr	r3, [pc, #544]	@ (80025b0 <HAL_RCC_OscConfig+0xf78>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002396:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800239a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80023a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	430b      	orrs	r3, r1
 80023b0:	497f      	ldr	r1, [pc, #508]	@ (80025b0 <HAL_RCC_OscConfig+0xf78>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	604b      	str	r3, [r1, #4]
 80023b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ba:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80023be:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80023c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	fa93 f2a3 	rbit	r2, r3
 80023d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80023da:	601a      	str	r2, [r3, #0]
  return result;
 80023dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80023e4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023e6:	fab3 f383 	clz	r3, r3
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80023f0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	461a      	mov	r2, r3
 80023f8:	2301      	movs	r3, #1
 80023fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fc:	f7fe fdfe 	bl	8000ffc <HAL_GetTick>
 8002400:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002404:	e009      	b.n	800241a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002406:	f7fe fdf9 	bl	8000ffc <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e144      	b.n	80026a4 <HAL_RCC_OscConfig+0x106c>
 800241a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800241e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002422:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002426:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002428:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800242c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	fa93 f2a3 	rbit	r2, r3
 8002436:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800243a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800243e:	601a      	str	r2, [r3, #0]
  return result;
 8002440:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002444:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002448:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800244a:	fab3 f383 	clz	r3, r3
 800244e:	b2db      	uxtb	r3, r3
 8002450:	095b      	lsrs	r3, r3, #5
 8002452:	b2db      	uxtb	r3, r3
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b01      	cmp	r3, #1
 800245c:	d102      	bne.n	8002464 <HAL_RCC_OscConfig+0xe2c>
 800245e:	4b54      	ldr	r3, [pc, #336]	@ (80025b0 <HAL_RCC_OscConfig+0xf78>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	e027      	b.n	80024b4 <HAL_RCC_OscConfig+0xe7c>
 8002464:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002468:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800246c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002470:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002476:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	fa93 f2a3 	rbit	r2, r3
 8002480:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002484:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800248e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002492:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800249c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	fa93 f2a3 	rbit	r2, r3
 80024a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024aa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	4b3f      	ldr	r3, [pc, #252]	@ (80025b0 <HAL_RCC_OscConfig+0xf78>)
 80024b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024b8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80024bc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80024c0:	6011      	str	r1, [r2, #0]
 80024c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024c6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	fa92 f1a2 	rbit	r1, r2
 80024d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024d4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80024d8:	6011      	str	r1, [r2, #0]
  return result;
 80024da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024de:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	fab2 f282 	clz	r2, r2
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	f042 0220 	orr.w	r2, r2, #32
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	f002 021f 	and.w	r2, r2, #31
 80024f4:	2101      	movs	r1, #1
 80024f6:	fa01 f202 	lsl.w	r2, r1, r2
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d082      	beq.n	8002406 <HAL_RCC_OscConfig+0xdce>
 8002500:	e0cf      	b.n	80026a2 <HAL_RCC_OscConfig+0x106a>
 8002502:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002506:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800250a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800250e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002510:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002514:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	fa93 f2a3 	rbit	r2, r3
 800251e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002522:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002526:	601a      	str	r2, [r3, #0]
  return result;
 8002528:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800252c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002530:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002532:	fab3 f383 	clz	r3, r3
 8002536:	b2db      	uxtb	r3, r3
 8002538:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800253c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	461a      	mov	r2, r3
 8002544:	2300      	movs	r3, #0
 8002546:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002548:	f7fe fd58 	bl	8000ffc <HAL_GetTick>
 800254c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002550:	e009      	b.n	8002566 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002552:	f7fe fd53 	bl	8000ffc <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e09e      	b.n	80026a4 <HAL_RCC_OscConfig+0x106c>
 8002566:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800256a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800256e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002572:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002574:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002578:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	fa93 f2a3 	rbit	r2, r3
 8002582:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002586:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800258a:	601a      	str	r2, [r3, #0]
  return result;
 800258c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002590:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002594:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002596:	fab3 f383 	clz	r3, r3
 800259a:	b2db      	uxtb	r3, r3
 800259c:	095b      	lsrs	r3, r3, #5
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d104      	bne.n	80025b4 <HAL_RCC_OscConfig+0xf7c>
 80025aa:	4b01      	ldr	r3, [pc, #4]	@ (80025b0 <HAL_RCC_OscConfig+0xf78>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	e029      	b.n	8002604 <HAL_RCC_OscConfig+0xfcc>
 80025b0:	40021000 	.word	0x40021000
 80025b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80025bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	fa93 f2a3 	rbit	r2, r3
 80025d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025de:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80025e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ec:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	fa93 f2a3 	rbit	r2, r3
 80025f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025fa:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	4b2b      	ldr	r3, [pc, #172]	@ (80026b0 <HAL_RCC_OscConfig+0x1078>)
 8002602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002604:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002608:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800260c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002610:	6011      	str	r1, [r2, #0]
 8002612:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002616:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	fa92 f1a2 	rbit	r1, r2
 8002620:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002624:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002628:	6011      	str	r1, [r2, #0]
  return result;
 800262a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800262e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	fab2 f282 	clz	r2, r2
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	f042 0220 	orr.w	r2, r2, #32
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	f002 021f 	and.w	r2, r2, #31
 8002644:	2101      	movs	r1, #1
 8002646:	fa01 f202 	lsl.w	r2, r1, r2
 800264a:	4013      	ands	r3, r2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d180      	bne.n	8002552 <HAL_RCC_OscConfig+0xf1a>
 8002650:	e027      	b.n	80026a2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002652:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002656:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d101      	bne.n	8002666 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e01e      	b.n	80026a4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002666:	4b12      	ldr	r3, [pc, #72]	@ (80026b0 <HAL_RCC_OscConfig+0x1078>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800266e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002672:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002676:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800267a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	429a      	cmp	r2, r3
 8002684:	d10b      	bne.n	800269e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002686:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800268a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800268e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002692:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800269a:	429a      	cmp	r2, r3
 800269c:	d001      	beq.n	80026a2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40021000 	.word	0x40021000

080026b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b09e      	sub	sp, #120	@ 0x78
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e162      	b.n	8002992 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026cc:	4b90      	ldr	r3, [pc, #576]	@ (8002910 <HAL_RCC_ClockConfig+0x25c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d910      	bls.n	80026fc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026da:	4b8d      	ldr	r3, [pc, #564]	@ (8002910 <HAL_RCC_ClockConfig+0x25c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f023 0207 	bic.w	r2, r3, #7
 80026e2:	498b      	ldr	r1, [pc, #556]	@ (8002910 <HAL_RCC_ClockConfig+0x25c>)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ea:	4b89      	ldr	r3, [pc, #548]	@ (8002910 <HAL_RCC_ClockConfig+0x25c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d001      	beq.n	80026fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e14a      	b.n	8002992 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002708:	4b82      	ldr	r3, [pc, #520]	@ (8002914 <HAL_RCC_ClockConfig+0x260>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	497f      	ldr	r1, [pc, #508]	@ (8002914 <HAL_RCC_ClockConfig+0x260>)
 8002716:	4313      	orrs	r3, r2
 8002718:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 80dc 	beq.w	80028e0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d13c      	bne.n	80027aa <HAL_RCC_ClockConfig+0xf6>
 8002730:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002734:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002736:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002738:	fa93 f3a3 	rbit	r3, r3
 800273c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800273e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002740:	fab3 f383 	clz	r3, r3
 8002744:	b2db      	uxtb	r3, r3
 8002746:	095b      	lsrs	r3, r3, #5
 8002748:	b2db      	uxtb	r3, r3
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b01      	cmp	r3, #1
 8002752:	d102      	bne.n	800275a <HAL_RCC_ClockConfig+0xa6>
 8002754:	4b6f      	ldr	r3, [pc, #444]	@ (8002914 <HAL_RCC_ClockConfig+0x260>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	e00f      	b.n	800277a <HAL_RCC_ClockConfig+0xc6>
 800275a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800275e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002760:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002762:	fa93 f3a3 	rbit	r3, r3
 8002766:	667b      	str	r3, [r7, #100]	@ 0x64
 8002768:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800276c:	663b      	str	r3, [r7, #96]	@ 0x60
 800276e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002770:	fa93 f3a3 	rbit	r3, r3
 8002774:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002776:	4b67      	ldr	r3, [pc, #412]	@ (8002914 <HAL_RCC_ClockConfig+0x260>)
 8002778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800277e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002780:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002782:	fa92 f2a2 	rbit	r2, r2
 8002786:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002788:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800278a:	fab2 f282 	clz	r2, r2
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	f042 0220 	orr.w	r2, r2, #32
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	f002 021f 	and.w	r2, r2, #31
 800279a:	2101      	movs	r1, #1
 800279c:	fa01 f202 	lsl.w	r2, r1, r2
 80027a0:	4013      	ands	r3, r2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d17b      	bne.n	800289e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e0f3      	b.n	8002992 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d13c      	bne.n	800282c <HAL_RCC_ClockConfig+0x178>
 80027b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027b6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027ba:	fa93 f3a3 	rbit	r3, r3
 80027be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80027c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c2:	fab3 f383 	clz	r3, r3
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	095b      	lsrs	r3, r3, #5
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d102      	bne.n	80027dc <HAL_RCC_ClockConfig+0x128>
 80027d6:	4b4f      	ldr	r3, [pc, #316]	@ (8002914 <HAL_RCC_ClockConfig+0x260>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	e00f      	b.n	80027fc <HAL_RCC_ClockConfig+0x148>
 80027dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027e4:	fa93 f3a3 	rbit	r3, r3
 80027e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80027ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80027f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027f8:	4b46      	ldr	r3, [pc, #280]	@ (8002914 <HAL_RCC_ClockConfig+0x260>)
 80027fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002800:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002802:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002804:	fa92 f2a2 	rbit	r2, r2
 8002808:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800280a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800280c:	fab2 f282 	clz	r2, r2
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	f042 0220 	orr.w	r2, r2, #32
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	f002 021f 	and.w	r2, r2, #31
 800281c:	2101      	movs	r1, #1
 800281e:	fa01 f202 	lsl.w	r2, r1, r2
 8002822:	4013      	ands	r3, r2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d13a      	bne.n	800289e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0b2      	b.n	8002992 <HAL_RCC_ClockConfig+0x2de>
 800282c:	2302      	movs	r3, #2
 800282e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002832:	fa93 f3a3 	rbit	r3, r3
 8002836:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283a:	fab3 f383 	clz	r3, r3
 800283e:	b2db      	uxtb	r3, r3
 8002840:	095b      	lsrs	r3, r3, #5
 8002842:	b2db      	uxtb	r3, r3
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b01      	cmp	r3, #1
 800284c:	d102      	bne.n	8002854 <HAL_RCC_ClockConfig+0x1a0>
 800284e:	4b31      	ldr	r3, [pc, #196]	@ (8002914 <HAL_RCC_ClockConfig+0x260>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	e00d      	b.n	8002870 <HAL_RCC_ClockConfig+0x1bc>
 8002854:	2302      	movs	r3, #2
 8002856:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800285a:	fa93 f3a3 	rbit	r3, r3
 800285e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002860:	2302      	movs	r3, #2
 8002862:	623b      	str	r3, [r7, #32]
 8002864:	6a3b      	ldr	r3, [r7, #32]
 8002866:	fa93 f3a3 	rbit	r3, r3
 800286a:	61fb      	str	r3, [r7, #28]
 800286c:	4b29      	ldr	r3, [pc, #164]	@ (8002914 <HAL_RCC_ClockConfig+0x260>)
 800286e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002870:	2202      	movs	r2, #2
 8002872:	61ba      	str	r2, [r7, #24]
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	fa92 f2a2 	rbit	r2, r2
 800287a:	617a      	str	r2, [r7, #20]
  return result;
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	fab2 f282 	clz	r2, r2
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	f042 0220 	orr.w	r2, r2, #32
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	f002 021f 	and.w	r2, r2, #31
 800288e:	2101      	movs	r1, #1
 8002890:	fa01 f202 	lsl.w	r2, r1, r2
 8002894:	4013      	ands	r3, r2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e079      	b.n	8002992 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800289e:	4b1d      	ldr	r3, [pc, #116]	@ (8002914 <HAL_RCC_ClockConfig+0x260>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f023 0203 	bic.w	r2, r3, #3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	491a      	ldr	r1, [pc, #104]	@ (8002914 <HAL_RCC_ClockConfig+0x260>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028b0:	f7fe fba4 	bl	8000ffc <HAL_GetTick>
 80028b4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b6:	e00a      	b.n	80028ce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b8:	f7fe fba0 	bl	8000ffc <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e061      	b.n	8002992 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ce:	4b11      	ldr	r3, [pc, #68]	@ (8002914 <HAL_RCC_ClockConfig+0x260>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 020c 	and.w	r2, r3, #12
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	429a      	cmp	r2, r3
 80028de:	d1eb      	bne.n	80028b8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002910 <HAL_RCC_ClockConfig+0x25c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d214      	bcs.n	8002918 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ee:	4b08      	ldr	r3, [pc, #32]	@ (8002910 <HAL_RCC_ClockConfig+0x25c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 0207 	bic.w	r2, r3, #7
 80028f6:	4906      	ldr	r1, [pc, #24]	@ (8002910 <HAL_RCC_ClockConfig+0x25c>)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fe:	4b04      	ldr	r3, [pc, #16]	@ (8002910 <HAL_RCC_ClockConfig+0x25c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d005      	beq.n	8002918 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e040      	b.n	8002992 <HAL_RCC_ClockConfig+0x2de>
 8002910:	40022000 	.word	0x40022000
 8002914:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002924:	4b1d      	ldr	r3, [pc, #116]	@ (800299c <HAL_RCC_ClockConfig+0x2e8>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	491a      	ldr	r1, [pc, #104]	@ (800299c <HAL_RCC_ClockConfig+0x2e8>)
 8002932:	4313      	orrs	r3, r2
 8002934:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d009      	beq.n	8002956 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002942:	4b16      	ldr	r3, [pc, #88]	@ (800299c <HAL_RCC_ClockConfig+0x2e8>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4912      	ldr	r1, [pc, #72]	@ (800299c <HAL_RCC_ClockConfig+0x2e8>)
 8002952:	4313      	orrs	r3, r2
 8002954:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002956:	f000 f829 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 800295a:	4601      	mov	r1, r0
 800295c:	4b0f      	ldr	r3, [pc, #60]	@ (800299c <HAL_RCC_ClockConfig+0x2e8>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002964:	22f0      	movs	r2, #240	@ 0xf0
 8002966:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	fa92 f2a2 	rbit	r2, r2
 800296e:	60fa      	str	r2, [r7, #12]
  return result;
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	fab2 f282 	clz	r2, r2
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	40d3      	lsrs	r3, r2
 800297a:	4a09      	ldr	r2, [pc, #36]	@ (80029a0 <HAL_RCC_ClockConfig+0x2ec>)
 800297c:	5cd3      	ldrb	r3, [r2, r3]
 800297e:	fa21 f303 	lsr.w	r3, r1, r3
 8002982:	4a08      	ldr	r2, [pc, #32]	@ (80029a4 <HAL_RCC_ClockConfig+0x2f0>)
 8002984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002986:	4b08      	ldr	r3, [pc, #32]	@ (80029a8 <HAL_RCC_ClockConfig+0x2f4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7fe faf2 	bl	8000f74 <HAL_InitTick>
  
  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3778      	adds	r7, #120	@ 0x78
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000
 80029a0:	08005464 	.word	0x08005464
 80029a4:	20000004 	.word	0x20000004
 80029a8:	20000008 	.word	0x20000008

080029ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b08b      	sub	sp, #44	@ 0x2c
 80029b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]
 80029b6:	2300      	movs	r3, #0
 80029b8:	61bb      	str	r3, [r7, #24]
 80029ba:	2300      	movs	r3, #0
 80029bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80029c6:	4b29      	ldr	r3, [pc, #164]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0xc0>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f003 030c 	and.w	r3, r3, #12
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d002      	beq.n	80029dc <HAL_RCC_GetSysClockFreq+0x30>
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d003      	beq.n	80029e2 <HAL_RCC_GetSysClockFreq+0x36>
 80029da:	e03c      	b.n	8002a56 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029dc:	4b24      	ldr	r3, [pc, #144]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029de:	623b      	str	r3, [r7, #32]
      break;
 80029e0:	e03c      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80029e8:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 80029ec:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	fa92 f2a2 	rbit	r2, r2
 80029f4:	607a      	str	r2, [r7, #4]
  return result;
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	fab2 f282 	clz	r2, r2
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	40d3      	lsrs	r3, r2
 8002a00:	4a1c      	ldr	r2, [pc, #112]	@ (8002a74 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a02:	5cd3      	ldrb	r3, [r2, r3]
 8002a04:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002a06:	4b19      	ldr	r3, [pc, #100]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	220f      	movs	r2, #15
 8002a10:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	fa92 f2a2 	rbit	r2, r2
 8002a18:	60fa      	str	r2, [r7, #12]
  return result;
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	fab2 f282 	clz	r2, r2
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	40d3      	lsrs	r3, r2
 8002a24:	4a14      	ldr	r2, [pc, #80]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a26:	5cd3      	ldrb	r3, [r2, r3]
 8002a28:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d008      	beq.n	8002a46 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a34:	4a0e      	ldr	r2, [pc, #56]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	fb02 f303 	mul.w	r3, r2, r3
 8002a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a44:	e004      	b.n	8002a50 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	4a0c      	ldr	r2, [pc, #48]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a4a:	fb02 f303 	mul.w	r3, r2, r3
 8002a4e:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a52:	623b      	str	r3, [r7, #32]
      break;
 8002a54:	e002      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a56:	4b06      	ldr	r3, [pc, #24]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a58:	623b      	str	r3, [r7, #32]
      break;
 8002a5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a5c:	6a3b      	ldr	r3, [r7, #32]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	372c      	adds	r7, #44	@ 0x2c
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	007a1200 	.word	0x007a1200
 8002a74:	0800547c 	.word	0x0800547c
 8002a78:	0800548c 	.word	0x0800548c
 8002a7c:	003d0900 	.word	0x003d0900

08002a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a84:	4b03      	ldr	r3, [pc, #12]	@ (8002a94 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a86:	681b      	ldr	r3, [r3, #0]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	20000004 	.word	0x20000004

08002a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002a9e:	f7ff ffef 	bl	8002a80 <HAL_RCC_GetHCLKFreq>
 8002aa2:	4601      	mov	r1, r0
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002aac:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002ab0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	fa92 f2a2 	rbit	r2, r2
 8002ab8:	603a      	str	r2, [r7, #0]
  return result;
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	fab2 f282 	clz	r2, r2
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	40d3      	lsrs	r3, r2
 8002ac4:	4a04      	ldr	r2, [pc, #16]	@ (8002ad8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002ac6:	5cd3      	ldrb	r3, [r2, r3]
 8002ac8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002acc:	4618      	mov	r0, r3
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	08005474 	.word	0x08005474

08002adc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002ae2:	f7ff ffcd 	bl	8002a80 <HAL_RCC_GetHCLKFreq>
 8002ae6:	4601      	mov	r1, r0
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b18 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002af0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002af4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	fa92 f2a2 	rbit	r2, r2
 8002afc:	603a      	str	r2, [r7, #0]
  return result;
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	fab2 f282 	clz	r2, r2
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	40d3      	lsrs	r3, r2
 8002b08:	4a04      	ldr	r2, [pc, #16]	@ (8002b1c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002b0a:	5cd3      	ldrb	r3, [r2, r3]
 8002b0c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002b10:	4618      	mov	r0, r3
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	08005474 	.word	0x08005474

08002b20 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b092      	sub	sp, #72	@ 0x48
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002b30:	2300      	movs	r3, #0
 8002b32:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 80d4 	beq.w	8002cec <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b44:	4b4e      	ldr	r3, [pc, #312]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10e      	bne.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b50:	4b4b      	ldr	r3, [pc, #300]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	4a4a      	ldr	r2, [pc, #296]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b5a:	61d3      	str	r3, [r2, #28]
 8002b5c:	4b48      	ldr	r3, [pc, #288]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b64:	60bb      	str	r3, [r7, #8]
 8002b66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6e:	4b45      	ldr	r3, [pc, #276]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d118      	bne.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b7a:	4b42      	ldr	r3, [pc, #264]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a41      	ldr	r2, [pc, #260]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b84:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b86:	f7fe fa39 	bl	8000ffc <HAL_GetTick>
 8002b8a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b8e:	f7fe fa35 	bl	8000ffc <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b64      	cmp	r3, #100	@ 0x64
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e14b      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba0:	4b38      	ldr	r3, [pc, #224]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0f0      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bac:	4b34      	ldr	r3, [pc, #208]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 8084 	beq.w	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bc6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d07c      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bcc:	4b2c      	ldr	r3, [pc, #176]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bd6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002bda:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bde:	fa93 f3a3 	rbit	r3, r3
 8002be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002be6:	fab3 f383 	clz	r3, r3
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	461a      	mov	r2, r3
 8002bee:	4b26      	ldr	r3, [pc, #152]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c02:	fa93 f3a3 	rbit	r3, r3
 8002c06:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c0a:	fab3 f383 	clz	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	461a      	mov	r2, r3
 8002c12:	4b1d      	ldr	r3, [pc, #116]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	461a      	mov	r2, r3
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c1e:	4a18      	ldr	r2, [pc, #96]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c22:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d04b      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2e:	f7fe f9e5 	bl	8000ffc <HAL_GetTick>
 8002c32:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c34:	e00a      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c36:	f7fe f9e1 	bl	8000ffc <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e0f5      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c52:	fa93 f3a3 	rbit	r3, r3
 8002c56:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c58:	2302      	movs	r3, #2
 8002c5a:	623b      	str	r3, [r7, #32]
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	fa93 f3a3 	rbit	r3, r3
 8002c62:	61fb      	str	r3, [r7, #28]
  return result;
 8002c64:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c66:	fab3 f383 	clz	r3, r3
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	095b      	lsrs	r3, r3, #5
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	f043 0302 	orr.w	r3, r3, #2
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d108      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002c7a:	4b01      	ldr	r3, [pc, #4]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	e00d      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40007000 	.word	0x40007000
 8002c88:	10908100 	.word	0x10908100
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	fa93 f3a3 	rbit	r3, r3
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	4b69      	ldr	r3, [pc, #420]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	613a      	str	r2, [r7, #16]
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	fa92 f2a2 	rbit	r2, r2
 8002ca6:	60fa      	str	r2, [r7, #12]
  return result;
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	fab2 f282 	clz	r2, r2
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	f002 021f 	and.w	r2, r2, #31
 8002cba:	2101      	movs	r1, #1
 8002cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0b7      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002cc6:	4b5e      	ldr	r3, [pc, #376]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	495b      	ldr	r1, [pc, #364]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cd8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d105      	bne.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ce0:	4b57      	ldr	r3, [pc, #348]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	4a56      	ldr	r2, [pc, #344]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ce6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cf8:	4b51      	ldr	r3, [pc, #324]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfc:	f023 0203 	bic.w	r2, r3, #3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	494e      	ldr	r1, [pc, #312]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0320 	and.w	r3, r3, #32
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d008      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d16:	4b4a      	ldr	r3, [pc, #296]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1a:	f023 0210 	bic.w	r2, r3, #16
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	4947      	ldr	r1, [pc, #284]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d008      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002d34:	4b42      	ldr	r3, [pc, #264]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d40:	493f      	ldr	r1, [pc, #252]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d008      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d52:	4b3b      	ldr	r3, [pc, #236]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d56:	f023 0220 	bic.w	r2, r3, #32
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	4938      	ldr	r1, [pc, #224]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d008      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d70:	4b33      	ldr	r3, [pc, #204]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d74:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	4930      	ldr	r1, [pc, #192]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d008      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d8e:	4b2c      	ldr	r3, [pc, #176]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	4929      	ldr	r1, [pc, #164]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d008      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002dac:	4b24      	ldr	r3, [pc, #144]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db0:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	4921      	ldr	r1, [pc, #132]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d008      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002dca:	4b1d      	ldr	r3, [pc, #116]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	491a      	ldr	r1, [pc, #104]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d008      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002de8:	4b15      	ldr	r3, [pc, #84]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dec:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df4:	4912      	ldr	r1, [pc, #72]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d008      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002e06:	4b0e      	ldr	r3, [pc, #56]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e12:	490b      	ldr	r1, [pc, #44]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d008      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002e24:	4b06      	ldr	r3, [pc, #24]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e28:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e30:	4903      	ldr	r1, [pc, #12]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3748      	adds	r7, #72	@ 0x48
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40021000 	.word	0x40021000

08002e44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e049      	b.n	8002eea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d106      	bne.n	8002e70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7fd fe5a 	bl	8000b24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3304      	adds	r3, #4
 8002e80:	4619      	mov	r1, r3
 8002e82:	4610      	mov	r0, r2
 8002e84:	f000 fb9e 	bl	80035c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
	...

08002ef4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d001      	beq.n	8002f0c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e033      	b.n	8002f74 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a19      	ldr	r2, [pc, #100]	@ (8002f80 <HAL_TIM_Base_Start+0x8c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d009      	beq.n	8002f32 <HAL_TIM_Base_Start+0x3e>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f26:	d004      	beq.n	8002f32 <HAL_TIM_Base_Start+0x3e>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a15      	ldr	r2, [pc, #84]	@ (8002f84 <HAL_TIM_Base_Start+0x90>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d115      	bne.n	8002f5e <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	4b13      	ldr	r3, [pc, #76]	@ (8002f88 <HAL_TIM_Base_Start+0x94>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2b06      	cmp	r3, #6
 8002f42:	d015      	beq.n	8002f70 <HAL_TIM_Base_Start+0x7c>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f4a:	d011      	beq.n	8002f70 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0201 	orr.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f5c:	e008      	b.n	8002f70 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f042 0201 	orr.w	r2, r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	e000      	b.n	8002f72 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f70:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	40012c00 	.word	0x40012c00
 8002f84:	40014000 	.word	0x40014000
 8002f88:	00010007 	.word	0x00010007

08002f8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e049      	b.n	8003032 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d106      	bne.n	8002fb8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7fd fdea 	bl	8000b8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4610      	mov	r0, r2
 8002fcc:	f000 fafa 	bl	80035c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d109      	bne.n	8003060 <HAL_TIM_PWM_Start+0x24>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b01      	cmp	r3, #1
 8003056:	bf14      	ite	ne
 8003058:	2301      	movne	r3, #1
 800305a:	2300      	moveq	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	e03c      	b.n	80030da <HAL_TIM_PWM_Start+0x9e>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	2b04      	cmp	r3, #4
 8003064:	d109      	bne.n	800307a <HAL_TIM_PWM_Start+0x3e>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b01      	cmp	r3, #1
 8003070:	bf14      	ite	ne
 8003072:	2301      	movne	r3, #1
 8003074:	2300      	moveq	r3, #0
 8003076:	b2db      	uxtb	r3, r3
 8003078:	e02f      	b.n	80030da <HAL_TIM_PWM_Start+0x9e>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2b08      	cmp	r3, #8
 800307e:	d109      	bne.n	8003094 <HAL_TIM_PWM_Start+0x58>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b01      	cmp	r3, #1
 800308a:	bf14      	ite	ne
 800308c:	2301      	movne	r3, #1
 800308e:	2300      	moveq	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	e022      	b.n	80030da <HAL_TIM_PWM_Start+0x9e>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	2b0c      	cmp	r3, #12
 8003098:	d109      	bne.n	80030ae <HAL_TIM_PWM_Start+0x72>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	bf14      	ite	ne
 80030a6:	2301      	movne	r3, #1
 80030a8:	2300      	moveq	r3, #0
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	e015      	b.n	80030da <HAL_TIM_PWM_Start+0x9e>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b10      	cmp	r3, #16
 80030b2:	d109      	bne.n	80030c8 <HAL_TIM_PWM_Start+0x8c>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b01      	cmp	r3, #1
 80030be:	bf14      	ite	ne
 80030c0:	2301      	movne	r3, #1
 80030c2:	2300      	moveq	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	e008      	b.n	80030da <HAL_TIM_PWM_Start+0x9e>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	bf14      	ite	ne
 80030d4:	2301      	movne	r3, #1
 80030d6:	2300      	moveq	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e083      	b.n	80031ea <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d104      	bne.n	80030f2 <HAL_TIM_PWM_Start+0xb6>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030f0:	e023      	b.n	800313a <HAL_TIM_PWM_Start+0xfe>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	d104      	bne.n	8003102 <HAL_TIM_PWM_Start+0xc6>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003100:	e01b      	b.n	800313a <HAL_TIM_PWM_Start+0xfe>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	2b08      	cmp	r3, #8
 8003106:	d104      	bne.n	8003112 <HAL_TIM_PWM_Start+0xd6>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003110:	e013      	b.n	800313a <HAL_TIM_PWM_Start+0xfe>
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	2b0c      	cmp	r3, #12
 8003116:	d104      	bne.n	8003122 <HAL_TIM_PWM_Start+0xe6>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2202      	movs	r2, #2
 800311c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003120:	e00b      	b.n	800313a <HAL_TIM_PWM_Start+0xfe>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2b10      	cmp	r3, #16
 8003126:	d104      	bne.n	8003132 <HAL_TIM_PWM_Start+0xf6>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003130:	e003      	b.n	800313a <HAL_TIM_PWM_Start+0xfe>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2202      	movs	r2, #2
 8003136:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2201      	movs	r2, #1
 8003140:	6839      	ldr	r1, [r7, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f000 fdec 	bl	8003d20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a29      	ldr	r2, [pc, #164]	@ (80031f4 <HAL_TIM_PWM_Start+0x1b8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d00e      	beq.n	8003170 <HAL_TIM_PWM_Start+0x134>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a28      	ldr	r2, [pc, #160]	@ (80031f8 <HAL_TIM_PWM_Start+0x1bc>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d009      	beq.n	8003170 <HAL_TIM_PWM_Start+0x134>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a26      	ldr	r2, [pc, #152]	@ (80031fc <HAL_TIM_PWM_Start+0x1c0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d004      	beq.n	8003170 <HAL_TIM_PWM_Start+0x134>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a25      	ldr	r2, [pc, #148]	@ (8003200 <HAL_TIM_PWM_Start+0x1c4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d101      	bne.n	8003174 <HAL_TIM_PWM_Start+0x138>
 8003170:	2301      	movs	r3, #1
 8003172:	e000      	b.n	8003176 <HAL_TIM_PWM_Start+0x13a>
 8003174:	2300      	movs	r3, #0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d007      	beq.n	800318a <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003188:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a19      	ldr	r2, [pc, #100]	@ (80031f4 <HAL_TIM_PWM_Start+0x1b8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d009      	beq.n	80031a8 <HAL_TIM_PWM_Start+0x16c>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800319c:	d004      	beq.n	80031a8 <HAL_TIM_PWM_Start+0x16c>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a15      	ldr	r2, [pc, #84]	@ (80031f8 <HAL_TIM_PWM_Start+0x1bc>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d115      	bne.n	80031d4 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	4b15      	ldr	r3, [pc, #84]	@ (8003204 <HAL_TIM_PWM_Start+0x1c8>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2b06      	cmp	r3, #6
 80031b8:	d015      	beq.n	80031e6 <HAL_TIM_PWM_Start+0x1aa>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031c0:	d011      	beq.n	80031e6 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f042 0201 	orr.w	r2, r2, #1
 80031d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031d2:	e008      	b.n	80031e6 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	e000      	b.n	80031e8 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40012c00 	.word	0x40012c00
 80031f8:	40014000 	.word	0x40014000
 80031fc:	40014400 	.word	0x40014400
 8003200:	40014800 	.word	0x40014800
 8003204:	00010007 	.word	0x00010007

08003208 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003214:	2300      	movs	r3, #0
 8003216:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800321e:	2b01      	cmp	r3, #1
 8003220:	d101      	bne.n	8003226 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003222:	2302      	movs	r3, #2
 8003224:	e0ff      	b.n	8003426 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b14      	cmp	r3, #20
 8003232:	f200 80f0 	bhi.w	8003416 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003236:	a201      	add	r2, pc, #4	@ (adr r2, 800323c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323c:	08003291 	.word	0x08003291
 8003240:	08003417 	.word	0x08003417
 8003244:	08003417 	.word	0x08003417
 8003248:	08003417 	.word	0x08003417
 800324c:	080032d1 	.word	0x080032d1
 8003250:	08003417 	.word	0x08003417
 8003254:	08003417 	.word	0x08003417
 8003258:	08003417 	.word	0x08003417
 800325c:	08003313 	.word	0x08003313
 8003260:	08003417 	.word	0x08003417
 8003264:	08003417 	.word	0x08003417
 8003268:	08003417 	.word	0x08003417
 800326c:	08003353 	.word	0x08003353
 8003270:	08003417 	.word	0x08003417
 8003274:	08003417 	.word	0x08003417
 8003278:	08003417 	.word	0x08003417
 800327c:	08003395 	.word	0x08003395
 8003280:	08003417 	.word	0x08003417
 8003284:	08003417 	.word	0x08003417
 8003288:	08003417 	.word	0x08003417
 800328c:	080033d5 	.word	0x080033d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68b9      	ldr	r1, [r7, #8]
 8003296:	4618      	mov	r0, r3
 8003298:	f000 fa02 	bl	80036a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	699a      	ldr	r2, [r3, #24]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0208 	orr.w	r2, r2, #8
 80032aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699a      	ldr	r2, [r3, #24]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0204 	bic.w	r2, r2, #4
 80032ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6999      	ldr	r1, [r3, #24]
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	691a      	ldr	r2, [r3, #16]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	619a      	str	r2, [r3, #24]
      break;
 80032ce:	e0a5      	b.n	800341c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68b9      	ldr	r1, [r7, #8]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fa68 	bl	80037ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699a      	ldr	r2, [r3, #24]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	699a      	ldr	r2, [r3, #24]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6999      	ldr	r1, [r3, #24]
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	021a      	lsls	r2, r3, #8
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	619a      	str	r2, [r3, #24]
      break;
 8003310:	e084      	b.n	800341c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68b9      	ldr	r1, [r7, #8]
 8003318:	4618      	mov	r0, r3
 800331a:	f000 fac7 	bl	80038ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	69da      	ldr	r2, [r3, #28]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f042 0208 	orr.w	r2, r2, #8
 800332c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	69da      	ldr	r2, [r3, #28]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0204 	bic.w	r2, r2, #4
 800333c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	69d9      	ldr	r1, [r3, #28]
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	61da      	str	r2, [r3, #28]
      break;
 8003350:	e064      	b.n	800341c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68b9      	ldr	r1, [r7, #8]
 8003358:	4618      	mov	r0, r3
 800335a:	f000 fb25 	bl	80039a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	69da      	ldr	r2, [r3, #28]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800336c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	69da      	ldr	r2, [r3, #28]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800337c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	69d9      	ldr	r1, [r3, #28]
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	021a      	lsls	r2, r3, #8
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	61da      	str	r2, [r3, #28]
      break;
 8003392:	e043      	b.n	800341c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68b9      	ldr	r1, [r7, #8]
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fb68 	bl	8003a70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0208 	orr.w	r2, r2, #8
 80033ae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0204 	bic.w	r2, r2, #4
 80033be:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	691a      	ldr	r2, [r3, #16]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80033d2:	e023      	b.n	800341c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68b9      	ldr	r1, [r7, #8]
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 fba6 	bl	8003b2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033ee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033fe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	021a      	lsls	r2, r3, #8
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003414:	e002      	b.n	800341c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	75fb      	strb	r3, [r7, #23]
      break;
 800341a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003424:	7dfb      	ldrb	r3, [r7, #23]
}
 8003426:	4618      	mov	r0, r3
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop

08003430 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <HAL_TIM_ConfigClockSource+0x1c>
 8003448:	2302      	movs	r3, #2
 800344a:	e0b6      	b.n	80035ba <HAL_TIM_ConfigClockSource+0x18a>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800346a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800346e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003476:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003488:	d03e      	beq.n	8003508 <HAL_TIM_ConfigClockSource+0xd8>
 800348a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800348e:	f200 8087 	bhi.w	80035a0 <HAL_TIM_ConfigClockSource+0x170>
 8003492:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003496:	f000 8086 	beq.w	80035a6 <HAL_TIM_ConfigClockSource+0x176>
 800349a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800349e:	d87f      	bhi.n	80035a0 <HAL_TIM_ConfigClockSource+0x170>
 80034a0:	2b70      	cmp	r3, #112	@ 0x70
 80034a2:	d01a      	beq.n	80034da <HAL_TIM_ConfigClockSource+0xaa>
 80034a4:	2b70      	cmp	r3, #112	@ 0x70
 80034a6:	d87b      	bhi.n	80035a0 <HAL_TIM_ConfigClockSource+0x170>
 80034a8:	2b60      	cmp	r3, #96	@ 0x60
 80034aa:	d050      	beq.n	800354e <HAL_TIM_ConfigClockSource+0x11e>
 80034ac:	2b60      	cmp	r3, #96	@ 0x60
 80034ae:	d877      	bhi.n	80035a0 <HAL_TIM_ConfigClockSource+0x170>
 80034b0:	2b50      	cmp	r3, #80	@ 0x50
 80034b2:	d03c      	beq.n	800352e <HAL_TIM_ConfigClockSource+0xfe>
 80034b4:	2b50      	cmp	r3, #80	@ 0x50
 80034b6:	d873      	bhi.n	80035a0 <HAL_TIM_ConfigClockSource+0x170>
 80034b8:	2b40      	cmp	r3, #64	@ 0x40
 80034ba:	d058      	beq.n	800356e <HAL_TIM_ConfigClockSource+0x13e>
 80034bc:	2b40      	cmp	r3, #64	@ 0x40
 80034be:	d86f      	bhi.n	80035a0 <HAL_TIM_ConfigClockSource+0x170>
 80034c0:	2b30      	cmp	r3, #48	@ 0x30
 80034c2:	d064      	beq.n	800358e <HAL_TIM_ConfigClockSource+0x15e>
 80034c4:	2b30      	cmp	r3, #48	@ 0x30
 80034c6:	d86b      	bhi.n	80035a0 <HAL_TIM_ConfigClockSource+0x170>
 80034c8:	2b20      	cmp	r3, #32
 80034ca:	d060      	beq.n	800358e <HAL_TIM_ConfigClockSource+0x15e>
 80034cc:	2b20      	cmp	r3, #32
 80034ce:	d867      	bhi.n	80035a0 <HAL_TIM_ConfigClockSource+0x170>
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d05c      	beq.n	800358e <HAL_TIM_ConfigClockSource+0x15e>
 80034d4:	2b10      	cmp	r3, #16
 80034d6:	d05a      	beq.n	800358e <HAL_TIM_ConfigClockSource+0x15e>
 80034d8:	e062      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034ea:	f000 fbf9 	bl	8003ce0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80034fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	609a      	str	r2, [r3, #8]
      break;
 8003506:	e04f      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003518:	f000 fbe2 	bl	8003ce0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689a      	ldr	r2, [r3, #8]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800352a:	609a      	str	r2, [r3, #8]
      break;
 800352c:	e03c      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800353a:	461a      	mov	r2, r3
 800353c:	f000 fb56 	bl	8003bec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2150      	movs	r1, #80	@ 0x50
 8003546:	4618      	mov	r0, r3
 8003548:	f000 fbaf 	bl	8003caa <TIM_ITRx_SetConfig>
      break;
 800354c:	e02c      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800355a:	461a      	mov	r2, r3
 800355c:	f000 fb75 	bl	8003c4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2160      	movs	r1, #96	@ 0x60
 8003566:	4618      	mov	r0, r3
 8003568:	f000 fb9f 	bl	8003caa <TIM_ITRx_SetConfig>
      break;
 800356c:	e01c      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800357a:	461a      	mov	r2, r3
 800357c:	f000 fb36 	bl	8003bec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2140      	movs	r1, #64	@ 0x40
 8003586:	4618      	mov	r0, r3
 8003588:	f000 fb8f 	bl	8003caa <TIM_ITRx_SetConfig>
      break;
 800358c:	e00c      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4619      	mov	r1, r3
 8003598:	4610      	mov	r0, r2
 800359a:	f000 fb86 	bl	8003caa <TIM_ITRx_SetConfig>
      break;
 800359e:	e003      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
      break;
 80035a4:	e000      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80035a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80035b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a2e      	ldr	r2, [pc, #184]	@ (8003690 <TIM_Base_SetConfig+0xcc>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d003      	beq.n	80035e4 <TIM_Base_SetConfig+0x20>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035e2:	d108      	bne.n	80035f6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a25      	ldr	r2, [pc, #148]	@ (8003690 <TIM_Base_SetConfig+0xcc>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d00f      	beq.n	800361e <TIM_Base_SetConfig+0x5a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003604:	d00b      	beq.n	800361e <TIM_Base_SetConfig+0x5a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a22      	ldr	r2, [pc, #136]	@ (8003694 <TIM_Base_SetConfig+0xd0>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d007      	beq.n	800361e <TIM_Base_SetConfig+0x5a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a21      	ldr	r2, [pc, #132]	@ (8003698 <TIM_Base_SetConfig+0xd4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d003      	beq.n	800361e <TIM_Base_SetConfig+0x5a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a20      	ldr	r2, [pc, #128]	@ (800369c <TIM_Base_SetConfig+0xd8>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d108      	bne.n	8003630 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003624:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	4313      	orrs	r3, r2
 800362e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	4313      	orrs	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a0e      	ldr	r2, [pc, #56]	@ (8003690 <TIM_Base_SetConfig+0xcc>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d00b      	beq.n	8003674 <TIM_Base_SetConfig+0xb0>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a0d      	ldr	r2, [pc, #52]	@ (8003694 <TIM_Base_SetConfig+0xd0>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d007      	beq.n	8003674 <TIM_Base_SetConfig+0xb0>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a0c      	ldr	r2, [pc, #48]	@ (8003698 <TIM_Base_SetConfig+0xd4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d003      	beq.n	8003674 <TIM_Base_SetConfig+0xb0>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a0b      	ldr	r2, [pc, #44]	@ (800369c <TIM_Base_SetConfig+0xd8>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d103      	bne.n	800367c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	691a      	ldr	r2, [r3, #16]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	615a      	str	r2, [r3, #20]
}
 8003682:	bf00      	nop
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	40012c00 	.word	0x40012c00
 8003694:	40014000 	.word	0x40014000
 8003698:	40014400 	.word	0x40014400
 800369c:	40014800 	.word	0x40014800

080036a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	f023 0201 	bic.w	r2, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f023 0303 	bic.w	r3, r3, #3
 80036da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f023 0302 	bic.w	r3, r3, #2
 80036ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a28      	ldr	r2, [pc, #160]	@ (800379c <TIM_OC1_SetConfig+0xfc>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d00b      	beq.n	8003718 <TIM_OC1_SetConfig+0x78>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a27      	ldr	r2, [pc, #156]	@ (80037a0 <TIM_OC1_SetConfig+0x100>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d007      	beq.n	8003718 <TIM_OC1_SetConfig+0x78>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a26      	ldr	r2, [pc, #152]	@ (80037a4 <TIM_OC1_SetConfig+0x104>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d003      	beq.n	8003718 <TIM_OC1_SetConfig+0x78>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a25      	ldr	r2, [pc, #148]	@ (80037a8 <TIM_OC1_SetConfig+0x108>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d10c      	bne.n	8003732 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f023 0308 	bic.w	r3, r3, #8
 800371e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	4313      	orrs	r3, r2
 8003728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f023 0304 	bic.w	r3, r3, #4
 8003730:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a19      	ldr	r2, [pc, #100]	@ (800379c <TIM_OC1_SetConfig+0xfc>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d00b      	beq.n	8003752 <TIM_OC1_SetConfig+0xb2>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a18      	ldr	r2, [pc, #96]	@ (80037a0 <TIM_OC1_SetConfig+0x100>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d007      	beq.n	8003752 <TIM_OC1_SetConfig+0xb2>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a17      	ldr	r2, [pc, #92]	@ (80037a4 <TIM_OC1_SetConfig+0x104>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d003      	beq.n	8003752 <TIM_OC1_SetConfig+0xb2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a16      	ldr	r2, [pc, #88]	@ (80037a8 <TIM_OC1_SetConfig+0x108>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d111      	bne.n	8003776 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	4313      	orrs	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4313      	orrs	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	621a      	str	r2, [r3, #32]
}
 8003790:	bf00      	nop
 8003792:	371c      	adds	r7, #28
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	40012c00 	.word	0x40012c00
 80037a0:	40014000 	.word	0x40014000
 80037a4:	40014400 	.word	0x40014400
 80037a8:	40014800 	.word	0x40014800

080037ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	f023 0210 	bic.w	r2, r3, #16
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	021b      	lsls	r3, r3, #8
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	f023 0320 	bic.w	r3, r3, #32
 80037fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	4313      	orrs	r3, r2
 8003806:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a24      	ldr	r2, [pc, #144]	@ (800389c <TIM_OC2_SetConfig+0xf0>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d10d      	bne.n	800382c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003816:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	4313      	orrs	r3, r2
 8003822:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800382a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a1b      	ldr	r2, [pc, #108]	@ (800389c <TIM_OC2_SetConfig+0xf0>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d00b      	beq.n	800384c <TIM_OC2_SetConfig+0xa0>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a1a      	ldr	r2, [pc, #104]	@ (80038a0 <TIM_OC2_SetConfig+0xf4>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d007      	beq.n	800384c <TIM_OC2_SetConfig+0xa0>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a19      	ldr	r2, [pc, #100]	@ (80038a4 <TIM_OC2_SetConfig+0xf8>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d003      	beq.n	800384c <TIM_OC2_SetConfig+0xa0>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a18      	ldr	r2, [pc, #96]	@ (80038a8 <TIM_OC2_SetConfig+0xfc>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d113      	bne.n	8003874 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003852:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800385a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4313      	orrs	r3, r2
 8003866:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	621a      	str	r2, [r3, #32]
}
 800388e:	bf00      	nop
 8003890:	371c      	adds	r7, #28
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40012c00 	.word	0x40012c00
 80038a0:	40014000 	.word	0x40014000
 80038a4:	40014400 	.word	0x40014400
 80038a8:	40014800 	.word	0x40014800

080038ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b087      	sub	sp, #28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f023 0303 	bic.w	r3, r3, #3
 80038e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	021b      	lsls	r3, r3, #8
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	4313      	orrs	r3, r2
 8003904:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a23      	ldr	r2, [pc, #140]	@ (8003998 <TIM_OC3_SetConfig+0xec>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d10d      	bne.n	800392a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003914:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	021b      	lsls	r3, r3, #8
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	4313      	orrs	r3, r2
 8003920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003928:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a1a      	ldr	r2, [pc, #104]	@ (8003998 <TIM_OC3_SetConfig+0xec>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00b      	beq.n	800394a <TIM_OC3_SetConfig+0x9e>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a19      	ldr	r2, [pc, #100]	@ (800399c <TIM_OC3_SetConfig+0xf0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d007      	beq.n	800394a <TIM_OC3_SetConfig+0x9e>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a18      	ldr	r2, [pc, #96]	@ (80039a0 <TIM_OC3_SetConfig+0xf4>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d003      	beq.n	800394a <TIM_OC3_SetConfig+0x9e>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a17      	ldr	r2, [pc, #92]	@ (80039a4 <TIM_OC3_SetConfig+0xf8>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d113      	bne.n	8003972 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003950:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003958:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	4313      	orrs	r3, r2
 8003964:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	4313      	orrs	r3, r2
 8003970:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	621a      	str	r2, [r3, #32]
}
 800398c:	bf00      	nop
 800398e:	371c      	adds	r7, #28
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	40012c00 	.word	0x40012c00
 800399c:	40014000 	.word	0x40014000
 80039a0:	40014400 	.word	0x40014400
 80039a4:	40014800 	.word	0x40014800

080039a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	021b      	lsls	r3, r3, #8
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	031b      	lsls	r3, r3, #12
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a16      	ldr	r2, [pc, #88]	@ (8003a60 <TIM_OC4_SetConfig+0xb8>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d00b      	beq.n	8003a24 <TIM_OC4_SetConfig+0x7c>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a15      	ldr	r2, [pc, #84]	@ (8003a64 <TIM_OC4_SetConfig+0xbc>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d007      	beq.n	8003a24 <TIM_OC4_SetConfig+0x7c>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a14      	ldr	r2, [pc, #80]	@ (8003a68 <TIM_OC4_SetConfig+0xc0>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d003      	beq.n	8003a24 <TIM_OC4_SetConfig+0x7c>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a13      	ldr	r2, [pc, #76]	@ (8003a6c <TIM_OC4_SetConfig+0xc4>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d109      	bne.n	8003a38 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	019b      	lsls	r3, r3, #6
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	621a      	str	r2, [r3, #32]
}
 8003a52:	bf00      	nop
 8003a54:	371c      	adds	r7, #28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	40012c00 	.word	0x40012c00
 8003a64:	40014000 	.word	0x40014000
 8003a68:	40014400 	.word	0x40014400
 8003a6c:	40014800 	.word	0x40014800

08003a70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b087      	sub	sp, #28
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003ab4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	041b      	lsls	r3, r3, #16
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a15      	ldr	r2, [pc, #84]	@ (8003b1c <TIM_OC5_SetConfig+0xac>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d00b      	beq.n	8003ae2 <TIM_OC5_SetConfig+0x72>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a14      	ldr	r2, [pc, #80]	@ (8003b20 <TIM_OC5_SetConfig+0xb0>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d007      	beq.n	8003ae2 <TIM_OC5_SetConfig+0x72>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a13      	ldr	r2, [pc, #76]	@ (8003b24 <TIM_OC5_SetConfig+0xb4>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d003      	beq.n	8003ae2 <TIM_OC5_SetConfig+0x72>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a12      	ldr	r2, [pc, #72]	@ (8003b28 <TIM_OC5_SetConfig+0xb8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d109      	bne.n	8003af6 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ae8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	021b      	lsls	r3, r3, #8
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	621a      	str	r2, [r3, #32]
}
 8003b10:	bf00      	nop
 8003b12:	371c      	adds	r7, #28
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	40012c00 	.word	0x40012c00
 8003b20:	40014000 	.word	0x40014000
 8003b24:	40014400 	.word	0x40014400
 8003b28:	40014800 	.word	0x40014800

08003b2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	021b      	lsls	r3, r3, #8
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003b72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	051b      	lsls	r3, r3, #20
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a16      	ldr	r2, [pc, #88]	@ (8003bdc <TIM_OC6_SetConfig+0xb0>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d00b      	beq.n	8003ba0 <TIM_OC6_SetConfig+0x74>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a15      	ldr	r2, [pc, #84]	@ (8003be0 <TIM_OC6_SetConfig+0xb4>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d007      	beq.n	8003ba0 <TIM_OC6_SetConfig+0x74>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a14      	ldr	r2, [pc, #80]	@ (8003be4 <TIM_OC6_SetConfig+0xb8>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d003      	beq.n	8003ba0 <TIM_OC6_SetConfig+0x74>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a13      	ldr	r2, [pc, #76]	@ (8003be8 <TIM_OC6_SetConfig+0xbc>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d109      	bne.n	8003bb4 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	029b      	lsls	r3, r3, #10
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	621a      	str	r2, [r3, #32]
}
 8003bce:	bf00      	nop
 8003bd0:	371c      	adds	r7, #28
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	40012c00 	.word	0x40012c00
 8003be0:	40014000 	.word	0x40014000
 8003be4:	40014400 	.word	0x40014400
 8003be8:	40014800 	.word	0x40014800

08003bec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	f023 0201 	bic.w	r2, r3, #1
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f023 030a 	bic.w	r3, r3, #10
 8003c28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	621a      	str	r2, [r3, #32]
}
 8003c3e:	bf00      	nop
 8003c40:	371c      	adds	r7, #28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b087      	sub	sp, #28
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	f023 0210 	bic.w	r2, r3, #16
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	031b      	lsls	r3, r3, #12
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	621a      	str	r2, [r3, #32]
}
 8003c9e:	bf00      	nop
 8003ca0:	371c      	adds	r7, #28
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b085      	sub	sp, #20
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
 8003cb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f043 0307 	orr.w	r3, r3, #7
 8003ccc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	609a      	str	r2, [r3, #8]
}
 8003cd4:	bf00      	nop
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003cfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	021a      	lsls	r2, r3, #8
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	431a      	orrs	r2, r3
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	609a      	str	r2, [r3, #8]
}
 8003d14:	bf00      	nop
 8003d16:	371c      	adds	r7, #28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f003 031f 	and.w	r3, r3, #31
 8003d32:	2201      	movs	r2, #1
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a1a      	ldr	r2, [r3, #32]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	43db      	mvns	r3, r3
 8003d42:	401a      	ands	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6a1a      	ldr	r2, [r3, #32]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	f003 031f 	and.w	r3, r3, #31
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	fa01 f303 	lsl.w	r3, r1, r3
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	621a      	str	r2, [r3, #32]
}
 8003d5e:	bf00      	nop
 8003d60:	371c      	adds	r7, #28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
	...

08003d6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d101      	bne.n	8003d84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d80:	2302      	movs	r3, #2
 8003d82:	e04f      	b.n	8003e24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2202      	movs	r2, #2
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a21      	ldr	r2, [pc, #132]	@ (8003e30 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d108      	bne.n	8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003db4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a14      	ldr	r2, [pc, #80]	@ (8003e30 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d009      	beq.n	8003df8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dec:	d004      	beq.n	8003df8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a10      	ldr	r2, [pc, #64]	@ (8003e34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d10c      	bne.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dfe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	40012c00 	.word	0x40012c00
 8003e34:	40014000 	.word	0x40014000

08003e38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d101      	bne.n	8003e54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e50:	2302      	movs	r3, #2
 8003e52:	e060      	b.n	8003f16 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	041b      	lsls	r3, r3, #16
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a14      	ldr	r2, [pc, #80]	@ (8003f24 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d115      	bne.n	8003f04 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee2:	051b      	lsls	r3, r3, #20
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	40012c00 	.word	0x40012c00

08003f28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e040      	b.n	8003fbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d106      	bne.n	8003f50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7fc fef8 	bl	8000d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2224      	movs	r2, #36	@ 0x24
 8003f54:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0201 	bic.w	r2, r2, #1
 8003f64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fc40 	bl	80047ec <UART_SetConfig>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d101      	bne.n	8003f76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e022      	b.n	8003fbc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d002      	beq.n	8003f84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 fd6a 	bl	8004a58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 0201 	orr.w	r2, r2, #1
 8003fb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 fdf1 	bl	8004b9c <UART_CheckIdleState>
 8003fba:	4603      	mov	r3, r0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b08a      	sub	sp, #40	@ 0x28
 8003fc8:	af02      	add	r7, sp, #8
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	603b      	str	r3, [r7, #0]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fda:	2b20      	cmp	r3, #32
 8003fdc:	f040 80b6 	bne.w	800414c <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d002      	beq.n	8003fec <HAL_UART_Receive+0x28>
 8003fe6:	88fb      	ldrh	r3, [r7, #6]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e0ae      	b.n	800414e <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2222      	movs	r2, #34	@ 0x22
 8003ffc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004006:	f7fc fff9 	bl	8000ffc <HAL_GetTick>
 800400a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	88fa      	ldrh	r2, [r7, #6]
 8004010:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	88fa      	ldrh	r2, [r7, #6]
 8004018:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004024:	d10e      	bne.n	8004044 <HAL_UART_Receive+0x80>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d105      	bne.n	800403a <HAL_UART_Receive+0x76>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004034:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004038:	e02d      	b.n	8004096 <HAL_UART_Receive+0xd2>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	22ff      	movs	r2, #255	@ 0xff
 800403e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004042:	e028      	b.n	8004096 <HAL_UART_Receive+0xd2>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10d      	bne.n	8004068 <HAL_UART_Receive+0xa4>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d104      	bne.n	800405e <HAL_UART_Receive+0x9a>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	22ff      	movs	r2, #255	@ 0xff
 8004058:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800405c:	e01b      	b.n	8004096 <HAL_UART_Receive+0xd2>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	227f      	movs	r2, #127	@ 0x7f
 8004062:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004066:	e016      	b.n	8004096 <HAL_UART_Receive+0xd2>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004070:	d10d      	bne.n	800408e <HAL_UART_Receive+0xca>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d104      	bne.n	8004084 <HAL_UART_Receive+0xc0>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	227f      	movs	r2, #127	@ 0x7f
 800407e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004082:	e008      	b.n	8004096 <HAL_UART_Receive+0xd2>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	223f      	movs	r2, #63	@ 0x3f
 8004088:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800408c:	e003      	b.n	8004096 <HAL_UART_Receive+0xd2>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800409c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040a6:	d108      	bne.n	80040ba <HAL_UART_Receive+0xf6>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d104      	bne.n	80040ba <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80040b0:	2300      	movs	r3, #0
 80040b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	61bb      	str	r3, [r7, #24]
 80040b8:	e003      	b.n	80040c2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040be:	2300      	movs	r3, #0
 80040c0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80040c2:	e037      	b.n	8004134 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	2200      	movs	r2, #0
 80040cc:	2120      	movs	r1, #32
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 fe0c 	bl	8004cec <UART_WaitOnFlagUntilTimeout>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d005      	beq.n	80040e6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2220      	movs	r2, #32
 80040de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e033      	b.n	800414e <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10c      	bne.n	8004106 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	8a7b      	ldrh	r3, [r7, #18]
 80040f6:	4013      	ands	r3, r2
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	3302      	adds	r3, #2
 8004102:	61bb      	str	r3, [r7, #24]
 8004104:	e00d      	b.n	8004122 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800410c:	b29b      	uxth	r3, r3
 800410e:	b2da      	uxtb	r2, r3
 8004110:	8a7b      	ldrh	r3, [r7, #18]
 8004112:	b2db      	uxtb	r3, r3
 8004114:	4013      	ands	r3, r2
 8004116:	b2da      	uxtb	r2, r3
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	3301      	adds	r3, #1
 8004120:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004128:	b29b      	uxth	r3, r3
 800412a:	3b01      	subs	r3, #1
 800412c:	b29a      	uxth	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1c1      	bne.n	80040c4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2220      	movs	r2, #32
 8004144:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8004148:	2300      	movs	r3, #0
 800414a:	e000      	b.n	800414e <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800414c:	2302      	movs	r3, #2
  }
}
 800414e:	4618      	mov	r0, r3
 8004150:	3720      	adds	r7, #32
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b08a      	sub	sp, #40	@ 0x28
 800415a:	af00      	add	r7, sp, #0
 800415c:	60f8      	str	r0, [r7, #12]
 800415e:	60b9      	str	r1, [r7, #8]
 8004160:	4613      	mov	r3, r2
 8004162:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800416a:	2b20      	cmp	r3, #32
 800416c:	d132      	bne.n	80041d4 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d002      	beq.n	800417a <HAL_UART_Receive_IT+0x24>
 8004174:	88fb      	ldrh	r3, [r7, #6]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e02b      	b.n	80041d6 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d018      	beq.n	80041c4 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	e853 3f00 	ldrex	r3, [r3]
 800419e:	613b      	str	r3, [r7, #16]
   return(result);
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80041a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	461a      	mov	r2, r3
 80041ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b0:	623b      	str	r3, [r7, #32]
 80041b2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b4:	69f9      	ldr	r1, [r7, #28]
 80041b6:	6a3a      	ldr	r2, [r7, #32]
 80041b8:	e841 2300 	strex	r3, r2, [r1]
 80041bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1e6      	bne.n	8004192 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80041c4:	88fb      	ldrh	r3, [r7, #6]
 80041c6:	461a      	mov	r2, r3
 80041c8:	68b9      	ldr	r1, [r7, #8]
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 fdf6 	bl	8004dbc <UART_Start_Receive_IT>
 80041d0:	4603      	mov	r3, r0
 80041d2:	e000      	b.n	80041d6 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80041d4:	2302      	movs	r3, #2
  }
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3728      	adds	r7, #40	@ 0x28
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
	...

080041e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b0ba      	sub	sp, #232	@ 0xe8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004206:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800420a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800420e:	4013      	ands	r3, r2
 8004210:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004214:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004218:	2b00      	cmp	r3, #0
 800421a:	d115      	bne.n	8004248 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800421c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004220:	f003 0320 	and.w	r3, r3, #32
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00f      	beq.n	8004248 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800422c:	f003 0320 	and.w	r3, r3, #32
 8004230:	2b00      	cmp	r3, #0
 8004232:	d009      	beq.n	8004248 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 82ab 	beq.w	8004794 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	4798      	blx	r3
      }
      return;
 8004246:	e2a5      	b.n	8004794 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004248:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 8117 	beq.w	8004480 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d106      	bne.n	800426c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800425e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004262:	4b85      	ldr	r3, [pc, #532]	@ (8004478 <HAL_UART_IRQHandler+0x298>)
 8004264:	4013      	ands	r3, r2
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 810a 	beq.w	8004480 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800426c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	d011      	beq.n	800429c <HAL_UART_IRQHandler+0xbc>
 8004278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800427c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00b      	beq.n	800429c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2201      	movs	r2, #1
 800428a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004292:	f043 0201 	orr.w	r2, r3, #1
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800429c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d011      	beq.n	80042cc <HAL_UART_IRQHandler+0xec>
 80042a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00b      	beq.n	80042cc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2202      	movs	r2, #2
 80042ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042c2:	f043 0204 	orr.w	r2, r3, #4
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d011      	beq.n	80042fc <HAL_UART_IRQHandler+0x11c>
 80042d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00b      	beq.n	80042fc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2204      	movs	r2, #4
 80042ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042f2:	f043 0202 	orr.w	r2, r3, #2
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80042fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004300:	f003 0308 	and.w	r3, r3, #8
 8004304:	2b00      	cmp	r3, #0
 8004306:	d017      	beq.n	8004338 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800430c:	f003 0320 	and.w	r3, r3, #32
 8004310:	2b00      	cmp	r3, #0
 8004312:	d105      	bne.n	8004320 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004318:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00b      	beq.n	8004338 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2208      	movs	r2, #8
 8004326:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800432e:	f043 0208 	orr.w	r2, r3, #8
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800433c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004340:	2b00      	cmp	r3, #0
 8004342:	d012      	beq.n	800436a <HAL_UART_IRQHandler+0x18a>
 8004344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004348:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00c      	beq.n	800436a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004358:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004360:	f043 0220 	orr.w	r2, r3, #32
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 8211 	beq.w	8004798 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800437a:	f003 0320 	and.w	r3, r3, #32
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00d      	beq.n	800439e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004386:	f003 0320 	and.w	r3, r3, #32
 800438a:	2b00      	cmp	r3, #0
 800438c:	d007      	beq.n	800439e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043b2:	2b40      	cmp	r3, #64	@ 0x40
 80043b4:	d005      	beq.n	80043c2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80043b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d04f      	beq.n	8004462 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 fdc0 	bl	8004f48 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d2:	2b40      	cmp	r3, #64	@ 0x40
 80043d4:	d141      	bne.n	800445a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	3308      	adds	r3, #8
 80043dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043e4:	e853 3f00 	ldrex	r3, [r3]
 80043e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80043ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	3308      	adds	r3, #8
 80043fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004402:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004406:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800440e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004412:	e841 2300 	strex	r3, r2, [r1]
 8004416:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800441a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1d9      	bne.n	80043d6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004426:	2b00      	cmp	r3, #0
 8004428:	d013      	beq.n	8004452 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800442e:	4a13      	ldr	r2, [pc, #76]	@ (800447c <HAL_UART_IRQHandler+0x29c>)
 8004430:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004436:	4618      	mov	r0, r3
 8004438:	f7fc ff36 	bl	80012a8 <HAL_DMA_Abort_IT>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d017      	beq.n	8004472 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800444c:	4610      	mov	r0, r2
 800444e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004450:	e00f      	b.n	8004472 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f9b4 	bl	80047c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004458:	e00b      	b.n	8004472 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f9b0 	bl	80047c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004460:	e007      	b.n	8004472 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f9ac 	bl	80047c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004470:	e192      	b.n	8004798 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004472:	bf00      	nop
    return;
 8004474:	e190      	b.n	8004798 <HAL_UART_IRQHandler+0x5b8>
 8004476:	bf00      	nop
 8004478:	04000120 	.word	0x04000120
 800447c:	08005011 	.word	0x08005011

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004484:	2b01      	cmp	r3, #1
 8004486:	f040 814b 	bne.w	8004720 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800448a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800448e:	f003 0310 	and.w	r3, r3, #16
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 8144 	beq.w	8004720 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800449c:	f003 0310 	and.w	r3, r3, #16
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 813d 	beq.w	8004720 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2210      	movs	r2, #16
 80044ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b8:	2b40      	cmp	r3, #64	@ 0x40
 80044ba:	f040 80b5 	bne.w	8004628 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044ca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 8164 	beq.w	800479c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80044da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044de:	429a      	cmp	r2, r3
 80044e0:	f080 815c 	bcs.w	800479c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	2b20      	cmp	r3, #32
 80044f6:	f000 8086 	beq.w	8004606 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004502:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004506:	e853 3f00 	ldrex	r3, [r3]
 800450a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800450e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004512:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004516:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	461a      	mov	r2, r3
 8004520:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004524:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004528:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004530:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004534:	e841 2300 	strex	r3, r2, [r1]
 8004538:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800453c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1da      	bne.n	80044fa <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	3308      	adds	r3, #8
 800454a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800454e:	e853 3f00 	ldrex	r3, [r3]
 8004552:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004554:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004556:	f023 0301 	bic.w	r3, r3, #1
 800455a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3308      	adds	r3, #8
 8004564:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004568:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800456c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004570:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004574:	e841 2300 	strex	r3, r2, [r1]
 8004578:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800457a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1e1      	bne.n	8004544 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	3308      	adds	r3, #8
 8004586:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004588:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800458a:	e853 3f00 	ldrex	r3, [r3]
 800458e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004590:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004592:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004596:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	3308      	adds	r3, #8
 80045a0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80045a4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80045a6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80045aa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80045ac:	e841 2300 	strex	r3, r2, [r1]
 80045b0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80045b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1e3      	bne.n	8004580 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2220      	movs	r2, #32
 80045bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045ce:	e853 3f00 	ldrex	r3, [r3]
 80045d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80045d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045d6:	f023 0310 	bic.w	r3, r3, #16
 80045da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	461a      	mov	r2, r3
 80045e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80045e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045ea:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80045ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045f0:	e841 2300 	strex	r3, r2, [r1]
 80045f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80045f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e4      	bne.n	80045c6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004600:	4618      	mov	r0, r3
 8004602:	f7fc fe18 	bl	8001236 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2202      	movs	r2, #2
 800460a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004618:	b29b      	uxth	r3, r3
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	b29b      	uxth	r3, r3
 800461e:	4619      	mov	r1, r3
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f8d7 	bl	80047d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004626:	e0b9      	b.n	800479c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004634:	b29b      	uxth	r3, r3
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004642:	b29b      	uxth	r3, r3
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 80ab 	beq.w	80047a0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800464a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 80a6 	beq.w	80047a0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800465c:	e853 3f00 	ldrex	r3, [r3]
 8004660:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004664:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004668:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	461a      	mov	r2, r3
 8004672:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004676:	647b      	str	r3, [r7, #68]	@ 0x44
 8004678:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800467c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800467e:	e841 2300 	strex	r3, r2, [r1]
 8004682:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1e4      	bne.n	8004654 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	3308      	adds	r3, #8
 8004690:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004694:	e853 3f00 	ldrex	r3, [r3]
 8004698:	623b      	str	r3, [r7, #32]
   return(result);
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	f023 0301 	bic.w	r3, r3, #1
 80046a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	3308      	adds	r3, #8
 80046aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80046ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80046b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046b6:	e841 2300 	strex	r3, r2, [r1]
 80046ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1e3      	bne.n	800468a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2220      	movs	r2, #32
 80046c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	e853 3f00 	ldrex	r3, [r3]
 80046e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f023 0310 	bic.w	r3, r3, #16
 80046ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80046f8:	61fb      	str	r3, [r7, #28]
 80046fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fc:	69b9      	ldr	r1, [r7, #24]
 80046fe:	69fa      	ldr	r2, [r7, #28]
 8004700:	e841 2300 	strex	r3, r2, [r1]
 8004704:	617b      	str	r3, [r7, #20]
   return(result);
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1e4      	bne.n	80046d6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004712:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004716:	4619      	mov	r1, r3
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 f85b 	bl	80047d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800471e:	e03f      	b.n	80047a0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004724:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00e      	beq.n	800474a <HAL_UART_IRQHandler+0x56a>
 800472c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004730:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d008      	beq.n	800474a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004740:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 fe4c 	bl	80053e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004748:	e02d      	b.n	80047a6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800474a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800474e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00e      	beq.n	8004774 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800475a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800475e:	2b00      	cmp	r3, #0
 8004760:	d008      	beq.n	8004774 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004766:	2b00      	cmp	r3, #0
 8004768:	d01c      	beq.n	80047a4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	4798      	blx	r3
    }
    return;
 8004772:	e017      	b.n	80047a4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800477c:	2b00      	cmp	r3, #0
 800477e:	d012      	beq.n	80047a6 <HAL_UART_IRQHandler+0x5c6>
 8004780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00c      	beq.n	80047a6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 fc55 	bl	800503c <UART_EndTransmit_IT>
    return;
 8004792:	e008      	b.n	80047a6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004794:	bf00      	nop
 8004796:	e006      	b.n	80047a6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004798:	bf00      	nop
 800479a:	e004      	b.n	80047a6 <HAL_UART_IRQHandler+0x5c6>
      return;
 800479c:	bf00      	nop
 800479e:	e002      	b.n	80047a6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80047a0:	bf00      	nop
 80047a2:	e000      	b.n	80047a6 <HAL_UART_IRQHandler+0x5c6>
    return;
 80047a4:	bf00      	nop
  }

}
 80047a6:	37e8      	adds	r7, #232	@ 0xe8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	460b      	mov	r3, r1
 80047de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b088      	sub	sp, #32
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047f4:	2300      	movs	r3, #0
 80047f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	4313      	orrs	r3, r2
 800480e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	4b8a      	ldr	r3, [pc, #552]	@ (8004a40 <UART_SetConfig+0x254>)
 8004818:	4013      	ands	r3, r2
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6812      	ldr	r2, [r2, #0]
 800481e:	6979      	ldr	r1, [r7, #20]
 8004820:	430b      	orrs	r3, r1
 8004822:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	4313      	orrs	r3, r2
 8004848:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	430a      	orrs	r2, r1
 800485c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a78      	ldr	r2, [pc, #480]	@ (8004a44 <UART_SetConfig+0x258>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d120      	bne.n	80048aa <UART_SetConfig+0xbe>
 8004868:	4b77      	ldr	r3, [pc, #476]	@ (8004a48 <UART_SetConfig+0x25c>)
 800486a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800486c:	f003 0303 	and.w	r3, r3, #3
 8004870:	2b03      	cmp	r3, #3
 8004872:	d817      	bhi.n	80048a4 <UART_SetConfig+0xb8>
 8004874:	a201      	add	r2, pc, #4	@ (adr r2, 800487c <UART_SetConfig+0x90>)
 8004876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487a:	bf00      	nop
 800487c:	0800488d 	.word	0x0800488d
 8004880:	08004899 	.word	0x08004899
 8004884:	0800489f 	.word	0x0800489f
 8004888:	08004893 	.word	0x08004893
 800488c:	2300      	movs	r3, #0
 800488e:	77fb      	strb	r3, [r7, #31]
 8004890:	e01d      	b.n	80048ce <UART_SetConfig+0xe2>
 8004892:	2302      	movs	r3, #2
 8004894:	77fb      	strb	r3, [r7, #31]
 8004896:	e01a      	b.n	80048ce <UART_SetConfig+0xe2>
 8004898:	2304      	movs	r3, #4
 800489a:	77fb      	strb	r3, [r7, #31]
 800489c:	e017      	b.n	80048ce <UART_SetConfig+0xe2>
 800489e:	2308      	movs	r3, #8
 80048a0:	77fb      	strb	r3, [r7, #31]
 80048a2:	e014      	b.n	80048ce <UART_SetConfig+0xe2>
 80048a4:	2310      	movs	r3, #16
 80048a6:	77fb      	strb	r3, [r7, #31]
 80048a8:	e011      	b.n	80048ce <UART_SetConfig+0xe2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a67      	ldr	r2, [pc, #412]	@ (8004a4c <UART_SetConfig+0x260>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d102      	bne.n	80048ba <UART_SetConfig+0xce>
 80048b4:	2300      	movs	r3, #0
 80048b6:	77fb      	strb	r3, [r7, #31]
 80048b8:	e009      	b.n	80048ce <UART_SetConfig+0xe2>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a64      	ldr	r2, [pc, #400]	@ (8004a50 <UART_SetConfig+0x264>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d102      	bne.n	80048ca <UART_SetConfig+0xde>
 80048c4:	2300      	movs	r3, #0
 80048c6:	77fb      	strb	r3, [r7, #31]
 80048c8:	e001      	b.n	80048ce <UART_SetConfig+0xe2>
 80048ca:	2310      	movs	r3, #16
 80048cc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048d6:	d15a      	bne.n	800498e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80048d8:	7ffb      	ldrb	r3, [r7, #31]
 80048da:	2b08      	cmp	r3, #8
 80048dc:	d827      	bhi.n	800492e <UART_SetConfig+0x142>
 80048de:	a201      	add	r2, pc, #4	@ (adr r2, 80048e4 <UART_SetConfig+0xf8>)
 80048e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e4:	08004909 	.word	0x08004909
 80048e8:	08004911 	.word	0x08004911
 80048ec:	08004919 	.word	0x08004919
 80048f0:	0800492f 	.word	0x0800492f
 80048f4:	0800491f 	.word	0x0800491f
 80048f8:	0800492f 	.word	0x0800492f
 80048fc:	0800492f 	.word	0x0800492f
 8004900:	0800492f 	.word	0x0800492f
 8004904:	08004927 	.word	0x08004927
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004908:	f7fe f8c6 	bl	8002a98 <HAL_RCC_GetPCLK1Freq>
 800490c:	61b8      	str	r0, [r7, #24]
        break;
 800490e:	e013      	b.n	8004938 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004910:	f7fe f8e4 	bl	8002adc <HAL_RCC_GetPCLK2Freq>
 8004914:	61b8      	str	r0, [r7, #24]
        break;
 8004916:	e00f      	b.n	8004938 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004918:	4b4e      	ldr	r3, [pc, #312]	@ (8004a54 <UART_SetConfig+0x268>)
 800491a:	61bb      	str	r3, [r7, #24]
        break;
 800491c:	e00c      	b.n	8004938 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800491e:	f7fe f845 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 8004922:	61b8      	str	r0, [r7, #24]
        break;
 8004924:	e008      	b.n	8004938 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004926:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800492a:	61bb      	str	r3, [r7, #24]
        break;
 800492c:	e004      	b.n	8004938 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800492e:	2300      	movs	r3, #0
 8004930:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	77bb      	strb	r3, [r7, #30]
        break;
 8004936:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d074      	beq.n	8004a28 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	005a      	lsls	r2, r3, #1
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	085b      	lsrs	r3, r3, #1
 8004948:	441a      	add	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004952:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	2b0f      	cmp	r3, #15
 8004958:	d916      	bls.n	8004988 <UART_SetConfig+0x19c>
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004960:	d212      	bcs.n	8004988 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	b29b      	uxth	r3, r3
 8004966:	f023 030f 	bic.w	r3, r3, #15
 800496a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	085b      	lsrs	r3, r3, #1
 8004970:	b29b      	uxth	r3, r3
 8004972:	f003 0307 	and.w	r3, r3, #7
 8004976:	b29a      	uxth	r2, r3
 8004978:	89fb      	ldrh	r3, [r7, #14]
 800497a:	4313      	orrs	r3, r2
 800497c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	89fa      	ldrh	r2, [r7, #14]
 8004984:	60da      	str	r2, [r3, #12]
 8004986:	e04f      	b.n	8004a28 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	77bb      	strb	r3, [r7, #30]
 800498c:	e04c      	b.n	8004a28 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800498e:	7ffb      	ldrb	r3, [r7, #31]
 8004990:	2b08      	cmp	r3, #8
 8004992:	d828      	bhi.n	80049e6 <UART_SetConfig+0x1fa>
 8004994:	a201      	add	r2, pc, #4	@ (adr r2, 800499c <UART_SetConfig+0x1b0>)
 8004996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499a:	bf00      	nop
 800499c:	080049c1 	.word	0x080049c1
 80049a0:	080049c9 	.word	0x080049c9
 80049a4:	080049d1 	.word	0x080049d1
 80049a8:	080049e7 	.word	0x080049e7
 80049ac:	080049d7 	.word	0x080049d7
 80049b0:	080049e7 	.word	0x080049e7
 80049b4:	080049e7 	.word	0x080049e7
 80049b8:	080049e7 	.word	0x080049e7
 80049bc:	080049df 	.word	0x080049df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049c0:	f7fe f86a 	bl	8002a98 <HAL_RCC_GetPCLK1Freq>
 80049c4:	61b8      	str	r0, [r7, #24]
        break;
 80049c6:	e013      	b.n	80049f0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049c8:	f7fe f888 	bl	8002adc <HAL_RCC_GetPCLK2Freq>
 80049cc:	61b8      	str	r0, [r7, #24]
        break;
 80049ce:	e00f      	b.n	80049f0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049d0:	4b20      	ldr	r3, [pc, #128]	@ (8004a54 <UART_SetConfig+0x268>)
 80049d2:	61bb      	str	r3, [r7, #24]
        break;
 80049d4:	e00c      	b.n	80049f0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049d6:	f7fd ffe9 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 80049da:	61b8      	str	r0, [r7, #24]
        break;
 80049dc:	e008      	b.n	80049f0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049e2:	61bb      	str	r3, [r7, #24]
        break;
 80049e4:	e004      	b.n	80049f0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	77bb      	strb	r3, [r7, #30]
        break;
 80049ee:	bf00      	nop
    }

    if (pclk != 0U)
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d018      	beq.n	8004a28 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	085a      	lsrs	r2, r3, #1
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	441a      	add	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	2b0f      	cmp	r3, #15
 8004a0e:	d909      	bls.n	8004a24 <UART_SetConfig+0x238>
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a16:	d205      	bcs.n	8004a24 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	60da      	str	r2, [r3, #12]
 8004a22:	e001      	b.n	8004a28 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004a34:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3720      	adds	r7, #32
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	efff69f3 	.word	0xefff69f3
 8004a44:	40013800 	.word	0x40013800
 8004a48:	40021000 	.word	0x40021000
 8004a4c:	40004400 	.word	0x40004400
 8004a50:	40004800 	.word	0x40004800
 8004a54:	007a1200 	.word	0x007a1200

08004a58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00a      	beq.n	8004a82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00a      	beq.n	8004ac6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aca:	f003 0308 	and.w	r3, r3, #8
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aec:	f003 0310 	and.w	r3, r3, #16
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00a      	beq.n	8004b0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0e:	f003 0320 	and.w	r3, r3, #32
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d01a      	beq.n	8004b6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b56:	d10a      	bne.n	8004b6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00a      	beq.n	8004b90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	605a      	str	r2, [r3, #4]
  }
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b098      	sub	sp, #96	@ 0x60
 8004ba0:	af02      	add	r7, sp, #8
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bac:	f7fc fa26 	bl	8000ffc <HAL_GetTick>
 8004bb0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0308 	and.w	r3, r3, #8
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d12e      	bne.n	8004c1e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bc0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f88c 	bl	8004cec <UART_WaitOnFlagUntilTimeout>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d021      	beq.n	8004c1e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be2:	e853 3f00 	ldrex	r3, [r3]
 8004be6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bee:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bfa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bfe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c00:	e841 2300 	strex	r3, r2, [r1]
 8004c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1e6      	bne.n	8004bda <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e062      	b.n	8004ce4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0304 	and.w	r3, r3, #4
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d149      	bne.n	8004cc0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c34:	2200      	movs	r2, #0
 8004c36:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f856 	bl	8004cec <UART_WaitOnFlagUntilTimeout>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d03c      	beq.n	8004cc0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4e:	e853 3f00 	ldrex	r3, [r3]
 8004c52:	623b      	str	r3, [r7, #32]
   return(result);
 8004c54:	6a3b      	ldr	r3, [r7, #32]
 8004c56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	461a      	mov	r2, r3
 8004c62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c64:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c66:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c6c:	e841 2300 	strex	r3, r2, [r1]
 8004c70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1e6      	bne.n	8004c46 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3308      	adds	r3, #8
 8004c7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	e853 3f00 	ldrex	r3, [r3]
 8004c86:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f023 0301 	bic.w	r3, r3, #1
 8004c8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3308      	adds	r3, #8
 8004c96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c98:	61fa      	str	r2, [r7, #28]
 8004c9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9c:	69b9      	ldr	r1, [r7, #24]
 8004c9e:	69fa      	ldr	r2, [r7, #28]
 8004ca0:	e841 2300 	strex	r3, r2, [r1]
 8004ca4:	617b      	str	r3, [r7, #20]
   return(result);
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1e5      	bne.n	8004c78 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e011      	b.n	8004ce4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3758      	adds	r7, #88	@ 0x58
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	603b      	str	r3, [r7, #0]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cfc:	e049      	b.n	8004d92 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d04:	d045      	beq.n	8004d92 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d06:	f7fc f979 	bl	8000ffc <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d302      	bcc.n	8004d1c <UART_WaitOnFlagUntilTimeout+0x30>
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e048      	b.n	8004db2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0304 	and.w	r3, r3, #4
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d031      	beq.n	8004d92 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69db      	ldr	r3, [r3, #28]
 8004d34:	f003 0308 	and.w	r3, r3, #8
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d110      	bne.n	8004d5e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2208      	movs	r2, #8
 8004d42:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 f8ff 	bl	8004f48 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2208      	movs	r2, #8
 8004d4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e029      	b.n	8004db2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	69db      	ldr	r3, [r3, #28]
 8004d64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d6c:	d111      	bne.n	8004d92 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f000 f8e5 	bl	8004f48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2220      	movs	r2, #32
 8004d82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e00f      	b.n	8004db2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	69da      	ldr	r2, [r3, #28]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	bf0c      	ite	eq
 8004da2:	2301      	moveq	r3, #1
 8004da4:	2300      	movne	r3, #0
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	461a      	mov	r2, r3
 8004daa:	79fb      	ldrb	r3, [r7, #7]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d0a6      	beq.n	8004cfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
	...

08004dbc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b097      	sub	sp, #92	@ 0x5c
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	88fa      	ldrh	r2, [r7, #6]
 8004dd4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	88fa      	ldrh	r2, [r7, #6]
 8004ddc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dee:	d10e      	bne.n	8004e0e <UART_Start_Receive_IT+0x52>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d105      	bne.n	8004e04 <UART_Start_Receive_IT+0x48>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004dfe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e02:	e02d      	b.n	8004e60 <UART_Start_Receive_IT+0xa4>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	22ff      	movs	r2, #255	@ 0xff
 8004e08:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e0c:	e028      	b.n	8004e60 <UART_Start_Receive_IT+0xa4>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10d      	bne.n	8004e32 <UART_Start_Receive_IT+0x76>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d104      	bne.n	8004e28 <UART_Start_Receive_IT+0x6c>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	22ff      	movs	r2, #255	@ 0xff
 8004e22:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e26:	e01b      	b.n	8004e60 <UART_Start_Receive_IT+0xa4>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	227f      	movs	r2, #127	@ 0x7f
 8004e2c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e30:	e016      	b.n	8004e60 <UART_Start_Receive_IT+0xa4>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e3a:	d10d      	bne.n	8004e58 <UART_Start_Receive_IT+0x9c>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d104      	bne.n	8004e4e <UART_Start_Receive_IT+0x92>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	227f      	movs	r2, #127	@ 0x7f
 8004e48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e4c:	e008      	b.n	8004e60 <UART_Start_Receive_IT+0xa4>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	223f      	movs	r2, #63	@ 0x3f
 8004e52:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e56:	e003      	b.n	8004e60 <UART_Start_Receive_IT+0xa4>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2222      	movs	r2, #34	@ 0x22
 8004e6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	3308      	adds	r3, #8
 8004e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e7a:	e853 3f00 	ldrex	r3, [r3]
 8004e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e82:	f043 0301 	orr.w	r3, r3, #1
 8004e86:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	3308      	adds	r3, #8
 8004e8e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004e90:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004e92:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e94:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004e96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e98:	e841 2300 	strex	r3, r2, [r1]
 8004e9c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004e9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1e5      	bne.n	8004e70 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eac:	d107      	bne.n	8004ebe <UART_Start_Receive_IT+0x102>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d103      	bne.n	8004ebe <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4a21      	ldr	r2, [pc, #132]	@ (8004f40 <UART_Start_Receive_IT+0x184>)
 8004eba:	669a      	str	r2, [r3, #104]	@ 0x68
 8004ebc:	e002      	b.n	8004ec4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	4a20      	ldr	r2, [pc, #128]	@ (8004f44 <UART_Start_Receive_IT+0x188>)
 8004ec2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d019      	beq.n	8004f00 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed4:	e853 3f00 	ldrex	r3, [r3]
 8004ed8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004edc:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004ee0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004eea:	637b      	str	r3, [r7, #52]	@ 0x34
 8004eec:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004ef0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ef2:	e841 2300 	strex	r3, r2, [r1]
 8004ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1e6      	bne.n	8004ecc <UART_Start_Receive_IT+0x110>
 8004efe:	e018      	b.n	8004f32 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	e853 3f00 	ldrex	r3, [r3]
 8004f0c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f043 0320 	orr.w	r3, r3, #32
 8004f14:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f1e:	623b      	str	r3, [r7, #32]
 8004f20:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f22:	69f9      	ldr	r1, [r7, #28]
 8004f24:	6a3a      	ldr	r2, [r7, #32]
 8004f26:	e841 2300 	strex	r3, r2, [r1]
 8004f2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1e6      	bne.n	8004f00 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	375c      	adds	r7, #92	@ 0x5c
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	08005239 	.word	0x08005239
 8004f44:	08005091 	.word	0x08005091

08004f48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b095      	sub	sp, #84	@ 0x54
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f58:	e853 3f00 	ldrex	r3, [r3]
 8004f5c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f70:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f72:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f76:	e841 2300 	strex	r3, r2, [r1]
 8004f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1e6      	bne.n	8004f50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	3308      	adds	r3, #8
 8004f88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8a:	6a3b      	ldr	r3, [r7, #32]
 8004f8c:	e853 3f00 	ldrex	r3, [r3]
 8004f90:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	f023 0301 	bic.w	r3, r3, #1
 8004f98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	3308      	adds	r3, #8
 8004fa0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fa2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fa8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004faa:	e841 2300 	strex	r3, r2, [r1]
 8004fae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1e5      	bne.n	8004f82 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d118      	bne.n	8004ff0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	e853 3f00 	ldrex	r3, [r3]
 8004fca:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	f023 0310 	bic.w	r3, r3, #16
 8004fd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	461a      	mov	r2, r3
 8004fda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fdc:	61bb      	str	r3, [r7, #24]
 8004fde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe0:	6979      	ldr	r1, [r7, #20]
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	e841 2300 	strex	r3, r2, [r1]
 8004fe8:	613b      	str	r3, [r7, #16]
   return(result);
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1e6      	bne.n	8004fbe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005004:	bf00      	nop
 8005006:	3754      	adds	r7, #84	@ 0x54
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f7ff fbc6 	bl	80047c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005034:	bf00      	nop
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b088      	sub	sp, #32
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	e853 3f00 	ldrex	r3, [r3]
 8005050:	60bb      	str	r3, [r7, #8]
   return(result);
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005058:	61fb      	str	r3, [r7, #28]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	61bb      	str	r3, [r7, #24]
 8005064:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005066:	6979      	ldr	r1, [r7, #20]
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	e841 2300 	strex	r3, r2, [r1]
 800506e:	613b      	str	r3, [r7, #16]
   return(result);
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1e6      	bne.n	8005044 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2220      	movs	r2, #32
 800507a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7ff fb92 	bl	80047ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005088:	bf00      	nop
 800508a:	3720      	adds	r7, #32
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b09c      	sub	sp, #112	@ 0x70
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800509e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050a8:	2b22      	cmp	r3, #34	@ 0x22
 80050aa:	f040 80b9 	bne.w	8005220 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80050b4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80050b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80050bc:	b2d9      	uxtb	r1, r3
 80050be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050c8:	400a      	ands	r2, r1
 80050ca:	b2d2      	uxtb	r2, r2
 80050cc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80050de:	b29b      	uxth	r3, r3
 80050e0:	3b01      	subs	r3, #1
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f040 809c 	bne.w	8005230 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005100:	e853 3f00 	ldrex	r3, [r3]
 8005104:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005106:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005108:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800510c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	461a      	mov	r2, r3
 8005114:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005116:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005118:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800511c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800511e:	e841 2300 	strex	r3, r2, [r1]
 8005122:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005124:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1e6      	bne.n	80050f8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	3308      	adds	r3, #8
 8005130:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005134:	e853 3f00 	ldrex	r3, [r3]
 8005138:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800513a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800513c:	f023 0301 	bic.w	r3, r3, #1
 8005140:	667b      	str	r3, [r7, #100]	@ 0x64
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	3308      	adds	r3, #8
 8005148:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800514a:	647a      	str	r2, [r7, #68]	@ 0x44
 800514c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005150:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005152:	e841 2300 	strex	r3, r2, [r1]
 8005156:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1e5      	bne.n	800512a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2220      	movs	r2, #32
 8005162:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d018      	beq.n	80051b2 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005188:	e853 3f00 	ldrex	r3, [r3]
 800518c:	623b      	str	r3, [r7, #32]
   return(result);
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005194:	663b      	str	r3, [r7, #96]	@ 0x60
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	461a      	mov	r2, r3
 800519c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800519e:	633b      	str	r3, [r7, #48]	@ 0x30
 80051a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051a6:	e841 2300 	strex	r3, r2, [r1]
 80051aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1e6      	bne.n	8005180 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d12e      	bne.n	8005218 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	e853 3f00 	ldrex	r3, [r3]
 80051cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f023 0310 	bic.w	r3, r3, #16
 80051d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	461a      	mov	r2, r3
 80051dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051de:	61fb      	str	r3, [r7, #28]
 80051e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e2:	69b9      	ldr	r1, [r7, #24]
 80051e4:	69fa      	ldr	r2, [r7, #28]
 80051e6:	e841 2300 	strex	r3, r2, [r1]
 80051ea:	617b      	str	r3, [r7, #20]
   return(result);
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1e6      	bne.n	80051c0 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	f003 0310 	and.w	r3, r3, #16
 80051fc:	2b10      	cmp	r3, #16
 80051fe:	d103      	bne.n	8005208 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2210      	movs	r2, #16
 8005206:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800520e:	4619      	mov	r1, r3
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f7ff fadf 	bl	80047d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005216:	e00b      	b.n	8005230 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f7fb fb69 	bl	80008f0 <HAL_UART_RxCpltCallback>
}
 800521e:	e007      	b.n	8005230 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	699a      	ldr	r2, [r3, #24]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 0208 	orr.w	r2, r2, #8
 800522e:	619a      	str	r2, [r3, #24]
}
 8005230:	bf00      	nop
 8005232:	3770      	adds	r7, #112	@ 0x70
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b09c      	sub	sp, #112	@ 0x70
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005246:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005250:	2b22      	cmp	r3, #34	@ 0x22
 8005252:	f040 80b9 	bne.w	80053c8 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800525c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005264:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005266:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800526a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800526e:	4013      	ands	r3, r2
 8005270:	b29a      	uxth	r2, r3
 8005272:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005274:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800527a:	1c9a      	adds	r2, r3, #2
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005286:	b29b      	uxth	r3, r3
 8005288:	3b01      	subs	r3, #1
 800528a:	b29a      	uxth	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005298:	b29b      	uxth	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	f040 809c 	bne.w	80053d8 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052a8:	e853 3f00 	ldrex	r3, [r3]
 80052ac:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80052ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	461a      	mov	r2, r3
 80052bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052be:	657b      	str	r3, [r7, #84]	@ 0x54
 80052c0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80052c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80052c6:	e841 2300 	strex	r3, r2, [r1]
 80052ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80052cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1e6      	bne.n	80052a0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	3308      	adds	r3, #8
 80052d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052dc:	e853 3f00 	ldrex	r3, [r3]
 80052e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e4:	f023 0301 	bic.w	r3, r3, #1
 80052e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	3308      	adds	r3, #8
 80052f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80052f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80052f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052fa:	e841 2300 	strex	r3, r2, [r1]
 80052fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1e5      	bne.n	80052d2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2220      	movs	r2, #32
 800530a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d018      	beq.n	800535a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532e:	6a3b      	ldr	r3, [r7, #32]
 8005330:	e853 3f00 	ldrex	r3, [r3]
 8005334:	61fb      	str	r3, [r7, #28]
   return(result);
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800533c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	461a      	mov	r2, r3
 8005344:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005346:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005348:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800534c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800534e:	e841 2300 	strex	r3, r2, [r1]
 8005352:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1e6      	bne.n	8005328 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800535e:	2b01      	cmp	r3, #1
 8005360:	d12e      	bne.n	80053c0 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	e853 3f00 	ldrex	r3, [r3]
 8005374:	60bb      	str	r3, [r7, #8]
   return(result);
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	f023 0310 	bic.w	r3, r3, #16
 800537c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	461a      	mov	r2, r3
 8005384:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005386:	61bb      	str	r3, [r7, #24]
 8005388:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538a:	6979      	ldr	r1, [r7, #20]
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	e841 2300 	strex	r3, r2, [r1]
 8005392:	613b      	str	r3, [r7, #16]
   return(result);
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1e6      	bne.n	8005368 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	69db      	ldr	r3, [r3, #28]
 80053a0:	f003 0310 	and.w	r3, r3, #16
 80053a4:	2b10      	cmp	r3, #16
 80053a6:	d103      	bne.n	80053b0 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2210      	movs	r2, #16
 80053ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80053b6:	4619      	mov	r1, r3
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f7ff fa0b 	bl	80047d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053be:	e00b      	b.n	80053d8 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f7fb fa95 	bl	80008f0 <HAL_UART_RxCpltCallback>
}
 80053c6:	e007      	b.n	80053d8 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	699a      	ldr	r2, [r3, #24]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f042 0208 	orr.w	r2, r2, #8
 80053d6:	619a      	str	r2, [r3, #24]
}
 80053d8:	bf00      	nop
 80053da:	3770      	adds	r7, #112	@ 0x70
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <memset>:
 80053f4:	4402      	add	r2, r0
 80053f6:	4603      	mov	r3, r0
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d100      	bne.n	80053fe <memset+0xa>
 80053fc:	4770      	bx	lr
 80053fe:	f803 1b01 	strb.w	r1, [r3], #1
 8005402:	e7f9      	b.n	80053f8 <memset+0x4>

08005404 <__libc_init_array>:
 8005404:	b570      	push	{r4, r5, r6, lr}
 8005406:	4d0d      	ldr	r5, [pc, #52]	@ (800543c <__libc_init_array+0x38>)
 8005408:	4c0d      	ldr	r4, [pc, #52]	@ (8005440 <__libc_init_array+0x3c>)
 800540a:	1b64      	subs	r4, r4, r5
 800540c:	10a4      	asrs	r4, r4, #2
 800540e:	2600      	movs	r6, #0
 8005410:	42a6      	cmp	r6, r4
 8005412:	d109      	bne.n	8005428 <__libc_init_array+0x24>
 8005414:	4d0b      	ldr	r5, [pc, #44]	@ (8005444 <__libc_init_array+0x40>)
 8005416:	4c0c      	ldr	r4, [pc, #48]	@ (8005448 <__libc_init_array+0x44>)
 8005418:	f000 f818 	bl	800544c <_init>
 800541c:	1b64      	subs	r4, r4, r5
 800541e:	10a4      	asrs	r4, r4, #2
 8005420:	2600      	movs	r6, #0
 8005422:	42a6      	cmp	r6, r4
 8005424:	d105      	bne.n	8005432 <__libc_init_array+0x2e>
 8005426:	bd70      	pop	{r4, r5, r6, pc}
 8005428:	f855 3b04 	ldr.w	r3, [r5], #4
 800542c:	4798      	blx	r3
 800542e:	3601      	adds	r6, #1
 8005430:	e7ee      	b.n	8005410 <__libc_init_array+0xc>
 8005432:	f855 3b04 	ldr.w	r3, [r5], #4
 8005436:	4798      	blx	r3
 8005438:	3601      	adds	r6, #1
 800543a:	e7f2      	b.n	8005422 <__libc_init_array+0x1e>
 800543c:	0800549c 	.word	0x0800549c
 8005440:	0800549c 	.word	0x0800549c
 8005444:	0800549c 	.word	0x0800549c
 8005448:	080054a0 	.word	0x080054a0

0800544c <_init>:
 800544c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800544e:	bf00      	nop
 8005450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005452:	bc08      	pop	{r3}
 8005454:	469e      	mov	lr, r3
 8005456:	4770      	bx	lr

08005458 <_fini>:
 8005458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800545a:	bf00      	nop
 800545c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800545e:	bc08      	pop	{r3}
 8005460:	469e      	mov	lr, r3
 8005462:	4770      	bx	lr
