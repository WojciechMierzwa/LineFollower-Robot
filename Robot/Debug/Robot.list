
Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f14  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080070a4  080070a4  000080a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071bc  080071bc  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  080071bc  080071bc  000081bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071c4  080071c4  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071c4  080071c4  000081c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080071c8  080071c8  000081c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080071cc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  2000006c  08007238  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  08007238  00009424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe1f  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000233e  00000000  00000000  00018ebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  0001b200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b2f  00000000  00000000  0001c050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ce84  00000000  00000000  0001cb7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c36  00000000  00000000  00039a03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8350  00000000  00000000  0004b639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f3989  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004660  00000000  00000000  000f39cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000f802c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800708c 	.word	0x0800708c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800708c 	.word	0x0800708c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000882:	f001 faaf 	bl	8001de4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000886:	f000 f99d 	bl	8000bc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088a:	f000 fc19 	bl	80010c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800088e:	f000 fbe7 	bl	8001060 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000892:	f000 fbb5 	bl	8001000 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000896:	f000 f9f7 	bl	8000c88 <MX_TIM1_Init>
  MX_TIM16_Init();
 800089a:	f000 fb11 	bl	8000ec0 <MX_TIM16_Init>
  MX_TIM2_Init();
 800089e:	f000 faab 	bl	8000df8 <MX_TIM2_Init>
  MX_TIM17_Init();
 80008a2:	f000 fb87 	bl	8000fb4 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 80008a6:	48b0      	ldr	r0, [pc, #704]	@ (8000b68 <main+0x2ec>)
 80008a8:	f003 faae 	bl	8003e08 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 80008ac:	2200      	movs	r2, #0
 80008ae:	2102      	movs	r1, #2
 80008b0:	48ae      	ldr	r0, [pc, #696]	@ (8000b6c <main+0x2f0>)
 80008b2:	f001 fe33 	bl	800251c <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80008b6:	2100      	movs	r1, #0
 80008b8:	48ad      	ldr	r0, [pc, #692]	@ (8000b70 <main+0x2f4>)
 80008ba:	f003 fb49 	bl	8003f50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80008be:	2100      	movs	r1, #0
 80008c0:	48a9      	ldr	r0, [pc, #676]	@ (8000b68 <main+0x2ec>)
 80008c2:	f003 fb45 	bl	8003f50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80008c6:	210c      	movs	r1, #12
 80008c8:	48a7      	ldr	r0, [pc, #668]	@ (8000b68 <main+0x2ec>)
 80008ca:	f003 fb41 	bl	8003f50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80008ce:	2100      	movs	r1, #0
 80008d0:	48a8      	ldr	r0, [pc, #672]	@ (8000b74 <main+0x2f8>)
 80008d2:	f003 fb3d 	bl	8003f50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80008d6:	2108      	movs	r1, #8
 80008d8:	48a6      	ldr	r0, [pc, #664]	@ (8000b74 <main+0x2f8>)
 80008da:	f003 fb39 	bl	8003f50 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //set_ang(0, 0);

  uint16_t counter=1;
 80008de:	2301      	movs	r3, #1
 80008e0:	80fb      	strh	r3, [r7, #6]
  uint16_t distance;
  set_ang(450, 0);
 80008e2:	2100      	movs	r1, #0
 80008e4:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 80008e8:	f000 fd02 	bl	80012f0 <set_ang>


  /**/

  srand(time(NULL));
 80008ec:	2000      	movs	r0, #0
 80008ee:	f005 fd05 	bl	80062fc <time>
 80008f2:	4602      	mov	r2, r0
 80008f4:	460b      	mov	r3, r1
 80008f6:	4613      	mov	r3, r2
 80008f8:	4618      	mov	r0, r3
 80008fa:	f005 fbc3 	bl	8006084 <srand>
  {


    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  if(counter>3){
 80008fe:	88fb      	ldrh	r3, [r7, #6]
 8000900:	2b03      	cmp	r3, #3
 8000902:	d901      	bls.n	8000908 <main+0x8c>
	  	  	        	counter=1;
 8000904:	2301      	movs	r3, #1
 8000906:	80fb      	strh	r3, [r7, #6]
	  	  	        }
	  	  if (HAL_GPIO_ReadPin(ButtonExt_GPIO_Port, ButtonExt_Pin) == GPIO_PIN_SET)
 8000908:	2104      	movs	r1, #4
 800090a:	489b      	ldr	r0, [pc, #620]	@ (8000b78 <main+0x2fc>)
 800090c:	f001 fdee 	bl	80024ec <HAL_GPIO_ReadPin>
 8000910:	4603      	mov	r3, r0
 8000912:	2b01      	cmp	r3, #1
 8000914:	d106      	bne.n	8000924 <main+0xa8>
	  	      {
	  	        counter++;
 8000916:	88fb      	ldrh	r3, [r7, #6]
 8000918:	3301      	adds	r3, #1
 800091a:	80fb      	strh	r3, [r7, #6]
	  	        HAL_Delay(500);
 800091c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000920:	f001 fac6 	bl	8001eb0 <HAL_Delay>

	  	      }

	  	  	  display_reset();
 8000924:	f000 feca 	bl	80016bc <display_reset>
	  	      switch (counter)
 8000928:	88fb      	ldrh	r3, [r7, #6]
 800092a:	2b03      	cmp	r3, #3
 800092c:	f000 80c7 	beq.w	8000abe <main+0x242>
 8000930:	2b03      	cmp	r3, #3
 8000932:	dce4      	bgt.n	80008fe <main+0x82>
 8000934:	2b01      	cmp	r3, #1
 8000936:	d003      	beq.n	8000940 <main+0xc4>
 8000938:	2b02      	cmp	r3, #2
 800093a:	f000 80ac 	beq.w	8000a96 <main+0x21a>
 800093e:	e13d      	b.n	8000bbc <main+0x340>
	  	      {
	  	      case 1:
	  	        display_reset();
 8000940:	f000 febc 	bl	80016bc <display_reset>
	  	        display1();
 8000944:	f000 fe5c 	bl	8001600 <display1>
	  	        if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8000948:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800094c:	4887      	ldr	r0, [pc, #540]	@ (8000b6c <main+0x2f0>)
 800094e:	f001 fdcd 	bl	80024ec <HAL_GPIO_ReadPin>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	f040 812c 	bne.w	8000bb2 <main+0x336>
	  	        {
	  	        	//linefollower
	  	        	countdown();
 800095a:	f000 fee1 	bl	8001720 <countdown>
	  	        	while(1){
	  	        		detect_states[0] = HAL_GPIO_ReadPin(DETECT1_GPIO_Port, DETECT1_Pin);
 800095e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000962:	4882      	ldr	r0, [pc, #520]	@ (8000b6c <main+0x2f0>)
 8000964:	f001 fdc2 	bl	80024ec <HAL_GPIO_ReadPin>
 8000968:	4603      	mov	r3, r0
 800096a:	461a      	mov	r2, r3
 800096c:	4b83      	ldr	r3, [pc, #524]	@ (8000b7c <main+0x300>)
 800096e:	701a      	strb	r2, [r3, #0]
	  	        		detect_states[1] = HAL_GPIO_ReadPin(DETECT2_GPIO_Port, DETECT2_Pin);
 8000970:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000974:	487d      	ldr	r0, [pc, #500]	@ (8000b6c <main+0x2f0>)
 8000976:	f001 fdb9 	bl	80024ec <HAL_GPIO_ReadPin>
 800097a:	4603      	mov	r3, r0
 800097c:	461a      	mov	r2, r3
 800097e:	4b7f      	ldr	r3, [pc, #508]	@ (8000b7c <main+0x300>)
 8000980:	705a      	strb	r2, [r3, #1]
	  	        		detect_states[2] = HAL_GPIO_ReadPin(DETECT3_GPIO_Port, DETECT3_Pin);
 8000982:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000986:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800098a:	f001 fdaf 	bl	80024ec <HAL_GPIO_ReadPin>
 800098e:	4603      	mov	r3, r0
 8000990:	461a      	mov	r2, r3
 8000992:	4b7a      	ldr	r3, [pc, #488]	@ (8000b7c <main+0x300>)
 8000994:	709a      	strb	r2, [r3, #2]
	  	        		detect_states[3] = HAL_GPIO_ReadPin(DETECT4_GPIO_Port, DETECT4_Pin);
 8000996:	2180      	movs	r1, #128	@ 0x80
 8000998:	4877      	ldr	r0, [pc, #476]	@ (8000b78 <main+0x2fc>)
 800099a:	f001 fda7 	bl	80024ec <HAL_GPIO_ReadPin>
 800099e:	4603      	mov	r3, r0
 80009a0:	461a      	mov	r2, r3
 80009a2:	4b76      	ldr	r3, [pc, #472]	@ (8000b7c <main+0x300>)
 80009a4:	70da      	strb	r2, [r3, #3]
	  	        		detect_states[4] = HAL_GPIO_ReadPin(DETECT5_GPIO_Port, DETECT5_Pin);
 80009a6:	2104      	movs	r1, #4
 80009a8:	4870      	ldr	r0, [pc, #448]	@ (8000b6c <main+0x2f0>)
 80009aa:	f001 fd9f 	bl	80024ec <HAL_GPIO_ReadPin>
 80009ae:	4603      	mov	r3, r0
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b72      	ldr	r3, [pc, #456]	@ (8000b7c <main+0x300>)
 80009b4:	711a      	strb	r2, [r3, #4]

	  	        		//pomoc dla lini nalezy dodac nowe if i dodac 2 funkcje slightleft slightright(funkjce zwiazane z motor)
	  	        		detect3L=HAL_GPIO_ReadPin(DETECT3L_GPIO_Port, DETECT3L_Pin);
 80009b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009ba:	486f      	ldr	r0, [pc, #444]	@ (8000b78 <main+0x2fc>)
 80009bc:	f001 fd96 	bl	80024ec <HAL_GPIO_ReadPin>
 80009c0:	4603      	mov	r3, r0
 80009c2:	461a      	mov	r2, r3
 80009c4:	4b6e      	ldr	r3, [pc, #440]	@ (8000b80 <main+0x304>)
 80009c6:	701a      	strb	r2, [r3, #0]
	  	        		detect3P=HAL_GPIO_ReadPin(DETECT3P_GPIO_Port, DETECT3P_Pin);
 80009c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009cc:	486a      	ldr	r0, [pc, #424]	@ (8000b78 <main+0x2fc>)
 80009ce:	f001 fd8d 	bl	80024ec <HAL_GPIO_ReadPin>
 80009d2:	4603      	mov	r3, r0
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b6b      	ldr	r3, [pc, #428]	@ (8000b84 <main+0x308>)
 80009d8:	701a      	strb	r2, [r3, #0]


	  	        		if(detect_states[2]==0)
 80009da:	4b68      	ldr	r3, [pc, #416]	@ (8000b7c <main+0x300>)
 80009dc:	789b      	ldrb	r3, [r3, #2]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d105      	bne.n	80009ee <main+0x172>
	  	        		{
	  	        			motor_forward(cycle);
 80009e2:	4b69      	ldr	r3, [pc, #420]	@ (8000b88 <main+0x30c>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 fd46 	bl	8001478 <motor_forward>
 80009ec:	e7b7      	b.n	800095e <main+0xe2>
	  	        		}
	  	        		else{
	  	        			if(detect_states[1]==0 || detect_states[0]==0)
 80009ee:	4b63      	ldr	r3, [pc, #396]	@ (8000b7c <main+0x300>)
 80009f0:	785b      	ldrb	r3, [r3, #1]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d003      	beq.n	80009fe <main+0x182>
 80009f6:	4b61      	ldr	r3, [pc, #388]	@ (8000b7c <main+0x300>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d10a      	bne.n	8000a14 <main+0x198>
	  	        			{
	  	        				motor_left(cycle);
 80009fe:	4b62      	ldr	r3, [pc, #392]	@ (8000b88 <main+0x30c>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 fd60 	bl	80014c8 <motor_left>
	  	        				set_ang(900, 0);
 8000a08:	2100      	movs	r1, #0
 8000a0a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8000a0e:	f000 fc6f 	bl	80012f0 <set_ang>
 8000a12:	e03f      	b.n	8000a94 <main+0x218>
	  	        			}
	  	        			else if(detect_states[3]==0 || detect_states[4]==0){
 8000a14:	4b59      	ldr	r3, [pc, #356]	@ (8000b7c <main+0x300>)
 8000a16:	78db      	ldrb	r3, [r3, #3]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d003      	beq.n	8000a24 <main+0x1a8>
 8000a1c:	4b57      	ldr	r3, [pc, #348]	@ (8000b7c <main+0x300>)
 8000a1e:	791b      	ldrb	r3, [r3, #4]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d109      	bne.n	8000a38 <main+0x1bc>
	  	        				motor_right(cycle);
 8000a24:	4b58      	ldr	r3, [pc, #352]	@ (8000b88 <main+0x30c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 fd79 	bl	8001520 <motor_right>
	  	        				set_ang(0, 0);
 8000a2e:	2100      	movs	r1, #0
 8000a30:	2000      	movs	r0, #0
 8000a32:	f000 fc5d 	bl	80012f0 <set_ang>
 8000a36:	e02d      	b.n	8000a94 <main+0x218>
	  	        			}
	  	        			else if(detect3L==0 && (detect_states[1]==1 &&  detect_states[0]==1)){
 8000a38:	4b51      	ldr	r3, [pc, #324]	@ (8000b80 <main+0x304>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d10d      	bne.n	8000a5c <main+0x1e0>
 8000a40:	4b4e      	ldr	r3, [pc, #312]	@ (8000b7c <main+0x300>)
 8000a42:	785b      	ldrb	r3, [r3, #1]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d109      	bne.n	8000a5c <main+0x1e0>
 8000a48:	4b4c      	ldr	r3, [pc, #304]	@ (8000b7c <main+0x300>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d105      	bne.n	8000a5c <main+0x1e0>
	  	        				motor_slight_left(cycle);
 8000a50:	4b4d      	ldr	r3, [pc, #308]	@ (8000b88 <main+0x30c>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f000 fc8f 	bl	8001378 <motor_slight_left>
 8000a5a:	e01b      	b.n	8000a94 <main+0x218>
	  	        			}
	  	        			else if(detect3P==0 && (detect_states[3]==1 &&  detect_states[4]==1)){
 8000a5c:	4b49      	ldr	r3, [pc, #292]	@ (8000b84 <main+0x308>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d10d      	bne.n	8000a80 <main+0x204>
 8000a64:	4b45      	ldr	r3, [pc, #276]	@ (8000b7c <main+0x300>)
 8000a66:	78db      	ldrb	r3, [r3, #3]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d109      	bne.n	8000a80 <main+0x204>
 8000a6c:	4b43      	ldr	r3, [pc, #268]	@ (8000b7c <main+0x300>)
 8000a6e:	791b      	ldrb	r3, [r3, #4]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d105      	bne.n	8000a80 <main+0x204>
	  	        				motor_slight_right(cycle);
 8000a74:	4b44      	ldr	r3, [pc, #272]	@ (8000b88 <main+0x30c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f000 fcbd 	bl	80013f8 <motor_slight_right>
 8000a7e:	e009      	b.n	8000a94 <main+0x218>
	  	        			}
	  	        			else{
	  	        				motor_backward(cycle);
 8000a80:	4b41      	ldr	r3, [pc, #260]	@ (8000b88 <main+0x30c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 fd77 	bl	8001578 <motor_backward>
	  	        				set_ang(450, 0);
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000a90:	f000 fc2e 	bl	80012f0 <set_ang>
	  	        		detect_states[0] = HAL_GPIO_ReadPin(DETECT1_GPIO_Port, DETECT1_Pin);
 8000a94:	e763      	b.n	800095e <main+0xe2>
	  	        	}
	  	        }
	  	        break;
	  	      case 2:
	  	    	  //sterowanie bluetoothem
	  	    	display_reset();
 8000a96:	f000 fe11 	bl	80016bc <display_reset>
	  	    	display2();
 8000a9a:	f000 fdc1 	bl	8001620 <display2>
	  	    	if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET){
 8000a9e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aa2:	4832      	ldr	r0, [pc, #200]	@ (8000b6c <main+0x2f0>)
 8000aa4:	f001 fd22 	bl	80024ec <HAL_GPIO_ReadPin>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	f040 8083 	bne.w	8000bb6 <main+0x33a>
	  	    		countdown();
 8000ab0:	f000 fe36 	bl	8001720 <countdown>
	  	    		display_reset();
 8000ab4:	f000 fe02 	bl	80016bc <display_reset>
	  	    		while(1){
	  	    			bluetooth();
 8000ab8:	f000 fbbe 	bl	8001238 <bluetooth>
 8000abc:	e7fc      	b.n	8000ab8 <main+0x23c>
	  	    		}
	  	    	}
	  	        break;
	  	      case 3:
	  	    	//sterowanie po kablu
	  	    	display_reset();
 8000abe:	f000 fdfd 	bl	80016bc <display_reset>
	  	    	display3();
 8000ac2:	f000 fdd5 	bl	8001670 <display3>
	  	    	if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET){
 8000ac6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aca:	4828      	ldr	r0, [pc, #160]	@ (8000b6c <main+0x2f0>)
 8000acc:	f001 fd0e 	bl	80024ec <HAL_GPIO_ReadPin>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d171      	bne.n	8000bba <main+0x33e>
	  	    		countdown();
 8000ad6:	f000 fe23 	bl	8001720 <countdown>
	  	    		display_reset();
 8000ada:	f000 fdef 	bl	80016bc <display_reset>
	  	    		while(1){
	  	    			if(HAL_UART_Receive(&huart2, &receivedChar, 1, 0) == HAL_OK) {
 8000ade:	2300      	movs	r3, #0
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	492a      	ldr	r1, [pc, #168]	@ (8000b8c <main+0x310>)
 8000ae4:	482a      	ldr	r0, [pc, #168]	@ (8000b90 <main+0x314>)
 8000ae6:	f004 fb67 	bl	80051b8 <HAL_UART_Receive>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d1f6      	bne.n	8000ade <main+0x262>
	  	    				if (receivedChar == 's') {
 8000af0:	4b26      	ldr	r3, [pc, #152]	@ (8000b8c <main+0x310>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b73      	cmp	r3, #115	@ 0x73
 8000af6:	d10a      	bne.n	8000b0e <main+0x292>
	  	    					set_ang(450, 0);
 8000af8:	2100      	movs	r1, #0
 8000afa:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000afe:	f000 fbf7 	bl	80012f0 <set_ang>
	  	    					motor_backward(cycle);
 8000b02:	4b21      	ldr	r3, [pc, #132]	@ (8000b88 <main+0x30c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 fd36 	bl	8001578 <motor_backward>
 8000b0c:	e04d      	b.n	8000baa <main+0x32e>
	  	    				} else if (receivedChar == 'w') {
 8000b0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000b8c <main+0x310>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b77      	cmp	r3, #119	@ 0x77
 8000b14:	d10a      	bne.n	8000b2c <main+0x2b0>
	  	    					set_ang(450, 0);
 8000b16:	2100      	movs	r1, #0
 8000b18:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000b1c:	f000 fbe8 	bl	80012f0 <set_ang>
	  	    					motor_forward(cycle);
 8000b20:	4b19      	ldr	r3, [pc, #100]	@ (8000b88 <main+0x30c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 fca7 	bl	8001478 <motor_forward>
 8000b2a:	e03e      	b.n	8000baa <main+0x32e>
	  	    				} else if (receivedChar == 'a') {
 8000b2c:	4b17      	ldr	r3, [pc, #92]	@ (8000b8c <main+0x310>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b61      	cmp	r3, #97	@ 0x61
 8000b32:	d10a      	bne.n	8000b4a <main+0x2ce>
	  	    					set_ang(900, 0);
 8000b34:	2100      	movs	r1, #0
 8000b36:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8000b3a:	f000 fbd9 	bl	80012f0 <set_ang>
	  	    					motor_left(cycle);
 8000b3e:	4b12      	ldr	r3, [pc, #72]	@ (8000b88 <main+0x30c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 fcc0 	bl	80014c8 <motor_left>
 8000b48:	e02f      	b.n	8000baa <main+0x32e>
	  	    				} else if (receivedChar == 'd') {
 8000b4a:	4b10      	ldr	r3, [pc, #64]	@ (8000b8c <main+0x310>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b64      	cmp	r3, #100	@ 0x64
 8000b50:	d120      	bne.n	8000b94 <main+0x318>
	  	    					set_ang(0, 0);
 8000b52:	2100      	movs	r1, #0
 8000b54:	2000      	movs	r0, #0
 8000b56:	f000 fbcb 	bl	80012f0 <set_ang>
	  	    					motor_right(cycle);
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b88 <main+0x30c>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 fcde 	bl	8001520 <motor_right>
 8000b64:	e021      	b.n	8000baa <main+0x32e>
 8000b66:	bf00      	nop
 8000b68:	20000088 	.word	0x20000088
 8000b6c:	48000800 	.word	0x48000800
 8000b70:	20000120 	.word	0x20000120
 8000b74:	200000d4 	.word	0x200000d4
 8000b78:	48000400 	.word	0x48000400
 8000b7c:	200002c8 	.word	0x200002c8
 8000b80:	200002cd 	.word	0x200002cd
 8000b84:	200002ce 	.word	0x200002ce
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	200002cf 	.word	0x200002cf
 8000b90:	20000240 	.word	0x20000240
	  	    				} else if (receivedChar == 'q') {
 8000b94:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc0 <main+0x344>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b71      	cmp	r3, #113	@ 0x71
 8000b9a:	d106      	bne.n	8000baa <main+0x32e>
	  	    					set_ang(450, 0);
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000ba2:	f000 fba5 	bl	80012f0 <set_ang>
	  	    					motor_stop();
 8000ba6:	f000 fd0f 	bl	80015c8 <motor_stop>
	  	    				}
	  	    				HAL_Delay(100);
 8000baa:	2064      	movs	r0, #100	@ 0x64
 8000bac:	f001 f980 	bl	8001eb0 <HAL_Delay>
	  	    			if(HAL_UART_Receive(&huart2, &receivedChar, 1, 0) == HAL_OK) {
 8000bb0:	e795      	b.n	8000ade <main+0x262>
	  	        break;
 8000bb2:	bf00      	nop
 8000bb4:	e6a3      	b.n	80008fe <main+0x82>
	  	        break;
 8000bb6:	bf00      	nop
 8000bb8:	e6a1      	b.n	80008fe <main+0x82>
	  	    			}
	  	    		}
	  	    	}
	  	        break;
 8000bba:	bf00      	nop
	  if(counter>3){
 8000bbc:	e69f      	b.n	80008fe <main+0x82>
 8000bbe:	bf00      	nop
 8000bc0:	200002cf 	.word	0x200002cf

08000bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b09c      	sub	sp, #112	@ 0x70
 8000bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bca:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000bce:	2228      	movs	r2, #40	@ 0x28
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f005 fb89 	bl	80062ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be8:	463b      	mov	r3, r7
 8000bea:	2234      	movs	r2, #52	@ 0x34
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f005 fb7b 	bl	80062ea <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bf8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c02:	2301      	movs	r3, #1
 8000c04:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c06:	2302      	movs	r3, #2
 8000c08:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c0e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c10:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000c14:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c16:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f001 fc96 	bl	800254c <HAL_RCC_OscConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c26:	f000 fd99 	bl	800175c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2a:	230f      	movs	r3, #15
 8000c2c:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c3a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c40:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000c44:	2102      	movs	r1, #2
 8000c46:	4618      	mov	r0, r3
 8000c48:	f002 fcbe 	bl	80035c8 <HAL_RCC_ClockConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c52:	f000 fd83 	bl	800175c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 8000c56:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <SystemClock_Config+0xc0>)
 8000c58:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM17;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f002 fee1 	bl	8003a34 <HAL_RCCEx_PeriphCLKConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000c78:	f000 fd70 	bl	800175c <Error_Handler>
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	3770      	adds	r7, #112	@ 0x70
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	00181001 	.word	0x00181001

08000c88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b09a      	sub	sp, #104	@ 0x68
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c8e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c9c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ca8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
 8000cb8:	615a      	str	r2, [r3, #20]
 8000cba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	222c      	movs	r2, #44	@ 0x2c
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f005 fb11 	bl	80062ea <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cc8:	4b49      	ldr	r3, [pc, #292]	@ (8000df0 <MX_TIM1_Init+0x168>)
 8000cca:	4a4a      	ldr	r2, [pc, #296]	@ (8000df4 <MX_TIM1_Init+0x16c>)
 8000ccc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000cce:	4b48      	ldr	r3, [pc, #288]	@ (8000df0 <MX_TIM1_Init+0x168>)
 8000cd0:	2247      	movs	r2, #71	@ 0x47
 8000cd2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd4:	4b46      	ldr	r3, [pc, #280]	@ (8000df0 <MX_TIM1_Init+0x168>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000cda:	4b45      	ldr	r3, [pc, #276]	@ (8000df0 <MX_TIM1_Init+0x168>)
 8000cdc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ce0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce2:	4b43      	ldr	r3, [pc, #268]	@ (8000df0 <MX_TIM1_Init+0x168>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ce8:	4b41      	ldr	r3, [pc, #260]	@ (8000df0 <MX_TIM1_Init+0x168>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cee:	4b40      	ldr	r3, [pc, #256]	@ (8000df0 <MX_TIM1_Init+0x168>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cf4:	483e      	ldr	r0, [pc, #248]	@ (8000df0 <MX_TIM1_Init+0x168>)
 8000cf6:	f003 f82f 	bl	8003d58 <HAL_TIM_Base_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000d00:	f000 fd2c 	bl	800175c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d08:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d0a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4837      	ldr	r0, [pc, #220]	@ (8000df0 <MX_TIM1_Init+0x168>)
 8000d12:	f003 fc37 	bl	8004584 <HAL_TIM_ConfigClockSource>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000d1c:	f000 fd1e 	bl	800175c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d20:	4833      	ldr	r0, [pc, #204]	@ (8000df0 <MX_TIM1_Init+0x168>)
 8000d22:	f003 f8bd 	bl	8003ea0 <HAL_TIM_PWM_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000d2c:	f000 fd16 	bl	800175c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d30:	2300      	movs	r3, #0
 8000d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d34:	2300      	movs	r3, #0
 8000d36:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d3c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d40:	4619      	mov	r1, r3
 8000d42:	482b      	ldr	r0, [pc, #172]	@ (8000df0 <MX_TIM1_Init+0x168>)
 8000d44:	f004 f8ee 	bl	8004f24 <HAL_TIMEx_MasterConfigSynchronization>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000d4e:	f000 fd05 	bl	800175c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d52:	2360      	movs	r3, #96	@ 0x60
 8000d54:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d62:	2300      	movs	r3, #0
 8000d64:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d66:	2300      	movs	r3, #0
 8000d68:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d6e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d72:	2200      	movs	r2, #0
 8000d74:	4619      	mov	r1, r3
 8000d76:	481e      	ldr	r0, [pc, #120]	@ (8000df0 <MX_TIM1_Init+0x168>)
 8000d78:	f003 faf0 	bl	800435c <HAL_TIM_PWM_ConfigChannel>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000d82:	f000 fceb 	bl	800175c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d86:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4818      	ldr	r0, [pc, #96]	@ (8000df0 <MX_TIM1_Init+0x168>)
 8000d90:	f003 fae4 	bl	800435c <HAL_TIM_PWM_ConfigChannel>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000d9a:	f000 fcdf 	bl	800175c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000db2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000db6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000dc0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4807      	ldr	r0, [pc, #28]	@ (8000df0 <MX_TIM1_Init+0x168>)
 8000dd4:	f004 f90c 	bl	8004ff0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000dde:	f000 fcbd 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000de2:	4803      	ldr	r0, [pc, #12]	@ (8000df0 <MX_TIM1_Init+0x168>)
 8000de4:	f000 fd60 	bl	80018a8 <HAL_TIM_MspPostInit>

}
 8000de8:	bf00      	nop
 8000dea:	3768      	adds	r7, #104	@ 0x68
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000088 	.word	0x20000088
 8000df4:	40012c00 	.word	0x40012c00

08000df8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	@ 0x28
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
 8000e18:	615a      	str	r2, [r3, #20]
 8000e1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e1c:	4b27      	ldr	r3, [pc, #156]	@ (8000ebc <MX_TIM2_Init+0xc4>)
 8000e1e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000e24:	4b25      	ldr	r3, [pc, #148]	@ (8000ebc <MX_TIM2_Init+0xc4>)
 8000e26:	2247      	movs	r2, #71	@ 0x47
 8000e28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2a:	4b24      	ldr	r3, [pc, #144]	@ (8000ebc <MX_TIM2_Init+0xc4>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000e30:	4b22      	ldr	r3, [pc, #136]	@ (8000ebc <MX_TIM2_Init+0xc4>)
 8000e32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e38:	4b20      	ldr	r3, [pc, #128]	@ (8000ebc <MX_TIM2_Init+0xc4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ebc <MX_TIM2_Init+0xc4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e44:	481d      	ldr	r0, [pc, #116]	@ (8000ebc <MX_TIM2_Init+0xc4>)
 8000e46:	f003 f82b 	bl	8003ea0 <HAL_TIM_PWM_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000e50:	f000 fc84 	bl	800175c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e5c:	f107 031c 	add.w	r3, r7, #28
 8000e60:	4619      	mov	r1, r3
 8000e62:	4816      	ldr	r0, [pc, #88]	@ (8000ebc <MX_TIM2_Init+0xc4>)
 8000e64:	f004 f85e 	bl	8004f24 <HAL_TIMEx_MasterConfigSynchronization>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000e6e:	f000 fc75 	bl	800175c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e72:	2360      	movs	r3, #96	@ 0x60
 8000e74:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e82:	463b      	mov	r3, r7
 8000e84:	2200      	movs	r2, #0
 8000e86:	4619      	mov	r1, r3
 8000e88:	480c      	ldr	r0, [pc, #48]	@ (8000ebc <MX_TIM2_Init+0xc4>)
 8000e8a:	f003 fa67 	bl	800435c <HAL_TIM_PWM_ConfigChannel>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000e94:	f000 fc62 	bl	800175c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e98:	463b      	mov	r3, r7
 8000e9a:	2208      	movs	r2, #8
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4807      	ldr	r0, [pc, #28]	@ (8000ebc <MX_TIM2_Init+0xc4>)
 8000ea0:	f003 fa5c 	bl	800435c <HAL_TIM_PWM_ConfigChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000eaa:	f000 fc57 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000eae:	4803      	ldr	r0, [pc, #12]	@ (8000ebc <MX_TIM2_Init+0xc4>)
 8000eb0:	f000 fcfa 	bl	80018a8 <HAL_TIM_MspPostInit>

}
 8000eb4:	bf00      	nop
 8000eb6:	3728      	adds	r7, #40	@ 0x28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	200000d4 	.word	0x200000d4

08000ec0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b092      	sub	sp, #72	@ 0x48
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ec6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]
 8000ed6:	615a      	str	r2, [r3, #20]
 8000ed8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000eda:	463b      	mov	r3, r7
 8000edc:	222c      	movs	r2, #44	@ 0x2c
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f005 fa02 	bl	80062ea <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000ee6:	4b31      	ldr	r3, [pc, #196]	@ (8000fac <MX_TIM16_Init+0xec>)
 8000ee8:	4a31      	ldr	r2, [pc, #196]	@ (8000fb0 <MX_TIM16_Init+0xf0>)
 8000eea:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 71;
 8000eec:	4b2f      	ldr	r3, [pc, #188]	@ (8000fac <MX_TIM16_Init+0xec>)
 8000eee:	2247      	movs	r2, #71	@ 0x47
 8000ef0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef2:	4b2e      	ldr	r3, [pc, #184]	@ (8000fac <MX_TIM16_Init+0xec>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 19999;
 8000ef8:	4b2c      	ldr	r3, [pc, #176]	@ (8000fac <MX_TIM16_Init+0xec>)
 8000efa:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000efe:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f00:	4b2a      	ldr	r3, [pc, #168]	@ (8000fac <MX_TIM16_Init+0xec>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000f06:	4b29      	ldr	r3, [pc, #164]	@ (8000fac <MX_TIM16_Init+0xec>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f0c:	4b27      	ldr	r3, [pc, #156]	@ (8000fac <MX_TIM16_Init+0xec>)
 8000f0e:	2280      	movs	r2, #128	@ 0x80
 8000f10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000f12:	4826      	ldr	r0, [pc, #152]	@ (8000fac <MX_TIM16_Init+0xec>)
 8000f14:	f002 ff20 	bl	8003d58 <HAL_TIM_Base_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000f1e:	f000 fc1d 	bl	800175c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000f22:	4822      	ldr	r0, [pc, #136]	@ (8000fac <MX_TIM16_Init+0xec>)
 8000f24:	f002 ffbc 	bl	8003ea0 <HAL_TIM_PWM_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000f2e:	f000 fc15 	bl	800175c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f32:	2360      	movs	r3, #96	@ 0x60
 8000f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f46:	2300      	movs	r3, #0
 8000f48:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f52:	2200      	movs	r2, #0
 8000f54:	4619      	mov	r1, r3
 8000f56:	4815      	ldr	r0, [pc, #84]	@ (8000fac <MX_TIM16_Init+0xec>)
 8000f58:	f003 fa00 	bl	800435c <HAL_TIM_PWM_ConfigChannel>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000f62:	f000 fbfb 	bl	800175c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f7e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000f88:	463b      	mov	r3, r7
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4807      	ldr	r0, [pc, #28]	@ (8000fac <MX_TIM16_Init+0xec>)
 8000f8e:	f004 f82f 	bl	8004ff0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000f98:	f000 fbe0 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000f9c:	4803      	ldr	r0, [pc, #12]	@ (8000fac <MX_TIM16_Init+0xec>)
 8000f9e:	f000 fc83 	bl	80018a8 <HAL_TIM_MspPostInit>

}
 8000fa2:	bf00      	nop
 8000fa4:	3748      	adds	r7, #72	@ 0x48
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000120 	.word	0x20000120
 8000fb0:	40014400 	.word	0x40014400

08000fb4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <MX_TIM17_Init+0x44>)
 8000fba:	4a10      	ldr	r2, [pc, #64]	@ (8000ffc <MX_TIM17_Init+0x48>)
 8000fbc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 71;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <MX_TIM17_Init+0x44>)
 8000fc0:	2247      	movs	r2, #71	@ 0x47
 8000fc2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <MX_TIM17_Init+0x44>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000fca:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff8 <MX_TIM17_Init+0x44>)
 8000fcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fd0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd2:	4b09      	ldr	r3, [pc, #36]	@ (8000ff8 <MX_TIM17_Init+0x44>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000fd8:	4b07      	ldr	r3, [pc, #28]	@ (8000ff8 <MX_TIM17_Init+0x44>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fde:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <MX_TIM17_Init+0x44>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000fe4:	4804      	ldr	r0, [pc, #16]	@ (8000ff8 <MX_TIM17_Init+0x44>)
 8000fe6:	f002 feb7 	bl	8003d58 <HAL_TIM_Base_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000ff0:	f000 fbb4 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	2000016c 	.word	0x2000016c
 8000ffc:	40014800 	.word	0x40014800

08001000 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001004:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <MX_USART1_UART_Init+0x58>)
 8001006:	4a15      	ldr	r2, [pc, #84]	@ (800105c <MX_USART1_UART_Init+0x5c>)
 8001008:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800100a:	4b13      	ldr	r3, [pc, #76]	@ (8001058 <MX_USART1_UART_Init+0x58>)
 800100c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001010:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001012:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <MX_USART1_UART_Init+0x58>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001018:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <MX_USART1_UART_Init+0x58>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800101e:	4b0e      	ldr	r3, [pc, #56]	@ (8001058 <MX_USART1_UART_Init+0x58>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001024:	4b0c      	ldr	r3, [pc, #48]	@ (8001058 <MX_USART1_UART_Init+0x58>)
 8001026:	220c      	movs	r2, #12
 8001028:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102a:	4b0b      	ldr	r3, [pc, #44]	@ (8001058 <MX_USART1_UART_Init+0x58>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001030:	4b09      	ldr	r3, [pc, #36]	@ (8001058 <MX_USART1_UART_Init+0x58>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001036:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <MX_USART1_UART_Init+0x58>)
 8001038:	2200      	movs	r2, #0
 800103a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800103c:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <MX_USART1_UART_Init+0x58>)
 800103e:	2200      	movs	r2, #0
 8001040:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001042:	4805      	ldr	r0, [pc, #20]	@ (8001058 <MX_USART1_UART_Init+0x58>)
 8001044:	f004 f86a 	bl	800511c <HAL_UART_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800104e:	f000 fb85 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200001b8 	.word	0x200001b8
 800105c:	40013800 	.word	0x40013800

08001060 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001064:	4b14      	ldr	r3, [pc, #80]	@ (80010b8 <MX_USART2_UART_Init+0x58>)
 8001066:	4a15      	ldr	r2, [pc, #84]	@ (80010bc <MX_USART2_UART_Init+0x5c>)
 8001068:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800106a:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <MX_USART2_UART_Init+0x58>)
 800106c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001070:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001072:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <MX_USART2_UART_Init+0x58>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001078:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <MX_USART2_UART_Init+0x58>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800107e:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <MX_USART2_UART_Init+0x58>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001084:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <MX_USART2_UART_Init+0x58>)
 8001086:	220c      	movs	r2, #12
 8001088:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108a:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <MX_USART2_UART_Init+0x58>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001090:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <MX_USART2_UART_Init+0x58>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001096:	4b08      	ldr	r3, [pc, #32]	@ (80010b8 <MX_USART2_UART_Init+0x58>)
 8001098:	2200      	movs	r2, #0
 800109a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800109c:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <MX_USART2_UART_Init+0x58>)
 800109e:	2200      	movs	r2, #0
 80010a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010a2:	4805      	ldr	r0, [pc, #20]	@ (80010b8 <MX_USART2_UART_Init+0x58>)
 80010a4:	f004 f83a 	bl	800511c <HAL_UART_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010ae:	f000 fb55 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000240 	.word	0x20000240
 80010bc:	40004400 	.word	0x40004400

080010c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	@ 0x28
 80010c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]
 80010d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d6:	4b55      	ldr	r3, [pc, #340]	@ (800122c <MX_GPIO_Init+0x16c>)
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	4a54      	ldr	r2, [pc, #336]	@ (800122c <MX_GPIO_Init+0x16c>)
 80010dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80010e0:	6153      	str	r3, [r2, #20]
 80010e2:	4b52      	ldr	r3, [pc, #328]	@ (800122c <MX_GPIO_Init+0x16c>)
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ee:	4b4f      	ldr	r3, [pc, #316]	@ (800122c <MX_GPIO_Init+0x16c>)
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	4a4e      	ldr	r2, [pc, #312]	@ (800122c <MX_GPIO_Init+0x16c>)
 80010f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010f8:	6153      	str	r3, [r2, #20]
 80010fa:	4b4c      	ldr	r3, [pc, #304]	@ (800122c <MX_GPIO_Init+0x16c>)
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	4b49      	ldr	r3, [pc, #292]	@ (800122c <MX_GPIO_Init+0x16c>)
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	4a48      	ldr	r2, [pc, #288]	@ (800122c <MX_GPIO_Init+0x16c>)
 800110c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001110:	6153      	str	r3, [r2, #20]
 8001112:	4b46      	ldr	r3, [pc, #280]	@ (800122c <MX_GPIO_Init+0x16c>)
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800111e:	4b43      	ldr	r3, [pc, #268]	@ (800122c <MX_GPIO_Init+0x16c>)
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	4a42      	ldr	r2, [pc, #264]	@ (800122c <MX_GPIO_Init+0x16c>)
 8001124:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001128:	6153      	str	r3, [r2, #20]
 800112a:	4b40      	ldr	r3, [pc, #256]	@ (800122c <MX_GPIO_Init+0x16c>)
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TRIGGER_Pin|C_Pin|B_Pin|A_Pin, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800113c:	483c      	ldr	r0, [pc, #240]	@ (8001230 <MX_GPIO_Init+0x170>)
 800113e:	f001 f9ed 	bl	800251c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|E_Pin|D_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f641 0103 	movw	r1, #6147	@ 0x1803
 8001148:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800114c:	f001 f9e6 	bl	800251c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, G_Pin|F_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 8001156:	4837      	ldr	r0, [pc, #220]	@ (8001234 <MX_GPIO_Init+0x174>)
 8001158:	f001 f9e0 	bl	800251c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800115c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001162:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	4619      	mov	r1, r3
 8001172:	482f      	ldr	r0, [pc, #188]	@ (8001230 <MX_GPIO_Init+0x170>)
 8001174:	f001 f848 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pins : ECHO_Pin DETECT5_Pin DETECT1_Pin DETECT2_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin|DETECT5_Pin|DETECT1_Pin|DETECT2_Pin;
 8001178:	f241 4305 	movw	r3, #5125	@ 0x1405
 800117c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	4828      	ldr	r0, [pc, #160]	@ (8001230 <MX_GPIO_Init+0x170>)
 800118e:	f001 f83b 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIGGER_Pin C_Pin B_Pin A_Pin */
  GPIO_InitStruct.Pin = TRIGGER_Pin|C_Pin|B_Pin|A_Pin;
 8001192:	f44f 73b1 	mov.w	r3, #354	@ 0x162
 8001196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001198:	2301      	movs	r3, #1
 800119a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	4619      	mov	r1, r3
 80011aa:	4821      	ldr	r0, [pc, #132]	@ (8001230 <MX_GPIO_Init+0x170>)
 80011ac:	f001 f82c 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin E_Pin D_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|E_Pin|D_Pin;
 80011b0:	f641 0303 	movw	r3, #6147	@ 0x1803
 80011b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b6:	2301      	movs	r3, #1
 80011b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	4619      	mov	r1, r3
 80011c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011cc:	f001 f81c 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pins : ButtonExt_Pin DETECT4_Pin DETECT3L_Pin DETECT3P_Pin */
  GPIO_InitStruct.Pin = ButtonExt_Pin|DETECT4_Pin|DETECT3L_Pin|DETECT3P_Pin;
 80011d0:	f44f 7361 	mov.w	r3, #900	@ 0x384
 80011d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	4619      	mov	r1, r3
 80011e4:	4813      	ldr	r0, [pc, #76]	@ (8001234 <MX_GPIO_Init+0x174>)
 80011e6:	f001 f80f 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pins : G_Pin F_Pin LD2_Pin */
  GPIO_InitStruct.Pin = G_Pin|F_Pin|LD2_Pin;
 80011ea:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80011ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2300      	movs	r3, #0
 80011fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4619      	mov	r1, r3
 8001202:	480c      	ldr	r0, [pc, #48]	@ (8001234 <MX_GPIO_Init+0x174>)
 8001204:	f001 f800 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : DETECT3_Pin */
  GPIO_InitStruct.Pin = DETECT3_Pin;
 8001208:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800120c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120e:	2300      	movs	r3, #0
 8001210:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DETECT3_GPIO_Port, &GPIO_InitStruct);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4619      	mov	r1, r3
 800121c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001220:	f000 fff2 	bl	8002208 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001224:	bf00      	nop
 8001226:	3728      	adds	r7, #40	@ 0x28
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40021000 	.word	0x40021000
 8001230:	48000800 	.word	0x48000800
 8001234:	48000400 	.word	0x48000400

08001238 <bluetooth>:

}



void bluetooth(void) { // obsługa sterowania poprzez moduł bluetooth zs-040/hc-06
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	while(1){

		if(HAL_UART_Receive(&huart1, &receivedChar, 1, 100) == HAL_OK) {
 800123c:	2364      	movs	r3, #100	@ 0x64
 800123e:	2201      	movs	r2, #1
 8001240:	4928      	ldr	r1, [pc, #160]	@ (80012e4 <bluetooth+0xac>)
 8001242:	4829      	ldr	r0, [pc, #164]	@ (80012e8 <bluetooth+0xb0>)
 8001244:	f003 ffb8 	bl	80051b8 <HAL_UART_Receive>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f6      	bne.n	800123c <bluetooth+0x4>
		        if (receivedChar == 's') {
 800124e:	4b25      	ldr	r3, [pc, #148]	@ (80012e4 <bluetooth+0xac>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b73      	cmp	r3, #115	@ 0x73
 8001254:	d10c      	bne.n	8001270 <bluetooth+0x38>
		        	display1();
 8001256:	f000 f9d3 	bl	8001600 <display1>
		        	set_ang(450, 0);
 800125a:	2100      	movs	r1, #0
 800125c:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8001260:	f000 f846 	bl	80012f0 <set_ang>
		            motor_backward(cycle);
 8001264:	4b21      	ldr	r3, [pc, #132]	@ (80012ec <bluetooth+0xb4>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f000 f985 	bl	8001578 <motor_backward>
 800126e:	e7e5      	b.n	800123c <bluetooth+0x4>
		        } else if (receivedChar == 'w') {
 8001270:	4b1c      	ldr	r3, [pc, #112]	@ (80012e4 <bluetooth+0xac>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b77      	cmp	r3, #119	@ 0x77
 8001276:	d10c      	bne.n	8001292 <bluetooth+0x5a>
		        	display2();
 8001278:	f000 f9d2 	bl	8001620 <display2>
		        	set_ang(450, 0);
 800127c:	2100      	movs	r1, #0
 800127e:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8001282:	f000 f835 	bl	80012f0 <set_ang>
		            motor_forward(cycle);
 8001286:	4b19      	ldr	r3, [pc, #100]	@ (80012ec <bluetooth+0xb4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f8f4 	bl	8001478 <motor_forward>
 8001290:	e7d4      	b.n	800123c <bluetooth+0x4>
		        } else if (receivedChar == 'a') {
 8001292:	4b14      	ldr	r3, [pc, #80]	@ (80012e4 <bluetooth+0xac>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b61      	cmp	r3, #97	@ 0x61
 8001298:	d10a      	bne.n	80012b0 <bluetooth+0x78>
		        	set_ang(900, 0);
 800129a:	2100      	movs	r1, #0
 800129c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80012a0:	f000 f826 	bl	80012f0 <set_ang>
		            motor_left(cycle);
 80012a4:	4b11      	ldr	r3, [pc, #68]	@ (80012ec <bluetooth+0xb4>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 f90d 	bl	80014c8 <motor_left>
 80012ae:	e7c5      	b.n	800123c <bluetooth+0x4>
		        } else if (receivedChar == 'd') {
 80012b0:	4b0c      	ldr	r3, [pc, #48]	@ (80012e4 <bluetooth+0xac>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b64      	cmp	r3, #100	@ 0x64
 80012b6:	d109      	bne.n	80012cc <bluetooth+0x94>
		        	set_ang(0, 0);
 80012b8:	2100      	movs	r1, #0
 80012ba:	2000      	movs	r0, #0
 80012bc:	f000 f818 	bl	80012f0 <set_ang>
		            motor_right(cycle);
 80012c0:	4b0a      	ldr	r3, [pc, #40]	@ (80012ec <bluetooth+0xb4>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f000 f92b 	bl	8001520 <motor_right>
 80012ca:	e7b7      	b.n	800123c <bluetooth+0x4>
		        } else if (receivedChar == 'q') {
 80012cc:	4b05      	ldr	r3, [pc, #20]	@ (80012e4 <bluetooth+0xac>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b71      	cmp	r3, #113	@ 0x71
 80012d2:	d1b3      	bne.n	800123c <bluetooth+0x4>
		        	set_ang(450, 0);
 80012d4:	2100      	movs	r1, #0
 80012d6:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 80012da:	f000 f809 	bl	80012f0 <set_ang>
		            motor_stop();
 80012de:	f000 f973 	bl	80015c8 <motor_stop>
		if(HAL_UART_Receive(&huart1, &receivedChar, 1, 100) == HAL_OK) {
 80012e2:	e7ab      	b.n	800123c <bluetooth+0x4>
 80012e4:	200002cf 	.word	0x200002cf
 80012e8:	200001b8 	.word	0x200001b8
 80012ec:	20000000 	.word	0x20000000

080012f0 <set_ang>:

}


void set_ang(uint16_t ang, uint8_t mode)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	460a      	mov	r2, r1
 80012fa:	80fb      	strh	r3, [r7, #6]
 80012fc:	4613      	mov	r3, r2
 80012fe:	717b      	strb	r3, [r7, #5]
	uint16_t val;

	if(ang > ANGLE_MAX)
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8001306:	d902      	bls.n	800130e <set_ang+0x1e>
	{
		ang = ANGLE_MAX;
 8001308:	f44f 7361 	mov.w	r3, #900	@ 0x384
 800130c:	80fb      	strh	r3, [r7, #6]
	else if (ang < ANGLE_MIN)
	{
		ang = ANGLE_MIN;
	}

	if(mode)
 800130e:	797b      	ldrb	r3, [r7, #5]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d010      	beq.n	8001336 <set_ang+0x46>
	{
		val = PWM_MIN + ((ang - ANGLE_MIN) * STEP) / 1000;
 8001314:	88fa      	ldrh	r2, [r7, #6]
 8001316:	4613      	mov	r3, r2
 8001318:	015b      	lsls	r3, r3, #5
 800131a:	4413      	add	r3, r2
 800131c:	015b      	lsls	r3, r3, #5
 800131e:	1a9b      	subs	r3, r3, r2
 8001320:	4a12      	ldr	r2, [pc, #72]	@ (800136c <set_ang+0x7c>)
 8001322:	fb82 1203 	smull	r1, r2, r2, r3
 8001326:	1192      	asrs	r2, r2, #6
 8001328:	17db      	asrs	r3, r3, #31
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	b29b      	uxth	r3, r3
 800132e:	f203 434c 	addw	r3, r3, #1100	@ 0x44c
 8001332:	81fb      	strh	r3, [r7, #14]
 8001334:	e00f      	b.n	8001356 <set_ang+0x66>
	}
	else
	{
		val = PWM_MAX - ((ang - ANGLE_MIN) * STEP) / 1000;
 8001336:	88fa      	ldrh	r2, [r7, #6]
 8001338:	4613      	mov	r3, r2
 800133a:	015b      	lsls	r3, r3, #5
 800133c:	4413      	add	r3, r2
 800133e:	015b      	lsls	r3, r3, #5
 8001340:	1a9b      	subs	r3, r3, r2
 8001342:	4a0a      	ldr	r2, [pc, #40]	@ (800136c <set_ang+0x7c>)
 8001344:	fb82 1203 	smull	r1, r2, r2, r3
 8001348:	1192      	asrs	r2, r2, #6
 800134a:	17db      	asrs	r3, r3, #31
 800134c:	1a9b      	subs	r3, r3, r2
 800134e:	b29b      	uxth	r3, r3
 8001350:	f603 0302 	addw	r3, r3, #2050	@ 0x802
 8001354:	81fb      	strh	r3, [r7, #14]
	}

	__HAL_TIM_SET_COMPARE(&TIM_NO, TIM_CH_NO, val);
 8001356:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <set_ang+0x80>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	89fa      	ldrh	r2, [r7, #14]
 800135c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800135e:	bf00      	nop
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	10624dd3 	.word	0x10624dd3
 8001370:	20000120 	.word	0x20000120
 8001374:	00000000 	.word	0x00000000

08001378 <motor_slight_left>:

    (detect_states[0] != 0 && detect_states[1] != 0) ? turnover(&axle, 'a') :
    (detect_states[2] != 0 && detect_states[3] != 0 && detect_states[4] != 0) ? turnover(&axle, 'd') : 0;
}

void motor_slight_left(uint32_t duty_cycle){
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001380:	4b19      	ldr	r3, [pc, #100]	@ (80013e8 <motor_slight_left+0x70>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2200      	movs	r2, #0
 8001386:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, duty_cycle);
 8001388:	4b17      	ldr	r3, [pc, #92]	@ (80013e8 <motor_slight_left+0x70>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0.9*(duty_cycle*2/3));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	4a15      	ldr	r2, [pc, #84]	@ (80013ec <motor_slight_left+0x74>)
 8001396:	fba2 2303 	umull	r2, r3, r2, r3
 800139a:	085b      	lsrs	r3, r3, #1
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f9d3 	bl	8000748 <__aeabi_ui2d>
 80013a2:	a30f      	add	r3, pc, #60	@ (adr r3, 80013e0 <motor_slight_left+0x68>)
 80013a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a8:	f7fe ff62 	bl	8000270 <__aeabi_dmul>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	490f      	ldr	r1, [pc, #60]	@ (80013f0 <motor_slight_left+0x78>)
 80013b2:	680c      	ldr	r4, [r1, #0]
 80013b4:	4610      	mov	r0, r2
 80013b6:	4619      	mov	r1, r3
 80013b8:	f7ff fa40 	bl	800083c <__aeabi_d2uiz>
 80013bc:	4603      	mov	r3, r0
 80013be:	6363      	str	r3, [r4, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80013c0:	4b0b      	ldr	r3, [pc, #44]	@ (80013f0 <motor_slight_left+0x78>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2200      	movs	r2, #0
 80013c6:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 80013c8:	2201      	movs	r2, #1
 80013ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013ce:	4809      	ldr	r0, [pc, #36]	@ (80013f4 <motor_slight_left+0x7c>)
 80013d0:	f001 f8a4 	bl	800251c <HAL_GPIO_WritePin>

}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd90      	pop	{r4, r7, pc}
 80013dc:	f3af 8000 	nop.w
 80013e0:	cccccccd 	.word	0xcccccccd
 80013e4:	3feccccc 	.word	0x3feccccc
 80013e8:	20000088 	.word	0x20000088
 80013ec:	aaaaaaab 	.word	0xaaaaaaab
 80013f0:	200000d4 	.word	0x200000d4
 80013f4:	48000400 	.word	0x48000400

080013f8 <motor_slight_right>:

void motor_slight_right(uint32_t duty_cycle){
 80013f8:	b590      	push	{r4, r7, lr}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0.9*(duty_cycle*2/3));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	4a18      	ldr	r2, [pc, #96]	@ (8001468 <motor_slight_right+0x70>)
 8001406:	fba2 2303 	umull	r2, r3, r2, r3
 800140a:	085b      	lsrs	r3, r3, #1
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f99b 	bl	8000748 <__aeabi_ui2d>
 8001412:	a313      	add	r3, pc, #76	@ (adr r3, 8001460 <motor_slight_right+0x68>)
 8001414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001418:	f7fe ff2a 	bl	8000270 <__aeabi_dmul>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4912      	ldr	r1, [pc, #72]	@ (800146c <motor_slight_right+0x74>)
 8001422:	680c      	ldr	r4, [r1, #0]
 8001424:	4610      	mov	r0, r2
 8001426:	4619      	mov	r1, r3
 8001428:	f7ff fa08 	bl	800083c <__aeabi_d2uiz>
 800142c:	4603      	mov	r3, r0
 800142e:	6363      	str	r3, [r4, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001430:	4b0e      	ldr	r3, [pc, #56]	@ (800146c <motor_slight_right+0x74>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2200      	movs	r2, #0
 8001436:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001438:	4b0d      	ldr	r3, [pc, #52]	@ (8001470 <motor_slight_right+0x78>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2200      	movs	r2, #0
 800143e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle);
 8001440:	4b0b      	ldr	r3, [pc, #44]	@ (8001470 <motor_slight_right+0x78>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8001448:	2201      	movs	r2, #1
 800144a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800144e:	4809      	ldr	r0, [pc, #36]	@ (8001474 <motor_slight_right+0x7c>)
 8001450:	f001 f864 	bl	800251c <HAL_GPIO_WritePin>
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bd90      	pop	{r4, r7, pc}
 800145c:	f3af 8000 	nop.w
 8001460:	cccccccd 	.word	0xcccccccd
 8001464:	3feccccc 	.word	0x3feccccc
 8001468:	aaaaaaab 	.word	0xaaaaaaab
 800146c:	20000088 	.word	0x20000088
 8001470:	200000d4 	.word	0x200000d4
 8001474:	48000400 	.word	0x48000400

08001478 <motor_forward>:

void motor_forward(uint32_t duty_cycle)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001480:	4b0d      	ldr	r3, [pc, #52]	@ (80014b8 <motor_forward+0x40>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2200      	movs	r2, #0
 8001486:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, cycle);
 8001488:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <motor_forward+0x40>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a0b      	ldr	r2, [pc, #44]	@ (80014bc <motor_forward+0x44>)
 800148e:	6812      	ldr	r2, [r2, #0]
 8001490:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001492:	4b0b      	ldr	r3, [pc, #44]	@ (80014c0 <motor_forward+0x48>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2200      	movs	r2, #0
 8001498:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, cycle/3);
 800149a:	4b08      	ldr	r3, [pc, #32]	@ (80014bc <motor_forward+0x44>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <motor_forward+0x48>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4908      	ldr	r1, [pc, #32]	@ (80014c4 <motor_forward+0x4c>)
 80014a4:	fba1 1202 	umull	r1, r2, r1, r2
 80014a8:	0852      	lsrs	r2, r2, #1
 80014aa:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	20000088 	.word	0x20000088
 80014bc:	20000000 	.word	0x20000000
 80014c0:	200000d4 	.word	0x200000d4
 80014c4:	aaaaaaab 	.word	0xaaaaaaab

080014c8 <motor_left>:
void motor_left(uint32_t duty_cycle)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80014d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001510 <motor_left+0x48>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2200      	movs	r2, #0
 80014d6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, duty_cycle);
 80014d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001510 <motor_left+0x48>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle*2/3);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	005a      	lsls	r2, r3, #1
 80014e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001514 <motor_left+0x4c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	490b      	ldr	r1, [pc, #44]	@ (8001518 <motor_left+0x50>)
 80014ea:	fba1 1202 	umull	r1, r2, r1, r2
 80014ee:	0852      	lsrs	r2, r2, #1
 80014f0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80014f2:	4b08      	ldr	r3, [pc, #32]	@ (8001514 <motor_left+0x4c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2200      	movs	r2, #0
 80014f8:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 80014fa:	2201      	movs	r2, #1
 80014fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001500:	4806      	ldr	r0, [pc, #24]	@ (800151c <motor_left+0x54>)
 8001502:	f001 f80b 	bl	800251c <HAL_GPIO_WritePin>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000088 	.word	0x20000088
 8001514:	200000d4 	.word	0x200000d4
 8001518:	aaaaaaab 	.word	0xaaaaaaab
 800151c:	48000400 	.word	0x48000400

08001520 <motor_right>:
void motor_right(uint32_t duty_cycle)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle*2/3);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	005a      	lsls	r2, r3, #1
 800152c:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <motor_right+0x48>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	490e      	ldr	r1, [pc, #56]	@ (800156c <motor_right+0x4c>)
 8001532:	fba1 1202 	umull	r1, r2, r1, r2
 8001536:	0852      	lsrs	r2, r2, #1
 8001538:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800153a:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <motor_right+0x48>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2200      	movs	r2, #0
 8001540:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001542:	4b0b      	ldr	r3, [pc, #44]	@ (8001570 <motor_right+0x50>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2200      	movs	r2, #0
 8001548:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle);
 800154a:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <motor_right+0x50>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8001552:	2201      	movs	r2, #1
 8001554:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001558:	4806      	ldr	r0, [pc, #24]	@ (8001574 <motor_right+0x54>)
 800155a:	f000 ffdf 	bl	800251c <HAL_GPIO_WritePin>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000088 	.word	0x20000088
 800156c:	aaaaaaab 	.word	0xaaaaaaab
 8001570:	200000d4 	.word	0x200000d4
 8001574:	48000400 	.word	0x48000400

08001578 <motor_backward>:

// Function to move motors backward
void motor_backward(uint32_t duty_cycle)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, cycle);
 8001580:	4b0d      	ldr	r3, [pc, #52]	@ (80015b8 <motor_backward+0x40>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0d      	ldr	r2, [pc, #52]	@ (80015bc <motor_backward+0x44>)
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800158a:	4b0b      	ldr	r3, [pc, #44]	@ (80015b8 <motor_backward+0x40>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2200      	movs	r2, #0
 8001590:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, cycle/3);
 8001592:	4b0a      	ldr	r3, [pc, #40]	@ (80015bc <motor_backward+0x44>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	4b0a      	ldr	r3, [pc, #40]	@ (80015c0 <motor_backward+0x48>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	490a      	ldr	r1, [pc, #40]	@ (80015c4 <motor_backward+0x4c>)
 800159c:	fba1 1202 	umull	r1, r2, r1, r2
 80015a0:	0852      	lsrs	r2, r2, #1
 80015a2:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80015a4:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <motor_backward+0x48>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2200      	movs	r2, #0
 80015aa:	63da      	str	r2, [r3, #60]	@ 0x3c

}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	20000088 	.word	0x20000088
 80015bc:	20000000 	.word	0x20000000
 80015c0:	200000d4 	.word	0x200000d4
 80015c4:	aaaaaaab 	.word	0xaaaaaaab

080015c8 <motor_stop>:

// Function to stop motors
void motor_stop(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80015cc:	4b0a      	ldr	r3, [pc, #40]	@ (80015f8 <motor_stop+0x30>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2200      	movs	r2, #0
 80015d2:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80015d4:	4b08      	ldr	r3, [pc, #32]	@ (80015f8 <motor_stop+0x30>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2200      	movs	r2, #0
 80015da:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80015dc:	4b07      	ldr	r3, [pc, #28]	@ (80015fc <motor_stop+0x34>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2200      	movs	r2, #0
 80015e2:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80015e4:	4b05      	ldr	r3, [pc, #20]	@ (80015fc <motor_stop+0x34>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2200      	movs	r2, #0
 80015ea:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	20000088 	.word	0x20000088
 80015fc:	200000d4 	.word	0x200000d4

08001600 <display1>:
void display1(void){
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8001604:	2201      	movs	r2, #1
 8001606:	2140      	movs	r1, #64	@ 0x40
 8001608:	4804      	ldr	r0, [pc, #16]	@ (800161c <display1+0x1c>)
 800160a:	f000 ff87 	bl	800251c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 800160e:	2201      	movs	r2, #1
 8001610:	2120      	movs	r1, #32
 8001612:	4802      	ldr	r0, [pc, #8]	@ (800161c <display1+0x1c>)
 8001614:	f000 ff82 	bl	800251c <HAL_GPIO_WritePin>
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	48000800 	.word	0x48000800

08001620 <display2>:
void display2(void){
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
	//2
		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8001624:	2201      	movs	r2, #1
 8001626:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800162a:	480f      	ldr	r0, [pc, #60]	@ (8001668 <display2+0x48>)
 800162c:	f000 ff76 	bl	800251c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8001630:	2201      	movs	r2, #1
 8001632:	2140      	movs	r1, #64	@ 0x40
 8001634:	480c      	ldr	r0, [pc, #48]	@ (8001668 <display2+0x48>)
 8001636:	f000 ff71 	bl	800251c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 800163a:	2201      	movs	r2, #1
 800163c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001640:	480a      	ldr	r0, [pc, #40]	@ (800166c <display2+0x4c>)
 8001642:	f000 ff6b 	bl	800251c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8001646:	2201      	movs	r2, #1
 8001648:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800164c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001650:	f000 ff64 	bl	800251c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8001654:	2201      	movs	r2, #1
 8001656:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800165a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800165e:	f000 ff5d 	bl	800251c <HAL_GPIO_WritePin>

}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	48000800 	.word	0x48000800
 800166c:	48000400 	.word	0x48000400

08001670 <display3>:
void display3(void){
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
	//3
		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8001674:	2201      	movs	r2, #1
 8001676:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800167a:	480e      	ldr	r0, [pc, #56]	@ (80016b4 <display3+0x44>)
 800167c:	f000 ff4e 	bl	800251c <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8001680:	2201      	movs	r2, #1
 8001682:	2140      	movs	r1, #64	@ 0x40
 8001684:	480b      	ldr	r0, [pc, #44]	@ (80016b4 <display3+0x44>)
 8001686:	f000 ff49 	bl	800251c <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 800168a:	2201      	movs	r2, #1
 800168c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001690:	4809      	ldr	r0, [pc, #36]	@ (80016b8 <display3+0x48>)
 8001692:	f000 ff43 	bl	800251c <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8001696:	2201      	movs	r2, #1
 8001698:	2120      	movs	r1, #32
 800169a:	4806      	ldr	r0, [pc, #24]	@ (80016b4 <display3+0x44>)
 800169c:	f000 ff3e 	bl	800251c <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 80016a0:	2201      	movs	r2, #1
 80016a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016aa:	f000 ff37 	bl	800251c <HAL_GPIO_WritePin>
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	48000800 	.word	0x48000800
 80016b8:	48000400 	.word	0x48000400

080016bc <display_reset>:
		  	HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
		  	HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
		  	HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
		  	HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
}
void display_reset(void){
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 80016c0:	2200      	movs	r2, #0
 80016c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016c6:	4814      	ldr	r0, [pc, #80]	@ (8001718 <display_reset+0x5c>)
 80016c8:	f000 ff28 	bl	800251c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2140      	movs	r1, #64	@ 0x40
 80016d0:	4811      	ldr	r0, [pc, #68]	@ (8001718 <display_reset+0x5c>)
 80016d2:	f000 ff23 	bl	800251c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2120      	movs	r1, #32
 80016da:	480f      	ldr	r0, [pc, #60]	@ (8001718 <display_reset+0x5c>)
 80016dc:	f000 ff1e 	bl	800251c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ea:	f000 ff17 	bl	800251c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 80016ee:	2200      	movs	r2, #0
 80016f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016f8:	f000 ff10 	bl	800251c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 80016fc:	2200      	movs	r2, #0
 80016fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001702:	4806      	ldr	r0, [pc, #24]	@ (800171c <display_reset+0x60>)
 8001704:	f000 ff0a 	bl	800251c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 8001708:	2200      	movs	r2, #0
 800170a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800170e:	4803      	ldr	r0, [pc, #12]	@ (800171c <display_reset+0x60>)
 8001710:	f000 ff04 	bl	800251c <HAL_GPIO_WritePin>

}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}
 8001718:	48000800 	.word	0x48000800
 800171c:	48000400 	.word	0x48000400

08001720 <countdown>:

void countdown(void){
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	display_reset();
 8001724:	f7ff ffca 	bl	80016bc <display_reset>
	display3();
 8001728:	f7ff ffa2 	bl	8001670 <display3>
	HAL_Delay(1000);
 800172c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001730:	f000 fbbe 	bl	8001eb0 <HAL_Delay>
	display_reset();
 8001734:	f7ff ffc2 	bl	80016bc <display_reset>
	display2();
 8001738:	f7ff ff72 	bl	8001620 <display2>
	HAL_Delay(1000);
 800173c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001740:	f000 fbb6 	bl	8001eb0 <HAL_Delay>
	display_reset();
 8001744:	f7ff ffba 	bl	80016bc <display_reset>
	display1();
 8001748:	f7ff ff5a 	bl	8001600 <display1>
	HAL_Delay(1000);
 800174c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001750:	f000 fbae 	bl	8001eb0 <HAL_Delay>
	display_reset();
 8001754:	f7ff ffb2 	bl	80016bc <display_reset>
}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}

0800175c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001760:	b672      	cpsid	i
}
 8001762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <Error_Handler+0x8>

08001768 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176e:	4b0f      	ldr	r3, [pc, #60]	@ (80017ac <HAL_MspInit+0x44>)
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	4a0e      	ldr	r2, [pc, #56]	@ (80017ac <HAL_MspInit+0x44>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6193      	str	r3, [r2, #24]
 800177a:	4b0c      	ldr	r3, [pc, #48]	@ (80017ac <HAL_MspInit+0x44>)
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001786:	4b09      	ldr	r3, [pc, #36]	@ (80017ac <HAL_MspInit+0x44>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	4a08      	ldr	r2, [pc, #32]	@ (80017ac <HAL_MspInit+0x44>)
 800178c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001790:	61d3      	str	r3, [r2, #28]
 8001792:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <HAL_MspInit+0x44>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800179e:	2007      	movs	r0, #7
 80017a0:	f000 fc7a 	bl	8002098 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40021000 	.word	0x40021000

080017b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a27      	ldr	r2, [pc, #156]	@ (800185c <HAL_TIM_Base_MspInit+0xac>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d11c      	bne.n	80017fc <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017c2:	4b27      	ldr	r3, [pc, #156]	@ (8001860 <HAL_TIM_Base_MspInit+0xb0>)
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	4a26      	ldr	r2, [pc, #152]	@ (8001860 <HAL_TIM_Base_MspInit+0xb0>)
 80017c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017cc:	6193      	str	r3, [r2, #24]
 80017ce:	4b24      	ldr	r3, [pc, #144]	@ (8001860 <HAL_TIM_Base_MspInit+0xb0>)
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	2018      	movs	r0, #24
 80017e0:	f000 fc65 	bl	80020ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80017e4:	2018      	movs	r0, #24
 80017e6:	f000 fc7e 	bl	80020e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2100      	movs	r1, #0
 80017ee:	201a      	movs	r0, #26
 80017f0:	f000 fc5d 	bl	80020ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80017f4:	201a      	movs	r0, #26
 80017f6:	f000 fc76 	bl	80020e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80017fa:	e02a      	b.n	8001852 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a18      	ldr	r2, [pc, #96]	@ (8001864 <HAL_TIM_Base_MspInit+0xb4>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d10c      	bne.n	8001820 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001806:	4b16      	ldr	r3, [pc, #88]	@ (8001860 <HAL_TIM_Base_MspInit+0xb0>)
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	4a15      	ldr	r2, [pc, #84]	@ (8001860 <HAL_TIM_Base_MspInit+0xb0>)
 800180c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001810:	6193      	str	r3, [r2, #24]
 8001812:	4b13      	ldr	r3, [pc, #76]	@ (8001860 <HAL_TIM_Base_MspInit+0xb0>)
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]
}
 800181e:	e018      	b.n	8001852 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM17)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a10      	ldr	r2, [pc, #64]	@ (8001868 <HAL_TIM_Base_MspInit+0xb8>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d113      	bne.n	8001852 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800182a:	4b0d      	ldr	r3, [pc, #52]	@ (8001860 <HAL_TIM_Base_MspInit+0xb0>)
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	4a0c      	ldr	r2, [pc, #48]	@ (8001860 <HAL_TIM_Base_MspInit+0xb0>)
 8001830:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001834:	6193      	str	r3, [r2, #24]
 8001836:	4b0a      	ldr	r3, [pc, #40]	@ (8001860 <HAL_TIM_Base_MspInit+0xb0>)
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	2100      	movs	r1, #0
 8001846:	201a      	movs	r0, #26
 8001848:	f000 fc31 	bl	80020ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800184c:	201a      	movs	r0, #26
 800184e:	f000 fc4a 	bl	80020e6 <HAL_NVIC_EnableIRQ>
}
 8001852:	bf00      	nop
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40012c00 	.word	0x40012c00
 8001860:	40021000 	.word	0x40021000
 8001864:	40014400 	.word	0x40014400
 8001868:	40014800 	.word	0x40014800

0800186c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800187c:	d10b      	bne.n	8001896 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800187e:	4b09      	ldr	r3, [pc, #36]	@ (80018a4 <HAL_TIM_PWM_MspInit+0x38>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	4a08      	ldr	r2, [pc, #32]	@ (80018a4 <HAL_TIM_PWM_MspInit+0x38>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	61d3      	str	r3, [r2, #28]
 800188a:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <HAL_TIM_PWM_MspInit+0x38>)
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001896:	bf00      	nop
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40021000 	.word	0x40021000

080018a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08c      	sub	sp, #48	@ 0x30
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 031c 	add.w	r3, r7, #28
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a51      	ldr	r2, [pc, #324]	@ (8001a0c <HAL_TIM_MspPostInit+0x164>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d13a      	bne.n	8001940 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ca:	4b51      	ldr	r3, [pc, #324]	@ (8001a10 <HAL_TIM_MspPostInit+0x168>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	4a50      	ldr	r2, [pc, #320]	@ (8001a10 <HAL_TIM_MspPostInit+0x168>)
 80018d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80018d4:	6153      	str	r3, [r2, #20]
 80018d6:	4b4e      	ldr	r3, [pc, #312]	@ (8001a10 <HAL_TIM_MspPostInit+0x168>)
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018de:	61bb      	str	r3, [r7, #24]
 80018e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	4b4b      	ldr	r3, [pc, #300]	@ (8001a10 <HAL_TIM_MspPostInit+0x168>)
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	4a4a      	ldr	r2, [pc, #296]	@ (8001a10 <HAL_TIM_MspPostInit+0x168>)
 80018e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018ec:	6153      	str	r3, [r2, #20]
 80018ee:	4b48      	ldr	r3, [pc, #288]	@ (8001a10 <HAL_TIM_MspPostInit+0x168>)
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = L2_Pin;
 80018fa:	2308      	movs	r3, #8
 80018fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fe:	2302      	movs	r3, #2
 8001900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800190a:	2302      	movs	r3, #2
 800190c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(L2_GPIO_Port, &GPIO_InitStruct);
 800190e:	f107 031c 	add.w	r3, r7, #28
 8001912:	4619      	mov	r1, r3
 8001914:	483f      	ldr	r0, [pc, #252]	@ (8001a14 <HAL_TIM_MspPostInit+0x16c>)
 8001916:	f000 fc77 	bl	8002208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = L1_Pin;
 800191a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800191e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	2302      	movs	r3, #2
 8001922:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001928:	2300      	movs	r3, #0
 800192a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800192c:	2306      	movs	r3, #6
 800192e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(L1_GPIO_Port, &GPIO_InitStruct);
 8001930:	f107 031c 	add.w	r3, r7, #28
 8001934:	4619      	mov	r1, r3
 8001936:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800193a:	f000 fc65 	bl	8002208 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800193e:	e061      	b.n	8001a04 <HAL_TIM_MspPostInit+0x15c>
  else if(htim->Instance==TIM2)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001948:	d13a      	bne.n	80019c0 <HAL_TIM_MspPostInit+0x118>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194a:	4b31      	ldr	r3, [pc, #196]	@ (8001a10 <HAL_TIM_MspPostInit+0x168>)
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	4a30      	ldr	r2, [pc, #192]	@ (8001a10 <HAL_TIM_MspPostInit+0x168>)
 8001950:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001954:	6153      	str	r3, [r2, #20]
 8001956:	4b2e      	ldr	r3, [pc, #184]	@ (8001a10 <HAL_TIM_MspPostInit+0x168>)
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001962:	4b2b      	ldr	r3, [pc, #172]	@ (8001a10 <HAL_TIM_MspPostInit+0x168>)
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	4a2a      	ldr	r2, [pc, #168]	@ (8001a10 <HAL_TIM_MspPostInit+0x168>)
 8001968:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800196c:	6153      	str	r3, [r2, #20]
 800196e:	4b28      	ldr	r3, [pc, #160]	@ (8001a10 <HAL_TIM_MspPostInit+0x168>)
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = P1_Pin;
 800197a:	2320      	movs	r3, #32
 800197c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001986:	2300      	movs	r3, #0
 8001988:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800198a:	2301      	movs	r3, #1
 800198c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(P1_GPIO_Port, &GPIO_InitStruct);
 800198e:	f107 031c 	add.w	r3, r7, #28
 8001992:	4619      	mov	r1, r3
 8001994:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001998:	f000 fc36 	bl	8002208 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = P2_Pin;
 800199c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019ae:	2301      	movs	r3, #1
 80019b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(P2_GPIO_Port, &GPIO_InitStruct);
 80019b2:	f107 031c 	add.w	r3, r7, #28
 80019b6:	4619      	mov	r1, r3
 80019b8:	4817      	ldr	r0, [pc, #92]	@ (8001a18 <HAL_TIM_MspPostInit+0x170>)
 80019ba:	f000 fc25 	bl	8002208 <HAL_GPIO_Init>
}
 80019be:	e021      	b.n	8001a04 <HAL_TIM_MspPostInit+0x15c>
  else if(htim->Instance==TIM16)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a15      	ldr	r2, [pc, #84]	@ (8001a1c <HAL_TIM_MspPostInit+0x174>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d11c      	bne.n	8001a04 <HAL_TIM_MspPostInit+0x15c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ca:	4b11      	ldr	r3, [pc, #68]	@ (8001a10 <HAL_TIM_MspPostInit+0x168>)
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	4a10      	ldr	r2, [pc, #64]	@ (8001a10 <HAL_TIM_MspPostInit+0x168>)
 80019d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019d4:	6153      	str	r3, [r2, #20]
 80019d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a10 <HAL_TIM_MspPostInit+0x168>)
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019e2:	2340      	movs	r3, #64	@ 0x40
 80019e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e6:	2302      	movs	r3, #2
 80019e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ee:	2300      	movs	r3, #0
 80019f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80019f2:	2301      	movs	r3, #1
 80019f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f6:	f107 031c 	add.w	r3, r7, #28
 80019fa:	4619      	mov	r1, r3
 80019fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a00:	f000 fc02 	bl	8002208 <HAL_GPIO_Init>
}
 8001a04:	bf00      	nop
 8001a06:	3730      	adds	r7, #48	@ 0x30
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40012c00 	.word	0x40012c00
 8001a10:	40021000 	.word	0x40021000
 8001a14:	48000800 	.word	0x48000800
 8001a18:	48000400 	.word	0x48000400
 8001a1c:	40014400 	.word	0x40014400

08001a20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08c      	sub	sp, #48	@ 0x30
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 031c 	add.w	r3, r7, #28
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a37      	ldr	r2, [pc, #220]	@ (8001b1c <HAL_UART_MspInit+0xfc>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d132      	bne.n	8001aa8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a42:	4b37      	ldr	r3, [pc, #220]	@ (8001b20 <HAL_UART_MspInit+0x100>)
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	4a36      	ldr	r2, [pc, #216]	@ (8001b20 <HAL_UART_MspInit+0x100>)
 8001a48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a4c:	6193      	str	r3, [r2, #24]
 8001a4e:	4b34      	ldr	r3, [pc, #208]	@ (8001b20 <HAL_UART_MspInit+0x100>)
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a56:	61bb      	str	r3, [r7, #24]
 8001a58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5a:	4b31      	ldr	r3, [pc, #196]	@ (8001b20 <HAL_UART_MspInit+0x100>)
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	4a30      	ldr	r2, [pc, #192]	@ (8001b20 <HAL_UART_MspInit+0x100>)
 8001a60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a64:	6153      	str	r3, [r2, #20]
 8001a66:	4b2e      	ldr	r3, [pc, #184]	@ (8001b20 <HAL_UART_MspInit+0x100>)
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a72:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a80:	2303      	movs	r3, #3
 8001a82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a84:	2307      	movs	r3, #7
 8001a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a88:	f107 031c 	add.w	r3, r7, #28
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a92:	f000 fbb9 	bl	8002208 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2100      	movs	r1, #0
 8001a9a:	2025      	movs	r0, #37	@ 0x25
 8001a9c:	f000 fb07 	bl	80020ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001aa0:	2025      	movs	r0, #37	@ 0x25
 8001aa2:	f000 fb20 	bl	80020e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001aa6:	e035      	b.n	8001b14 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a1d      	ldr	r2, [pc, #116]	@ (8001b24 <HAL_UART_MspInit+0x104>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d130      	bne.n	8001b14 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b20 <HAL_UART_MspInit+0x100>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	4a1a      	ldr	r2, [pc, #104]	@ (8001b20 <HAL_UART_MspInit+0x100>)
 8001ab8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001abc:	61d3      	str	r3, [r2, #28]
 8001abe:	4b18      	ldr	r3, [pc, #96]	@ (8001b20 <HAL_UART_MspInit+0x100>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aca:	4b15      	ldr	r3, [pc, #84]	@ (8001b20 <HAL_UART_MspInit+0x100>)
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	4a14      	ldr	r2, [pc, #80]	@ (8001b20 <HAL_UART_MspInit+0x100>)
 8001ad0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ad4:	6153      	str	r3, [r2, #20]
 8001ad6:	4b12      	ldr	r3, [pc, #72]	@ (8001b20 <HAL_UART_MspInit+0x100>)
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ae2:	230c      	movs	r3, #12
 8001ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aee:	2300      	movs	r3, #0
 8001af0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001af2:	2307      	movs	r3, #7
 8001af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af6:	f107 031c 	add.w	r3, r7, #28
 8001afa:	4619      	mov	r1, r3
 8001afc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b00:	f000 fb82 	bl	8002208 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b04:	2200      	movs	r2, #0
 8001b06:	2100      	movs	r1, #0
 8001b08:	2026      	movs	r0, #38	@ 0x26
 8001b0a:	f000 fad0 	bl	80020ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b0e:	2026      	movs	r0, #38	@ 0x26
 8001b10:	f000 fae9 	bl	80020e6 <HAL_NVIC_EnableIRQ>
}
 8001b14:	bf00      	nop
 8001b16:	3730      	adds	r7, #48	@ 0x30
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40013800 	.word	0x40013800
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40004400 	.word	0x40004400

08001b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b2c:	bf00      	nop
 8001b2e:	e7fd      	b.n	8001b2c <NMI_Handler+0x4>

08001b30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b34:	bf00      	nop
 8001b36:	e7fd      	b.n	8001b34 <HardFault_Handler+0x4>

08001b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b3c:	bf00      	nop
 8001b3e:	e7fd      	b.n	8001b3c <MemManage_Handler+0x4>

08001b40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b44:	bf00      	nop
 8001b46:	e7fd      	b.n	8001b44 <BusFault_Handler+0x4>

08001b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <UsageFault_Handler+0x4>

08001b50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b7e:	f000 f977 	bl	8001e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b8c:	4802      	ldr	r0, [pc, #8]	@ (8001b98 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001b8e:	f002 fac5 	bl	800411c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000088 	.word	0x20000088

08001b9c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ba0:	4803      	ldr	r0, [pc, #12]	@ (8001bb0 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8001ba2:	f002 fabb 	bl	800411c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8001ba6:	4803      	ldr	r0, [pc, #12]	@ (8001bb4 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8001ba8:	f002 fab8 	bl	800411c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000088 	.word	0x20000088
 8001bb4:	2000016c 	.word	0x2000016c

08001bb8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bbc:	4802      	ldr	r0, [pc, #8]	@ (8001bc8 <USART1_IRQHandler+0x10>)
 8001bbe:	f003 fbc5 	bl	800534c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200001b8 	.word	0x200001b8

08001bcc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001bd0:	4802      	ldr	r0, [pc, #8]	@ (8001bdc <USART2_IRQHandler+0x10>)
 8001bd2:	f003 fbbb 	bl	800534c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000240 	.word	0x20000240

08001be0 <_getpid>:
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	2301      	movs	r3, #1
 8001be6:	4618      	mov	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <_kill>:
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
 8001bfa:	f004 fbf3 	bl	80063e4 <__errno>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2216      	movs	r2, #22
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	f04f 33ff 	mov.w	r3, #4294967295
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <_exit>:
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	f04f 31ff 	mov.w	r1, #4294967295
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff ffe7 	bl	8001bf0 <_kill>
 8001c22:	bf00      	nop
 8001c24:	e7fd      	b.n	8001c22 <_exit+0x12>

08001c26 <_read>:
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b086      	sub	sp, #24
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	60f8      	str	r0, [r7, #12]
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	e00a      	b.n	8001c4e <_read+0x28>
 8001c38:	f3af 8000 	nop.w
 8001c3c:	4601      	mov	r1, r0
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	1c5a      	adds	r2, r3, #1
 8001c42:	60ba      	str	r2, [r7, #8]
 8001c44:	b2ca      	uxtb	r2, r1
 8001c46:	701a      	strb	r2, [r3, #0]
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	dbf0      	blt.n	8001c38 <_read+0x12>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <_write>:
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	e009      	b.n	8001c86 <_write+0x26>
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	1c5a      	adds	r2, r3, #1
 8001c76:	60ba      	str	r2, [r7, #8]
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f3af 8000 	nop.w
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	3301      	adds	r3, #1
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	dbf1      	blt.n	8001c72 <_write+0x12>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <_close>:
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <_fstat>:
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <_isatty>:
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	2301      	movs	r3, #1
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <_lseek>:
 8001ce6:	b480      	push	{r7}
 8001ce8:	b085      	sub	sp, #20
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	60f8      	str	r0, [r7, #12]
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <_sbrk>:
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	4a14      	ldr	r2, [pc, #80]	@ (8001d5c <_sbrk+0x5c>)
 8001d0a:	4b15      	ldr	r3, [pc, #84]	@ (8001d60 <_sbrk+0x60>)
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	4b13      	ldr	r3, [pc, #76]	@ (8001d64 <_sbrk+0x64>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d102      	bne.n	8001d22 <_sbrk+0x22>
 8001d1c:	4b11      	ldr	r3, [pc, #68]	@ (8001d64 <_sbrk+0x64>)
 8001d1e:	4a12      	ldr	r2, [pc, #72]	@ (8001d68 <_sbrk+0x68>)
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	4b10      	ldr	r3, [pc, #64]	@ (8001d64 <_sbrk+0x64>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d207      	bcs.n	8001d40 <_sbrk+0x40>
 8001d30:	f004 fb58 	bl	80063e4 <__errno>
 8001d34:	4603      	mov	r3, r0
 8001d36:	220c      	movs	r2, #12
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3e:	e009      	b.n	8001d54 <_sbrk+0x54>
 8001d40:	4b08      	ldr	r3, [pc, #32]	@ (8001d64 <_sbrk+0x64>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	4b07      	ldr	r3, [pc, #28]	@ (8001d64 <_sbrk+0x64>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	4a05      	ldr	r2, [pc, #20]	@ (8001d64 <_sbrk+0x64>)
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20004000 	.word	0x20004000
 8001d60:	00000400 	.word	0x00000400
 8001d64:	200002d0 	.word	0x200002d0
 8001d68:	20000428 	.word	0x20000428

08001d6c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d70:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <SystemInit+0x20>)
 8001d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d76:	4a05      	ldr	r2, [pc, #20]	@ (8001d8c <SystemInit+0x20>)
 8001d78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <Reset_Handler>:
 8001d90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dc8 <LoopForever+0x2>
 8001d94:	f7ff ffea 	bl	8001d6c <SystemInit>
 8001d98:	480c      	ldr	r0, [pc, #48]	@ (8001dcc <LoopForever+0x6>)
 8001d9a:	490d      	ldr	r1, [pc, #52]	@ (8001dd0 <LoopForever+0xa>)
 8001d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd4 <LoopForever+0xe>)
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e002      	b.n	8001da8 <LoopCopyDataInit>

08001da2 <CopyDataInit>:
 8001da2:	58d4      	ldr	r4, [r2, r3]
 8001da4:	50c4      	str	r4, [r0, r3]
 8001da6:	3304      	adds	r3, #4

08001da8 <LoopCopyDataInit>:
 8001da8:	18c4      	adds	r4, r0, r3
 8001daa:	428c      	cmp	r4, r1
 8001dac:	d3f9      	bcc.n	8001da2 <CopyDataInit>
 8001dae:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd8 <LoopForever+0x12>)
 8001db0:	4c0a      	ldr	r4, [pc, #40]	@ (8001ddc <LoopForever+0x16>)
 8001db2:	2300      	movs	r3, #0
 8001db4:	e001      	b.n	8001dba <LoopFillZerobss>

08001db6 <FillZerobss>:
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	3204      	adds	r2, #4

08001dba <LoopFillZerobss>:
 8001dba:	42a2      	cmp	r2, r4
 8001dbc:	d3fb      	bcc.n	8001db6 <FillZerobss>
 8001dbe:	f004 fb17 	bl	80063f0 <__libc_init_array>
 8001dc2:	f7fe fd5b 	bl	800087c <main>

08001dc6 <LoopForever>:
 8001dc6:	e7fe      	b.n	8001dc6 <LoopForever>
 8001dc8:	20004000 	.word	0x20004000
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	2000006c 	.word	0x2000006c
 8001dd4:	080071cc 	.word	0x080071cc
 8001dd8:	2000006c 	.word	0x2000006c
 8001ddc:	20000424 	.word	0x20000424

08001de0 <ADC1_IRQHandler>:
 8001de0:	e7fe      	b.n	8001de0 <ADC1_IRQHandler>
	...

08001de4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de8:	4b08      	ldr	r3, [pc, #32]	@ (8001e0c <HAL_Init+0x28>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a07      	ldr	r2, [pc, #28]	@ (8001e0c <HAL_Init+0x28>)
 8001dee:	f043 0310 	orr.w	r3, r3, #16
 8001df2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df4:	2003      	movs	r0, #3
 8001df6:	f000 f94f 	bl	8002098 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f000 f808 	bl	8001e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e00:	f7ff fcb2 	bl	8001768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40022000 	.word	0x40022000

08001e10 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e18:	4b12      	ldr	r3, [pc, #72]	@ (8001e64 <HAL_InitTick+0x54>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b12      	ldr	r3, [pc, #72]	@ (8001e68 <HAL_InitTick+0x58>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	4619      	mov	r1, r3
 8001e22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 f967 	bl	8002102 <HAL_SYSTICK_Config>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e00e      	b.n	8001e5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b0f      	cmp	r3, #15
 8001e42:	d80a      	bhi.n	8001e5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e44:	2200      	movs	r2, #0
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	f04f 30ff 	mov.w	r0, #4294967295
 8001e4c:	f000 f92f 	bl	80020ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e50:	4a06      	ldr	r2, [pc, #24]	@ (8001e6c <HAL_InitTick+0x5c>)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
 8001e58:	e000      	b.n	8001e5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000004 	.word	0x20000004
 8001e68:	2000000c 	.word	0x2000000c
 8001e6c:	20000008 	.word	0x20000008

08001e70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e74:	4b06      	ldr	r3, [pc, #24]	@ (8001e90 <HAL_IncTick+0x20>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b06      	ldr	r3, [pc, #24]	@ (8001e94 <HAL_IncTick+0x24>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4413      	add	r3, r2
 8001e80:	4a04      	ldr	r2, [pc, #16]	@ (8001e94 <HAL_IncTick+0x24>)
 8001e82:	6013      	str	r3, [r2, #0]
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	2000000c 	.word	0x2000000c
 8001e94:	200002d4 	.word	0x200002d4

08001e98 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return uwTick;  
 8001e9c:	4b03      	ldr	r3, [pc, #12]	@ (8001eac <HAL_GetTick+0x14>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	200002d4 	.word	0x200002d4

08001eb0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb8:	f7ff ffee 	bl	8001e98 <HAL_GetTick>
 8001ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec8:	d005      	beq.n	8001ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef4 <HAL_Delay+0x44>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001ed6:	bf00      	nop
 8001ed8:	f7ff ffde 	bl	8001e98 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d8f7      	bhi.n	8001ed8 <HAL_Delay+0x28>
  {
  }
}
 8001ee8:	bf00      	nop
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	2000000c 	.word	0x2000000c

08001ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f08:	4b0c      	ldr	r3, [pc, #48]	@ (8001f3c <__NVIC_SetPriorityGrouping+0x44>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f14:	4013      	ands	r3, r2
 8001f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f2a:	4a04      	ldr	r2, [pc, #16]	@ (8001f3c <__NVIC_SetPriorityGrouping+0x44>)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	60d3      	str	r3, [r2, #12]
}
 8001f30:	bf00      	nop
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f44:	4b04      	ldr	r3, [pc, #16]	@ (8001f58 <__NVIC_GetPriorityGrouping+0x18>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	f003 0307 	and.w	r3, r3, #7
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	db0b      	blt.n	8001f86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	f003 021f 	and.w	r2, r3, #31
 8001f74:	4907      	ldr	r1, [pc, #28]	@ (8001f94 <__NVIC_EnableIRQ+0x38>)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	095b      	lsrs	r3, r3, #5
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	e000e100 	.word	0xe000e100

08001f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	6039      	str	r1, [r7, #0]
 8001fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	db0a      	blt.n	8001fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	490c      	ldr	r1, [pc, #48]	@ (8001fe4 <__NVIC_SetPriority+0x4c>)
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	0112      	lsls	r2, r2, #4
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	440b      	add	r3, r1
 8001fbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc0:	e00a      	b.n	8001fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4908      	ldr	r1, [pc, #32]	@ (8001fe8 <__NVIC_SetPriority+0x50>)
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	3b04      	subs	r3, #4
 8001fd0:	0112      	lsls	r2, r2, #4
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	761a      	strb	r2, [r3, #24]
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000e100 	.word	0xe000e100
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b089      	sub	sp, #36	@ 0x24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f1c3 0307 	rsb	r3, r3, #7
 8002006:	2b04      	cmp	r3, #4
 8002008:	bf28      	it	cs
 800200a:	2304      	movcs	r3, #4
 800200c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3304      	adds	r3, #4
 8002012:	2b06      	cmp	r3, #6
 8002014:	d902      	bls.n	800201c <NVIC_EncodePriority+0x30>
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3b03      	subs	r3, #3
 800201a:	e000      	b.n	800201e <NVIC_EncodePriority+0x32>
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002020:	f04f 32ff 	mov.w	r2, #4294967295
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43da      	mvns	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	401a      	ands	r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002034:	f04f 31ff 	mov.w	r1, #4294967295
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	fa01 f303 	lsl.w	r3, r1, r3
 800203e:	43d9      	mvns	r1, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002044:	4313      	orrs	r3, r2
         );
}
 8002046:	4618      	mov	r0, r3
 8002048:	3724      	adds	r7, #36	@ 0x24
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3b01      	subs	r3, #1
 8002060:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002064:	d301      	bcc.n	800206a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002066:	2301      	movs	r3, #1
 8002068:	e00f      	b.n	800208a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800206a:	4a0a      	ldr	r2, [pc, #40]	@ (8002094 <SysTick_Config+0x40>)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3b01      	subs	r3, #1
 8002070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002072:	210f      	movs	r1, #15
 8002074:	f04f 30ff 	mov.w	r0, #4294967295
 8002078:	f7ff ff8e 	bl	8001f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800207c:	4b05      	ldr	r3, [pc, #20]	@ (8002094 <SysTick_Config+0x40>)
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002082:	4b04      	ldr	r3, [pc, #16]	@ (8002094 <SysTick_Config+0x40>)
 8002084:	2207      	movs	r2, #7
 8002086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	e000e010 	.word	0xe000e010

08002098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7ff ff29 	bl	8001ef8 <__NVIC_SetPriorityGrouping>
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b086      	sub	sp, #24
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	4603      	mov	r3, r0
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
 80020ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020c0:	f7ff ff3e 	bl	8001f40 <__NVIC_GetPriorityGrouping>
 80020c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	68b9      	ldr	r1, [r7, #8]
 80020ca:	6978      	ldr	r0, [r7, #20]
 80020cc:	f7ff ff8e 	bl	8001fec <NVIC_EncodePriority>
 80020d0:	4602      	mov	r2, r0
 80020d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d6:	4611      	mov	r1, r2
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff ff5d 	bl	8001f98 <__NVIC_SetPriority>
}
 80020de:	bf00      	nop
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b082      	sub	sp, #8
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4603      	mov	r3, r0
 80020ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff31 	bl	8001f5c <__NVIC_EnableIRQ>
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff ffa2 	bl	8002054 <SysTick_Config>
 8002110:	4603      	mov	r3, r0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002128:	2b02      	cmp	r3, #2
 800212a:	d008      	beq.n	800213e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2204      	movs	r2, #4
 8002130:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e020      	b.n	8002180 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 020e 	bic.w	r2, r2, #14
 800214c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0201 	bic.w	r2, r2, #1
 800215c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002166:	2101      	movs	r1, #1
 8002168:	fa01 f202 	lsl.w	r2, r1, r2
 800216c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002194:	2300      	movs	r3, #0
 8002196:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d005      	beq.n	80021ae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2204      	movs	r2, #4
 80021a6:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	73fb      	strb	r3, [r7, #15]
 80021ac:	e027      	b.n	80021fe <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 020e 	bic.w	r2, r2, #14
 80021bc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 0201 	bic.w	r2, r2, #1
 80021cc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d6:	2101      	movs	r1, #1
 80021d8:	fa01 f202 	lsl.w	r2, r1, r2
 80021dc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	4798      	blx	r3
    } 
  }
  return status;
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002208:	b480      	push	{r7}
 800220a:	b087      	sub	sp, #28
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002216:	e14e      	b.n	80024b6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	2101      	movs	r1, #1
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	fa01 f303 	lsl.w	r3, r1, r3
 8002224:	4013      	ands	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 8140 	beq.w	80024b0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	2b01      	cmp	r3, #1
 800223a:	d005      	beq.n	8002248 <HAL_GPIO_Init+0x40>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d130      	bne.n	80022aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	2203      	movs	r2, #3
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4013      	ands	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	68da      	ldr	r2, [r3, #12]
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	4313      	orrs	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800227e:	2201      	movs	r2, #1
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43db      	mvns	r3, r3
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	4013      	ands	r3, r2
 800228c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	091b      	lsrs	r3, r3, #4
 8002294:	f003 0201 	and.w	r2, r3, #1
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d017      	beq.n	80022e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	2203      	movs	r2, #3
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43db      	mvns	r3, r3
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4013      	ands	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d123      	bne.n	800233a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	08da      	lsrs	r2, r3, #3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3208      	adds	r2, #8
 80022fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	220f      	movs	r2, #15
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4013      	ands	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	691a      	ldr	r2, [r3, #16]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	08da      	lsrs	r2, r3, #3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3208      	adds	r2, #8
 8002334:	6939      	ldr	r1, [r7, #16]
 8002336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	2203      	movs	r2, #3
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	4013      	ands	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f003 0203 	and.w	r2, r3, #3
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 809a 	beq.w	80024b0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237c:	4b55      	ldr	r3, [pc, #340]	@ (80024d4 <HAL_GPIO_Init+0x2cc>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	4a54      	ldr	r2, [pc, #336]	@ (80024d4 <HAL_GPIO_Init+0x2cc>)
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	6193      	str	r3, [r2, #24]
 8002388:	4b52      	ldr	r3, [pc, #328]	@ (80024d4 <HAL_GPIO_Init+0x2cc>)
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002394:	4a50      	ldr	r2, [pc, #320]	@ (80024d8 <HAL_GPIO_Init+0x2d0>)
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	089b      	lsrs	r3, r3, #2
 800239a:	3302      	adds	r3, #2
 800239c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	220f      	movs	r2, #15
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4013      	ands	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023be:	d013      	beq.n	80023e8 <HAL_GPIO_Init+0x1e0>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a46      	ldr	r2, [pc, #280]	@ (80024dc <HAL_GPIO_Init+0x2d4>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d00d      	beq.n	80023e4 <HAL_GPIO_Init+0x1dc>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a45      	ldr	r2, [pc, #276]	@ (80024e0 <HAL_GPIO_Init+0x2d8>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d007      	beq.n	80023e0 <HAL_GPIO_Init+0x1d8>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a44      	ldr	r2, [pc, #272]	@ (80024e4 <HAL_GPIO_Init+0x2dc>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d101      	bne.n	80023dc <HAL_GPIO_Init+0x1d4>
 80023d8:	2303      	movs	r3, #3
 80023da:	e006      	b.n	80023ea <HAL_GPIO_Init+0x1e2>
 80023dc:	2305      	movs	r3, #5
 80023de:	e004      	b.n	80023ea <HAL_GPIO_Init+0x1e2>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e002      	b.n	80023ea <HAL_GPIO_Init+0x1e2>
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <HAL_GPIO_Init+0x1e2>
 80023e8:	2300      	movs	r3, #0
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	f002 0203 	and.w	r2, r2, #3
 80023f0:	0092      	lsls	r2, r2, #2
 80023f2:	4093      	lsls	r3, r2
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023fa:	4937      	ldr	r1, [pc, #220]	@ (80024d8 <HAL_GPIO_Init+0x2d0>)
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	089b      	lsrs	r3, r3, #2
 8002400:	3302      	adds	r3, #2
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002408:	4b37      	ldr	r3, [pc, #220]	@ (80024e8 <HAL_GPIO_Init+0x2e0>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	43db      	mvns	r3, r3
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	4013      	ands	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4313      	orrs	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800242c:	4a2e      	ldr	r2, [pc, #184]	@ (80024e8 <HAL_GPIO_Init+0x2e0>)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002432:	4b2d      	ldr	r3, [pc, #180]	@ (80024e8 <HAL_GPIO_Init+0x2e0>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	43db      	mvns	r3, r3
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	4013      	ands	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002456:	4a24      	ldr	r2, [pc, #144]	@ (80024e8 <HAL_GPIO_Init+0x2e0>)
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800245c:	4b22      	ldr	r3, [pc, #136]	@ (80024e8 <HAL_GPIO_Init+0x2e0>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	43db      	mvns	r3, r3
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4013      	ands	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	4313      	orrs	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002480:	4a19      	ldr	r2, [pc, #100]	@ (80024e8 <HAL_GPIO_Init+0x2e0>)
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002486:	4b18      	ldr	r3, [pc, #96]	@ (80024e8 <HAL_GPIO_Init+0x2e0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	43db      	mvns	r3, r3
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4013      	ands	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024aa:	4a0f      	ldr	r2, [pc, #60]	@ (80024e8 <HAL_GPIO_Init+0x2e0>)
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	3301      	adds	r3, #1
 80024b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	fa22 f303 	lsr.w	r3, r2, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f47f aea9 	bne.w	8002218 <HAL_GPIO_Init+0x10>
  }
}
 80024c6:	bf00      	nop
 80024c8:	bf00      	nop
 80024ca:	371c      	adds	r7, #28
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40010000 	.word	0x40010000
 80024dc:	48000400 	.word	0x48000400
 80024e0:	48000800 	.word	0x48000800
 80024e4:	48000c00 	.word	0x48000c00
 80024e8:	40010400 	.word	0x40010400

080024ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	887b      	ldrh	r3, [r7, #2]
 80024fe:	4013      	ands	r3, r2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d002      	beq.n	800250a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002504:	2301      	movs	r3, #1
 8002506:	73fb      	strb	r3, [r7, #15]
 8002508:	e001      	b.n	800250e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800250a:	2300      	movs	r3, #0
 800250c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800250e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	460b      	mov	r3, r1
 8002526:	807b      	strh	r3, [r7, #2]
 8002528:	4613      	mov	r3, r2
 800252a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800252c:	787b      	ldrb	r3, [r7, #1]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002532:	887a      	ldrh	r2, [r7, #2]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002538:	e002      	b.n	8002540 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800253a:	887a      	ldrh	r2, [r7, #2]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002552:	af00      	add	r7, sp, #0
 8002554:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002558:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800255c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800255e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002562:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d102      	bne.n	8002572 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	f001 b823 	b.w	80035b8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002572:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002576:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 817d 	beq.w	8002882 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002588:	4bbc      	ldr	r3, [pc, #752]	@ (800287c <HAL_RCC_OscConfig+0x330>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 030c 	and.w	r3, r3, #12
 8002590:	2b04      	cmp	r3, #4
 8002592:	d00c      	beq.n	80025ae <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002594:	4bb9      	ldr	r3, [pc, #740]	@ (800287c <HAL_RCC_OscConfig+0x330>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 030c 	and.w	r3, r3, #12
 800259c:	2b08      	cmp	r3, #8
 800259e:	d15c      	bne.n	800265a <HAL_RCC_OscConfig+0x10e>
 80025a0:	4bb6      	ldr	r3, [pc, #728]	@ (800287c <HAL_RCC_OscConfig+0x330>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025ac:	d155      	bne.n	800265a <HAL_RCC_OscConfig+0x10e>
 80025ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025b2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80025ba:	fa93 f3a3 	rbit	r3, r3
 80025be:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025c2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c6:	fab3 f383 	clz	r3, r3
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	095b      	lsrs	r3, r3, #5
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d102      	bne.n	80025e0 <HAL_RCC_OscConfig+0x94>
 80025da:	4ba8      	ldr	r3, [pc, #672]	@ (800287c <HAL_RCC_OscConfig+0x330>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	e015      	b.n	800260c <HAL_RCC_OscConfig+0xc0>
 80025e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025e4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80025ec:	fa93 f3a3 	rbit	r3, r3
 80025f0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80025f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025f8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80025fc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002600:	fa93 f3a3 	rbit	r3, r3
 8002604:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002608:	4b9c      	ldr	r3, [pc, #624]	@ (800287c <HAL_RCC_OscConfig+0x330>)
 800260a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002610:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002614:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002618:	fa92 f2a2 	rbit	r2, r2
 800261c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002620:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002624:	fab2 f282 	clz	r2, r2
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	f042 0220 	orr.w	r2, r2, #32
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	f002 021f 	and.w	r2, r2, #31
 8002634:	2101      	movs	r1, #1
 8002636:	fa01 f202 	lsl.w	r2, r1, r2
 800263a:	4013      	ands	r3, r2
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 811f 	beq.w	8002880 <HAL_RCC_OscConfig+0x334>
 8002642:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002646:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	f040 8116 	bne.w	8002880 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	f000 bfaf 	b.w	80035b8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800265a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800265e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800266a:	d106      	bne.n	800267a <HAL_RCC_OscConfig+0x12e>
 800266c:	4b83      	ldr	r3, [pc, #524]	@ (800287c <HAL_RCC_OscConfig+0x330>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a82      	ldr	r2, [pc, #520]	@ (800287c <HAL_RCC_OscConfig+0x330>)
 8002672:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002676:	6013      	str	r3, [r2, #0]
 8002678:	e036      	b.n	80026e8 <HAL_RCC_OscConfig+0x19c>
 800267a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800267e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10c      	bne.n	80026a4 <HAL_RCC_OscConfig+0x158>
 800268a:	4b7c      	ldr	r3, [pc, #496]	@ (800287c <HAL_RCC_OscConfig+0x330>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a7b      	ldr	r2, [pc, #492]	@ (800287c <HAL_RCC_OscConfig+0x330>)
 8002690:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	4b79      	ldr	r3, [pc, #484]	@ (800287c <HAL_RCC_OscConfig+0x330>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a78      	ldr	r2, [pc, #480]	@ (800287c <HAL_RCC_OscConfig+0x330>)
 800269c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	e021      	b.n	80026e8 <HAL_RCC_OscConfig+0x19c>
 80026a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026b4:	d10c      	bne.n	80026d0 <HAL_RCC_OscConfig+0x184>
 80026b6:	4b71      	ldr	r3, [pc, #452]	@ (800287c <HAL_RCC_OscConfig+0x330>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a70      	ldr	r2, [pc, #448]	@ (800287c <HAL_RCC_OscConfig+0x330>)
 80026bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	4b6e      	ldr	r3, [pc, #440]	@ (800287c <HAL_RCC_OscConfig+0x330>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a6d      	ldr	r2, [pc, #436]	@ (800287c <HAL_RCC_OscConfig+0x330>)
 80026c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	e00b      	b.n	80026e8 <HAL_RCC_OscConfig+0x19c>
 80026d0:	4b6a      	ldr	r3, [pc, #424]	@ (800287c <HAL_RCC_OscConfig+0x330>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a69      	ldr	r2, [pc, #420]	@ (800287c <HAL_RCC_OscConfig+0x330>)
 80026d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	4b67      	ldr	r3, [pc, #412]	@ (800287c <HAL_RCC_OscConfig+0x330>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a66      	ldr	r2, [pc, #408]	@ (800287c <HAL_RCC_OscConfig+0x330>)
 80026e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026e6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026e8:	4b64      	ldr	r3, [pc, #400]	@ (800287c <HAL_RCC_OscConfig+0x330>)
 80026ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ec:	f023 020f 	bic.w	r2, r3, #15
 80026f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	495f      	ldr	r1, [pc, #380]	@ (800287c <HAL_RCC_OscConfig+0x330>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002706:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d059      	beq.n	80027c6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002712:	f7ff fbc1 	bl	8001e98 <HAL_GetTick>
 8002716:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271a:	e00a      	b.n	8002732 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800271c:	f7ff fbbc 	bl	8001e98 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b64      	cmp	r3, #100	@ 0x64
 800272a:	d902      	bls.n	8002732 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	f000 bf43 	b.w	80035b8 <HAL_RCC_OscConfig+0x106c>
 8002732:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002736:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800273e:	fa93 f3a3 	rbit	r3, r3
 8002742:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002746:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274a:	fab3 f383 	clz	r3, r3
 800274e:	b2db      	uxtb	r3, r3
 8002750:	095b      	lsrs	r3, r3, #5
 8002752:	b2db      	uxtb	r3, r3
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b01      	cmp	r3, #1
 800275c:	d102      	bne.n	8002764 <HAL_RCC_OscConfig+0x218>
 800275e:	4b47      	ldr	r3, [pc, #284]	@ (800287c <HAL_RCC_OscConfig+0x330>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	e015      	b.n	8002790 <HAL_RCC_OscConfig+0x244>
 8002764:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002768:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002770:	fa93 f3a3 	rbit	r3, r3
 8002774:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002778:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800277c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002780:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002784:	fa93 f3a3 	rbit	r3, r3
 8002788:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800278c:	4b3b      	ldr	r3, [pc, #236]	@ (800287c <HAL_RCC_OscConfig+0x330>)
 800278e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002790:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002794:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002798:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800279c:	fa92 f2a2 	rbit	r2, r2
 80027a0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80027a4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80027a8:	fab2 f282 	clz	r2, r2
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	f042 0220 	orr.w	r2, r2, #32
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	f002 021f 	and.w	r2, r2, #31
 80027b8:	2101      	movs	r1, #1
 80027ba:	fa01 f202 	lsl.w	r2, r1, r2
 80027be:	4013      	ands	r3, r2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0ab      	beq.n	800271c <HAL_RCC_OscConfig+0x1d0>
 80027c4:	e05d      	b.n	8002882 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c6:	f7ff fb67 	bl	8001e98 <HAL_GetTick>
 80027ca:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ce:	e00a      	b.n	80027e6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d0:	f7ff fb62 	bl	8001e98 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b64      	cmp	r3, #100	@ 0x64
 80027de:	d902      	bls.n	80027e6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	f000 bee9 	b.w	80035b8 <HAL_RCC_OscConfig+0x106c>
 80027e6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027ea:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ee:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80027fa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fe:	fab3 f383 	clz	r3, r3
 8002802:	b2db      	uxtb	r3, r3
 8002804:	095b      	lsrs	r3, r3, #5
 8002806:	b2db      	uxtb	r3, r3
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b01      	cmp	r3, #1
 8002810:	d102      	bne.n	8002818 <HAL_RCC_OscConfig+0x2cc>
 8002812:	4b1a      	ldr	r3, [pc, #104]	@ (800287c <HAL_RCC_OscConfig+0x330>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	e015      	b.n	8002844 <HAL_RCC_OscConfig+0x2f8>
 8002818:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800281c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002820:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002824:	fa93 f3a3 	rbit	r3, r3
 8002828:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800282c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002830:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002834:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002838:	fa93 f3a3 	rbit	r3, r3
 800283c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002840:	4b0e      	ldr	r3, [pc, #56]	@ (800287c <HAL_RCC_OscConfig+0x330>)
 8002842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002844:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002848:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800284c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002850:	fa92 f2a2 	rbit	r2, r2
 8002854:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002858:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800285c:	fab2 f282 	clz	r2, r2
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	f042 0220 	orr.w	r2, r2, #32
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	f002 021f 	and.w	r2, r2, #31
 800286c:	2101      	movs	r1, #1
 800286e:	fa01 f202 	lsl.w	r2, r1, r2
 8002872:	4013      	ands	r3, r2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1ab      	bne.n	80027d0 <HAL_RCC_OscConfig+0x284>
 8002878:	e003      	b.n	8002882 <HAL_RCC_OscConfig+0x336>
 800287a:	bf00      	nop
 800287c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002882:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002886:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 817d 	beq.w	8002b92 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002898:	4ba6      	ldr	r3, [pc, #664]	@ (8002b34 <HAL_RCC_OscConfig+0x5e8>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 030c 	and.w	r3, r3, #12
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00b      	beq.n	80028bc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028a4:	4ba3      	ldr	r3, [pc, #652]	@ (8002b34 <HAL_RCC_OscConfig+0x5e8>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 030c 	and.w	r3, r3, #12
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d172      	bne.n	8002996 <HAL_RCC_OscConfig+0x44a>
 80028b0:	4ba0      	ldr	r3, [pc, #640]	@ (8002b34 <HAL_RCC_OscConfig+0x5e8>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d16c      	bne.n	8002996 <HAL_RCC_OscConfig+0x44a>
 80028bc:	2302      	movs	r3, #2
 80028be:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80028c6:	fa93 f3a3 	rbit	r3, r3
 80028ca:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80028ce:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d2:	fab3 f383 	clz	r3, r3
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	095b      	lsrs	r3, r3, #5
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d102      	bne.n	80028ec <HAL_RCC_OscConfig+0x3a0>
 80028e6:	4b93      	ldr	r3, [pc, #588]	@ (8002b34 <HAL_RCC_OscConfig+0x5e8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	e013      	b.n	8002914 <HAL_RCC_OscConfig+0x3c8>
 80028ec:	2302      	movs	r3, #2
 80028ee:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80028f6:	fa93 f3a3 	rbit	r3, r3
 80028fa:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80028fe:	2302      	movs	r3, #2
 8002900:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002904:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002908:	fa93 f3a3 	rbit	r3, r3
 800290c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002910:	4b88      	ldr	r3, [pc, #544]	@ (8002b34 <HAL_RCC_OscConfig+0x5e8>)
 8002912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002914:	2202      	movs	r2, #2
 8002916:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800291a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800291e:	fa92 f2a2 	rbit	r2, r2
 8002922:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002926:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800292a:	fab2 f282 	clz	r2, r2
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	f042 0220 	orr.w	r2, r2, #32
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	f002 021f 	and.w	r2, r2, #31
 800293a:	2101      	movs	r1, #1
 800293c:	fa01 f202 	lsl.w	r2, r1, r2
 8002940:	4013      	ands	r3, r2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <HAL_RCC_OscConfig+0x410>
 8002946:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800294a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d002      	beq.n	800295c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	f000 be2e 	b.w	80035b8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295c:	4b75      	ldr	r3, [pc, #468]	@ (8002b34 <HAL_RCC_OscConfig+0x5e8>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002964:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002968:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	21f8      	movs	r1, #248	@ 0xf8
 8002972:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002976:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800297a:	fa91 f1a1 	rbit	r1, r1
 800297e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002982:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002986:	fab1 f181 	clz	r1, r1
 800298a:	b2c9      	uxtb	r1, r1
 800298c:	408b      	lsls	r3, r1
 800298e:	4969      	ldr	r1, [pc, #420]	@ (8002b34 <HAL_RCC_OscConfig+0x5e8>)
 8002990:	4313      	orrs	r3, r2
 8002992:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002994:	e0fd      	b.n	8002b92 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002996:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800299a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 8088 	beq.w	8002ab8 <HAL_RCC_OscConfig+0x56c>
 80029a8:	2301      	movs	r3, #1
 80029aa:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80029b2:	fa93 f3a3 	rbit	r3, r3
 80029b6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80029ba:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80029c8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	461a      	mov	r2, r3
 80029d0:	2301      	movs	r3, #1
 80029d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d4:	f7ff fa60 	bl	8001e98 <HAL_GetTick>
 80029d8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029dc:	e00a      	b.n	80029f4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029de:	f7ff fa5b 	bl	8001e98 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d902      	bls.n	80029f4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	f000 bde2 	b.w	80035b8 <HAL_RCC_OscConfig+0x106c>
 80029f4:	2302      	movs	r3, #2
 80029f6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fa:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002a06:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a0a:	fab3 f383 	clz	r3, r3
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	095b      	lsrs	r3, r3, #5
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d102      	bne.n	8002a24 <HAL_RCC_OscConfig+0x4d8>
 8002a1e:	4b45      	ldr	r3, [pc, #276]	@ (8002b34 <HAL_RCC_OscConfig+0x5e8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	e013      	b.n	8002a4c <HAL_RCC_OscConfig+0x500>
 8002a24:	2302      	movs	r3, #2
 8002a26:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002a2e:	fa93 f3a3 	rbit	r3, r3
 8002a32:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002a36:	2302      	movs	r3, #2
 8002a38:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002a3c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002a40:	fa93 f3a3 	rbit	r3, r3
 8002a44:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002a48:	4b3a      	ldr	r3, [pc, #232]	@ (8002b34 <HAL_RCC_OscConfig+0x5e8>)
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002a52:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002a56:	fa92 f2a2 	rbit	r2, r2
 8002a5a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002a5e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002a62:	fab2 f282 	clz	r2, r2
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	f042 0220 	orr.w	r2, r2, #32
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	f002 021f 	and.w	r2, r2, #31
 8002a72:	2101      	movs	r1, #1
 8002a74:	fa01 f202 	lsl.w	r2, r1, r2
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0af      	beq.n	80029de <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a7e:	4b2d      	ldr	r3, [pc, #180]	@ (8002b34 <HAL_RCC_OscConfig+0x5e8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	21f8      	movs	r1, #248	@ 0xf8
 8002a94:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a98:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002a9c:	fa91 f1a1 	rbit	r1, r1
 8002aa0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002aa4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002aa8:	fab1 f181 	clz	r1, r1
 8002aac:	b2c9      	uxtb	r1, r1
 8002aae:	408b      	lsls	r3, r1
 8002ab0:	4920      	ldr	r1, [pc, #128]	@ (8002b34 <HAL_RCC_OscConfig+0x5e8>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	600b      	str	r3, [r1, #0]
 8002ab6:	e06c      	b.n	8002b92 <HAL_RCC_OscConfig+0x646>
 8002ab8:	2301      	movs	r3, #1
 8002aba:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002ac2:	fa93 f3a3 	rbit	r3, r3
 8002ac6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002aca:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ace:	fab3 f383 	clz	r3, r3
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ad8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	461a      	mov	r2, r3
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7ff f9d8 	bl	8001e98 <HAL_GetTick>
 8002ae8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aec:	e00a      	b.n	8002b04 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aee:	f7ff f9d3 	bl	8001e98 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d902      	bls.n	8002b04 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	f000 bd5a 	b.w	80035b8 <HAL_RCC_OscConfig+0x106c>
 8002b04:	2302      	movs	r3, #2
 8002b06:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002b0e:	fa93 f3a3 	rbit	r3, r3
 8002b12:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002b16:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1a:	fab3 f383 	clz	r3, r3
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	095b      	lsrs	r3, r3, #5
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d104      	bne.n	8002b38 <HAL_RCC_OscConfig+0x5ec>
 8002b2e:	4b01      	ldr	r3, [pc, #4]	@ (8002b34 <HAL_RCC_OscConfig+0x5e8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	e015      	b.n	8002b60 <HAL_RCC_OscConfig+0x614>
 8002b34:	40021000 	.word	0x40021000
 8002b38:	2302      	movs	r3, #2
 8002b3a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002b42:	fa93 f3a3 	rbit	r3, r3
 8002b46:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002b50:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002b54:	fa93 f3a3 	rbit	r3, r3
 8002b58:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002b5c:	4bc8      	ldr	r3, [pc, #800]	@ (8002e80 <HAL_RCC_OscConfig+0x934>)
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b60:	2202      	movs	r2, #2
 8002b62:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002b66:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002b6a:	fa92 f2a2 	rbit	r2, r2
 8002b6e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002b72:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002b76:	fab2 f282 	clz	r2, r2
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	f042 0220 	orr.w	r2, r2, #32
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	f002 021f 	and.w	r2, r2, #31
 8002b86:	2101      	movs	r1, #1
 8002b88:	fa01 f202 	lsl.w	r2, r1, r2
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1ad      	bne.n	8002aee <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 8110 	beq.w	8002dc8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ba8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d079      	beq.n	8002cac <HAL_RCC_OscConfig+0x760>
 8002bb8:	2301      	movs	r3, #1
 8002bba:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002bc2:	fa93 f3a3 	rbit	r3, r3
 8002bc6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002bca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4bab      	ldr	r3, [pc, #684]	@ (8002e84 <HAL_RCC_OscConfig+0x938>)
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	461a      	mov	r2, r3
 8002bde:	2301      	movs	r3, #1
 8002be0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be2:	f7ff f959 	bl	8001e98 <HAL_GetTick>
 8002be6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bea:	e00a      	b.n	8002c02 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bec:	f7ff f954 	bl	8001e98 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d902      	bls.n	8002c02 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	f000 bcdb 	b.w	80035b8 <HAL_RCC_OscConfig+0x106c>
 8002c02:	2302      	movs	r3, #2
 8002c04:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c08:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c0c:	fa93 f3a3 	rbit	r3, r3
 8002c10:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002c14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c18:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c24:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	fa93 f2a3 	rbit	r2, r3
 8002c2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002c40:	2202      	movs	r2, #2
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	fa93 f2a3 	rbit	r2, r3
 8002c52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c56:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002c5a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c5c:	4b88      	ldr	r3, [pc, #544]	@ (8002e80 <HAL_RCC_OscConfig+0x934>)
 8002c5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c64:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002c68:	2102      	movs	r1, #2
 8002c6a:	6019      	str	r1, [r3, #0]
 8002c6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c70:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	fa93 f1a3 	rbit	r1, r3
 8002c7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c7e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002c82:	6019      	str	r1, [r3, #0]
  return result;
 8002c84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c88:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	fab3 f383 	clz	r3, r3
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	f003 031f 	and.w	r3, r3, #31
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0a0      	beq.n	8002bec <HAL_RCC_OscConfig+0x6a0>
 8002caa:	e08d      	b.n	8002dc8 <HAL_RCC_OscConfig+0x87c>
 8002cac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cbc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	fa93 f2a3 	rbit	r2, r3
 8002cc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cca:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002cce:	601a      	str	r2, [r3, #0]
  return result;
 8002cd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002cd8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cda:	fab3 f383 	clz	r3, r3
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4b68      	ldr	r3, [pc, #416]	@ (8002e84 <HAL_RCC_OscConfig+0x938>)
 8002ce4:	4413      	add	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	461a      	mov	r2, r3
 8002cea:	2300      	movs	r3, #0
 8002cec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cee:	f7ff f8d3 	bl	8001e98 <HAL_GetTick>
 8002cf2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf6:	e00a      	b.n	8002d0e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cf8:	f7ff f8ce 	bl	8001e98 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d902      	bls.n	8002d0e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	f000 bc55 	b.w	80035b8 <HAL_RCC_OscConfig+0x106c>
 8002d0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d12:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002d16:	2202      	movs	r2, #2
 8002d18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d1e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	fa93 f2a3 	rbit	r2, r3
 8002d28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d2c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d36:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d42:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	fa93 f2a3 	rbit	r2, r3
 8002d4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d50:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d5a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002d5e:	2202      	movs	r2, #2
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d66:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	fa93 f2a3 	rbit	r2, r3
 8002d70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d74:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002d78:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d7a:	4b41      	ldr	r3, [pc, #260]	@ (8002e80 <HAL_RCC_OscConfig+0x934>)
 8002d7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d82:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002d86:	2102      	movs	r1, #2
 8002d88:	6019      	str	r1, [r3, #0]
 8002d8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d8e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	fa93 f1a3 	rbit	r1, r3
 8002d98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d9c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002da0:	6019      	str	r1, [r3, #0]
  return result;
 8002da2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	fab3 f383 	clz	r3, r3
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	f003 031f 	and.w	r3, r3, #31
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d197      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dcc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 81a1 	beq.w	8003120 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dde:	2300      	movs	r3, #0
 8002de0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002de4:	4b26      	ldr	r3, [pc, #152]	@ (8002e80 <HAL_RCC_OscConfig+0x934>)
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d116      	bne.n	8002e1e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df0:	4b23      	ldr	r3, [pc, #140]	@ (8002e80 <HAL_RCC_OscConfig+0x934>)
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	4a22      	ldr	r2, [pc, #136]	@ (8002e80 <HAL_RCC_OscConfig+0x934>)
 8002df6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dfa:	61d3      	str	r3, [r2, #28]
 8002dfc:	4b20      	ldr	r3, [pc, #128]	@ (8002e80 <HAL_RCC_OscConfig+0x934>)
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002e04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e08:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e12:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002e16:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002e88 <HAL_RCC_OscConfig+0x93c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d11a      	bne.n	8002e60 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e2a:	4b17      	ldr	r3, [pc, #92]	@ (8002e88 <HAL_RCC_OscConfig+0x93c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a16      	ldr	r2, [pc, #88]	@ (8002e88 <HAL_RCC_OscConfig+0x93c>)
 8002e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e34:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e36:	f7ff f82f 	bl	8001e98 <HAL_GetTick>
 8002e3a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3e:	e009      	b.n	8002e54 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e40:	f7ff f82a 	bl	8001e98 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b64      	cmp	r3, #100	@ 0x64
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e3b1      	b.n	80035b8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e54:	4b0c      	ldr	r3, [pc, #48]	@ (8002e88 <HAL_RCC_OscConfig+0x93c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0ef      	beq.n	8002e40 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d10d      	bne.n	8002e8c <HAL_RCC_OscConfig+0x940>
 8002e70:	4b03      	ldr	r3, [pc, #12]	@ (8002e80 <HAL_RCC_OscConfig+0x934>)
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	4a02      	ldr	r2, [pc, #8]	@ (8002e80 <HAL_RCC_OscConfig+0x934>)
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	6213      	str	r3, [r2, #32]
 8002e7c:	e03c      	b.n	8002ef8 <HAL_RCC_OscConfig+0x9ac>
 8002e7e:	bf00      	nop
 8002e80:	40021000 	.word	0x40021000
 8002e84:	10908120 	.word	0x10908120
 8002e88:	40007000 	.word	0x40007000
 8002e8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e90:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10c      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x96a>
 8002e9c:	4bc1      	ldr	r3, [pc, #772]	@ (80031a4 <HAL_RCC_OscConfig+0xc58>)
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	4ac0      	ldr	r2, [pc, #768]	@ (80031a4 <HAL_RCC_OscConfig+0xc58>)
 8002ea2:	f023 0301 	bic.w	r3, r3, #1
 8002ea6:	6213      	str	r3, [r2, #32]
 8002ea8:	4bbe      	ldr	r3, [pc, #760]	@ (80031a4 <HAL_RCC_OscConfig+0xc58>)
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	4abd      	ldr	r2, [pc, #756]	@ (80031a4 <HAL_RCC_OscConfig+0xc58>)
 8002eae:	f023 0304 	bic.w	r3, r3, #4
 8002eb2:	6213      	str	r3, [r2, #32]
 8002eb4:	e020      	b.n	8002ef8 <HAL_RCC_OscConfig+0x9ac>
 8002eb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	2b05      	cmp	r3, #5
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x994>
 8002ec6:	4bb7      	ldr	r3, [pc, #732]	@ (80031a4 <HAL_RCC_OscConfig+0xc58>)
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	4ab6      	ldr	r2, [pc, #728]	@ (80031a4 <HAL_RCC_OscConfig+0xc58>)
 8002ecc:	f043 0304 	orr.w	r3, r3, #4
 8002ed0:	6213      	str	r3, [r2, #32]
 8002ed2:	4bb4      	ldr	r3, [pc, #720]	@ (80031a4 <HAL_RCC_OscConfig+0xc58>)
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	4ab3      	ldr	r2, [pc, #716]	@ (80031a4 <HAL_RCC_OscConfig+0xc58>)
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	6213      	str	r3, [r2, #32]
 8002ede:	e00b      	b.n	8002ef8 <HAL_RCC_OscConfig+0x9ac>
 8002ee0:	4bb0      	ldr	r3, [pc, #704]	@ (80031a4 <HAL_RCC_OscConfig+0xc58>)
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	4aaf      	ldr	r2, [pc, #700]	@ (80031a4 <HAL_RCC_OscConfig+0xc58>)
 8002ee6:	f023 0301 	bic.w	r3, r3, #1
 8002eea:	6213      	str	r3, [r2, #32]
 8002eec:	4bad      	ldr	r3, [pc, #692]	@ (80031a4 <HAL_RCC_OscConfig+0xc58>)
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	4aac      	ldr	r2, [pc, #688]	@ (80031a4 <HAL_RCC_OscConfig+0xc58>)
 8002ef2:	f023 0304 	bic.w	r3, r3, #4
 8002ef6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ef8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002efc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 8081 	beq.w	800300c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0a:	f7fe ffc5 	bl	8001e98 <HAL_GetTick>
 8002f0e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f12:	e00b      	b.n	8002f2c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f14:	f7fe ffc0 	bl	8001e98 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e345      	b.n	80035b8 <HAL_RCC_OscConfig+0x106c>
 8002f2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f30:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002f34:	2202      	movs	r2, #2
 8002f36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f3c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	fa93 f2a3 	rbit	r2, r3
 8002f46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f4a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f54:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002f58:	2202      	movs	r2, #2
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f60:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	fa93 f2a3 	rbit	r2, r3
 8002f6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f6e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002f72:	601a      	str	r2, [r3, #0]
  return result;
 8002f74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f78:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002f7c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f7e:	fab3 f383 	clz	r3, r3
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	095b      	lsrs	r3, r3, #5
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	f043 0302 	orr.w	r3, r3, #2
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d102      	bne.n	8002f98 <HAL_RCC_OscConfig+0xa4c>
 8002f92:	4b84      	ldr	r3, [pc, #528]	@ (80031a4 <HAL_RCC_OscConfig+0xc58>)
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	e013      	b.n	8002fc0 <HAL_RCC_OscConfig+0xa74>
 8002f98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f9c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	fa93 f2a3 	rbit	r2, r3
 8002fb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	4b79      	ldr	r3, [pc, #484]	@ (80031a4 <HAL_RCC_OscConfig+0xc58>)
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fc4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002fc8:	2102      	movs	r1, #2
 8002fca:	6011      	str	r1, [r2, #0]
 8002fcc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fd0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002fd4:	6812      	ldr	r2, [r2, #0]
 8002fd6:	fa92 f1a2 	rbit	r1, r2
 8002fda:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fde:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002fe2:	6011      	str	r1, [r2, #0]
  return result;
 8002fe4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fe8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002fec:	6812      	ldr	r2, [r2, #0]
 8002fee:	fab2 f282 	clz	r2, r2
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	f002 021f 	and.w	r2, r2, #31
 8002ffe:	2101      	movs	r1, #1
 8003000:	fa01 f202 	lsl.w	r2, r1, r2
 8003004:	4013      	ands	r3, r2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d084      	beq.n	8002f14 <HAL_RCC_OscConfig+0x9c8>
 800300a:	e07f      	b.n	800310c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300c:	f7fe ff44 	bl	8001e98 <HAL_GetTick>
 8003010:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003014:	e00b      	b.n	800302e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003016:	f7fe ff3f 	bl	8001e98 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003026:	4293      	cmp	r3, r2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e2c4      	b.n	80035b8 <HAL_RCC_OscConfig+0x106c>
 800302e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003032:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003036:	2202      	movs	r2, #2
 8003038:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800303e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	fa93 f2a3 	rbit	r2, r3
 8003048:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800304c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003056:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800305a:	2202      	movs	r2, #2
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003062:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	fa93 f2a3 	rbit	r2, r3
 800306c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003070:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003074:	601a      	str	r2, [r3, #0]
  return result;
 8003076:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800307a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800307e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003080:	fab3 f383 	clz	r3, r3
 8003084:	b2db      	uxtb	r3, r3
 8003086:	095b      	lsrs	r3, r3, #5
 8003088:	b2db      	uxtb	r3, r3
 800308a:	f043 0302 	orr.w	r3, r3, #2
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d102      	bne.n	800309a <HAL_RCC_OscConfig+0xb4e>
 8003094:	4b43      	ldr	r3, [pc, #268]	@ (80031a4 <HAL_RCC_OscConfig+0xc58>)
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	e013      	b.n	80030c2 <HAL_RCC_OscConfig+0xb76>
 800309a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800309e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80030a2:	2202      	movs	r2, #2
 80030a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030aa:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	fa93 f2a3 	rbit	r2, r3
 80030b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030b8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	4b39      	ldr	r3, [pc, #228]	@ (80031a4 <HAL_RCC_OscConfig+0xc58>)
 80030c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030c6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80030ca:	2102      	movs	r1, #2
 80030cc:	6011      	str	r1, [r2, #0]
 80030ce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030d2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	fa92 f1a2 	rbit	r1, r2
 80030dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030e0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80030e4:	6011      	str	r1, [r2, #0]
  return result;
 80030e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030ea:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80030ee:	6812      	ldr	r2, [r2, #0]
 80030f0:	fab2 f282 	clz	r2, r2
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	f002 021f 	and.w	r2, r2, #31
 8003100:	2101      	movs	r1, #1
 8003102:	fa01 f202 	lsl.w	r2, r1, r2
 8003106:	4013      	ands	r3, r2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d184      	bne.n	8003016 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800310c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003110:	2b01      	cmp	r3, #1
 8003112:	d105      	bne.n	8003120 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003114:	4b23      	ldr	r3, [pc, #140]	@ (80031a4 <HAL_RCC_OscConfig+0xc58>)
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	4a22      	ldr	r2, [pc, #136]	@ (80031a4 <HAL_RCC_OscConfig+0xc58>)
 800311a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800311e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003120:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003124:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 8242 	beq.w	80035b6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003132:	4b1c      	ldr	r3, [pc, #112]	@ (80031a4 <HAL_RCC_OscConfig+0xc58>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	2b08      	cmp	r3, #8
 800313c:	f000 8213 	beq.w	8003566 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003140:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003144:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	2b02      	cmp	r3, #2
 800314e:	f040 8162 	bne.w	8003416 <HAL_RCC_OscConfig+0xeca>
 8003152:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003156:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800315a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800315e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003160:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003164:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	fa93 f2a3 	rbit	r2, r3
 800316e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003172:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003176:	601a      	str	r2, [r3, #0]
  return result;
 8003178:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800317c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003180:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003182:	fab3 f383 	clz	r3, r3
 8003186:	b2db      	uxtb	r3, r3
 8003188:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800318c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	461a      	mov	r2, r3
 8003194:	2300      	movs	r3, #0
 8003196:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003198:	f7fe fe7e 	bl	8001e98 <HAL_GetTick>
 800319c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031a0:	e00c      	b.n	80031bc <HAL_RCC_OscConfig+0xc70>
 80031a2:	bf00      	nop
 80031a4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031a8:	f7fe fe76 	bl	8001e98 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e1fd      	b.n	80035b8 <HAL_RCC_OscConfig+0x106c>
 80031bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80031c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ce:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	fa93 f2a3 	rbit	r2, r3
 80031d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031dc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80031e0:	601a      	str	r2, [r3, #0]
  return result;
 80031e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80031ea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ec:	fab3 f383 	clz	r3, r3
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d102      	bne.n	8003206 <HAL_RCC_OscConfig+0xcba>
 8003200:	4bb0      	ldr	r3, [pc, #704]	@ (80034c4 <HAL_RCC_OscConfig+0xf78>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	e027      	b.n	8003256 <HAL_RCC_OscConfig+0xd0a>
 8003206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800320a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800320e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003212:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003214:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003218:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	fa93 f2a3 	rbit	r2, r3
 8003222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003226:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003230:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003234:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800323e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	fa93 f2a3 	rbit	r2, r3
 8003248:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800324c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	4b9c      	ldr	r3, [pc, #624]	@ (80034c4 <HAL_RCC_OscConfig+0xf78>)
 8003254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003256:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800325a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800325e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003262:	6011      	str	r1, [r2, #0]
 8003264:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003268:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800326c:	6812      	ldr	r2, [r2, #0]
 800326e:	fa92 f1a2 	rbit	r1, r2
 8003272:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003276:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800327a:	6011      	str	r1, [r2, #0]
  return result;
 800327c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003280:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003284:	6812      	ldr	r2, [r2, #0]
 8003286:	fab2 f282 	clz	r2, r2
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	f042 0220 	orr.w	r2, r2, #32
 8003290:	b2d2      	uxtb	r2, r2
 8003292:	f002 021f 	and.w	r2, r2, #31
 8003296:	2101      	movs	r1, #1
 8003298:	fa01 f202 	lsl.w	r2, r1, r2
 800329c:	4013      	ands	r3, r2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d182      	bne.n	80031a8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032a2:	4b88      	ldr	r3, [pc, #544]	@ (80034c4 <HAL_RCC_OscConfig+0xf78>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80032aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80032b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	430b      	orrs	r3, r1
 80032c4:	497f      	ldr	r1, [pc, #508]	@ (80034c4 <HAL_RCC_OscConfig+0xf78>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	604b      	str	r3, [r1, #4]
 80032ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ce:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80032d2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80032d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032dc:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	fa93 f2a3 	rbit	r2, r3
 80032e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ea:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80032ee:	601a      	str	r2, [r3, #0]
  return result;
 80032f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80032f8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032fa:	fab3 f383 	clz	r3, r3
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003304:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	461a      	mov	r2, r3
 800330c:	2301      	movs	r3, #1
 800330e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003310:	f7fe fdc2 	bl	8001e98 <HAL_GetTick>
 8003314:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003318:	e009      	b.n	800332e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800331a:	f7fe fdbd 	bl	8001e98 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e144      	b.n	80035b8 <HAL_RCC_OscConfig+0x106c>
 800332e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003332:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003336:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800333a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003340:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	fa93 f2a3 	rbit	r2, r3
 800334a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800334e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003352:	601a      	str	r2, [r3, #0]
  return result;
 8003354:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003358:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800335c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800335e:	fab3 f383 	clz	r3, r3
 8003362:	b2db      	uxtb	r3, r3
 8003364:	095b      	lsrs	r3, r3, #5
 8003366:	b2db      	uxtb	r3, r3
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b01      	cmp	r3, #1
 8003370:	d102      	bne.n	8003378 <HAL_RCC_OscConfig+0xe2c>
 8003372:	4b54      	ldr	r3, [pc, #336]	@ (80034c4 <HAL_RCC_OscConfig+0xf78>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	e027      	b.n	80033c8 <HAL_RCC_OscConfig+0xe7c>
 8003378:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800337c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003380:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003384:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003386:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800338a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	fa93 f2a3 	rbit	r2, r3
 8003394:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003398:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80033a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033b0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	fa93 f2a3 	rbit	r2, r3
 80033ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033be:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	4b3f      	ldr	r3, [pc, #252]	@ (80034c4 <HAL_RCC_OscConfig+0xf78>)
 80033c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033cc:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80033d0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80033d4:	6011      	str	r1, [r2, #0]
 80033d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033da:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80033de:	6812      	ldr	r2, [r2, #0]
 80033e0:	fa92 f1a2 	rbit	r1, r2
 80033e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033e8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80033ec:	6011      	str	r1, [r2, #0]
  return result;
 80033ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033f2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80033f6:	6812      	ldr	r2, [r2, #0]
 80033f8:	fab2 f282 	clz	r2, r2
 80033fc:	b2d2      	uxtb	r2, r2
 80033fe:	f042 0220 	orr.w	r2, r2, #32
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	f002 021f 	and.w	r2, r2, #31
 8003408:	2101      	movs	r1, #1
 800340a:	fa01 f202 	lsl.w	r2, r1, r2
 800340e:	4013      	ands	r3, r2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d082      	beq.n	800331a <HAL_RCC_OscConfig+0xdce>
 8003414:	e0cf      	b.n	80035b6 <HAL_RCC_OscConfig+0x106a>
 8003416:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800341a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800341e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003422:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003424:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003428:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	fa93 f2a3 	rbit	r2, r3
 8003432:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003436:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800343a:	601a      	str	r2, [r3, #0]
  return result;
 800343c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003440:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003444:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003446:	fab3 f383 	clz	r3, r3
 800344a:	b2db      	uxtb	r3, r3
 800344c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003450:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	461a      	mov	r2, r3
 8003458:	2300      	movs	r3, #0
 800345a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345c:	f7fe fd1c 	bl	8001e98 <HAL_GetTick>
 8003460:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003464:	e009      	b.n	800347a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003466:	f7fe fd17 	bl	8001e98 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e09e      	b.n	80035b8 <HAL_RCC_OscConfig+0x106c>
 800347a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800347e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003482:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003486:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003488:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800348c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	fa93 f2a3 	rbit	r2, r3
 8003496:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800349a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800349e:	601a      	str	r2, [r3, #0]
  return result;
 80034a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034a4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80034a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034aa:	fab3 f383 	clz	r3, r3
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	095b      	lsrs	r3, r3, #5
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d104      	bne.n	80034c8 <HAL_RCC_OscConfig+0xf7c>
 80034be:	4b01      	ldr	r3, [pc, #4]	@ (80034c4 <HAL_RCC_OscConfig+0xf78>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	e029      	b.n	8003518 <HAL_RCC_OscConfig+0xfcc>
 80034c4:	40021000 	.word	0x40021000
 80034c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034cc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80034d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034da:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	fa93 f2a3 	rbit	r2, r3
 80034e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80034f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003500:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	fa93 f2a3 	rbit	r2, r3
 800350a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800350e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	4b2b      	ldr	r3, [pc, #172]	@ (80035c4 <HAL_RCC_OscConfig+0x1078>)
 8003516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003518:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800351c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003520:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003524:	6011      	str	r1, [r2, #0]
 8003526:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800352a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800352e:	6812      	ldr	r2, [r2, #0]
 8003530:	fa92 f1a2 	rbit	r1, r2
 8003534:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003538:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800353c:	6011      	str	r1, [r2, #0]
  return result;
 800353e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003542:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003546:	6812      	ldr	r2, [r2, #0]
 8003548:	fab2 f282 	clz	r2, r2
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	f042 0220 	orr.w	r2, r2, #32
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	f002 021f 	and.w	r2, r2, #31
 8003558:	2101      	movs	r1, #1
 800355a:	fa01 f202 	lsl.w	r2, r1, r2
 800355e:	4013      	ands	r3, r2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d180      	bne.n	8003466 <HAL_RCC_OscConfig+0xf1a>
 8003564:	e027      	b.n	80035b6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003566:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800356a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e01e      	b.n	80035b8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800357a:	4b12      	ldr	r3, [pc, #72]	@ (80035c4 <HAL_RCC_OscConfig+0x1078>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003582:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003586:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800358a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800358e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	429a      	cmp	r2, r3
 8003598:	d10b      	bne.n	80035b2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800359a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800359e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80035a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d001      	beq.n	80035b6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e000      	b.n	80035b8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40021000 	.word	0x40021000

080035c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b09e      	sub	sp, #120	@ 0x78
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80035d2:	2300      	movs	r3, #0
 80035d4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e162      	b.n	80038a6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035e0:	4b90      	ldr	r3, [pc, #576]	@ (8003824 <HAL_RCC_ClockConfig+0x25c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d910      	bls.n	8003610 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ee:	4b8d      	ldr	r3, [pc, #564]	@ (8003824 <HAL_RCC_ClockConfig+0x25c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f023 0207 	bic.w	r2, r3, #7
 80035f6:	498b      	ldr	r1, [pc, #556]	@ (8003824 <HAL_RCC_ClockConfig+0x25c>)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fe:	4b89      	ldr	r3, [pc, #548]	@ (8003824 <HAL_RCC_ClockConfig+0x25c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	429a      	cmp	r2, r3
 800360a:	d001      	beq.n	8003610 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e14a      	b.n	80038a6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d008      	beq.n	800362e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800361c:	4b82      	ldr	r3, [pc, #520]	@ (8003828 <HAL_RCC_ClockConfig+0x260>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	497f      	ldr	r1, [pc, #508]	@ (8003828 <HAL_RCC_ClockConfig+0x260>)
 800362a:	4313      	orrs	r3, r2
 800362c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 80dc 	beq.w	80037f4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d13c      	bne.n	80036be <HAL_RCC_ClockConfig+0xf6>
 8003644:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003648:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800364c:	fa93 f3a3 	rbit	r3, r3
 8003650:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003652:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003654:	fab3 f383 	clz	r3, r3
 8003658:	b2db      	uxtb	r3, r3
 800365a:	095b      	lsrs	r3, r3, #5
 800365c:	b2db      	uxtb	r3, r3
 800365e:	f043 0301 	orr.w	r3, r3, #1
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b01      	cmp	r3, #1
 8003666:	d102      	bne.n	800366e <HAL_RCC_ClockConfig+0xa6>
 8003668:	4b6f      	ldr	r3, [pc, #444]	@ (8003828 <HAL_RCC_ClockConfig+0x260>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	e00f      	b.n	800368e <HAL_RCC_ClockConfig+0xc6>
 800366e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003672:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003674:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003676:	fa93 f3a3 	rbit	r3, r3
 800367a:	667b      	str	r3, [r7, #100]	@ 0x64
 800367c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003680:	663b      	str	r3, [r7, #96]	@ 0x60
 8003682:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003684:	fa93 f3a3 	rbit	r3, r3
 8003688:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800368a:	4b67      	ldr	r3, [pc, #412]	@ (8003828 <HAL_RCC_ClockConfig+0x260>)
 800368c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003692:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003694:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003696:	fa92 f2a2 	rbit	r2, r2
 800369a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800369c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800369e:	fab2 f282 	clz	r2, r2
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	f042 0220 	orr.w	r2, r2, #32
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	f002 021f 	and.w	r2, r2, #31
 80036ae:	2101      	movs	r1, #1
 80036b0:	fa01 f202 	lsl.w	r2, r1, r2
 80036b4:	4013      	ands	r3, r2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d17b      	bne.n	80037b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e0f3      	b.n	80038a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d13c      	bne.n	8003740 <HAL_RCC_ClockConfig+0x178>
 80036c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036ca:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036ce:	fa93 f3a3 	rbit	r3, r3
 80036d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80036d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d6:	fab3 f383 	clz	r3, r3
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	095b      	lsrs	r3, r3, #5
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	f043 0301 	orr.w	r3, r3, #1
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d102      	bne.n	80036f0 <HAL_RCC_ClockConfig+0x128>
 80036ea:	4b4f      	ldr	r3, [pc, #316]	@ (8003828 <HAL_RCC_ClockConfig+0x260>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	e00f      	b.n	8003710 <HAL_RCC_ClockConfig+0x148>
 80036f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036f8:	fa93 f3a3 	rbit	r3, r3
 80036fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80036fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003702:	643b      	str	r3, [r7, #64]	@ 0x40
 8003704:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003706:	fa93 f3a3 	rbit	r3, r3
 800370a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800370c:	4b46      	ldr	r3, [pc, #280]	@ (8003828 <HAL_RCC_ClockConfig+0x260>)
 800370e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003710:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003714:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003716:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003718:	fa92 f2a2 	rbit	r2, r2
 800371c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800371e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003720:	fab2 f282 	clz	r2, r2
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	f042 0220 	orr.w	r2, r2, #32
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	f002 021f 	and.w	r2, r2, #31
 8003730:	2101      	movs	r1, #1
 8003732:	fa01 f202 	lsl.w	r2, r1, r2
 8003736:	4013      	ands	r3, r2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d13a      	bne.n	80037b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e0b2      	b.n	80038a6 <HAL_RCC_ClockConfig+0x2de>
 8003740:	2302      	movs	r3, #2
 8003742:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003746:	fa93 f3a3 	rbit	r3, r3
 800374a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800374c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374e:	fab3 f383 	clz	r3, r3
 8003752:	b2db      	uxtb	r3, r3
 8003754:	095b      	lsrs	r3, r3, #5
 8003756:	b2db      	uxtb	r3, r3
 8003758:	f043 0301 	orr.w	r3, r3, #1
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b01      	cmp	r3, #1
 8003760:	d102      	bne.n	8003768 <HAL_RCC_ClockConfig+0x1a0>
 8003762:	4b31      	ldr	r3, [pc, #196]	@ (8003828 <HAL_RCC_ClockConfig+0x260>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	e00d      	b.n	8003784 <HAL_RCC_ClockConfig+0x1bc>
 8003768:	2302      	movs	r3, #2
 800376a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800376e:	fa93 f3a3 	rbit	r3, r3
 8003772:	627b      	str	r3, [r7, #36]	@ 0x24
 8003774:	2302      	movs	r3, #2
 8003776:	623b      	str	r3, [r7, #32]
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	fa93 f3a3 	rbit	r3, r3
 800377e:	61fb      	str	r3, [r7, #28]
 8003780:	4b29      	ldr	r3, [pc, #164]	@ (8003828 <HAL_RCC_ClockConfig+0x260>)
 8003782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003784:	2202      	movs	r2, #2
 8003786:	61ba      	str	r2, [r7, #24]
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	fa92 f2a2 	rbit	r2, r2
 800378e:	617a      	str	r2, [r7, #20]
  return result;
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	fab2 f282 	clz	r2, r2
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	f042 0220 	orr.w	r2, r2, #32
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	f002 021f 	and.w	r2, r2, #31
 80037a2:	2101      	movs	r1, #1
 80037a4:	fa01 f202 	lsl.w	r2, r1, r2
 80037a8:	4013      	ands	r3, r2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e079      	b.n	80038a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003828 <HAL_RCC_ClockConfig+0x260>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f023 0203 	bic.w	r2, r3, #3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	491a      	ldr	r1, [pc, #104]	@ (8003828 <HAL_RCC_ClockConfig+0x260>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037c4:	f7fe fb68 	bl	8001e98 <HAL_GetTick>
 80037c8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ca:	e00a      	b.n	80037e2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037cc:	f7fe fb64 	bl	8001e98 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037da:	4293      	cmp	r3, r2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e061      	b.n	80038a6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e2:	4b11      	ldr	r3, [pc, #68]	@ (8003828 <HAL_RCC_ClockConfig+0x260>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f003 020c 	and.w	r2, r3, #12
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d1eb      	bne.n	80037cc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003824 <HAL_RCC_ClockConfig+0x25c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d214      	bcs.n	800382c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003802:	4b08      	ldr	r3, [pc, #32]	@ (8003824 <HAL_RCC_ClockConfig+0x25c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f023 0207 	bic.w	r2, r3, #7
 800380a:	4906      	ldr	r1, [pc, #24]	@ (8003824 <HAL_RCC_ClockConfig+0x25c>)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	4313      	orrs	r3, r2
 8003810:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003812:	4b04      	ldr	r3, [pc, #16]	@ (8003824 <HAL_RCC_ClockConfig+0x25c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	429a      	cmp	r2, r3
 800381e:	d005      	beq.n	800382c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e040      	b.n	80038a6 <HAL_RCC_ClockConfig+0x2de>
 8003824:	40022000 	.word	0x40022000
 8003828:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	d008      	beq.n	800384a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003838:	4b1d      	ldr	r3, [pc, #116]	@ (80038b0 <HAL_RCC_ClockConfig+0x2e8>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	491a      	ldr	r1, [pc, #104]	@ (80038b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003846:	4313      	orrs	r3, r2
 8003848:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d009      	beq.n	800386a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003856:	4b16      	ldr	r3, [pc, #88]	@ (80038b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	4912      	ldr	r1, [pc, #72]	@ (80038b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003866:	4313      	orrs	r3, r2
 8003868:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800386a:	f000 f829 	bl	80038c0 <HAL_RCC_GetSysClockFreq>
 800386e:	4601      	mov	r1, r0
 8003870:	4b0f      	ldr	r3, [pc, #60]	@ (80038b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003878:	22f0      	movs	r2, #240	@ 0xf0
 800387a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	fa92 f2a2 	rbit	r2, r2
 8003882:	60fa      	str	r2, [r7, #12]
  return result;
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	fab2 f282 	clz	r2, r2
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	40d3      	lsrs	r3, r2
 800388e:	4a09      	ldr	r2, [pc, #36]	@ (80038b4 <HAL_RCC_ClockConfig+0x2ec>)
 8003890:	5cd3      	ldrb	r3, [r2, r3]
 8003892:	fa21 f303 	lsr.w	r3, r1, r3
 8003896:	4a08      	ldr	r2, [pc, #32]	@ (80038b8 <HAL_RCC_ClockConfig+0x2f0>)
 8003898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800389a:	4b08      	ldr	r3, [pc, #32]	@ (80038bc <HAL_RCC_ClockConfig+0x2f4>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fe fab6 	bl	8001e10 <HAL_InitTick>
  
  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3778      	adds	r7, #120	@ 0x78
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40021000 	.word	0x40021000
 80038b4:	080070a4 	.word	0x080070a4
 80038b8:	20000004 	.word	0x20000004
 80038bc:	20000008 	.word	0x20000008

080038c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b08b      	sub	sp, #44	@ 0x2c
 80038c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	61fb      	str	r3, [r7, #28]
 80038ca:	2300      	movs	r3, #0
 80038cc:	61bb      	str	r3, [r7, #24]
 80038ce:	2300      	movs	r3, #0
 80038d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80038da:	4b29      	ldr	r3, [pc, #164]	@ (8003980 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f003 030c 	and.w	r3, r3, #12
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d002      	beq.n	80038f0 <HAL_RCC_GetSysClockFreq+0x30>
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d003      	beq.n	80038f6 <HAL_RCC_GetSysClockFreq+0x36>
 80038ee:	e03c      	b.n	800396a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038f0:	4b24      	ldr	r3, [pc, #144]	@ (8003984 <HAL_RCC_GetSysClockFreq+0xc4>)
 80038f2:	623b      	str	r3, [r7, #32]
      break;
 80038f4:	e03c      	b.n	8003970 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80038fc:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8003900:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	fa92 f2a2 	rbit	r2, r2
 8003908:	607a      	str	r2, [r7, #4]
  return result;
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	fab2 f282 	clz	r2, r2
 8003910:	b2d2      	uxtb	r2, r2
 8003912:	40d3      	lsrs	r3, r2
 8003914:	4a1c      	ldr	r2, [pc, #112]	@ (8003988 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003916:	5cd3      	ldrb	r3, [r2, r3]
 8003918:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800391a:	4b19      	ldr	r3, [pc, #100]	@ (8003980 <HAL_RCC_GetSysClockFreq+0xc0>)
 800391c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	220f      	movs	r2, #15
 8003924:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	fa92 f2a2 	rbit	r2, r2
 800392c:	60fa      	str	r2, [r7, #12]
  return result;
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	fab2 f282 	clz	r2, r2
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	40d3      	lsrs	r3, r2
 8003938:	4a14      	ldr	r2, [pc, #80]	@ (800398c <HAL_RCC_GetSysClockFreq+0xcc>)
 800393a:	5cd3      	ldrb	r3, [r2, r3]
 800393c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003948:	4a0e      	ldr	r2, [pc, #56]	@ (8003984 <HAL_RCC_GetSysClockFreq+0xc4>)
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	fb02 f303 	mul.w	r3, r2, r3
 8003956:	627b      	str	r3, [r7, #36]	@ 0x24
 8003958:	e004      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	4a0c      	ldr	r2, [pc, #48]	@ (8003990 <HAL_RCC_GetSysClockFreq+0xd0>)
 800395e:	fb02 f303 	mul.w	r3, r2, r3
 8003962:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003966:	623b      	str	r3, [r7, #32]
      break;
 8003968:	e002      	b.n	8003970 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800396a:	4b06      	ldr	r3, [pc, #24]	@ (8003984 <HAL_RCC_GetSysClockFreq+0xc4>)
 800396c:	623b      	str	r3, [r7, #32]
      break;
 800396e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003970:	6a3b      	ldr	r3, [r7, #32]
}
 8003972:	4618      	mov	r0, r3
 8003974:	372c      	adds	r7, #44	@ 0x2c
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	40021000 	.word	0x40021000
 8003984:	007a1200 	.word	0x007a1200
 8003988:	080070bc 	.word	0x080070bc
 800398c:	080070cc 	.word	0x080070cc
 8003990:	003d0900 	.word	0x003d0900

08003994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003998:	4b03      	ldr	r3, [pc, #12]	@ (80039a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800399a:	681b      	ldr	r3, [r3, #0]
}
 800399c:	4618      	mov	r0, r3
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	20000004 	.word	0x20000004

080039ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80039b2:	f7ff ffef 	bl	8003994 <HAL_RCC_GetHCLKFreq>
 80039b6:	4601      	mov	r1, r0
 80039b8:	4b0b      	ldr	r3, [pc, #44]	@ (80039e8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80039c0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80039c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	fa92 f2a2 	rbit	r2, r2
 80039cc:	603a      	str	r2, [r7, #0]
  return result;
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	fab2 f282 	clz	r2, r2
 80039d4:	b2d2      	uxtb	r2, r2
 80039d6:	40d3      	lsrs	r3, r2
 80039d8:	4a04      	ldr	r2, [pc, #16]	@ (80039ec <HAL_RCC_GetPCLK1Freq+0x40>)
 80039da:	5cd3      	ldrb	r3, [r2, r3]
 80039dc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80039e0:	4618      	mov	r0, r3
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40021000 	.word	0x40021000
 80039ec:	080070b4 	.word	0x080070b4

080039f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80039f6:	f7ff ffcd 	bl	8003994 <HAL_RCC_GetHCLKFreq>
 80039fa:	4601      	mov	r1, r0
 80039fc:	4b0b      	ldr	r3, [pc, #44]	@ (8003a2c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003a04:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003a08:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	fa92 f2a2 	rbit	r2, r2
 8003a10:	603a      	str	r2, [r7, #0]
  return result;
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	fab2 f282 	clz	r2, r2
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	40d3      	lsrs	r3, r2
 8003a1c:	4a04      	ldr	r2, [pc, #16]	@ (8003a30 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003a1e:	5cd3      	ldrb	r3, [r2, r3]
 8003a20:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003a24:	4618      	mov	r0, r3
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	080070b4 	.word	0x080070b4

08003a34 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b092      	sub	sp, #72	@ 0x48
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003a44:	2300      	movs	r3, #0
 8003a46:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 80d4 	beq.w	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a58:	4b4e      	ldr	r3, [pc, #312]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10e      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a64:	4b4b      	ldr	r3, [pc, #300]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	4a4a      	ldr	r2, [pc, #296]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a6e:	61d3      	str	r3, [r2, #28]
 8003a70:	4b48      	ldr	r3, [pc, #288]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a78:	60bb      	str	r3, [r7, #8]
 8003a7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a82:	4b45      	ldr	r3, [pc, #276]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d118      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a8e:	4b42      	ldr	r3, [pc, #264]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a41      	ldr	r2, [pc, #260]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a98:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a9a:	f7fe f9fd 	bl	8001e98 <HAL_GetTick>
 8003a9e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa2:	f7fe f9f9 	bl	8001e98 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b64      	cmp	r3, #100	@ 0x64
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e14b      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab4:	4b38      	ldr	r3, [pc, #224]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0f0      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ac0:	4b34      	ldr	r3, [pc, #208]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003aca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 8084 	beq.w	8003bda <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ada:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d07c      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ae0:	4b2c      	ldr	r3, [pc, #176]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003aea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003aee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af2:	fa93 f3a3 	rbit	r3, r3
 8003af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003afa:	fab3 f383 	clz	r3, r3
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	461a      	mov	r2, r3
 8003b02:	4b26      	ldr	r3, [pc, #152]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b04:	4413      	add	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	461a      	mov	r2, r3
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b16:	fa93 f3a3 	rbit	r3, r3
 8003b1a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b1e:	fab3 f383 	clz	r3, r3
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	461a      	mov	r2, r3
 8003b26:	4b1d      	ldr	r3, [pc, #116]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b28:	4413      	add	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	2300      	movs	r3, #0
 8003b30:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b32:	4a18      	ldr	r2, [pc, #96]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b36:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d04b      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b42:	f7fe f9a9 	bl	8001e98 <HAL_GetTick>
 8003b46:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b48:	e00a      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b4a:	f7fe f9a5 	bl	8001e98 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e0f5      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003b60:	2302      	movs	r3, #2
 8003b62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b66:	fa93 f3a3 	rbit	r3, r3
 8003b6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	623b      	str	r3, [r7, #32]
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	fa93 f3a3 	rbit	r3, r3
 8003b76:	61fb      	str	r3, [r7, #28]
  return result;
 8003b78:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7a:	fab3 f383 	clz	r3, r3
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	095b      	lsrs	r3, r3, #5
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	f043 0302 	orr.w	r3, r3, #2
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d108      	bne.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003b8e:	4b01      	ldr	r3, [pc, #4]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	e00d      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003b94:	40021000 	.word	0x40021000
 8003b98:	40007000 	.word	0x40007000
 8003b9c:	10908100 	.word	0x10908100
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	fa93 f3a3 	rbit	r3, r3
 8003baa:	617b      	str	r3, [r7, #20]
 8003bac:	4b69      	ldr	r3, [pc, #420]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	613a      	str	r2, [r7, #16]
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	fa92 f2a2 	rbit	r2, r2
 8003bba:	60fa      	str	r2, [r7, #12]
  return result;
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	fab2 f282 	clz	r2, r2
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	f002 021f 	and.w	r2, r2, #31
 8003bce:	2101      	movs	r1, #1
 8003bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0b7      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003bda:	4b5e      	ldr	r3, [pc, #376]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	495b      	ldr	r1, [pc, #364]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bec:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d105      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bf4:	4b57      	ldr	r3, [pc, #348]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	4a56      	ldr	r2, [pc, #344]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bfe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d008      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c0c:	4b51      	ldr	r3, [pc, #324]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c10:	f023 0203 	bic.w	r2, r3, #3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	494e      	ldr	r1, [pc, #312]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0320 	and.w	r3, r3, #32
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d008      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c2a:	4b4a      	ldr	r3, [pc, #296]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2e:	f023 0210 	bic.w	r2, r3, #16
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	4947      	ldr	r1, [pc, #284]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d008      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003c48:	4b42      	ldr	r3, [pc, #264]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c54:	493f      	ldr	r1, [pc, #252]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d008      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c66:	4b3b      	ldr	r3, [pc, #236]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6a:	f023 0220 	bic.w	r2, r3, #32
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	4938      	ldr	r1, [pc, #224]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d008      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c84:	4b33      	ldr	r3, [pc, #204]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c88:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	4930      	ldr	r1, [pc, #192]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d008      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ca2:	4b2c      	ldr	r3, [pc, #176]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	4929      	ldr	r1, [pc, #164]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d008      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003cc0:	4b24      	ldr	r3, [pc, #144]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc4:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	4921      	ldr	r1, [pc, #132]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d008      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003cde:	4b1d      	ldr	r3, [pc, #116]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	491a      	ldr	r1, [pc, #104]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d008      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003cfc:	4b15      	ldr	r3, [pc, #84]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d00:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d08:	4912      	ldr	r1, [pc, #72]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d008      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d26:	490b      	ldr	r1, [pc, #44]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d008      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003d38:	4b06      	ldr	r3, [pc, #24]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d44:	4903      	ldr	r1, [pc, #12]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3748      	adds	r7, #72	@ 0x48
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40021000 	.word	0x40021000

08003d58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e049      	b.n	8003dfe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d106      	bne.n	8003d84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7fd fd16 	bl	80017b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2202      	movs	r2, #2
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3304      	adds	r3, #4
 8003d94:	4619      	mov	r1, r3
 8003d96:	4610      	mov	r0, r2
 8003d98:	f000 fcf0 	bl	800477c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d001      	beq.n	8003e20 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e033      	b.n	8003e88 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a19      	ldr	r2, [pc, #100]	@ (8003e94 <HAL_TIM_Base_Start+0x8c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d009      	beq.n	8003e46 <HAL_TIM_Base_Start+0x3e>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e3a:	d004      	beq.n	8003e46 <HAL_TIM_Base_Start+0x3e>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a15      	ldr	r2, [pc, #84]	@ (8003e98 <HAL_TIM_Base_Start+0x90>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d115      	bne.n	8003e72 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	4b13      	ldr	r3, [pc, #76]	@ (8003e9c <HAL_TIM_Base_Start+0x94>)
 8003e4e:	4013      	ands	r3, r2
 8003e50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2b06      	cmp	r3, #6
 8003e56:	d015      	beq.n	8003e84 <HAL_TIM_Base_Start+0x7c>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e5e:	d011      	beq.n	8003e84 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0201 	orr.w	r2, r2, #1
 8003e6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e70:	e008      	b.n	8003e84 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f042 0201 	orr.w	r2, r2, #1
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	e000      	b.n	8003e86 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e84:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	40012c00 	.word	0x40012c00
 8003e98:	40014000 	.word	0x40014000
 8003e9c:	00010007 	.word	0x00010007

08003ea0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e049      	b.n	8003f46 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d106      	bne.n	8003ecc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7fd fcd0 	bl	800186c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3304      	adds	r3, #4
 8003edc:	4619      	mov	r1, r3
 8003ede:	4610      	mov	r0, r2
 8003ee0:	f000 fc4c 	bl	800477c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
	...

08003f50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d109      	bne.n	8003f74 <HAL_TIM_PWM_Start+0x24>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	bf14      	ite	ne
 8003f6c:	2301      	movne	r3, #1
 8003f6e:	2300      	moveq	r3, #0
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	e03c      	b.n	8003fee <HAL_TIM_PWM_Start+0x9e>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d109      	bne.n	8003f8e <HAL_TIM_PWM_Start+0x3e>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	bf14      	ite	ne
 8003f86:	2301      	movne	r3, #1
 8003f88:	2300      	moveq	r3, #0
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	e02f      	b.n	8003fee <HAL_TIM_PWM_Start+0x9e>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d109      	bne.n	8003fa8 <HAL_TIM_PWM_Start+0x58>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	bf14      	ite	ne
 8003fa0:	2301      	movne	r3, #1
 8003fa2:	2300      	moveq	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	e022      	b.n	8003fee <HAL_TIM_PWM_Start+0x9e>
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	2b0c      	cmp	r3, #12
 8003fac:	d109      	bne.n	8003fc2 <HAL_TIM_PWM_Start+0x72>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	bf14      	ite	ne
 8003fba:	2301      	movne	r3, #1
 8003fbc:	2300      	moveq	r3, #0
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	e015      	b.n	8003fee <HAL_TIM_PWM_Start+0x9e>
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b10      	cmp	r3, #16
 8003fc6:	d109      	bne.n	8003fdc <HAL_TIM_PWM_Start+0x8c>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	bf14      	ite	ne
 8003fd4:	2301      	movne	r3, #1
 8003fd6:	2300      	moveq	r3, #0
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	e008      	b.n	8003fee <HAL_TIM_PWM_Start+0x9e>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	bf14      	ite	ne
 8003fe8:	2301      	movne	r3, #1
 8003fea:	2300      	moveq	r3, #0
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e083      	b.n	80040fe <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d104      	bne.n	8004006 <HAL_TIM_PWM_Start+0xb6>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004004:	e023      	b.n	800404e <HAL_TIM_PWM_Start+0xfe>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b04      	cmp	r3, #4
 800400a:	d104      	bne.n	8004016 <HAL_TIM_PWM_Start+0xc6>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2202      	movs	r2, #2
 8004010:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004014:	e01b      	b.n	800404e <HAL_TIM_PWM_Start+0xfe>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b08      	cmp	r3, #8
 800401a:	d104      	bne.n	8004026 <HAL_TIM_PWM_Start+0xd6>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2202      	movs	r2, #2
 8004020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004024:	e013      	b.n	800404e <HAL_TIM_PWM_Start+0xfe>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b0c      	cmp	r3, #12
 800402a:	d104      	bne.n	8004036 <HAL_TIM_PWM_Start+0xe6>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2202      	movs	r2, #2
 8004030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004034:	e00b      	b.n	800404e <HAL_TIM_PWM_Start+0xfe>
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	2b10      	cmp	r3, #16
 800403a:	d104      	bne.n	8004046 <HAL_TIM_PWM_Start+0xf6>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004044:	e003      	b.n	800404e <HAL_TIM_PWM_Start+0xfe>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2202      	movs	r2, #2
 800404a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2201      	movs	r2, #1
 8004054:	6839      	ldr	r1, [r7, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f000 ff3e 	bl	8004ed8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a29      	ldr	r2, [pc, #164]	@ (8004108 <HAL_TIM_PWM_Start+0x1b8>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d00e      	beq.n	8004084 <HAL_TIM_PWM_Start+0x134>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a28      	ldr	r2, [pc, #160]	@ (800410c <HAL_TIM_PWM_Start+0x1bc>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d009      	beq.n	8004084 <HAL_TIM_PWM_Start+0x134>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a26      	ldr	r2, [pc, #152]	@ (8004110 <HAL_TIM_PWM_Start+0x1c0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d004      	beq.n	8004084 <HAL_TIM_PWM_Start+0x134>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a25      	ldr	r2, [pc, #148]	@ (8004114 <HAL_TIM_PWM_Start+0x1c4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d101      	bne.n	8004088 <HAL_TIM_PWM_Start+0x138>
 8004084:	2301      	movs	r3, #1
 8004086:	e000      	b.n	800408a <HAL_TIM_PWM_Start+0x13a>
 8004088:	2300      	movs	r3, #0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d007      	beq.n	800409e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800409c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a19      	ldr	r2, [pc, #100]	@ (8004108 <HAL_TIM_PWM_Start+0x1b8>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d009      	beq.n	80040bc <HAL_TIM_PWM_Start+0x16c>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040b0:	d004      	beq.n	80040bc <HAL_TIM_PWM_Start+0x16c>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a15      	ldr	r2, [pc, #84]	@ (800410c <HAL_TIM_PWM_Start+0x1bc>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d115      	bne.n	80040e8 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689a      	ldr	r2, [r3, #8]
 80040c2:	4b15      	ldr	r3, [pc, #84]	@ (8004118 <HAL_TIM_PWM_Start+0x1c8>)
 80040c4:	4013      	ands	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2b06      	cmp	r3, #6
 80040cc:	d015      	beq.n	80040fa <HAL_TIM_PWM_Start+0x1aa>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040d4:	d011      	beq.n	80040fa <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f042 0201 	orr.w	r2, r2, #1
 80040e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e6:	e008      	b.n	80040fa <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0201 	orr.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	e000      	b.n	80040fc <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	40012c00 	.word	0x40012c00
 800410c:	40014000 	.word	0x40014000
 8004110:	40014400 	.word	0x40014400
 8004114:	40014800 	.word	0x40014800
 8004118:	00010007 	.word	0x00010007

0800411c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b02      	cmp	r3, #2
 8004130:	d122      	bne.n	8004178 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b02      	cmp	r3, #2
 800413e:	d11b      	bne.n	8004178 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f06f 0202 	mvn.w	r2, #2
 8004148:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 faed 	bl	800473e <HAL_TIM_IC_CaptureCallback>
 8004164:	e005      	b.n	8004172 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 fadf 	bl	800472a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 faf0 	bl	8004752 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	f003 0304 	and.w	r3, r3, #4
 8004182:	2b04      	cmp	r3, #4
 8004184:	d122      	bne.n	80041cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b04      	cmp	r3, #4
 8004192:	d11b      	bne.n	80041cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f06f 0204 	mvn.w	r2, #4
 800419c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2202      	movs	r2, #2
 80041a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 fac3 	bl	800473e <HAL_TIM_IC_CaptureCallback>
 80041b8:	e005      	b.n	80041c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 fab5 	bl	800472a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 fac6 	bl	8004752 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d122      	bne.n	8004220 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f003 0308 	and.w	r3, r3, #8
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d11b      	bne.n	8004220 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f06f 0208 	mvn.w	r2, #8
 80041f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2204      	movs	r2, #4
 80041f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 fa99 	bl	800473e <HAL_TIM_IC_CaptureCallback>
 800420c:	e005      	b.n	800421a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 fa8b 	bl	800472a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 fa9c 	bl	8004752 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	f003 0310 	and.w	r3, r3, #16
 800422a:	2b10      	cmp	r3, #16
 800422c:	d122      	bne.n	8004274 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f003 0310 	and.w	r3, r3, #16
 8004238:	2b10      	cmp	r3, #16
 800423a:	d11b      	bne.n	8004274 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f06f 0210 	mvn.w	r2, #16
 8004244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2208      	movs	r2, #8
 800424a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 fa6f 	bl	800473e <HAL_TIM_IC_CaptureCallback>
 8004260:	e005      	b.n	800426e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 fa61 	bl	800472a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 fa72 	bl	8004752 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b01      	cmp	r3, #1
 8004280:	d10e      	bne.n	80042a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b01      	cmp	r3, #1
 800428e:	d107      	bne.n	80042a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f06f 0201 	mvn.w	r2, #1
 8004298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 fa3b 	bl	8004716 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042aa:	2b80      	cmp	r3, #128	@ 0x80
 80042ac:	d10e      	bne.n	80042cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042b8:	2b80      	cmp	r3, #128	@ 0x80
 80042ba:	d107      	bne.n	80042cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80042c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 ff14 	bl	80050f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042da:	d10e      	bne.n	80042fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042e6:	2b80      	cmp	r3, #128	@ 0x80
 80042e8:	d107      	bne.n	80042fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80042f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 ff07 	bl	8005108 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004304:	2b40      	cmp	r3, #64	@ 0x40
 8004306:	d10e      	bne.n	8004326 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004312:	2b40      	cmp	r3, #64	@ 0x40
 8004314:	d107      	bne.n	8004326 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800431e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 fa20 	bl	8004766 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b20      	cmp	r3, #32
 8004332:	d10e      	bne.n	8004352 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f003 0320 	and.w	r3, r3, #32
 800433e:	2b20      	cmp	r3, #32
 8004340:	d107      	bne.n	8004352 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f06f 0220 	mvn.w	r2, #32
 800434a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 fec7 	bl	80050e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004352:	bf00      	nop
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
	...

0800435c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004372:	2b01      	cmp	r3, #1
 8004374:	d101      	bne.n	800437a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004376:	2302      	movs	r3, #2
 8004378:	e0ff      	b.n	800457a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b14      	cmp	r3, #20
 8004386:	f200 80f0 	bhi.w	800456a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800438a:	a201      	add	r2, pc, #4	@ (adr r2, 8004390 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800438c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004390:	080043e5 	.word	0x080043e5
 8004394:	0800456b 	.word	0x0800456b
 8004398:	0800456b 	.word	0x0800456b
 800439c:	0800456b 	.word	0x0800456b
 80043a0:	08004425 	.word	0x08004425
 80043a4:	0800456b 	.word	0x0800456b
 80043a8:	0800456b 	.word	0x0800456b
 80043ac:	0800456b 	.word	0x0800456b
 80043b0:	08004467 	.word	0x08004467
 80043b4:	0800456b 	.word	0x0800456b
 80043b8:	0800456b 	.word	0x0800456b
 80043bc:	0800456b 	.word	0x0800456b
 80043c0:	080044a7 	.word	0x080044a7
 80043c4:	0800456b 	.word	0x0800456b
 80043c8:	0800456b 	.word	0x0800456b
 80043cc:	0800456b 	.word	0x0800456b
 80043d0:	080044e9 	.word	0x080044e9
 80043d4:	0800456b 	.word	0x0800456b
 80043d8:	0800456b 	.word	0x0800456b
 80043dc:	0800456b 	.word	0x0800456b
 80043e0:	08004529 	.word	0x08004529
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68b9      	ldr	r1, [r7, #8]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fa34 	bl	8004858 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	699a      	ldr	r2, [r3, #24]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0208 	orr.w	r2, r2, #8
 80043fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	699a      	ldr	r2, [r3, #24]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0204 	bic.w	r2, r2, #4
 800440e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6999      	ldr	r1, [r3, #24]
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	691a      	ldr	r2, [r3, #16]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	619a      	str	r2, [r3, #24]
      break;
 8004422:	e0a5      	b.n	8004570 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	4618      	mov	r0, r3
 800442c:	f000 fa9a 	bl	8004964 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699a      	ldr	r2, [r3, #24]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800443e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699a      	ldr	r2, [r3, #24]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800444e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6999      	ldr	r1, [r3, #24]
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	021a      	lsls	r2, r3, #8
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	619a      	str	r2, [r3, #24]
      break;
 8004464:	e084      	b.n	8004570 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68b9      	ldr	r1, [r7, #8]
 800446c:	4618      	mov	r0, r3
 800446e:	f000 faf9 	bl	8004a64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69da      	ldr	r2, [r3, #28]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f042 0208 	orr.w	r2, r2, #8
 8004480:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	69da      	ldr	r2, [r3, #28]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0204 	bic.w	r2, r2, #4
 8004490:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	69d9      	ldr	r1, [r3, #28]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	691a      	ldr	r2, [r3, #16]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	61da      	str	r2, [r3, #28]
      break;
 80044a4:	e064      	b.n	8004570 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68b9      	ldr	r1, [r7, #8]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f000 fb57 	bl	8004b60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69da      	ldr	r2, [r3, #28]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	69da      	ldr	r2, [r3, #28]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	69d9      	ldr	r1, [r3, #28]
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	021a      	lsls	r2, r3, #8
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	61da      	str	r2, [r3, #28]
      break;
 80044e6:	e043      	b.n	8004570 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68b9      	ldr	r1, [r7, #8]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 fb9a 	bl	8004c28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0208 	orr.w	r2, r2, #8
 8004502:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0204 	bic.w	r2, r2, #4
 8004512:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	691a      	ldr	r2, [r3, #16]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004526:	e023      	b.n	8004570 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68b9      	ldr	r1, [r7, #8]
 800452e:	4618      	mov	r0, r3
 8004530:	f000 fbd8 	bl	8004ce4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004542:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004552:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	021a      	lsls	r2, r3, #8
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004568:	e002      	b.n	8004570 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	75fb      	strb	r3, [r7, #23]
      break;
 800456e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004578:	7dfb      	ldrb	r3, [r7, #23]
}
 800457a:	4618      	mov	r0, r3
 800457c:	3718      	adds	r7, #24
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop

08004584 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004598:	2b01      	cmp	r3, #1
 800459a:	d101      	bne.n	80045a0 <HAL_TIM_ConfigClockSource+0x1c>
 800459c:	2302      	movs	r3, #2
 800459e:	e0b6      	b.n	800470e <HAL_TIM_ConfigClockSource+0x18a>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80045c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045dc:	d03e      	beq.n	800465c <HAL_TIM_ConfigClockSource+0xd8>
 80045de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045e2:	f200 8087 	bhi.w	80046f4 <HAL_TIM_ConfigClockSource+0x170>
 80045e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045ea:	f000 8086 	beq.w	80046fa <HAL_TIM_ConfigClockSource+0x176>
 80045ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045f2:	d87f      	bhi.n	80046f4 <HAL_TIM_ConfigClockSource+0x170>
 80045f4:	2b70      	cmp	r3, #112	@ 0x70
 80045f6:	d01a      	beq.n	800462e <HAL_TIM_ConfigClockSource+0xaa>
 80045f8:	2b70      	cmp	r3, #112	@ 0x70
 80045fa:	d87b      	bhi.n	80046f4 <HAL_TIM_ConfigClockSource+0x170>
 80045fc:	2b60      	cmp	r3, #96	@ 0x60
 80045fe:	d050      	beq.n	80046a2 <HAL_TIM_ConfigClockSource+0x11e>
 8004600:	2b60      	cmp	r3, #96	@ 0x60
 8004602:	d877      	bhi.n	80046f4 <HAL_TIM_ConfigClockSource+0x170>
 8004604:	2b50      	cmp	r3, #80	@ 0x50
 8004606:	d03c      	beq.n	8004682 <HAL_TIM_ConfigClockSource+0xfe>
 8004608:	2b50      	cmp	r3, #80	@ 0x50
 800460a:	d873      	bhi.n	80046f4 <HAL_TIM_ConfigClockSource+0x170>
 800460c:	2b40      	cmp	r3, #64	@ 0x40
 800460e:	d058      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0x13e>
 8004610:	2b40      	cmp	r3, #64	@ 0x40
 8004612:	d86f      	bhi.n	80046f4 <HAL_TIM_ConfigClockSource+0x170>
 8004614:	2b30      	cmp	r3, #48	@ 0x30
 8004616:	d064      	beq.n	80046e2 <HAL_TIM_ConfigClockSource+0x15e>
 8004618:	2b30      	cmp	r3, #48	@ 0x30
 800461a:	d86b      	bhi.n	80046f4 <HAL_TIM_ConfigClockSource+0x170>
 800461c:	2b20      	cmp	r3, #32
 800461e:	d060      	beq.n	80046e2 <HAL_TIM_ConfigClockSource+0x15e>
 8004620:	2b20      	cmp	r3, #32
 8004622:	d867      	bhi.n	80046f4 <HAL_TIM_ConfigClockSource+0x170>
 8004624:	2b00      	cmp	r3, #0
 8004626:	d05c      	beq.n	80046e2 <HAL_TIM_ConfigClockSource+0x15e>
 8004628:	2b10      	cmp	r3, #16
 800462a:	d05a      	beq.n	80046e2 <HAL_TIM_ConfigClockSource+0x15e>
 800462c:	e062      	b.n	80046f4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800463e:	f000 fc2b 	bl	8004e98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004650:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	609a      	str	r2, [r3, #8]
      break;
 800465a:	e04f      	b.n	80046fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800466c:	f000 fc14 	bl	8004e98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689a      	ldr	r2, [r3, #8]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800467e:	609a      	str	r2, [r3, #8]
      break;
 8004680:	e03c      	b.n	80046fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800468e:	461a      	mov	r2, r3
 8004690:	f000 fb88 	bl	8004da4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2150      	movs	r1, #80	@ 0x50
 800469a:	4618      	mov	r0, r3
 800469c:	f000 fbe1 	bl	8004e62 <TIM_ITRx_SetConfig>
      break;
 80046a0:	e02c      	b.n	80046fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046ae:	461a      	mov	r2, r3
 80046b0:	f000 fba7 	bl	8004e02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2160      	movs	r1, #96	@ 0x60
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 fbd1 	bl	8004e62 <TIM_ITRx_SetConfig>
      break;
 80046c0:	e01c      	b.n	80046fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ce:	461a      	mov	r2, r3
 80046d0:	f000 fb68 	bl	8004da4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2140      	movs	r1, #64	@ 0x40
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 fbc1 	bl	8004e62 <TIM_ITRx_SetConfig>
      break;
 80046e0:	e00c      	b.n	80046fc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4619      	mov	r1, r3
 80046ec:	4610      	mov	r0, r2
 80046ee:	f000 fbb8 	bl	8004e62 <TIM_ITRx_SetConfig>
      break;
 80046f2:	e003      	b.n	80046fc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	73fb      	strb	r3, [r7, #15]
      break;
 80046f8:	e000      	b.n	80046fc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80046fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800470c:	7bfb      	ldrb	r3, [r7, #15]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004716:	b480      	push	{r7}
 8004718:	b083      	sub	sp, #12
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800471e:	bf00      	nop
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800472a:	b480      	push	{r7}
 800472c:	b083      	sub	sp, #12
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004732:	bf00      	nop
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800473e:	b480      	push	{r7}
 8004740:	b083      	sub	sp, #12
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004752:	b480      	push	{r7}
 8004754:	b083      	sub	sp, #12
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800475a:	bf00      	nop
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004766:	b480      	push	{r7}
 8004768:	b083      	sub	sp, #12
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800476e:	bf00      	nop
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
	...

0800477c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a2e      	ldr	r2, [pc, #184]	@ (8004848 <TIM_Base_SetConfig+0xcc>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d003      	beq.n	800479c <TIM_Base_SetConfig+0x20>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800479a:	d108      	bne.n	80047ae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a25      	ldr	r2, [pc, #148]	@ (8004848 <TIM_Base_SetConfig+0xcc>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d00f      	beq.n	80047d6 <TIM_Base_SetConfig+0x5a>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047bc:	d00b      	beq.n	80047d6 <TIM_Base_SetConfig+0x5a>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a22      	ldr	r2, [pc, #136]	@ (800484c <TIM_Base_SetConfig+0xd0>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d007      	beq.n	80047d6 <TIM_Base_SetConfig+0x5a>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a21      	ldr	r2, [pc, #132]	@ (8004850 <TIM_Base_SetConfig+0xd4>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d003      	beq.n	80047d6 <TIM_Base_SetConfig+0x5a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a20      	ldr	r2, [pc, #128]	@ (8004854 <TIM_Base_SetConfig+0xd8>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d108      	bne.n	80047e8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a0e      	ldr	r2, [pc, #56]	@ (8004848 <TIM_Base_SetConfig+0xcc>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d00b      	beq.n	800482c <TIM_Base_SetConfig+0xb0>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a0d      	ldr	r2, [pc, #52]	@ (800484c <TIM_Base_SetConfig+0xd0>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d007      	beq.n	800482c <TIM_Base_SetConfig+0xb0>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a0c      	ldr	r2, [pc, #48]	@ (8004850 <TIM_Base_SetConfig+0xd4>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d003      	beq.n	800482c <TIM_Base_SetConfig+0xb0>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a0b      	ldr	r2, [pc, #44]	@ (8004854 <TIM_Base_SetConfig+0xd8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d103      	bne.n	8004834 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	691a      	ldr	r2, [r3, #16]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	615a      	str	r2, [r3, #20]
}
 800483a:	bf00      	nop
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	40012c00 	.word	0x40012c00
 800484c:	40014000 	.word	0x40014000
 8004850:	40014400 	.word	0x40014400
 8004854:	40014800 	.word	0x40014800

08004858 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004858:	b480      	push	{r7}
 800485a:	b087      	sub	sp, #28
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	f023 0201 	bic.w	r2, r3, #1
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800488a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f023 0303 	bic.w	r3, r3, #3
 8004892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	4313      	orrs	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f023 0302 	bic.w	r3, r3, #2
 80048a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a28      	ldr	r2, [pc, #160]	@ (8004954 <TIM_OC1_SetConfig+0xfc>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d00b      	beq.n	80048d0 <TIM_OC1_SetConfig+0x78>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a27      	ldr	r2, [pc, #156]	@ (8004958 <TIM_OC1_SetConfig+0x100>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d007      	beq.n	80048d0 <TIM_OC1_SetConfig+0x78>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a26      	ldr	r2, [pc, #152]	@ (800495c <TIM_OC1_SetConfig+0x104>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d003      	beq.n	80048d0 <TIM_OC1_SetConfig+0x78>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a25      	ldr	r2, [pc, #148]	@ (8004960 <TIM_OC1_SetConfig+0x108>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d10c      	bne.n	80048ea <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f023 0308 	bic.w	r3, r3, #8
 80048d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	4313      	orrs	r3, r2
 80048e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f023 0304 	bic.w	r3, r3, #4
 80048e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a19      	ldr	r2, [pc, #100]	@ (8004954 <TIM_OC1_SetConfig+0xfc>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d00b      	beq.n	800490a <TIM_OC1_SetConfig+0xb2>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a18      	ldr	r2, [pc, #96]	@ (8004958 <TIM_OC1_SetConfig+0x100>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d007      	beq.n	800490a <TIM_OC1_SetConfig+0xb2>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a17      	ldr	r2, [pc, #92]	@ (800495c <TIM_OC1_SetConfig+0x104>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d003      	beq.n	800490a <TIM_OC1_SetConfig+0xb2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a16      	ldr	r2, [pc, #88]	@ (8004960 <TIM_OC1_SetConfig+0x108>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d111      	bne.n	800492e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004910:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004918:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	4313      	orrs	r3, r2
 8004922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	4313      	orrs	r3, r2
 800492c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	621a      	str	r2, [r3, #32]
}
 8004948:	bf00      	nop
 800494a:	371c      	adds	r7, #28
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	40012c00 	.word	0x40012c00
 8004958:	40014000 	.word	0x40014000
 800495c:	40014400 	.word	0x40014400
 8004960:	40014800 	.word	0x40014800

08004964 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	f023 0210 	bic.w	r2, r3, #16
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004992:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800499e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	021b      	lsls	r3, r3, #8
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f023 0320 	bic.w	r3, r3, #32
 80049b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	011b      	lsls	r3, r3, #4
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	4313      	orrs	r3, r2
 80049be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a24      	ldr	r2, [pc, #144]	@ (8004a54 <TIM_OC2_SetConfig+0xf0>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d10d      	bne.n	80049e4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	4313      	orrs	r3, r2
 80049da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004a54 <TIM_OC2_SetConfig+0xf0>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d00b      	beq.n	8004a04 <TIM_OC2_SetConfig+0xa0>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a1a      	ldr	r2, [pc, #104]	@ (8004a58 <TIM_OC2_SetConfig+0xf4>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d007      	beq.n	8004a04 <TIM_OC2_SetConfig+0xa0>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a19      	ldr	r2, [pc, #100]	@ (8004a5c <TIM_OC2_SetConfig+0xf8>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d003      	beq.n	8004a04 <TIM_OC2_SetConfig+0xa0>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a18      	ldr	r2, [pc, #96]	@ (8004a60 <TIM_OC2_SetConfig+0xfc>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d113      	bne.n	8004a2c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a0a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a12:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	621a      	str	r2, [r3, #32]
}
 8004a46:	bf00      	nop
 8004a48:	371c      	adds	r7, #28
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	40012c00 	.word	0x40012c00
 8004a58:	40014000 	.word	0x40014000
 8004a5c:	40014400 	.word	0x40014400
 8004a60:	40014800 	.word	0x40014800

08004a64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f023 0303 	bic.w	r3, r3, #3
 8004a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ab0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	021b      	lsls	r3, r3, #8
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a23      	ldr	r2, [pc, #140]	@ (8004b50 <TIM_OC3_SetConfig+0xec>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d10d      	bne.n	8004ae2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004acc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	021b      	lsls	r3, r3, #8
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ae0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a1a      	ldr	r2, [pc, #104]	@ (8004b50 <TIM_OC3_SetConfig+0xec>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d00b      	beq.n	8004b02 <TIM_OC3_SetConfig+0x9e>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a19      	ldr	r2, [pc, #100]	@ (8004b54 <TIM_OC3_SetConfig+0xf0>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d007      	beq.n	8004b02 <TIM_OC3_SetConfig+0x9e>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a18      	ldr	r2, [pc, #96]	@ (8004b58 <TIM_OC3_SetConfig+0xf4>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d003      	beq.n	8004b02 <TIM_OC3_SetConfig+0x9e>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a17      	ldr	r2, [pc, #92]	@ (8004b5c <TIM_OC3_SetConfig+0xf8>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d113      	bne.n	8004b2a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	011b      	lsls	r3, r3, #4
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	011b      	lsls	r3, r3, #4
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	621a      	str	r2, [r3, #32]
}
 8004b44:	bf00      	nop
 8004b46:	371c      	adds	r7, #28
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	40012c00 	.word	0x40012c00
 8004b54:	40014000 	.word	0x40014000
 8004b58:	40014400 	.word	0x40014400
 8004b5c:	40014800 	.word	0x40014800

08004b60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	021b      	lsls	r3, r3, #8
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004bae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	031b      	lsls	r3, r3, #12
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a16      	ldr	r2, [pc, #88]	@ (8004c18 <TIM_OC4_SetConfig+0xb8>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d00b      	beq.n	8004bdc <TIM_OC4_SetConfig+0x7c>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a15      	ldr	r2, [pc, #84]	@ (8004c1c <TIM_OC4_SetConfig+0xbc>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d007      	beq.n	8004bdc <TIM_OC4_SetConfig+0x7c>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a14      	ldr	r2, [pc, #80]	@ (8004c20 <TIM_OC4_SetConfig+0xc0>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d003      	beq.n	8004bdc <TIM_OC4_SetConfig+0x7c>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a13      	ldr	r2, [pc, #76]	@ (8004c24 <TIM_OC4_SetConfig+0xc4>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d109      	bne.n	8004bf0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004be2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	019b      	lsls	r3, r3, #6
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	621a      	str	r2, [r3, #32]
}
 8004c0a:	bf00      	nop
 8004c0c:	371c      	adds	r7, #28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	40012c00 	.word	0x40012c00
 8004c1c:	40014000 	.word	0x40014000
 8004c20:	40014400 	.word	0x40014400
 8004c24:	40014800 	.word	0x40014800

08004c28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004c6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	041b      	lsls	r3, r3, #16
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a15      	ldr	r2, [pc, #84]	@ (8004cd4 <TIM_OC5_SetConfig+0xac>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d00b      	beq.n	8004c9a <TIM_OC5_SetConfig+0x72>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a14      	ldr	r2, [pc, #80]	@ (8004cd8 <TIM_OC5_SetConfig+0xb0>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d007      	beq.n	8004c9a <TIM_OC5_SetConfig+0x72>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a13      	ldr	r2, [pc, #76]	@ (8004cdc <TIM_OC5_SetConfig+0xb4>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d003      	beq.n	8004c9a <TIM_OC5_SetConfig+0x72>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a12      	ldr	r2, [pc, #72]	@ (8004ce0 <TIM_OC5_SetConfig+0xb8>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d109      	bne.n	8004cae <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ca0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	021b      	lsls	r3, r3, #8
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	621a      	str	r2, [r3, #32]
}
 8004cc8:	bf00      	nop
 8004cca:	371c      	adds	r7, #28
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	40012c00 	.word	0x40012c00
 8004cd8:	40014000 	.word	0x40014000
 8004cdc:	40014400 	.word	0x40014400
 8004ce0:	40014800 	.word	0x40014800

08004ce4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	021b      	lsls	r3, r3, #8
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004d2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	051b      	lsls	r3, r3, #20
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a16      	ldr	r2, [pc, #88]	@ (8004d94 <TIM_OC6_SetConfig+0xb0>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d00b      	beq.n	8004d58 <TIM_OC6_SetConfig+0x74>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a15      	ldr	r2, [pc, #84]	@ (8004d98 <TIM_OC6_SetConfig+0xb4>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d007      	beq.n	8004d58 <TIM_OC6_SetConfig+0x74>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a14      	ldr	r2, [pc, #80]	@ (8004d9c <TIM_OC6_SetConfig+0xb8>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d003      	beq.n	8004d58 <TIM_OC6_SetConfig+0x74>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a13      	ldr	r2, [pc, #76]	@ (8004da0 <TIM_OC6_SetConfig+0xbc>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d109      	bne.n	8004d6c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	029b      	lsls	r3, r3, #10
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	621a      	str	r2, [r3, #32]
}
 8004d86:	bf00      	nop
 8004d88:	371c      	adds	r7, #28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	40012c00 	.word	0x40012c00
 8004d98:	40014000 	.word	0x40014000
 8004d9c:	40014400 	.word	0x40014400
 8004da0:	40014800 	.word	0x40014800

08004da4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	f023 0201 	bic.w	r2, r3, #1
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004dce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	011b      	lsls	r3, r3, #4
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f023 030a 	bic.w	r3, r3, #10
 8004de0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	621a      	str	r2, [r3, #32]
}
 8004df6:	bf00      	nop
 8004df8:	371c      	adds	r7, #28
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e02:	b480      	push	{r7}
 8004e04:	b087      	sub	sp, #28
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	60f8      	str	r0, [r7, #12]
 8004e0a:	60b9      	str	r1, [r7, #8]
 8004e0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	f023 0210 	bic.w	r2, r3, #16
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	031b      	lsls	r3, r3, #12
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	011b      	lsls	r3, r3, #4
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	621a      	str	r2, [r3, #32]
}
 8004e56:	bf00      	nop
 8004e58:	371c      	adds	r7, #28
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b085      	sub	sp, #20
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
 8004e6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	f043 0307 	orr.w	r3, r3, #7
 8004e84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	609a      	str	r2, [r3, #8]
}
 8004e8c:	bf00      	nop
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b087      	sub	sp, #28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
 8004ea4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004eb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	021a      	lsls	r2, r3, #8
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	609a      	str	r2, [r3, #8]
}
 8004ecc:	bf00      	nop
 8004ece:	371c      	adds	r7, #28
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b087      	sub	sp, #28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	f003 031f 	and.w	r3, r3, #31
 8004eea:	2201      	movs	r2, #1
 8004eec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6a1a      	ldr	r2, [r3, #32]
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	43db      	mvns	r3, r3
 8004efa:	401a      	ands	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6a1a      	ldr	r2, [r3, #32]
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f003 031f 	and.w	r3, r3, #31
 8004f0a:	6879      	ldr	r1, [r7, #4]
 8004f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f10:	431a      	orrs	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	621a      	str	r2, [r3, #32]
}
 8004f16:	bf00      	nop
 8004f18:	371c      	adds	r7, #28
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
	...

08004f24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d101      	bne.n	8004f3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f38:	2302      	movs	r3, #2
 8004f3a:	e04f      	b.n	8004fdc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a21      	ldr	r2, [pc, #132]	@ (8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d108      	bne.n	8004f78 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004f6c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a14      	ldr	r2, [pc, #80]	@ (8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d009      	beq.n	8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fa4:	d004      	beq.n	8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a10      	ldr	r2, [pc, #64]	@ (8004fec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d10c      	bne.n	8004fca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fb6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	40012c00 	.word	0x40012c00
 8004fec:	40014000 	.word	0x40014000

08004ff0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005004:	2b01      	cmp	r3, #1
 8005006:	d101      	bne.n	800500c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005008:	2302      	movs	r3, #2
 800500a:	e060      	b.n	80050ce <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	4313      	orrs	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	4313      	orrs	r3, r2
 800503c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4313      	orrs	r3, r2
 800504a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	4313      	orrs	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	4313      	orrs	r3, r2
 8005066:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005072:	4313      	orrs	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	041b      	lsls	r3, r3, #16
 8005082:	4313      	orrs	r3, r2
 8005084:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a14      	ldr	r2, [pc, #80]	@ (80050dc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d115      	bne.n	80050bc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509a:	051b      	lsls	r3, r3, #20
 800509c:	4313      	orrs	r3, r2
 800509e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	40012c00 	.word	0x40012c00

080050e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e040      	b.n	80051b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005132:	2b00      	cmp	r3, #0
 8005134:	d106      	bne.n	8005144 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fc fc6e 	bl	8001a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2224      	movs	r2, #36	@ 0x24
 8005148:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0201 	bic.w	r2, r2, #1
 8005158:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fbfc 	bl	8005958 <UART_SetConfig>
 8005160:	4603      	mov	r3, r0
 8005162:	2b01      	cmp	r3, #1
 8005164:	d101      	bne.n	800516a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e022      	b.n	80051b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516e:	2b00      	cmp	r3, #0
 8005170:	d002      	beq.n	8005178 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 fd26 	bl	8005bc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005186:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005196:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0201 	orr.w	r2, r2, #1
 80051a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 fdad 	bl	8005d08 <UART_CheckIdleState>
 80051ae:	4603      	mov	r3, r0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b08a      	sub	sp, #40	@ 0x28
 80051bc:	af02      	add	r7, sp, #8
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	4613      	mov	r3, r2
 80051c6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051ce:	2b20      	cmp	r3, #32
 80051d0:	f040 80b6 	bne.w	8005340 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d002      	beq.n	80051e0 <HAL_UART_Receive+0x28>
 80051da:	88fb      	ldrh	r3, [r7, #6]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e0ae      	b.n	8005342 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2222      	movs	r2, #34	@ 0x22
 80051f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051fa:	f7fc fe4d 	bl	8001e98 <HAL_GetTick>
 80051fe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	88fa      	ldrh	r2, [r7, #6]
 8005204:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	88fa      	ldrh	r2, [r7, #6]
 800520c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005218:	d10e      	bne.n	8005238 <HAL_UART_Receive+0x80>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d105      	bne.n	800522e <HAL_UART_Receive+0x76>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005228:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800522c:	e02d      	b.n	800528a <HAL_UART_Receive+0xd2>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	22ff      	movs	r2, #255	@ 0xff
 8005232:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005236:	e028      	b.n	800528a <HAL_UART_Receive+0xd2>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10d      	bne.n	800525c <HAL_UART_Receive+0xa4>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d104      	bne.n	8005252 <HAL_UART_Receive+0x9a>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	22ff      	movs	r2, #255	@ 0xff
 800524c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005250:	e01b      	b.n	800528a <HAL_UART_Receive+0xd2>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	227f      	movs	r2, #127	@ 0x7f
 8005256:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800525a:	e016      	b.n	800528a <HAL_UART_Receive+0xd2>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005264:	d10d      	bne.n	8005282 <HAL_UART_Receive+0xca>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d104      	bne.n	8005278 <HAL_UART_Receive+0xc0>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	227f      	movs	r2, #127	@ 0x7f
 8005272:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005276:	e008      	b.n	800528a <HAL_UART_Receive+0xd2>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	223f      	movs	r2, #63	@ 0x3f
 800527c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005280:	e003      	b.n	800528a <HAL_UART_Receive+0xd2>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005290:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800529a:	d108      	bne.n	80052ae <HAL_UART_Receive+0xf6>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d104      	bne.n	80052ae <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80052a4:	2300      	movs	r3, #0
 80052a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	61bb      	str	r3, [r7, #24]
 80052ac:	e003      	b.n	80052b6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052b2:	2300      	movs	r3, #0
 80052b4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80052b6:	e037      	b.n	8005328 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	2200      	movs	r2, #0
 80052c0:	2120      	movs	r1, #32
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f000 fdc8 	bl	8005e58 <UART_WaitOnFlagUntilTimeout>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d005      	beq.n	80052da <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2220      	movs	r2, #32
 80052d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e033      	b.n	8005342 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10c      	bne.n	80052fa <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	8a7b      	ldrh	r3, [r7, #18]
 80052ea:	4013      	ands	r3, r2
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	3302      	adds	r3, #2
 80052f6:	61bb      	str	r3, [r7, #24]
 80052f8:	e00d      	b.n	8005316 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005300:	b29b      	uxth	r3, r3
 8005302:	b2da      	uxtb	r2, r3
 8005304:	8a7b      	ldrh	r3, [r7, #18]
 8005306:	b2db      	uxtb	r3, r3
 8005308:	4013      	ands	r3, r2
 800530a:	b2da      	uxtb	r2, r3
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	3301      	adds	r3, #1
 8005314:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800531c:	b29b      	uxth	r3, r3
 800531e:	3b01      	subs	r3, #1
 8005320:	b29a      	uxth	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800532e:	b29b      	uxth	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1c1      	bne.n	80052b8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2220      	movs	r2, #32
 8005338:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800533c:	2300      	movs	r3, #0
 800533e:	e000      	b.n	8005342 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8005340:	2302      	movs	r3, #2
  }
}
 8005342:	4618      	mov	r0, r3
 8005344:	3720      	adds	r7, #32
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b0ba      	sub	sp, #232	@ 0xe8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005372:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005376:	f640 030f 	movw	r3, #2063	@ 0x80f
 800537a:	4013      	ands	r3, r2
 800537c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005380:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005384:	2b00      	cmp	r3, #0
 8005386:	d115      	bne.n	80053b4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800538c:	f003 0320 	and.w	r3, r3, #32
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00f      	beq.n	80053b4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005398:	f003 0320 	and.w	r3, r3, #32
 800539c:	2b00      	cmp	r3, #0
 800539e:	d009      	beq.n	80053b4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 82ab 	beq.w	8005900 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	4798      	blx	r3
      }
      return;
 80053b2:	e2a5      	b.n	8005900 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80053b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f000 8117 	beq.w	80055ec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80053be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d106      	bne.n	80053d8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80053ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80053ce:	4b85      	ldr	r3, [pc, #532]	@ (80055e4 <HAL_UART_IRQHandler+0x298>)
 80053d0:	4013      	ands	r3, r2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 810a 	beq.w	80055ec <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d011      	beq.n	8005408 <HAL_UART_IRQHandler+0xbc>
 80053e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00b      	beq.n	8005408 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2201      	movs	r2, #1
 80053f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053fe:	f043 0201 	orr.w	r2, r3, #1
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d011      	beq.n	8005438 <HAL_UART_IRQHandler+0xec>
 8005414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00b      	beq.n	8005438 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2202      	movs	r2, #2
 8005426:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800542e:	f043 0204 	orr.w	r2, r3, #4
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b00      	cmp	r3, #0
 8005442:	d011      	beq.n	8005468 <HAL_UART_IRQHandler+0x11c>
 8005444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00b      	beq.n	8005468 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2204      	movs	r2, #4
 8005456:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800545e:	f043 0202 	orr.w	r2, r3, #2
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800546c:	f003 0308 	and.w	r3, r3, #8
 8005470:	2b00      	cmp	r3, #0
 8005472:	d017      	beq.n	80054a4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005478:	f003 0320 	and.w	r3, r3, #32
 800547c:	2b00      	cmp	r3, #0
 800547e:	d105      	bne.n	800548c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005480:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005484:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00b      	beq.n	80054a4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2208      	movs	r2, #8
 8005492:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800549a:	f043 0208 	orr.w	r2, r3, #8
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80054a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d012      	beq.n	80054d6 <HAL_UART_IRQHandler+0x18a>
 80054b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00c      	beq.n	80054d6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054cc:	f043 0220 	orr.w	r2, r3, #32
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f000 8211 	beq.w	8005904 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80054e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054e6:	f003 0320 	and.w	r3, r3, #32
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00d      	beq.n	800550a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054f2:	f003 0320 	and.w	r3, r3, #32
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d007      	beq.n	800550a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005510:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800551e:	2b40      	cmp	r3, #64	@ 0x40
 8005520:	d005      	beq.n	800552e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005522:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005526:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800552a:	2b00      	cmp	r3, #0
 800552c:	d04f      	beq.n	80055ce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 fcf9 	bl	8005f26 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800553e:	2b40      	cmp	r3, #64	@ 0x40
 8005540:	d141      	bne.n	80055c6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	3308      	adds	r3, #8
 8005548:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005550:	e853 3f00 	ldrex	r3, [r3]
 8005554:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005558:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800555c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005560:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	3308      	adds	r3, #8
 800556a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800556e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005572:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005576:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800557a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800557e:	e841 2300 	strex	r3, r2, [r1]
 8005582:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005586:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1d9      	bne.n	8005542 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005592:	2b00      	cmp	r3, #0
 8005594:	d013      	beq.n	80055be <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800559a:	4a13      	ldr	r2, [pc, #76]	@ (80055e8 <HAL_UART_IRQHandler+0x29c>)
 800559c:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fc fdf2 	bl	800218c <HAL_DMA_Abort_IT>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d017      	beq.n	80055de <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80055b8:	4610      	mov	r0, r2
 80055ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055bc:	e00f      	b.n	80055de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f9b4 	bl	800592c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c4:	e00b      	b.n	80055de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f9b0 	bl	800592c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055cc:	e007      	b.n	80055de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f9ac 	bl	800592c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80055dc:	e192      	b.n	8005904 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055de:	bf00      	nop
    return;
 80055e0:	e190      	b.n	8005904 <HAL_UART_IRQHandler+0x5b8>
 80055e2:	bf00      	nop
 80055e4:	04000120 	.word	0x04000120
 80055e8:	08005fef 	.word	0x08005fef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	f040 814b 	bne.w	800588c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80055f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055fa:	f003 0310 	and.w	r3, r3, #16
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f000 8144 	beq.w	800588c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005608:	f003 0310 	and.w	r3, r3, #16
 800560c:	2b00      	cmp	r3, #0
 800560e:	f000 813d 	beq.w	800588c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2210      	movs	r2, #16
 8005618:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005624:	2b40      	cmp	r3, #64	@ 0x40
 8005626:	f040 80b5 	bne.w	8005794 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005636:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800563a:	2b00      	cmp	r3, #0
 800563c:	f000 8164 	beq.w	8005908 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005646:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800564a:	429a      	cmp	r2, r3
 800564c:	f080 815c 	bcs.w	8005908 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005656:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	2b20      	cmp	r3, #32
 8005662:	f000 8086 	beq.w	8005772 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005672:	e853 3f00 	ldrex	r3, [r3]
 8005676:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800567a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800567e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005682:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	461a      	mov	r2, r3
 800568c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005690:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005694:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005698:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800569c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80056a0:	e841 2300 	strex	r3, r2, [r1]
 80056a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80056a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1da      	bne.n	8005666 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3308      	adds	r3, #8
 80056b6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056ba:	e853 3f00 	ldrex	r3, [r3]
 80056be:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80056c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056c2:	f023 0301 	bic.w	r3, r3, #1
 80056c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	3308      	adds	r3, #8
 80056d0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80056d4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80056d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056da:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80056dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80056e0:	e841 2300 	strex	r3, r2, [r1]
 80056e4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80056e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1e1      	bne.n	80056b0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3308      	adds	r3, #8
 80056f2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056f6:	e853 3f00 	ldrex	r3, [r3]
 80056fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80056fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005702:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	3308      	adds	r3, #8
 800570c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005710:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005712:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005714:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005716:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005718:	e841 2300 	strex	r3, r2, [r1]
 800571c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800571e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1e3      	bne.n	80056ec <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2220      	movs	r2, #32
 8005728:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005738:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800573a:	e853 3f00 	ldrex	r3, [r3]
 800573e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005740:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005742:	f023 0310 	bic.w	r3, r3, #16
 8005746:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	461a      	mov	r2, r3
 8005750:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005754:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005756:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005758:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800575a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800575c:	e841 2300 	strex	r3, r2, [r1]
 8005760:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005762:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1e4      	bne.n	8005732 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800576c:	4618      	mov	r0, r3
 800576e:	f7fc fcd4 	bl	800211a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2202      	movs	r2, #2
 8005776:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005784:	b29b      	uxth	r3, r3
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	b29b      	uxth	r3, r3
 800578a:	4619      	mov	r1, r3
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f8d7 	bl	8005940 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005792:	e0b9      	b.n	8005908 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f000 80ab 	beq.w	800590c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80057b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f000 80a6 	beq.w	800590c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c8:	e853 3f00 	ldrex	r3, [r3]
 80057cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	461a      	mov	r2, r3
 80057de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80057e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80057e4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057ea:	e841 2300 	strex	r3, r2, [r1]
 80057ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1e4      	bne.n	80057c0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	3308      	adds	r3, #8
 80057fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005800:	e853 3f00 	ldrex	r3, [r3]
 8005804:	623b      	str	r3, [r7, #32]
   return(result);
 8005806:	6a3b      	ldr	r3, [r7, #32]
 8005808:	f023 0301 	bic.w	r3, r3, #1
 800580c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3308      	adds	r3, #8
 8005816:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800581a:	633a      	str	r2, [r7, #48]	@ 0x30
 800581c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005820:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005822:	e841 2300 	strex	r3, r2, [r1]
 8005826:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1e3      	bne.n	80057f6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2220      	movs	r2, #32
 8005832:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	e853 3f00 	ldrex	r3, [r3]
 800584e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f023 0310 	bic.w	r3, r3, #16
 8005856:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	461a      	mov	r2, r3
 8005860:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005864:	61fb      	str	r3, [r7, #28]
 8005866:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005868:	69b9      	ldr	r1, [r7, #24]
 800586a:	69fa      	ldr	r2, [r7, #28]
 800586c:	e841 2300 	strex	r3, r2, [r1]
 8005870:	617b      	str	r3, [r7, #20]
   return(result);
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1e4      	bne.n	8005842 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2202      	movs	r2, #2
 800587c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800587e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005882:	4619      	mov	r1, r3
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f85b 	bl	8005940 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800588a:	e03f      	b.n	800590c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800588c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005890:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00e      	beq.n	80058b6 <HAL_UART_IRQHandler+0x56a>
 8005898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800589c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d008      	beq.n	80058b6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80058ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fbdd 	bl	800606e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058b4:	e02d      	b.n	8005912 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80058b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00e      	beq.n	80058e0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80058c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d008      	beq.n	80058e0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d01c      	beq.n	8005910 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	4798      	blx	r3
    }
    return;
 80058de:	e017      	b.n	8005910 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80058e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d012      	beq.n	8005912 <HAL_UART_IRQHandler+0x5c6>
 80058ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00c      	beq.n	8005912 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 fb8e 	bl	800601a <UART_EndTransmit_IT>
    return;
 80058fe:	e008      	b.n	8005912 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005900:	bf00      	nop
 8005902:	e006      	b.n	8005912 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005904:	bf00      	nop
 8005906:	e004      	b.n	8005912 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005908:	bf00      	nop
 800590a:	e002      	b.n	8005912 <HAL_UART_IRQHandler+0x5c6>
      return;
 800590c:	bf00      	nop
 800590e:	e000      	b.n	8005912 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005910:	bf00      	nop
  }

}
 8005912:	37e8      	adds	r7, #232	@ 0xe8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	460b      	mov	r3, r1
 800594a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b088      	sub	sp, #32
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005960:	2300      	movs	r3, #0
 8005962:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	431a      	orrs	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	431a      	orrs	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	4313      	orrs	r3, r2
 800597a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	4b8a      	ldr	r3, [pc, #552]	@ (8005bac <UART_SetConfig+0x254>)
 8005984:	4013      	ands	r3, r2
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	6812      	ldr	r2, [r2, #0]
 800598a:	6979      	ldr	r1, [r7, #20]
 800598c:	430b      	orrs	r3, r1
 800598e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a78      	ldr	r2, [pc, #480]	@ (8005bb0 <UART_SetConfig+0x258>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d120      	bne.n	8005a16 <UART_SetConfig+0xbe>
 80059d4:	4b77      	ldr	r3, [pc, #476]	@ (8005bb4 <UART_SetConfig+0x25c>)
 80059d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059d8:	f003 0303 	and.w	r3, r3, #3
 80059dc:	2b03      	cmp	r3, #3
 80059de:	d817      	bhi.n	8005a10 <UART_SetConfig+0xb8>
 80059e0:	a201      	add	r2, pc, #4	@ (adr r2, 80059e8 <UART_SetConfig+0x90>)
 80059e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e6:	bf00      	nop
 80059e8:	080059f9 	.word	0x080059f9
 80059ec:	08005a05 	.word	0x08005a05
 80059f0:	08005a0b 	.word	0x08005a0b
 80059f4:	080059ff 	.word	0x080059ff
 80059f8:	2300      	movs	r3, #0
 80059fa:	77fb      	strb	r3, [r7, #31]
 80059fc:	e01d      	b.n	8005a3a <UART_SetConfig+0xe2>
 80059fe:	2302      	movs	r3, #2
 8005a00:	77fb      	strb	r3, [r7, #31]
 8005a02:	e01a      	b.n	8005a3a <UART_SetConfig+0xe2>
 8005a04:	2304      	movs	r3, #4
 8005a06:	77fb      	strb	r3, [r7, #31]
 8005a08:	e017      	b.n	8005a3a <UART_SetConfig+0xe2>
 8005a0a:	2308      	movs	r3, #8
 8005a0c:	77fb      	strb	r3, [r7, #31]
 8005a0e:	e014      	b.n	8005a3a <UART_SetConfig+0xe2>
 8005a10:	2310      	movs	r3, #16
 8005a12:	77fb      	strb	r3, [r7, #31]
 8005a14:	e011      	b.n	8005a3a <UART_SetConfig+0xe2>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a67      	ldr	r2, [pc, #412]	@ (8005bb8 <UART_SetConfig+0x260>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d102      	bne.n	8005a26 <UART_SetConfig+0xce>
 8005a20:	2300      	movs	r3, #0
 8005a22:	77fb      	strb	r3, [r7, #31]
 8005a24:	e009      	b.n	8005a3a <UART_SetConfig+0xe2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a64      	ldr	r2, [pc, #400]	@ (8005bbc <UART_SetConfig+0x264>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d102      	bne.n	8005a36 <UART_SetConfig+0xde>
 8005a30:	2300      	movs	r3, #0
 8005a32:	77fb      	strb	r3, [r7, #31]
 8005a34:	e001      	b.n	8005a3a <UART_SetConfig+0xe2>
 8005a36:	2310      	movs	r3, #16
 8005a38:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a42:	d15a      	bne.n	8005afa <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005a44:	7ffb      	ldrb	r3, [r7, #31]
 8005a46:	2b08      	cmp	r3, #8
 8005a48:	d827      	bhi.n	8005a9a <UART_SetConfig+0x142>
 8005a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a50 <UART_SetConfig+0xf8>)
 8005a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a50:	08005a75 	.word	0x08005a75
 8005a54:	08005a7d 	.word	0x08005a7d
 8005a58:	08005a85 	.word	0x08005a85
 8005a5c:	08005a9b 	.word	0x08005a9b
 8005a60:	08005a8b 	.word	0x08005a8b
 8005a64:	08005a9b 	.word	0x08005a9b
 8005a68:	08005a9b 	.word	0x08005a9b
 8005a6c:	08005a9b 	.word	0x08005a9b
 8005a70:	08005a93 	.word	0x08005a93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a74:	f7fd ff9a 	bl	80039ac <HAL_RCC_GetPCLK1Freq>
 8005a78:	61b8      	str	r0, [r7, #24]
        break;
 8005a7a:	e013      	b.n	8005aa4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a7c:	f7fd ffb8 	bl	80039f0 <HAL_RCC_GetPCLK2Freq>
 8005a80:	61b8      	str	r0, [r7, #24]
        break;
 8005a82:	e00f      	b.n	8005aa4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a84:	4b4e      	ldr	r3, [pc, #312]	@ (8005bc0 <UART_SetConfig+0x268>)
 8005a86:	61bb      	str	r3, [r7, #24]
        break;
 8005a88:	e00c      	b.n	8005aa4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a8a:	f7fd ff19 	bl	80038c0 <HAL_RCC_GetSysClockFreq>
 8005a8e:	61b8      	str	r0, [r7, #24]
        break;
 8005a90:	e008      	b.n	8005aa4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a96:	61bb      	str	r3, [r7, #24]
        break;
 8005a98:	e004      	b.n	8005aa4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	77bb      	strb	r3, [r7, #30]
        break;
 8005aa2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d074      	beq.n	8005b94 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	005a      	lsls	r2, r3, #1
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	085b      	lsrs	r3, r3, #1
 8005ab4:	441a      	add	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005abe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	2b0f      	cmp	r3, #15
 8005ac4:	d916      	bls.n	8005af4 <UART_SetConfig+0x19c>
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005acc:	d212      	bcs.n	8005af4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	f023 030f 	bic.w	r3, r3, #15
 8005ad6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	085b      	lsrs	r3, r3, #1
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	f003 0307 	and.w	r3, r3, #7
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	89fb      	ldrh	r3, [r7, #14]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	89fa      	ldrh	r2, [r7, #14]
 8005af0:	60da      	str	r2, [r3, #12]
 8005af2:	e04f      	b.n	8005b94 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	77bb      	strb	r3, [r7, #30]
 8005af8:	e04c      	b.n	8005b94 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005afa:	7ffb      	ldrb	r3, [r7, #31]
 8005afc:	2b08      	cmp	r3, #8
 8005afe:	d828      	bhi.n	8005b52 <UART_SetConfig+0x1fa>
 8005b00:	a201      	add	r2, pc, #4	@ (adr r2, 8005b08 <UART_SetConfig+0x1b0>)
 8005b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b06:	bf00      	nop
 8005b08:	08005b2d 	.word	0x08005b2d
 8005b0c:	08005b35 	.word	0x08005b35
 8005b10:	08005b3d 	.word	0x08005b3d
 8005b14:	08005b53 	.word	0x08005b53
 8005b18:	08005b43 	.word	0x08005b43
 8005b1c:	08005b53 	.word	0x08005b53
 8005b20:	08005b53 	.word	0x08005b53
 8005b24:	08005b53 	.word	0x08005b53
 8005b28:	08005b4b 	.word	0x08005b4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b2c:	f7fd ff3e 	bl	80039ac <HAL_RCC_GetPCLK1Freq>
 8005b30:	61b8      	str	r0, [r7, #24]
        break;
 8005b32:	e013      	b.n	8005b5c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b34:	f7fd ff5c 	bl	80039f0 <HAL_RCC_GetPCLK2Freq>
 8005b38:	61b8      	str	r0, [r7, #24]
        break;
 8005b3a:	e00f      	b.n	8005b5c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b3c:	4b20      	ldr	r3, [pc, #128]	@ (8005bc0 <UART_SetConfig+0x268>)
 8005b3e:	61bb      	str	r3, [r7, #24]
        break;
 8005b40:	e00c      	b.n	8005b5c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b42:	f7fd febd 	bl	80038c0 <HAL_RCC_GetSysClockFreq>
 8005b46:	61b8      	str	r0, [r7, #24]
        break;
 8005b48:	e008      	b.n	8005b5c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b4e:	61bb      	str	r3, [r7, #24]
        break;
 8005b50:	e004      	b.n	8005b5c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005b52:	2300      	movs	r3, #0
 8005b54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	77bb      	strb	r3, [r7, #30]
        break;
 8005b5a:	bf00      	nop
    }

    if (pclk != 0U)
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d018      	beq.n	8005b94 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	085a      	lsrs	r2, r3, #1
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	441a      	add	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b74:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	2b0f      	cmp	r3, #15
 8005b7a:	d909      	bls.n	8005b90 <UART_SetConfig+0x238>
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b82:	d205      	bcs.n	8005b90 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	60da      	str	r2, [r3, #12]
 8005b8e:	e001      	b.n	8005b94 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005ba0:	7fbb      	ldrb	r3, [r7, #30]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3720      	adds	r7, #32
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	efff69f3 	.word	0xefff69f3
 8005bb0:	40013800 	.word	0x40013800
 8005bb4:	40021000 	.word	0x40021000
 8005bb8:	40004400 	.word	0x40004400
 8005bbc:	40004800 	.word	0x40004800
 8005bc0:	007a1200 	.word	0x007a1200

08005bc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00a      	beq.n	8005bee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	430a      	orrs	r2, r1
 8005bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00a      	beq.n	8005c10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c14:	f003 0304 	and.w	r3, r3, #4
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00a      	beq.n	8005c32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c36:	f003 0308 	and.w	r3, r3, #8
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00a      	beq.n	8005c54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	430a      	orrs	r2, r1
 8005c52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c58:	f003 0310 	and.w	r3, r3, #16
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00a      	beq.n	8005c76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	430a      	orrs	r2, r1
 8005c74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7a:	f003 0320 	and.w	r3, r3, #32
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00a      	beq.n	8005c98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	430a      	orrs	r2, r1
 8005c96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d01a      	beq.n	8005cda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cc2:	d10a      	bne.n	8005cda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00a      	beq.n	8005cfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	605a      	str	r2, [r3, #4]
  }
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b098      	sub	sp, #96	@ 0x60
 8005d0c:	af02      	add	r7, sp, #8
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d18:	f7fc f8be 	bl	8001e98 <HAL_GetTick>
 8005d1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0308 	and.w	r3, r3, #8
 8005d28:	2b08      	cmp	r3, #8
 8005d2a:	d12e      	bne.n	8005d8a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d34:	2200      	movs	r2, #0
 8005d36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f88c 	bl	8005e58 <UART_WaitOnFlagUntilTimeout>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d021      	beq.n	8005d8a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d4e:	e853 3f00 	ldrex	r3, [r3]
 8005d52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	461a      	mov	r2, r3
 8005d62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d64:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d66:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d6c:	e841 2300 	strex	r3, r2, [r1]
 8005d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1e6      	bne.n	8005d46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2220      	movs	r2, #32
 8005d7c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e062      	b.n	8005e50 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0304 	and.w	r3, r3, #4
 8005d94:	2b04      	cmp	r3, #4
 8005d96:	d149      	bne.n	8005e2c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d9c:	9300      	str	r3, [sp, #0]
 8005d9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005da0:	2200      	movs	r2, #0
 8005da2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f856 	bl	8005e58 <UART_WaitOnFlagUntilTimeout>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d03c      	beq.n	8005e2c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dba:	e853 3f00 	ldrex	r3, [r3]
 8005dbe:	623b      	str	r3, [r7, #32]
   return(result);
 8005dc0:	6a3b      	ldr	r3, [r7, #32]
 8005dc2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	461a      	mov	r2, r3
 8005dce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005dd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dd8:	e841 2300 	strex	r3, r2, [r1]
 8005ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1e6      	bne.n	8005db2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3308      	adds	r3, #8
 8005dea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	e853 3f00 	ldrex	r3, [r3]
 8005df2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 0301 	bic.w	r3, r3, #1
 8005dfa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	3308      	adds	r3, #8
 8005e02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e04:	61fa      	str	r2, [r7, #28]
 8005e06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e08:	69b9      	ldr	r1, [r7, #24]
 8005e0a:	69fa      	ldr	r2, [r7, #28]
 8005e0c:	e841 2300 	strex	r3, r2, [r1]
 8005e10:	617b      	str	r3, [r7, #20]
   return(result);
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1e5      	bne.n	8005de4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2220      	movs	r2, #32
 8005e1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e011      	b.n	8005e50 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2220      	movs	r2, #32
 8005e30:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2220      	movs	r2, #32
 8005e36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3758      	adds	r7, #88	@ 0x58
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	603b      	str	r3, [r7, #0]
 8005e64:	4613      	mov	r3, r2
 8005e66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e68:	e049      	b.n	8005efe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e70:	d045      	beq.n	8005efe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e72:	f7fc f811 	bl	8001e98 <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d302      	bcc.n	8005e88 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d101      	bne.n	8005e8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e048      	b.n	8005f1e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0304 	and.w	r3, r3, #4
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d031      	beq.n	8005efe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	f003 0308 	and.w	r3, r3, #8
 8005ea4:	2b08      	cmp	r3, #8
 8005ea6:	d110      	bne.n	8005eca <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2208      	movs	r2, #8
 8005eae:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f000 f838 	bl	8005f26 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2208      	movs	r2, #8
 8005eba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e029      	b.n	8005f1e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	69db      	ldr	r3, [r3, #28]
 8005ed0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ed4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ed8:	d111      	bne.n	8005efe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ee2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f000 f81e 	bl	8005f26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2220      	movs	r2, #32
 8005eee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e00f      	b.n	8005f1e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	69da      	ldr	r2, [r3, #28]
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	4013      	ands	r3, r2
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	bf0c      	ite	eq
 8005f0e:	2301      	moveq	r3, #1
 8005f10:	2300      	movne	r3, #0
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	461a      	mov	r2, r3
 8005f16:	79fb      	ldrb	r3, [r7, #7]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d0a6      	beq.n	8005e6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b095      	sub	sp, #84	@ 0x54
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f36:	e853 3f00 	ldrex	r3, [r3]
 8005f3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f4e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f54:	e841 2300 	strex	r3, r2, [r1]
 8005f58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1e6      	bne.n	8005f2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	3308      	adds	r3, #8
 8005f66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	e853 3f00 	ldrex	r3, [r3]
 8005f6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	f023 0301 	bic.w	r3, r3, #1
 8005f76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	3308      	adds	r3, #8
 8005f7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f88:	e841 2300 	strex	r3, r2, [r1]
 8005f8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1e5      	bne.n	8005f60 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d118      	bne.n	8005fce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	e853 3f00 	ldrex	r3, [r3]
 8005fa8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f023 0310 	bic.w	r3, r3, #16
 8005fb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fba:	61bb      	str	r3, [r7, #24]
 8005fbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fbe:	6979      	ldr	r1, [r7, #20]
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	e841 2300 	strex	r3, r2, [r1]
 8005fc6:	613b      	str	r3, [r7, #16]
   return(result);
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1e6      	bne.n	8005f9c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005fe2:	bf00      	nop
 8005fe4:	3754      	adds	r7, #84	@ 0x54
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b084      	sub	sp, #16
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ffa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f7ff fc8d 	bl	800592c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006012:	bf00      	nop
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b088      	sub	sp, #32
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	e853 3f00 	ldrex	r3, [r3]
 800602e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006036:	61fb      	str	r3, [r7, #28]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	461a      	mov	r2, r3
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	61bb      	str	r3, [r7, #24]
 8006042:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006044:	6979      	ldr	r1, [r7, #20]
 8006046:	69ba      	ldr	r2, [r7, #24]
 8006048:	e841 2300 	strex	r3, r2, [r1]
 800604c:	613b      	str	r3, [r7, #16]
   return(result);
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1e6      	bne.n	8006022 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2220      	movs	r2, #32
 8006058:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f7ff fc59 	bl	8005918 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006066:	bf00      	nop
 8006068:	3720      	adds	r7, #32
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800606e:	b480      	push	{r7}
 8006070:	b083      	sub	sp, #12
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006076:	bf00      	nop
 8006078:	370c      	adds	r7, #12
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
	...

08006084 <srand>:
 8006084:	b538      	push	{r3, r4, r5, lr}
 8006086:	4b10      	ldr	r3, [pc, #64]	@ (80060c8 <srand+0x44>)
 8006088:	681d      	ldr	r5, [r3, #0]
 800608a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800608c:	4604      	mov	r4, r0
 800608e:	b9b3      	cbnz	r3, 80060be <srand+0x3a>
 8006090:	2018      	movs	r0, #24
 8006092:	f000 fa3d 	bl	8006510 <malloc>
 8006096:	4602      	mov	r2, r0
 8006098:	6328      	str	r0, [r5, #48]	@ 0x30
 800609a:	b920      	cbnz	r0, 80060a6 <srand+0x22>
 800609c:	4b0b      	ldr	r3, [pc, #44]	@ (80060cc <srand+0x48>)
 800609e:	480c      	ldr	r0, [pc, #48]	@ (80060d0 <srand+0x4c>)
 80060a0:	2146      	movs	r1, #70	@ 0x46
 80060a2:	f000 f9cd 	bl	8006440 <__assert_func>
 80060a6:	490b      	ldr	r1, [pc, #44]	@ (80060d4 <srand+0x50>)
 80060a8:	4b0b      	ldr	r3, [pc, #44]	@ (80060d8 <srand+0x54>)
 80060aa:	e9c0 1300 	strd	r1, r3, [r0]
 80060ae:	4b0b      	ldr	r3, [pc, #44]	@ (80060dc <srand+0x58>)
 80060b0:	6083      	str	r3, [r0, #8]
 80060b2:	230b      	movs	r3, #11
 80060b4:	8183      	strh	r3, [r0, #12]
 80060b6:	2100      	movs	r1, #0
 80060b8:	2001      	movs	r0, #1
 80060ba:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80060be:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80060c0:	2200      	movs	r2, #0
 80060c2:	611c      	str	r4, [r3, #16]
 80060c4:	615a      	str	r2, [r3, #20]
 80060c6:	bd38      	pop	{r3, r4, r5, pc}
 80060c8:	2000001c 	.word	0x2000001c
 80060cc:	080070dc 	.word	0x080070dc
 80060d0:	080070f3 	.word	0x080070f3
 80060d4:	abcd330e 	.word	0xabcd330e
 80060d8:	e66d1234 	.word	0xe66d1234
 80060dc:	0005deec 	.word	0x0005deec

080060e0 <std>:
 80060e0:	2300      	movs	r3, #0
 80060e2:	b510      	push	{r4, lr}
 80060e4:	4604      	mov	r4, r0
 80060e6:	e9c0 3300 	strd	r3, r3, [r0]
 80060ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060ee:	6083      	str	r3, [r0, #8]
 80060f0:	8181      	strh	r1, [r0, #12]
 80060f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80060f4:	81c2      	strh	r2, [r0, #14]
 80060f6:	6183      	str	r3, [r0, #24]
 80060f8:	4619      	mov	r1, r3
 80060fa:	2208      	movs	r2, #8
 80060fc:	305c      	adds	r0, #92	@ 0x5c
 80060fe:	f000 f8f4 	bl	80062ea <memset>
 8006102:	4b0d      	ldr	r3, [pc, #52]	@ (8006138 <std+0x58>)
 8006104:	6263      	str	r3, [r4, #36]	@ 0x24
 8006106:	4b0d      	ldr	r3, [pc, #52]	@ (800613c <std+0x5c>)
 8006108:	62a3      	str	r3, [r4, #40]	@ 0x28
 800610a:	4b0d      	ldr	r3, [pc, #52]	@ (8006140 <std+0x60>)
 800610c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800610e:	4b0d      	ldr	r3, [pc, #52]	@ (8006144 <std+0x64>)
 8006110:	6323      	str	r3, [r4, #48]	@ 0x30
 8006112:	4b0d      	ldr	r3, [pc, #52]	@ (8006148 <std+0x68>)
 8006114:	6224      	str	r4, [r4, #32]
 8006116:	429c      	cmp	r4, r3
 8006118:	d006      	beq.n	8006128 <std+0x48>
 800611a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800611e:	4294      	cmp	r4, r2
 8006120:	d002      	beq.n	8006128 <std+0x48>
 8006122:	33d0      	adds	r3, #208	@ 0xd0
 8006124:	429c      	cmp	r4, r3
 8006126:	d105      	bne.n	8006134 <std+0x54>
 8006128:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800612c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006130:	f000 b982 	b.w	8006438 <__retarget_lock_init_recursive>
 8006134:	bd10      	pop	{r4, pc}
 8006136:	bf00      	nop
 8006138:	08006265 	.word	0x08006265
 800613c:	08006287 	.word	0x08006287
 8006140:	080062bf 	.word	0x080062bf
 8006144:	080062e3 	.word	0x080062e3
 8006148:	200002d8 	.word	0x200002d8

0800614c <stdio_exit_handler>:
 800614c:	4a02      	ldr	r2, [pc, #8]	@ (8006158 <stdio_exit_handler+0xc>)
 800614e:	4903      	ldr	r1, [pc, #12]	@ (800615c <stdio_exit_handler+0x10>)
 8006150:	4803      	ldr	r0, [pc, #12]	@ (8006160 <stdio_exit_handler+0x14>)
 8006152:	f000 b869 	b.w	8006228 <_fwalk_sglue>
 8006156:	bf00      	nop
 8006158:	20000010 	.word	0x20000010
 800615c:	08006785 	.word	0x08006785
 8006160:	20000020 	.word	0x20000020

08006164 <cleanup_stdio>:
 8006164:	6841      	ldr	r1, [r0, #4]
 8006166:	4b0c      	ldr	r3, [pc, #48]	@ (8006198 <cleanup_stdio+0x34>)
 8006168:	4299      	cmp	r1, r3
 800616a:	b510      	push	{r4, lr}
 800616c:	4604      	mov	r4, r0
 800616e:	d001      	beq.n	8006174 <cleanup_stdio+0x10>
 8006170:	f000 fb08 	bl	8006784 <_fflush_r>
 8006174:	68a1      	ldr	r1, [r4, #8]
 8006176:	4b09      	ldr	r3, [pc, #36]	@ (800619c <cleanup_stdio+0x38>)
 8006178:	4299      	cmp	r1, r3
 800617a:	d002      	beq.n	8006182 <cleanup_stdio+0x1e>
 800617c:	4620      	mov	r0, r4
 800617e:	f000 fb01 	bl	8006784 <_fflush_r>
 8006182:	68e1      	ldr	r1, [r4, #12]
 8006184:	4b06      	ldr	r3, [pc, #24]	@ (80061a0 <cleanup_stdio+0x3c>)
 8006186:	4299      	cmp	r1, r3
 8006188:	d004      	beq.n	8006194 <cleanup_stdio+0x30>
 800618a:	4620      	mov	r0, r4
 800618c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006190:	f000 baf8 	b.w	8006784 <_fflush_r>
 8006194:	bd10      	pop	{r4, pc}
 8006196:	bf00      	nop
 8006198:	200002d8 	.word	0x200002d8
 800619c:	20000340 	.word	0x20000340
 80061a0:	200003a8 	.word	0x200003a8

080061a4 <global_stdio_init.part.0>:
 80061a4:	b510      	push	{r4, lr}
 80061a6:	4b0b      	ldr	r3, [pc, #44]	@ (80061d4 <global_stdio_init.part.0+0x30>)
 80061a8:	4c0b      	ldr	r4, [pc, #44]	@ (80061d8 <global_stdio_init.part.0+0x34>)
 80061aa:	4a0c      	ldr	r2, [pc, #48]	@ (80061dc <global_stdio_init.part.0+0x38>)
 80061ac:	601a      	str	r2, [r3, #0]
 80061ae:	4620      	mov	r0, r4
 80061b0:	2200      	movs	r2, #0
 80061b2:	2104      	movs	r1, #4
 80061b4:	f7ff ff94 	bl	80060e0 <std>
 80061b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80061bc:	2201      	movs	r2, #1
 80061be:	2109      	movs	r1, #9
 80061c0:	f7ff ff8e 	bl	80060e0 <std>
 80061c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80061c8:	2202      	movs	r2, #2
 80061ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061ce:	2112      	movs	r1, #18
 80061d0:	f7ff bf86 	b.w	80060e0 <std>
 80061d4:	20000410 	.word	0x20000410
 80061d8:	200002d8 	.word	0x200002d8
 80061dc:	0800614d 	.word	0x0800614d

080061e0 <__sfp_lock_acquire>:
 80061e0:	4801      	ldr	r0, [pc, #4]	@ (80061e8 <__sfp_lock_acquire+0x8>)
 80061e2:	f000 b92a 	b.w	800643a <__retarget_lock_acquire_recursive>
 80061e6:	bf00      	nop
 80061e8:	20000419 	.word	0x20000419

080061ec <__sfp_lock_release>:
 80061ec:	4801      	ldr	r0, [pc, #4]	@ (80061f4 <__sfp_lock_release+0x8>)
 80061ee:	f000 b925 	b.w	800643c <__retarget_lock_release_recursive>
 80061f2:	bf00      	nop
 80061f4:	20000419 	.word	0x20000419

080061f8 <__sinit>:
 80061f8:	b510      	push	{r4, lr}
 80061fa:	4604      	mov	r4, r0
 80061fc:	f7ff fff0 	bl	80061e0 <__sfp_lock_acquire>
 8006200:	6a23      	ldr	r3, [r4, #32]
 8006202:	b11b      	cbz	r3, 800620c <__sinit+0x14>
 8006204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006208:	f7ff bff0 	b.w	80061ec <__sfp_lock_release>
 800620c:	4b04      	ldr	r3, [pc, #16]	@ (8006220 <__sinit+0x28>)
 800620e:	6223      	str	r3, [r4, #32]
 8006210:	4b04      	ldr	r3, [pc, #16]	@ (8006224 <__sinit+0x2c>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1f5      	bne.n	8006204 <__sinit+0xc>
 8006218:	f7ff ffc4 	bl	80061a4 <global_stdio_init.part.0>
 800621c:	e7f2      	b.n	8006204 <__sinit+0xc>
 800621e:	bf00      	nop
 8006220:	08006165 	.word	0x08006165
 8006224:	20000410 	.word	0x20000410

08006228 <_fwalk_sglue>:
 8006228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800622c:	4607      	mov	r7, r0
 800622e:	4688      	mov	r8, r1
 8006230:	4614      	mov	r4, r2
 8006232:	2600      	movs	r6, #0
 8006234:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006238:	f1b9 0901 	subs.w	r9, r9, #1
 800623c:	d505      	bpl.n	800624a <_fwalk_sglue+0x22>
 800623e:	6824      	ldr	r4, [r4, #0]
 8006240:	2c00      	cmp	r4, #0
 8006242:	d1f7      	bne.n	8006234 <_fwalk_sglue+0xc>
 8006244:	4630      	mov	r0, r6
 8006246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800624a:	89ab      	ldrh	r3, [r5, #12]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d907      	bls.n	8006260 <_fwalk_sglue+0x38>
 8006250:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006254:	3301      	adds	r3, #1
 8006256:	d003      	beq.n	8006260 <_fwalk_sglue+0x38>
 8006258:	4629      	mov	r1, r5
 800625a:	4638      	mov	r0, r7
 800625c:	47c0      	blx	r8
 800625e:	4306      	orrs	r6, r0
 8006260:	3568      	adds	r5, #104	@ 0x68
 8006262:	e7e9      	b.n	8006238 <_fwalk_sglue+0x10>

08006264 <__sread>:
 8006264:	b510      	push	{r4, lr}
 8006266:	460c      	mov	r4, r1
 8006268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800626c:	f000 f896 	bl	800639c <_read_r>
 8006270:	2800      	cmp	r0, #0
 8006272:	bfab      	itete	ge
 8006274:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006276:	89a3      	ldrhlt	r3, [r4, #12]
 8006278:	181b      	addge	r3, r3, r0
 800627a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800627e:	bfac      	ite	ge
 8006280:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006282:	81a3      	strhlt	r3, [r4, #12]
 8006284:	bd10      	pop	{r4, pc}

08006286 <__swrite>:
 8006286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800628a:	461f      	mov	r7, r3
 800628c:	898b      	ldrh	r3, [r1, #12]
 800628e:	05db      	lsls	r3, r3, #23
 8006290:	4605      	mov	r5, r0
 8006292:	460c      	mov	r4, r1
 8006294:	4616      	mov	r6, r2
 8006296:	d505      	bpl.n	80062a4 <__swrite+0x1e>
 8006298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800629c:	2302      	movs	r3, #2
 800629e:	2200      	movs	r2, #0
 80062a0:	f000 f86a 	bl	8006378 <_lseek_r>
 80062a4:	89a3      	ldrh	r3, [r4, #12]
 80062a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062ae:	81a3      	strh	r3, [r4, #12]
 80062b0:	4632      	mov	r2, r6
 80062b2:	463b      	mov	r3, r7
 80062b4:	4628      	mov	r0, r5
 80062b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062ba:	f000 b881 	b.w	80063c0 <_write_r>

080062be <__sseek>:
 80062be:	b510      	push	{r4, lr}
 80062c0:	460c      	mov	r4, r1
 80062c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062c6:	f000 f857 	bl	8006378 <_lseek_r>
 80062ca:	1c43      	adds	r3, r0, #1
 80062cc:	89a3      	ldrh	r3, [r4, #12]
 80062ce:	bf15      	itete	ne
 80062d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80062d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80062d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80062da:	81a3      	strheq	r3, [r4, #12]
 80062dc:	bf18      	it	ne
 80062de:	81a3      	strhne	r3, [r4, #12]
 80062e0:	bd10      	pop	{r4, pc}

080062e2 <__sclose>:
 80062e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062e6:	f000 b825 	b.w	8006334 <_close_r>

080062ea <memset>:
 80062ea:	4402      	add	r2, r0
 80062ec:	4603      	mov	r3, r0
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d100      	bne.n	80062f4 <memset+0xa>
 80062f2:	4770      	bx	lr
 80062f4:	f803 1b01 	strb.w	r1, [r3], #1
 80062f8:	e7f9      	b.n	80062ee <memset+0x4>
	...

080062fc <time>:
 80062fc:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 80062fe:	4b0c      	ldr	r3, [pc, #48]	@ (8006330 <time+0x34>)
 8006300:	f04f 36ff 	mov.w	r6, #4294967295
 8006304:	f04f 37ff 	mov.w	r7, #4294967295
 8006308:	4669      	mov	r1, sp
 800630a:	4604      	mov	r4, r0
 800630c:	2200      	movs	r2, #0
 800630e:	6818      	ldr	r0, [r3, #0]
 8006310:	e9cd 6700 	strd	r6, r7, [sp]
 8006314:	f000 f81e 	bl	8006354 <_gettimeofday_r>
 8006318:	2800      	cmp	r0, #0
 800631a:	bfb8      	it	lt
 800631c:	e9cd 6700 	strdlt	r6, r7, [sp]
 8006320:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006324:	b10c      	cbz	r4, 800632a <time+0x2e>
 8006326:	e9c4 0100 	strd	r0, r1, [r4]
 800632a:	b004      	add	sp, #16
 800632c:	bdd0      	pop	{r4, r6, r7, pc}
 800632e:	bf00      	nop
 8006330:	2000001c 	.word	0x2000001c

08006334 <_close_r>:
 8006334:	b538      	push	{r3, r4, r5, lr}
 8006336:	4d06      	ldr	r5, [pc, #24]	@ (8006350 <_close_r+0x1c>)
 8006338:	2300      	movs	r3, #0
 800633a:	4604      	mov	r4, r0
 800633c:	4608      	mov	r0, r1
 800633e:	602b      	str	r3, [r5, #0]
 8006340:	f7fb fcaa 	bl	8001c98 <_close>
 8006344:	1c43      	adds	r3, r0, #1
 8006346:	d102      	bne.n	800634e <_close_r+0x1a>
 8006348:	682b      	ldr	r3, [r5, #0]
 800634a:	b103      	cbz	r3, 800634e <_close_r+0x1a>
 800634c:	6023      	str	r3, [r4, #0]
 800634e:	bd38      	pop	{r3, r4, r5, pc}
 8006350:	20000414 	.word	0x20000414

08006354 <_gettimeofday_r>:
 8006354:	b538      	push	{r3, r4, r5, lr}
 8006356:	4d07      	ldr	r5, [pc, #28]	@ (8006374 <_gettimeofday_r+0x20>)
 8006358:	2300      	movs	r3, #0
 800635a:	4604      	mov	r4, r0
 800635c:	4608      	mov	r0, r1
 800635e:	4611      	mov	r1, r2
 8006360:	602b      	str	r3, [r5, #0]
 8006362:	f000 fe8b 	bl	800707c <_gettimeofday>
 8006366:	1c43      	adds	r3, r0, #1
 8006368:	d102      	bne.n	8006370 <_gettimeofday_r+0x1c>
 800636a:	682b      	ldr	r3, [r5, #0]
 800636c:	b103      	cbz	r3, 8006370 <_gettimeofday_r+0x1c>
 800636e:	6023      	str	r3, [r4, #0]
 8006370:	bd38      	pop	{r3, r4, r5, pc}
 8006372:	bf00      	nop
 8006374:	20000414 	.word	0x20000414

08006378 <_lseek_r>:
 8006378:	b538      	push	{r3, r4, r5, lr}
 800637a:	4d07      	ldr	r5, [pc, #28]	@ (8006398 <_lseek_r+0x20>)
 800637c:	4604      	mov	r4, r0
 800637e:	4608      	mov	r0, r1
 8006380:	4611      	mov	r1, r2
 8006382:	2200      	movs	r2, #0
 8006384:	602a      	str	r2, [r5, #0]
 8006386:	461a      	mov	r2, r3
 8006388:	f7fb fcad 	bl	8001ce6 <_lseek>
 800638c:	1c43      	adds	r3, r0, #1
 800638e:	d102      	bne.n	8006396 <_lseek_r+0x1e>
 8006390:	682b      	ldr	r3, [r5, #0]
 8006392:	b103      	cbz	r3, 8006396 <_lseek_r+0x1e>
 8006394:	6023      	str	r3, [r4, #0]
 8006396:	bd38      	pop	{r3, r4, r5, pc}
 8006398:	20000414 	.word	0x20000414

0800639c <_read_r>:
 800639c:	b538      	push	{r3, r4, r5, lr}
 800639e:	4d07      	ldr	r5, [pc, #28]	@ (80063bc <_read_r+0x20>)
 80063a0:	4604      	mov	r4, r0
 80063a2:	4608      	mov	r0, r1
 80063a4:	4611      	mov	r1, r2
 80063a6:	2200      	movs	r2, #0
 80063a8:	602a      	str	r2, [r5, #0]
 80063aa:	461a      	mov	r2, r3
 80063ac:	f7fb fc3b 	bl	8001c26 <_read>
 80063b0:	1c43      	adds	r3, r0, #1
 80063b2:	d102      	bne.n	80063ba <_read_r+0x1e>
 80063b4:	682b      	ldr	r3, [r5, #0]
 80063b6:	b103      	cbz	r3, 80063ba <_read_r+0x1e>
 80063b8:	6023      	str	r3, [r4, #0]
 80063ba:	bd38      	pop	{r3, r4, r5, pc}
 80063bc:	20000414 	.word	0x20000414

080063c0 <_write_r>:
 80063c0:	b538      	push	{r3, r4, r5, lr}
 80063c2:	4d07      	ldr	r5, [pc, #28]	@ (80063e0 <_write_r+0x20>)
 80063c4:	4604      	mov	r4, r0
 80063c6:	4608      	mov	r0, r1
 80063c8:	4611      	mov	r1, r2
 80063ca:	2200      	movs	r2, #0
 80063cc:	602a      	str	r2, [r5, #0]
 80063ce:	461a      	mov	r2, r3
 80063d0:	f7fb fc46 	bl	8001c60 <_write>
 80063d4:	1c43      	adds	r3, r0, #1
 80063d6:	d102      	bne.n	80063de <_write_r+0x1e>
 80063d8:	682b      	ldr	r3, [r5, #0]
 80063da:	b103      	cbz	r3, 80063de <_write_r+0x1e>
 80063dc:	6023      	str	r3, [r4, #0]
 80063de:	bd38      	pop	{r3, r4, r5, pc}
 80063e0:	20000414 	.word	0x20000414

080063e4 <__errno>:
 80063e4:	4b01      	ldr	r3, [pc, #4]	@ (80063ec <__errno+0x8>)
 80063e6:	6818      	ldr	r0, [r3, #0]
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	2000001c 	.word	0x2000001c

080063f0 <__libc_init_array>:
 80063f0:	b570      	push	{r4, r5, r6, lr}
 80063f2:	4d0d      	ldr	r5, [pc, #52]	@ (8006428 <__libc_init_array+0x38>)
 80063f4:	4c0d      	ldr	r4, [pc, #52]	@ (800642c <__libc_init_array+0x3c>)
 80063f6:	1b64      	subs	r4, r4, r5
 80063f8:	10a4      	asrs	r4, r4, #2
 80063fa:	2600      	movs	r6, #0
 80063fc:	42a6      	cmp	r6, r4
 80063fe:	d109      	bne.n	8006414 <__libc_init_array+0x24>
 8006400:	4d0b      	ldr	r5, [pc, #44]	@ (8006430 <__libc_init_array+0x40>)
 8006402:	4c0c      	ldr	r4, [pc, #48]	@ (8006434 <__libc_init_array+0x44>)
 8006404:	f000 fe42 	bl	800708c <_init>
 8006408:	1b64      	subs	r4, r4, r5
 800640a:	10a4      	asrs	r4, r4, #2
 800640c:	2600      	movs	r6, #0
 800640e:	42a6      	cmp	r6, r4
 8006410:	d105      	bne.n	800641e <__libc_init_array+0x2e>
 8006412:	bd70      	pop	{r4, r5, r6, pc}
 8006414:	f855 3b04 	ldr.w	r3, [r5], #4
 8006418:	4798      	blx	r3
 800641a:	3601      	adds	r6, #1
 800641c:	e7ee      	b.n	80063fc <__libc_init_array+0xc>
 800641e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006422:	4798      	blx	r3
 8006424:	3601      	adds	r6, #1
 8006426:	e7f2      	b.n	800640e <__libc_init_array+0x1e>
 8006428:	080071c4 	.word	0x080071c4
 800642c:	080071c4 	.word	0x080071c4
 8006430:	080071c4 	.word	0x080071c4
 8006434:	080071c8 	.word	0x080071c8

08006438 <__retarget_lock_init_recursive>:
 8006438:	4770      	bx	lr

0800643a <__retarget_lock_acquire_recursive>:
 800643a:	4770      	bx	lr

0800643c <__retarget_lock_release_recursive>:
 800643c:	4770      	bx	lr
	...

08006440 <__assert_func>:
 8006440:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006442:	4614      	mov	r4, r2
 8006444:	461a      	mov	r2, r3
 8006446:	4b09      	ldr	r3, [pc, #36]	@ (800646c <__assert_func+0x2c>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4605      	mov	r5, r0
 800644c:	68d8      	ldr	r0, [r3, #12]
 800644e:	b954      	cbnz	r4, 8006466 <__assert_func+0x26>
 8006450:	4b07      	ldr	r3, [pc, #28]	@ (8006470 <__assert_func+0x30>)
 8006452:	461c      	mov	r4, r3
 8006454:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006458:	9100      	str	r1, [sp, #0]
 800645a:	462b      	mov	r3, r5
 800645c:	4905      	ldr	r1, [pc, #20]	@ (8006474 <__assert_func+0x34>)
 800645e:	f000 f9b9 	bl	80067d4 <fiprintf>
 8006462:	f000 f9d9 	bl	8006818 <abort>
 8006466:	4b04      	ldr	r3, [pc, #16]	@ (8006478 <__assert_func+0x38>)
 8006468:	e7f4      	b.n	8006454 <__assert_func+0x14>
 800646a:	bf00      	nop
 800646c:	2000001c 	.word	0x2000001c
 8006470:	08007186 	.word	0x08007186
 8006474:	08007158 	.word	0x08007158
 8006478:	0800714b 	.word	0x0800714b

0800647c <_free_r>:
 800647c:	b538      	push	{r3, r4, r5, lr}
 800647e:	4605      	mov	r5, r0
 8006480:	2900      	cmp	r1, #0
 8006482:	d041      	beq.n	8006508 <_free_r+0x8c>
 8006484:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006488:	1f0c      	subs	r4, r1, #4
 800648a:	2b00      	cmp	r3, #0
 800648c:	bfb8      	it	lt
 800648e:	18e4      	addlt	r4, r4, r3
 8006490:	f000 f8e8 	bl	8006664 <__malloc_lock>
 8006494:	4a1d      	ldr	r2, [pc, #116]	@ (800650c <_free_r+0x90>)
 8006496:	6813      	ldr	r3, [r2, #0]
 8006498:	b933      	cbnz	r3, 80064a8 <_free_r+0x2c>
 800649a:	6063      	str	r3, [r4, #4]
 800649c:	6014      	str	r4, [r2, #0]
 800649e:	4628      	mov	r0, r5
 80064a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064a4:	f000 b8e4 	b.w	8006670 <__malloc_unlock>
 80064a8:	42a3      	cmp	r3, r4
 80064aa:	d908      	bls.n	80064be <_free_r+0x42>
 80064ac:	6820      	ldr	r0, [r4, #0]
 80064ae:	1821      	adds	r1, r4, r0
 80064b0:	428b      	cmp	r3, r1
 80064b2:	bf01      	itttt	eq
 80064b4:	6819      	ldreq	r1, [r3, #0]
 80064b6:	685b      	ldreq	r3, [r3, #4]
 80064b8:	1809      	addeq	r1, r1, r0
 80064ba:	6021      	streq	r1, [r4, #0]
 80064bc:	e7ed      	b.n	800649a <_free_r+0x1e>
 80064be:	461a      	mov	r2, r3
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	b10b      	cbz	r3, 80064c8 <_free_r+0x4c>
 80064c4:	42a3      	cmp	r3, r4
 80064c6:	d9fa      	bls.n	80064be <_free_r+0x42>
 80064c8:	6811      	ldr	r1, [r2, #0]
 80064ca:	1850      	adds	r0, r2, r1
 80064cc:	42a0      	cmp	r0, r4
 80064ce:	d10b      	bne.n	80064e8 <_free_r+0x6c>
 80064d0:	6820      	ldr	r0, [r4, #0]
 80064d2:	4401      	add	r1, r0
 80064d4:	1850      	adds	r0, r2, r1
 80064d6:	4283      	cmp	r3, r0
 80064d8:	6011      	str	r1, [r2, #0]
 80064da:	d1e0      	bne.n	800649e <_free_r+0x22>
 80064dc:	6818      	ldr	r0, [r3, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	6053      	str	r3, [r2, #4]
 80064e2:	4408      	add	r0, r1
 80064e4:	6010      	str	r0, [r2, #0]
 80064e6:	e7da      	b.n	800649e <_free_r+0x22>
 80064e8:	d902      	bls.n	80064f0 <_free_r+0x74>
 80064ea:	230c      	movs	r3, #12
 80064ec:	602b      	str	r3, [r5, #0]
 80064ee:	e7d6      	b.n	800649e <_free_r+0x22>
 80064f0:	6820      	ldr	r0, [r4, #0]
 80064f2:	1821      	adds	r1, r4, r0
 80064f4:	428b      	cmp	r3, r1
 80064f6:	bf04      	itt	eq
 80064f8:	6819      	ldreq	r1, [r3, #0]
 80064fa:	685b      	ldreq	r3, [r3, #4]
 80064fc:	6063      	str	r3, [r4, #4]
 80064fe:	bf04      	itt	eq
 8006500:	1809      	addeq	r1, r1, r0
 8006502:	6021      	streq	r1, [r4, #0]
 8006504:	6054      	str	r4, [r2, #4]
 8006506:	e7ca      	b.n	800649e <_free_r+0x22>
 8006508:	bd38      	pop	{r3, r4, r5, pc}
 800650a:	bf00      	nop
 800650c:	20000420 	.word	0x20000420

08006510 <malloc>:
 8006510:	4b02      	ldr	r3, [pc, #8]	@ (800651c <malloc+0xc>)
 8006512:	4601      	mov	r1, r0
 8006514:	6818      	ldr	r0, [r3, #0]
 8006516:	f000 b825 	b.w	8006564 <_malloc_r>
 800651a:	bf00      	nop
 800651c:	2000001c 	.word	0x2000001c

08006520 <sbrk_aligned>:
 8006520:	b570      	push	{r4, r5, r6, lr}
 8006522:	4e0f      	ldr	r6, [pc, #60]	@ (8006560 <sbrk_aligned+0x40>)
 8006524:	460c      	mov	r4, r1
 8006526:	6831      	ldr	r1, [r6, #0]
 8006528:	4605      	mov	r5, r0
 800652a:	b911      	cbnz	r1, 8006532 <sbrk_aligned+0x12>
 800652c:	f000 f964 	bl	80067f8 <_sbrk_r>
 8006530:	6030      	str	r0, [r6, #0]
 8006532:	4621      	mov	r1, r4
 8006534:	4628      	mov	r0, r5
 8006536:	f000 f95f 	bl	80067f8 <_sbrk_r>
 800653a:	1c43      	adds	r3, r0, #1
 800653c:	d103      	bne.n	8006546 <sbrk_aligned+0x26>
 800653e:	f04f 34ff 	mov.w	r4, #4294967295
 8006542:	4620      	mov	r0, r4
 8006544:	bd70      	pop	{r4, r5, r6, pc}
 8006546:	1cc4      	adds	r4, r0, #3
 8006548:	f024 0403 	bic.w	r4, r4, #3
 800654c:	42a0      	cmp	r0, r4
 800654e:	d0f8      	beq.n	8006542 <sbrk_aligned+0x22>
 8006550:	1a21      	subs	r1, r4, r0
 8006552:	4628      	mov	r0, r5
 8006554:	f000 f950 	bl	80067f8 <_sbrk_r>
 8006558:	3001      	adds	r0, #1
 800655a:	d1f2      	bne.n	8006542 <sbrk_aligned+0x22>
 800655c:	e7ef      	b.n	800653e <sbrk_aligned+0x1e>
 800655e:	bf00      	nop
 8006560:	2000041c 	.word	0x2000041c

08006564 <_malloc_r>:
 8006564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006568:	1ccd      	adds	r5, r1, #3
 800656a:	f025 0503 	bic.w	r5, r5, #3
 800656e:	3508      	adds	r5, #8
 8006570:	2d0c      	cmp	r5, #12
 8006572:	bf38      	it	cc
 8006574:	250c      	movcc	r5, #12
 8006576:	2d00      	cmp	r5, #0
 8006578:	4606      	mov	r6, r0
 800657a:	db01      	blt.n	8006580 <_malloc_r+0x1c>
 800657c:	42a9      	cmp	r1, r5
 800657e:	d904      	bls.n	800658a <_malloc_r+0x26>
 8006580:	230c      	movs	r3, #12
 8006582:	6033      	str	r3, [r6, #0]
 8006584:	2000      	movs	r0, #0
 8006586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800658a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006660 <_malloc_r+0xfc>
 800658e:	f000 f869 	bl	8006664 <__malloc_lock>
 8006592:	f8d8 3000 	ldr.w	r3, [r8]
 8006596:	461c      	mov	r4, r3
 8006598:	bb44      	cbnz	r4, 80065ec <_malloc_r+0x88>
 800659a:	4629      	mov	r1, r5
 800659c:	4630      	mov	r0, r6
 800659e:	f7ff ffbf 	bl	8006520 <sbrk_aligned>
 80065a2:	1c43      	adds	r3, r0, #1
 80065a4:	4604      	mov	r4, r0
 80065a6:	d158      	bne.n	800665a <_malloc_r+0xf6>
 80065a8:	f8d8 4000 	ldr.w	r4, [r8]
 80065ac:	4627      	mov	r7, r4
 80065ae:	2f00      	cmp	r7, #0
 80065b0:	d143      	bne.n	800663a <_malloc_r+0xd6>
 80065b2:	2c00      	cmp	r4, #0
 80065b4:	d04b      	beq.n	800664e <_malloc_r+0xea>
 80065b6:	6823      	ldr	r3, [r4, #0]
 80065b8:	4639      	mov	r1, r7
 80065ba:	4630      	mov	r0, r6
 80065bc:	eb04 0903 	add.w	r9, r4, r3
 80065c0:	f000 f91a 	bl	80067f8 <_sbrk_r>
 80065c4:	4581      	cmp	r9, r0
 80065c6:	d142      	bne.n	800664e <_malloc_r+0xea>
 80065c8:	6821      	ldr	r1, [r4, #0]
 80065ca:	1a6d      	subs	r5, r5, r1
 80065cc:	4629      	mov	r1, r5
 80065ce:	4630      	mov	r0, r6
 80065d0:	f7ff ffa6 	bl	8006520 <sbrk_aligned>
 80065d4:	3001      	adds	r0, #1
 80065d6:	d03a      	beq.n	800664e <_malloc_r+0xea>
 80065d8:	6823      	ldr	r3, [r4, #0]
 80065da:	442b      	add	r3, r5
 80065dc:	6023      	str	r3, [r4, #0]
 80065de:	f8d8 3000 	ldr.w	r3, [r8]
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	bb62      	cbnz	r2, 8006640 <_malloc_r+0xdc>
 80065e6:	f8c8 7000 	str.w	r7, [r8]
 80065ea:	e00f      	b.n	800660c <_malloc_r+0xa8>
 80065ec:	6822      	ldr	r2, [r4, #0]
 80065ee:	1b52      	subs	r2, r2, r5
 80065f0:	d420      	bmi.n	8006634 <_malloc_r+0xd0>
 80065f2:	2a0b      	cmp	r2, #11
 80065f4:	d917      	bls.n	8006626 <_malloc_r+0xc2>
 80065f6:	1961      	adds	r1, r4, r5
 80065f8:	42a3      	cmp	r3, r4
 80065fa:	6025      	str	r5, [r4, #0]
 80065fc:	bf18      	it	ne
 80065fe:	6059      	strne	r1, [r3, #4]
 8006600:	6863      	ldr	r3, [r4, #4]
 8006602:	bf08      	it	eq
 8006604:	f8c8 1000 	streq.w	r1, [r8]
 8006608:	5162      	str	r2, [r4, r5]
 800660a:	604b      	str	r3, [r1, #4]
 800660c:	4630      	mov	r0, r6
 800660e:	f000 f82f 	bl	8006670 <__malloc_unlock>
 8006612:	f104 000b 	add.w	r0, r4, #11
 8006616:	1d23      	adds	r3, r4, #4
 8006618:	f020 0007 	bic.w	r0, r0, #7
 800661c:	1ac2      	subs	r2, r0, r3
 800661e:	bf1c      	itt	ne
 8006620:	1a1b      	subne	r3, r3, r0
 8006622:	50a3      	strne	r3, [r4, r2]
 8006624:	e7af      	b.n	8006586 <_malloc_r+0x22>
 8006626:	6862      	ldr	r2, [r4, #4]
 8006628:	42a3      	cmp	r3, r4
 800662a:	bf0c      	ite	eq
 800662c:	f8c8 2000 	streq.w	r2, [r8]
 8006630:	605a      	strne	r2, [r3, #4]
 8006632:	e7eb      	b.n	800660c <_malloc_r+0xa8>
 8006634:	4623      	mov	r3, r4
 8006636:	6864      	ldr	r4, [r4, #4]
 8006638:	e7ae      	b.n	8006598 <_malloc_r+0x34>
 800663a:	463c      	mov	r4, r7
 800663c:	687f      	ldr	r7, [r7, #4]
 800663e:	e7b6      	b.n	80065ae <_malloc_r+0x4a>
 8006640:	461a      	mov	r2, r3
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	42a3      	cmp	r3, r4
 8006646:	d1fb      	bne.n	8006640 <_malloc_r+0xdc>
 8006648:	2300      	movs	r3, #0
 800664a:	6053      	str	r3, [r2, #4]
 800664c:	e7de      	b.n	800660c <_malloc_r+0xa8>
 800664e:	230c      	movs	r3, #12
 8006650:	6033      	str	r3, [r6, #0]
 8006652:	4630      	mov	r0, r6
 8006654:	f000 f80c 	bl	8006670 <__malloc_unlock>
 8006658:	e794      	b.n	8006584 <_malloc_r+0x20>
 800665a:	6005      	str	r5, [r0, #0]
 800665c:	e7d6      	b.n	800660c <_malloc_r+0xa8>
 800665e:	bf00      	nop
 8006660:	20000420 	.word	0x20000420

08006664 <__malloc_lock>:
 8006664:	4801      	ldr	r0, [pc, #4]	@ (800666c <__malloc_lock+0x8>)
 8006666:	f7ff bee8 	b.w	800643a <__retarget_lock_acquire_recursive>
 800666a:	bf00      	nop
 800666c:	20000418 	.word	0x20000418

08006670 <__malloc_unlock>:
 8006670:	4801      	ldr	r0, [pc, #4]	@ (8006678 <__malloc_unlock+0x8>)
 8006672:	f7ff bee3 	b.w	800643c <__retarget_lock_release_recursive>
 8006676:	bf00      	nop
 8006678:	20000418 	.word	0x20000418

0800667c <__sflush_r>:
 800667c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006684:	0716      	lsls	r6, r2, #28
 8006686:	4605      	mov	r5, r0
 8006688:	460c      	mov	r4, r1
 800668a:	d454      	bmi.n	8006736 <__sflush_r+0xba>
 800668c:	684b      	ldr	r3, [r1, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	dc02      	bgt.n	8006698 <__sflush_r+0x1c>
 8006692:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006694:	2b00      	cmp	r3, #0
 8006696:	dd48      	ble.n	800672a <__sflush_r+0xae>
 8006698:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800669a:	2e00      	cmp	r6, #0
 800669c:	d045      	beq.n	800672a <__sflush_r+0xae>
 800669e:	2300      	movs	r3, #0
 80066a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80066a4:	682f      	ldr	r7, [r5, #0]
 80066a6:	6a21      	ldr	r1, [r4, #32]
 80066a8:	602b      	str	r3, [r5, #0]
 80066aa:	d030      	beq.n	800670e <__sflush_r+0x92>
 80066ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80066ae:	89a3      	ldrh	r3, [r4, #12]
 80066b0:	0759      	lsls	r1, r3, #29
 80066b2:	d505      	bpl.n	80066c0 <__sflush_r+0x44>
 80066b4:	6863      	ldr	r3, [r4, #4]
 80066b6:	1ad2      	subs	r2, r2, r3
 80066b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80066ba:	b10b      	cbz	r3, 80066c0 <__sflush_r+0x44>
 80066bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80066be:	1ad2      	subs	r2, r2, r3
 80066c0:	2300      	movs	r3, #0
 80066c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80066c4:	6a21      	ldr	r1, [r4, #32]
 80066c6:	4628      	mov	r0, r5
 80066c8:	47b0      	blx	r6
 80066ca:	1c43      	adds	r3, r0, #1
 80066cc:	89a3      	ldrh	r3, [r4, #12]
 80066ce:	d106      	bne.n	80066de <__sflush_r+0x62>
 80066d0:	6829      	ldr	r1, [r5, #0]
 80066d2:	291d      	cmp	r1, #29
 80066d4:	d82b      	bhi.n	800672e <__sflush_r+0xb2>
 80066d6:	4a2a      	ldr	r2, [pc, #168]	@ (8006780 <__sflush_r+0x104>)
 80066d8:	410a      	asrs	r2, r1
 80066da:	07d6      	lsls	r6, r2, #31
 80066dc:	d427      	bmi.n	800672e <__sflush_r+0xb2>
 80066de:	2200      	movs	r2, #0
 80066e0:	6062      	str	r2, [r4, #4]
 80066e2:	04d9      	lsls	r1, r3, #19
 80066e4:	6922      	ldr	r2, [r4, #16]
 80066e6:	6022      	str	r2, [r4, #0]
 80066e8:	d504      	bpl.n	80066f4 <__sflush_r+0x78>
 80066ea:	1c42      	adds	r2, r0, #1
 80066ec:	d101      	bne.n	80066f2 <__sflush_r+0x76>
 80066ee:	682b      	ldr	r3, [r5, #0]
 80066f0:	b903      	cbnz	r3, 80066f4 <__sflush_r+0x78>
 80066f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80066f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80066f6:	602f      	str	r7, [r5, #0]
 80066f8:	b1b9      	cbz	r1, 800672a <__sflush_r+0xae>
 80066fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80066fe:	4299      	cmp	r1, r3
 8006700:	d002      	beq.n	8006708 <__sflush_r+0x8c>
 8006702:	4628      	mov	r0, r5
 8006704:	f7ff feba 	bl	800647c <_free_r>
 8006708:	2300      	movs	r3, #0
 800670a:	6363      	str	r3, [r4, #52]	@ 0x34
 800670c:	e00d      	b.n	800672a <__sflush_r+0xae>
 800670e:	2301      	movs	r3, #1
 8006710:	4628      	mov	r0, r5
 8006712:	47b0      	blx	r6
 8006714:	4602      	mov	r2, r0
 8006716:	1c50      	adds	r0, r2, #1
 8006718:	d1c9      	bne.n	80066ae <__sflush_r+0x32>
 800671a:	682b      	ldr	r3, [r5, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d0c6      	beq.n	80066ae <__sflush_r+0x32>
 8006720:	2b1d      	cmp	r3, #29
 8006722:	d001      	beq.n	8006728 <__sflush_r+0xac>
 8006724:	2b16      	cmp	r3, #22
 8006726:	d11e      	bne.n	8006766 <__sflush_r+0xea>
 8006728:	602f      	str	r7, [r5, #0]
 800672a:	2000      	movs	r0, #0
 800672c:	e022      	b.n	8006774 <__sflush_r+0xf8>
 800672e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006732:	b21b      	sxth	r3, r3
 8006734:	e01b      	b.n	800676e <__sflush_r+0xf2>
 8006736:	690f      	ldr	r7, [r1, #16]
 8006738:	2f00      	cmp	r7, #0
 800673a:	d0f6      	beq.n	800672a <__sflush_r+0xae>
 800673c:	0793      	lsls	r3, r2, #30
 800673e:	680e      	ldr	r6, [r1, #0]
 8006740:	bf08      	it	eq
 8006742:	694b      	ldreq	r3, [r1, #20]
 8006744:	600f      	str	r7, [r1, #0]
 8006746:	bf18      	it	ne
 8006748:	2300      	movne	r3, #0
 800674a:	eba6 0807 	sub.w	r8, r6, r7
 800674e:	608b      	str	r3, [r1, #8]
 8006750:	f1b8 0f00 	cmp.w	r8, #0
 8006754:	dde9      	ble.n	800672a <__sflush_r+0xae>
 8006756:	6a21      	ldr	r1, [r4, #32]
 8006758:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800675a:	4643      	mov	r3, r8
 800675c:	463a      	mov	r2, r7
 800675e:	4628      	mov	r0, r5
 8006760:	47b0      	blx	r6
 8006762:	2800      	cmp	r0, #0
 8006764:	dc08      	bgt.n	8006778 <__sflush_r+0xfc>
 8006766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800676a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800676e:	81a3      	strh	r3, [r4, #12]
 8006770:	f04f 30ff 	mov.w	r0, #4294967295
 8006774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006778:	4407      	add	r7, r0
 800677a:	eba8 0800 	sub.w	r8, r8, r0
 800677e:	e7e7      	b.n	8006750 <__sflush_r+0xd4>
 8006780:	dfbffffe 	.word	0xdfbffffe

08006784 <_fflush_r>:
 8006784:	b538      	push	{r3, r4, r5, lr}
 8006786:	690b      	ldr	r3, [r1, #16]
 8006788:	4605      	mov	r5, r0
 800678a:	460c      	mov	r4, r1
 800678c:	b913      	cbnz	r3, 8006794 <_fflush_r+0x10>
 800678e:	2500      	movs	r5, #0
 8006790:	4628      	mov	r0, r5
 8006792:	bd38      	pop	{r3, r4, r5, pc}
 8006794:	b118      	cbz	r0, 800679e <_fflush_r+0x1a>
 8006796:	6a03      	ldr	r3, [r0, #32]
 8006798:	b90b      	cbnz	r3, 800679e <_fflush_r+0x1a>
 800679a:	f7ff fd2d 	bl	80061f8 <__sinit>
 800679e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d0f3      	beq.n	800678e <_fflush_r+0xa>
 80067a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80067a8:	07d0      	lsls	r0, r2, #31
 80067aa:	d404      	bmi.n	80067b6 <_fflush_r+0x32>
 80067ac:	0599      	lsls	r1, r3, #22
 80067ae:	d402      	bmi.n	80067b6 <_fflush_r+0x32>
 80067b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067b2:	f7ff fe42 	bl	800643a <__retarget_lock_acquire_recursive>
 80067b6:	4628      	mov	r0, r5
 80067b8:	4621      	mov	r1, r4
 80067ba:	f7ff ff5f 	bl	800667c <__sflush_r>
 80067be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80067c0:	07da      	lsls	r2, r3, #31
 80067c2:	4605      	mov	r5, r0
 80067c4:	d4e4      	bmi.n	8006790 <_fflush_r+0xc>
 80067c6:	89a3      	ldrh	r3, [r4, #12]
 80067c8:	059b      	lsls	r3, r3, #22
 80067ca:	d4e1      	bmi.n	8006790 <_fflush_r+0xc>
 80067cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067ce:	f7ff fe35 	bl	800643c <__retarget_lock_release_recursive>
 80067d2:	e7dd      	b.n	8006790 <_fflush_r+0xc>

080067d4 <fiprintf>:
 80067d4:	b40e      	push	{r1, r2, r3}
 80067d6:	b503      	push	{r0, r1, lr}
 80067d8:	4601      	mov	r1, r0
 80067da:	ab03      	add	r3, sp, #12
 80067dc:	4805      	ldr	r0, [pc, #20]	@ (80067f4 <fiprintf+0x20>)
 80067de:	f853 2b04 	ldr.w	r2, [r3], #4
 80067e2:	6800      	ldr	r0, [r0, #0]
 80067e4:	9301      	str	r3, [sp, #4]
 80067e6:	f000 f847 	bl	8006878 <_vfiprintf_r>
 80067ea:	b002      	add	sp, #8
 80067ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80067f0:	b003      	add	sp, #12
 80067f2:	4770      	bx	lr
 80067f4:	2000001c 	.word	0x2000001c

080067f8 <_sbrk_r>:
 80067f8:	b538      	push	{r3, r4, r5, lr}
 80067fa:	4d06      	ldr	r5, [pc, #24]	@ (8006814 <_sbrk_r+0x1c>)
 80067fc:	2300      	movs	r3, #0
 80067fe:	4604      	mov	r4, r0
 8006800:	4608      	mov	r0, r1
 8006802:	602b      	str	r3, [r5, #0]
 8006804:	f7fb fa7c 	bl	8001d00 <_sbrk>
 8006808:	1c43      	adds	r3, r0, #1
 800680a:	d102      	bne.n	8006812 <_sbrk_r+0x1a>
 800680c:	682b      	ldr	r3, [r5, #0]
 800680e:	b103      	cbz	r3, 8006812 <_sbrk_r+0x1a>
 8006810:	6023      	str	r3, [r4, #0]
 8006812:	bd38      	pop	{r3, r4, r5, pc}
 8006814:	20000414 	.word	0x20000414

08006818 <abort>:
 8006818:	b508      	push	{r3, lr}
 800681a:	2006      	movs	r0, #6
 800681c:	f000 fb8e 	bl	8006f3c <raise>
 8006820:	2001      	movs	r0, #1
 8006822:	f7fb f9f5 	bl	8001c10 <_exit>

08006826 <__sfputc_r>:
 8006826:	6893      	ldr	r3, [r2, #8]
 8006828:	3b01      	subs	r3, #1
 800682a:	2b00      	cmp	r3, #0
 800682c:	b410      	push	{r4}
 800682e:	6093      	str	r3, [r2, #8]
 8006830:	da08      	bge.n	8006844 <__sfputc_r+0x1e>
 8006832:	6994      	ldr	r4, [r2, #24]
 8006834:	42a3      	cmp	r3, r4
 8006836:	db01      	blt.n	800683c <__sfputc_r+0x16>
 8006838:	290a      	cmp	r1, #10
 800683a:	d103      	bne.n	8006844 <__sfputc_r+0x1e>
 800683c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006840:	f000 bac0 	b.w	8006dc4 <__swbuf_r>
 8006844:	6813      	ldr	r3, [r2, #0]
 8006846:	1c58      	adds	r0, r3, #1
 8006848:	6010      	str	r0, [r2, #0]
 800684a:	7019      	strb	r1, [r3, #0]
 800684c:	4608      	mov	r0, r1
 800684e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006852:	4770      	bx	lr

08006854 <__sfputs_r>:
 8006854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006856:	4606      	mov	r6, r0
 8006858:	460f      	mov	r7, r1
 800685a:	4614      	mov	r4, r2
 800685c:	18d5      	adds	r5, r2, r3
 800685e:	42ac      	cmp	r4, r5
 8006860:	d101      	bne.n	8006866 <__sfputs_r+0x12>
 8006862:	2000      	movs	r0, #0
 8006864:	e007      	b.n	8006876 <__sfputs_r+0x22>
 8006866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800686a:	463a      	mov	r2, r7
 800686c:	4630      	mov	r0, r6
 800686e:	f7ff ffda 	bl	8006826 <__sfputc_r>
 8006872:	1c43      	adds	r3, r0, #1
 8006874:	d1f3      	bne.n	800685e <__sfputs_r+0xa>
 8006876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006878 <_vfiprintf_r>:
 8006878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800687c:	460d      	mov	r5, r1
 800687e:	b09d      	sub	sp, #116	@ 0x74
 8006880:	4614      	mov	r4, r2
 8006882:	4698      	mov	r8, r3
 8006884:	4606      	mov	r6, r0
 8006886:	b118      	cbz	r0, 8006890 <_vfiprintf_r+0x18>
 8006888:	6a03      	ldr	r3, [r0, #32]
 800688a:	b90b      	cbnz	r3, 8006890 <_vfiprintf_r+0x18>
 800688c:	f7ff fcb4 	bl	80061f8 <__sinit>
 8006890:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006892:	07d9      	lsls	r1, r3, #31
 8006894:	d405      	bmi.n	80068a2 <_vfiprintf_r+0x2a>
 8006896:	89ab      	ldrh	r3, [r5, #12]
 8006898:	059a      	lsls	r2, r3, #22
 800689a:	d402      	bmi.n	80068a2 <_vfiprintf_r+0x2a>
 800689c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800689e:	f7ff fdcc 	bl	800643a <__retarget_lock_acquire_recursive>
 80068a2:	89ab      	ldrh	r3, [r5, #12]
 80068a4:	071b      	lsls	r3, r3, #28
 80068a6:	d501      	bpl.n	80068ac <_vfiprintf_r+0x34>
 80068a8:	692b      	ldr	r3, [r5, #16]
 80068aa:	b99b      	cbnz	r3, 80068d4 <_vfiprintf_r+0x5c>
 80068ac:	4629      	mov	r1, r5
 80068ae:	4630      	mov	r0, r6
 80068b0:	f000 fac6 	bl	8006e40 <__swsetup_r>
 80068b4:	b170      	cbz	r0, 80068d4 <_vfiprintf_r+0x5c>
 80068b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80068b8:	07dc      	lsls	r4, r3, #31
 80068ba:	d504      	bpl.n	80068c6 <_vfiprintf_r+0x4e>
 80068bc:	f04f 30ff 	mov.w	r0, #4294967295
 80068c0:	b01d      	add	sp, #116	@ 0x74
 80068c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068c6:	89ab      	ldrh	r3, [r5, #12]
 80068c8:	0598      	lsls	r0, r3, #22
 80068ca:	d4f7      	bmi.n	80068bc <_vfiprintf_r+0x44>
 80068cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80068ce:	f7ff fdb5 	bl	800643c <__retarget_lock_release_recursive>
 80068d2:	e7f3      	b.n	80068bc <_vfiprintf_r+0x44>
 80068d4:	2300      	movs	r3, #0
 80068d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80068d8:	2320      	movs	r3, #32
 80068da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80068de:	f8cd 800c 	str.w	r8, [sp, #12]
 80068e2:	2330      	movs	r3, #48	@ 0x30
 80068e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006a94 <_vfiprintf_r+0x21c>
 80068e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80068ec:	f04f 0901 	mov.w	r9, #1
 80068f0:	4623      	mov	r3, r4
 80068f2:	469a      	mov	sl, r3
 80068f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068f8:	b10a      	cbz	r2, 80068fe <_vfiprintf_r+0x86>
 80068fa:	2a25      	cmp	r2, #37	@ 0x25
 80068fc:	d1f9      	bne.n	80068f2 <_vfiprintf_r+0x7a>
 80068fe:	ebba 0b04 	subs.w	fp, sl, r4
 8006902:	d00b      	beq.n	800691c <_vfiprintf_r+0xa4>
 8006904:	465b      	mov	r3, fp
 8006906:	4622      	mov	r2, r4
 8006908:	4629      	mov	r1, r5
 800690a:	4630      	mov	r0, r6
 800690c:	f7ff ffa2 	bl	8006854 <__sfputs_r>
 8006910:	3001      	adds	r0, #1
 8006912:	f000 80a7 	beq.w	8006a64 <_vfiprintf_r+0x1ec>
 8006916:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006918:	445a      	add	r2, fp
 800691a:	9209      	str	r2, [sp, #36]	@ 0x24
 800691c:	f89a 3000 	ldrb.w	r3, [sl]
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 809f 	beq.w	8006a64 <_vfiprintf_r+0x1ec>
 8006926:	2300      	movs	r3, #0
 8006928:	f04f 32ff 	mov.w	r2, #4294967295
 800692c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006930:	f10a 0a01 	add.w	sl, sl, #1
 8006934:	9304      	str	r3, [sp, #16]
 8006936:	9307      	str	r3, [sp, #28]
 8006938:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800693c:	931a      	str	r3, [sp, #104]	@ 0x68
 800693e:	4654      	mov	r4, sl
 8006940:	2205      	movs	r2, #5
 8006942:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006946:	4853      	ldr	r0, [pc, #332]	@ (8006a94 <_vfiprintf_r+0x21c>)
 8006948:	f7f9 fc42 	bl	80001d0 <memchr>
 800694c:	9a04      	ldr	r2, [sp, #16]
 800694e:	b9d8      	cbnz	r0, 8006988 <_vfiprintf_r+0x110>
 8006950:	06d1      	lsls	r1, r2, #27
 8006952:	bf44      	itt	mi
 8006954:	2320      	movmi	r3, #32
 8006956:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800695a:	0713      	lsls	r3, r2, #28
 800695c:	bf44      	itt	mi
 800695e:	232b      	movmi	r3, #43	@ 0x2b
 8006960:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006964:	f89a 3000 	ldrb.w	r3, [sl]
 8006968:	2b2a      	cmp	r3, #42	@ 0x2a
 800696a:	d015      	beq.n	8006998 <_vfiprintf_r+0x120>
 800696c:	9a07      	ldr	r2, [sp, #28]
 800696e:	4654      	mov	r4, sl
 8006970:	2000      	movs	r0, #0
 8006972:	f04f 0c0a 	mov.w	ip, #10
 8006976:	4621      	mov	r1, r4
 8006978:	f811 3b01 	ldrb.w	r3, [r1], #1
 800697c:	3b30      	subs	r3, #48	@ 0x30
 800697e:	2b09      	cmp	r3, #9
 8006980:	d94b      	bls.n	8006a1a <_vfiprintf_r+0x1a2>
 8006982:	b1b0      	cbz	r0, 80069b2 <_vfiprintf_r+0x13a>
 8006984:	9207      	str	r2, [sp, #28]
 8006986:	e014      	b.n	80069b2 <_vfiprintf_r+0x13a>
 8006988:	eba0 0308 	sub.w	r3, r0, r8
 800698c:	fa09 f303 	lsl.w	r3, r9, r3
 8006990:	4313      	orrs	r3, r2
 8006992:	9304      	str	r3, [sp, #16]
 8006994:	46a2      	mov	sl, r4
 8006996:	e7d2      	b.n	800693e <_vfiprintf_r+0xc6>
 8006998:	9b03      	ldr	r3, [sp, #12]
 800699a:	1d19      	adds	r1, r3, #4
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	9103      	str	r1, [sp, #12]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	bfbb      	ittet	lt
 80069a4:	425b      	neglt	r3, r3
 80069a6:	f042 0202 	orrlt.w	r2, r2, #2
 80069aa:	9307      	strge	r3, [sp, #28]
 80069ac:	9307      	strlt	r3, [sp, #28]
 80069ae:	bfb8      	it	lt
 80069b0:	9204      	strlt	r2, [sp, #16]
 80069b2:	7823      	ldrb	r3, [r4, #0]
 80069b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80069b6:	d10a      	bne.n	80069ce <_vfiprintf_r+0x156>
 80069b8:	7863      	ldrb	r3, [r4, #1]
 80069ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80069bc:	d132      	bne.n	8006a24 <_vfiprintf_r+0x1ac>
 80069be:	9b03      	ldr	r3, [sp, #12]
 80069c0:	1d1a      	adds	r2, r3, #4
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	9203      	str	r2, [sp, #12]
 80069c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80069ca:	3402      	adds	r4, #2
 80069cc:	9305      	str	r3, [sp, #20]
 80069ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006aa4 <_vfiprintf_r+0x22c>
 80069d2:	7821      	ldrb	r1, [r4, #0]
 80069d4:	2203      	movs	r2, #3
 80069d6:	4650      	mov	r0, sl
 80069d8:	f7f9 fbfa 	bl	80001d0 <memchr>
 80069dc:	b138      	cbz	r0, 80069ee <_vfiprintf_r+0x176>
 80069de:	9b04      	ldr	r3, [sp, #16]
 80069e0:	eba0 000a 	sub.w	r0, r0, sl
 80069e4:	2240      	movs	r2, #64	@ 0x40
 80069e6:	4082      	lsls	r2, r0
 80069e8:	4313      	orrs	r3, r2
 80069ea:	3401      	adds	r4, #1
 80069ec:	9304      	str	r3, [sp, #16]
 80069ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069f2:	4829      	ldr	r0, [pc, #164]	@ (8006a98 <_vfiprintf_r+0x220>)
 80069f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80069f8:	2206      	movs	r2, #6
 80069fa:	f7f9 fbe9 	bl	80001d0 <memchr>
 80069fe:	2800      	cmp	r0, #0
 8006a00:	d03f      	beq.n	8006a82 <_vfiprintf_r+0x20a>
 8006a02:	4b26      	ldr	r3, [pc, #152]	@ (8006a9c <_vfiprintf_r+0x224>)
 8006a04:	bb1b      	cbnz	r3, 8006a4e <_vfiprintf_r+0x1d6>
 8006a06:	9b03      	ldr	r3, [sp, #12]
 8006a08:	3307      	adds	r3, #7
 8006a0a:	f023 0307 	bic.w	r3, r3, #7
 8006a0e:	3308      	adds	r3, #8
 8006a10:	9303      	str	r3, [sp, #12]
 8006a12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a14:	443b      	add	r3, r7
 8006a16:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a18:	e76a      	b.n	80068f0 <_vfiprintf_r+0x78>
 8006a1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a1e:	460c      	mov	r4, r1
 8006a20:	2001      	movs	r0, #1
 8006a22:	e7a8      	b.n	8006976 <_vfiprintf_r+0xfe>
 8006a24:	2300      	movs	r3, #0
 8006a26:	3401      	adds	r4, #1
 8006a28:	9305      	str	r3, [sp, #20]
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	f04f 0c0a 	mov.w	ip, #10
 8006a30:	4620      	mov	r0, r4
 8006a32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a36:	3a30      	subs	r2, #48	@ 0x30
 8006a38:	2a09      	cmp	r2, #9
 8006a3a:	d903      	bls.n	8006a44 <_vfiprintf_r+0x1cc>
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d0c6      	beq.n	80069ce <_vfiprintf_r+0x156>
 8006a40:	9105      	str	r1, [sp, #20]
 8006a42:	e7c4      	b.n	80069ce <_vfiprintf_r+0x156>
 8006a44:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a48:	4604      	mov	r4, r0
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e7f0      	b.n	8006a30 <_vfiprintf_r+0x1b8>
 8006a4e:	ab03      	add	r3, sp, #12
 8006a50:	9300      	str	r3, [sp, #0]
 8006a52:	462a      	mov	r2, r5
 8006a54:	4b12      	ldr	r3, [pc, #72]	@ (8006aa0 <_vfiprintf_r+0x228>)
 8006a56:	a904      	add	r1, sp, #16
 8006a58:	4630      	mov	r0, r6
 8006a5a:	f3af 8000 	nop.w
 8006a5e:	4607      	mov	r7, r0
 8006a60:	1c78      	adds	r0, r7, #1
 8006a62:	d1d6      	bne.n	8006a12 <_vfiprintf_r+0x19a>
 8006a64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a66:	07d9      	lsls	r1, r3, #31
 8006a68:	d405      	bmi.n	8006a76 <_vfiprintf_r+0x1fe>
 8006a6a:	89ab      	ldrh	r3, [r5, #12]
 8006a6c:	059a      	lsls	r2, r3, #22
 8006a6e:	d402      	bmi.n	8006a76 <_vfiprintf_r+0x1fe>
 8006a70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a72:	f7ff fce3 	bl	800643c <__retarget_lock_release_recursive>
 8006a76:	89ab      	ldrh	r3, [r5, #12]
 8006a78:	065b      	lsls	r3, r3, #25
 8006a7a:	f53f af1f 	bmi.w	80068bc <_vfiprintf_r+0x44>
 8006a7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a80:	e71e      	b.n	80068c0 <_vfiprintf_r+0x48>
 8006a82:	ab03      	add	r3, sp, #12
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	462a      	mov	r2, r5
 8006a88:	4b05      	ldr	r3, [pc, #20]	@ (8006aa0 <_vfiprintf_r+0x228>)
 8006a8a:	a904      	add	r1, sp, #16
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	f000 f879 	bl	8006b84 <_printf_i>
 8006a92:	e7e4      	b.n	8006a5e <_vfiprintf_r+0x1e6>
 8006a94:	08007187 	.word	0x08007187
 8006a98:	08007191 	.word	0x08007191
 8006a9c:	00000000 	.word	0x00000000
 8006aa0:	08006855 	.word	0x08006855
 8006aa4:	0800718d 	.word	0x0800718d

08006aa8 <_printf_common>:
 8006aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aac:	4616      	mov	r6, r2
 8006aae:	4698      	mov	r8, r3
 8006ab0:	688a      	ldr	r2, [r1, #8]
 8006ab2:	690b      	ldr	r3, [r1, #16]
 8006ab4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	bfb8      	it	lt
 8006abc:	4613      	movlt	r3, r2
 8006abe:	6033      	str	r3, [r6, #0]
 8006ac0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ac4:	4607      	mov	r7, r0
 8006ac6:	460c      	mov	r4, r1
 8006ac8:	b10a      	cbz	r2, 8006ace <_printf_common+0x26>
 8006aca:	3301      	adds	r3, #1
 8006acc:	6033      	str	r3, [r6, #0]
 8006ace:	6823      	ldr	r3, [r4, #0]
 8006ad0:	0699      	lsls	r1, r3, #26
 8006ad2:	bf42      	ittt	mi
 8006ad4:	6833      	ldrmi	r3, [r6, #0]
 8006ad6:	3302      	addmi	r3, #2
 8006ad8:	6033      	strmi	r3, [r6, #0]
 8006ada:	6825      	ldr	r5, [r4, #0]
 8006adc:	f015 0506 	ands.w	r5, r5, #6
 8006ae0:	d106      	bne.n	8006af0 <_printf_common+0x48>
 8006ae2:	f104 0a19 	add.w	sl, r4, #25
 8006ae6:	68e3      	ldr	r3, [r4, #12]
 8006ae8:	6832      	ldr	r2, [r6, #0]
 8006aea:	1a9b      	subs	r3, r3, r2
 8006aec:	42ab      	cmp	r3, r5
 8006aee:	dc26      	bgt.n	8006b3e <_printf_common+0x96>
 8006af0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006af4:	6822      	ldr	r2, [r4, #0]
 8006af6:	3b00      	subs	r3, #0
 8006af8:	bf18      	it	ne
 8006afa:	2301      	movne	r3, #1
 8006afc:	0692      	lsls	r2, r2, #26
 8006afe:	d42b      	bmi.n	8006b58 <_printf_common+0xb0>
 8006b00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b04:	4641      	mov	r1, r8
 8006b06:	4638      	mov	r0, r7
 8006b08:	47c8      	blx	r9
 8006b0a:	3001      	adds	r0, #1
 8006b0c:	d01e      	beq.n	8006b4c <_printf_common+0xa4>
 8006b0e:	6823      	ldr	r3, [r4, #0]
 8006b10:	6922      	ldr	r2, [r4, #16]
 8006b12:	f003 0306 	and.w	r3, r3, #6
 8006b16:	2b04      	cmp	r3, #4
 8006b18:	bf02      	ittt	eq
 8006b1a:	68e5      	ldreq	r5, [r4, #12]
 8006b1c:	6833      	ldreq	r3, [r6, #0]
 8006b1e:	1aed      	subeq	r5, r5, r3
 8006b20:	68a3      	ldr	r3, [r4, #8]
 8006b22:	bf0c      	ite	eq
 8006b24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b28:	2500      	movne	r5, #0
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	bfc4      	itt	gt
 8006b2e:	1a9b      	subgt	r3, r3, r2
 8006b30:	18ed      	addgt	r5, r5, r3
 8006b32:	2600      	movs	r6, #0
 8006b34:	341a      	adds	r4, #26
 8006b36:	42b5      	cmp	r5, r6
 8006b38:	d11a      	bne.n	8006b70 <_printf_common+0xc8>
 8006b3a:	2000      	movs	r0, #0
 8006b3c:	e008      	b.n	8006b50 <_printf_common+0xa8>
 8006b3e:	2301      	movs	r3, #1
 8006b40:	4652      	mov	r2, sl
 8006b42:	4641      	mov	r1, r8
 8006b44:	4638      	mov	r0, r7
 8006b46:	47c8      	blx	r9
 8006b48:	3001      	adds	r0, #1
 8006b4a:	d103      	bne.n	8006b54 <_printf_common+0xac>
 8006b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b54:	3501      	adds	r5, #1
 8006b56:	e7c6      	b.n	8006ae6 <_printf_common+0x3e>
 8006b58:	18e1      	adds	r1, r4, r3
 8006b5a:	1c5a      	adds	r2, r3, #1
 8006b5c:	2030      	movs	r0, #48	@ 0x30
 8006b5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006b62:	4422      	add	r2, r4
 8006b64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006b68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006b6c:	3302      	adds	r3, #2
 8006b6e:	e7c7      	b.n	8006b00 <_printf_common+0x58>
 8006b70:	2301      	movs	r3, #1
 8006b72:	4622      	mov	r2, r4
 8006b74:	4641      	mov	r1, r8
 8006b76:	4638      	mov	r0, r7
 8006b78:	47c8      	blx	r9
 8006b7a:	3001      	adds	r0, #1
 8006b7c:	d0e6      	beq.n	8006b4c <_printf_common+0xa4>
 8006b7e:	3601      	adds	r6, #1
 8006b80:	e7d9      	b.n	8006b36 <_printf_common+0x8e>
	...

08006b84 <_printf_i>:
 8006b84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b88:	7e0f      	ldrb	r7, [r1, #24]
 8006b8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b8c:	2f78      	cmp	r7, #120	@ 0x78
 8006b8e:	4691      	mov	r9, r2
 8006b90:	4680      	mov	r8, r0
 8006b92:	460c      	mov	r4, r1
 8006b94:	469a      	mov	sl, r3
 8006b96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b9a:	d807      	bhi.n	8006bac <_printf_i+0x28>
 8006b9c:	2f62      	cmp	r7, #98	@ 0x62
 8006b9e:	d80a      	bhi.n	8006bb6 <_printf_i+0x32>
 8006ba0:	2f00      	cmp	r7, #0
 8006ba2:	f000 80d2 	beq.w	8006d4a <_printf_i+0x1c6>
 8006ba6:	2f58      	cmp	r7, #88	@ 0x58
 8006ba8:	f000 80b9 	beq.w	8006d1e <_printf_i+0x19a>
 8006bac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006bb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006bb4:	e03a      	b.n	8006c2c <_printf_i+0xa8>
 8006bb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006bba:	2b15      	cmp	r3, #21
 8006bbc:	d8f6      	bhi.n	8006bac <_printf_i+0x28>
 8006bbe:	a101      	add	r1, pc, #4	@ (adr r1, 8006bc4 <_printf_i+0x40>)
 8006bc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bc4:	08006c1d 	.word	0x08006c1d
 8006bc8:	08006c31 	.word	0x08006c31
 8006bcc:	08006bad 	.word	0x08006bad
 8006bd0:	08006bad 	.word	0x08006bad
 8006bd4:	08006bad 	.word	0x08006bad
 8006bd8:	08006bad 	.word	0x08006bad
 8006bdc:	08006c31 	.word	0x08006c31
 8006be0:	08006bad 	.word	0x08006bad
 8006be4:	08006bad 	.word	0x08006bad
 8006be8:	08006bad 	.word	0x08006bad
 8006bec:	08006bad 	.word	0x08006bad
 8006bf0:	08006d31 	.word	0x08006d31
 8006bf4:	08006c5b 	.word	0x08006c5b
 8006bf8:	08006ceb 	.word	0x08006ceb
 8006bfc:	08006bad 	.word	0x08006bad
 8006c00:	08006bad 	.word	0x08006bad
 8006c04:	08006d53 	.word	0x08006d53
 8006c08:	08006bad 	.word	0x08006bad
 8006c0c:	08006c5b 	.word	0x08006c5b
 8006c10:	08006bad 	.word	0x08006bad
 8006c14:	08006bad 	.word	0x08006bad
 8006c18:	08006cf3 	.word	0x08006cf3
 8006c1c:	6833      	ldr	r3, [r6, #0]
 8006c1e:	1d1a      	adds	r2, r3, #4
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	6032      	str	r2, [r6, #0]
 8006c24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e09d      	b.n	8006d6c <_printf_i+0x1e8>
 8006c30:	6833      	ldr	r3, [r6, #0]
 8006c32:	6820      	ldr	r0, [r4, #0]
 8006c34:	1d19      	adds	r1, r3, #4
 8006c36:	6031      	str	r1, [r6, #0]
 8006c38:	0606      	lsls	r6, r0, #24
 8006c3a:	d501      	bpl.n	8006c40 <_printf_i+0xbc>
 8006c3c:	681d      	ldr	r5, [r3, #0]
 8006c3e:	e003      	b.n	8006c48 <_printf_i+0xc4>
 8006c40:	0645      	lsls	r5, r0, #25
 8006c42:	d5fb      	bpl.n	8006c3c <_printf_i+0xb8>
 8006c44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006c48:	2d00      	cmp	r5, #0
 8006c4a:	da03      	bge.n	8006c54 <_printf_i+0xd0>
 8006c4c:	232d      	movs	r3, #45	@ 0x2d
 8006c4e:	426d      	negs	r5, r5
 8006c50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c54:	4859      	ldr	r0, [pc, #356]	@ (8006dbc <_printf_i+0x238>)
 8006c56:	230a      	movs	r3, #10
 8006c58:	e011      	b.n	8006c7e <_printf_i+0xfa>
 8006c5a:	6821      	ldr	r1, [r4, #0]
 8006c5c:	6833      	ldr	r3, [r6, #0]
 8006c5e:	0608      	lsls	r0, r1, #24
 8006c60:	f853 5b04 	ldr.w	r5, [r3], #4
 8006c64:	d402      	bmi.n	8006c6c <_printf_i+0xe8>
 8006c66:	0649      	lsls	r1, r1, #25
 8006c68:	bf48      	it	mi
 8006c6a:	b2ad      	uxthmi	r5, r5
 8006c6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006c6e:	4853      	ldr	r0, [pc, #332]	@ (8006dbc <_printf_i+0x238>)
 8006c70:	6033      	str	r3, [r6, #0]
 8006c72:	bf14      	ite	ne
 8006c74:	230a      	movne	r3, #10
 8006c76:	2308      	moveq	r3, #8
 8006c78:	2100      	movs	r1, #0
 8006c7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006c7e:	6866      	ldr	r6, [r4, #4]
 8006c80:	60a6      	str	r6, [r4, #8]
 8006c82:	2e00      	cmp	r6, #0
 8006c84:	bfa2      	ittt	ge
 8006c86:	6821      	ldrge	r1, [r4, #0]
 8006c88:	f021 0104 	bicge.w	r1, r1, #4
 8006c8c:	6021      	strge	r1, [r4, #0]
 8006c8e:	b90d      	cbnz	r5, 8006c94 <_printf_i+0x110>
 8006c90:	2e00      	cmp	r6, #0
 8006c92:	d04b      	beq.n	8006d2c <_printf_i+0x1a8>
 8006c94:	4616      	mov	r6, r2
 8006c96:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c9a:	fb03 5711 	mls	r7, r3, r1, r5
 8006c9e:	5dc7      	ldrb	r7, [r0, r7]
 8006ca0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ca4:	462f      	mov	r7, r5
 8006ca6:	42bb      	cmp	r3, r7
 8006ca8:	460d      	mov	r5, r1
 8006caa:	d9f4      	bls.n	8006c96 <_printf_i+0x112>
 8006cac:	2b08      	cmp	r3, #8
 8006cae:	d10b      	bne.n	8006cc8 <_printf_i+0x144>
 8006cb0:	6823      	ldr	r3, [r4, #0]
 8006cb2:	07df      	lsls	r7, r3, #31
 8006cb4:	d508      	bpl.n	8006cc8 <_printf_i+0x144>
 8006cb6:	6923      	ldr	r3, [r4, #16]
 8006cb8:	6861      	ldr	r1, [r4, #4]
 8006cba:	4299      	cmp	r1, r3
 8006cbc:	bfde      	ittt	le
 8006cbe:	2330      	movle	r3, #48	@ 0x30
 8006cc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006cc4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006cc8:	1b92      	subs	r2, r2, r6
 8006cca:	6122      	str	r2, [r4, #16]
 8006ccc:	f8cd a000 	str.w	sl, [sp]
 8006cd0:	464b      	mov	r3, r9
 8006cd2:	aa03      	add	r2, sp, #12
 8006cd4:	4621      	mov	r1, r4
 8006cd6:	4640      	mov	r0, r8
 8006cd8:	f7ff fee6 	bl	8006aa8 <_printf_common>
 8006cdc:	3001      	adds	r0, #1
 8006cde:	d14a      	bne.n	8006d76 <_printf_i+0x1f2>
 8006ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce4:	b004      	add	sp, #16
 8006ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cea:	6823      	ldr	r3, [r4, #0]
 8006cec:	f043 0320 	orr.w	r3, r3, #32
 8006cf0:	6023      	str	r3, [r4, #0]
 8006cf2:	4833      	ldr	r0, [pc, #204]	@ (8006dc0 <_printf_i+0x23c>)
 8006cf4:	2778      	movs	r7, #120	@ 0x78
 8006cf6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006cfa:	6823      	ldr	r3, [r4, #0]
 8006cfc:	6831      	ldr	r1, [r6, #0]
 8006cfe:	061f      	lsls	r7, r3, #24
 8006d00:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d04:	d402      	bmi.n	8006d0c <_printf_i+0x188>
 8006d06:	065f      	lsls	r7, r3, #25
 8006d08:	bf48      	it	mi
 8006d0a:	b2ad      	uxthmi	r5, r5
 8006d0c:	6031      	str	r1, [r6, #0]
 8006d0e:	07d9      	lsls	r1, r3, #31
 8006d10:	bf44      	itt	mi
 8006d12:	f043 0320 	orrmi.w	r3, r3, #32
 8006d16:	6023      	strmi	r3, [r4, #0]
 8006d18:	b11d      	cbz	r5, 8006d22 <_printf_i+0x19e>
 8006d1a:	2310      	movs	r3, #16
 8006d1c:	e7ac      	b.n	8006c78 <_printf_i+0xf4>
 8006d1e:	4827      	ldr	r0, [pc, #156]	@ (8006dbc <_printf_i+0x238>)
 8006d20:	e7e9      	b.n	8006cf6 <_printf_i+0x172>
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	f023 0320 	bic.w	r3, r3, #32
 8006d28:	6023      	str	r3, [r4, #0]
 8006d2a:	e7f6      	b.n	8006d1a <_printf_i+0x196>
 8006d2c:	4616      	mov	r6, r2
 8006d2e:	e7bd      	b.n	8006cac <_printf_i+0x128>
 8006d30:	6833      	ldr	r3, [r6, #0]
 8006d32:	6825      	ldr	r5, [r4, #0]
 8006d34:	6961      	ldr	r1, [r4, #20]
 8006d36:	1d18      	adds	r0, r3, #4
 8006d38:	6030      	str	r0, [r6, #0]
 8006d3a:	062e      	lsls	r6, r5, #24
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	d501      	bpl.n	8006d44 <_printf_i+0x1c0>
 8006d40:	6019      	str	r1, [r3, #0]
 8006d42:	e002      	b.n	8006d4a <_printf_i+0x1c6>
 8006d44:	0668      	lsls	r0, r5, #25
 8006d46:	d5fb      	bpl.n	8006d40 <_printf_i+0x1bc>
 8006d48:	8019      	strh	r1, [r3, #0]
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	6123      	str	r3, [r4, #16]
 8006d4e:	4616      	mov	r6, r2
 8006d50:	e7bc      	b.n	8006ccc <_printf_i+0x148>
 8006d52:	6833      	ldr	r3, [r6, #0]
 8006d54:	1d1a      	adds	r2, r3, #4
 8006d56:	6032      	str	r2, [r6, #0]
 8006d58:	681e      	ldr	r6, [r3, #0]
 8006d5a:	6862      	ldr	r2, [r4, #4]
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	4630      	mov	r0, r6
 8006d60:	f7f9 fa36 	bl	80001d0 <memchr>
 8006d64:	b108      	cbz	r0, 8006d6a <_printf_i+0x1e6>
 8006d66:	1b80      	subs	r0, r0, r6
 8006d68:	6060      	str	r0, [r4, #4]
 8006d6a:	6863      	ldr	r3, [r4, #4]
 8006d6c:	6123      	str	r3, [r4, #16]
 8006d6e:	2300      	movs	r3, #0
 8006d70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d74:	e7aa      	b.n	8006ccc <_printf_i+0x148>
 8006d76:	6923      	ldr	r3, [r4, #16]
 8006d78:	4632      	mov	r2, r6
 8006d7a:	4649      	mov	r1, r9
 8006d7c:	4640      	mov	r0, r8
 8006d7e:	47d0      	blx	sl
 8006d80:	3001      	adds	r0, #1
 8006d82:	d0ad      	beq.n	8006ce0 <_printf_i+0x15c>
 8006d84:	6823      	ldr	r3, [r4, #0]
 8006d86:	079b      	lsls	r3, r3, #30
 8006d88:	d413      	bmi.n	8006db2 <_printf_i+0x22e>
 8006d8a:	68e0      	ldr	r0, [r4, #12]
 8006d8c:	9b03      	ldr	r3, [sp, #12]
 8006d8e:	4298      	cmp	r0, r3
 8006d90:	bfb8      	it	lt
 8006d92:	4618      	movlt	r0, r3
 8006d94:	e7a6      	b.n	8006ce4 <_printf_i+0x160>
 8006d96:	2301      	movs	r3, #1
 8006d98:	4632      	mov	r2, r6
 8006d9a:	4649      	mov	r1, r9
 8006d9c:	4640      	mov	r0, r8
 8006d9e:	47d0      	blx	sl
 8006da0:	3001      	adds	r0, #1
 8006da2:	d09d      	beq.n	8006ce0 <_printf_i+0x15c>
 8006da4:	3501      	adds	r5, #1
 8006da6:	68e3      	ldr	r3, [r4, #12]
 8006da8:	9903      	ldr	r1, [sp, #12]
 8006daa:	1a5b      	subs	r3, r3, r1
 8006dac:	42ab      	cmp	r3, r5
 8006dae:	dcf2      	bgt.n	8006d96 <_printf_i+0x212>
 8006db0:	e7eb      	b.n	8006d8a <_printf_i+0x206>
 8006db2:	2500      	movs	r5, #0
 8006db4:	f104 0619 	add.w	r6, r4, #25
 8006db8:	e7f5      	b.n	8006da6 <_printf_i+0x222>
 8006dba:	bf00      	nop
 8006dbc:	08007198 	.word	0x08007198
 8006dc0:	080071a9 	.word	0x080071a9

08006dc4 <__swbuf_r>:
 8006dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dc6:	460e      	mov	r6, r1
 8006dc8:	4614      	mov	r4, r2
 8006dca:	4605      	mov	r5, r0
 8006dcc:	b118      	cbz	r0, 8006dd6 <__swbuf_r+0x12>
 8006dce:	6a03      	ldr	r3, [r0, #32]
 8006dd0:	b90b      	cbnz	r3, 8006dd6 <__swbuf_r+0x12>
 8006dd2:	f7ff fa11 	bl	80061f8 <__sinit>
 8006dd6:	69a3      	ldr	r3, [r4, #24]
 8006dd8:	60a3      	str	r3, [r4, #8]
 8006dda:	89a3      	ldrh	r3, [r4, #12]
 8006ddc:	071a      	lsls	r2, r3, #28
 8006dde:	d501      	bpl.n	8006de4 <__swbuf_r+0x20>
 8006de0:	6923      	ldr	r3, [r4, #16]
 8006de2:	b943      	cbnz	r3, 8006df6 <__swbuf_r+0x32>
 8006de4:	4621      	mov	r1, r4
 8006de6:	4628      	mov	r0, r5
 8006de8:	f000 f82a 	bl	8006e40 <__swsetup_r>
 8006dec:	b118      	cbz	r0, 8006df6 <__swbuf_r+0x32>
 8006dee:	f04f 37ff 	mov.w	r7, #4294967295
 8006df2:	4638      	mov	r0, r7
 8006df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006df6:	6823      	ldr	r3, [r4, #0]
 8006df8:	6922      	ldr	r2, [r4, #16]
 8006dfa:	1a98      	subs	r0, r3, r2
 8006dfc:	6963      	ldr	r3, [r4, #20]
 8006dfe:	b2f6      	uxtb	r6, r6
 8006e00:	4283      	cmp	r3, r0
 8006e02:	4637      	mov	r7, r6
 8006e04:	dc05      	bgt.n	8006e12 <__swbuf_r+0x4e>
 8006e06:	4621      	mov	r1, r4
 8006e08:	4628      	mov	r0, r5
 8006e0a:	f7ff fcbb 	bl	8006784 <_fflush_r>
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	d1ed      	bne.n	8006dee <__swbuf_r+0x2a>
 8006e12:	68a3      	ldr	r3, [r4, #8]
 8006e14:	3b01      	subs	r3, #1
 8006e16:	60a3      	str	r3, [r4, #8]
 8006e18:	6823      	ldr	r3, [r4, #0]
 8006e1a:	1c5a      	adds	r2, r3, #1
 8006e1c:	6022      	str	r2, [r4, #0]
 8006e1e:	701e      	strb	r6, [r3, #0]
 8006e20:	6962      	ldr	r2, [r4, #20]
 8006e22:	1c43      	adds	r3, r0, #1
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d004      	beq.n	8006e32 <__swbuf_r+0x6e>
 8006e28:	89a3      	ldrh	r3, [r4, #12]
 8006e2a:	07db      	lsls	r3, r3, #31
 8006e2c:	d5e1      	bpl.n	8006df2 <__swbuf_r+0x2e>
 8006e2e:	2e0a      	cmp	r6, #10
 8006e30:	d1df      	bne.n	8006df2 <__swbuf_r+0x2e>
 8006e32:	4621      	mov	r1, r4
 8006e34:	4628      	mov	r0, r5
 8006e36:	f7ff fca5 	bl	8006784 <_fflush_r>
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	d0d9      	beq.n	8006df2 <__swbuf_r+0x2e>
 8006e3e:	e7d6      	b.n	8006dee <__swbuf_r+0x2a>

08006e40 <__swsetup_r>:
 8006e40:	b538      	push	{r3, r4, r5, lr}
 8006e42:	4b29      	ldr	r3, [pc, #164]	@ (8006ee8 <__swsetup_r+0xa8>)
 8006e44:	4605      	mov	r5, r0
 8006e46:	6818      	ldr	r0, [r3, #0]
 8006e48:	460c      	mov	r4, r1
 8006e4a:	b118      	cbz	r0, 8006e54 <__swsetup_r+0x14>
 8006e4c:	6a03      	ldr	r3, [r0, #32]
 8006e4e:	b90b      	cbnz	r3, 8006e54 <__swsetup_r+0x14>
 8006e50:	f7ff f9d2 	bl	80061f8 <__sinit>
 8006e54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e58:	0719      	lsls	r1, r3, #28
 8006e5a:	d422      	bmi.n	8006ea2 <__swsetup_r+0x62>
 8006e5c:	06da      	lsls	r2, r3, #27
 8006e5e:	d407      	bmi.n	8006e70 <__swsetup_r+0x30>
 8006e60:	2209      	movs	r2, #9
 8006e62:	602a      	str	r2, [r5, #0]
 8006e64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e68:	81a3      	strh	r3, [r4, #12]
 8006e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e6e:	e033      	b.n	8006ed8 <__swsetup_r+0x98>
 8006e70:	0758      	lsls	r0, r3, #29
 8006e72:	d512      	bpl.n	8006e9a <__swsetup_r+0x5a>
 8006e74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e76:	b141      	cbz	r1, 8006e8a <__swsetup_r+0x4a>
 8006e78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e7c:	4299      	cmp	r1, r3
 8006e7e:	d002      	beq.n	8006e86 <__swsetup_r+0x46>
 8006e80:	4628      	mov	r0, r5
 8006e82:	f7ff fafb 	bl	800647c <_free_r>
 8006e86:	2300      	movs	r3, #0
 8006e88:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e8a:	89a3      	ldrh	r3, [r4, #12]
 8006e8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006e90:	81a3      	strh	r3, [r4, #12]
 8006e92:	2300      	movs	r3, #0
 8006e94:	6063      	str	r3, [r4, #4]
 8006e96:	6923      	ldr	r3, [r4, #16]
 8006e98:	6023      	str	r3, [r4, #0]
 8006e9a:	89a3      	ldrh	r3, [r4, #12]
 8006e9c:	f043 0308 	orr.w	r3, r3, #8
 8006ea0:	81a3      	strh	r3, [r4, #12]
 8006ea2:	6923      	ldr	r3, [r4, #16]
 8006ea4:	b94b      	cbnz	r3, 8006eba <__swsetup_r+0x7a>
 8006ea6:	89a3      	ldrh	r3, [r4, #12]
 8006ea8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006eac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006eb0:	d003      	beq.n	8006eba <__swsetup_r+0x7a>
 8006eb2:	4621      	mov	r1, r4
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	f000 f883 	bl	8006fc0 <__smakebuf_r>
 8006eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ebe:	f013 0201 	ands.w	r2, r3, #1
 8006ec2:	d00a      	beq.n	8006eda <__swsetup_r+0x9a>
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	60a2      	str	r2, [r4, #8]
 8006ec8:	6962      	ldr	r2, [r4, #20]
 8006eca:	4252      	negs	r2, r2
 8006ecc:	61a2      	str	r2, [r4, #24]
 8006ece:	6922      	ldr	r2, [r4, #16]
 8006ed0:	b942      	cbnz	r2, 8006ee4 <__swsetup_r+0xa4>
 8006ed2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006ed6:	d1c5      	bne.n	8006e64 <__swsetup_r+0x24>
 8006ed8:	bd38      	pop	{r3, r4, r5, pc}
 8006eda:	0799      	lsls	r1, r3, #30
 8006edc:	bf58      	it	pl
 8006ede:	6962      	ldrpl	r2, [r4, #20]
 8006ee0:	60a2      	str	r2, [r4, #8]
 8006ee2:	e7f4      	b.n	8006ece <__swsetup_r+0x8e>
 8006ee4:	2000      	movs	r0, #0
 8006ee6:	e7f7      	b.n	8006ed8 <__swsetup_r+0x98>
 8006ee8:	2000001c 	.word	0x2000001c

08006eec <_raise_r>:
 8006eec:	291f      	cmp	r1, #31
 8006eee:	b538      	push	{r3, r4, r5, lr}
 8006ef0:	4605      	mov	r5, r0
 8006ef2:	460c      	mov	r4, r1
 8006ef4:	d904      	bls.n	8006f00 <_raise_r+0x14>
 8006ef6:	2316      	movs	r3, #22
 8006ef8:	6003      	str	r3, [r0, #0]
 8006efa:	f04f 30ff 	mov.w	r0, #4294967295
 8006efe:	bd38      	pop	{r3, r4, r5, pc}
 8006f00:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006f02:	b112      	cbz	r2, 8006f0a <_raise_r+0x1e>
 8006f04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f08:	b94b      	cbnz	r3, 8006f1e <_raise_r+0x32>
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	f000 f830 	bl	8006f70 <_getpid_r>
 8006f10:	4622      	mov	r2, r4
 8006f12:	4601      	mov	r1, r0
 8006f14:	4628      	mov	r0, r5
 8006f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f1a:	f000 b817 	b.w	8006f4c <_kill_r>
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d00a      	beq.n	8006f38 <_raise_r+0x4c>
 8006f22:	1c59      	adds	r1, r3, #1
 8006f24:	d103      	bne.n	8006f2e <_raise_r+0x42>
 8006f26:	2316      	movs	r3, #22
 8006f28:	6003      	str	r3, [r0, #0]
 8006f2a:	2001      	movs	r0, #1
 8006f2c:	e7e7      	b.n	8006efe <_raise_r+0x12>
 8006f2e:	2100      	movs	r1, #0
 8006f30:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006f34:	4620      	mov	r0, r4
 8006f36:	4798      	blx	r3
 8006f38:	2000      	movs	r0, #0
 8006f3a:	e7e0      	b.n	8006efe <_raise_r+0x12>

08006f3c <raise>:
 8006f3c:	4b02      	ldr	r3, [pc, #8]	@ (8006f48 <raise+0xc>)
 8006f3e:	4601      	mov	r1, r0
 8006f40:	6818      	ldr	r0, [r3, #0]
 8006f42:	f7ff bfd3 	b.w	8006eec <_raise_r>
 8006f46:	bf00      	nop
 8006f48:	2000001c 	.word	0x2000001c

08006f4c <_kill_r>:
 8006f4c:	b538      	push	{r3, r4, r5, lr}
 8006f4e:	4d07      	ldr	r5, [pc, #28]	@ (8006f6c <_kill_r+0x20>)
 8006f50:	2300      	movs	r3, #0
 8006f52:	4604      	mov	r4, r0
 8006f54:	4608      	mov	r0, r1
 8006f56:	4611      	mov	r1, r2
 8006f58:	602b      	str	r3, [r5, #0]
 8006f5a:	f7fa fe49 	bl	8001bf0 <_kill>
 8006f5e:	1c43      	adds	r3, r0, #1
 8006f60:	d102      	bne.n	8006f68 <_kill_r+0x1c>
 8006f62:	682b      	ldr	r3, [r5, #0]
 8006f64:	b103      	cbz	r3, 8006f68 <_kill_r+0x1c>
 8006f66:	6023      	str	r3, [r4, #0]
 8006f68:	bd38      	pop	{r3, r4, r5, pc}
 8006f6a:	bf00      	nop
 8006f6c:	20000414 	.word	0x20000414

08006f70 <_getpid_r>:
 8006f70:	f7fa be36 	b.w	8001be0 <_getpid>

08006f74 <__swhatbuf_r>:
 8006f74:	b570      	push	{r4, r5, r6, lr}
 8006f76:	460c      	mov	r4, r1
 8006f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f7c:	2900      	cmp	r1, #0
 8006f7e:	b096      	sub	sp, #88	@ 0x58
 8006f80:	4615      	mov	r5, r2
 8006f82:	461e      	mov	r6, r3
 8006f84:	da0d      	bge.n	8006fa2 <__swhatbuf_r+0x2e>
 8006f86:	89a3      	ldrh	r3, [r4, #12]
 8006f88:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006f8c:	f04f 0100 	mov.w	r1, #0
 8006f90:	bf14      	ite	ne
 8006f92:	2340      	movne	r3, #64	@ 0x40
 8006f94:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006f98:	2000      	movs	r0, #0
 8006f9a:	6031      	str	r1, [r6, #0]
 8006f9c:	602b      	str	r3, [r5, #0]
 8006f9e:	b016      	add	sp, #88	@ 0x58
 8006fa0:	bd70      	pop	{r4, r5, r6, pc}
 8006fa2:	466a      	mov	r2, sp
 8006fa4:	f000 f848 	bl	8007038 <_fstat_r>
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	dbec      	blt.n	8006f86 <__swhatbuf_r+0x12>
 8006fac:	9901      	ldr	r1, [sp, #4]
 8006fae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006fb2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006fb6:	4259      	negs	r1, r3
 8006fb8:	4159      	adcs	r1, r3
 8006fba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006fbe:	e7eb      	b.n	8006f98 <__swhatbuf_r+0x24>

08006fc0 <__smakebuf_r>:
 8006fc0:	898b      	ldrh	r3, [r1, #12]
 8006fc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fc4:	079d      	lsls	r5, r3, #30
 8006fc6:	4606      	mov	r6, r0
 8006fc8:	460c      	mov	r4, r1
 8006fca:	d507      	bpl.n	8006fdc <__smakebuf_r+0x1c>
 8006fcc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006fd0:	6023      	str	r3, [r4, #0]
 8006fd2:	6123      	str	r3, [r4, #16]
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	6163      	str	r3, [r4, #20]
 8006fd8:	b003      	add	sp, #12
 8006fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fdc:	ab01      	add	r3, sp, #4
 8006fde:	466a      	mov	r2, sp
 8006fe0:	f7ff ffc8 	bl	8006f74 <__swhatbuf_r>
 8006fe4:	9f00      	ldr	r7, [sp, #0]
 8006fe6:	4605      	mov	r5, r0
 8006fe8:	4639      	mov	r1, r7
 8006fea:	4630      	mov	r0, r6
 8006fec:	f7ff faba 	bl	8006564 <_malloc_r>
 8006ff0:	b948      	cbnz	r0, 8007006 <__smakebuf_r+0x46>
 8006ff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ff6:	059a      	lsls	r2, r3, #22
 8006ff8:	d4ee      	bmi.n	8006fd8 <__smakebuf_r+0x18>
 8006ffa:	f023 0303 	bic.w	r3, r3, #3
 8006ffe:	f043 0302 	orr.w	r3, r3, #2
 8007002:	81a3      	strh	r3, [r4, #12]
 8007004:	e7e2      	b.n	8006fcc <__smakebuf_r+0xc>
 8007006:	89a3      	ldrh	r3, [r4, #12]
 8007008:	6020      	str	r0, [r4, #0]
 800700a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800700e:	81a3      	strh	r3, [r4, #12]
 8007010:	9b01      	ldr	r3, [sp, #4]
 8007012:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007016:	b15b      	cbz	r3, 8007030 <__smakebuf_r+0x70>
 8007018:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800701c:	4630      	mov	r0, r6
 800701e:	f000 f81d 	bl	800705c <_isatty_r>
 8007022:	b128      	cbz	r0, 8007030 <__smakebuf_r+0x70>
 8007024:	89a3      	ldrh	r3, [r4, #12]
 8007026:	f023 0303 	bic.w	r3, r3, #3
 800702a:	f043 0301 	orr.w	r3, r3, #1
 800702e:	81a3      	strh	r3, [r4, #12]
 8007030:	89a3      	ldrh	r3, [r4, #12]
 8007032:	431d      	orrs	r5, r3
 8007034:	81a5      	strh	r5, [r4, #12]
 8007036:	e7cf      	b.n	8006fd8 <__smakebuf_r+0x18>

08007038 <_fstat_r>:
 8007038:	b538      	push	{r3, r4, r5, lr}
 800703a:	4d07      	ldr	r5, [pc, #28]	@ (8007058 <_fstat_r+0x20>)
 800703c:	2300      	movs	r3, #0
 800703e:	4604      	mov	r4, r0
 8007040:	4608      	mov	r0, r1
 8007042:	4611      	mov	r1, r2
 8007044:	602b      	str	r3, [r5, #0]
 8007046:	f7fa fe33 	bl	8001cb0 <_fstat>
 800704a:	1c43      	adds	r3, r0, #1
 800704c:	d102      	bne.n	8007054 <_fstat_r+0x1c>
 800704e:	682b      	ldr	r3, [r5, #0]
 8007050:	b103      	cbz	r3, 8007054 <_fstat_r+0x1c>
 8007052:	6023      	str	r3, [r4, #0]
 8007054:	bd38      	pop	{r3, r4, r5, pc}
 8007056:	bf00      	nop
 8007058:	20000414 	.word	0x20000414

0800705c <_isatty_r>:
 800705c:	b538      	push	{r3, r4, r5, lr}
 800705e:	4d06      	ldr	r5, [pc, #24]	@ (8007078 <_isatty_r+0x1c>)
 8007060:	2300      	movs	r3, #0
 8007062:	4604      	mov	r4, r0
 8007064:	4608      	mov	r0, r1
 8007066:	602b      	str	r3, [r5, #0]
 8007068:	f7fa fe32 	bl	8001cd0 <_isatty>
 800706c:	1c43      	adds	r3, r0, #1
 800706e:	d102      	bne.n	8007076 <_isatty_r+0x1a>
 8007070:	682b      	ldr	r3, [r5, #0]
 8007072:	b103      	cbz	r3, 8007076 <_isatty_r+0x1a>
 8007074:	6023      	str	r3, [r4, #0]
 8007076:	bd38      	pop	{r3, r4, r5, pc}
 8007078:	20000414 	.word	0x20000414

0800707c <_gettimeofday>:
 800707c:	4b02      	ldr	r3, [pc, #8]	@ (8007088 <_gettimeofday+0xc>)
 800707e:	2258      	movs	r2, #88	@ 0x58
 8007080:	601a      	str	r2, [r3, #0]
 8007082:	f04f 30ff 	mov.w	r0, #4294967295
 8007086:	4770      	bx	lr
 8007088:	20000414 	.word	0x20000414

0800708c <_init>:
 800708c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800708e:	bf00      	nop
 8007090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007092:	bc08      	pop	{r3}
 8007094:	469e      	mov	lr, r3
 8007096:	4770      	bx	lr

08007098 <_fini>:
 8007098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709a:	bf00      	nop
 800709c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800709e:	bc08      	pop	{r3}
 80070a0:	469e      	mov	lr, r3
 80070a2:	4770      	bx	lr
