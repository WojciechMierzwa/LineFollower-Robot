
Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006784  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08006914  08006914  00007914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a2c  08006a2c  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006a2c  08006a2c  00007a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a34  08006a34  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a34  08006a34  00007a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a38  08006a38  00007a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006a3c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  2000006c  08006aa8  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  08006aa8  00008424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fdb3  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000233e  00000000  00000000  00017e4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  0001a190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b21  00000000  00000000  0001afd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ce6c  00000000  00000000  0001baf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ba7  00000000  00000000  0003895d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a828a  00000000  00000000  0004a504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f278e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004510  00000000  00000000  000f27d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000f6ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080068fc 	.word	0x080068fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080068fc 	.word	0x080068fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f001 f9ed 	bl	8001654 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f95d 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 fbd9 	bl	8000a34 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000282:	f000 fba7 	bl	80009d4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000286:	f000 fb75 	bl	8000974 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800028a:	f000 f9b7 	bl	80005fc <MX_TIM1_Init>
  MX_TIM16_Init();
 800028e:	f000 fad1 	bl	8000834 <MX_TIM16_Init>
  MX_TIM2_Init();
 8000292:	f000 fa6b 	bl	800076c <MX_TIM2_Init>
  MX_TIM17_Init();
 8000296:	f000 fb47 	bl	8000928 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 800029a:	489e      	ldr	r0, [pc, #632]	@ (8000514 <main+0x2a4>)
 800029c:	f003 f9ec 	bl	8003678 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 80002a0:	2200      	movs	r2, #0
 80002a2:	2102      	movs	r1, #2
 80002a4:	489c      	ldr	r0, [pc, #624]	@ (8000518 <main+0x2a8>)
 80002a6:	f001 fd71 	bl	8001d8c <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80002aa:	2100      	movs	r1, #0
 80002ac:	489b      	ldr	r0, [pc, #620]	@ (800051c <main+0x2ac>)
 80002ae:	f003 fa87 	bl	80037c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80002b2:	2100      	movs	r1, #0
 80002b4:	4897      	ldr	r0, [pc, #604]	@ (8000514 <main+0x2a4>)
 80002b6:	f003 fa83 	bl	80037c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80002ba:	210c      	movs	r1, #12
 80002bc:	4895      	ldr	r0, [pc, #596]	@ (8000514 <main+0x2a4>)
 80002be:	f003 fa7f 	bl	80037c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80002c2:	2100      	movs	r1, #0
 80002c4:	4896      	ldr	r0, [pc, #600]	@ (8000520 <main+0x2b0>)
 80002c6:	f003 fa7b 	bl	80037c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80002ca:	2108      	movs	r1, #8
 80002cc:	4894      	ldr	r0, [pc, #592]	@ (8000520 <main+0x2b0>)
 80002ce:	f003 fa77 	bl	80037c0 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //set_ang(0, 0);

  uint16_t counter=1;
 80002d2:	2301      	movs	r3, #1
 80002d4:	80fb      	strh	r3, [r7, #6]
  uint16_t distance;
  set_ang(450, 0);
 80002d6:	2100      	movs	r1, #0
 80002d8:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 80002dc:	f000 fcc2 	bl	8000c64 <set_ang>


  /**/

  srand(time(NULL));
 80002e0:	2000      	movs	r0, #0
 80002e2:	f005 fc43 	bl	8005b6c <time>
 80002e6:	4602      	mov	r2, r0
 80002e8:	460b      	mov	r3, r1
 80002ea:	4613      	mov	r3, r2
 80002ec:	4618      	mov	r0, r3
 80002ee:	f005 fb01 	bl	80058f4 <srand>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(counter>3){
 80002f2:	88fb      	ldrh	r3, [r7, #6]
 80002f4:	2b03      	cmp	r3, #3
 80002f6:	d901      	bls.n	80002fc <main+0x8c>
	  	  	        	counter=1;
 80002f8:	2301      	movs	r3, #1
 80002fa:	80fb      	strh	r3, [r7, #6]
	  	  	        }
	  	  if (HAL_GPIO_ReadPin(ButtonExt_GPIO_Port, ButtonExt_Pin) == GPIO_PIN_SET)
 80002fc:	2104      	movs	r1, #4
 80002fe:	4889      	ldr	r0, [pc, #548]	@ (8000524 <main+0x2b4>)
 8000300:	f001 fd2c 	bl	8001d5c <HAL_GPIO_ReadPin>
 8000304:	4603      	mov	r3, r0
 8000306:	2b01      	cmp	r3, #1
 8000308:	d106      	bne.n	8000318 <main+0xa8>
	  	      {
	  	        counter++;
 800030a:	88fb      	ldrh	r3, [r7, #6]
 800030c:	3301      	adds	r3, #1
 800030e:	80fb      	strh	r3, [r7, #6]
	  	        HAL_Delay(500);
 8000310:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000314:	f001 fa04 	bl	8001720 <HAL_Delay>

	  	      }

	  	  	  display_reset();
 8000318:	f000 fe08 	bl	8000f2c <display_reset>
	  	      switch (counter)
 800031c:	88fb      	ldrh	r3, [r7, #6]
 800031e:	2b03      	cmp	r3, #3
 8000320:	f000 808f 	beq.w	8000442 <main+0x1d2>
 8000324:	2b03      	cmp	r3, #3
 8000326:	dce4      	bgt.n	80002f2 <main+0x82>
 8000328:	2b01      	cmp	r3, #1
 800032a:	d002      	beq.n	8000332 <main+0xc2>
 800032c:	2b02      	cmp	r3, #2
 800032e:	d075      	beq.n	800041c <main+0x1ac>
 8000330:	e0ef      	b.n	8000512 <main+0x2a2>
	  	      {
	  	      case 1:
	  	        display_reset();
 8000332:	f000 fdfb 	bl	8000f2c <display_reset>
	  	        display1();
 8000336:	f000 fd9b 	bl	8000e70 <display1>
	  	        if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 800033a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800033e:	4876      	ldr	r0, [pc, #472]	@ (8000518 <main+0x2a8>)
 8000340:	f001 fd0c 	bl	8001d5c <HAL_GPIO_ReadPin>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	f040 80de 	bne.w	8000508 <main+0x298>
	  	        {
	  	        	//linefollower
	  	        	countdown();
 800034c:	f000 fe20 	bl	8000f90 <countdown>
	  	        	while(1){
	  	        		detect_states[0] = HAL_GPIO_ReadPin(DETECT1_GPIO_Port, DETECT1_Pin);
 8000350:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000354:	4870      	ldr	r0, [pc, #448]	@ (8000518 <main+0x2a8>)
 8000356:	f001 fd01 	bl	8001d5c <HAL_GPIO_ReadPin>
 800035a:	4603      	mov	r3, r0
 800035c:	461a      	mov	r2, r3
 800035e:	4b72      	ldr	r3, [pc, #456]	@ (8000528 <main+0x2b8>)
 8000360:	701a      	strb	r2, [r3, #0]
	  	        		detect_states[1] = HAL_GPIO_ReadPin(DETECT2_GPIO_Port, DETECT2_Pin);
 8000362:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000366:	486c      	ldr	r0, [pc, #432]	@ (8000518 <main+0x2a8>)
 8000368:	f001 fcf8 	bl	8001d5c <HAL_GPIO_ReadPin>
 800036c:	4603      	mov	r3, r0
 800036e:	461a      	mov	r2, r3
 8000370:	4b6d      	ldr	r3, [pc, #436]	@ (8000528 <main+0x2b8>)
 8000372:	705a      	strb	r2, [r3, #1]
	  	        		detect_states[2] = HAL_GPIO_ReadPin(DETECT3_GPIO_Port, DETECT3_Pin);
 8000374:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000378:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800037c:	f001 fcee 	bl	8001d5c <HAL_GPIO_ReadPin>
 8000380:	4603      	mov	r3, r0
 8000382:	461a      	mov	r2, r3
 8000384:	4b68      	ldr	r3, [pc, #416]	@ (8000528 <main+0x2b8>)
 8000386:	709a      	strb	r2, [r3, #2]
	  	        		detect_states[3] = HAL_GPIO_ReadPin(DETECT4_GPIO_Port, DETECT4_Pin);
 8000388:	2180      	movs	r1, #128	@ 0x80
 800038a:	4866      	ldr	r0, [pc, #408]	@ (8000524 <main+0x2b4>)
 800038c:	f001 fce6 	bl	8001d5c <HAL_GPIO_ReadPin>
 8000390:	4603      	mov	r3, r0
 8000392:	461a      	mov	r2, r3
 8000394:	4b64      	ldr	r3, [pc, #400]	@ (8000528 <main+0x2b8>)
 8000396:	70da      	strb	r2, [r3, #3]
	  	        		detect_states[4] = HAL_GPIO_ReadPin(DETECT5_GPIO_Port, DETECT5_Pin);
 8000398:	2104      	movs	r1, #4
 800039a:	485f      	ldr	r0, [pc, #380]	@ (8000518 <main+0x2a8>)
 800039c:	f001 fcde 	bl	8001d5c <HAL_GPIO_ReadPin>
 80003a0:	4603      	mov	r3, r0
 80003a2:	461a      	mov	r2, r3
 80003a4:	4b60      	ldr	r3, [pc, #384]	@ (8000528 <main+0x2b8>)
 80003a6:	711a      	strb	r2, [r3, #4]

	  	        		if(detect_states[2]==0)
 80003a8:	4b5f      	ldr	r3, [pc, #380]	@ (8000528 <main+0x2b8>)
 80003aa:	789b      	ldrb	r3, [r3, #2]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d105      	bne.n	80003bc <main+0x14c>
	  	        		{
	  	        			motor_forward(cycle);
 80003b0:	4b5e      	ldr	r3, [pc, #376]	@ (800052c <main+0x2bc>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 fc97 	bl	8000ce8 <motor_forward>
 80003ba:	e7c9      	b.n	8000350 <main+0xe0>
	  	        		}
	  	        		else{
	  	        			if(detect_states[1]==0 || detect_states[0]==0)
 80003bc:	4b5a      	ldr	r3, [pc, #360]	@ (8000528 <main+0x2b8>)
 80003be:	785b      	ldrb	r3, [r3, #1]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d003      	beq.n	80003cc <main+0x15c>
 80003c4:	4b58      	ldr	r3, [pc, #352]	@ (8000528 <main+0x2b8>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d10a      	bne.n	80003e2 <main+0x172>
	  	        			{
	  	        				motor_left(cycle);
 80003cc:	4b57      	ldr	r3, [pc, #348]	@ (800052c <main+0x2bc>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4618      	mov	r0, r3
 80003d2:	f000 fcb1 	bl	8000d38 <motor_left>
	  	        				set_ang(900, 0);
 80003d6:	2100      	movs	r1, #0
 80003d8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80003dc:	f000 fc42 	bl	8000c64 <set_ang>
 80003e0:	e01b      	b.n	800041a <main+0x1aa>
	  	        			}
	  	        			else if(detect_states[3]==0 || detect_states[4]==0){
 80003e2:	4b51      	ldr	r3, [pc, #324]	@ (8000528 <main+0x2b8>)
 80003e4:	78db      	ldrb	r3, [r3, #3]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d003      	beq.n	80003f2 <main+0x182>
 80003ea:	4b4f      	ldr	r3, [pc, #316]	@ (8000528 <main+0x2b8>)
 80003ec:	791b      	ldrb	r3, [r3, #4]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d109      	bne.n	8000406 <main+0x196>
	  	        				motor_right(cycle);
 80003f2:	4b4e      	ldr	r3, [pc, #312]	@ (800052c <main+0x2bc>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4618      	mov	r0, r3
 80003f8:	f000 fcca 	bl	8000d90 <motor_right>
	  	        				set_ang(0, 0);
 80003fc:	2100      	movs	r1, #0
 80003fe:	2000      	movs	r0, #0
 8000400:	f000 fc30 	bl	8000c64 <set_ang>
 8000404:	e009      	b.n	800041a <main+0x1aa>
	  	        			}
	  	        			else{
	  	        				motor_backward(cycle);
 8000406:	4b49      	ldr	r3, [pc, #292]	@ (800052c <main+0x2bc>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4618      	mov	r0, r3
 800040c:	f000 fcec 	bl	8000de8 <motor_backward>
	  	        				set_ang(450, 0);
 8000410:	2100      	movs	r1, #0
 8000412:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000416:	f000 fc25 	bl	8000c64 <set_ang>
	  	        		detect_states[0] = HAL_GPIO_ReadPin(DETECT1_GPIO_Port, DETECT1_Pin);
 800041a:	e799      	b.n	8000350 <main+0xe0>
	  	        	}
	  	        }
	  	        break;
	  	      case 2:
	  	    	  //sterowanie bluetoothem
	  	    	display_reset();
 800041c:	f000 fd86 	bl	8000f2c <display_reset>
	  	    	display2();
 8000420:	f000 fd36 	bl	8000e90 <display2>
	  	    	if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET){
 8000424:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000428:	483b      	ldr	r0, [pc, #236]	@ (8000518 <main+0x2a8>)
 800042a:	f001 fc97 	bl	8001d5c <HAL_GPIO_ReadPin>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d16b      	bne.n	800050c <main+0x29c>
	  	    		countdown();
 8000434:	f000 fdac 	bl	8000f90 <countdown>
	  	    		display_reset();
 8000438:	f000 fd78 	bl	8000f2c <display_reset>
	  	    		while(1){
	  	    			bluetooth();
 800043c:	f000 fbb6 	bl	8000bac <bluetooth>
 8000440:	e7fc      	b.n	800043c <main+0x1cc>
	  	    		}
	  	    	}
	  	        break;
	  	      case 3:
	  	    	//sterowanie po kablu
	  	    	display_reset();
 8000442:	f000 fd73 	bl	8000f2c <display_reset>
	  	    	display3();
 8000446:	f000 fd4b 	bl	8000ee0 <display3>
	  	    	if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET){
 800044a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800044e:	4832      	ldr	r0, [pc, #200]	@ (8000518 <main+0x2a8>)
 8000450:	f001 fc84 	bl	8001d5c <HAL_GPIO_ReadPin>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d15a      	bne.n	8000510 <main+0x2a0>
	  	    		countdown();
 800045a:	f000 fd99 	bl	8000f90 <countdown>
	  	    		display_reset();
 800045e:	f000 fd65 	bl	8000f2c <display_reset>
	  	    		while(1){
	  	    			if(HAL_UART_Receive(&huart2, &receivedChar, 1, 0) == HAL_OK) {
 8000462:	2300      	movs	r3, #0
 8000464:	2201      	movs	r2, #1
 8000466:	4932      	ldr	r1, [pc, #200]	@ (8000530 <main+0x2c0>)
 8000468:	4832      	ldr	r0, [pc, #200]	@ (8000534 <main+0x2c4>)
 800046a:	f004 fadd 	bl	8004a28 <HAL_UART_Receive>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d1f6      	bne.n	8000462 <main+0x1f2>
	  	    				if (receivedChar == 's') {
 8000474:	4b2e      	ldr	r3, [pc, #184]	@ (8000530 <main+0x2c0>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b73      	cmp	r3, #115	@ 0x73
 800047a:	d10a      	bne.n	8000492 <main+0x222>
	  	    					set_ang(450, 0);
 800047c:	2100      	movs	r1, #0
 800047e:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000482:	f000 fbef 	bl	8000c64 <set_ang>
	  	    					motor_backward(cycle);
 8000486:	4b29      	ldr	r3, [pc, #164]	@ (800052c <main+0x2bc>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4618      	mov	r0, r3
 800048c:	f000 fcac 	bl	8000de8 <motor_backward>
 8000490:	e036      	b.n	8000500 <main+0x290>
	  	    				} else if (receivedChar == 'w') {
 8000492:	4b27      	ldr	r3, [pc, #156]	@ (8000530 <main+0x2c0>)
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	2b77      	cmp	r3, #119	@ 0x77
 8000498:	d10a      	bne.n	80004b0 <main+0x240>
	  	    					set_ang(450, 0);
 800049a:	2100      	movs	r1, #0
 800049c:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 80004a0:	f000 fbe0 	bl	8000c64 <set_ang>
	  	    					motor_forward(cycle);
 80004a4:	4b21      	ldr	r3, [pc, #132]	@ (800052c <main+0x2bc>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4618      	mov	r0, r3
 80004aa:	f000 fc1d 	bl	8000ce8 <motor_forward>
 80004ae:	e027      	b.n	8000500 <main+0x290>
	  	    				} else if (receivedChar == 'a') {
 80004b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000530 <main+0x2c0>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2b61      	cmp	r3, #97	@ 0x61
 80004b6:	d10a      	bne.n	80004ce <main+0x25e>
	  	    					set_ang(900, 0);
 80004b8:	2100      	movs	r1, #0
 80004ba:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80004be:	f000 fbd1 	bl	8000c64 <set_ang>
	  	    					motor_left(cycle);
 80004c2:	4b1a      	ldr	r3, [pc, #104]	@ (800052c <main+0x2bc>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 fc36 	bl	8000d38 <motor_left>
 80004cc:	e018      	b.n	8000500 <main+0x290>
	  	    				} else if (receivedChar == 'd') {
 80004ce:	4b18      	ldr	r3, [pc, #96]	@ (8000530 <main+0x2c0>)
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	2b64      	cmp	r3, #100	@ 0x64
 80004d4:	d109      	bne.n	80004ea <main+0x27a>
	  	    					set_ang(0, 0);
 80004d6:	2100      	movs	r1, #0
 80004d8:	2000      	movs	r0, #0
 80004da:	f000 fbc3 	bl	8000c64 <set_ang>
	  	    					motor_right(cycle);
 80004de:	4b13      	ldr	r3, [pc, #76]	@ (800052c <main+0x2bc>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4618      	mov	r0, r3
 80004e4:	f000 fc54 	bl	8000d90 <motor_right>
 80004e8:	e00a      	b.n	8000500 <main+0x290>
	  	    				} else if (receivedChar == 'q') {
 80004ea:	4b11      	ldr	r3, [pc, #68]	@ (8000530 <main+0x2c0>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b71      	cmp	r3, #113	@ 0x71
 80004f0:	d106      	bne.n	8000500 <main+0x290>
	  	    					set_ang(450, 0);
 80004f2:	2100      	movs	r1, #0
 80004f4:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 80004f8:	f000 fbb4 	bl	8000c64 <set_ang>
	  	    					motor_stop();
 80004fc:	f000 fc9c 	bl	8000e38 <motor_stop>
	  	    				}
	  	    				HAL_Delay(100);
 8000500:	2064      	movs	r0, #100	@ 0x64
 8000502:	f001 f90d 	bl	8001720 <HAL_Delay>
	  	    			if(HAL_UART_Receive(&huart2, &receivedChar, 1, 0) == HAL_OK) {
 8000506:	e7ac      	b.n	8000462 <main+0x1f2>
	  	        break;
 8000508:	bf00      	nop
 800050a:	e6f2      	b.n	80002f2 <main+0x82>
	  	        break;
 800050c:	bf00      	nop
 800050e:	e6f0      	b.n	80002f2 <main+0x82>
	  	    			}
	  	    		}
	  	    	}
	  	        break;
 8000510:	bf00      	nop
	  if(counter>3){
 8000512:	e6ee      	b.n	80002f2 <main+0x82>
 8000514:	20000088 	.word	0x20000088
 8000518:	48000800 	.word	0x48000800
 800051c:	20000120 	.word	0x20000120
 8000520:	200000d4 	.word	0x200000d4
 8000524:	48000400 	.word	0x48000400
 8000528:	200002c8 	.word	0x200002c8
 800052c:	20000000 	.word	0x20000000
 8000530:	200002cd 	.word	0x200002cd
 8000534:	20000240 	.word	0x20000240

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b09c      	sub	sp, #112	@ 0x70
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000542:	2228      	movs	r2, #40	@ 0x28
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f005 fb07 	bl	8005b5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800055c:	463b      	mov	r3, r7
 800055e:	2234      	movs	r2, #52	@ 0x34
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f005 faf9 	bl	8005b5a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000568:	2301      	movs	r3, #1
 800056a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800056c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000570:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000576:	2301      	movs	r3, #1
 8000578:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057a:	2302      	movs	r3, #2
 800057c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000582:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000584:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000588:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800058e:	4618      	mov	r0, r3
 8000590:	f001 fc14 	bl	8001dbc <HAL_RCC_OscConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800059a:	f000 fd17 	bl	8000fcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	230f      	movs	r3, #15
 80005a0:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a2:	2302      	movs	r3, #2
 80005a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005b4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80005b8:	2102      	movs	r1, #2
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 fc3c 	bl	8002e38 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x92>
  {
    Error_Handler();
 80005c6:	f000 fd01 	bl	8000fcc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 80005ca:	4b0b      	ldr	r3, [pc, #44]	@ (80005f8 <SystemClock_Config+0xc0>)
 80005cc:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM17;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80005d2:	2300      	movs	r3, #0
 80005d4:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80005d6:	2300      	movs	r3, #0
 80005d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 80005da:	2300      	movs	r3, #0
 80005dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005de:	463b      	mov	r3, r7
 80005e0:	4618      	mov	r0, r3
 80005e2:	f002 fe5f 	bl	80032a4 <HAL_RCCEx_PeriphCLKConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80005ec:	f000 fcee 	bl	8000fcc <Error_Handler>
  }
}
 80005f0:	bf00      	nop
 80005f2:	3770      	adds	r7, #112	@ 0x70
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	00181001 	.word	0x00181001

080005fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b09a      	sub	sp, #104	@ 0x68
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000602:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000610:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800061c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
 800062c:	615a      	str	r2, [r3, #20]
 800062e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	222c      	movs	r2, #44	@ 0x2c
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f005 fa8f 	bl	8005b5a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800063c:	4b49      	ldr	r3, [pc, #292]	@ (8000764 <MX_TIM1_Init+0x168>)
 800063e:	4a4a      	ldr	r2, [pc, #296]	@ (8000768 <MX_TIM1_Init+0x16c>)
 8000640:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000642:	4b48      	ldr	r3, [pc, #288]	@ (8000764 <MX_TIM1_Init+0x168>)
 8000644:	2247      	movs	r2, #71	@ 0x47
 8000646:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000648:	4b46      	ldr	r3, [pc, #280]	@ (8000764 <MX_TIM1_Init+0x168>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800064e:	4b45      	ldr	r3, [pc, #276]	@ (8000764 <MX_TIM1_Init+0x168>)
 8000650:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000654:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000656:	4b43      	ldr	r3, [pc, #268]	@ (8000764 <MX_TIM1_Init+0x168>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800065c:	4b41      	ldr	r3, [pc, #260]	@ (8000764 <MX_TIM1_Init+0x168>)
 800065e:	2200      	movs	r2, #0
 8000660:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000662:	4b40      	ldr	r3, [pc, #256]	@ (8000764 <MX_TIM1_Init+0x168>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000668:	483e      	ldr	r0, [pc, #248]	@ (8000764 <MX_TIM1_Init+0x168>)
 800066a:	f002 ffad 	bl	80035c8 <HAL_TIM_Base_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000674:	f000 fcaa 	bl	8000fcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000678:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800067c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800067e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000682:	4619      	mov	r1, r3
 8000684:	4837      	ldr	r0, [pc, #220]	@ (8000764 <MX_TIM1_Init+0x168>)
 8000686:	f003 fbb5 	bl	8003df4 <HAL_TIM_ConfigClockSource>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000690:	f000 fc9c 	bl	8000fcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000694:	4833      	ldr	r0, [pc, #204]	@ (8000764 <MX_TIM1_Init+0x168>)
 8000696:	f003 f83b 	bl	8003710 <HAL_TIM_PWM_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80006a0:	f000 fc94 	bl	8000fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a4:	2300      	movs	r3, #0
 80006a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006a8:	2300      	movs	r3, #0
 80006aa:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006b0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80006b4:	4619      	mov	r1, r3
 80006b6:	482b      	ldr	r0, [pc, #172]	@ (8000764 <MX_TIM1_Init+0x168>)
 80006b8:	f004 f86c 	bl	8004794 <HAL_TIMEx_MasterConfigSynchronization>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80006c2:	f000 fc83 	bl	8000fcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006c6:	2360      	movs	r3, #96	@ 0x60
 80006c8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ce:	2300      	movs	r3, #0
 80006d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006d2:	2300      	movs	r3, #0
 80006d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006da:	2300      	movs	r3, #0
 80006dc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006de:	2300      	movs	r3, #0
 80006e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006e6:	2200      	movs	r2, #0
 80006e8:	4619      	mov	r1, r3
 80006ea:	481e      	ldr	r0, [pc, #120]	@ (8000764 <MX_TIM1_Init+0x168>)
 80006ec:	f003 fa6e 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80006f6:	f000 fc69 	bl	8000fcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006fa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006fe:	220c      	movs	r2, #12
 8000700:	4619      	mov	r1, r3
 8000702:	4818      	ldr	r0, [pc, #96]	@ (8000764 <MX_TIM1_Init+0x168>)
 8000704:	f003 fa62 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800070e:	f000 fc5d 	bl	8000fcc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000716:	2300      	movs	r3, #0
 8000718:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000726:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800072a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000730:	2300      	movs	r3, #0
 8000732:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000734:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000738:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800073e:	2300      	movs	r3, #0
 8000740:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	4619      	mov	r1, r3
 8000746:	4807      	ldr	r0, [pc, #28]	@ (8000764 <MX_TIM1_Init+0x168>)
 8000748:	f004 f88a 	bl	8004860 <HAL_TIMEx_ConfigBreakDeadTime>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000752:	f000 fc3b 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000756:	4803      	ldr	r0, [pc, #12]	@ (8000764 <MX_TIM1_Init+0x168>)
 8000758:	f000 fcde 	bl	8001118 <HAL_TIM_MspPostInit>

}
 800075c:	bf00      	nop
 800075e:	3768      	adds	r7, #104	@ 0x68
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000088 	.word	0x20000088
 8000768:	40012c00 	.word	0x40012c00

0800076c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	@ 0x28
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800077e:	463b      	mov	r3, r7
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
 800078c:	615a      	str	r2, [r3, #20]
 800078e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000790:	4b27      	ldr	r3, [pc, #156]	@ (8000830 <MX_TIM2_Init+0xc4>)
 8000792:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000796:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000798:	4b25      	ldr	r3, [pc, #148]	@ (8000830 <MX_TIM2_Init+0xc4>)
 800079a:	2247      	movs	r2, #71	@ 0x47
 800079c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079e:	4b24      	ldr	r3, [pc, #144]	@ (8000830 <MX_TIM2_Init+0xc4>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80007a4:	4b22      	ldr	r3, [pc, #136]	@ (8000830 <MX_TIM2_Init+0xc4>)
 80007a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ac:	4b20      	ldr	r3, [pc, #128]	@ (8000830 <MX_TIM2_Init+0xc4>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000830 <MX_TIM2_Init+0xc4>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007b8:	481d      	ldr	r0, [pc, #116]	@ (8000830 <MX_TIM2_Init+0xc4>)
 80007ba:	f002 ffa9 	bl	8003710 <HAL_TIM_PWM_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80007c4:	f000 fc02 	bl	8000fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007d0:	f107 031c 	add.w	r3, r7, #28
 80007d4:	4619      	mov	r1, r3
 80007d6:	4816      	ldr	r0, [pc, #88]	@ (8000830 <MX_TIM2_Init+0xc4>)
 80007d8:	f003 ffdc 	bl	8004794 <HAL_TIMEx_MasterConfigSynchronization>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80007e2:	f000 fbf3 	bl	8000fcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007e6:	2360      	movs	r3, #96	@ 0x60
 80007e8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007f6:	463b      	mov	r3, r7
 80007f8:	2200      	movs	r2, #0
 80007fa:	4619      	mov	r1, r3
 80007fc:	480c      	ldr	r0, [pc, #48]	@ (8000830 <MX_TIM2_Init+0xc4>)
 80007fe:	f003 f9e5 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000808:	f000 fbe0 	bl	8000fcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800080c:	463b      	mov	r3, r7
 800080e:	2208      	movs	r2, #8
 8000810:	4619      	mov	r1, r3
 8000812:	4807      	ldr	r0, [pc, #28]	@ (8000830 <MX_TIM2_Init+0xc4>)
 8000814:	f003 f9da 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800081e:	f000 fbd5 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000822:	4803      	ldr	r0, [pc, #12]	@ (8000830 <MX_TIM2_Init+0xc4>)
 8000824:	f000 fc78 	bl	8001118 <HAL_TIM_MspPostInit>

}
 8000828:	bf00      	nop
 800082a:	3728      	adds	r7, #40	@ 0x28
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	200000d4 	.word	0x200000d4

08000834 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b092      	sub	sp, #72	@ 0x48
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800083a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]
 800084a:	615a      	str	r2, [r3, #20]
 800084c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800084e:	463b      	mov	r3, r7
 8000850:	222c      	movs	r2, #44	@ 0x2c
 8000852:	2100      	movs	r1, #0
 8000854:	4618      	mov	r0, r3
 8000856:	f005 f980 	bl	8005b5a <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800085a:	4b31      	ldr	r3, [pc, #196]	@ (8000920 <MX_TIM16_Init+0xec>)
 800085c:	4a31      	ldr	r2, [pc, #196]	@ (8000924 <MX_TIM16_Init+0xf0>)
 800085e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 71;
 8000860:	4b2f      	ldr	r3, [pc, #188]	@ (8000920 <MX_TIM16_Init+0xec>)
 8000862:	2247      	movs	r2, #71	@ 0x47
 8000864:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000866:	4b2e      	ldr	r3, [pc, #184]	@ (8000920 <MX_TIM16_Init+0xec>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 19999;
 800086c:	4b2c      	ldr	r3, [pc, #176]	@ (8000920 <MX_TIM16_Init+0xec>)
 800086e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000872:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000874:	4b2a      	ldr	r3, [pc, #168]	@ (8000920 <MX_TIM16_Init+0xec>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800087a:	4b29      	ldr	r3, [pc, #164]	@ (8000920 <MX_TIM16_Init+0xec>)
 800087c:	2200      	movs	r2, #0
 800087e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000880:	4b27      	ldr	r3, [pc, #156]	@ (8000920 <MX_TIM16_Init+0xec>)
 8000882:	2280      	movs	r2, #128	@ 0x80
 8000884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000886:	4826      	ldr	r0, [pc, #152]	@ (8000920 <MX_TIM16_Init+0xec>)
 8000888:	f002 fe9e 	bl	80035c8 <HAL_TIM_Base_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000892:	f000 fb9b 	bl	8000fcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000896:	4822      	ldr	r0, [pc, #136]	@ (8000920 <MX_TIM16_Init+0xec>)
 8000898:	f002 ff3a 	bl	8003710 <HAL_TIM_PWM_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80008a2:	f000 fb93 	bl	8000fcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008a6:	2360      	movs	r3, #96	@ 0x60
 80008a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ae:	2300      	movs	r3, #0
 80008b0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008b2:	2300      	movs	r3, #0
 80008b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008ba:	2300      	movs	r3, #0
 80008bc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008be:	2300      	movs	r3, #0
 80008c0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008c6:	2200      	movs	r2, #0
 80008c8:	4619      	mov	r1, r3
 80008ca:	4815      	ldr	r0, [pc, #84]	@ (8000920 <MX_TIM16_Init+0xec>)
 80008cc:	f003 f97e 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80008d6:	f000 fb79 	bl	8000fcc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008e2:	2300      	movs	r3, #0
 80008e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80008fc:	463b      	mov	r3, r7
 80008fe:	4619      	mov	r1, r3
 8000900:	4807      	ldr	r0, [pc, #28]	@ (8000920 <MX_TIM16_Init+0xec>)
 8000902:	f003 ffad 	bl	8004860 <HAL_TIMEx_ConfigBreakDeadTime>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 800090c:	f000 fb5e 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000910:	4803      	ldr	r0, [pc, #12]	@ (8000920 <MX_TIM16_Init+0xec>)
 8000912:	f000 fc01 	bl	8001118 <HAL_TIM_MspPostInit>

}
 8000916:	bf00      	nop
 8000918:	3748      	adds	r7, #72	@ 0x48
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000120 	.word	0x20000120
 8000924:	40014400 	.word	0x40014400

08000928 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800092c:	4b0f      	ldr	r3, [pc, #60]	@ (800096c <MX_TIM17_Init+0x44>)
 800092e:	4a10      	ldr	r2, [pc, #64]	@ (8000970 <MX_TIM17_Init+0x48>)
 8000930:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 71;
 8000932:	4b0e      	ldr	r3, [pc, #56]	@ (800096c <MX_TIM17_Init+0x44>)
 8000934:	2247      	movs	r2, #71	@ 0x47
 8000936:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000938:	4b0c      	ldr	r3, [pc, #48]	@ (800096c <MX_TIM17_Init+0x44>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800093e:	4b0b      	ldr	r3, [pc, #44]	@ (800096c <MX_TIM17_Init+0x44>)
 8000940:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000944:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000946:	4b09      	ldr	r3, [pc, #36]	@ (800096c <MX_TIM17_Init+0x44>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800094c:	4b07      	ldr	r3, [pc, #28]	@ (800096c <MX_TIM17_Init+0x44>)
 800094e:	2200      	movs	r2, #0
 8000950:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000952:	4b06      	ldr	r3, [pc, #24]	@ (800096c <MX_TIM17_Init+0x44>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000958:	4804      	ldr	r0, [pc, #16]	@ (800096c <MX_TIM17_Init+0x44>)
 800095a:	f002 fe35 	bl	80035c8 <HAL_TIM_Base_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000964:	f000 fb32 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	2000016c 	.word	0x2000016c
 8000970:	40014800 	.word	0x40014800

08000974 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000978:	4b14      	ldr	r3, [pc, #80]	@ (80009cc <MX_USART1_UART_Init+0x58>)
 800097a:	4a15      	ldr	r2, [pc, #84]	@ (80009d0 <MX_USART1_UART_Init+0x5c>)
 800097c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800097e:	4b13      	ldr	r3, [pc, #76]	@ (80009cc <MX_USART1_UART_Init+0x58>)
 8000980:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000984:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <MX_USART1_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0f      	ldr	r3, [pc, #60]	@ (80009cc <MX_USART1_UART_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <MX_USART1_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <MX_USART1_UART_Init+0x58>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	@ (80009cc <MX_USART1_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <MX_USART1_UART_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	@ (80009cc <MX_USART1_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <MX_USART1_UART_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	@ (80009cc <MX_USART1_UART_Init+0x58>)
 80009b8:	f003 ffe8 	bl	800498c <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009c2:	f000 fb03 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200001b8 	.word	0x200001b8
 80009d0:	40013800 	.word	0x40013800

080009d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009d8:	4b14      	ldr	r3, [pc, #80]	@ (8000a2c <MX_USART2_UART_Init+0x58>)
 80009da:	4a15      	ldr	r2, [pc, #84]	@ (8000a30 <MX_USART2_UART_Init+0x5c>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009de:	4b13      	ldr	r3, [pc, #76]	@ (8000a2c <MX_USART2_UART_Init+0x58>)
 80009e0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80009e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009e6:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <MX_USART2_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <MX_USART2_UART_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <MX_USART2_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <MX_USART2_UART_Init+0x58>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	@ (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a04:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a18:	f003 ffb8 	bl	800498c <HAL_UART_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a22:	f000 fad3 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000240 	.word	0x20000240
 8000a30:	40004400 	.word	0x40004400

08000a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	@ 0x28
 8000a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	4b55      	ldr	r3, [pc, #340]	@ (8000ba0 <MX_GPIO_Init+0x16c>)
 8000a4c:	695b      	ldr	r3, [r3, #20]
 8000a4e:	4a54      	ldr	r2, [pc, #336]	@ (8000ba0 <MX_GPIO_Init+0x16c>)
 8000a50:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000a54:	6153      	str	r3, [r2, #20]
 8000a56:	4b52      	ldr	r3, [pc, #328]	@ (8000ba0 <MX_GPIO_Init+0x16c>)
 8000a58:	695b      	ldr	r3, [r3, #20]
 8000a5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a62:	4b4f      	ldr	r3, [pc, #316]	@ (8000ba0 <MX_GPIO_Init+0x16c>)
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	4a4e      	ldr	r2, [pc, #312]	@ (8000ba0 <MX_GPIO_Init+0x16c>)
 8000a68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a6c:	6153      	str	r3, [r2, #20]
 8000a6e:	4b4c      	ldr	r3, [pc, #304]	@ (8000ba0 <MX_GPIO_Init+0x16c>)
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b49      	ldr	r3, [pc, #292]	@ (8000ba0 <MX_GPIO_Init+0x16c>)
 8000a7c:	695b      	ldr	r3, [r3, #20]
 8000a7e:	4a48      	ldr	r2, [pc, #288]	@ (8000ba0 <MX_GPIO_Init+0x16c>)
 8000a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a84:	6153      	str	r3, [r2, #20]
 8000a86:	4b46      	ldr	r3, [pc, #280]	@ (8000ba0 <MX_GPIO_Init+0x16c>)
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	4b43      	ldr	r3, [pc, #268]	@ (8000ba0 <MX_GPIO_Init+0x16c>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	4a42      	ldr	r2, [pc, #264]	@ (8000ba0 <MX_GPIO_Init+0x16c>)
 8000a98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a9c:	6153      	str	r3, [r2, #20]
 8000a9e:	4b40      	ldr	r3, [pc, #256]	@ (8000ba0 <MX_GPIO_Init+0x16c>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TRIGGER_Pin|C_Pin|B_Pin|A_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8000ab0:	483c      	ldr	r0, [pc, #240]	@ (8000ba4 <MX_GPIO_Init+0x170>)
 8000ab2:	f001 f96b 	bl	8001d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|E_Pin|D_Pin, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f641 0103 	movw	r1, #6147	@ 0x1803
 8000abc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ac0:	f001 f964 	bl	8001d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, G_Pin|F_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 8000aca:	4837      	ldr	r0, [pc, #220]	@ (8000ba8 <MX_GPIO_Init+0x174>)
 8000acc:	f001 f95e 	bl	8001d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ad0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ad6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	482f      	ldr	r0, [pc, #188]	@ (8000ba4 <MX_GPIO_Init+0x170>)
 8000ae8:	f000 ffc6 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : ECHO_Pin DETECT5_Pin DETECT1_Pin DETECT2_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin|DETECT5_Pin|DETECT1_Pin|DETECT2_Pin;
 8000aec:	f241 4305 	movw	r3, #5125	@ 0x1405
 8000af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	4828      	ldr	r0, [pc, #160]	@ (8000ba4 <MX_GPIO_Init+0x170>)
 8000b02:	f000 ffb9 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIGGER_Pin C_Pin B_Pin A_Pin */
  GPIO_InitStruct.Pin = TRIGGER_Pin|C_Pin|B_Pin|A_Pin;
 8000b06:	f44f 73b1 	mov.w	r3, #354	@ 0x162
 8000b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4821      	ldr	r0, [pc, #132]	@ (8000ba4 <MX_GPIO_Init+0x170>)
 8000b20:	f000 ffaa 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin E_Pin D_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|E_Pin|D_Pin;
 8000b24:	f641 0303 	movw	r3, #6147	@ 0x1803
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b40:	f000 ff9a 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : ButtonExt_Pin DETECT4_Pin */
  GPIO_InitStruct.Pin = ButtonExt_Pin|DETECT4_Pin;
 8000b44:	2384      	movs	r3, #132	@ 0x84
 8000b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	4814      	ldr	r0, [pc, #80]	@ (8000ba8 <MX_GPIO_Init+0x174>)
 8000b58:	f000 ff8e 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : G_Pin F_Pin LD2_Pin */
  GPIO_InitStruct.Pin = G_Pin|F_Pin|LD2_Pin;
 8000b5c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	480c      	ldr	r0, [pc, #48]	@ (8000ba8 <MX_GPIO_Init+0x174>)
 8000b76:	f000 ff7f 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : DETECT3_Pin */
  GPIO_InitStruct.Pin = DETECT3_Pin;
 8000b7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DETECT3_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b92:	f000 ff71 	bl	8001a78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b96:	bf00      	nop
 8000b98:	3728      	adds	r7, #40	@ 0x28
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	48000800 	.word	0x48000800
 8000ba8:	48000400 	.word	0x48000400

08000bac <bluetooth>:

}



void bluetooth(void) { // obsługa sterowania poprzez moduł bluetooth zs-040/hc-06
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	while(1){

		if(HAL_UART_Receive(&huart1, &receivedChar, 1, 100) == HAL_OK) {
 8000bb0:	2364      	movs	r3, #100	@ 0x64
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4928      	ldr	r1, [pc, #160]	@ (8000c58 <bluetooth+0xac>)
 8000bb6:	4829      	ldr	r0, [pc, #164]	@ (8000c5c <bluetooth+0xb0>)
 8000bb8:	f003 ff36 	bl	8004a28 <HAL_UART_Receive>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1f6      	bne.n	8000bb0 <bluetooth+0x4>
		        if (receivedChar == 's') {
 8000bc2:	4b25      	ldr	r3, [pc, #148]	@ (8000c58 <bluetooth+0xac>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b73      	cmp	r3, #115	@ 0x73
 8000bc8:	d10c      	bne.n	8000be4 <bluetooth+0x38>
		        	display1();
 8000bca:	f000 f951 	bl	8000e70 <display1>
		        	set_ang(450, 0);
 8000bce:	2100      	movs	r1, #0
 8000bd0:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000bd4:	f000 f846 	bl	8000c64 <set_ang>
		            motor_backward(cycle);
 8000bd8:	4b21      	ldr	r3, [pc, #132]	@ (8000c60 <bluetooth+0xb4>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f000 f903 	bl	8000de8 <motor_backward>
 8000be2:	e7e5      	b.n	8000bb0 <bluetooth+0x4>
		        } else if (receivedChar == 'w') {
 8000be4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c58 <bluetooth+0xac>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b77      	cmp	r3, #119	@ 0x77
 8000bea:	d10c      	bne.n	8000c06 <bluetooth+0x5a>
		        	display2();
 8000bec:	f000 f950 	bl	8000e90 <display2>
		        	set_ang(450, 0);
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000bf6:	f000 f835 	bl	8000c64 <set_ang>
		            motor_forward(cycle);
 8000bfa:	4b19      	ldr	r3, [pc, #100]	@ (8000c60 <bluetooth+0xb4>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 f872 	bl	8000ce8 <motor_forward>
 8000c04:	e7d4      	b.n	8000bb0 <bluetooth+0x4>
		        } else if (receivedChar == 'a') {
 8000c06:	4b14      	ldr	r3, [pc, #80]	@ (8000c58 <bluetooth+0xac>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b61      	cmp	r3, #97	@ 0x61
 8000c0c:	d10a      	bne.n	8000c24 <bluetooth+0x78>
		        	set_ang(900, 0);
 8000c0e:	2100      	movs	r1, #0
 8000c10:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8000c14:	f000 f826 	bl	8000c64 <set_ang>
		            motor_left(cycle);
 8000c18:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <bluetooth+0xb4>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 f88b 	bl	8000d38 <motor_left>
 8000c22:	e7c5      	b.n	8000bb0 <bluetooth+0x4>
		        } else if (receivedChar == 'd') {
 8000c24:	4b0c      	ldr	r3, [pc, #48]	@ (8000c58 <bluetooth+0xac>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b64      	cmp	r3, #100	@ 0x64
 8000c2a:	d109      	bne.n	8000c40 <bluetooth+0x94>
		        	set_ang(0, 0);
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f000 f818 	bl	8000c64 <set_ang>
		            motor_right(cycle);
 8000c34:	4b0a      	ldr	r3, [pc, #40]	@ (8000c60 <bluetooth+0xb4>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 f8a9 	bl	8000d90 <motor_right>
 8000c3e:	e7b7      	b.n	8000bb0 <bluetooth+0x4>
		        } else if (receivedChar == 'q') {
 8000c40:	4b05      	ldr	r3, [pc, #20]	@ (8000c58 <bluetooth+0xac>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b71      	cmp	r3, #113	@ 0x71
 8000c46:	d1b3      	bne.n	8000bb0 <bluetooth+0x4>
		        	set_ang(450, 0);
 8000c48:	2100      	movs	r1, #0
 8000c4a:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000c4e:	f000 f809 	bl	8000c64 <set_ang>
		            motor_stop();
 8000c52:	f000 f8f1 	bl	8000e38 <motor_stop>
		if(HAL_UART_Receive(&huart1, &receivedChar, 1, 100) == HAL_OK) {
 8000c56:	e7ab      	b.n	8000bb0 <bluetooth+0x4>
 8000c58:	200002cd 	.word	0x200002cd
 8000c5c:	200001b8 	.word	0x200001b8
 8000c60:	20000000 	.word	0x20000000

08000c64 <set_ang>:

}


void set_ang(uint16_t ang, uint8_t mode)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	460a      	mov	r2, r1
 8000c6e:	80fb      	strh	r3, [r7, #6]
 8000c70:	4613      	mov	r3, r2
 8000c72:	717b      	strb	r3, [r7, #5]
	uint16_t val;

	if(ang > ANGLE_MAX)
 8000c74:	88fb      	ldrh	r3, [r7, #6]
 8000c76:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8000c7a:	d902      	bls.n	8000c82 <set_ang+0x1e>
	{
		ang = ANGLE_MAX;
 8000c7c:	f44f 7361 	mov.w	r3, #900	@ 0x384
 8000c80:	80fb      	strh	r3, [r7, #6]
	else if (ang < ANGLE_MIN)
	{
		ang = ANGLE_MIN;
	}

	if(mode)
 8000c82:	797b      	ldrb	r3, [r7, #5]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d010      	beq.n	8000caa <set_ang+0x46>
	{
		val = PWM_MIN + ((ang - ANGLE_MIN) * STEP) / 1000;
 8000c88:	88fa      	ldrh	r2, [r7, #6]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	015b      	lsls	r3, r3, #5
 8000c8e:	4413      	add	r3, r2
 8000c90:	015b      	lsls	r3, r3, #5
 8000c92:	1a9b      	subs	r3, r3, r2
 8000c94:	4a12      	ldr	r2, [pc, #72]	@ (8000ce0 <set_ang+0x7c>)
 8000c96:	fb82 1203 	smull	r1, r2, r2, r3
 8000c9a:	1192      	asrs	r2, r2, #6
 8000c9c:	17db      	asrs	r3, r3, #31
 8000c9e:	1ad3      	subs	r3, r2, r3
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	f203 434c 	addw	r3, r3, #1100	@ 0x44c
 8000ca6:	81fb      	strh	r3, [r7, #14]
 8000ca8:	e00f      	b.n	8000cca <set_ang+0x66>
	}
	else
	{
		val = PWM_MAX - ((ang - ANGLE_MIN) * STEP) / 1000;
 8000caa:	88fa      	ldrh	r2, [r7, #6]
 8000cac:	4613      	mov	r3, r2
 8000cae:	015b      	lsls	r3, r3, #5
 8000cb0:	4413      	add	r3, r2
 8000cb2:	015b      	lsls	r3, r3, #5
 8000cb4:	1a9b      	subs	r3, r3, r2
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce0 <set_ang+0x7c>)
 8000cb8:	fb82 1203 	smull	r1, r2, r2, r3
 8000cbc:	1192      	asrs	r2, r2, #6
 8000cbe:	17db      	asrs	r3, r3, #31
 8000cc0:	1a9b      	subs	r3, r3, r2
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	f603 0302 	addw	r3, r3, #2050	@ 0x802
 8000cc8:	81fb      	strh	r3, [r7, #14]
	}

	__HAL_TIM_SET_COMPARE(&TIM_NO, TIM_CH_NO, val);
 8000cca:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <set_ang+0x80>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	89fa      	ldrh	r2, [r7, #14]
 8000cd0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000cd2:	bf00      	nop
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	10624dd3 	.word	0x10624dd3
 8000ce4:	20000120 	.word	0x20000120

08000ce8 <motor_forward>:
    (detect_states[0] != 0 && detect_states[1] != 0) ? turnover(&axle, 'a') :
    (detect_states[2] != 0 && detect_states[3] != 0 && detect_states[4] != 0) ? turnover(&axle, 'd') : 0;
}

void motor_forward(uint32_t duty_cycle)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000cf0:	4b0d      	ldr	r3, [pc, #52]	@ (8000d28 <motor_forward+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, cycle);
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d28 <motor_forward+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0b      	ldr	r2, [pc, #44]	@ (8000d2c <motor_forward+0x44>)
 8000cfe:	6812      	ldr	r2, [r2, #0]
 8000d00:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000d02:	4b0b      	ldr	r3, [pc, #44]	@ (8000d30 <motor_forward+0x48>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2200      	movs	r2, #0
 8000d08:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, cycle/3);
 8000d0a:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <motor_forward+0x44>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	4b08      	ldr	r3, [pc, #32]	@ (8000d30 <motor_forward+0x48>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4908      	ldr	r1, [pc, #32]	@ (8000d34 <motor_forward+0x4c>)
 8000d14:	fba1 1202 	umull	r1, r2, r1, r2
 8000d18:	0852      	lsrs	r2, r2, #1
 8000d1a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	20000088 	.word	0x20000088
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	200000d4 	.word	0x200000d4
 8000d34:	aaaaaaab 	.word	0xaaaaaaab

08000d38 <motor_left>:
void motor_left(uint32_t duty_cycle)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000d40:	4b0f      	ldr	r3, [pc, #60]	@ (8000d80 <motor_left+0x48>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2200      	movs	r2, #0
 8000d46:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, duty_cycle);
 8000d48:	4b0d      	ldr	r3, [pc, #52]	@ (8000d80 <motor_left+0x48>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle*2/3);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	005a      	lsls	r2, r3, #1
 8000d54:	4b0b      	ldr	r3, [pc, #44]	@ (8000d84 <motor_left+0x4c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	490b      	ldr	r1, [pc, #44]	@ (8000d88 <motor_left+0x50>)
 8000d5a:	fba1 1202 	umull	r1, r2, r1, r2
 8000d5e:	0852      	lsrs	r2, r2, #1
 8000d60:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000d62:	4b08      	ldr	r3, [pc, #32]	@ (8000d84 <motor_left+0x4c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2200      	movs	r2, #0
 8000d68:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d70:	4806      	ldr	r0, [pc, #24]	@ (8000d8c <motor_left+0x54>)
 8000d72:	f001 f80b 	bl	8001d8c <HAL_GPIO_WritePin>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000088 	.word	0x20000088
 8000d84:	200000d4 	.word	0x200000d4
 8000d88:	aaaaaaab 	.word	0xaaaaaaab
 8000d8c:	48000400 	.word	0x48000400

08000d90 <motor_right>:
void motor_right(uint32_t duty_cycle)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle*2/3);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	005a      	lsls	r2, r3, #1
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd8 <motor_right+0x48>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	490e      	ldr	r1, [pc, #56]	@ (8000ddc <motor_right+0x4c>)
 8000da2:	fba1 1202 	umull	r1, r2, r1, r2
 8000da6:	0852      	lsrs	r2, r2, #1
 8000da8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8000daa:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd8 <motor_right+0x48>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2200      	movs	r2, #0
 8000db0:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000db2:	4b0b      	ldr	r3, [pc, #44]	@ (8000de0 <motor_right+0x50>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2200      	movs	r2, #0
 8000db8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle);
 8000dba:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <motor_right+0x50>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dc8:	4806      	ldr	r0, [pc, #24]	@ (8000de4 <motor_right+0x54>)
 8000dca:	f000 ffdf 	bl	8001d8c <HAL_GPIO_WritePin>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000088 	.word	0x20000088
 8000ddc:	aaaaaaab 	.word	0xaaaaaaab
 8000de0:	200000d4 	.word	0x200000d4
 8000de4:	48000400 	.word	0x48000400

08000de8 <motor_backward>:

// Function to move motors backward
void motor_backward(uint32_t duty_cycle)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, cycle);
 8000df0:	4b0d      	ldr	r3, [pc, #52]	@ (8000e28 <motor_backward+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e2c <motor_backward+0x44>)
 8000df6:	6812      	ldr	r2, [r2, #0]
 8000df8:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000e28 <motor_backward+0x40>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, cycle/3);
 8000e02:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <motor_backward+0x44>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <motor_backward+0x48>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	490a      	ldr	r1, [pc, #40]	@ (8000e34 <motor_backward+0x4c>)
 8000e0c:	fba1 1202 	umull	r1, r2, r1, r2
 8000e10:	0852      	lsrs	r2, r2, #1
 8000e12:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000e14:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <motor_backward+0x48>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	63da      	str	r2, [r3, #60]	@ 0x3c

}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	20000088 	.word	0x20000088
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	200000d4 	.word	0x200000d4
 8000e34:	aaaaaaab 	.word	0xaaaaaaab

08000e38 <motor_stop>:

// Function to stop motors
void motor_stop(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e68 <motor_stop+0x30>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2200      	movs	r2, #0
 8000e42:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8000e44:	4b08      	ldr	r3, [pc, #32]	@ (8000e68 <motor_stop+0x30>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000e4c:	4b07      	ldr	r3, [pc, #28]	@ (8000e6c <motor_stop+0x34>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2200      	movs	r2, #0
 8000e52:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000e54:	4b05      	ldr	r3, [pc, #20]	@ (8000e6c <motor_stop+0x34>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	20000088 	.word	0x20000088
 8000e6c:	200000d4 	.word	0x200000d4

08000e70 <display1>:
void display1(void){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2140      	movs	r1, #64	@ 0x40
 8000e78:	4804      	ldr	r0, [pc, #16]	@ (8000e8c <display1+0x1c>)
 8000e7a:	f000 ff87 	bl	8001d8c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2120      	movs	r1, #32
 8000e82:	4802      	ldr	r0, [pc, #8]	@ (8000e8c <display1+0x1c>)
 8000e84:	f000 ff82 	bl	8001d8c <HAL_GPIO_WritePin>
}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	48000800 	.word	0x48000800

08000e90 <display2>:
void display2(void){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	//2
		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000e94:	2201      	movs	r2, #1
 8000e96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e9a:	480f      	ldr	r0, [pc, #60]	@ (8000ed8 <display2+0x48>)
 8000e9c:	f000 ff76 	bl	8001d8c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2140      	movs	r1, #64	@ 0x40
 8000ea4:	480c      	ldr	r0, [pc, #48]	@ (8000ed8 <display2+0x48>)
 8000ea6:	f000 ff71 	bl	8001d8c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000eb0:	480a      	ldr	r0, [pc, #40]	@ (8000edc <display2+0x4c>)
 8000eb2:	f000 ff6b 	bl	8001d8c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ebc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ec0:	f000 ff64 	bl	8001d8c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000eca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ece:	f000 ff5d 	bl	8001d8c <HAL_GPIO_WritePin>

}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	48000800 	.word	0x48000800
 8000edc:	48000400 	.word	0x48000400

08000ee0 <display3>:
void display3(void){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	//3
		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000eea:	480e      	ldr	r0, [pc, #56]	@ (8000f24 <display3+0x44>)
 8000eec:	f000 ff4e 	bl	8001d8c <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2140      	movs	r1, #64	@ 0x40
 8000ef4:	480b      	ldr	r0, [pc, #44]	@ (8000f24 <display3+0x44>)
 8000ef6:	f000 ff49 	bl	8001d8c <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8000efa:	2201      	movs	r2, #1
 8000efc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f00:	4809      	ldr	r0, [pc, #36]	@ (8000f28 <display3+0x48>)
 8000f02:	f000 ff43 	bl	8001d8c <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8000f06:	2201      	movs	r2, #1
 8000f08:	2120      	movs	r1, #32
 8000f0a:	4806      	ldr	r0, [pc, #24]	@ (8000f24 <display3+0x44>)
 8000f0c:	f000 ff3e 	bl	8001d8c <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8000f10:	2201      	movs	r2, #1
 8000f12:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f1a:	f000 ff37 	bl	8001d8c <HAL_GPIO_WritePin>
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	48000800 	.word	0x48000800
 8000f28:	48000400 	.word	0x48000400

08000f2c <display_reset>:
		  	HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
		  	HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
		  	HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
		  	HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
}
void display_reset(void){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f36:	4814      	ldr	r0, [pc, #80]	@ (8000f88 <display_reset+0x5c>)
 8000f38:	f000 ff28 	bl	8001d8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2140      	movs	r1, #64	@ 0x40
 8000f40:	4811      	ldr	r0, [pc, #68]	@ (8000f88 <display_reset+0x5c>)
 8000f42:	f000 ff23 	bl	8001d8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2120      	movs	r1, #32
 8000f4a:	480f      	ldr	r0, [pc, #60]	@ (8000f88 <display_reset+0x5c>)
 8000f4c:	f000 ff1e 	bl	8001d8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f5a:	f000 ff17 	bl	8001d8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f68:	f000 ff10 	bl	8001d8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f72:	4806      	ldr	r0, [pc, #24]	@ (8000f8c <display_reset+0x60>)
 8000f74:	f000 ff0a 	bl	8001d8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f7e:	4803      	ldr	r0, [pc, #12]	@ (8000f8c <display_reset+0x60>)
 8000f80:	f000 ff04 	bl	8001d8c <HAL_GPIO_WritePin>

}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	48000800 	.word	0x48000800
 8000f8c:	48000400 	.word	0x48000400

08000f90 <countdown>:

void countdown(void){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
	display_reset();
 8000f94:	f7ff ffca 	bl	8000f2c <display_reset>
	display3();
 8000f98:	f7ff ffa2 	bl	8000ee0 <display3>
	HAL_Delay(1000);
 8000f9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fa0:	f000 fbbe 	bl	8001720 <HAL_Delay>
	display_reset();
 8000fa4:	f7ff ffc2 	bl	8000f2c <display_reset>
	display2();
 8000fa8:	f7ff ff72 	bl	8000e90 <display2>
	HAL_Delay(1000);
 8000fac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fb0:	f000 fbb6 	bl	8001720 <HAL_Delay>
	display_reset();
 8000fb4:	f7ff ffba 	bl	8000f2c <display_reset>
	display1();
 8000fb8:	f7ff ff5a 	bl	8000e70 <display1>
	HAL_Delay(1000);
 8000fbc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fc0:	f000 fbae 	bl	8001720 <HAL_Delay>
	display_reset();
 8000fc4:	f7ff ffb2 	bl	8000f2c <display_reset>
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd0:	b672      	cpsid	i
}
 8000fd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <Error_Handler+0x8>

08000fd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <HAL_MspInit+0x44>)
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	@ (800101c <HAL_MspInit+0x44>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6193      	str	r3, [r2, #24]
 8000fea:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <HAL_MspInit+0x44>)
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff6:	4b09      	ldr	r3, [pc, #36]	@ (800101c <HAL_MspInit+0x44>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	4a08      	ldr	r2, [pc, #32]	@ (800101c <HAL_MspInit+0x44>)
 8000ffc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001000:	61d3      	str	r3, [r2, #28]
 8001002:	4b06      	ldr	r3, [pc, #24]	@ (800101c <HAL_MspInit+0x44>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800100e:	2007      	movs	r0, #7
 8001010:	f000 fc7a 	bl	8001908 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40021000 	.word	0x40021000

08001020 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a27      	ldr	r2, [pc, #156]	@ (80010cc <HAL_TIM_Base_MspInit+0xac>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d11c      	bne.n	800106c <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001032:	4b27      	ldr	r3, [pc, #156]	@ (80010d0 <HAL_TIM_Base_MspInit+0xb0>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	4a26      	ldr	r2, [pc, #152]	@ (80010d0 <HAL_TIM_Base_MspInit+0xb0>)
 8001038:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800103c:	6193      	str	r3, [r2, #24]
 800103e:	4b24      	ldr	r3, [pc, #144]	@ (80010d0 <HAL_TIM_Base_MspInit+0xb0>)
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	2018      	movs	r0, #24
 8001050:	f000 fc65 	bl	800191e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001054:	2018      	movs	r0, #24
 8001056:	f000 fc7e 	bl	8001956 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2100      	movs	r1, #0
 800105e:	201a      	movs	r0, #26
 8001060:	f000 fc5d 	bl	800191e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001064:	201a      	movs	r0, #26
 8001066:	f000 fc76 	bl	8001956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800106a:	e02a      	b.n	80010c2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a18      	ldr	r2, [pc, #96]	@ (80010d4 <HAL_TIM_Base_MspInit+0xb4>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d10c      	bne.n	8001090 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001076:	4b16      	ldr	r3, [pc, #88]	@ (80010d0 <HAL_TIM_Base_MspInit+0xb0>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	4a15      	ldr	r2, [pc, #84]	@ (80010d0 <HAL_TIM_Base_MspInit+0xb0>)
 800107c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001080:	6193      	str	r3, [r2, #24]
 8001082:	4b13      	ldr	r3, [pc, #76]	@ (80010d0 <HAL_TIM_Base_MspInit+0xb0>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]
}
 800108e:	e018      	b.n	80010c2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM17)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a10      	ldr	r2, [pc, #64]	@ (80010d8 <HAL_TIM_Base_MspInit+0xb8>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d113      	bne.n	80010c2 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800109a:	4b0d      	ldr	r3, [pc, #52]	@ (80010d0 <HAL_TIM_Base_MspInit+0xb0>)
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	4a0c      	ldr	r2, [pc, #48]	@ (80010d0 <HAL_TIM_Base_MspInit+0xb0>)
 80010a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010a4:	6193      	str	r3, [r2, #24]
 80010a6:	4b0a      	ldr	r3, [pc, #40]	@ (80010d0 <HAL_TIM_Base_MspInit+0xb0>)
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	201a      	movs	r0, #26
 80010b8:	f000 fc31 	bl	800191e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80010bc:	201a      	movs	r0, #26
 80010be:	f000 fc4a 	bl	8001956 <HAL_NVIC_EnableIRQ>
}
 80010c2:	bf00      	nop
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40012c00 	.word	0x40012c00
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40014400 	.word	0x40014400
 80010d8:	40014800 	.word	0x40014800

080010dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010ec:	d10b      	bne.n	8001106 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010ee:	4b09      	ldr	r3, [pc, #36]	@ (8001114 <HAL_TIM_PWM_MspInit+0x38>)
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	4a08      	ldr	r2, [pc, #32]	@ (8001114 <HAL_TIM_PWM_MspInit+0x38>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	61d3      	str	r3, [r2, #28]
 80010fa:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <HAL_TIM_PWM_MspInit+0x38>)
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000

08001118 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08c      	sub	sp, #48	@ 0x30
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a51      	ldr	r2, [pc, #324]	@ (800127c <HAL_TIM_MspPostInit+0x164>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d13a      	bne.n	80011b0 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800113a:	4b51      	ldr	r3, [pc, #324]	@ (8001280 <HAL_TIM_MspPostInit+0x168>)
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	4a50      	ldr	r2, [pc, #320]	@ (8001280 <HAL_TIM_MspPostInit+0x168>)
 8001140:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001144:	6153      	str	r3, [r2, #20]
 8001146:	4b4e      	ldr	r3, [pc, #312]	@ (8001280 <HAL_TIM_MspPostInit+0x168>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800114e:	61bb      	str	r3, [r7, #24]
 8001150:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	4b4b      	ldr	r3, [pc, #300]	@ (8001280 <HAL_TIM_MspPostInit+0x168>)
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	4a4a      	ldr	r2, [pc, #296]	@ (8001280 <HAL_TIM_MspPostInit+0x168>)
 8001158:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800115c:	6153      	str	r3, [r2, #20]
 800115e:	4b48      	ldr	r3, [pc, #288]	@ (8001280 <HAL_TIM_MspPostInit+0x168>)
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = L2_Pin;
 800116a:	2308      	movs	r3, #8
 800116c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800117a:	2302      	movs	r3, #2
 800117c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(L2_GPIO_Port, &GPIO_InitStruct);
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	4619      	mov	r1, r3
 8001184:	483f      	ldr	r0, [pc, #252]	@ (8001284 <HAL_TIM_MspPostInit+0x16c>)
 8001186:	f000 fc77 	bl	8001a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = L1_Pin;
 800118a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800118e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001190:	2302      	movs	r3, #2
 8001192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800119c:	2306      	movs	r3, #6
 800119e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(L1_GPIO_Port, &GPIO_InitStruct);
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	4619      	mov	r1, r3
 80011a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011aa:	f000 fc65 	bl	8001a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80011ae:	e061      	b.n	8001274 <HAL_TIM_MspPostInit+0x15c>
  else if(htim->Instance==TIM2)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011b8:	d13a      	bne.n	8001230 <HAL_TIM_MspPostInit+0x118>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	4b31      	ldr	r3, [pc, #196]	@ (8001280 <HAL_TIM_MspPostInit+0x168>)
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	4a30      	ldr	r2, [pc, #192]	@ (8001280 <HAL_TIM_MspPostInit+0x168>)
 80011c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c4:	6153      	str	r3, [r2, #20]
 80011c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001280 <HAL_TIM_MspPostInit+0x168>)
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001280 <HAL_TIM_MspPostInit+0x168>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	4a2a      	ldr	r2, [pc, #168]	@ (8001280 <HAL_TIM_MspPostInit+0x168>)
 80011d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011dc:	6153      	str	r3, [r2, #20]
 80011de:	4b28      	ldr	r3, [pc, #160]	@ (8001280 <HAL_TIM_MspPostInit+0x168>)
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = P1_Pin;
 80011ea:	2320      	movs	r3, #32
 80011ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011fa:	2301      	movs	r3, #1
 80011fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(P1_GPIO_Port, &GPIO_InitStruct);
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	4619      	mov	r1, r3
 8001204:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001208:	f000 fc36 	bl	8001a78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = P2_Pin;
 800120c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001212:	2302      	movs	r3, #2
 8001214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800121e:	2301      	movs	r3, #1
 8001220:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(P2_GPIO_Port, &GPIO_InitStruct);
 8001222:	f107 031c 	add.w	r3, r7, #28
 8001226:	4619      	mov	r1, r3
 8001228:	4817      	ldr	r0, [pc, #92]	@ (8001288 <HAL_TIM_MspPostInit+0x170>)
 800122a:	f000 fc25 	bl	8001a78 <HAL_GPIO_Init>
}
 800122e:	e021      	b.n	8001274 <HAL_TIM_MspPostInit+0x15c>
  else if(htim->Instance==TIM16)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a15      	ldr	r2, [pc, #84]	@ (800128c <HAL_TIM_MspPostInit+0x174>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d11c      	bne.n	8001274 <HAL_TIM_MspPostInit+0x15c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <HAL_TIM_MspPostInit+0x168>)
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	4a10      	ldr	r2, [pc, #64]	@ (8001280 <HAL_TIM_MspPostInit+0x168>)
 8001240:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001244:	6153      	str	r3, [r2, #20]
 8001246:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <HAL_TIM_MspPostInit+0x168>)
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001252:	2340      	movs	r3, #64	@ 0x40
 8001254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001262:	2301      	movs	r3, #1
 8001264:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	4619      	mov	r1, r3
 800126c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001270:	f000 fc02 	bl	8001a78 <HAL_GPIO_Init>
}
 8001274:	bf00      	nop
 8001276:	3730      	adds	r7, #48	@ 0x30
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40012c00 	.word	0x40012c00
 8001280:	40021000 	.word	0x40021000
 8001284:	48000800 	.word	0x48000800
 8001288:	48000400 	.word	0x48000400
 800128c:	40014400 	.word	0x40014400

08001290 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08c      	sub	sp, #48	@ 0x30
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 031c 	add.w	r3, r7, #28
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a37      	ldr	r2, [pc, #220]	@ (800138c <HAL_UART_MspInit+0xfc>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d132      	bne.n	8001318 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012b2:	4b37      	ldr	r3, [pc, #220]	@ (8001390 <HAL_UART_MspInit+0x100>)
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	4a36      	ldr	r2, [pc, #216]	@ (8001390 <HAL_UART_MspInit+0x100>)
 80012b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012bc:	6193      	str	r3, [r2, #24]
 80012be:	4b34      	ldr	r3, [pc, #208]	@ (8001390 <HAL_UART_MspInit+0x100>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012c6:	61bb      	str	r3, [r7, #24]
 80012c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ca:	4b31      	ldr	r3, [pc, #196]	@ (8001390 <HAL_UART_MspInit+0x100>)
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	4a30      	ldr	r2, [pc, #192]	@ (8001390 <HAL_UART_MspInit+0x100>)
 80012d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012d4:	6153      	str	r3, [r2, #20]
 80012d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001390 <HAL_UART_MspInit+0x100>)
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012e2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80012e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012f4:	2307      	movs	r3, #7
 80012f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	4619      	mov	r1, r3
 80012fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001302:	f000 fbb9 	bl	8001a78 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2100      	movs	r1, #0
 800130a:	2025      	movs	r0, #37	@ 0x25
 800130c:	f000 fb07 	bl	800191e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001310:	2025      	movs	r0, #37	@ 0x25
 8001312:	f000 fb20 	bl	8001956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001316:	e035      	b.n	8001384 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART2)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a1d      	ldr	r2, [pc, #116]	@ (8001394 <HAL_UART_MspInit+0x104>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d130      	bne.n	8001384 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001322:	4b1b      	ldr	r3, [pc, #108]	@ (8001390 <HAL_UART_MspInit+0x100>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	4a1a      	ldr	r2, [pc, #104]	@ (8001390 <HAL_UART_MspInit+0x100>)
 8001328:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800132c:	61d3      	str	r3, [r2, #28]
 800132e:	4b18      	ldr	r3, [pc, #96]	@ (8001390 <HAL_UART_MspInit+0x100>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133a:	4b15      	ldr	r3, [pc, #84]	@ (8001390 <HAL_UART_MspInit+0x100>)
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	4a14      	ldr	r2, [pc, #80]	@ (8001390 <HAL_UART_MspInit+0x100>)
 8001340:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001344:	6153      	str	r3, [r2, #20]
 8001346:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <HAL_UART_MspInit+0x100>)
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001352:	230c      	movs	r3, #12
 8001354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001356:	2302      	movs	r3, #2
 8001358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001362:	2307      	movs	r3, #7
 8001364:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 031c 	add.w	r3, r7, #28
 800136a:	4619      	mov	r1, r3
 800136c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001370:	f000 fb82 	bl	8001a78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001374:	2200      	movs	r2, #0
 8001376:	2100      	movs	r1, #0
 8001378:	2026      	movs	r0, #38	@ 0x26
 800137a:	f000 fad0 	bl	800191e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800137e:	2026      	movs	r0, #38	@ 0x26
 8001380:	f000 fae9 	bl	8001956 <HAL_NVIC_EnableIRQ>
}
 8001384:	bf00      	nop
 8001386:	3730      	adds	r7, #48	@ 0x30
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40013800 	.word	0x40013800
 8001390:	40021000 	.word	0x40021000
 8001394:	40004400 	.word	0x40004400

08001398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <NMI_Handler+0x4>

080013a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <HardFault_Handler+0x4>

080013a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <MemManage_Handler+0x4>

080013b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <BusFault_Handler+0x4>

080013b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <UsageFault_Handler+0x4>

080013c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ee:	f000 f977 	bl	80016e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013fc:	4802      	ldr	r0, [pc, #8]	@ (8001408 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80013fe:	f002 fac5 	bl	800398c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000088 	.word	0x20000088

0800140c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001410:	4803      	ldr	r0, [pc, #12]	@ (8001420 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8001412:	f002 fabb 	bl	800398c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8001416:	4803      	ldr	r0, [pc, #12]	@ (8001424 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8001418:	f002 fab8 	bl	800398c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000088 	.word	0x20000088
 8001424:	2000016c 	.word	0x2000016c

08001428 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800142c:	4802      	ldr	r0, [pc, #8]	@ (8001438 <USART1_IRQHandler+0x10>)
 800142e:	f003 fbc5 	bl	8004bbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200001b8 	.word	0x200001b8

0800143c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001440:	4802      	ldr	r0, [pc, #8]	@ (800144c <USART2_IRQHandler+0x10>)
 8001442:	f003 fbbb 	bl	8004bbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000240 	.word	0x20000240

08001450 <_getpid>:
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
 8001454:	2301      	movs	r3, #1
 8001456:	4618      	mov	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <_kill>:
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	f004 fbf3 	bl	8005c54 <__errno>
 800146e:	4603      	mov	r3, r0
 8001470:	2216      	movs	r2, #22
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	f04f 33ff 	mov.w	r3, #4294967295
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <_exit>:
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	f04f 31ff 	mov.w	r1, #4294967295
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff ffe7 	bl	8001460 <_kill>
 8001492:	bf00      	nop
 8001494:	e7fd      	b.n	8001492 <_exit+0x12>

08001496 <_read>:
 8001496:	b580      	push	{r7, lr}
 8001498:	b086      	sub	sp, #24
 800149a:	af00      	add	r7, sp, #0
 800149c:	60f8      	str	r0, [r7, #12]
 800149e:	60b9      	str	r1, [r7, #8]
 80014a0:	607a      	str	r2, [r7, #4]
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	e00a      	b.n	80014be <_read+0x28>
 80014a8:	f3af 8000 	nop.w
 80014ac:	4601      	mov	r1, r0
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	1c5a      	adds	r2, r3, #1
 80014b2:	60ba      	str	r2, [r7, #8]
 80014b4:	b2ca      	uxtb	r2, r1
 80014b6:	701a      	strb	r2, [r3, #0]
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	3301      	adds	r3, #1
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	dbf0      	blt.n	80014a8 <_read+0x12>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4618      	mov	r0, r3
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <_write>:
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	e009      	b.n	80014f6 <_write+0x26>
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	1c5a      	adds	r2, r3, #1
 80014e6:	60ba      	str	r2, [r7, #8]
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f3af 8000 	nop.w
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	3301      	adds	r3, #1
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	dbf1      	blt.n	80014e2 <_write+0x12>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4618      	mov	r0, r3
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <_close>:
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	f04f 33ff 	mov.w	r3, #4294967295
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <_fstat>:
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	2300      	movs	r3, #0
 8001534:	4618      	mov	r0, r3
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <_isatty>:
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	2301      	movs	r3, #1
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <_lseek>:
 8001556:	b480      	push	{r7}
 8001558:	b085      	sub	sp, #20
 800155a:	af00      	add	r7, sp, #0
 800155c:	60f8      	str	r0, [r7, #12]
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
 8001562:	2300      	movs	r3, #0
 8001564:	4618      	mov	r0, r3
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <_sbrk>:
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	4a14      	ldr	r2, [pc, #80]	@ (80015cc <_sbrk+0x5c>)
 800157a:	4b15      	ldr	r3, [pc, #84]	@ (80015d0 <_sbrk+0x60>)
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	4b13      	ldr	r3, [pc, #76]	@ (80015d4 <_sbrk+0x64>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <_sbrk+0x22>
 800158c:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <_sbrk+0x64>)
 800158e:	4a12      	ldr	r2, [pc, #72]	@ (80015d8 <_sbrk+0x68>)
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	4b10      	ldr	r3, [pc, #64]	@ (80015d4 <_sbrk+0x64>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	429a      	cmp	r2, r3
 800159e:	d207      	bcs.n	80015b0 <_sbrk+0x40>
 80015a0:	f004 fb58 	bl	8005c54 <__errno>
 80015a4:	4603      	mov	r3, r0
 80015a6:	220c      	movs	r2, #12
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295
 80015ae:	e009      	b.n	80015c4 <_sbrk+0x54>
 80015b0:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	4b07      	ldr	r3, [pc, #28]	@ (80015d4 <_sbrk+0x64>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	4a05      	ldr	r2, [pc, #20]	@ (80015d4 <_sbrk+0x64>)
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20004000 	.word	0x20004000
 80015d0:	00000400 	.word	0x00000400
 80015d4:	200002d0 	.word	0x200002d0
 80015d8:	20000428 	.word	0x20000428

080015dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e0:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <SystemInit+0x20>)
 80015e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015e6:	4a05      	ldr	r2, [pc, #20]	@ (80015fc <SystemInit+0x20>)
 80015e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <Reset_Handler>:
 8001600:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001638 <LoopForever+0x2>
 8001604:	f7ff ffea 	bl	80015dc <SystemInit>
 8001608:	480c      	ldr	r0, [pc, #48]	@ (800163c <LoopForever+0x6>)
 800160a:	490d      	ldr	r1, [pc, #52]	@ (8001640 <LoopForever+0xa>)
 800160c:	4a0d      	ldr	r2, [pc, #52]	@ (8001644 <LoopForever+0xe>)
 800160e:	2300      	movs	r3, #0
 8001610:	e002      	b.n	8001618 <LoopCopyDataInit>

08001612 <CopyDataInit>:
 8001612:	58d4      	ldr	r4, [r2, r3]
 8001614:	50c4      	str	r4, [r0, r3]
 8001616:	3304      	adds	r3, #4

08001618 <LoopCopyDataInit>:
 8001618:	18c4      	adds	r4, r0, r3
 800161a:	428c      	cmp	r4, r1
 800161c:	d3f9      	bcc.n	8001612 <CopyDataInit>
 800161e:	4a0a      	ldr	r2, [pc, #40]	@ (8001648 <LoopForever+0x12>)
 8001620:	4c0a      	ldr	r4, [pc, #40]	@ (800164c <LoopForever+0x16>)
 8001622:	2300      	movs	r3, #0
 8001624:	e001      	b.n	800162a <LoopFillZerobss>

08001626 <FillZerobss>:
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	3204      	adds	r2, #4

0800162a <LoopFillZerobss>:
 800162a:	42a2      	cmp	r2, r4
 800162c:	d3fb      	bcc.n	8001626 <FillZerobss>
 800162e:	f004 fb17 	bl	8005c60 <__libc_init_array>
 8001632:	f7fe fe1d 	bl	8000270 <main>

08001636 <LoopForever>:
 8001636:	e7fe      	b.n	8001636 <LoopForever>
 8001638:	20004000 	.word	0x20004000
 800163c:	20000000 	.word	0x20000000
 8001640:	2000006c 	.word	0x2000006c
 8001644:	08006a3c 	.word	0x08006a3c
 8001648:	2000006c 	.word	0x2000006c
 800164c:	20000424 	.word	0x20000424

08001650 <ADC1_IRQHandler>:
 8001650:	e7fe      	b.n	8001650 <ADC1_IRQHandler>
	...

08001654 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001658:	4b08      	ldr	r3, [pc, #32]	@ (800167c <HAL_Init+0x28>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a07      	ldr	r2, [pc, #28]	@ (800167c <HAL_Init+0x28>)
 800165e:	f043 0310 	orr.w	r3, r3, #16
 8001662:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001664:	2003      	movs	r0, #3
 8001666:	f000 f94f 	bl	8001908 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800166a:	2000      	movs	r0, #0
 800166c:	f000 f808 	bl	8001680 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001670:	f7ff fcb2 	bl	8000fd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40022000 	.word	0x40022000

08001680 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001688:	4b12      	ldr	r3, [pc, #72]	@ (80016d4 <HAL_InitTick+0x54>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b12      	ldr	r3, [pc, #72]	@ (80016d8 <HAL_InitTick+0x58>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	4619      	mov	r1, r3
 8001692:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001696:	fbb3 f3f1 	udiv	r3, r3, r1
 800169a:	fbb2 f3f3 	udiv	r3, r2, r3
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 f967 	bl	8001972 <HAL_SYSTICK_Config>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e00e      	b.n	80016cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b0f      	cmp	r3, #15
 80016b2:	d80a      	bhi.n	80016ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b4:	2200      	movs	r2, #0
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	f04f 30ff 	mov.w	r0, #4294967295
 80016bc:	f000 f92f 	bl	800191e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c0:	4a06      	ldr	r2, [pc, #24]	@ (80016dc <HAL_InitTick+0x5c>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	e000      	b.n	80016cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000004 	.word	0x20000004
 80016d8:	2000000c 	.word	0x2000000c
 80016dc:	20000008 	.word	0x20000008

080016e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e4:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <HAL_IncTick+0x20>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <HAL_IncTick+0x24>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	4a04      	ldr	r2, [pc, #16]	@ (8001704 <HAL_IncTick+0x24>)
 80016f2:	6013      	str	r3, [r2, #0]
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	2000000c 	.word	0x2000000c
 8001704:	200002d4 	.word	0x200002d4

08001708 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return uwTick;  
 800170c:	4b03      	ldr	r3, [pc, #12]	@ (800171c <HAL_GetTick+0x14>)
 800170e:	681b      	ldr	r3, [r3, #0]
}
 8001710:	4618      	mov	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	200002d4 	.word	0x200002d4

08001720 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001728:	f7ff ffee 	bl	8001708 <HAL_GetTick>
 800172c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001738:	d005      	beq.n	8001746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800173a:	4b0a      	ldr	r3, [pc, #40]	@ (8001764 <HAL_Delay+0x44>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	461a      	mov	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4413      	add	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001746:	bf00      	nop
 8001748:	f7ff ffde 	bl	8001708 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	429a      	cmp	r2, r3
 8001756:	d8f7      	bhi.n	8001748 <HAL_Delay+0x28>
  {
  }
}
 8001758:	bf00      	nop
 800175a:	bf00      	nop
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	2000000c 	.word	0x2000000c

08001768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001778:	4b0c      	ldr	r3, [pc, #48]	@ (80017ac <__NVIC_SetPriorityGrouping+0x44>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001784:	4013      	ands	r3, r2
 8001786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001790:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001794:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179a:	4a04      	ldr	r2, [pc, #16]	@ (80017ac <__NVIC_SetPriorityGrouping+0x44>)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	60d3      	str	r3, [r2, #12]
}
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b4:	4b04      	ldr	r3, [pc, #16]	@ (80017c8 <__NVIC_GetPriorityGrouping+0x18>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	0a1b      	lsrs	r3, r3, #8
 80017ba:	f003 0307 	and.w	r3, r3, #7
}
 80017be:	4618      	mov	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	db0b      	blt.n	80017f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	f003 021f 	and.w	r2, r3, #31
 80017e4:	4907      	ldr	r1, [pc, #28]	@ (8001804 <__NVIC_EnableIRQ+0x38>)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	2001      	movs	r0, #1
 80017ee:	fa00 f202 	lsl.w	r2, r0, r2
 80017f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000e100 	.word	0xe000e100

08001808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	2b00      	cmp	r3, #0
 800181a:	db0a      	blt.n	8001832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	b2da      	uxtb	r2, r3
 8001820:	490c      	ldr	r1, [pc, #48]	@ (8001854 <__NVIC_SetPriority+0x4c>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	0112      	lsls	r2, r2, #4
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	440b      	add	r3, r1
 800182c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001830:	e00a      	b.n	8001848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4908      	ldr	r1, [pc, #32]	@ (8001858 <__NVIC_SetPriority+0x50>)
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	3b04      	subs	r3, #4
 8001840:	0112      	lsls	r2, r2, #4
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	440b      	add	r3, r1
 8001846:	761a      	strb	r2, [r3, #24]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000e100 	.word	0xe000e100
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800185c:	b480      	push	{r7}
 800185e:	b089      	sub	sp, #36	@ 0x24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f1c3 0307 	rsb	r3, r3, #7
 8001876:	2b04      	cmp	r3, #4
 8001878:	bf28      	it	cs
 800187a:	2304      	movcs	r3, #4
 800187c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3304      	adds	r3, #4
 8001882:	2b06      	cmp	r3, #6
 8001884:	d902      	bls.n	800188c <NVIC_EncodePriority+0x30>
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3b03      	subs	r3, #3
 800188a:	e000      	b.n	800188e <NVIC_EncodePriority+0x32>
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	f04f 32ff 	mov.w	r2, #4294967295
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43da      	mvns	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	401a      	ands	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a4:	f04f 31ff 	mov.w	r1, #4294967295
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	fa01 f303 	lsl.w	r3, r1, r3
 80018ae:	43d9      	mvns	r1, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	4313      	orrs	r3, r2
         );
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3724      	adds	r7, #36	@ 0x24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
	...

080018c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018d4:	d301      	bcc.n	80018da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d6:	2301      	movs	r3, #1
 80018d8:	e00f      	b.n	80018fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018da:	4a0a      	ldr	r2, [pc, #40]	@ (8001904 <SysTick_Config+0x40>)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e2:	210f      	movs	r1, #15
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295
 80018e8:	f7ff ff8e 	bl	8001808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ec:	4b05      	ldr	r3, [pc, #20]	@ (8001904 <SysTick_Config+0x40>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018f2:	4b04      	ldr	r3, [pc, #16]	@ (8001904 <SysTick_Config+0x40>)
 80018f4:	2207      	movs	r2, #7
 80018f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	e000e010 	.word	0xe000e010

08001908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ff29 	bl	8001768 <__NVIC_SetPriorityGrouping>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b086      	sub	sp, #24
 8001922:	af00      	add	r7, sp, #0
 8001924:	4603      	mov	r3, r0
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
 800192a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001930:	f7ff ff3e 	bl	80017b0 <__NVIC_GetPriorityGrouping>
 8001934:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	68b9      	ldr	r1, [r7, #8]
 800193a:	6978      	ldr	r0, [r7, #20]
 800193c:	f7ff ff8e 	bl	800185c <NVIC_EncodePriority>
 8001940:	4602      	mov	r2, r0
 8001942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001946:	4611      	mov	r1, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff5d 	bl	8001808 <__NVIC_SetPriority>
}
 800194e:	bf00      	nop
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff31 	bl	80017cc <__NVIC_EnableIRQ>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ffa2 	bl	80018c4 <SysTick_Config>
 8001980:	4603      	mov	r3, r0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001998:	2b02      	cmp	r3, #2
 800199a:	d008      	beq.n	80019ae <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2204      	movs	r2, #4
 80019a0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e020      	b.n	80019f0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 020e 	bic.w	r2, r2, #14
 80019bc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 0201 	bic.w	r2, r2, #1
 80019cc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019d6:	2101      	movs	r1, #1
 80019d8:	fa01 f202 	lsl.w	r2, r1, r2
 80019dc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a04:	2300      	movs	r3, #0
 8001a06:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d005      	beq.n	8001a1e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2204      	movs	r2, #4
 8001a16:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
 8001a1c:	e027      	b.n	8001a6e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 020e 	bic.w	r2, r2, #14
 8001a2c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 0201 	bic.w	r2, r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a46:	2101      	movs	r1, #1
 8001a48:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	4798      	blx	r3
    } 
  }
  return status;
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a86:	e14e      	b.n	8001d26 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	fa01 f303 	lsl.w	r3, r1, r3
 8001a94:	4013      	ands	r3, r2
 8001a96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 8140 	beq.w	8001d20 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d005      	beq.n	8001ab8 <HAL_GPIO_Init+0x40>
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d130      	bne.n	8001b1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4013      	ands	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	68da      	ldr	r2, [r3, #12]
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aee:	2201      	movs	r2, #1
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4013      	ands	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	091b      	lsrs	r3, r3, #4
 8001b04:	f003 0201 	and.w	r2, r3, #1
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	2b03      	cmp	r3, #3
 8001b24:	d017      	beq.n	8001b56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	2203      	movs	r2, #3
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d123      	bne.n	8001baa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	08da      	lsrs	r2, r3, #3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	3208      	adds	r2, #8
 8001b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	220f      	movs	r2, #15
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4013      	ands	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	691a      	ldr	r2, [r3, #16]
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	08da      	lsrs	r2, r3, #3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3208      	adds	r2, #8
 8001ba4:	6939      	ldr	r1, [r7, #16]
 8001ba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 0203 	and.w	r2, r3, #3
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 809a 	beq.w	8001d20 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bec:	4b55      	ldr	r3, [pc, #340]	@ (8001d44 <HAL_GPIO_Init+0x2cc>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	4a54      	ldr	r2, [pc, #336]	@ (8001d44 <HAL_GPIO_Init+0x2cc>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	6193      	str	r3, [r2, #24]
 8001bf8:	4b52      	ldr	r3, [pc, #328]	@ (8001d44 <HAL_GPIO_Init+0x2cc>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c04:	4a50      	ldr	r2, [pc, #320]	@ (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	220f      	movs	r2, #15
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4013      	ands	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c2e:	d013      	beq.n	8001c58 <HAL_GPIO_Init+0x1e0>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a46      	ldr	r2, [pc, #280]	@ (8001d4c <HAL_GPIO_Init+0x2d4>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d00d      	beq.n	8001c54 <HAL_GPIO_Init+0x1dc>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a45      	ldr	r2, [pc, #276]	@ (8001d50 <HAL_GPIO_Init+0x2d8>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d007      	beq.n	8001c50 <HAL_GPIO_Init+0x1d8>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a44      	ldr	r2, [pc, #272]	@ (8001d54 <HAL_GPIO_Init+0x2dc>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d101      	bne.n	8001c4c <HAL_GPIO_Init+0x1d4>
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e006      	b.n	8001c5a <HAL_GPIO_Init+0x1e2>
 8001c4c:	2305      	movs	r3, #5
 8001c4e:	e004      	b.n	8001c5a <HAL_GPIO_Init+0x1e2>
 8001c50:	2302      	movs	r3, #2
 8001c52:	e002      	b.n	8001c5a <HAL_GPIO_Init+0x1e2>
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <HAL_GPIO_Init+0x1e2>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	f002 0203 	and.w	r2, r2, #3
 8001c60:	0092      	lsls	r2, r2, #2
 8001c62:	4093      	lsls	r3, r2
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c6a:	4937      	ldr	r1, [pc, #220]	@ (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	089b      	lsrs	r3, r3, #2
 8001c70:	3302      	adds	r3, #2
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c78:	4b37      	ldr	r3, [pc, #220]	@ (8001d58 <HAL_GPIO_Init+0x2e0>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	43db      	mvns	r3, r3
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	4013      	ands	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c9c:	4a2e      	ldr	r2, [pc, #184]	@ (8001d58 <HAL_GPIO_Init+0x2e0>)
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ca2:	4b2d      	ldr	r3, [pc, #180]	@ (8001d58 <HAL_GPIO_Init+0x2e0>)
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	43db      	mvns	r3, r3
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cc6:	4a24      	ldr	r2, [pc, #144]	@ (8001d58 <HAL_GPIO_Init+0x2e0>)
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ccc:	4b22      	ldr	r3, [pc, #136]	@ (8001d58 <HAL_GPIO_Init+0x2e0>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001cf0:	4a19      	ldr	r2, [pc, #100]	@ (8001d58 <HAL_GPIO_Init+0x2e0>)
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cf6:	4b18      	ldr	r3, [pc, #96]	@ (8001d58 <HAL_GPIO_Init+0x2e0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	4013      	ands	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d1a:	4a0f      	ldr	r2, [pc, #60]	@ (8001d58 <HAL_GPIO_Init+0x2e0>)
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	3301      	adds	r3, #1
 8001d24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f47f aea9 	bne.w	8001a88 <HAL_GPIO_Init+0x10>
  }
}
 8001d36:	bf00      	nop
 8001d38:	bf00      	nop
 8001d3a:	371c      	adds	r7, #28
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40010000 	.word	0x40010000
 8001d4c:	48000400 	.word	0x48000400
 8001d50:	48000800 	.word	0x48000800
 8001d54:	48000c00 	.word	0x48000c00
 8001d58:	40010400 	.word	0x40010400

08001d5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691a      	ldr	r2, [r3, #16]
 8001d6c:	887b      	ldrh	r3, [r7, #2]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d002      	beq.n	8001d7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d74:	2301      	movs	r3, #1
 8001d76:	73fb      	strb	r3, [r7, #15]
 8001d78:	e001      	b.n	8001d7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	807b      	strh	r3, [r7, #2]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d9c:	787b      	ldrb	r3, [r7, #1]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001da2:	887a      	ldrh	r2, [r7, #2]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001da8:	e002      	b.n	8001db0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001daa:	887a      	ldrh	r2, [r7, #2]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dcc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dd2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d102      	bne.n	8001de2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	f001 b823 	b.w	8002e28 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001de2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 817d 	beq.w	80020f2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001df8:	4bbc      	ldr	r3, [pc, #752]	@ (80020ec <HAL_RCC_OscConfig+0x330>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 030c 	and.w	r3, r3, #12
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d00c      	beq.n	8001e1e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e04:	4bb9      	ldr	r3, [pc, #740]	@ (80020ec <HAL_RCC_OscConfig+0x330>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 030c 	and.w	r3, r3, #12
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d15c      	bne.n	8001eca <HAL_RCC_OscConfig+0x10e>
 8001e10:	4bb6      	ldr	r3, [pc, #728]	@ (80020ec <HAL_RCC_OscConfig+0x330>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e1c:	d155      	bne.n	8001eca <HAL_RCC_OscConfig+0x10e>
 8001e1e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e22:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e26:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001e2a:	fa93 f3a3 	rbit	r3, r3
 8001e2e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e32:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e36:	fab3 f383 	clz	r3, r3
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	095b      	lsrs	r3, r3, #5
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d102      	bne.n	8001e50 <HAL_RCC_OscConfig+0x94>
 8001e4a:	4ba8      	ldr	r3, [pc, #672]	@ (80020ec <HAL_RCC_OscConfig+0x330>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	e015      	b.n	8001e7c <HAL_RCC_OscConfig+0xc0>
 8001e50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e54:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e58:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001e5c:	fa93 f3a3 	rbit	r3, r3
 8001e60:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001e64:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e68:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001e6c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001e70:	fa93 f3a3 	rbit	r3, r3
 8001e74:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001e78:	4b9c      	ldr	r3, [pc, #624]	@ (80020ec <HAL_RCC_OscConfig+0x330>)
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e80:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001e84:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001e88:	fa92 f2a2 	rbit	r2, r2
 8001e8c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001e90:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001e94:	fab2 f282 	clz	r2, r2
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	f042 0220 	orr.w	r2, r2, #32
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	f002 021f 	and.w	r2, r2, #31
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eaa:	4013      	ands	r3, r2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f000 811f 	beq.w	80020f0 <HAL_RCC_OscConfig+0x334>
 8001eb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eb6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f040 8116 	bne.w	80020f0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	f000 bfaf 	b.w	8002e28 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ece:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001eda:	d106      	bne.n	8001eea <HAL_RCC_OscConfig+0x12e>
 8001edc:	4b83      	ldr	r3, [pc, #524]	@ (80020ec <HAL_RCC_OscConfig+0x330>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a82      	ldr	r2, [pc, #520]	@ (80020ec <HAL_RCC_OscConfig+0x330>)
 8001ee2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	e036      	b.n	8001f58 <HAL_RCC_OscConfig+0x19c>
 8001eea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10c      	bne.n	8001f14 <HAL_RCC_OscConfig+0x158>
 8001efa:	4b7c      	ldr	r3, [pc, #496]	@ (80020ec <HAL_RCC_OscConfig+0x330>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a7b      	ldr	r2, [pc, #492]	@ (80020ec <HAL_RCC_OscConfig+0x330>)
 8001f00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	4b79      	ldr	r3, [pc, #484]	@ (80020ec <HAL_RCC_OscConfig+0x330>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a78      	ldr	r2, [pc, #480]	@ (80020ec <HAL_RCC_OscConfig+0x330>)
 8001f0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	e021      	b.n	8001f58 <HAL_RCC_OscConfig+0x19c>
 8001f14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f24:	d10c      	bne.n	8001f40 <HAL_RCC_OscConfig+0x184>
 8001f26:	4b71      	ldr	r3, [pc, #452]	@ (80020ec <HAL_RCC_OscConfig+0x330>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a70      	ldr	r2, [pc, #448]	@ (80020ec <HAL_RCC_OscConfig+0x330>)
 8001f2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	4b6e      	ldr	r3, [pc, #440]	@ (80020ec <HAL_RCC_OscConfig+0x330>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a6d      	ldr	r2, [pc, #436]	@ (80020ec <HAL_RCC_OscConfig+0x330>)
 8001f38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	e00b      	b.n	8001f58 <HAL_RCC_OscConfig+0x19c>
 8001f40:	4b6a      	ldr	r3, [pc, #424]	@ (80020ec <HAL_RCC_OscConfig+0x330>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a69      	ldr	r2, [pc, #420]	@ (80020ec <HAL_RCC_OscConfig+0x330>)
 8001f46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f4a:	6013      	str	r3, [r2, #0]
 8001f4c:	4b67      	ldr	r3, [pc, #412]	@ (80020ec <HAL_RCC_OscConfig+0x330>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a66      	ldr	r2, [pc, #408]	@ (80020ec <HAL_RCC_OscConfig+0x330>)
 8001f52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f56:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f58:	4b64      	ldr	r3, [pc, #400]	@ (80020ec <HAL_RCC_OscConfig+0x330>)
 8001f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f5c:	f023 020f 	bic.w	r2, r3, #15
 8001f60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	495f      	ldr	r1, [pc, #380]	@ (80020ec <HAL_RCC_OscConfig+0x330>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d059      	beq.n	8002036 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f82:	f7ff fbc1 	bl	8001708 <HAL_GetTick>
 8001f86:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8a:	e00a      	b.n	8001fa2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f8c:	f7ff fbbc 	bl	8001708 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b64      	cmp	r3, #100	@ 0x64
 8001f9a:	d902      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	f000 bf43 	b.w	8002e28 <HAL_RCC_OscConfig+0x106c>
 8001fa2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fa6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001faa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001fae:	fa93 f3a3 	rbit	r3, r3
 8001fb2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001fb6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fba:	fab3 f383 	clz	r3, r3
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	095b      	lsrs	r3, r3, #5
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d102      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x218>
 8001fce:	4b47      	ldr	r3, [pc, #284]	@ (80020ec <HAL_RCC_OscConfig+0x330>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	e015      	b.n	8002000 <HAL_RCC_OscConfig+0x244>
 8001fd4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fd8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fdc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001fe0:	fa93 f3a3 	rbit	r3, r3
 8001fe4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001fe8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fec:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001ff0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001ff4:	fa93 f3a3 	rbit	r3, r3
 8001ff8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001ffc:	4b3b      	ldr	r3, [pc, #236]	@ (80020ec <HAL_RCC_OscConfig+0x330>)
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002000:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002004:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002008:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800200c:	fa92 f2a2 	rbit	r2, r2
 8002010:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002014:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002018:	fab2 f282 	clz	r2, r2
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	f042 0220 	orr.w	r2, r2, #32
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	f002 021f 	and.w	r2, r2, #31
 8002028:	2101      	movs	r1, #1
 800202a:	fa01 f202 	lsl.w	r2, r1, r2
 800202e:	4013      	ands	r3, r2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0ab      	beq.n	8001f8c <HAL_RCC_OscConfig+0x1d0>
 8002034:	e05d      	b.n	80020f2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002036:	f7ff fb67 	bl	8001708 <HAL_GetTick>
 800203a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203e:	e00a      	b.n	8002056 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002040:	f7ff fb62 	bl	8001708 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b64      	cmp	r3, #100	@ 0x64
 800204e:	d902      	bls.n	8002056 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	f000 bee9 	b.w	8002e28 <HAL_RCC_OscConfig+0x106c>
 8002056:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800205a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002062:	fa93 f3a3 	rbit	r3, r3
 8002066:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800206a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206e:	fab3 f383 	clz	r3, r3
 8002072:	b2db      	uxtb	r3, r3
 8002074:	095b      	lsrs	r3, r3, #5
 8002076:	b2db      	uxtb	r3, r3
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b01      	cmp	r3, #1
 8002080:	d102      	bne.n	8002088 <HAL_RCC_OscConfig+0x2cc>
 8002082:	4b1a      	ldr	r3, [pc, #104]	@ (80020ec <HAL_RCC_OscConfig+0x330>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	e015      	b.n	80020b4 <HAL_RCC_OscConfig+0x2f8>
 8002088:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800208c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002090:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002094:	fa93 f3a3 	rbit	r3, r3
 8002098:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800209c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020a0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80020a4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80020a8:	fa93 f3a3 	rbit	r3, r3
 80020ac:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80020b0:	4b0e      	ldr	r3, [pc, #56]	@ (80020ec <HAL_RCC_OscConfig+0x330>)
 80020b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80020b8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80020bc:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80020c0:	fa92 f2a2 	rbit	r2, r2
 80020c4:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80020c8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80020cc:	fab2 f282 	clz	r2, r2
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	f042 0220 	orr.w	r2, r2, #32
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	f002 021f 	and.w	r2, r2, #31
 80020dc:	2101      	movs	r1, #1
 80020de:	fa01 f202 	lsl.w	r2, r1, r2
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1ab      	bne.n	8002040 <HAL_RCC_OscConfig+0x284>
 80020e8:	e003      	b.n	80020f2 <HAL_RCC_OscConfig+0x336>
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 817d 	beq.w	8002402 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002108:	4ba6      	ldr	r3, [pc, #664]	@ (80023a4 <HAL_RCC_OscConfig+0x5e8>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 030c 	and.w	r3, r3, #12
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00b      	beq.n	800212c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002114:	4ba3      	ldr	r3, [pc, #652]	@ (80023a4 <HAL_RCC_OscConfig+0x5e8>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 030c 	and.w	r3, r3, #12
 800211c:	2b08      	cmp	r3, #8
 800211e:	d172      	bne.n	8002206 <HAL_RCC_OscConfig+0x44a>
 8002120:	4ba0      	ldr	r3, [pc, #640]	@ (80023a4 <HAL_RCC_OscConfig+0x5e8>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d16c      	bne.n	8002206 <HAL_RCC_OscConfig+0x44a>
 800212c:	2302      	movs	r3, #2
 800212e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002132:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002136:	fa93 f3a3 	rbit	r3, r3
 800213a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800213e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002142:	fab3 f383 	clz	r3, r3
 8002146:	b2db      	uxtb	r3, r3
 8002148:	095b      	lsrs	r3, r3, #5
 800214a:	b2db      	uxtb	r3, r3
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b01      	cmp	r3, #1
 8002154:	d102      	bne.n	800215c <HAL_RCC_OscConfig+0x3a0>
 8002156:	4b93      	ldr	r3, [pc, #588]	@ (80023a4 <HAL_RCC_OscConfig+0x5e8>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	e013      	b.n	8002184 <HAL_RCC_OscConfig+0x3c8>
 800215c:	2302      	movs	r3, #2
 800215e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002162:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002166:	fa93 f3a3 	rbit	r3, r3
 800216a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800216e:	2302      	movs	r3, #2
 8002170:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002174:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002178:	fa93 f3a3 	rbit	r3, r3
 800217c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002180:	4b88      	ldr	r3, [pc, #544]	@ (80023a4 <HAL_RCC_OscConfig+0x5e8>)
 8002182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002184:	2202      	movs	r2, #2
 8002186:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800218a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800218e:	fa92 f2a2 	rbit	r2, r2
 8002192:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002196:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800219a:	fab2 f282 	clz	r2, r2
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	f042 0220 	orr.w	r2, r2, #32
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	f002 021f 	and.w	r2, r2, #31
 80021aa:	2101      	movs	r1, #1
 80021ac:	fa01 f202 	lsl.w	r2, r1, r2
 80021b0:	4013      	ands	r3, r2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00a      	beq.n	80021cc <HAL_RCC_OscConfig+0x410>
 80021b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d002      	beq.n	80021cc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	f000 be2e 	b.w	8002e28 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021cc:	4b75      	ldr	r3, [pc, #468]	@ (80023a4 <HAL_RCC_OscConfig+0x5e8>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	21f8      	movs	r1, #248	@ 0xf8
 80021e2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80021ea:	fa91 f1a1 	rbit	r1, r1
 80021ee:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80021f2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80021f6:	fab1 f181 	clz	r1, r1
 80021fa:	b2c9      	uxtb	r1, r1
 80021fc:	408b      	lsls	r3, r1
 80021fe:	4969      	ldr	r1, [pc, #420]	@ (80023a4 <HAL_RCC_OscConfig+0x5e8>)
 8002200:	4313      	orrs	r3, r2
 8002202:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002204:	e0fd      	b.n	8002402 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800220a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 8088 	beq.w	8002328 <HAL_RCC_OscConfig+0x56c>
 8002218:	2301      	movs	r3, #1
 800221a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002222:	fa93 f3a3 	rbit	r3, r3
 8002226:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800222a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800222e:	fab3 f383 	clz	r3, r3
 8002232:	b2db      	uxtb	r3, r3
 8002234:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002238:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	461a      	mov	r2, r3
 8002240:	2301      	movs	r3, #1
 8002242:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002244:	f7ff fa60 	bl	8001708 <HAL_GetTick>
 8002248:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224c:	e00a      	b.n	8002264 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800224e:	f7ff fa5b 	bl	8001708 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d902      	bls.n	8002264 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	f000 bde2 	b.w	8002e28 <HAL_RCC_OscConfig+0x106c>
 8002264:	2302      	movs	r3, #2
 8002266:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800226e:	fa93 f3a3 	rbit	r3, r3
 8002272:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002276:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227a:	fab3 f383 	clz	r3, r3
 800227e:	b2db      	uxtb	r3, r3
 8002280:	095b      	lsrs	r3, r3, #5
 8002282:	b2db      	uxtb	r3, r3
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b01      	cmp	r3, #1
 800228c:	d102      	bne.n	8002294 <HAL_RCC_OscConfig+0x4d8>
 800228e:	4b45      	ldr	r3, [pc, #276]	@ (80023a4 <HAL_RCC_OscConfig+0x5e8>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	e013      	b.n	80022bc <HAL_RCC_OscConfig+0x500>
 8002294:	2302      	movs	r3, #2
 8002296:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800229e:	fa93 f3a3 	rbit	r3, r3
 80022a2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80022a6:	2302      	movs	r3, #2
 80022a8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80022ac:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80022b8:	4b3a      	ldr	r3, [pc, #232]	@ (80023a4 <HAL_RCC_OscConfig+0x5e8>)
 80022ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022bc:	2202      	movs	r2, #2
 80022be:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80022c2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80022c6:	fa92 f2a2 	rbit	r2, r2
 80022ca:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80022ce:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80022d2:	fab2 f282 	clz	r2, r2
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	f042 0220 	orr.w	r2, r2, #32
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	f002 021f 	and.w	r2, r2, #31
 80022e2:	2101      	movs	r1, #1
 80022e4:	fa01 f202 	lsl.w	r2, r1, r2
 80022e8:	4013      	ands	r3, r2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0af      	beq.n	800224e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ee:	4b2d      	ldr	r3, [pc, #180]	@ (80023a4 <HAL_RCC_OscConfig+0x5e8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	21f8      	movs	r1, #248	@ 0xf8
 8002304:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002308:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800230c:	fa91 f1a1 	rbit	r1, r1
 8002310:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002314:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002318:	fab1 f181 	clz	r1, r1
 800231c:	b2c9      	uxtb	r1, r1
 800231e:	408b      	lsls	r3, r1
 8002320:	4920      	ldr	r1, [pc, #128]	@ (80023a4 <HAL_RCC_OscConfig+0x5e8>)
 8002322:	4313      	orrs	r3, r2
 8002324:	600b      	str	r3, [r1, #0]
 8002326:	e06c      	b.n	8002402 <HAL_RCC_OscConfig+0x646>
 8002328:	2301      	movs	r3, #1
 800232a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002332:	fa93 f3a3 	rbit	r3, r3
 8002336:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800233a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800233e:	fab3 f383 	clz	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002348:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	461a      	mov	r2, r3
 8002350:	2300      	movs	r3, #0
 8002352:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002354:	f7ff f9d8 	bl	8001708 <HAL_GetTick>
 8002358:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235c:	e00a      	b.n	8002374 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800235e:	f7ff f9d3 	bl	8001708 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d902      	bls.n	8002374 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	f000 bd5a 	b.w	8002e28 <HAL_RCC_OscConfig+0x106c>
 8002374:	2302      	movs	r3, #2
 8002376:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002386:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800238a:	fab3 f383 	clz	r3, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	095b      	lsrs	r3, r3, #5
 8002392:	b2db      	uxtb	r3, r3
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b01      	cmp	r3, #1
 800239c:	d104      	bne.n	80023a8 <HAL_RCC_OscConfig+0x5ec>
 800239e:	4b01      	ldr	r3, [pc, #4]	@ (80023a4 <HAL_RCC_OscConfig+0x5e8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	e015      	b.n	80023d0 <HAL_RCC_OscConfig+0x614>
 80023a4:	40021000 	.word	0x40021000
 80023a8:	2302      	movs	r3, #2
 80023aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80023b2:	fa93 f3a3 	rbit	r3, r3
 80023b6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80023ba:	2302      	movs	r3, #2
 80023bc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80023c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80023c4:	fa93 f3a3 	rbit	r3, r3
 80023c8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80023cc:	4bc8      	ldr	r3, [pc, #800]	@ (80026f0 <HAL_RCC_OscConfig+0x934>)
 80023ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d0:	2202      	movs	r2, #2
 80023d2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80023d6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80023da:	fa92 f2a2 	rbit	r2, r2
 80023de:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80023e2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80023e6:	fab2 f282 	clz	r2, r2
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	f042 0220 	orr.w	r2, r2, #32
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	f002 021f 	and.w	r2, r2, #31
 80023f6:	2101      	movs	r1, #1
 80023f8:	fa01 f202 	lsl.w	r2, r1, r2
 80023fc:	4013      	ands	r3, r2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1ad      	bne.n	800235e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002402:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002406:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 8110 	beq.w	8002638 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002418:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800241c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d079      	beq.n	800251c <HAL_RCC_OscConfig+0x760>
 8002428:	2301      	movs	r3, #1
 800242a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800243a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800243e:	fab3 f383 	clz	r3, r3
 8002442:	b2db      	uxtb	r3, r3
 8002444:	461a      	mov	r2, r3
 8002446:	4bab      	ldr	r3, [pc, #684]	@ (80026f4 <HAL_RCC_OscConfig+0x938>)
 8002448:	4413      	add	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	461a      	mov	r2, r3
 800244e:	2301      	movs	r3, #1
 8002450:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002452:	f7ff f959 	bl	8001708 <HAL_GetTick>
 8002456:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800245a:	e00a      	b.n	8002472 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800245c:	f7ff f954 	bl	8001708 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d902      	bls.n	8002472 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	f000 bcdb 	b.w	8002e28 <HAL_RCC_OscConfig+0x106c>
 8002472:	2302      	movs	r3, #2
 8002474:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002478:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800247c:	fa93 f3a3 	rbit	r3, r3
 8002480:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002484:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002488:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800248c:	2202      	movs	r2, #2
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002494:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	fa93 f2a3 	rbit	r2, r3
 800249e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80024b0:	2202      	movs	r2, #2
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	fa93 f2a3 	rbit	r2, r3
 80024c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80024ca:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024cc:	4b88      	ldr	r3, [pc, #544]	@ (80026f0 <HAL_RCC_OscConfig+0x934>)
 80024ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80024d8:	2102      	movs	r1, #2
 80024da:	6019      	str	r1, [r3, #0]
 80024dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	fa93 f1a3 	rbit	r1, r3
 80024ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80024f2:	6019      	str	r1, [r3, #0]
  return result;
 80024f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	fab3 f383 	clz	r3, r3
 8002502:	b2db      	uxtb	r3, r3
 8002504:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002508:	b2db      	uxtb	r3, r3
 800250a:	f003 031f 	and.w	r3, r3, #31
 800250e:	2101      	movs	r1, #1
 8002510:	fa01 f303 	lsl.w	r3, r1, r3
 8002514:	4013      	ands	r3, r2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0a0      	beq.n	800245c <HAL_RCC_OscConfig+0x6a0>
 800251a:	e08d      	b.n	8002638 <HAL_RCC_OscConfig+0x87c>
 800251c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002520:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002524:	2201      	movs	r2, #1
 8002526:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002528:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800252c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	fa93 f2a3 	rbit	r2, r3
 8002536:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800253a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800253e:	601a      	str	r2, [r3, #0]
  return result;
 8002540:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002544:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002548:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800254a:	fab3 f383 	clz	r3, r3
 800254e:	b2db      	uxtb	r3, r3
 8002550:	461a      	mov	r2, r3
 8002552:	4b68      	ldr	r3, [pc, #416]	@ (80026f4 <HAL_RCC_OscConfig+0x938>)
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	461a      	mov	r2, r3
 800255a:	2300      	movs	r3, #0
 800255c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7ff f8d3 	bl	8001708 <HAL_GetTick>
 8002562:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002566:	e00a      	b.n	800257e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002568:	f7ff f8ce 	bl	8001708 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d902      	bls.n	800257e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	f000 bc55 	b.w	8002e28 <HAL_RCC_OscConfig+0x106c>
 800257e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002582:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002586:	2202      	movs	r2, #2
 8002588:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800258e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	fa93 f2a3 	rbit	r2, r3
 8002598:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800259c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80025aa:	2202      	movs	r2, #2
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	fa93 f2a3 	rbit	r2, r3
 80025bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80025ce:	2202      	movs	r2, #2
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	fa93 f2a3 	rbit	r2, r3
 80025e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80025e8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ea:	4b41      	ldr	r3, [pc, #260]	@ (80026f0 <HAL_RCC_OscConfig+0x934>)
 80025ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80025f6:	2102      	movs	r1, #2
 80025f8:	6019      	str	r1, [r3, #0]
 80025fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025fe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	fa93 f1a3 	rbit	r1, r3
 8002608:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800260c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002610:	6019      	str	r1, [r3, #0]
  return result;
 8002612:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002616:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	fab3 f383 	clz	r3, r3
 8002620:	b2db      	uxtb	r3, r3
 8002622:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002626:	b2db      	uxtb	r3, r3
 8002628:	f003 031f 	and.w	r3, r3, #31
 800262c:	2101      	movs	r1, #1
 800262e:	fa01 f303 	lsl.w	r3, r1, r3
 8002632:	4013      	ands	r3, r2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d197      	bne.n	8002568 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002638:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 81a1 	beq.w	8002990 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264e:	2300      	movs	r3, #0
 8002650:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002654:	4b26      	ldr	r3, [pc, #152]	@ (80026f0 <HAL_RCC_OscConfig+0x934>)
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d116      	bne.n	800268e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002660:	4b23      	ldr	r3, [pc, #140]	@ (80026f0 <HAL_RCC_OscConfig+0x934>)
 8002662:	69db      	ldr	r3, [r3, #28]
 8002664:	4a22      	ldr	r2, [pc, #136]	@ (80026f0 <HAL_RCC_OscConfig+0x934>)
 8002666:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800266a:	61d3      	str	r3, [r2, #28]
 800266c:	4b20      	ldr	r3, [pc, #128]	@ (80026f0 <HAL_RCC_OscConfig+0x934>)
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002674:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002678:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002682:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002686:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002688:	2301      	movs	r3, #1
 800268a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268e:	4b1a      	ldr	r3, [pc, #104]	@ (80026f8 <HAL_RCC_OscConfig+0x93c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002696:	2b00      	cmp	r3, #0
 8002698:	d11a      	bne.n	80026d0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800269a:	4b17      	ldr	r3, [pc, #92]	@ (80026f8 <HAL_RCC_OscConfig+0x93c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a16      	ldr	r2, [pc, #88]	@ (80026f8 <HAL_RCC_OscConfig+0x93c>)
 80026a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a6:	f7ff f82f 	bl	8001708 <HAL_GetTick>
 80026aa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ae:	e009      	b.n	80026c4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b0:	f7ff f82a 	bl	8001708 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b64      	cmp	r3, #100	@ 0x64
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e3b1      	b.n	8002e28 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c4:	4b0c      	ldr	r3, [pc, #48]	@ (80026f8 <HAL_RCC_OscConfig+0x93c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0ef      	beq.n	80026b0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d10d      	bne.n	80026fc <HAL_RCC_OscConfig+0x940>
 80026e0:	4b03      	ldr	r3, [pc, #12]	@ (80026f0 <HAL_RCC_OscConfig+0x934>)
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	4a02      	ldr	r2, [pc, #8]	@ (80026f0 <HAL_RCC_OscConfig+0x934>)
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	6213      	str	r3, [r2, #32]
 80026ec:	e03c      	b.n	8002768 <HAL_RCC_OscConfig+0x9ac>
 80026ee:	bf00      	nop
 80026f0:	40021000 	.word	0x40021000
 80026f4:	10908120 	.word	0x10908120
 80026f8:	40007000 	.word	0x40007000
 80026fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002700:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10c      	bne.n	8002726 <HAL_RCC_OscConfig+0x96a>
 800270c:	4bc1      	ldr	r3, [pc, #772]	@ (8002a14 <HAL_RCC_OscConfig+0xc58>)
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	4ac0      	ldr	r2, [pc, #768]	@ (8002a14 <HAL_RCC_OscConfig+0xc58>)
 8002712:	f023 0301 	bic.w	r3, r3, #1
 8002716:	6213      	str	r3, [r2, #32]
 8002718:	4bbe      	ldr	r3, [pc, #760]	@ (8002a14 <HAL_RCC_OscConfig+0xc58>)
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	4abd      	ldr	r2, [pc, #756]	@ (8002a14 <HAL_RCC_OscConfig+0xc58>)
 800271e:	f023 0304 	bic.w	r3, r3, #4
 8002722:	6213      	str	r3, [r2, #32]
 8002724:	e020      	b.n	8002768 <HAL_RCC_OscConfig+0x9ac>
 8002726:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800272a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	2b05      	cmp	r3, #5
 8002734:	d10c      	bne.n	8002750 <HAL_RCC_OscConfig+0x994>
 8002736:	4bb7      	ldr	r3, [pc, #732]	@ (8002a14 <HAL_RCC_OscConfig+0xc58>)
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	4ab6      	ldr	r2, [pc, #728]	@ (8002a14 <HAL_RCC_OscConfig+0xc58>)
 800273c:	f043 0304 	orr.w	r3, r3, #4
 8002740:	6213      	str	r3, [r2, #32]
 8002742:	4bb4      	ldr	r3, [pc, #720]	@ (8002a14 <HAL_RCC_OscConfig+0xc58>)
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	4ab3      	ldr	r2, [pc, #716]	@ (8002a14 <HAL_RCC_OscConfig+0xc58>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	6213      	str	r3, [r2, #32]
 800274e:	e00b      	b.n	8002768 <HAL_RCC_OscConfig+0x9ac>
 8002750:	4bb0      	ldr	r3, [pc, #704]	@ (8002a14 <HAL_RCC_OscConfig+0xc58>)
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	4aaf      	ldr	r2, [pc, #700]	@ (8002a14 <HAL_RCC_OscConfig+0xc58>)
 8002756:	f023 0301 	bic.w	r3, r3, #1
 800275a:	6213      	str	r3, [r2, #32]
 800275c:	4bad      	ldr	r3, [pc, #692]	@ (8002a14 <HAL_RCC_OscConfig+0xc58>)
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	4aac      	ldr	r2, [pc, #688]	@ (8002a14 <HAL_RCC_OscConfig+0xc58>)
 8002762:	f023 0304 	bic.w	r3, r3, #4
 8002766:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800276c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 8081 	beq.w	800287c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277a:	f7fe ffc5 	bl	8001708 <HAL_GetTick>
 800277e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002782:	e00b      	b.n	800279c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002784:	f7fe ffc0 	bl	8001708 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002794:	4293      	cmp	r3, r2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e345      	b.n	8002e28 <HAL_RCC_OscConfig+0x106c>
 800279c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80027a4:	2202      	movs	r2, #2
 80027a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	fa93 f2a3 	rbit	r2, r3
 80027b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ba:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80027c8:	2202      	movs	r2, #2
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	fa93 f2a3 	rbit	r2, r3
 80027da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027de:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80027e2:	601a      	str	r2, [r3, #0]
  return result;
 80027e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80027ec:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ee:	fab3 f383 	clz	r3, r3
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	095b      	lsrs	r3, r3, #5
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	f043 0302 	orr.w	r3, r3, #2
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d102      	bne.n	8002808 <HAL_RCC_OscConfig+0xa4c>
 8002802:	4b84      	ldr	r3, [pc, #528]	@ (8002a14 <HAL_RCC_OscConfig+0xc58>)
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	e013      	b.n	8002830 <HAL_RCC_OscConfig+0xa74>
 8002808:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800280c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002810:	2202      	movs	r2, #2
 8002812:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002814:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002818:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	fa93 f2a3 	rbit	r2, r3
 8002822:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002826:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	4b79      	ldr	r3, [pc, #484]	@ (8002a14 <HAL_RCC_OscConfig+0xc58>)
 800282e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002830:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002834:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002838:	2102      	movs	r1, #2
 800283a:	6011      	str	r1, [r2, #0]
 800283c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002840:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002844:	6812      	ldr	r2, [r2, #0]
 8002846:	fa92 f1a2 	rbit	r1, r2
 800284a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800284e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002852:	6011      	str	r1, [r2, #0]
  return result;
 8002854:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002858:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800285c:	6812      	ldr	r2, [r2, #0]
 800285e:	fab2 f282 	clz	r2, r2
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	f002 021f 	and.w	r2, r2, #31
 800286e:	2101      	movs	r1, #1
 8002870:	fa01 f202 	lsl.w	r2, r1, r2
 8002874:	4013      	ands	r3, r2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d084      	beq.n	8002784 <HAL_RCC_OscConfig+0x9c8>
 800287a:	e07f      	b.n	800297c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287c:	f7fe ff44 	bl	8001708 <HAL_GetTick>
 8002880:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002884:	e00b      	b.n	800289e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002886:	f7fe ff3f 	bl	8001708 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002896:	4293      	cmp	r3, r2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e2c4      	b.n	8002e28 <HAL_RCC_OscConfig+0x106c>
 800289e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80028a6:	2202      	movs	r2, #2
 80028a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ae:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	fa93 f2a3 	rbit	r2, r3
 80028b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028bc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80028ca:	2202      	movs	r2, #2
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	fa93 f2a3 	rbit	r2, r3
 80028dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80028e4:	601a      	str	r2, [r3, #0]
  return result;
 80028e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ea:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80028ee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028f0:	fab3 f383 	clz	r3, r3
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	095b      	lsrs	r3, r3, #5
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	f043 0302 	orr.w	r3, r3, #2
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d102      	bne.n	800290a <HAL_RCC_OscConfig+0xb4e>
 8002904:	4b43      	ldr	r3, [pc, #268]	@ (8002a14 <HAL_RCC_OscConfig+0xc58>)
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	e013      	b.n	8002932 <HAL_RCC_OscConfig+0xb76>
 800290a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800290e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002912:	2202      	movs	r2, #2
 8002914:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	fa93 f2a3 	rbit	r2, r3
 8002924:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002928:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	4b39      	ldr	r3, [pc, #228]	@ (8002a14 <HAL_RCC_OscConfig+0xc58>)
 8002930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002932:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002936:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800293a:	2102      	movs	r1, #2
 800293c:	6011      	str	r1, [r2, #0]
 800293e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002942:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002946:	6812      	ldr	r2, [r2, #0]
 8002948:	fa92 f1a2 	rbit	r1, r2
 800294c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002950:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002954:	6011      	str	r1, [r2, #0]
  return result;
 8002956:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800295a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800295e:	6812      	ldr	r2, [r2, #0]
 8002960:	fab2 f282 	clz	r2, r2
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	f002 021f 	and.w	r2, r2, #31
 8002970:	2101      	movs	r1, #1
 8002972:	fa01 f202 	lsl.w	r2, r1, r2
 8002976:	4013      	ands	r3, r2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d184      	bne.n	8002886 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800297c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002980:	2b01      	cmp	r3, #1
 8002982:	d105      	bne.n	8002990 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002984:	4b23      	ldr	r3, [pc, #140]	@ (8002a14 <HAL_RCC_OscConfig+0xc58>)
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	4a22      	ldr	r2, [pc, #136]	@ (8002a14 <HAL_RCC_OscConfig+0xc58>)
 800298a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800298e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002990:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002994:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 8242 	beq.w	8002e26 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002a14 <HAL_RCC_OscConfig+0xc58>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f003 030c 	and.w	r3, r3, #12
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	f000 8213 	beq.w	8002dd6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	2b02      	cmp	r3, #2
 80029be:	f040 8162 	bne.w	8002c86 <HAL_RCC_OscConfig+0xeca>
 80029c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80029ca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80029ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	fa93 f2a3 	rbit	r2, r3
 80029de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80029e6:	601a      	str	r2, [r3, #0]
  return result;
 80029e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ec:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80029f0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029f2:	fab3 f383 	clz	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80029fc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	461a      	mov	r2, r3
 8002a04:	2300      	movs	r3, #0
 8002a06:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a08:	f7fe fe7e 	bl	8001708 <HAL_GetTick>
 8002a0c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a10:	e00c      	b.n	8002a2c <HAL_RCC_OscConfig+0xc70>
 8002a12:	bf00      	nop
 8002a14:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a18:	f7fe fe76 	bl	8001708 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e1fd      	b.n	8002e28 <HAL_RCC_OscConfig+0x106c>
 8002a2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a30:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002a34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a3e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	fa93 f2a3 	rbit	r2, r3
 8002a48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a4c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002a50:	601a      	str	r2, [r3, #0]
  return result;
 8002a52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a56:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002a5a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a5c:	fab3 f383 	clz	r3, r3
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	095b      	lsrs	r3, r3, #5
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	f043 0301 	orr.w	r3, r3, #1
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d102      	bne.n	8002a76 <HAL_RCC_OscConfig+0xcba>
 8002a70:	4bb0      	ldr	r3, [pc, #704]	@ (8002d34 <HAL_RCC_OscConfig+0xf78>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	e027      	b.n	8002ac6 <HAL_RCC_OscConfig+0xd0a>
 8002a76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a7a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002a7e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a88:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	fa93 f2a3 	rbit	r2, r3
 8002a92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a96:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002aa4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aae:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	fa93 f2a3 	rbit	r2, r3
 8002ab8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002abc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	4b9c      	ldr	r3, [pc, #624]	@ (8002d34 <HAL_RCC_OscConfig+0xf78>)
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002aca:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002ace:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002ad2:	6011      	str	r1, [r2, #0]
 8002ad4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ad8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002adc:	6812      	ldr	r2, [r2, #0]
 8002ade:	fa92 f1a2 	rbit	r1, r2
 8002ae2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ae6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002aea:	6011      	str	r1, [r2, #0]
  return result;
 8002aec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002af0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002af4:	6812      	ldr	r2, [r2, #0]
 8002af6:	fab2 f282 	clz	r2, r2
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	f042 0220 	orr.w	r2, r2, #32
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	f002 021f 	and.w	r2, r2, #31
 8002b06:	2101      	movs	r1, #1
 8002b08:	fa01 f202 	lsl.w	r2, r1, r2
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d182      	bne.n	8002a18 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b12:	4b88      	ldr	r3, [pc, #544]	@ (8002d34 <HAL_RCC_OscConfig+0xf78>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002b1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002b26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	430b      	orrs	r3, r1
 8002b34:	497f      	ldr	r1, [pc, #508]	@ (8002d34 <HAL_RCC_OscConfig+0xf78>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	604b      	str	r3, [r1, #4]
 8002b3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b3e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002b42:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b4c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	fa93 f2a3 	rbit	r2, r3
 8002b56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b5a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002b5e:	601a      	str	r2, [r3, #0]
  return result;
 8002b60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b64:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002b68:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b6a:	fab3 f383 	clz	r3, r3
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b74:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b80:	f7fe fdc2 	bl	8001708 <HAL_GetTick>
 8002b84:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b88:	e009      	b.n	8002b9e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b8a:	f7fe fdbd 	bl	8001708 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e144      	b.n	8002e28 <HAL_RCC_OscConfig+0x106c>
 8002b9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002ba6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002baa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	fa93 f2a3 	rbit	r2, r3
 8002bba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bbe:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002bc2:	601a      	str	r2, [r3, #0]
  return result;
 8002bc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002bcc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	095b      	lsrs	r3, r3, #5
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d102      	bne.n	8002be8 <HAL_RCC_OscConfig+0xe2c>
 8002be2:	4b54      	ldr	r3, [pc, #336]	@ (8002d34 <HAL_RCC_OscConfig+0xf78>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	e027      	b.n	8002c38 <HAL_RCC_OscConfig+0xe7c>
 8002be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bec:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002bf0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bf4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bfa:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	fa93 f2a3 	rbit	r2, r3
 8002c04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c08:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c12:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002c16:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c20:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	fa93 f2a3 	rbit	r2, r3
 8002c2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c2e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	4b3f      	ldr	r3, [pc, #252]	@ (8002d34 <HAL_RCC_OscConfig+0xf78>)
 8002c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c38:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c3c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002c40:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002c44:	6011      	str	r1, [r2, #0]
 8002c46:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c4a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002c4e:	6812      	ldr	r2, [r2, #0]
 8002c50:	fa92 f1a2 	rbit	r1, r2
 8002c54:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c58:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002c5c:	6011      	str	r1, [r2, #0]
  return result;
 8002c5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c62:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002c66:	6812      	ldr	r2, [r2, #0]
 8002c68:	fab2 f282 	clz	r2, r2
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	f042 0220 	orr.w	r2, r2, #32
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	f002 021f 	and.w	r2, r2, #31
 8002c78:	2101      	movs	r1, #1
 8002c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d082      	beq.n	8002b8a <HAL_RCC_OscConfig+0xdce>
 8002c84:	e0cf      	b.n	8002e26 <HAL_RCC_OscConfig+0x106a>
 8002c86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c8a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002c8e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c98:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	fa93 f2a3 	rbit	r2, r3
 8002ca2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002caa:	601a      	str	r2, [r3, #0]
  return result;
 8002cac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002cb4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb6:	fab3 f383 	clz	r3, r3
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002cc0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	2300      	movs	r3, #0
 8002cca:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ccc:	f7fe fd1c 	bl	8001708 <HAL_GetTick>
 8002cd0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cd4:	e009      	b.n	8002cea <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd6:	f7fe fd17 	bl	8001708 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e09e      	b.n	8002e28 <HAL_RCC_OscConfig+0x106c>
 8002cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cee:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002cf2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cfc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	fa93 f2a3 	rbit	r2, r3
 8002d06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d0a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002d0e:	601a      	str	r2, [r3, #0]
  return result;
 8002d10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d14:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002d18:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d1a:	fab3 f383 	clz	r3, r3
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	095b      	lsrs	r3, r3, #5
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	f043 0301 	orr.w	r3, r3, #1
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d104      	bne.n	8002d38 <HAL_RCC_OscConfig+0xf7c>
 8002d2e:	4b01      	ldr	r3, [pc, #4]	@ (8002d34 <HAL_RCC_OscConfig+0xf78>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	e029      	b.n	8002d88 <HAL_RCC_OscConfig+0xfcc>
 8002d34:	40021000 	.word	0x40021000
 8002d38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d3c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002d40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d4a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	fa93 f2a3 	rbit	r2, r3
 8002d54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d58:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d62:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002d66:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d70:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	fa93 f2a3 	rbit	r2, r3
 8002d7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d7e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	4b2b      	ldr	r3, [pc, #172]	@ (8002e34 <HAL_RCC_OscConfig+0x1078>)
 8002d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d88:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d8c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002d90:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002d94:	6011      	str	r1, [r2, #0]
 8002d96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d9a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002d9e:	6812      	ldr	r2, [r2, #0]
 8002da0:	fa92 f1a2 	rbit	r1, r2
 8002da4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002da8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002dac:	6011      	str	r1, [r2, #0]
  return result;
 8002dae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002db2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002db6:	6812      	ldr	r2, [r2, #0]
 8002db8:	fab2 f282 	clz	r2, r2
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	f042 0220 	orr.w	r2, r2, #32
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	f002 021f 	and.w	r2, r2, #31
 8002dc8:	2101      	movs	r1, #1
 8002dca:	fa01 f202 	lsl.w	r2, r1, r2
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d180      	bne.n	8002cd6 <HAL_RCC_OscConfig+0xf1a>
 8002dd4:	e027      	b.n	8002e26 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dda:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e01e      	b.n	8002e28 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002dea:	4b12      	ldr	r3, [pc, #72]	@ (8002e34 <HAL_RCC_OscConfig+0x1078>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002df2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002df6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002dfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dfe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d10b      	bne.n	8002e22 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002e0a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002e0e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d001      	beq.n	8002e26 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40021000 	.word	0x40021000

08002e38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b09e      	sub	sp, #120	@ 0x78
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e162      	b.n	8003116 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e50:	4b90      	ldr	r3, [pc, #576]	@ (8003094 <HAL_RCC_ClockConfig+0x25c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d910      	bls.n	8002e80 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5e:	4b8d      	ldr	r3, [pc, #564]	@ (8003094 <HAL_RCC_ClockConfig+0x25c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f023 0207 	bic.w	r2, r3, #7
 8002e66:	498b      	ldr	r1, [pc, #556]	@ (8003094 <HAL_RCC_ClockConfig+0x25c>)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6e:	4b89      	ldr	r3, [pc, #548]	@ (8003094 <HAL_RCC_ClockConfig+0x25c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e14a      	b.n	8003116 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e8c:	4b82      	ldr	r3, [pc, #520]	@ (8003098 <HAL_RCC_ClockConfig+0x260>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	497f      	ldr	r1, [pc, #508]	@ (8003098 <HAL_RCC_ClockConfig+0x260>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 80dc 	beq.w	8003064 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d13c      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xf6>
 8002eb4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002eb8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ebc:	fa93 f3a3 	rbit	r3, r3
 8002ec0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002ec2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec4:	fab3 f383 	clz	r3, r3
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	095b      	lsrs	r3, r3, #5
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d102      	bne.n	8002ede <HAL_RCC_ClockConfig+0xa6>
 8002ed8:	4b6f      	ldr	r3, [pc, #444]	@ (8003098 <HAL_RCC_ClockConfig+0x260>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	e00f      	b.n	8002efe <HAL_RCC_ClockConfig+0xc6>
 8002ede:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ee2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ee6:	fa93 f3a3 	rbit	r3, r3
 8002eea:	667b      	str	r3, [r7, #100]	@ 0x64
 8002eec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ef0:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ef2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ef4:	fa93 f3a3 	rbit	r3, r3
 8002ef8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002efa:	4b67      	ldr	r3, [pc, #412]	@ (8003098 <HAL_RCC_ClockConfig+0x260>)
 8002efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002f02:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002f04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f06:	fa92 f2a2 	rbit	r2, r2
 8002f0a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002f0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002f0e:	fab2 f282 	clz	r2, r2
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	f042 0220 	orr.w	r2, r2, #32
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	f002 021f 	and.w	r2, r2, #31
 8002f1e:	2101      	movs	r1, #1
 8002f20:	fa01 f202 	lsl.w	r2, r1, r2
 8002f24:	4013      	ands	r3, r2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d17b      	bne.n	8003022 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e0f3      	b.n	8003116 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d13c      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0x178>
 8002f36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f3a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f3e:	fa93 f3a3 	rbit	r3, r3
 8002f42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002f44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f46:	fab3 f383 	clz	r3, r3
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	095b      	lsrs	r3, r3, #5
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d102      	bne.n	8002f60 <HAL_RCC_ClockConfig+0x128>
 8002f5a:	4b4f      	ldr	r3, [pc, #316]	@ (8003098 <HAL_RCC_ClockConfig+0x260>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	e00f      	b.n	8002f80 <HAL_RCC_ClockConfig+0x148>
 8002f60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f64:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f68:	fa93 f3a3 	rbit	r3, r3
 8002f6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f72:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f76:	fa93 f3a3 	rbit	r3, r3
 8002f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f7c:	4b46      	ldr	r3, [pc, #280]	@ (8003098 <HAL_RCC_ClockConfig+0x260>)
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f84:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002f86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002f88:	fa92 f2a2 	rbit	r2, r2
 8002f8c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002f8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f90:	fab2 f282 	clz	r2, r2
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	f042 0220 	orr.w	r2, r2, #32
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	f002 021f 	and.w	r2, r2, #31
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d13a      	bne.n	8003022 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e0b2      	b.n	8003116 <HAL_RCC_ClockConfig+0x2de>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fbe:	fab3 f383 	clz	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	095b      	lsrs	r3, r3, #5
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d102      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x1a0>
 8002fd2:	4b31      	ldr	r3, [pc, #196]	@ (8003098 <HAL_RCC_ClockConfig+0x260>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	e00d      	b.n	8002ff4 <HAL_RCC_ClockConfig+0x1bc>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fde:	fa93 f3a3 	rbit	r3, r3
 8002fe2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	623b      	str	r3, [r7, #32]
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	fa93 f3a3 	rbit	r3, r3
 8002fee:	61fb      	str	r3, [r7, #28]
 8002ff0:	4b29      	ldr	r3, [pc, #164]	@ (8003098 <HAL_RCC_ClockConfig+0x260>)
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	61ba      	str	r2, [r7, #24]
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	fa92 f2a2 	rbit	r2, r2
 8002ffe:	617a      	str	r2, [r7, #20]
  return result;
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	fab2 f282 	clz	r2, r2
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	f042 0220 	orr.w	r2, r2, #32
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	f002 021f 	and.w	r2, r2, #31
 8003012:	2101      	movs	r1, #1
 8003014:	fa01 f202 	lsl.w	r2, r1, r2
 8003018:	4013      	ands	r3, r2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e079      	b.n	8003116 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003022:	4b1d      	ldr	r3, [pc, #116]	@ (8003098 <HAL_RCC_ClockConfig+0x260>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f023 0203 	bic.w	r2, r3, #3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	491a      	ldr	r1, [pc, #104]	@ (8003098 <HAL_RCC_ClockConfig+0x260>)
 8003030:	4313      	orrs	r3, r2
 8003032:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003034:	f7fe fb68 	bl	8001708 <HAL_GetTick>
 8003038:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800303a:	e00a      	b.n	8003052 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800303c:	f7fe fb64 	bl	8001708 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800304a:	4293      	cmp	r3, r2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e061      	b.n	8003116 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003052:	4b11      	ldr	r3, [pc, #68]	@ (8003098 <HAL_RCC_ClockConfig+0x260>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f003 020c 	and.w	r2, r3, #12
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	429a      	cmp	r2, r3
 8003062:	d1eb      	bne.n	800303c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003064:	4b0b      	ldr	r3, [pc, #44]	@ (8003094 <HAL_RCC_ClockConfig+0x25c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	429a      	cmp	r2, r3
 8003070:	d214      	bcs.n	800309c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003072:	4b08      	ldr	r3, [pc, #32]	@ (8003094 <HAL_RCC_ClockConfig+0x25c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f023 0207 	bic.w	r2, r3, #7
 800307a:	4906      	ldr	r1, [pc, #24]	@ (8003094 <HAL_RCC_ClockConfig+0x25c>)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	4313      	orrs	r3, r2
 8003080:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003082:	4b04      	ldr	r3, [pc, #16]	@ (8003094 <HAL_RCC_ClockConfig+0x25c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d005      	beq.n	800309c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e040      	b.n	8003116 <HAL_RCC_ClockConfig+0x2de>
 8003094:	40022000 	.word	0x40022000
 8003098:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d008      	beq.n	80030ba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003120 <HAL_RCC_ClockConfig+0x2e8>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	491a      	ldr	r1, [pc, #104]	@ (8003120 <HAL_RCC_ClockConfig+0x2e8>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d009      	beq.n	80030da <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030c6:	4b16      	ldr	r3, [pc, #88]	@ (8003120 <HAL_RCC_ClockConfig+0x2e8>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	4912      	ldr	r1, [pc, #72]	@ (8003120 <HAL_RCC_ClockConfig+0x2e8>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80030da:	f000 f829 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 80030de:	4601      	mov	r1, r0
 80030e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003120 <HAL_RCC_ClockConfig+0x2e8>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030e8:	22f0      	movs	r2, #240	@ 0xf0
 80030ea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	fa92 f2a2 	rbit	r2, r2
 80030f2:	60fa      	str	r2, [r7, #12]
  return result;
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	fab2 f282 	clz	r2, r2
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	40d3      	lsrs	r3, r2
 80030fe:	4a09      	ldr	r2, [pc, #36]	@ (8003124 <HAL_RCC_ClockConfig+0x2ec>)
 8003100:	5cd3      	ldrb	r3, [r2, r3]
 8003102:	fa21 f303 	lsr.w	r3, r1, r3
 8003106:	4a08      	ldr	r2, [pc, #32]	@ (8003128 <HAL_RCC_ClockConfig+0x2f0>)
 8003108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800310a:	4b08      	ldr	r3, [pc, #32]	@ (800312c <HAL_RCC_ClockConfig+0x2f4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f7fe fab6 	bl	8001680 <HAL_InitTick>
  
  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3778      	adds	r7, #120	@ 0x78
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40021000 	.word	0x40021000
 8003124:	08006914 	.word	0x08006914
 8003128:	20000004 	.word	0x20000004
 800312c:	20000008 	.word	0x20000008

08003130 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003130:	b480      	push	{r7}
 8003132:	b08b      	sub	sp, #44	@ 0x2c
 8003134:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003136:	2300      	movs	r3, #0
 8003138:	61fb      	str	r3, [r7, #28]
 800313a:	2300      	movs	r3, #0
 800313c:	61bb      	str	r3, [r7, #24]
 800313e:	2300      	movs	r3, #0
 8003140:	627b      	str	r3, [r7, #36]	@ 0x24
 8003142:	2300      	movs	r3, #0
 8003144:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003146:	2300      	movs	r3, #0
 8003148:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800314a:	4b29      	ldr	r3, [pc, #164]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f003 030c 	and.w	r3, r3, #12
 8003156:	2b04      	cmp	r3, #4
 8003158:	d002      	beq.n	8003160 <HAL_RCC_GetSysClockFreq+0x30>
 800315a:	2b08      	cmp	r3, #8
 800315c:	d003      	beq.n	8003166 <HAL_RCC_GetSysClockFreq+0x36>
 800315e:	e03c      	b.n	80031da <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003160:	4b24      	ldr	r3, [pc, #144]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003162:	623b      	str	r3, [r7, #32]
      break;
 8003164:	e03c      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800316c:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8003170:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	fa92 f2a2 	rbit	r2, r2
 8003178:	607a      	str	r2, [r7, #4]
  return result;
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	fab2 f282 	clz	r2, r2
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	40d3      	lsrs	r3, r2
 8003184:	4a1c      	ldr	r2, [pc, #112]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003186:	5cd3      	ldrb	r3, [r2, r3]
 8003188:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800318a:	4b19      	ldr	r3, [pc, #100]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800318c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	220f      	movs	r2, #15
 8003194:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	fa92 f2a2 	rbit	r2, r2
 800319c:	60fa      	str	r2, [r7, #12]
  return result;
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	fab2 f282 	clz	r2, r2
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	40d3      	lsrs	r3, r2
 80031a8:	4a14      	ldr	r2, [pc, #80]	@ (80031fc <HAL_RCC_GetSysClockFreq+0xcc>)
 80031aa:	5cd3      	ldrb	r3, [r2, r3]
 80031ac:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d008      	beq.n	80031ca <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031b8:	4a0e      	ldr	r2, [pc, #56]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	fb02 f303 	mul.w	r3, r2, r3
 80031c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80031c8:	e004      	b.n	80031d4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	4a0c      	ldr	r2, [pc, #48]	@ (8003200 <HAL_RCC_GetSysClockFreq+0xd0>)
 80031ce:	fb02 f303 	mul.w	r3, r2, r3
 80031d2:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80031d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d6:	623b      	str	r3, [r7, #32]
      break;
 80031d8:	e002      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031da:	4b06      	ldr	r3, [pc, #24]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80031dc:	623b      	str	r3, [r7, #32]
      break;
 80031de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031e0:	6a3b      	ldr	r3, [r7, #32]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	372c      	adds	r7, #44	@ 0x2c
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	40021000 	.word	0x40021000
 80031f4:	007a1200 	.word	0x007a1200
 80031f8:	0800692c 	.word	0x0800692c
 80031fc:	0800693c 	.word	0x0800693c
 8003200:	003d0900 	.word	0x003d0900

08003204 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003208:	4b03      	ldr	r3, [pc, #12]	@ (8003218 <HAL_RCC_GetHCLKFreq+0x14>)
 800320a:	681b      	ldr	r3, [r3, #0]
}
 800320c:	4618      	mov	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	20000004 	.word	0x20000004

0800321c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003222:	f7ff ffef 	bl	8003204 <HAL_RCC_GetHCLKFreq>
 8003226:	4601      	mov	r1, r0
 8003228:	4b0b      	ldr	r3, [pc, #44]	@ (8003258 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003230:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003234:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	fa92 f2a2 	rbit	r2, r2
 800323c:	603a      	str	r2, [r7, #0]
  return result;
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	fab2 f282 	clz	r2, r2
 8003244:	b2d2      	uxtb	r2, r2
 8003246:	40d3      	lsrs	r3, r2
 8003248:	4a04      	ldr	r2, [pc, #16]	@ (800325c <HAL_RCC_GetPCLK1Freq+0x40>)
 800324a:	5cd3      	ldrb	r3, [r2, r3]
 800324c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003250:	4618      	mov	r0, r3
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40021000 	.word	0x40021000
 800325c:	08006924 	.word	0x08006924

08003260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003266:	f7ff ffcd 	bl	8003204 <HAL_RCC_GetHCLKFreq>
 800326a:	4601      	mov	r1, r0
 800326c:	4b0b      	ldr	r3, [pc, #44]	@ (800329c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003274:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003278:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	fa92 f2a2 	rbit	r2, r2
 8003280:	603a      	str	r2, [r7, #0]
  return result;
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	fab2 f282 	clz	r2, r2
 8003288:	b2d2      	uxtb	r2, r2
 800328a:	40d3      	lsrs	r3, r2
 800328c:	4a04      	ldr	r2, [pc, #16]	@ (80032a0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800328e:	5cd3      	ldrb	r3, [r2, r3]
 8003290:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003294:	4618      	mov	r0, r3
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40021000 	.word	0x40021000
 80032a0:	08006924 	.word	0x08006924

080032a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b092      	sub	sp, #72	@ 0x48
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80032b4:	2300      	movs	r3, #0
 80032b6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 80d4 	beq.w	8003470 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032c8:	4b4e      	ldr	r3, [pc, #312]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10e      	bne.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d4:	4b4b      	ldr	r3, [pc, #300]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	4a4a      	ldr	r2, [pc, #296]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032de:	61d3      	str	r3, [r2, #28]
 80032e0:	4b48      	ldr	r3, [pc, #288]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e8:	60bb      	str	r3, [r7, #8]
 80032ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ec:	2301      	movs	r3, #1
 80032ee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f2:	4b45      	ldr	r3, [pc, #276]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d118      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032fe:	4b42      	ldr	r3, [pc, #264]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a41      	ldr	r2, [pc, #260]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003304:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003308:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800330a:	f7fe f9fd 	bl	8001708 <HAL_GetTick>
 800330e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003310:	e008      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003312:	f7fe f9f9 	bl	8001708 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b64      	cmp	r3, #100	@ 0x64
 800331e:	d901      	bls.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e14b      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003324:	4b38      	ldr	r3, [pc, #224]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0f0      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003330:	4b34      	ldr	r3, [pc, #208]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003338:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800333a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 8084 	beq.w	800344a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800334a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800334c:	429a      	cmp	r2, r3
 800334e:	d07c      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003350:	4b2c      	ldr	r3, [pc, #176]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003358:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800335a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800335e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003362:	fa93 f3a3 	rbit	r3, r3
 8003366:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800336a:	fab3 f383 	clz	r3, r3
 800336e:	b2db      	uxtb	r3, r3
 8003370:	461a      	mov	r2, r3
 8003372:	4b26      	ldr	r3, [pc, #152]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003374:	4413      	add	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	461a      	mov	r2, r3
 800337a:	2301      	movs	r3, #1
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003382:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003386:	fa93 f3a3 	rbit	r3, r3
 800338a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800338c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800338e:	fab3 f383 	clz	r3, r3
 8003392:	b2db      	uxtb	r3, r3
 8003394:	461a      	mov	r2, r3
 8003396:	4b1d      	ldr	r3, [pc, #116]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003398:	4413      	add	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	461a      	mov	r2, r3
 800339e:	2300      	movs	r3, #0
 80033a0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033a2:	4a18      	ldr	r2, [pc, #96]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033a6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d04b      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b2:	f7fe f9a9 	bl	8001708 <HAL_GetTick>
 80033b6:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b8:	e00a      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ba:	f7fe f9a5 	bl	8001708 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e0f5      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x318>
 80033d0:	2302      	movs	r3, #2
 80033d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d6:	fa93 f3a3 	rbit	r3, r3
 80033da:	627b      	str	r3, [r7, #36]	@ 0x24
 80033dc:	2302      	movs	r3, #2
 80033de:	623b      	str	r3, [r7, #32]
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	fa93 f3a3 	rbit	r3, r3
 80033e6:	61fb      	str	r3, [r7, #28]
  return result;
 80033e8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ea:	fab3 f383 	clz	r3, r3
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	095b      	lsrs	r3, r3, #5
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	f043 0302 	orr.w	r3, r3, #2
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d108      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80033fe:	4b01      	ldr	r3, [pc, #4]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	e00d      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003404:	40021000 	.word	0x40021000
 8003408:	40007000 	.word	0x40007000
 800340c:	10908100 	.word	0x10908100
 8003410:	2302      	movs	r3, #2
 8003412:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	fa93 f3a3 	rbit	r3, r3
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	4b69      	ldr	r3, [pc, #420]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800341e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003420:	2202      	movs	r2, #2
 8003422:	613a      	str	r2, [r7, #16]
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	fa92 f2a2 	rbit	r2, r2
 800342a:	60fa      	str	r2, [r7, #12]
  return result;
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	fab2 f282 	clz	r2, r2
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	f002 021f 	and.w	r2, r2, #31
 800343e:	2101      	movs	r1, #1
 8003440:	fa01 f202 	lsl.w	r2, r1, r2
 8003444:	4013      	ands	r3, r2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0b7      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800344a:	4b5e      	ldr	r3, [pc, #376]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	495b      	ldr	r1, [pc, #364]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003458:	4313      	orrs	r3, r2
 800345a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800345c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003460:	2b01      	cmp	r3, #1
 8003462:	d105      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003464:	4b57      	ldr	r3, [pc, #348]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	4a56      	ldr	r2, [pc, #344]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800346a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800346e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b00      	cmp	r3, #0
 800347a:	d008      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800347c:	4b51      	ldr	r3, [pc, #324]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800347e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003480:	f023 0203 	bic.w	r2, r3, #3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	494e      	ldr	r1, [pc, #312]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800348a:	4313      	orrs	r3, r2
 800348c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0320 	and.w	r3, r3, #32
 8003496:	2b00      	cmp	r3, #0
 8003498:	d008      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800349a:	4b4a      	ldr	r3, [pc, #296]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349e:	f023 0210 	bic.w	r2, r3, #16
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	4947      	ldr	r1, [pc, #284]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d008      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80034b8:	4b42      	ldr	r3, [pc, #264]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c4:	493f      	ldr	r1, [pc, #252]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d008      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034d6:	4b3b      	ldr	r3, [pc, #236]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034da:	f023 0220 	bic.w	r2, r3, #32
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	4938      	ldr	r1, [pc, #224]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d008      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034f4:	4b33      	ldr	r3, [pc, #204]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	4930      	ldr	r1, [pc, #192]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003502:	4313      	orrs	r3, r2
 8003504:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800350e:	2b00      	cmp	r3, #0
 8003510:	d008      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003512:	4b2c      	ldr	r3, [pc, #176]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	4929      	ldr	r1, [pc, #164]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003520:	4313      	orrs	r3, r2
 8003522:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003530:	4b24      	ldr	r3, [pc, #144]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003534:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	4921      	ldr	r1, [pc, #132]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800353e:	4313      	orrs	r3, r2
 8003540:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d008      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800354e:	4b1d      	ldr	r3, [pc, #116]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003552:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	491a      	ldr	r1, [pc, #104]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800355c:	4313      	orrs	r3, r2
 800355e:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d008      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800356c:	4b15      	ldr	r3, [pc, #84]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800356e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003570:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003578:	4912      	ldr	r1, [pc, #72]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800357a:	4313      	orrs	r3, r2
 800357c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d008      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800358a:	4b0e      	ldr	r3, [pc, #56]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003596:	490b      	ldr	r1, [pc, #44]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003598:	4313      	orrs	r3, r2
 800359a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d008      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80035a8:	4b06      	ldr	r3, [pc, #24]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b4:	4903      	ldr	r1, [pc, #12]	@ (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3748      	adds	r7, #72	@ 0x48
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40021000 	.word	0x40021000

080035c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e049      	b.n	800366e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d106      	bne.n	80035f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7fd fd16 	bl	8001020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3304      	adds	r3, #4
 8003604:	4619      	mov	r1, r3
 8003606:	4610      	mov	r0, r2
 8003608:	f000 fcf0 	bl	8003fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
	...

08003678 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b01      	cmp	r3, #1
 800368a:	d001      	beq.n	8003690 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e033      	b.n	80036f8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a19      	ldr	r2, [pc, #100]	@ (8003704 <HAL_TIM_Base_Start+0x8c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d009      	beq.n	80036b6 <HAL_TIM_Base_Start+0x3e>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036aa:	d004      	beq.n	80036b6 <HAL_TIM_Base_Start+0x3e>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a15      	ldr	r2, [pc, #84]	@ (8003708 <HAL_TIM_Base_Start+0x90>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d115      	bne.n	80036e2 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	4b13      	ldr	r3, [pc, #76]	@ (800370c <HAL_TIM_Base_Start+0x94>)
 80036be:	4013      	ands	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2b06      	cmp	r3, #6
 80036c6:	d015      	beq.n	80036f4 <HAL_TIM_Base_Start+0x7c>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036ce:	d011      	beq.n	80036f4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e0:	e008      	b.n	80036f4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f042 0201 	orr.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	e000      	b.n	80036f6 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	40012c00 	.word	0x40012c00
 8003708:	40014000 	.word	0x40014000
 800370c:	00010007 	.word	0x00010007

08003710 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e049      	b.n	80037b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d106      	bne.n	800373c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7fd fcd0 	bl	80010dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3304      	adds	r3, #4
 800374c:	4619      	mov	r1, r3
 800374e:	4610      	mov	r0, r2
 8003750:	f000 fc4c 	bl	8003fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
	...

080037c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d109      	bne.n	80037e4 <HAL_TIM_PWM_Start+0x24>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b01      	cmp	r3, #1
 80037da:	bf14      	ite	ne
 80037dc:	2301      	movne	r3, #1
 80037de:	2300      	moveq	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	e03c      	b.n	800385e <HAL_TIM_PWM_Start+0x9e>
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d109      	bne.n	80037fe <HAL_TIM_PWM_Start+0x3e>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	bf14      	ite	ne
 80037f6:	2301      	movne	r3, #1
 80037f8:	2300      	moveq	r3, #0
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	e02f      	b.n	800385e <HAL_TIM_PWM_Start+0x9e>
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	2b08      	cmp	r3, #8
 8003802:	d109      	bne.n	8003818 <HAL_TIM_PWM_Start+0x58>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b01      	cmp	r3, #1
 800380e:	bf14      	ite	ne
 8003810:	2301      	movne	r3, #1
 8003812:	2300      	moveq	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	e022      	b.n	800385e <HAL_TIM_PWM_Start+0x9e>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2b0c      	cmp	r3, #12
 800381c:	d109      	bne.n	8003832 <HAL_TIM_PWM_Start+0x72>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b01      	cmp	r3, #1
 8003828:	bf14      	ite	ne
 800382a:	2301      	movne	r3, #1
 800382c:	2300      	moveq	r3, #0
 800382e:	b2db      	uxtb	r3, r3
 8003830:	e015      	b.n	800385e <HAL_TIM_PWM_Start+0x9e>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b10      	cmp	r3, #16
 8003836:	d109      	bne.n	800384c <HAL_TIM_PWM_Start+0x8c>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b01      	cmp	r3, #1
 8003842:	bf14      	ite	ne
 8003844:	2301      	movne	r3, #1
 8003846:	2300      	moveq	r3, #0
 8003848:	b2db      	uxtb	r3, r3
 800384a:	e008      	b.n	800385e <HAL_TIM_PWM_Start+0x9e>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b01      	cmp	r3, #1
 8003856:	bf14      	ite	ne
 8003858:	2301      	movne	r3, #1
 800385a:	2300      	moveq	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e083      	b.n	800396e <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d104      	bne.n	8003876 <HAL_TIM_PWM_Start+0xb6>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003874:	e023      	b.n	80038be <HAL_TIM_PWM_Start+0xfe>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b04      	cmp	r3, #4
 800387a:	d104      	bne.n	8003886 <HAL_TIM_PWM_Start+0xc6>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003884:	e01b      	b.n	80038be <HAL_TIM_PWM_Start+0xfe>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b08      	cmp	r3, #8
 800388a:	d104      	bne.n	8003896 <HAL_TIM_PWM_Start+0xd6>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003894:	e013      	b.n	80038be <HAL_TIM_PWM_Start+0xfe>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	2b0c      	cmp	r3, #12
 800389a:	d104      	bne.n	80038a6 <HAL_TIM_PWM_Start+0xe6>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80038a4:	e00b      	b.n	80038be <HAL_TIM_PWM_Start+0xfe>
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2b10      	cmp	r3, #16
 80038aa:	d104      	bne.n	80038b6 <HAL_TIM_PWM_Start+0xf6>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2202      	movs	r2, #2
 80038b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038b4:	e003      	b.n	80038be <HAL_TIM_PWM_Start+0xfe>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2202      	movs	r2, #2
 80038ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2201      	movs	r2, #1
 80038c4:	6839      	ldr	r1, [r7, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 ff3e 	bl	8004748 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a29      	ldr	r2, [pc, #164]	@ (8003978 <HAL_TIM_PWM_Start+0x1b8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00e      	beq.n	80038f4 <HAL_TIM_PWM_Start+0x134>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a28      	ldr	r2, [pc, #160]	@ (800397c <HAL_TIM_PWM_Start+0x1bc>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d009      	beq.n	80038f4 <HAL_TIM_PWM_Start+0x134>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a26      	ldr	r2, [pc, #152]	@ (8003980 <HAL_TIM_PWM_Start+0x1c0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d004      	beq.n	80038f4 <HAL_TIM_PWM_Start+0x134>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a25      	ldr	r2, [pc, #148]	@ (8003984 <HAL_TIM_PWM_Start+0x1c4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d101      	bne.n	80038f8 <HAL_TIM_PWM_Start+0x138>
 80038f4:	2301      	movs	r3, #1
 80038f6:	e000      	b.n	80038fa <HAL_TIM_PWM_Start+0x13a>
 80038f8:	2300      	movs	r3, #0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d007      	beq.n	800390e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800390c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a19      	ldr	r2, [pc, #100]	@ (8003978 <HAL_TIM_PWM_Start+0x1b8>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d009      	beq.n	800392c <HAL_TIM_PWM_Start+0x16c>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003920:	d004      	beq.n	800392c <HAL_TIM_PWM_Start+0x16c>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a15      	ldr	r2, [pc, #84]	@ (800397c <HAL_TIM_PWM_Start+0x1bc>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d115      	bne.n	8003958 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	4b15      	ldr	r3, [pc, #84]	@ (8003988 <HAL_TIM_PWM_Start+0x1c8>)
 8003934:	4013      	ands	r3, r2
 8003936:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2b06      	cmp	r3, #6
 800393c:	d015      	beq.n	800396a <HAL_TIM_PWM_Start+0x1aa>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003944:	d011      	beq.n	800396a <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f042 0201 	orr.w	r2, r2, #1
 8003954:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003956:	e008      	b.n	800396a <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0201 	orr.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	e000      	b.n	800396c <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800396a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40012c00 	.word	0x40012c00
 800397c:	40014000 	.word	0x40014000
 8003980:	40014400 	.word	0x40014400
 8003984:	40014800 	.word	0x40014800
 8003988:	00010007 	.word	0x00010007

0800398c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d122      	bne.n	80039e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d11b      	bne.n	80039e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f06f 0202 	mvn.w	r2, #2
 80039b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 faed 	bl	8003fae <HAL_TIM_IC_CaptureCallback>
 80039d4:	e005      	b.n	80039e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fadf 	bl	8003f9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 faf0 	bl	8003fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f003 0304 	and.w	r3, r3, #4
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d122      	bne.n	8003a3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b04      	cmp	r3, #4
 8003a02:	d11b      	bne.n	8003a3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f06f 0204 	mvn.w	r2, #4
 8003a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2202      	movs	r2, #2
 8003a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 fac3 	bl	8003fae <HAL_TIM_IC_CaptureCallback>
 8003a28:	e005      	b.n	8003a36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fab5 	bl	8003f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 fac6 	bl	8003fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b08      	cmp	r3, #8
 8003a48:	d122      	bne.n	8003a90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f003 0308 	and.w	r3, r3, #8
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d11b      	bne.n	8003a90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f06f 0208 	mvn.w	r2, #8
 8003a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2204      	movs	r2, #4
 8003a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	f003 0303 	and.w	r3, r3, #3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 fa99 	bl	8003fae <HAL_TIM_IC_CaptureCallback>
 8003a7c:	e005      	b.n	8003a8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 fa8b 	bl	8003f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 fa9c 	bl	8003fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f003 0310 	and.w	r3, r3, #16
 8003a9a:	2b10      	cmp	r3, #16
 8003a9c:	d122      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f003 0310 	and.w	r3, r3, #16
 8003aa8:	2b10      	cmp	r3, #16
 8003aaa:	d11b      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f06f 0210 	mvn.w	r2, #16
 8003ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2208      	movs	r2, #8
 8003aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 fa6f 	bl	8003fae <HAL_TIM_IC_CaptureCallback>
 8003ad0:	e005      	b.n	8003ade <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 fa61 	bl	8003f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 fa72 	bl	8003fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d10e      	bne.n	8003b10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d107      	bne.n	8003b10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f06f 0201 	mvn.w	r2, #1
 8003b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 fa3b 	bl	8003f86 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b1a:	2b80      	cmp	r3, #128	@ 0x80
 8003b1c:	d10e      	bne.n	8003b3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b28:	2b80      	cmp	r3, #128	@ 0x80
 8003b2a:	d107      	bne.n	8003b3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 ff14 	bl	8004964 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b4a:	d10e      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b56:	2b80      	cmp	r3, #128	@ 0x80
 8003b58:	d107      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 ff07 	bl	8004978 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b74:	2b40      	cmp	r3, #64	@ 0x40
 8003b76:	d10e      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b82:	2b40      	cmp	r3, #64	@ 0x40
 8003b84:	d107      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 fa20 	bl	8003fd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	d10e      	bne.n	8003bc2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b20      	cmp	r3, #32
 8003bb0:	d107      	bne.n	8003bc2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f06f 0220 	mvn.w	r2, #32
 8003bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fec7 	bl	8004950 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d101      	bne.n	8003bea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003be6:	2302      	movs	r3, #2
 8003be8:	e0ff      	b.n	8003dea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b14      	cmp	r3, #20
 8003bf6:	f200 80f0 	bhi.w	8003dda <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8003c00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c00:	08003c55 	.word	0x08003c55
 8003c04:	08003ddb 	.word	0x08003ddb
 8003c08:	08003ddb 	.word	0x08003ddb
 8003c0c:	08003ddb 	.word	0x08003ddb
 8003c10:	08003c95 	.word	0x08003c95
 8003c14:	08003ddb 	.word	0x08003ddb
 8003c18:	08003ddb 	.word	0x08003ddb
 8003c1c:	08003ddb 	.word	0x08003ddb
 8003c20:	08003cd7 	.word	0x08003cd7
 8003c24:	08003ddb 	.word	0x08003ddb
 8003c28:	08003ddb 	.word	0x08003ddb
 8003c2c:	08003ddb 	.word	0x08003ddb
 8003c30:	08003d17 	.word	0x08003d17
 8003c34:	08003ddb 	.word	0x08003ddb
 8003c38:	08003ddb 	.word	0x08003ddb
 8003c3c:	08003ddb 	.word	0x08003ddb
 8003c40:	08003d59 	.word	0x08003d59
 8003c44:	08003ddb 	.word	0x08003ddb
 8003c48:	08003ddb 	.word	0x08003ddb
 8003c4c:	08003ddb 	.word	0x08003ddb
 8003c50:	08003d99 	.word	0x08003d99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68b9      	ldr	r1, [r7, #8]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fa34 	bl	80040c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	699a      	ldr	r2, [r3, #24]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0208 	orr.w	r2, r2, #8
 8003c6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699a      	ldr	r2, [r3, #24]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0204 	bic.w	r2, r2, #4
 8003c7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6999      	ldr	r1, [r3, #24]
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	691a      	ldr	r2, [r3, #16]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	619a      	str	r2, [r3, #24]
      break;
 8003c92:	e0a5      	b.n	8003de0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68b9      	ldr	r1, [r7, #8]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fa9a 	bl	80041d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699a      	ldr	r2, [r3, #24]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699a      	ldr	r2, [r3, #24]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6999      	ldr	r1, [r3, #24]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	021a      	lsls	r2, r3, #8
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	619a      	str	r2, [r3, #24]
      break;
 8003cd4:	e084      	b.n	8003de0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68b9      	ldr	r1, [r7, #8]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 faf9 	bl	80042d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	69da      	ldr	r2, [r3, #28]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f042 0208 	orr.w	r2, r2, #8
 8003cf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69da      	ldr	r2, [r3, #28]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0204 	bic.w	r2, r2, #4
 8003d00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69d9      	ldr	r1, [r3, #28]
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	61da      	str	r2, [r3, #28]
      break;
 8003d14:	e064      	b.n	8003de0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68b9      	ldr	r1, [r7, #8]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 fb57 	bl	80043d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	69da      	ldr	r2, [r3, #28]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	69da      	ldr	r2, [r3, #28]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	69d9      	ldr	r1, [r3, #28]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	021a      	lsls	r2, r3, #8
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	61da      	str	r2, [r3, #28]
      break;
 8003d56:	e043      	b.n	8003de0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68b9      	ldr	r1, [r7, #8]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 fb9a 	bl	8004498 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f042 0208 	orr.w	r2, r2, #8
 8003d72:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0204 	bic.w	r2, r2, #4
 8003d82:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	691a      	ldr	r2, [r3, #16]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003d96:	e023      	b.n	8003de0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68b9      	ldr	r1, [r7, #8]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 fbd8 	bl	8004554 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003db2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dc2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	021a      	lsls	r2, r3, #8
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003dd8:	e002      	b.n	8003de0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	75fb      	strb	r3, [r7, #23]
      break;
 8003dde:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop

08003df4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d101      	bne.n	8003e10 <HAL_TIM_ConfigClockSource+0x1c>
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	e0b6      	b.n	8003f7e <HAL_TIM_ConfigClockSource+0x18a>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e2e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003e32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e4c:	d03e      	beq.n	8003ecc <HAL_TIM_ConfigClockSource+0xd8>
 8003e4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e52:	f200 8087 	bhi.w	8003f64 <HAL_TIM_ConfigClockSource+0x170>
 8003e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e5a:	f000 8086 	beq.w	8003f6a <HAL_TIM_ConfigClockSource+0x176>
 8003e5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e62:	d87f      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x170>
 8003e64:	2b70      	cmp	r3, #112	@ 0x70
 8003e66:	d01a      	beq.n	8003e9e <HAL_TIM_ConfigClockSource+0xaa>
 8003e68:	2b70      	cmp	r3, #112	@ 0x70
 8003e6a:	d87b      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x170>
 8003e6c:	2b60      	cmp	r3, #96	@ 0x60
 8003e6e:	d050      	beq.n	8003f12 <HAL_TIM_ConfigClockSource+0x11e>
 8003e70:	2b60      	cmp	r3, #96	@ 0x60
 8003e72:	d877      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x170>
 8003e74:	2b50      	cmp	r3, #80	@ 0x50
 8003e76:	d03c      	beq.n	8003ef2 <HAL_TIM_ConfigClockSource+0xfe>
 8003e78:	2b50      	cmp	r3, #80	@ 0x50
 8003e7a:	d873      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x170>
 8003e7c:	2b40      	cmp	r3, #64	@ 0x40
 8003e7e:	d058      	beq.n	8003f32 <HAL_TIM_ConfigClockSource+0x13e>
 8003e80:	2b40      	cmp	r3, #64	@ 0x40
 8003e82:	d86f      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x170>
 8003e84:	2b30      	cmp	r3, #48	@ 0x30
 8003e86:	d064      	beq.n	8003f52 <HAL_TIM_ConfigClockSource+0x15e>
 8003e88:	2b30      	cmp	r3, #48	@ 0x30
 8003e8a:	d86b      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x170>
 8003e8c:	2b20      	cmp	r3, #32
 8003e8e:	d060      	beq.n	8003f52 <HAL_TIM_ConfigClockSource+0x15e>
 8003e90:	2b20      	cmp	r3, #32
 8003e92:	d867      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x170>
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d05c      	beq.n	8003f52 <HAL_TIM_ConfigClockSource+0x15e>
 8003e98:	2b10      	cmp	r3, #16
 8003e9a:	d05a      	beq.n	8003f52 <HAL_TIM_ConfigClockSource+0x15e>
 8003e9c:	e062      	b.n	8003f64 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003eae:	f000 fc2b 	bl	8004708 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003ec0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	609a      	str	r2, [r3, #8]
      break;
 8003eca:	e04f      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003edc:	f000 fc14 	bl	8004708 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003eee:	609a      	str	r2, [r3, #8]
      break;
 8003ef0:	e03c      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003efe:	461a      	mov	r2, r3
 8003f00:	f000 fb88 	bl	8004614 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2150      	movs	r1, #80	@ 0x50
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 fbe1 	bl	80046d2 <TIM_ITRx_SetConfig>
      break;
 8003f10:	e02c      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f1e:	461a      	mov	r2, r3
 8003f20:	f000 fba7 	bl	8004672 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2160      	movs	r1, #96	@ 0x60
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 fbd1 	bl	80046d2 <TIM_ITRx_SetConfig>
      break;
 8003f30:	e01c      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f3e:	461a      	mov	r2, r3
 8003f40:	f000 fb68 	bl	8004614 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2140      	movs	r1, #64	@ 0x40
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 fbc1 	bl	80046d2 <TIM_ITRx_SetConfig>
      break;
 8003f50:	e00c      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	f000 fbb8 	bl	80046d2 <TIM_ITRx_SetConfig>
      break;
 8003f62:	e003      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	73fb      	strb	r3, [r7, #15]
      break;
 8003f68:	e000      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003f6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
	...

08003fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a2e      	ldr	r2, [pc, #184]	@ (80040b8 <TIM_Base_SetConfig+0xcc>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d003      	beq.n	800400c <TIM_Base_SetConfig+0x20>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800400a:	d108      	bne.n	800401e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004012:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a25      	ldr	r2, [pc, #148]	@ (80040b8 <TIM_Base_SetConfig+0xcc>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d00f      	beq.n	8004046 <TIM_Base_SetConfig+0x5a>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800402c:	d00b      	beq.n	8004046 <TIM_Base_SetConfig+0x5a>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a22      	ldr	r2, [pc, #136]	@ (80040bc <TIM_Base_SetConfig+0xd0>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d007      	beq.n	8004046 <TIM_Base_SetConfig+0x5a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a21      	ldr	r2, [pc, #132]	@ (80040c0 <TIM_Base_SetConfig+0xd4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d003      	beq.n	8004046 <TIM_Base_SetConfig+0x5a>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a20      	ldr	r2, [pc, #128]	@ (80040c4 <TIM_Base_SetConfig+0xd8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d108      	bne.n	8004058 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800404c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	4313      	orrs	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	4313      	orrs	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a0e      	ldr	r2, [pc, #56]	@ (80040b8 <TIM_Base_SetConfig+0xcc>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d00b      	beq.n	800409c <TIM_Base_SetConfig+0xb0>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a0d      	ldr	r2, [pc, #52]	@ (80040bc <TIM_Base_SetConfig+0xd0>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d007      	beq.n	800409c <TIM_Base_SetConfig+0xb0>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a0c      	ldr	r2, [pc, #48]	@ (80040c0 <TIM_Base_SetConfig+0xd4>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d003      	beq.n	800409c <TIM_Base_SetConfig+0xb0>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a0b      	ldr	r2, [pc, #44]	@ (80040c4 <TIM_Base_SetConfig+0xd8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d103      	bne.n	80040a4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	691a      	ldr	r2, [r3, #16]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	615a      	str	r2, [r3, #20]
}
 80040aa:	bf00      	nop
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40012c00 	.word	0x40012c00
 80040bc:	40014000 	.word	0x40014000
 80040c0:	40014400 	.word	0x40014400
 80040c4:	40014800 	.word	0x40014800

080040c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	f023 0201 	bic.w	r2, r3, #1
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f023 0303 	bic.w	r3, r3, #3
 8004102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	4313      	orrs	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f023 0302 	bic.w	r3, r3, #2
 8004114:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	4313      	orrs	r3, r2
 800411e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a28      	ldr	r2, [pc, #160]	@ (80041c4 <TIM_OC1_SetConfig+0xfc>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d00b      	beq.n	8004140 <TIM_OC1_SetConfig+0x78>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a27      	ldr	r2, [pc, #156]	@ (80041c8 <TIM_OC1_SetConfig+0x100>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d007      	beq.n	8004140 <TIM_OC1_SetConfig+0x78>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a26      	ldr	r2, [pc, #152]	@ (80041cc <TIM_OC1_SetConfig+0x104>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d003      	beq.n	8004140 <TIM_OC1_SetConfig+0x78>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a25      	ldr	r2, [pc, #148]	@ (80041d0 <TIM_OC1_SetConfig+0x108>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d10c      	bne.n	800415a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f023 0308 	bic.w	r3, r3, #8
 8004146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	4313      	orrs	r3, r2
 8004150:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f023 0304 	bic.w	r3, r3, #4
 8004158:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a19      	ldr	r2, [pc, #100]	@ (80041c4 <TIM_OC1_SetConfig+0xfc>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d00b      	beq.n	800417a <TIM_OC1_SetConfig+0xb2>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a18      	ldr	r2, [pc, #96]	@ (80041c8 <TIM_OC1_SetConfig+0x100>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d007      	beq.n	800417a <TIM_OC1_SetConfig+0xb2>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a17      	ldr	r2, [pc, #92]	@ (80041cc <TIM_OC1_SetConfig+0x104>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d003      	beq.n	800417a <TIM_OC1_SetConfig+0xb2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a16      	ldr	r2, [pc, #88]	@ (80041d0 <TIM_OC1_SetConfig+0x108>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d111      	bne.n	800419e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004180:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004188:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	4313      	orrs	r3, r2
 8004192:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	621a      	str	r2, [r3, #32]
}
 80041b8:	bf00      	nop
 80041ba:	371c      	adds	r7, #28
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	40012c00 	.word	0x40012c00
 80041c8:	40014000 	.word	0x40014000
 80041cc:	40014400 	.word	0x40014400
 80041d0:	40014800 	.word	0x40014800

080041d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	f023 0210 	bic.w	r2, r3, #16
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004202:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800420e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4313      	orrs	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f023 0320 	bic.w	r3, r3, #32
 8004222:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	011b      	lsls	r3, r3, #4
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	4313      	orrs	r3, r2
 800422e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a24      	ldr	r2, [pc, #144]	@ (80042c4 <TIM_OC2_SetConfig+0xf0>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d10d      	bne.n	8004254 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800423e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	011b      	lsls	r3, r3, #4
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	4313      	orrs	r3, r2
 800424a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004252:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a1b      	ldr	r2, [pc, #108]	@ (80042c4 <TIM_OC2_SetConfig+0xf0>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d00b      	beq.n	8004274 <TIM_OC2_SetConfig+0xa0>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a1a      	ldr	r2, [pc, #104]	@ (80042c8 <TIM_OC2_SetConfig+0xf4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d007      	beq.n	8004274 <TIM_OC2_SetConfig+0xa0>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a19      	ldr	r2, [pc, #100]	@ (80042cc <TIM_OC2_SetConfig+0xf8>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d003      	beq.n	8004274 <TIM_OC2_SetConfig+0xa0>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a18      	ldr	r2, [pc, #96]	@ (80042d0 <TIM_OC2_SetConfig+0xfc>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d113      	bne.n	800429c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800427a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004282:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	4313      	orrs	r3, r2
 800429a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	621a      	str	r2, [r3, #32]
}
 80042b6:	bf00      	nop
 80042b8:	371c      	adds	r7, #28
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	40012c00 	.word	0x40012c00
 80042c8:	40014000 	.word	0x40014000
 80042cc:	40014400 	.word	0x40014400
 80042d0:	40014800 	.word	0x40014800

080042d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b087      	sub	sp, #28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f023 0303 	bic.w	r3, r3, #3
 800430e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	4313      	orrs	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	021b      	lsls	r3, r3, #8
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	4313      	orrs	r3, r2
 800432c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a23      	ldr	r2, [pc, #140]	@ (80043c0 <TIM_OC3_SetConfig+0xec>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d10d      	bne.n	8004352 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800433c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	021b      	lsls	r3, r3, #8
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	4313      	orrs	r3, r2
 8004348:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004350:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a1a      	ldr	r2, [pc, #104]	@ (80043c0 <TIM_OC3_SetConfig+0xec>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d00b      	beq.n	8004372 <TIM_OC3_SetConfig+0x9e>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a19      	ldr	r2, [pc, #100]	@ (80043c4 <TIM_OC3_SetConfig+0xf0>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d007      	beq.n	8004372 <TIM_OC3_SetConfig+0x9e>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a18      	ldr	r2, [pc, #96]	@ (80043c8 <TIM_OC3_SetConfig+0xf4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d003      	beq.n	8004372 <TIM_OC3_SetConfig+0x9e>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a17      	ldr	r2, [pc, #92]	@ (80043cc <TIM_OC3_SetConfig+0xf8>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d113      	bne.n	800439a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	4313      	orrs	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	4313      	orrs	r3, r2
 8004398:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	621a      	str	r2, [r3, #32]
}
 80043b4:	bf00      	nop
 80043b6:	371c      	adds	r7, #28
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	40012c00 	.word	0x40012c00
 80043c4:	40014000 	.word	0x40014000
 80043c8:	40014400 	.word	0x40014400
 80043cc:	40014800 	.word	0x40014800

080043d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b087      	sub	sp, #28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800440a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	021b      	lsls	r3, r3, #8
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	4313      	orrs	r3, r2
 8004416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800441e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	031b      	lsls	r3, r3, #12
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	4313      	orrs	r3, r2
 800442a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a16      	ldr	r2, [pc, #88]	@ (8004488 <TIM_OC4_SetConfig+0xb8>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d00b      	beq.n	800444c <TIM_OC4_SetConfig+0x7c>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a15      	ldr	r2, [pc, #84]	@ (800448c <TIM_OC4_SetConfig+0xbc>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d007      	beq.n	800444c <TIM_OC4_SetConfig+0x7c>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a14      	ldr	r2, [pc, #80]	@ (8004490 <TIM_OC4_SetConfig+0xc0>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d003      	beq.n	800444c <TIM_OC4_SetConfig+0x7c>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a13      	ldr	r2, [pc, #76]	@ (8004494 <TIM_OC4_SetConfig+0xc4>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d109      	bne.n	8004460 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004452:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	019b      	lsls	r3, r3, #6
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	4313      	orrs	r3, r2
 800445e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	621a      	str	r2, [r3, #32]
}
 800447a:	bf00      	nop
 800447c:	371c      	adds	r7, #28
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	40012c00 	.word	0x40012c00
 800448c:	40014000 	.word	0x40014000
 8004490:	40014400 	.word	0x40014400
 8004494:	40014800 	.word	0x40014800

08004498 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80044dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	041b      	lsls	r3, r3, #16
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a15      	ldr	r2, [pc, #84]	@ (8004544 <TIM_OC5_SetConfig+0xac>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d00b      	beq.n	800450a <TIM_OC5_SetConfig+0x72>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a14      	ldr	r2, [pc, #80]	@ (8004548 <TIM_OC5_SetConfig+0xb0>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d007      	beq.n	800450a <TIM_OC5_SetConfig+0x72>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a13      	ldr	r2, [pc, #76]	@ (800454c <TIM_OC5_SetConfig+0xb4>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d003      	beq.n	800450a <TIM_OC5_SetConfig+0x72>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a12      	ldr	r2, [pc, #72]	@ (8004550 <TIM_OC5_SetConfig+0xb8>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d109      	bne.n	800451e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004510:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	021b      	lsls	r3, r3, #8
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	4313      	orrs	r3, r2
 800451c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	621a      	str	r2, [r3, #32]
}
 8004538:	bf00      	nop
 800453a:	371c      	adds	r7, #28
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	40012c00 	.word	0x40012c00
 8004548:	40014000 	.word	0x40014000
 800454c:	40014400 	.word	0x40014400
 8004550:	40014800 	.word	0x40014800

08004554 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800457a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004582:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	021b      	lsls	r3, r3, #8
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	4313      	orrs	r3, r2
 8004592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800459a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	051b      	lsls	r3, r3, #20
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a16      	ldr	r2, [pc, #88]	@ (8004604 <TIM_OC6_SetConfig+0xb0>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d00b      	beq.n	80045c8 <TIM_OC6_SetConfig+0x74>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a15      	ldr	r2, [pc, #84]	@ (8004608 <TIM_OC6_SetConfig+0xb4>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d007      	beq.n	80045c8 <TIM_OC6_SetConfig+0x74>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a14      	ldr	r2, [pc, #80]	@ (800460c <TIM_OC6_SetConfig+0xb8>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d003      	beq.n	80045c8 <TIM_OC6_SetConfig+0x74>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a13      	ldr	r2, [pc, #76]	@ (8004610 <TIM_OC6_SetConfig+0xbc>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d109      	bne.n	80045dc <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	029b      	lsls	r3, r3, #10
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	4313      	orrs	r3, r2
 80045da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	621a      	str	r2, [r3, #32]
}
 80045f6:	bf00      	nop
 80045f8:	371c      	adds	r7, #28
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	40012c00 	.word	0x40012c00
 8004608:	40014000 	.word	0x40014000
 800460c:	40014400 	.word	0x40014400
 8004610:	40014800 	.word	0x40014800

08004614 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004614:	b480      	push	{r7}
 8004616:	b087      	sub	sp, #28
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	f023 0201 	bic.w	r2, r3, #1
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800463e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	011b      	lsls	r3, r3, #4
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	4313      	orrs	r3, r2
 8004648:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f023 030a 	bic.w	r3, r3, #10
 8004650:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	4313      	orrs	r3, r2
 8004658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	621a      	str	r2, [r3, #32]
}
 8004666:	bf00      	nop
 8004668:	371c      	adds	r7, #28
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004672:	b480      	push	{r7}
 8004674:	b087      	sub	sp, #28
 8004676:	af00      	add	r7, sp, #0
 8004678:	60f8      	str	r0, [r7, #12]
 800467a:	60b9      	str	r1, [r7, #8]
 800467c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	f023 0210 	bic.w	r2, r3, #16
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800469c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	031b      	lsls	r3, r3, #12
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80046ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	621a      	str	r2, [r3, #32]
}
 80046c6:	bf00      	nop
 80046c8:	371c      	adds	r7, #28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b085      	sub	sp, #20
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
 80046da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	f043 0307 	orr.w	r3, r3, #7
 80046f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	609a      	str	r2, [r3, #8]
}
 80046fc:	bf00      	nop
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004708:	b480      	push	{r7}
 800470a:	b087      	sub	sp, #28
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
 8004714:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004722:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	021a      	lsls	r2, r3, #8
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	431a      	orrs	r2, r3
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	4313      	orrs	r3, r2
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	4313      	orrs	r3, r2
 8004734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	609a      	str	r2, [r3, #8]
}
 800473c:	bf00      	nop
 800473e:	371c      	adds	r7, #28
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004748:	b480      	push	{r7}
 800474a:	b087      	sub	sp, #28
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f003 031f 	and.w	r3, r3, #31
 800475a:	2201      	movs	r2, #1
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6a1a      	ldr	r2, [r3, #32]
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	43db      	mvns	r3, r3
 800476a:	401a      	ands	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6a1a      	ldr	r2, [r3, #32]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f003 031f 	and.w	r3, r3, #31
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	fa01 f303 	lsl.w	r3, r1, r3
 8004780:	431a      	orrs	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	621a      	str	r2, [r3, #32]
}
 8004786:	bf00      	nop
 8004788:	371c      	adds	r7, #28
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
	...

08004794 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d101      	bne.n	80047ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047a8:	2302      	movs	r3, #2
 80047aa:	e04f      	b.n	800484c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a21      	ldr	r2, [pc, #132]	@ (8004858 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d108      	bne.n	80047e8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80047dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a14      	ldr	r2, [pc, #80]	@ (8004858 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d009      	beq.n	8004820 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004814:	d004      	beq.n	8004820 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a10      	ldr	r2, [pc, #64]	@ (800485c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d10c      	bne.n	800483a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004826:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	4313      	orrs	r3, r2
 8004830:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	40012c00 	.word	0x40012c00
 800485c:	40014000 	.word	0x40014000

08004860 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004874:	2b01      	cmp	r3, #1
 8004876:	d101      	bne.n	800487c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004878:	2302      	movs	r3, #2
 800487a:	e060      	b.n	800493e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	4313      	orrs	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	041b      	lsls	r3, r3, #16
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a14      	ldr	r2, [pc, #80]	@ (800494c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d115      	bne.n	800492c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490a:	051b      	lsls	r3, r3, #20
 800490c:	4313      	orrs	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	4313      	orrs	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	40012c00 	.word	0x40012c00

08004950 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e040      	b.n	8004a20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d106      	bne.n	80049b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7fc fc6e 	bl	8001290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2224      	movs	r2, #36	@ 0x24
 80049b8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0201 	bic.w	r2, r2, #1
 80049c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 fbfc 	bl	80051c8 <UART_SetConfig>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d101      	bne.n	80049da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e022      	b.n	8004a20 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d002      	beq.n	80049e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 fd26 	bl	8005434 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80049f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689a      	ldr	r2, [r3, #8]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0201 	orr.w	r2, r2, #1
 8004a16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 fdad 	bl	8005578 <UART_CheckIdleState>
 8004a1e:	4603      	mov	r3, r0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08a      	sub	sp, #40	@ 0x28
 8004a2c:	af02      	add	r7, sp, #8
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	603b      	str	r3, [r7, #0]
 8004a34:	4613      	mov	r3, r2
 8004a36:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a3e:	2b20      	cmp	r3, #32
 8004a40:	f040 80b6 	bne.w	8004bb0 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <HAL_UART_Receive+0x28>
 8004a4a:	88fb      	ldrh	r3, [r7, #6]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e0ae      	b.n	8004bb2 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2222      	movs	r2, #34	@ 0x22
 8004a60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a6a:	f7fc fe4d 	bl	8001708 <HAL_GetTick>
 8004a6e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	88fa      	ldrh	r2, [r7, #6]
 8004a74:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	88fa      	ldrh	r2, [r7, #6]
 8004a7c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a88:	d10e      	bne.n	8004aa8 <HAL_UART_Receive+0x80>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d105      	bne.n	8004a9e <HAL_UART_Receive+0x76>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004a98:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a9c:	e02d      	b.n	8004afa <HAL_UART_Receive+0xd2>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	22ff      	movs	r2, #255	@ 0xff
 8004aa2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004aa6:	e028      	b.n	8004afa <HAL_UART_Receive+0xd2>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10d      	bne.n	8004acc <HAL_UART_Receive+0xa4>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d104      	bne.n	8004ac2 <HAL_UART_Receive+0x9a>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	22ff      	movs	r2, #255	@ 0xff
 8004abc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004ac0:	e01b      	b.n	8004afa <HAL_UART_Receive+0xd2>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	227f      	movs	r2, #127	@ 0x7f
 8004ac6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004aca:	e016      	b.n	8004afa <HAL_UART_Receive+0xd2>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ad4:	d10d      	bne.n	8004af2 <HAL_UART_Receive+0xca>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d104      	bne.n	8004ae8 <HAL_UART_Receive+0xc0>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	227f      	movs	r2, #127	@ 0x7f
 8004ae2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004ae6:	e008      	b.n	8004afa <HAL_UART_Receive+0xd2>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	223f      	movs	r2, #63	@ 0x3f
 8004aec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004af0:	e003      	b.n	8004afa <HAL_UART_Receive+0xd2>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004b00:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b0a:	d108      	bne.n	8004b1e <HAL_UART_Receive+0xf6>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d104      	bne.n	8004b1e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004b14:	2300      	movs	r3, #0
 8004b16:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	61bb      	str	r3, [r7, #24]
 8004b1c:	e003      	b.n	8004b26 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b22:	2300      	movs	r3, #0
 8004b24:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004b26:	e037      	b.n	8004b98 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	2120      	movs	r1, #32
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 fdc8 	bl	80056c8 <UART_WaitOnFlagUntilTimeout>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d005      	beq.n	8004b4a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2220      	movs	r2, #32
 8004b42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e033      	b.n	8004bb2 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10c      	bne.n	8004b6a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	8a7b      	ldrh	r3, [r7, #18]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	3302      	adds	r3, #2
 8004b66:	61bb      	str	r3, [r7, #24]
 8004b68:	e00d      	b.n	8004b86 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	8a7b      	ldrh	r3, [r7, #18]
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	4013      	ands	r3, r2
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	3301      	adds	r3, #1
 8004b84:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1c1      	bne.n	8004b28 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8004bac:	2300      	movs	r3, #0
 8004bae:	e000      	b.n	8004bb2 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004bb0:	2302      	movs	r3, #2
  }
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3720      	adds	r7, #32
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
	...

08004bbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b0ba      	sub	sp, #232	@ 0xe8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004be2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004be6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004bea:	4013      	ands	r3, r2
 8004bec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004bf0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d115      	bne.n	8004c24 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bfc:	f003 0320 	and.w	r3, r3, #32
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00f      	beq.n	8004c24 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c08:	f003 0320 	and.w	r3, r3, #32
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d009      	beq.n	8004c24 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 82ab 	beq.w	8005170 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	4798      	blx	r3
      }
      return;
 8004c22:	e2a5      	b.n	8005170 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004c24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 8117 	beq.w	8004e5c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004c2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d106      	bne.n	8004c48 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004c3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004c3e:	4b85      	ldr	r3, [pc, #532]	@ (8004e54 <HAL_UART_IRQHandler+0x298>)
 8004c40:	4013      	ands	r3, r2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 810a 	beq.w	8004e5c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d011      	beq.n	8004c78 <HAL_UART_IRQHandler+0xbc>
 8004c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00b      	beq.n	8004c78 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2201      	movs	r2, #1
 8004c66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c6e:	f043 0201 	orr.w	r2, r3, #1
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d011      	beq.n	8004ca8 <HAL_UART_IRQHandler+0xec>
 8004c84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00b      	beq.n	8004ca8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2202      	movs	r2, #2
 8004c96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c9e:	f043 0204 	orr.w	r2, r3, #4
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d011      	beq.n	8004cd8 <HAL_UART_IRQHandler+0x11c>
 8004cb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00b      	beq.n	8004cd8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2204      	movs	r2, #4
 8004cc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cce:	f043 0202 	orr.w	r2, r3, #2
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cdc:	f003 0308 	and.w	r3, r3, #8
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d017      	beq.n	8004d14 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ce8:	f003 0320 	and.w	r3, r3, #32
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d105      	bne.n	8004cfc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004cf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cf4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00b      	beq.n	8004d14 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2208      	movs	r2, #8
 8004d02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d0a:	f043 0208 	orr.w	r2, r3, #8
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d012      	beq.n	8004d46 <HAL_UART_IRQHandler+0x18a>
 8004d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00c      	beq.n	8004d46 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d3c:	f043 0220 	orr.w	r2, r3, #32
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 8211 	beq.w	8005174 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d56:	f003 0320 	and.w	r3, r3, #32
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00d      	beq.n	8004d7a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d62:	f003 0320 	and.w	r3, r3, #32
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d007      	beq.n	8004d7a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d80:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d8e:	2b40      	cmp	r3, #64	@ 0x40
 8004d90:	d005      	beq.n	8004d9e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d96:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d04f      	beq.n	8004e3e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 fcf9 	bl	8005796 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dae:	2b40      	cmp	r3, #64	@ 0x40
 8004db0:	d141      	bne.n	8004e36 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3308      	adds	r3, #8
 8004db8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004dc0:	e853 3f00 	ldrex	r3, [r3]
 8004dc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004dc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004dcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	3308      	adds	r3, #8
 8004dda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004dde:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004de2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004dea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004dee:	e841 2300 	strex	r3, r2, [r1]
 8004df2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004df6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1d9      	bne.n	8004db2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d013      	beq.n	8004e2e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e0a:	4a13      	ldr	r2, [pc, #76]	@ (8004e58 <HAL_UART_IRQHandler+0x29c>)
 8004e0c:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fc fdf2 	bl	80019fc <HAL_DMA_Abort_IT>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d017      	beq.n	8004e4e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004e28:	4610      	mov	r0, r2
 8004e2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e2c:	e00f      	b.n	8004e4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f9b4 	bl	800519c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e34:	e00b      	b.n	8004e4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f9b0 	bl	800519c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e3c:	e007      	b.n	8004e4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f9ac 	bl	800519c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004e4c:	e192      	b.n	8005174 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e4e:	bf00      	nop
    return;
 8004e50:	e190      	b.n	8005174 <HAL_UART_IRQHandler+0x5b8>
 8004e52:	bf00      	nop
 8004e54:	04000120 	.word	0x04000120
 8004e58:	0800585f 	.word	0x0800585f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	f040 814b 	bne.w	80050fc <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e6a:	f003 0310 	and.w	r3, r3, #16
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f000 8144 	beq.w	80050fc <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e78:	f003 0310 	and.w	r3, r3, #16
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 813d 	beq.w	80050fc <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2210      	movs	r2, #16
 8004e88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e94:	2b40      	cmp	r3, #64	@ 0x40
 8004e96:	f040 80b5 	bne.w	8005004 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ea6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 8164 	beq.w	8005178 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004eb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	f080 815c 	bcs.w	8005178 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ec6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	2b20      	cmp	r3, #32
 8004ed2:	f000 8086 	beq.w	8004fe2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ede:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ee2:	e853 3f00 	ldrex	r3, [r3]
 8004ee6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004eea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004eee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ef2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	461a      	mov	r2, r3
 8004efc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004f00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004f04:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f08:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f0c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f10:	e841 2300 	strex	r3, r2, [r1]
 8004f14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1da      	bne.n	8004ed6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3308      	adds	r3, #8
 8004f26:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f2a:	e853 3f00 	ldrex	r3, [r3]
 8004f2e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004f30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f32:	f023 0301 	bic.w	r3, r3, #1
 8004f36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	3308      	adds	r3, #8
 8004f40:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f44:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004f48:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004f4c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004f50:	e841 2300 	strex	r3, r2, [r1]
 8004f54:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004f56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1e1      	bne.n	8004f20 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	3308      	adds	r3, #8
 8004f62:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f66:	e853 3f00 	ldrex	r3, [r3]
 8004f6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004f6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	3308      	adds	r3, #8
 8004f7c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004f80:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004f82:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f84:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004f86:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004f88:	e841 2300 	strex	r3, r2, [r1]
 8004f8c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004f8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1e3      	bne.n	8004f5c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004faa:	e853 3f00 	ldrex	r3, [r3]
 8004fae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004fb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fb2:	f023 0310 	bic.w	r3, r3, #16
 8004fb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004fc4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004fc6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004fca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004fcc:	e841 2300 	strex	r3, r2, [r1]
 8004fd0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004fd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1e4      	bne.n	8004fa2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7fc fcd4 	bl	800198a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 f8d7 	bl	80051b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005002:	e0b9      	b.n	8005178 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005010:	b29b      	uxth	r3, r3
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800501e:	b29b      	uxth	r3, r3
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 80ab 	beq.w	800517c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005026:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800502a:	2b00      	cmp	r3, #0
 800502c:	f000 80a6 	beq.w	800517c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005038:	e853 3f00 	ldrex	r3, [r3]
 800503c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800503e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005040:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005044:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	461a      	mov	r2, r3
 800504e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005052:	647b      	str	r3, [r7, #68]	@ 0x44
 8005054:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005056:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005058:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800505a:	e841 2300 	strex	r3, r2, [r1]
 800505e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1e4      	bne.n	8005030 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3308      	adds	r3, #8
 800506c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005070:	e853 3f00 	ldrex	r3, [r3]
 8005074:	623b      	str	r3, [r7, #32]
   return(result);
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	f023 0301 	bic.w	r3, r3, #1
 800507c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	3308      	adds	r3, #8
 8005086:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800508a:	633a      	str	r2, [r7, #48]	@ 0x30
 800508c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005090:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005092:	e841 2300 	strex	r3, r2, [r1]
 8005096:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1e3      	bne.n	8005066 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2220      	movs	r2, #32
 80050a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	e853 3f00 	ldrex	r3, [r3]
 80050be:	60fb      	str	r3, [r7, #12]
   return(result);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f023 0310 	bic.w	r3, r3, #16
 80050c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	461a      	mov	r2, r3
 80050d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80050d4:	61fb      	str	r3, [r7, #28]
 80050d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d8:	69b9      	ldr	r1, [r7, #24]
 80050da:	69fa      	ldr	r2, [r7, #28]
 80050dc:	e841 2300 	strex	r3, r2, [r1]
 80050e0:	617b      	str	r3, [r7, #20]
   return(result);
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1e4      	bne.n	80050b2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2202      	movs	r2, #2
 80050ec:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80050f2:	4619      	mov	r1, r3
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f85b 	bl	80051b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80050fa:	e03f      	b.n	800517c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80050fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005100:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00e      	beq.n	8005126 <HAL_UART_IRQHandler+0x56a>
 8005108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800510c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d008      	beq.n	8005126 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800511c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 fbdd 	bl	80058de <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005124:	e02d      	b.n	8005182 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800512a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00e      	beq.n	8005150 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800513a:	2b00      	cmp	r3, #0
 800513c:	d008      	beq.n	8005150 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005142:	2b00      	cmp	r3, #0
 8005144:	d01c      	beq.n	8005180 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	4798      	blx	r3
    }
    return;
 800514e:	e017      	b.n	8005180 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005158:	2b00      	cmp	r3, #0
 800515a:	d012      	beq.n	8005182 <HAL_UART_IRQHandler+0x5c6>
 800515c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00c      	beq.n	8005182 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 fb8e 	bl	800588a <UART_EndTransmit_IT>
    return;
 800516e:	e008      	b.n	8005182 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005170:	bf00      	nop
 8005172:	e006      	b.n	8005182 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005174:	bf00      	nop
 8005176:	e004      	b.n	8005182 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005178:	bf00      	nop
 800517a:	e002      	b.n	8005182 <HAL_UART_IRQHandler+0x5c6>
      return;
 800517c:	bf00      	nop
 800517e:	e000      	b.n	8005182 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005180:	bf00      	nop
  }

}
 8005182:	37e8      	adds	r7, #232	@ 0xe8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	460b      	mov	r3, r1
 80051ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b088      	sub	sp, #32
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051d0:	2300      	movs	r3, #0
 80051d2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689a      	ldr	r2, [r3, #8]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	431a      	orrs	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	431a      	orrs	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	4b8a      	ldr	r3, [pc, #552]	@ (800541c <UART_SetConfig+0x254>)
 80051f4:	4013      	ands	r3, r2
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	6812      	ldr	r2, [r2, #0]
 80051fa:	6979      	ldr	r1, [r7, #20]
 80051fc:	430b      	orrs	r3, r1
 80051fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68da      	ldr	r2, [r3, #12]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	4313      	orrs	r3, r2
 8005224:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	430a      	orrs	r2, r1
 8005238:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a78      	ldr	r2, [pc, #480]	@ (8005420 <UART_SetConfig+0x258>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d120      	bne.n	8005286 <UART_SetConfig+0xbe>
 8005244:	4b77      	ldr	r3, [pc, #476]	@ (8005424 <UART_SetConfig+0x25c>)
 8005246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005248:	f003 0303 	and.w	r3, r3, #3
 800524c:	2b03      	cmp	r3, #3
 800524e:	d817      	bhi.n	8005280 <UART_SetConfig+0xb8>
 8005250:	a201      	add	r2, pc, #4	@ (adr r2, 8005258 <UART_SetConfig+0x90>)
 8005252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005256:	bf00      	nop
 8005258:	08005269 	.word	0x08005269
 800525c:	08005275 	.word	0x08005275
 8005260:	0800527b 	.word	0x0800527b
 8005264:	0800526f 	.word	0x0800526f
 8005268:	2300      	movs	r3, #0
 800526a:	77fb      	strb	r3, [r7, #31]
 800526c:	e01d      	b.n	80052aa <UART_SetConfig+0xe2>
 800526e:	2302      	movs	r3, #2
 8005270:	77fb      	strb	r3, [r7, #31]
 8005272:	e01a      	b.n	80052aa <UART_SetConfig+0xe2>
 8005274:	2304      	movs	r3, #4
 8005276:	77fb      	strb	r3, [r7, #31]
 8005278:	e017      	b.n	80052aa <UART_SetConfig+0xe2>
 800527a:	2308      	movs	r3, #8
 800527c:	77fb      	strb	r3, [r7, #31]
 800527e:	e014      	b.n	80052aa <UART_SetConfig+0xe2>
 8005280:	2310      	movs	r3, #16
 8005282:	77fb      	strb	r3, [r7, #31]
 8005284:	e011      	b.n	80052aa <UART_SetConfig+0xe2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a67      	ldr	r2, [pc, #412]	@ (8005428 <UART_SetConfig+0x260>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d102      	bne.n	8005296 <UART_SetConfig+0xce>
 8005290:	2300      	movs	r3, #0
 8005292:	77fb      	strb	r3, [r7, #31]
 8005294:	e009      	b.n	80052aa <UART_SetConfig+0xe2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a64      	ldr	r2, [pc, #400]	@ (800542c <UART_SetConfig+0x264>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d102      	bne.n	80052a6 <UART_SetConfig+0xde>
 80052a0:	2300      	movs	r3, #0
 80052a2:	77fb      	strb	r3, [r7, #31]
 80052a4:	e001      	b.n	80052aa <UART_SetConfig+0xe2>
 80052a6:	2310      	movs	r3, #16
 80052a8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052b2:	d15a      	bne.n	800536a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80052b4:	7ffb      	ldrb	r3, [r7, #31]
 80052b6:	2b08      	cmp	r3, #8
 80052b8:	d827      	bhi.n	800530a <UART_SetConfig+0x142>
 80052ba:	a201      	add	r2, pc, #4	@ (adr r2, 80052c0 <UART_SetConfig+0xf8>)
 80052bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c0:	080052e5 	.word	0x080052e5
 80052c4:	080052ed 	.word	0x080052ed
 80052c8:	080052f5 	.word	0x080052f5
 80052cc:	0800530b 	.word	0x0800530b
 80052d0:	080052fb 	.word	0x080052fb
 80052d4:	0800530b 	.word	0x0800530b
 80052d8:	0800530b 	.word	0x0800530b
 80052dc:	0800530b 	.word	0x0800530b
 80052e0:	08005303 	.word	0x08005303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052e4:	f7fd ff9a 	bl	800321c <HAL_RCC_GetPCLK1Freq>
 80052e8:	61b8      	str	r0, [r7, #24]
        break;
 80052ea:	e013      	b.n	8005314 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052ec:	f7fd ffb8 	bl	8003260 <HAL_RCC_GetPCLK2Freq>
 80052f0:	61b8      	str	r0, [r7, #24]
        break;
 80052f2:	e00f      	b.n	8005314 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052f4:	4b4e      	ldr	r3, [pc, #312]	@ (8005430 <UART_SetConfig+0x268>)
 80052f6:	61bb      	str	r3, [r7, #24]
        break;
 80052f8:	e00c      	b.n	8005314 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052fa:	f7fd ff19 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 80052fe:	61b8      	str	r0, [r7, #24]
        break;
 8005300:	e008      	b.n	8005314 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005306:	61bb      	str	r3, [r7, #24]
        break;
 8005308:	e004      	b.n	8005314 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800530a:	2300      	movs	r3, #0
 800530c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	77bb      	strb	r3, [r7, #30]
        break;
 8005312:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d074      	beq.n	8005404 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	005a      	lsls	r2, r3, #1
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	085b      	lsrs	r3, r3, #1
 8005324:	441a      	add	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	fbb2 f3f3 	udiv	r3, r2, r3
 800532e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	2b0f      	cmp	r3, #15
 8005334:	d916      	bls.n	8005364 <UART_SetConfig+0x19c>
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800533c:	d212      	bcs.n	8005364 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	b29b      	uxth	r3, r3
 8005342:	f023 030f 	bic.w	r3, r3, #15
 8005346:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	085b      	lsrs	r3, r3, #1
 800534c:	b29b      	uxth	r3, r3
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	b29a      	uxth	r2, r3
 8005354:	89fb      	ldrh	r3, [r7, #14]
 8005356:	4313      	orrs	r3, r2
 8005358:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	89fa      	ldrh	r2, [r7, #14]
 8005360:	60da      	str	r2, [r3, #12]
 8005362:	e04f      	b.n	8005404 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	77bb      	strb	r3, [r7, #30]
 8005368:	e04c      	b.n	8005404 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800536a:	7ffb      	ldrb	r3, [r7, #31]
 800536c:	2b08      	cmp	r3, #8
 800536e:	d828      	bhi.n	80053c2 <UART_SetConfig+0x1fa>
 8005370:	a201      	add	r2, pc, #4	@ (adr r2, 8005378 <UART_SetConfig+0x1b0>)
 8005372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005376:	bf00      	nop
 8005378:	0800539d 	.word	0x0800539d
 800537c:	080053a5 	.word	0x080053a5
 8005380:	080053ad 	.word	0x080053ad
 8005384:	080053c3 	.word	0x080053c3
 8005388:	080053b3 	.word	0x080053b3
 800538c:	080053c3 	.word	0x080053c3
 8005390:	080053c3 	.word	0x080053c3
 8005394:	080053c3 	.word	0x080053c3
 8005398:	080053bb 	.word	0x080053bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800539c:	f7fd ff3e 	bl	800321c <HAL_RCC_GetPCLK1Freq>
 80053a0:	61b8      	str	r0, [r7, #24]
        break;
 80053a2:	e013      	b.n	80053cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053a4:	f7fd ff5c 	bl	8003260 <HAL_RCC_GetPCLK2Freq>
 80053a8:	61b8      	str	r0, [r7, #24]
        break;
 80053aa:	e00f      	b.n	80053cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053ac:	4b20      	ldr	r3, [pc, #128]	@ (8005430 <UART_SetConfig+0x268>)
 80053ae:	61bb      	str	r3, [r7, #24]
        break;
 80053b0:	e00c      	b.n	80053cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053b2:	f7fd febd 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 80053b6:	61b8      	str	r0, [r7, #24]
        break;
 80053b8:	e008      	b.n	80053cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053be:	61bb      	str	r3, [r7, #24]
        break;
 80053c0:	e004      	b.n	80053cc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	77bb      	strb	r3, [r7, #30]
        break;
 80053ca:	bf00      	nop
    }

    if (pclk != 0U)
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d018      	beq.n	8005404 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	085a      	lsrs	r2, r3, #1
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	441a      	add	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	2b0f      	cmp	r3, #15
 80053ea:	d909      	bls.n	8005400 <UART_SetConfig+0x238>
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053f2:	d205      	bcs.n	8005400 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	60da      	str	r2, [r3, #12]
 80053fe:	e001      	b.n	8005404 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005410:	7fbb      	ldrb	r3, [r7, #30]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3720      	adds	r7, #32
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	efff69f3 	.word	0xefff69f3
 8005420:	40013800 	.word	0x40013800
 8005424:	40021000 	.word	0x40021000
 8005428:	40004400 	.word	0x40004400
 800542c:	40004800 	.word	0x40004800
 8005430:	007a1200 	.word	0x007a1200

08005434 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00a      	beq.n	800545e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00a      	beq.n	8005480 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005484:	f003 0304 	and.w	r3, r3, #4
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00a      	beq.n	80054a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	430a      	orrs	r2, r1
 80054a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a6:	f003 0308 	and.w	r3, r3, #8
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00a      	beq.n	80054c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c8:	f003 0310 	and.w	r3, r3, #16
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00a      	beq.n	80054e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ea:	f003 0320 	and.w	r3, r3, #32
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00a      	beq.n	8005508 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800550c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005510:	2b00      	cmp	r3, #0
 8005512:	d01a      	beq.n	800554a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005532:	d10a      	bne.n	800554a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00a      	beq.n	800556c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	430a      	orrs	r2, r1
 800556a:	605a      	str	r2, [r3, #4]
  }
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b098      	sub	sp, #96	@ 0x60
 800557c:	af02      	add	r7, sp, #8
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005588:	f7fc f8be 	bl	8001708 <HAL_GetTick>
 800558c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0308 	and.w	r3, r3, #8
 8005598:	2b08      	cmp	r3, #8
 800559a:	d12e      	bne.n	80055fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800559c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055a0:	9300      	str	r3, [sp, #0]
 80055a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055a4:	2200      	movs	r2, #0
 80055a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f88c 	bl	80056c8 <UART_WaitOnFlagUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d021      	beq.n	80055fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055be:	e853 3f00 	ldrex	r3, [r3]
 80055c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80055c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	461a      	mov	r2, r3
 80055d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80055d6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055dc:	e841 2300 	strex	r3, r2, [r1]
 80055e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1e6      	bne.n	80055b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2220      	movs	r2, #32
 80055ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e062      	b.n	80056c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0304 	and.w	r3, r3, #4
 8005604:	2b04      	cmp	r3, #4
 8005606:	d149      	bne.n	800569c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005608:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800560c:	9300      	str	r3, [sp, #0]
 800560e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005610:	2200      	movs	r2, #0
 8005612:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f856 	bl	80056c8 <UART_WaitOnFlagUntilTimeout>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d03c      	beq.n	800569c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562a:	e853 3f00 	ldrex	r3, [r3]
 800562e:	623b      	str	r3, [r7, #32]
   return(result);
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005636:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	461a      	mov	r2, r3
 800563e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005640:	633b      	str	r3, [r7, #48]	@ 0x30
 8005642:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005644:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005646:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005648:	e841 2300 	strex	r3, r2, [r1]
 800564c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800564e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1e6      	bne.n	8005622 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3308      	adds	r3, #8
 800565a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	e853 3f00 	ldrex	r3, [r3]
 8005662:	60fb      	str	r3, [r7, #12]
   return(result);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f023 0301 	bic.w	r3, r3, #1
 800566a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	3308      	adds	r3, #8
 8005672:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005674:	61fa      	str	r2, [r7, #28]
 8005676:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005678:	69b9      	ldr	r1, [r7, #24]
 800567a:	69fa      	ldr	r2, [r7, #28]
 800567c:	e841 2300 	strex	r3, r2, [r1]
 8005680:	617b      	str	r3, [r7, #20]
   return(result);
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1e5      	bne.n	8005654 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2220      	movs	r2, #32
 800568c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e011      	b.n	80056c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2220      	movs	r2, #32
 80056a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2220      	movs	r2, #32
 80056a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3758      	adds	r7, #88	@ 0x58
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	603b      	str	r3, [r7, #0]
 80056d4:	4613      	mov	r3, r2
 80056d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056d8:	e049      	b.n	800576e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e0:	d045      	beq.n	800576e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056e2:	f7fc f811 	bl	8001708 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d302      	bcc.n	80056f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d101      	bne.n	80056fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e048      	b.n	800578e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0304 	and.w	r3, r3, #4
 8005706:	2b00      	cmp	r3, #0
 8005708:	d031      	beq.n	800576e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	f003 0308 	and.w	r3, r3, #8
 8005714:	2b08      	cmp	r3, #8
 8005716:	d110      	bne.n	800573a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2208      	movs	r2, #8
 800571e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f000 f838 	bl	8005796 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2208      	movs	r2, #8
 800572a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e029      	b.n	800578e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69db      	ldr	r3, [r3, #28]
 8005740:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005744:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005748:	d111      	bne.n	800576e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005752:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f000 f81e 	bl	8005796 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2220      	movs	r2, #32
 800575e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e00f      	b.n	800578e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	69da      	ldr	r2, [r3, #28]
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	4013      	ands	r3, r2
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	429a      	cmp	r2, r3
 800577c:	bf0c      	ite	eq
 800577e:	2301      	moveq	r3, #1
 8005780:	2300      	movne	r3, #0
 8005782:	b2db      	uxtb	r3, r3
 8005784:	461a      	mov	r2, r3
 8005786:	79fb      	ldrb	r3, [r7, #7]
 8005788:	429a      	cmp	r2, r3
 800578a:	d0a6      	beq.n	80056da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005796:	b480      	push	{r7}
 8005798:	b095      	sub	sp, #84	@ 0x54
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057a6:	e853 3f00 	ldrex	r3, [r3]
 80057aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	461a      	mov	r2, r3
 80057ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80057be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057c4:	e841 2300 	strex	r3, r2, [r1]
 80057c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1e6      	bne.n	800579e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	3308      	adds	r3, #8
 80057d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d8:	6a3b      	ldr	r3, [r7, #32]
 80057da:	e853 3f00 	ldrex	r3, [r3]
 80057de:	61fb      	str	r3, [r7, #28]
   return(result);
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	f023 0301 	bic.w	r3, r3, #1
 80057e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	3308      	adds	r3, #8
 80057ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057f8:	e841 2300 	strex	r3, r2, [r1]
 80057fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1e5      	bne.n	80057d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005808:	2b01      	cmp	r3, #1
 800580a:	d118      	bne.n	800583e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	e853 3f00 	ldrex	r3, [r3]
 8005818:	60bb      	str	r3, [r7, #8]
   return(result);
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	f023 0310 	bic.w	r3, r3, #16
 8005820:	647b      	str	r3, [r7, #68]	@ 0x44
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	461a      	mov	r2, r3
 8005828:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800582a:	61bb      	str	r3, [r7, #24]
 800582c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582e:	6979      	ldr	r1, [r7, #20]
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	e841 2300 	strex	r3, r2, [r1]
 8005836:	613b      	str	r3, [r7, #16]
   return(result);
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1e6      	bne.n	800580c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2220      	movs	r2, #32
 8005842:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005852:	bf00      	nop
 8005854:	3754      	adds	r7, #84	@ 0x54
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b084      	sub	sp, #16
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f7ff fc8d 	bl	800519c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005882:	bf00      	nop
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b088      	sub	sp, #32
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	e853 3f00 	ldrex	r3, [r3]
 800589e:	60bb      	str	r3, [r7, #8]
   return(result);
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058a6:	61fb      	str	r3, [r7, #28]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	461a      	mov	r2, r3
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	61bb      	str	r3, [r7, #24]
 80058b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b4:	6979      	ldr	r1, [r7, #20]
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	e841 2300 	strex	r3, r2, [r1]
 80058bc:	613b      	str	r3, [r7, #16]
   return(result);
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1e6      	bne.n	8005892 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2220      	movs	r2, #32
 80058c8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f7ff fc59 	bl	8005188 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058d6:	bf00      	nop
 80058d8:	3720      	adds	r7, #32
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80058de:	b480      	push	{r7}
 80058e0:	b083      	sub	sp, #12
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80058e6:	bf00      	nop
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
	...

080058f4 <srand>:
 80058f4:	b538      	push	{r3, r4, r5, lr}
 80058f6:	4b10      	ldr	r3, [pc, #64]	@ (8005938 <srand+0x44>)
 80058f8:	681d      	ldr	r5, [r3, #0]
 80058fa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80058fc:	4604      	mov	r4, r0
 80058fe:	b9b3      	cbnz	r3, 800592e <srand+0x3a>
 8005900:	2018      	movs	r0, #24
 8005902:	f000 fa3d 	bl	8005d80 <malloc>
 8005906:	4602      	mov	r2, r0
 8005908:	6328      	str	r0, [r5, #48]	@ 0x30
 800590a:	b920      	cbnz	r0, 8005916 <srand+0x22>
 800590c:	4b0b      	ldr	r3, [pc, #44]	@ (800593c <srand+0x48>)
 800590e:	480c      	ldr	r0, [pc, #48]	@ (8005940 <srand+0x4c>)
 8005910:	2146      	movs	r1, #70	@ 0x46
 8005912:	f000 f9cd 	bl	8005cb0 <__assert_func>
 8005916:	490b      	ldr	r1, [pc, #44]	@ (8005944 <srand+0x50>)
 8005918:	4b0b      	ldr	r3, [pc, #44]	@ (8005948 <srand+0x54>)
 800591a:	e9c0 1300 	strd	r1, r3, [r0]
 800591e:	4b0b      	ldr	r3, [pc, #44]	@ (800594c <srand+0x58>)
 8005920:	6083      	str	r3, [r0, #8]
 8005922:	230b      	movs	r3, #11
 8005924:	8183      	strh	r3, [r0, #12]
 8005926:	2100      	movs	r1, #0
 8005928:	2001      	movs	r0, #1
 800592a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800592e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005930:	2200      	movs	r2, #0
 8005932:	611c      	str	r4, [r3, #16]
 8005934:	615a      	str	r2, [r3, #20]
 8005936:	bd38      	pop	{r3, r4, r5, pc}
 8005938:	2000001c 	.word	0x2000001c
 800593c:	0800694c 	.word	0x0800694c
 8005940:	08006963 	.word	0x08006963
 8005944:	abcd330e 	.word	0xabcd330e
 8005948:	e66d1234 	.word	0xe66d1234
 800594c:	0005deec 	.word	0x0005deec

08005950 <std>:
 8005950:	2300      	movs	r3, #0
 8005952:	b510      	push	{r4, lr}
 8005954:	4604      	mov	r4, r0
 8005956:	e9c0 3300 	strd	r3, r3, [r0]
 800595a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800595e:	6083      	str	r3, [r0, #8]
 8005960:	8181      	strh	r1, [r0, #12]
 8005962:	6643      	str	r3, [r0, #100]	@ 0x64
 8005964:	81c2      	strh	r2, [r0, #14]
 8005966:	6183      	str	r3, [r0, #24]
 8005968:	4619      	mov	r1, r3
 800596a:	2208      	movs	r2, #8
 800596c:	305c      	adds	r0, #92	@ 0x5c
 800596e:	f000 f8f4 	bl	8005b5a <memset>
 8005972:	4b0d      	ldr	r3, [pc, #52]	@ (80059a8 <std+0x58>)
 8005974:	6263      	str	r3, [r4, #36]	@ 0x24
 8005976:	4b0d      	ldr	r3, [pc, #52]	@ (80059ac <std+0x5c>)
 8005978:	62a3      	str	r3, [r4, #40]	@ 0x28
 800597a:	4b0d      	ldr	r3, [pc, #52]	@ (80059b0 <std+0x60>)
 800597c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800597e:	4b0d      	ldr	r3, [pc, #52]	@ (80059b4 <std+0x64>)
 8005980:	6323      	str	r3, [r4, #48]	@ 0x30
 8005982:	4b0d      	ldr	r3, [pc, #52]	@ (80059b8 <std+0x68>)
 8005984:	6224      	str	r4, [r4, #32]
 8005986:	429c      	cmp	r4, r3
 8005988:	d006      	beq.n	8005998 <std+0x48>
 800598a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800598e:	4294      	cmp	r4, r2
 8005990:	d002      	beq.n	8005998 <std+0x48>
 8005992:	33d0      	adds	r3, #208	@ 0xd0
 8005994:	429c      	cmp	r4, r3
 8005996:	d105      	bne.n	80059a4 <std+0x54>
 8005998:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800599c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059a0:	f000 b982 	b.w	8005ca8 <__retarget_lock_init_recursive>
 80059a4:	bd10      	pop	{r4, pc}
 80059a6:	bf00      	nop
 80059a8:	08005ad5 	.word	0x08005ad5
 80059ac:	08005af7 	.word	0x08005af7
 80059b0:	08005b2f 	.word	0x08005b2f
 80059b4:	08005b53 	.word	0x08005b53
 80059b8:	200002d8 	.word	0x200002d8

080059bc <stdio_exit_handler>:
 80059bc:	4a02      	ldr	r2, [pc, #8]	@ (80059c8 <stdio_exit_handler+0xc>)
 80059be:	4903      	ldr	r1, [pc, #12]	@ (80059cc <stdio_exit_handler+0x10>)
 80059c0:	4803      	ldr	r0, [pc, #12]	@ (80059d0 <stdio_exit_handler+0x14>)
 80059c2:	f000 b869 	b.w	8005a98 <_fwalk_sglue>
 80059c6:	bf00      	nop
 80059c8:	20000010 	.word	0x20000010
 80059cc:	08005ff5 	.word	0x08005ff5
 80059d0:	20000020 	.word	0x20000020

080059d4 <cleanup_stdio>:
 80059d4:	6841      	ldr	r1, [r0, #4]
 80059d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005a08 <cleanup_stdio+0x34>)
 80059d8:	4299      	cmp	r1, r3
 80059da:	b510      	push	{r4, lr}
 80059dc:	4604      	mov	r4, r0
 80059de:	d001      	beq.n	80059e4 <cleanup_stdio+0x10>
 80059e0:	f000 fb08 	bl	8005ff4 <_fflush_r>
 80059e4:	68a1      	ldr	r1, [r4, #8]
 80059e6:	4b09      	ldr	r3, [pc, #36]	@ (8005a0c <cleanup_stdio+0x38>)
 80059e8:	4299      	cmp	r1, r3
 80059ea:	d002      	beq.n	80059f2 <cleanup_stdio+0x1e>
 80059ec:	4620      	mov	r0, r4
 80059ee:	f000 fb01 	bl	8005ff4 <_fflush_r>
 80059f2:	68e1      	ldr	r1, [r4, #12]
 80059f4:	4b06      	ldr	r3, [pc, #24]	@ (8005a10 <cleanup_stdio+0x3c>)
 80059f6:	4299      	cmp	r1, r3
 80059f8:	d004      	beq.n	8005a04 <cleanup_stdio+0x30>
 80059fa:	4620      	mov	r0, r4
 80059fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a00:	f000 baf8 	b.w	8005ff4 <_fflush_r>
 8005a04:	bd10      	pop	{r4, pc}
 8005a06:	bf00      	nop
 8005a08:	200002d8 	.word	0x200002d8
 8005a0c:	20000340 	.word	0x20000340
 8005a10:	200003a8 	.word	0x200003a8

08005a14 <global_stdio_init.part.0>:
 8005a14:	b510      	push	{r4, lr}
 8005a16:	4b0b      	ldr	r3, [pc, #44]	@ (8005a44 <global_stdio_init.part.0+0x30>)
 8005a18:	4c0b      	ldr	r4, [pc, #44]	@ (8005a48 <global_stdio_init.part.0+0x34>)
 8005a1a:	4a0c      	ldr	r2, [pc, #48]	@ (8005a4c <global_stdio_init.part.0+0x38>)
 8005a1c:	601a      	str	r2, [r3, #0]
 8005a1e:	4620      	mov	r0, r4
 8005a20:	2200      	movs	r2, #0
 8005a22:	2104      	movs	r1, #4
 8005a24:	f7ff ff94 	bl	8005950 <std>
 8005a28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	2109      	movs	r1, #9
 8005a30:	f7ff ff8e 	bl	8005950 <std>
 8005a34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005a38:	2202      	movs	r2, #2
 8005a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a3e:	2112      	movs	r1, #18
 8005a40:	f7ff bf86 	b.w	8005950 <std>
 8005a44:	20000410 	.word	0x20000410
 8005a48:	200002d8 	.word	0x200002d8
 8005a4c:	080059bd 	.word	0x080059bd

08005a50 <__sfp_lock_acquire>:
 8005a50:	4801      	ldr	r0, [pc, #4]	@ (8005a58 <__sfp_lock_acquire+0x8>)
 8005a52:	f000 b92a 	b.w	8005caa <__retarget_lock_acquire_recursive>
 8005a56:	bf00      	nop
 8005a58:	20000419 	.word	0x20000419

08005a5c <__sfp_lock_release>:
 8005a5c:	4801      	ldr	r0, [pc, #4]	@ (8005a64 <__sfp_lock_release+0x8>)
 8005a5e:	f000 b925 	b.w	8005cac <__retarget_lock_release_recursive>
 8005a62:	bf00      	nop
 8005a64:	20000419 	.word	0x20000419

08005a68 <__sinit>:
 8005a68:	b510      	push	{r4, lr}
 8005a6a:	4604      	mov	r4, r0
 8005a6c:	f7ff fff0 	bl	8005a50 <__sfp_lock_acquire>
 8005a70:	6a23      	ldr	r3, [r4, #32]
 8005a72:	b11b      	cbz	r3, 8005a7c <__sinit+0x14>
 8005a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a78:	f7ff bff0 	b.w	8005a5c <__sfp_lock_release>
 8005a7c:	4b04      	ldr	r3, [pc, #16]	@ (8005a90 <__sinit+0x28>)
 8005a7e:	6223      	str	r3, [r4, #32]
 8005a80:	4b04      	ldr	r3, [pc, #16]	@ (8005a94 <__sinit+0x2c>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1f5      	bne.n	8005a74 <__sinit+0xc>
 8005a88:	f7ff ffc4 	bl	8005a14 <global_stdio_init.part.0>
 8005a8c:	e7f2      	b.n	8005a74 <__sinit+0xc>
 8005a8e:	bf00      	nop
 8005a90:	080059d5 	.word	0x080059d5
 8005a94:	20000410 	.word	0x20000410

08005a98 <_fwalk_sglue>:
 8005a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a9c:	4607      	mov	r7, r0
 8005a9e:	4688      	mov	r8, r1
 8005aa0:	4614      	mov	r4, r2
 8005aa2:	2600      	movs	r6, #0
 8005aa4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005aa8:	f1b9 0901 	subs.w	r9, r9, #1
 8005aac:	d505      	bpl.n	8005aba <_fwalk_sglue+0x22>
 8005aae:	6824      	ldr	r4, [r4, #0]
 8005ab0:	2c00      	cmp	r4, #0
 8005ab2:	d1f7      	bne.n	8005aa4 <_fwalk_sglue+0xc>
 8005ab4:	4630      	mov	r0, r6
 8005ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aba:	89ab      	ldrh	r3, [r5, #12]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d907      	bls.n	8005ad0 <_fwalk_sglue+0x38>
 8005ac0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	d003      	beq.n	8005ad0 <_fwalk_sglue+0x38>
 8005ac8:	4629      	mov	r1, r5
 8005aca:	4638      	mov	r0, r7
 8005acc:	47c0      	blx	r8
 8005ace:	4306      	orrs	r6, r0
 8005ad0:	3568      	adds	r5, #104	@ 0x68
 8005ad2:	e7e9      	b.n	8005aa8 <_fwalk_sglue+0x10>

08005ad4 <__sread>:
 8005ad4:	b510      	push	{r4, lr}
 8005ad6:	460c      	mov	r4, r1
 8005ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005adc:	f000 f896 	bl	8005c0c <_read_r>
 8005ae0:	2800      	cmp	r0, #0
 8005ae2:	bfab      	itete	ge
 8005ae4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005ae6:	89a3      	ldrhlt	r3, [r4, #12]
 8005ae8:	181b      	addge	r3, r3, r0
 8005aea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005aee:	bfac      	ite	ge
 8005af0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005af2:	81a3      	strhlt	r3, [r4, #12]
 8005af4:	bd10      	pop	{r4, pc}

08005af6 <__swrite>:
 8005af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005afa:	461f      	mov	r7, r3
 8005afc:	898b      	ldrh	r3, [r1, #12]
 8005afe:	05db      	lsls	r3, r3, #23
 8005b00:	4605      	mov	r5, r0
 8005b02:	460c      	mov	r4, r1
 8005b04:	4616      	mov	r6, r2
 8005b06:	d505      	bpl.n	8005b14 <__swrite+0x1e>
 8005b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f000 f86a 	bl	8005be8 <_lseek_r>
 8005b14:	89a3      	ldrh	r3, [r4, #12]
 8005b16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b1e:	81a3      	strh	r3, [r4, #12]
 8005b20:	4632      	mov	r2, r6
 8005b22:	463b      	mov	r3, r7
 8005b24:	4628      	mov	r0, r5
 8005b26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b2a:	f000 b881 	b.w	8005c30 <_write_r>

08005b2e <__sseek>:
 8005b2e:	b510      	push	{r4, lr}
 8005b30:	460c      	mov	r4, r1
 8005b32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b36:	f000 f857 	bl	8005be8 <_lseek_r>
 8005b3a:	1c43      	adds	r3, r0, #1
 8005b3c:	89a3      	ldrh	r3, [r4, #12]
 8005b3e:	bf15      	itete	ne
 8005b40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005b42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005b46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005b4a:	81a3      	strheq	r3, [r4, #12]
 8005b4c:	bf18      	it	ne
 8005b4e:	81a3      	strhne	r3, [r4, #12]
 8005b50:	bd10      	pop	{r4, pc}

08005b52 <__sclose>:
 8005b52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b56:	f000 b825 	b.w	8005ba4 <_close_r>

08005b5a <memset>:
 8005b5a:	4402      	add	r2, r0
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d100      	bne.n	8005b64 <memset+0xa>
 8005b62:	4770      	bx	lr
 8005b64:	f803 1b01 	strb.w	r1, [r3], #1
 8005b68:	e7f9      	b.n	8005b5e <memset+0x4>
	...

08005b6c <time>:
 8005b6c:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8005b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8005ba0 <time+0x34>)
 8005b70:	f04f 36ff 	mov.w	r6, #4294967295
 8005b74:	f04f 37ff 	mov.w	r7, #4294967295
 8005b78:	4669      	mov	r1, sp
 8005b7a:	4604      	mov	r4, r0
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	6818      	ldr	r0, [r3, #0]
 8005b80:	e9cd 6700 	strd	r6, r7, [sp]
 8005b84:	f000 f81e 	bl	8005bc4 <_gettimeofday_r>
 8005b88:	2800      	cmp	r0, #0
 8005b8a:	bfb8      	it	lt
 8005b8c:	e9cd 6700 	strdlt	r6, r7, [sp]
 8005b90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b94:	b10c      	cbz	r4, 8005b9a <time+0x2e>
 8005b96:	e9c4 0100 	strd	r0, r1, [r4]
 8005b9a:	b004      	add	sp, #16
 8005b9c:	bdd0      	pop	{r4, r6, r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	2000001c 	.word	0x2000001c

08005ba4 <_close_r>:
 8005ba4:	b538      	push	{r3, r4, r5, lr}
 8005ba6:	4d06      	ldr	r5, [pc, #24]	@ (8005bc0 <_close_r+0x1c>)
 8005ba8:	2300      	movs	r3, #0
 8005baa:	4604      	mov	r4, r0
 8005bac:	4608      	mov	r0, r1
 8005bae:	602b      	str	r3, [r5, #0]
 8005bb0:	f7fb fcaa 	bl	8001508 <_close>
 8005bb4:	1c43      	adds	r3, r0, #1
 8005bb6:	d102      	bne.n	8005bbe <_close_r+0x1a>
 8005bb8:	682b      	ldr	r3, [r5, #0]
 8005bba:	b103      	cbz	r3, 8005bbe <_close_r+0x1a>
 8005bbc:	6023      	str	r3, [r4, #0]
 8005bbe:	bd38      	pop	{r3, r4, r5, pc}
 8005bc0:	20000414 	.word	0x20000414

08005bc4 <_gettimeofday_r>:
 8005bc4:	b538      	push	{r3, r4, r5, lr}
 8005bc6:	4d07      	ldr	r5, [pc, #28]	@ (8005be4 <_gettimeofday_r+0x20>)
 8005bc8:	2300      	movs	r3, #0
 8005bca:	4604      	mov	r4, r0
 8005bcc:	4608      	mov	r0, r1
 8005bce:	4611      	mov	r1, r2
 8005bd0:	602b      	str	r3, [r5, #0]
 8005bd2:	f000 fe8b 	bl	80068ec <_gettimeofday>
 8005bd6:	1c43      	adds	r3, r0, #1
 8005bd8:	d102      	bne.n	8005be0 <_gettimeofday_r+0x1c>
 8005bda:	682b      	ldr	r3, [r5, #0]
 8005bdc:	b103      	cbz	r3, 8005be0 <_gettimeofday_r+0x1c>
 8005bde:	6023      	str	r3, [r4, #0]
 8005be0:	bd38      	pop	{r3, r4, r5, pc}
 8005be2:	bf00      	nop
 8005be4:	20000414 	.word	0x20000414

08005be8 <_lseek_r>:
 8005be8:	b538      	push	{r3, r4, r5, lr}
 8005bea:	4d07      	ldr	r5, [pc, #28]	@ (8005c08 <_lseek_r+0x20>)
 8005bec:	4604      	mov	r4, r0
 8005bee:	4608      	mov	r0, r1
 8005bf0:	4611      	mov	r1, r2
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	602a      	str	r2, [r5, #0]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	f7fb fcad 	bl	8001556 <_lseek>
 8005bfc:	1c43      	adds	r3, r0, #1
 8005bfe:	d102      	bne.n	8005c06 <_lseek_r+0x1e>
 8005c00:	682b      	ldr	r3, [r5, #0]
 8005c02:	b103      	cbz	r3, 8005c06 <_lseek_r+0x1e>
 8005c04:	6023      	str	r3, [r4, #0]
 8005c06:	bd38      	pop	{r3, r4, r5, pc}
 8005c08:	20000414 	.word	0x20000414

08005c0c <_read_r>:
 8005c0c:	b538      	push	{r3, r4, r5, lr}
 8005c0e:	4d07      	ldr	r5, [pc, #28]	@ (8005c2c <_read_r+0x20>)
 8005c10:	4604      	mov	r4, r0
 8005c12:	4608      	mov	r0, r1
 8005c14:	4611      	mov	r1, r2
 8005c16:	2200      	movs	r2, #0
 8005c18:	602a      	str	r2, [r5, #0]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	f7fb fc3b 	bl	8001496 <_read>
 8005c20:	1c43      	adds	r3, r0, #1
 8005c22:	d102      	bne.n	8005c2a <_read_r+0x1e>
 8005c24:	682b      	ldr	r3, [r5, #0]
 8005c26:	b103      	cbz	r3, 8005c2a <_read_r+0x1e>
 8005c28:	6023      	str	r3, [r4, #0]
 8005c2a:	bd38      	pop	{r3, r4, r5, pc}
 8005c2c:	20000414 	.word	0x20000414

08005c30 <_write_r>:
 8005c30:	b538      	push	{r3, r4, r5, lr}
 8005c32:	4d07      	ldr	r5, [pc, #28]	@ (8005c50 <_write_r+0x20>)
 8005c34:	4604      	mov	r4, r0
 8005c36:	4608      	mov	r0, r1
 8005c38:	4611      	mov	r1, r2
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	602a      	str	r2, [r5, #0]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	f7fb fc46 	bl	80014d0 <_write>
 8005c44:	1c43      	adds	r3, r0, #1
 8005c46:	d102      	bne.n	8005c4e <_write_r+0x1e>
 8005c48:	682b      	ldr	r3, [r5, #0]
 8005c4a:	b103      	cbz	r3, 8005c4e <_write_r+0x1e>
 8005c4c:	6023      	str	r3, [r4, #0]
 8005c4e:	bd38      	pop	{r3, r4, r5, pc}
 8005c50:	20000414 	.word	0x20000414

08005c54 <__errno>:
 8005c54:	4b01      	ldr	r3, [pc, #4]	@ (8005c5c <__errno+0x8>)
 8005c56:	6818      	ldr	r0, [r3, #0]
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	2000001c 	.word	0x2000001c

08005c60 <__libc_init_array>:
 8005c60:	b570      	push	{r4, r5, r6, lr}
 8005c62:	4d0d      	ldr	r5, [pc, #52]	@ (8005c98 <__libc_init_array+0x38>)
 8005c64:	4c0d      	ldr	r4, [pc, #52]	@ (8005c9c <__libc_init_array+0x3c>)
 8005c66:	1b64      	subs	r4, r4, r5
 8005c68:	10a4      	asrs	r4, r4, #2
 8005c6a:	2600      	movs	r6, #0
 8005c6c:	42a6      	cmp	r6, r4
 8005c6e:	d109      	bne.n	8005c84 <__libc_init_array+0x24>
 8005c70:	4d0b      	ldr	r5, [pc, #44]	@ (8005ca0 <__libc_init_array+0x40>)
 8005c72:	4c0c      	ldr	r4, [pc, #48]	@ (8005ca4 <__libc_init_array+0x44>)
 8005c74:	f000 fe42 	bl	80068fc <_init>
 8005c78:	1b64      	subs	r4, r4, r5
 8005c7a:	10a4      	asrs	r4, r4, #2
 8005c7c:	2600      	movs	r6, #0
 8005c7e:	42a6      	cmp	r6, r4
 8005c80:	d105      	bne.n	8005c8e <__libc_init_array+0x2e>
 8005c82:	bd70      	pop	{r4, r5, r6, pc}
 8005c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c88:	4798      	blx	r3
 8005c8a:	3601      	adds	r6, #1
 8005c8c:	e7ee      	b.n	8005c6c <__libc_init_array+0xc>
 8005c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c92:	4798      	blx	r3
 8005c94:	3601      	adds	r6, #1
 8005c96:	e7f2      	b.n	8005c7e <__libc_init_array+0x1e>
 8005c98:	08006a34 	.word	0x08006a34
 8005c9c:	08006a34 	.word	0x08006a34
 8005ca0:	08006a34 	.word	0x08006a34
 8005ca4:	08006a38 	.word	0x08006a38

08005ca8 <__retarget_lock_init_recursive>:
 8005ca8:	4770      	bx	lr

08005caa <__retarget_lock_acquire_recursive>:
 8005caa:	4770      	bx	lr

08005cac <__retarget_lock_release_recursive>:
 8005cac:	4770      	bx	lr
	...

08005cb0 <__assert_func>:
 8005cb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005cb2:	4614      	mov	r4, r2
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	4b09      	ldr	r3, [pc, #36]	@ (8005cdc <__assert_func+0x2c>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4605      	mov	r5, r0
 8005cbc:	68d8      	ldr	r0, [r3, #12]
 8005cbe:	b954      	cbnz	r4, 8005cd6 <__assert_func+0x26>
 8005cc0:	4b07      	ldr	r3, [pc, #28]	@ (8005ce0 <__assert_func+0x30>)
 8005cc2:	461c      	mov	r4, r3
 8005cc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005cc8:	9100      	str	r1, [sp, #0]
 8005cca:	462b      	mov	r3, r5
 8005ccc:	4905      	ldr	r1, [pc, #20]	@ (8005ce4 <__assert_func+0x34>)
 8005cce:	f000 f9b9 	bl	8006044 <fiprintf>
 8005cd2:	f000 f9d9 	bl	8006088 <abort>
 8005cd6:	4b04      	ldr	r3, [pc, #16]	@ (8005ce8 <__assert_func+0x38>)
 8005cd8:	e7f4      	b.n	8005cc4 <__assert_func+0x14>
 8005cda:	bf00      	nop
 8005cdc:	2000001c 	.word	0x2000001c
 8005ce0:	080069f6 	.word	0x080069f6
 8005ce4:	080069c8 	.word	0x080069c8
 8005ce8:	080069bb 	.word	0x080069bb

08005cec <_free_r>:
 8005cec:	b538      	push	{r3, r4, r5, lr}
 8005cee:	4605      	mov	r5, r0
 8005cf0:	2900      	cmp	r1, #0
 8005cf2:	d041      	beq.n	8005d78 <_free_r+0x8c>
 8005cf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cf8:	1f0c      	subs	r4, r1, #4
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	bfb8      	it	lt
 8005cfe:	18e4      	addlt	r4, r4, r3
 8005d00:	f000 f8e8 	bl	8005ed4 <__malloc_lock>
 8005d04:	4a1d      	ldr	r2, [pc, #116]	@ (8005d7c <_free_r+0x90>)
 8005d06:	6813      	ldr	r3, [r2, #0]
 8005d08:	b933      	cbnz	r3, 8005d18 <_free_r+0x2c>
 8005d0a:	6063      	str	r3, [r4, #4]
 8005d0c:	6014      	str	r4, [r2, #0]
 8005d0e:	4628      	mov	r0, r5
 8005d10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d14:	f000 b8e4 	b.w	8005ee0 <__malloc_unlock>
 8005d18:	42a3      	cmp	r3, r4
 8005d1a:	d908      	bls.n	8005d2e <_free_r+0x42>
 8005d1c:	6820      	ldr	r0, [r4, #0]
 8005d1e:	1821      	adds	r1, r4, r0
 8005d20:	428b      	cmp	r3, r1
 8005d22:	bf01      	itttt	eq
 8005d24:	6819      	ldreq	r1, [r3, #0]
 8005d26:	685b      	ldreq	r3, [r3, #4]
 8005d28:	1809      	addeq	r1, r1, r0
 8005d2a:	6021      	streq	r1, [r4, #0]
 8005d2c:	e7ed      	b.n	8005d0a <_free_r+0x1e>
 8005d2e:	461a      	mov	r2, r3
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	b10b      	cbz	r3, 8005d38 <_free_r+0x4c>
 8005d34:	42a3      	cmp	r3, r4
 8005d36:	d9fa      	bls.n	8005d2e <_free_r+0x42>
 8005d38:	6811      	ldr	r1, [r2, #0]
 8005d3a:	1850      	adds	r0, r2, r1
 8005d3c:	42a0      	cmp	r0, r4
 8005d3e:	d10b      	bne.n	8005d58 <_free_r+0x6c>
 8005d40:	6820      	ldr	r0, [r4, #0]
 8005d42:	4401      	add	r1, r0
 8005d44:	1850      	adds	r0, r2, r1
 8005d46:	4283      	cmp	r3, r0
 8005d48:	6011      	str	r1, [r2, #0]
 8005d4a:	d1e0      	bne.n	8005d0e <_free_r+0x22>
 8005d4c:	6818      	ldr	r0, [r3, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	6053      	str	r3, [r2, #4]
 8005d52:	4408      	add	r0, r1
 8005d54:	6010      	str	r0, [r2, #0]
 8005d56:	e7da      	b.n	8005d0e <_free_r+0x22>
 8005d58:	d902      	bls.n	8005d60 <_free_r+0x74>
 8005d5a:	230c      	movs	r3, #12
 8005d5c:	602b      	str	r3, [r5, #0]
 8005d5e:	e7d6      	b.n	8005d0e <_free_r+0x22>
 8005d60:	6820      	ldr	r0, [r4, #0]
 8005d62:	1821      	adds	r1, r4, r0
 8005d64:	428b      	cmp	r3, r1
 8005d66:	bf04      	itt	eq
 8005d68:	6819      	ldreq	r1, [r3, #0]
 8005d6a:	685b      	ldreq	r3, [r3, #4]
 8005d6c:	6063      	str	r3, [r4, #4]
 8005d6e:	bf04      	itt	eq
 8005d70:	1809      	addeq	r1, r1, r0
 8005d72:	6021      	streq	r1, [r4, #0]
 8005d74:	6054      	str	r4, [r2, #4]
 8005d76:	e7ca      	b.n	8005d0e <_free_r+0x22>
 8005d78:	bd38      	pop	{r3, r4, r5, pc}
 8005d7a:	bf00      	nop
 8005d7c:	20000420 	.word	0x20000420

08005d80 <malloc>:
 8005d80:	4b02      	ldr	r3, [pc, #8]	@ (8005d8c <malloc+0xc>)
 8005d82:	4601      	mov	r1, r0
 8005d84:	6818      	ldr	r0, [r3, #0]
 8005d86:	f000 b825 	b.w	8005dd4 <_malloc_r>
 8005d8a:	bf00      	nop
 8005d8c:	2000001c 	.word	0x2000001c

08005d90 <sbrk_aligned>:
 8005d90:	b570      	push	{r4, r5, r6, lr}
 8005d92:	4e0f      	ldr	r6, [pc, #60]	@ (8005dd0 <sbrk_aligned+0x40>)
 8005d94:	460c      	mov	r4, r1
 8005d96:	6831      	ldr	r1, [r6, #0]
 8005d98:	4605      	mov	r5, r0
 8005d9a:	b911      	cbnz	r1, 8005da2 <sbrk_aligned+0x12>
 8005d9c:	f000 f964 	bl	8006068 <_sbrk_r>
 8005da0:	6030      	str	r0, [r6, #0]
 8005da2:	4621      	mov	r1, r4
 8005da4:	4628      	mov	r0, r5
 8005da6:	f000 f95f 	bl	8006068 <_sbrk_r>
 8005daa:	1c43      	adds	r3, r0, #1
 8005dac:	d103      	bne.n	8005db6 <sbrk_aligned+0x26>
 8005dae:	f04f 34ff 	mov.w	r4, #4294967295
 8005db2:	4620      	mov	r0, r4
 8005db4:	bd70      	pop	{r4, r5, r6, pc}
 8005db6:	1cc4      	adds	r4, r0, #3
 8005db8:	f024 0403 	bic.w	r4, r4, #3
 8005dbc:	42a0      	cmp	r0, r4
 8005dbe:	d0f8      	beq.n	8005db2 <sbrk_aligned+0x22>
 8005dc0:	1a21      	subs	r1, r4, r0
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	f000 f950 	bl	8006068 <_sbrk_r>
 8005dc8:	3001      	adds	r0, #1
 8005dca:	d1f2      	bne.n	8005db2 <sbrk_aligned+0x22>
 8005dcc:	e7ef      	b.n	8005dae <sbrk_aligned+0x1e>
 8005dce:	bf00      	nop
 8005dd0:	2000041c 	.word	0x2000041c

08005dd4 <_malloc_r>:
 8005dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dd8:	1ccd      	adds	r5, r1, #3
 8005dda:	f025 0503 	bic.w	r5, r5, #3
 8005dde:	3508      	adds	r5, #8
 8005de0:	2d0c      	cmp	r5, #12
 8005de2:	bf38      	it	cc
 8005de4:	250c      	movcc	r5, #12
 8005de6:	2d00      	cmp	r5, #0
 8005de8:	4606      	mov	r6, r0
 8005dea:	db01      	blt.n	8005df0 <_malloc_r+0x1c>
 8005dec:	42a9      	cmp	r1, r5
 8005dee:	d904      	bls.n	8005dfa <_malloc_r+0x26>
 8005df0:	230c      	movs	r3, #12
 8005df2:	6033      	str	r3, [r6, #0]
 8005df4:	2000      	movs	r0, #0
 8005df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ed0 <_malloc_r+0xfc>
 8005dfe:	f000 f869 	bl	8005ed4 <__malloc_lock>
 8005e02:	f8d8 3000 	ldr.w	r3, [r8]
 8005e06:	461c      	mov	r4, r3
 8005e08:	bb44      	cbnz	r4, 8005e5c <_malloc_r+0x88>
 8005e0a:	4629      	mov	r1, r5
 8005e0c:	4630      	mov	r0, r6
 8005e0e:	f7ff ffbf 	bl	8005d90 <sbrk_aligned>
 8005e12:	1c43      	adds	r3, r0, #1
 8005e14:	4604      	mov	r4, r0
 8005e16:	d158      	bne.n	8005eca <_malloc_r+0xf6>
 8005e18:	f8d8 4000 	ldr.w	r4, [r8]
 8005e1c:	4627      	mov	r7, r4
 8005e1e:	2f00      	cmp	r7, #0
 8005e20:	d143      	bne.n	8005eaa <_malloc_r+0xd6>
 8005e22:	2c00      	cmp	r4, #0
 8005e24:	d04b      	beq.n	8005ebe <_malloc_r+0xea>
 8005e26:	6823      	ldr	r3, [r4, #0]
 8005e28:	4639      	mov	r1, r7
 8005e2a:	4630      	mov	r0, r6
 8005e2c:	eb04 0903 	add.w	r9, r4, r3
 8005e30:	f000 f91a 	bl	8006068 <_sbrk_r>
 8005e34:	4581      	cmp	r9, r0
 8005e36:	d142      	bne.n	8005ebe <_malloc_r+0xea>
 8005e38:	6821      	ldr	r1, [r4, #0]
 8005e3a:	1a6d      	subs	r5, r5, r1
 8005e3c:	4629      	mov	r1, r5
 8005e3e:	4630      	mov	r0, r6
 8005e40:	f7ff ffa6 	bl	8005d90 <sbrk_aligned>
 8005e44:	3001      	adds	r0, #1
 8005e46:	d03a      	beq.n	8005ebe <_malloc_r+0xea>
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	442b      	add	r3, r5
 8005e4c:	6023      	str	r3, [r4, #0]
 8005e4e:	f8d8 3000 	ldr.w	r3, [r8]
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	bb62      	cbnz	r2, 8005eb0 <_malloc_r+0xdc>
 8005e56:	f8c8 7000 	str.w	r7, [r8]
 8005e5a:	e00f      	b.n	8005e7c <_malloc_r+0xa8>
 8005e5c:	6822      	ldr	r2, [r4, #0]
 8005e5e:	1b52      	subs	r2, r2, r5
 8005e60:	d420      	bmi.n	8005ea4 <_malloc_r+0xd0>
 8005e62:	2a0b      	cmp	r2, #11
 8005e64:	d917      	bls.n	8005e96 <_malloc_r+0xc2>
 8005e66:	1961      	adds	r1, r4, r5
 8005e68:	42a3      	cmp	r3, r4
 8005e6a:	6025      	str	r5, [r4, #0]
 8005e6c:	bf18      	it	ne
 8005e6e:	6059      	strne	r1, [r3, #4]
 8005e70:	6863      	ldr	r3, [r4, #4]
 8005e72:	bf08      	it	eq
 8005e74:	f8c8 1000 	streq.w	r1, [r8]
 8005e78:	5162      	str	r2, [r4, r5]
 8005e7a:	604b      	str	r3, [r1, #4]
 8005e7c:	4630      	mov	r0, r6
 8005e7e:	f000 f82f 	bl	8005ee0 <__malloc_unlock>
 8005e82:	f104 000b 	add.w	r0, r4, #11
 8005e86:	1d23      	adds	r3, r4, #4
 8005e88:	f020 0007 	bic.w	r0, r0, #7
 8005e8c:	1ac2      	subs	r2, r0, r3
 8005e8e:	bf1c      	itt	ne
 8005e90:	1a1b      	subne	r3, r3, r0
 8005e92:	50a3      	strne	r3, [r4, r2]
 8005e94:	e7af      	b.n	8005df6 <_malloc_r+0x22>
 8005e96:	6862      	ldr	r2, [r4, #4]
 8005e98:	42a3      	cmp	r3, r4
 8005e9a:	bf0c      	ite	eq
 8005e9c:	f8c8 2000 	streq.w	r2, [r8]
 8005ea0:	605a      	strne	r2, [r3, #4]
 8005ea2:	e7eb      	b.n	8005e7c <_malloc_r+0xa8>
 8005ea4:	4623      	mov	r3, r4
 8005ea6:	6864      	ldr	r4, [r4, #4]
 8005ea8:	e7ae      	b.n	8005e08 <_malloc_r+0x34>
 8005eaa:	463c      	mov	r4, r7
 8005eac:	687f      	ldr	r7, [r7, #4]
 8005eae:	e7b6      	b.n	8005e1e <_malloc_r+0x4a>
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	42a3      	cmp	r3, r4
 8005eb6:	d1fb      	bne.n	8005eb0 <_malloc_r+0xdc>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	6053      	str	r3, [r2, #4]
 8005ebc:	e7de      	b.n	8005e7c <_malloc_r+0xa8>
 8005ebe:	230c      	movs	r3, #12
 8005ec0:	6033      	str	r3, [r6, #0]
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	f000 f80c 	bl	8005ee0 <__malloc_unlock>
 8005ec8:	e794      	b.n	8005df4 <_malloc_r+0x20>
 8005eca:	6005      	str	r5, [r0, #0]
 8005ecc:	e7d6      	b.n	8005e7c <_malloc_r+0xa8>
 8005ece:	bf00      	nop
 8005ed0:	20000420 	.word	0x20000420

08005ed4 <__malloc_lock>:
 8005ed4:	4801      	ldr	r0, [pc, #4]	@ (8005edc <__malloc_lock+0x8>)
 8005ed6:	f7ff bee8 	b.w	8005caa <__retarget_lock_acquire_recursive>
 8005eda:	bf00      	nop
 8005edc:	20000418 	.word	0x20000418

08005ee0 <__malloc_unlock>:
 8005ee0:	4801      	ldr	r0, [pc, #4]	@ (8005ee8 <__malloc_unlock+0x8>)
 8005ee2:	f7ff bee3 	b.w	8005cac <__retarget_lock_release_recursive>
 8005ee6:	bf00      	nop
 8005ee8:	20000418 	.word	0x20000418

08005eec <__sflush_r>:
 8005eec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ef4:	0716      	lsls	r6, r2, #28
 8005ef6:	4605      	mov	r5, r0
 8005ef8:	460c      	mov	r4, r1
 8005efa:	d454      	bmi.n	8005fa6 <__sflush_r+0xba>
 8005efc:	684b      	ldr	r3, [r1, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	dc02      	bgt.n	8005f08 <__sflush_r+0x1c>
 8005f02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	dd48      	ble.n	8005f9a <__sflush_r+0xae>
 8005f08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f0a:	2e00      	cmp	r6, #0
 8005f0c:	d045      	beq.n	8005f9a <__sflush_r+0xae>
 8005f0e:	2300      	movs	r3, #0
 8005f10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005f14:	682f      	ldr	r7, [r5, #0]
 8005f16:	6a21      	ldr	r1, [r4, #32]
 8005f18:	602b      	str	r3, [r5, #0]
 8005f1a:	d030      	beq.n	8005f7e <__sflush_r+0x92>
 8005f1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005f1e:	89a3      	ldrh	r3, [r4, #12]
 8005f20:	0759      	lsls	r1, r3, #29
 8005f22:	d505      	bpl.n	8005f30 <__sflush_r+0x44>
 8005f24:	6863      	ldr	r3, [r4, #4]
 8005f26:	1ad2      	subs	r2, r2, r3
 8005f28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005f2a:	b10b      	cbz	r3, 8005f30 <__sflush_r+0x44>
 8005f2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005f2e:	1ad2      	subs	r2, r2, r3
 8005f30:	2300      	movs	r3, #0
 8005f32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f34:	6a21      	ldr	r1, [r4, #32]
 8005f36:	4628      	mov	r0, r5
 8005f38:	47b0      	blx	r6
 8005f3a:	1c43      	adds	r3, r0, #1
 8005f3c:	89a3      	ldrh	r3, [r4, #12]
 8005f3e:	d106      	bne.n	8005f4e <__sflush_r+0x62>
 8005f40:	6829      	ldr	r1, [r5, #0]
 8005f42:	291d      	cmp	r1, #29
 8005f44:	d82b      	bhi.n	8005f9e <__sflush_r+0xb2>
 8005f46:	4a2a      	ldr	r2, [pc, #168]	@ (8005ff0 <__sflush_r+0x104>)
 8005f48:	410a      	asrs	r2, r1
 8005f4a:	07d6      	lsls	r6, r2, #31
 8005f4c:	d427      	bmi.n	8005f9e <__sflush_r+0xb2>
 8005f4e:	2200      	movs	r2, #0
 8005f50:	6062      	str	r2, [r4, #4]
 8005f52:	04d9      	lsls	r1, r3, #19
 8005f54:	6922      	ldr	r2, [r4, #16]
 8005f56:	6022      	str	r2, [r4, #0]
 8005f58:	d504      	bpl.n	8005f64 <__sflush_r+0x78>
 8005f5a:	1c42      	adds	r2, r0, #1
 8005f5c:	d101      	bne.n	8005f62 <__sflush_r+0x76>
 8005f5e:	682b      	ldr	r3, [r5, #0]
 8005f60:	b903      	cbnz	r3, 8005f64 <__sflush_r+0x78>
 8005f62:	6560      	str	r0, [r4, #84]	@ 0x54
 8005f64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f66:	602f      	str	r7, [r5, #0]
 8005f68:	b1b9      	cbz	r1, 8005f9a <__sflush_r+0xae>
 8005f6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f6e:	4299      	cmp	r1, r3
 8005f70:	d002      	beq.n	8005f78 <__sflush_r+0x8c>
 8005f72:	4628      	mov	r0, r5
 8005f74:	f7ff feba 	bl	8005cec <_free_r>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f7c:	e00d      	b.n	8005f9a <__sflush_r+0xae>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	4628      	mov	r0, r5
 8005f82:	47b0      	blx	r6
 8005f84:	4602      	mov	r2, r0
 8005f86:	1c50      	adds	r0, r2, #1
 8005f88:	d1c9      	bne.n	8005f1e <__sflush_r+0x32>
 8005f8a:	682b      	ldr	r3, [r5, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d0c6      	beq.n	8005f1e <__sflush_r+0x32>
 8005f90:	2b1d      	cmp	r3, #29
 8005f92:	d001      	beq.n	8005f98 <__sflush_r+0xac>
 8005f94:	2b16      	cmp	r3, #22
 8005f96:	d11e      	bne.n	8005fd6 <__sflush_r+0xea>
 8005f98:	602f      	str	r7, [r5, #0]
 8005f9a:	2000      	movs	r0, #0
 8005f9c:	e022      	b.n	8005fe4 <__sflush_r+0xf8>
 8005f9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fa2:	b21b      	sxth	r3, r3
 8005fa4:	e01b      	b.n	8005fde <__sflush_r+0xf2>
 8005fa6:	690f      	ldr	r7, [r1, #16]
 8005fa8:	2f00      	cmp	r7, #0
 8005faa:	d0f6      	beq.n	8005f9a <__sflush_r+0xae>
 8005fac:	0793      	lsls	r3, r2, #30
 8005fae:	680e      	ldr	r6, [r1, #0]
 8005fb0:	bf08      	it	eq
 8005fb2:	694b      	ldreq	r3, [r1, #20]
 8005fb4:	600f      	str	r7, [r1, #0]
 8005fb6:	bf18      	it	ne
 8005fb8:	2300      	movne	r3, #0
 8005fba:	eba6 0807 	sub.w	r8, r6, r7
 8005fbe:	608b      	str	r3, [r1, #8]
 8005fc0:	f1b8 0f00 	cmp.w	r8, #0
 8005fc4:	dde9      	ble.n	8005f9a <__sflush_r+0xae>
 8005fc6:	6a21      	ldr	r1, [r4, #32]
 8005fc8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005fca:	4643      	mov	r3, r8
 8005fcc:	463a      	mov	r2, r7
 8005fce:	4628      	mov	r0, r5
 8005fd0:	47b0      	blx	r6
 8005fd2:	2800      	cmp	r0, #0
 8005fd4:	dc08      	bgt.n	8005fe8 <__sflush_r+0xfc>
 8005fd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fde:	81a3      	strh	r3, [r4, #12]
 8005fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fe8:	4407      	add	r7, r0
 8005fea:	eba8 0800 	sub.w	r8, r8, r0
 8005fee:	e7e7      	b.n	8005fc0 <__sflush_r+0xd4>
 8005ff0:	dfbffffe 	.word	0xdfbffffe

08005ff4 <_fflush_r>:
 8005ff4:	b538      	push	{r3, r4, r5, lr}
 8005ff6:	690b      	ldr	r3, [r1, #16]
 8005ff8:	4605      	mov	r5, r0
 8005ffa:	460c      	mov	r4, r1
 8005ffc:	b913      	cbnz	r3, 8006004 <_fflush_r+0x10>
 8005ffe:	2500      	movs	r5, #0
 8006000:	4628      	mov	r0, r5
 8006002:	bd38      	pop	{r3, r4, r5, pc}
 8006004:	b118      	cbz	r0, 800600e <_fflush_r+0x1a>
 8006006:	6a03      	ldr	r3, [r0, #32]
 8006008:	b90b      	cbnz	r3, 800600e <_fflush_r+0x1a>
 800600a:	f7ff fd2d 	bl	8005a68 <__sinit>
 800600e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d0f3      	beq.n	8005ffe <_fflush_r+0xa>
 8006016:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006018:	07d0      	lsls	r0, r2, #31
 800601a:	d404      	bmi.n	8006026 <_fflush_r+0x32>
 800601c:	0599      	lsls	r1, r3, #22
 800601e:	d402      	bmi.n	8006026 <_fflush_r+0x32>
 8006020:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006022:	f7ff fe42 	bl	8005caa <__retarget_lock_acquire_recursive>
 8006026:	4628      	mov	r0, r5
 8006028:	4621      	mov	r1, r4
 800602a:	f7ff ff5f 	bl	8005eec <__sflush_r>
 800602e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006030:	07da      	lsls	r2, r3, #31
 8006032:	4605      	mov	r5, r0
 8006034:	d4e4      	bmi.n	8006000 <_fflush_r+0xc>
 8006036:	89a3      	ldrh	r3, [r4, #12]
 8006038:	059b      	lsls	r3, r3, #22
 800603a:	d4e1      	bmi.n	8006000 <_fflush_r+0xc>
 800603c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800603e:	f7ff fe35 	bl	8005cac <__retarget_lock_release_recursive>
 8006042:	e7dd      	b.n	8006000 <_fflush_r+0xc>

08006044 <fiprintf>:
 8006044:	b40e      	push	{r1, r2, r3}
 8006046:	b503      	push	{r0, r1, lr}
 8006048:	4601      	mov	r1, r0
 800604a:	ab03      	add	r3, sp, #12
 800604c:	4805      	ldr	r0, [pc, #20]	@ (8006064 <fiprintf+0x20>)
 800604e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006052:	6800      	ldr	r0, [r0, #0]
 8006054:	9301      	str	r3, [sp, #4]
 8006056:	f000 f847 	bl	80060e8 <_vfiprintf_r>
 800605a:	b002      	add	sp, #8
 800605c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006060:	b003      	add	sp, #12
 8006062:	4770      	bx	lr
 8006064:	2000001c 	.word	0x2000001c

08006068 <_sbrk_r>:
 8006068:	b538      	push	{r3, r4, r5, lr}
 800606a:	4d06      	ldr	r5, [pc, #24]	@ (8006084 <_sbrk_r+0x1c>)
 800606c:	2300      	movs	r3, #0
 800606e:	4604      	mov	r4, r0
 8006070:	4608      	mov	r0, r1
 8006072:	602b      	str	r3, [r5, #0]
 8006074:	f7fb fa7c 	bl	8001570 <_sbrk>
 8006078:	1c43      	adds	r3, r0, #1
 800607a:	d102      	bne.n	8006082 <_sbrk_r+0x1a>
 800607c:	682b      	ldr	r3, [r5, #0]
 800607e:	b103      	cbz	r3, 8006082 <_sbrk_r+0x1a>
 8006080:	6023      	str	r3, [r4, #0]
 8006082:	bd38      	pop	{r3, r4, r5, pc}
 8006084:	20000414 	.word	0x20000414

08006088 <abort>:
 8006088:	b508      	push	{r3, lr}
 800608a:	2006      	movs	r0, #6
 800608c:	f000 fb8e 	bl	80067ac <raise>
 8006090:	2001      	movs	r0, #1
 8006092:	f7fb f9f5 	bl	8001480 <_exit>

08006096 <__sfputc_r>:
 8006096:	6893      	ldr	r3, [r2, #8]
 8006098:	3b01      	subs	r3, #1
 800609a:	2b00      	cmp	r3, #0
 800609c:	b410      	push	{r4}
 800609e:	6093      	str	r3, [r2, #8]
 80060a0:	da08      	bge.n	80060b4 <__sfputc_r+0x1e>
 80060a2:	6994      	ldr	r4, [r2, #24]
 80060a4:	42a3      	cmp	r3, r4
 80060a6:	db01      	blt.n	80060ac <__sfputc_r+0x16>
 80060a8:	290a      	cmp	r1, #10
 80060aa:	d103      	bne.n	80060b4 <__sfputc_r+0x1e>
 80060ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060b0:	f000 bac0 	b.w	8006634 <__swbuf_r>
 80060b4:	6813      	ldr	r3, [r2, #0]
 80060b6:	1c58      	adds	r0, r3, #1
 80060b8:	6010      	str	r0, [r2, #0]
 80060ba:	7019      	strb	r1, [r3, #0]
 80060bc:	4608      	mov	r0, r1
 80060be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <__sfputs_r>:
 80060c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c6:	4606      	mov	r6, r0
 80060c8:	460f      	mov	r7, r1
 80060ca:	4614      	mov	r4, r2
 80060cc:	18d5      	adds	r5, r2, r3
 80060ce:	42ac      	cmp	r4, r5
 80060d0:	d101      	bne.n	80060d6 <__sfputs_r+0x12>
 80060d2:	2000      	movs	r0, #0
 80060d4:	e007      	b.n	80060e6 <__sfputs_r+0x22>
 80060d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060da:	463a      	mov	r2, r7
 80060dc:	4630      	mov	r0, r6
 80060de:	f7ff ffda 	bl	8006096 <__sfputc_r>
 80060e2:	1c43      	adds	r3, r0, #1
 80060e4:	d1f3      	bne.n	80060ce <__sfputs_r+0xa>
 80060e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080060e8 <_vfiprintf_r>:
 80060e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ec:	460d      	mov	r5, r1
 80060ee:	b09d      	sub	sp, #116	@ 0x74
 80060f0:	4614      	mov	r4, r2
 80060f2:	4698      	mov	r8, r3
 80060f4:	4606      	mov	r6, r0
 80060f6:	b118      	cbz	r0, 8006100 <_vfiprintf_r+0x18>
 80060f8:	6a03      	ldr	r3, [r0, #32]
 80060fa:	b90b      	cbnz	r3, 8006100 <_vfiprintf_r+0x18>
 80060fc:	f7ff fcb4 	bl	8005a68 <__sinit>
 8006100:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006102:	07d9      	lsls	r1, r3, #31
 8006104:	d405      	bmi.n	8006112 <_vfiprintf_r+0x2a>
 8006106:	89ab      	ldrh	r3, [r5, #12]
 8006108:	059a      	lsls	r2, r3, #22
 800610a:	d402      	bmi.n	8006112 <_vfiprintf_r+0x2a>
 800610c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800610e:	f7ff fdcc 	bl	8005caa <__retarget_lock_acquire_recursive>
 8006112:	89ab      	ldrh	r3, [r5, #12]
 8006114:	071b      	lsls	r3, r3, #28
 8006116:	d501      	bpl.n	800611c <_vfiprintf_r+0x34>
 8006118:	692b      	ldr	r3, [r5, #16]
 800611a:	b99b      	cbnz	r3, 8006144 <_vfiprintf_r+0x5c>
 800611c:	4629      	mov	r1, r5
 800611e:	4630      	mov	r0, r6
 8006120:	f000 fac6 	bl	80066b0 <__swsetup_r>
 8006124:	b170      	cbz	r0, 8006144 <_vfiprintf_r+0x5c>
 8006126:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006128:	07dc      	lsls	r4, r3, #31
 800612a:	d504      	bpl.n	8006136 <_vfiprintf_r+0x4e>
 800612c:	f04f 30ff 	mov.w	r0, #4294967295
 8006130:	b01d      	add	sp, #116	@ 0x74
 8006132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006136:	89ab      	ldrh	r3, [r5, #12]
 8006138:	0598      	lsls	r0, r3, #22
 800613a:	d4f7      	bmi.n	800612c <_vfiprintf_r+0x44>
 800613c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800613e:	f7ff fdb5 	bl	8005cac <__retarget_lock_release_recursive>
 8006142:	e7f3      	b.n	800612c <_vfiprintf_r+0x44>
 8006144:	2300      	movs	r3, #0
 8006146:	9309      	str	r3, [sp, #36]	@ 0x24
 8006148:	2320      	movs	r3, #32
 800614a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800614e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006152:	2330      	movs	r3, #48	@ 0x30
 8006154:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006304 <_vfiprintf_r+0x21c>
 8006158:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800615c:	f04f 0901 	mov.w	r9, #1
 8006160:	4623      	mov	r3, r4
 8006162:	469a      	mov	sl, r3
 8006164:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006168:	b10a      	cbz	r2, 800616e <_vfiprintf_r+0x86>
 800616a:	2a25      	cmp	r2, #37	@ 0x25
 800616c:	d1f9      	bne.n	8006162 <_vfiprintf_r+0x7a>
 800616e:	ebba 0b04 	subs.w	fp, sl, r4
 8006172:	d00b      	beq.n	800618c <_vfiprintf_r+0xa4>
 8006174:	465b      	mov	r3, fp
 8006176:	4622      	mov	r2, r4
 8006178:	4629      	mov	r1, r5
 800617a:	4630      	mov	r0, r6
 800617c:	f7ff ffa2 	bl	80060c4 <__sfputs_r>
 8006180:	3001      	adds	r0, #1
 8006182:	f000 80a7 	beq.w	80062d4 <_vfiprintf_r+0x1ec>
 8006186:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006188:	445a      	add	r2, fp
 800618a:	9209      	str	r2, [sp, #36]	@ 0x24
 800618c:	f89a 3000 	ldrb.w	r3, [sl]
 8006190:	2b00      	cmp	r3, #0
 8006192:	f000 809f 	beq.w	80062d4 <_vfiprintf_r+0x1ec>
 8006196:	2300      	movs	r3, #0
 8006198:	f04f 32ff 	mov.w	r2, #4294967295
 800619c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061a0:	f10a 0a01 	add.w	sl, sl, #1
 80061a4:	9304      	str	r3, [sp, #16]
 80061a6:	9307      	str	r3, [sp, #28]
 80061a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80061ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80061ae:	4654      	mov	r4, sl
 80061b0:	2205      	movs	r2, #5
 80061b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061b6:	4853      	ldr	r0, [pc, #332]	@ (8006304 <_vfiprintf_r+0x21c>)
 80061b8:	f7fa f80a 	bl	80001d0 <memchr>
 80061bc:	9a04      	ldr	r2, [sp, #16]
 80061be:	b9d8      	cbnz	r0, 80061f8 <_vfiprintf_r+0x110>
 80061c0:	06d1      	lsls	r1, r2, #27
 80061c2:	bf44      	itt	mi
 80061c4:	2320      	movmi	r3, #32
 80061c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80061ca:	0713      	lsls	r3, r2, #28
 80061cc:	bf44      	itt	mi
 80061ce:	232b      	movmi	r3, #43	@ 0x2b
 80061d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80061d4:	f89a 3000 	ldrb.w	r3, [sl]
 80061d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80061da:	d015      	beq.n	8006208 <_vfiprintf_r+0x120>
 80061dc:	9a07      	ldr	r2, [sp, #28]
 80061de:	4654      	mov	r4, sl
 80061e0:	2000      	movs	r0, #0
 80061e2:	f04f 0c0a 	mov.w	ip, #10
 80061e6:	4621      	mov	r1, r4
 80061e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061ec:	3b30      	subs	r3, #48	@ 0x30
 80061ee:	2b09      	cmp	r3, #9
 80061f0:	d94b      	bls.n	800628a <_vfiprintf_r+0x1a2>
 80061f2:	b1b0      	cbz	r0, 8006222 <_vfiprintf_r+0x13a>
 80061f4:	9207      	str	r2, [sp, #28]
 80061f6:	e014      	b.n	8006222 <_vfiprintf_r+0x13a>
 80061f8:	eba0 0308 	sub.w	r3, r0, r8
 80061fc:	fa09 f303 	lsl.w	r3, r9, r3
 8006200:	4313      	orrs	r3, r2
 8006202:	9304      	str	r3, [sp, #16]
 8006204:	46a2      	mov	sl, r4
 8006206:	e7d2      	b.n	80061ae <_vfiprintf_r+0xc6>
 8006208:	9b03      	ldr	r3, [sp, #12]
 800620a:	1d19      	adds	r1, r3, #4
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	9103      	str	r1, [sp, #12]
 8006210:	2b00      	cmp	r3, #0
 8006212:	bfbb      	ittet	lt
 8006214:	425b      	neglt	r3, r3
 8006216:	f042 0202 	orrlt.w	r2, r2, #2
 800621a:	9307      	strge	r3, [sp, #28]
 800621c:	9307      	strlt	r3, [sp, #28]
 800621e:	bfb8      	it	lt
 8006220:	9204      	strlt	r2, [sp, #16]
 8006222:	7823      	ldrb	r3, [r4, #0]
 8006224:	2b2e      	cmp	r3, #46	@ 0x2e
 8006226:	d10a      	bne.n	800623e <_vfiprintf_r+0x156>
 8006228:	7863      	ldrb	r3, [r4, #1]
 800622a:	2b2a      	cmp	r3, #42	@ 0x2a
 800622c:	d132      	bne.n	8006294 <_vfiprintf_r+0x1ac>
 800622e:	9b03      	ldr	r3, [sp, #12]
 8006230:	1d1a      	adds	r2, r3, #4
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	9203      	str	r2, [sp, #12]
 8006236:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800623a:	3402      	adds	r4, #2
 800623c:	9305      	str	r3, [sp, #20]
 800623e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006314 <_vfiprintf_r+0x22c>
 8006242:	7821      	ldrb	r1, [r4, #0]
 8006244:	2203      	movs	r2, #3
 8006246:	4650      	mov	r0, sl
 8006248:	f7f9 ffc2 	bl	80001d0 <memchr>
 800624c:	b138      	cbz	r0, 800625e <_vfiprintf_r+0x176>
 800624e:	9b04      	ldr	r3, [sp, #16]
 8006250:	eba0 000a 	sub.w	r0, r0, sl
 8006254:	2240      	movs	r2, #64	@ 0x40
 8006256:	4082      	lsls	r2, r0
 8006258:	4313      	orrs	r3, r2
 800625a:	3401      	adds	r4, #1
 800625c:	9304      	str	r3, [sp, #16]
 800625e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006262:	4829      	ldr	r0, [pc, #164]	@ (8006308 <_vfiprintf_r+0x220>)
 8006264:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006268:	2206      	movs	r2, #6
 800626a:	f7f9 ffb1 	bl	80001d0 <memchr>
 800626e:	2800      	cmp	r0, #0
 8006270:	d03f      	beq.n	80062f2 <_vfiprintf_r+0x20a>
 8006272:	4b26      	ldr	r3, [pc, #152]	@ (800630c <_vfiprintf_r+0x224>)
 8006274:	bb1b      	cbnz	r3, 80062be <_vfiprintf_r+0x1d6>
 8006276:	9b03      	ldr	r3, [sp, #12]
 8006278:	3307      	adds	r3, #7
 800627a:	f023 0307 	bic.w	r3, r3, #7
 800627e:	3308      	adds	r3, #8
 8006280:	9303      	str	r3, [sp, #12]
 8006282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006284:	443b      	add	r3, r7
 8006286:	9309      	str	r3, [sp, #36]	@ 0x24
 8006288:	e76a      	b.n	8006160 <_vfiprintf_r+0x78>
 800628a:	fb0c 3202 	mla	r2, ip, r2, r3
 800628e:	460c      	mov	r4, r1
 8006290:	2001      	movs	r0, #1
 8006292:	e7a8      	b.n	80061e6 <_vfiprintf_r+0xfe>
 8006294:	2300      	movs	r3, #0
 8006296:	3401      	adds	r4, #1
 8006298:	9305      	str	r3, [sp, #20]
 800629a:	4619      	mov	r1, r3
 800629c:	f04f 0c0a 	mov.w	ip, #10
 80062a0:	4620      	mov	r0, r4
 80062a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062a6:	3a30      	subs	r2, #48	@ 0x30
 80062a8:	2a09      	cmp	r2, #9
 80062aa:	d903      	bls.n	80062b4 <_vfiprintf_r+0x1cc>
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d0c6      	beq.n	800623e <_vfiprintf_r+0x156>
 80062b0:	9105      	str	r1, [sp, #20]
 80062b2:	e7c4      	b.n	800623e <_vfiprintf_r+0x156>
 80062b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80062b8:	4604      	mov	r4, r0
 80062ba:	2301      	movs	r3, #1
 80062bc:	e7f0      	b.n	80062a0 <_vfiprintf_r+0x1b8>
 80062be:	ab03      	add	r3, sp, #12
 80062c0:	9300      	str	r3, [sp, #0]
 80062c2:	462a      	mov	r2, r5
 80062c4:	4b12      	ldr	r3, [pc, #72]	@ (8006310 <_vfiprintf_r+0x228>)
 80062c6:	a904      	add	r1, sp, #16
 80062c8:	4630      	mov	r0, r6
 80062ca:	f3af 8000 	nop.w
 80062ce:	4607      	mov	r7, r0
 80062d0:	1c78      	adds	r0, r7, #1
 80062d2:	d1d6      	bne.n	8006282 <_vfiprintf_r+0x19a>
 80062d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80062d6:	07d9      	lsls	r1, r3, #31
 80062d8:	d405      	bmi.n	80062e6 <_vfiprintf_r+0x1fe>
 80062da:	89ab      	ldrh	r3, [r5, #12]
 80062dc:	059a      	lsls	r2, r3, #22
 80062de:	d402      	bmi.n	80062e6 <_vfiprintf_r+0x1fe>
 80062e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80062e2:	f7ff fce3 	bl	8005cac <__retarget_lock_release_recursive>
 80062e6:	89ab      	ldrh	r3, [r5, #12]
 80062e8:	065b      	lsls	r3, r3, #25
 80062ea:	f53f af1f 	bmi.w	800612c <_vfiprintf_r+0x44>
 80062ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80062f0:	e71e      	b.n	8006130 <_vfiprintf_r+0x48>
 80062f2:	ab03      	add	r3, sp, #12
 80062f4:	9300      	str	r3, [sp, #0]
 80062f6:	462a      	mov	r2, r5
 80062f8:	4b05      	ldr	r3, [pc, #20]	@ (8006310 <_vfiprintf_r+0x228>)
 80062fa:	a904      	add	r1, sp, #16
 80062fc:	4630      	mov	r0, r6
 80062fe:	f000 f879 	bl	80063f4 <_printf_i>
 8006302:	e7e4      	b.n	80062ce <_vfiprintf_r+0x1e6>
 8006304:	080069f7 	.word	0x080069f7
 8006308:	08006a01 	.word	0x08006a01
 800630c:	00000000 	.word	0x00000000
 8006310:	080060c5 	.word	0x080060c5
 8006314:	080069fd 	.word	0x080069fd

08006318 <_printf_common>:
 8006318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800631c:	4616      	mov	r6, r2
 800631e:	4698      	mov	r8, r3
 8006320:	688a      	ldr	r2, [r1, #8]
 8006322:	690b      	ldr	r3, [r1, #16]
 8006324:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006328:	4293      	cmp	r3, r2
 800632a:	bfb8      	it	lt
 800632c:	4613      	movlt	r3, r2
 800632e:	6033      	str	r3, [r6, #0]
 8006330:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006334:	4607      	mov	r7, r0
 8006336:	460c      	mov	r4, r1
 8006338:	b10a      	cbz	r2, 800633e <_printf_common+0x26>
 800633a:	3301      	adds	r3, #1
 800633c:	6033      	str	r3, [r6, #0]
 800633e:	6823      	ldr	r3, [r4, #0]
 8006340:	0699      	lsls	r1, r3, #26
 8006342:	bf42      	ittt	mi
 8006344:	6833      	ldrmi	r3, [r6, #0]
 8006346:	3302      	addmi	r3, #2
 8006348:	6033      	strmi	r3, [r6, #0]
 800634a:	6825      	ldr	r5, [r4, #0]
 800634c:	f015 0506 	ands.w	r5, r5, #6
 8006350:	d106      	bne.n	8006360 <_printf_common+0x48>
 8006352:	f104 0a19 	add.w	sl, r4, #25
 8006356:	68e3      	ldr	r3, [r4, #12]
 8006358:	6832      	ldr	r2, [r6, #0]
 800635a:	1a9b      	subs	r3, r3, r2
 800635c:	42ab      	cmp	r3, r5
 800635e:	dc26      	bgt.n	80063ae <_printf_common+0x96>
 8006360:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006364:	6822      	ldr	r2, [r4, #0]
 8006366:	3b00      	subs	r3, #0
 8006368:	bf18      	it	ne
 800636a:	2301      	movne	r3, #1
 800636c:	0692      	lsls	r2, r2, #26
 800636e:	d42b      	bmi.n	80063c8 <_printf_common+0xb0>
 8006370:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006374:	4641      	mov	r1, r8
 8006376:	4638      	mov	r0, r7
 8006378:	47c8      	blx	r9
 800637a:	3001      	adds	r0, #1
 800637c:	d01e      	beq.n	80063bc <_printf_common+0xa4>
 800637e:	6823      	ldr	r3, [r4, #0]
 8006380:	6922      	ldr	r2, [r4, #16]
 8006382:	f003 0306 	and.w	r3, r3, #6
 8006386:	2b04      	cmp	r3, #4
 8006388:	bf02      	ittt	eq
 800638a:	68e5      	ldreq	r5, [r4, #12]
 800638c:	6833      	ldreq	r3, [r6, #0]
 800638e:	1aed      	subeq	r5, r5, r3
 8006390:	68a3      	ldr	r3, [r4, #8]
 8006392:	bf0c      	ite	eq
 8006394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006398:	2500      	movne	r5, #0
 800639a:	4293      	cmp	r3, r2
 800639c:	bfc4      	itt	gt
 800639e:	1a9b      	subgt	r3, r3, r2
 80063a0:	18ed      	addgt	r5, r5, r3
 80063a2:	2600      	movs	r6, #0
 80063a4:	341a      	adds	r4, #26
 80063a6:	42b5      	cmp	r5, r6
 80063a8:	d11a      	bne.n	80063e0 <_printf_common+0xc8>
 80063aa:	2000      	movs	r0, #0
 80063ac:	e008      	b.n	80063c0 <_printf_common+0xa8>
 80063ae:	2301      	movs	r3, #1
 80063b0:	4652      	mov	r2, sl
 80063b2:	4641      	mov	r1, r8
 80063b4:	4638      	mov	r0, r7
 80063b6:	47c8      	blx	r9
 80063b8:	3001      	adds	r0, #1
 80063ba:	d103      	bne.n	80063c4 <_printf_common+0xac>
 80063bc:	f04f 30ff 	mov.w	r0, #4294967295
 80063c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063c4:	3501      	adds	r5, #1
 80063c6:	e7c6      	b.n	8006356 <_printf_common+0x3e>
 80063c8:	18e1      	adds	r1, r4, r3
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	2030      	movs	r0, #48	@ 0x30
 80063ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80063d2:	4422      	add	r2, r4
 80063d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80063d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80063dc:	3302      	adds	r3, #2
 80063de:	e7c7      	b.n	8006370 <_printf_common+0x58>
 80063e0:	2301      	movs	r3, #1
 80063e2:	4622      	mov	r2, r4
 80063e4:	4641      	mov	r1, r8
 80063e6:	4638      	mov	r0, r7
 80063e8:	47c8      	blx	r9
 80063ea:	3001      	adds	r0, #1
 80063ec:	d0e6      	beq.n	80063bc <_printf_common+0xa4>
 80063ee:	3601      	adds	r6, #1
 80063f0:	e7d9      	b.n	80063a6 <_printf_common+0x8e>
	...

080063f4 <_printf_i>:
 80063f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063f8:	7e0f      	ldrb	r7, [r1, #24]
 80063fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80063fc:	2f78      	cmp	r7, #120	@ 0x78
 80063fe:	4691      	mov	r9, r2
 8006400:	4680      	mov	r8, r0
 8006402:	460c      	mov	r4, r1
 8006404:	469a      	mov	sl, r3
 8006406:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800640a:	d807      	bhi.n	800641c <_printf_i+0x28>
 800640c:	2f62      	cmp	r7, #98	@ 0x62
 800640e:	d80a      	bhi.n	8006426 <_printf_i+0x32>
 8006410:	2f00      	cmp	r7, #0
 8006412:	f000 80d2 	beq.w	80065ba <_printf_i+0x1c6>
 8006416:	2f58      	cmp	r7, #88	@ 0x58
 8006418:	f000 80b9 	beq.w	800658e <_printf_i+0x19a>
 800641c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006420:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006424:	e03a      	b.n	800649c <_printf_i+0xa8>
 8006426:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800642a:	2b15      	cmp	r3, #21
 800642c:	d8f6      	bhi.n	800641c <_printf_i+0x28>
 800642e:	a101      	add	r1, pc, #4	@ (adr r1, 8006434 <_printf_i+0x40>)
 8006430:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006434:	0800648d 	.word	0x0800648d
 8006438:	080064a1 	.word	0x080064a1
 800643c:	0800641d 	.word	0x0800641d
 8006440:	0800641d 	.word	0x0800641d
 8006444:	0800641d 	.word	0x0800641d
 8006448:	0800641d 	.word	0x0800641d
 800644c:	080064a1 	.word	0x080064a1
 8006450:	0800641d 	.word	0x0800641d
 8006454:	0800641d 	.word	0x0800641d
 8006458:	0800641d 	.word	0x0800641d
 800645c:	0800641d 	.word	0x0800641d
 8006460:	080065a1 	.word	0x080065a1
 8006464:	080064cb 	.word	0x080064cb
 8006468:	0800655b 	.word	0x0800655b
 800646c:	0800641d 	.word	0x0800641d
 8006470:	0800641d 	.word	0x0800641d
 8006474:	080065c3 	.word	0x080065c3
 8006478:	0800641d 	.word	0x0800641d
 800647c:	080064cb 	.word	0x080064cb
 8006480:	0800641d 	.word	0x0800641d
 8006484:	0800641d 	.word	0x0800641d
 8006488:	08006563 	.word	0x08006563
 800648c:	6833      	ldr	r3, [r6, #0]
 800648e:	1d1a      	adds	r2, r3, #4
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	6032      	str	r2, [r6, #0]
 8006494:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006498:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800649c:	2301      	movs	r3, #1
 800649e:	e09d      	b.n	80065dc <_printf_i+0x1e8>
 80064a0:	6833      	ldr	r3, [r6, #0]
 80064a2:	6820      	ldr	r0, [r4, #0]
 80064a4:	1d19      	adds	r1, r3, #4
 80064a6:	6031      	str	r1, [r6, #0]
 80064a8:	0606      	lsls	r6, r0, #24
 80064aa:	d501      	bpl.n	80064b0 <_printf_i+0xbc>
 80064ac:	681d      	ldr	r5, [r3, #0]
 80064ae:	e003      	b.n	80064b8 <_printf_i+0xc4>
 80064b0:	0645      	lsls	r5, r0, #25
 80064b2:	d5fb      	bpl.n	80064ac <_printf_i+0xb8>
 80064b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80064b8:	2d00      	cmp	r5, #0
 80064ba:	da03      	bge.n	80064c4 <_printf_i+0xd0>
 80064bc:	232d      	movs	r3, #45	@ 0x2d
 80064be:	426d      	negs	r5, r5
 80064c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064c4:	4859      	ldr	r0, [pc, #356]	@ (800662c <_printf_i+0x238>)
 80064c6:	230a      	movs	r3, #10
 80064c8:	e011      	b.n	80064ee <_printf_i+0xfa>
 80064ca:	6821      	ldr	r1, [r4, #0]
 80064cc:	6833      	ldr	r3, [r6, #0]
 80064ce:	0608      	lsls	r0, r1, #24
 80064d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80064d4:	d402      	bmi.n	80064dc <_printf_i+0xe8>
 80064d6:	0649      	lsls	r1, r1, #25
 80064d8:	bf48      	it	mi
 80064da:	b2ad      	uxthmi	r5, r5
 80064dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80064de:	4853      	ldr	r0, [pc, #332]	@ (800662c <_printf_i+0x238>)
 80064e0:	6033      	str	r3, [r6, #0]
 80064e2:	bf14      	ite	ne
 80064e4:	230a      	movne	r3, #10
 80064e6:	2308      	moveq	r3, #8
 80064e8:	2100      	movs	r1, #0
 80064ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80064ee:	6866      	ldr	r6, [r4, #4]
 80064f0:	60a6      	str	r6, [r4, #8]
 80064f2:	2e00      	cmp	r6, #0
 80064f4:	bfa2      	ittt	ge
 80064f6:	6821      	ldrge	r1, [r4, #0]
 80064f8:	f021 0104 	bicge.w	r1, r1, #4
 80064fc:	6021      	strge	r1, [r4, #0]
 80064fe:	b90d      	cbnz	r5, 8006504 <_printf_i+0x110>
 8006500:	2e00      	cmp	r6, #0
 8006502:	d04b      	beq.n	800659c <_printf_i+0x1a8>
 8006504:	4616      	mov	r6, r2
 8006506:	fbb5 f1f3 	udiv	r1, r5, r3
 800650a:	fb03 5711 	mls	r7, r3, r1, r5
 800650e:	5dc7      	ldrb	r7, [r0, r7]
 8006510:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006514:	462f      	mov	r7, r5
 8006516:	42bb      	cmp	r3, r7
 8006518:	460d      	mov	r5, r1
 800651a:	d9f4      	bls.n	8006506 <_printf_i+0x112>
 800651c:	2b08      	cmp	r3, #8
 800651e:	d10b      	bne.n	8006538 <_printf_i+0x144>
 8006520:	6823      	ldr	r3, [r4, #0]
 8006522:	07df      	lsls	r7, r3, #31
 8006524:	d508      	bpl.n	8006538 <_printf_i+0x144>
 8006526:	6923      	ldr	r3, [r4, #16]
 8006528:	6861      	ldr	r1, [r4, #4]
 800652a:	4299      	cmp	r1, r3
 800652c:	bfde      	ittt	le
 800652e:	2330      	movle	r3, #48	@ 0x30
 8006530:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006534:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006538:	1b92      	subs	r2, r2, r6
 800653a:	6122      	str	r2, [r4, #16]
 800653c:	f8cd a000 	str.w	sl, [sp]
 8006540:	464b      	mov	r3, r9
 8006542:	aa03      	add	r2, sp, #12
 8006544:	4621      	mov	r1, r4
 8006546:	4640      	mov	r0, r8
 8006548:	f7ff fee6 	bl	8006318 <_printf_common>
 800654c:	3001      	adds	r0, #1
 800654e:	d14a      	bne.n	80065e6 <_printf_i+0x1f2>
 8006550:	f04f 30ff 	mov.w	r0, #4294967295
 8006554:	b004      	add	sp, #16
 8006556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800655a:	6823      	ldr	r3, [r4, #0]
 800655c:	f043 0320 	orr.w	r3, r3, #32
 8006560:	6023      	str	r3, [r4, #0]
 8006562:	4833      	ldr	r0, [pc, #204]	@ (8006630 <_printf_i+0x23c>)
 8006564:	2778      	movs	r7, #120	@ 0x78
 8006566:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800656a:	6823      	ldr	r3, [r4, #0]
 800656c:	6831      	ldr	r1, [r6, #0]
 800656e:	061f      	lsls	r7, r3, #24
 8006570:	f851 5b04 	ldr.w	r5, [r1], #4
 8006574:	d402      	bmi.n	800657c <_printf_i+0x188>
 8006576:	065f      	lsls	r7, r3, #25
 8006578:	bf48      	it	mi
 800657a:	b2ad      	uxthmi	r5, r5
 800657c:	6031      	str	r1, [r6, #0]
 800657e:	07d9      	lsls	r1, r3, #31
 8006580:	bf44      	itt	mi
 8006582:	f043 0320 	orrmi.w	r3, r3, #32
 8006586:	6023      	strmi	r3, [r4, #0]
 8006588:	b11d      	cbz	r5, 8006592 <_printf_i+0x19e>
 800658a:	2310      	movs	r3, #16
 800658c:	e7ac      	b.n	80064e8 <_printf_i+0xf4>
 800658e:	4827      	ldr	r0, [pc, #156]	@ (800662c <_printf_i+0x238>)
 8006590:	e7e9      	b.n	8006566 <_printf_i+0x172>
 8006592:	6823      	ldr	r3, [r4, #0]
 8006594:	f023 0320 	bic.w	r3, r3, #32
 8006598:	6023      	str	r3, [r4, #0]
 800659a:	e7f6      	b.n	800658a <_printf_i+0x196>
 800659c:	4616      	mov	r6, r2
 800659e:	e7bd      	b.n	800651c <_printf_i+0x128>
 80065a0:	6833      	ldr	r3, [r6, #0]
 80065a2:	6825      	ldr	r5, [r4, #0]
 80065a4:	6961      	ldr	r1, [r4, #20]
 80065a6:	1d18      	adds	r0, r3, #4
 80065a8:	6030      	str	r0, [r6, #0]
 80065aa:	062e      	lsls	r6, r5, #24
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	d501      	bpl.n	80065b4 <_printf_i+0x1c0>
 80065b0:	6019      	str	r1, [r3, #0]
 80065b2:	e002      	b.n	80065ba <_printf_i+0x1c6>
 80065b4:	0668      	lsls	r0, r5, #25
 80065b6:	d5fb      	bpl.n	80065b0 <_printf_i+0x1bc>
 80065b8:	8019      	strh	r1, [r3, #0]
 80065ba:	2300      	movs	r3, #0
 80065bc:	6123      	str	r3, [r4, #16]
 80065be:	4616      	mov	r6, r2
 80065c0:	e7bc      	b.n	800653c <_printf_i+0x148>
 80065c2:	6833      	ldr	r3, [r6, #0]
 80065c4:	1d1a      	adds	r2, r3, #4
 80065c6:	6032      	str	r2, [r6, #0]
 80065c8:	681e      	ldr	r6, [r3, #0]
 80065ca:	6862      	ldr	r2, [r4, #4]
 80065cc:	2100      	movs	r1, #0
 80065ce:	4630      	mov	r0, r6
 80065d0:	f7f9 fdfe 	bl	80001d0 <memchr>
 80065d4:	b108      	cbz	r0, 80065da <_printf_i+0x1e6>
 80065d6:	1b80      	subs	r0, r0, r6
 80065d8:	6060      	str	r0, [r4, #4]
 80065da:	6863      	ldr	r3, [r4, #4]
 80065dc:	6123      	str	r3, [r4, #16]
 80065de:	2300      	movs	r3, #0
 80065e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065e4:	e7aa      	b.n	800653c <_printf_i+0x148>
 80065e6:	6923      	ldr	r3, [r4, #16]
 80065e8:	4632      	mov	r2, r6
 80065ea:	4649      	mov	r1, r9
 80065ec:	4640      	mov	r0, r8
 80065ee:	47d0      	blx	sl
 80065f0:	3001      	adds	r0, #1
 80065f2:	d0ad      	beq.n	8006550 <_printf_i+0x15c>
 80065f4:	6823      	ldr	r3, [r4, #0]
 80065f6:	079b      	lsls	r3, r3, #30
 80065f8:	d413      	bmi.n	8006622 <_printf_i+0x22e>
 80065fa:	68e0      	ldr	r0, [r4, #12]
 80065fc:	9b03      	ldr	r3, [sp, #12]
 80065fe:	4298      	cmp	r0, r3
 8006600:	bfb8      	it	lt
 8006602:	4618      	movlt	r0, r3
 8006604:	e7a6      	b.n	8006554 <_printf_i+0x160>
 8006606:	2301      	movs	r3, #1
 8006608:	4632      	mov	r2, r6
 800660a:	4649      	mov	r1, r9
 800660c:	4640      	mov	r0, r8
 800660e:	47d0      	blx	sl
 8006610:	3001      	adds	r0, #1
 8006612:	d09d      	beq.n	8006550 <_printf_i+0x15c>
 8006614:	3501      	adds	r5, #1
 8006616:	68e3      	ldr	r3, [r4, #12]
 8006618:	9903      	ldr	r1, [sp, #12]
 800661a:	1a5b      	subs	r3, r3, r1
 800661c:	42ab      	cmp	r3, r5
 800661e:	dcf2      	bgt.n	8006606 <_printf_i+0x212>
 8006620:	e7eb      	b.n	80065fa <_printf_i+0x206>
 8006622:	2500      	movs	r5, #0
 8006624:	f104 0619 	add.w	r6, r4, #25
 8006628:	e7f5      	b.n	8006616 <_printf_i+0x222>
 800662a:	bf00      	nop
 800662c:	08006a08 	.word	0x08006a08
 8006630:	08006a19 	.word	0x08006a19

08006634 <__swbuf_r>:
 8006634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006636:	460e      	mov	r6, r1
 8006638:	4614      	mov	r4, r2
 800663a:	4605      	mov	r5, r0
 800663c:	b118      	cbz	r0, 8006646 <__swbuf_r+0x12>
 800663e:	6a03      	ldr	r3, [r0, #32]
 8006640:	b90b      	cbnz	r3, 8006646 <__swbuf_r+0x12>
 8006642:	f7ff fa11 	bl	8005a68 <__sinit>
 8006646:	69a3      	ldr	r3, [r4, #24]
 8006648:	60a3      	str	r3, [r4, #8]
 800664a:	89a3      	ldrh	r3, [r4, #12]
 800664c:	071a      	lsls	r2, r3, #28
 800664e:	d501      	bpl.n	8006654 <__swbuf_r+0x20>
 8006650:	6923      	ldr	r3, [r4, #16]
 8006652:	b943      	cbnz	r3, 8006666 <__swbuf_r+0x32>
 8006654:	4621      	mov	r1, r4
 8006656:	4628      	mov	r0, r5
 8006658:	f000 f82a 	bl	80066b0 <__swsetup_r>
 800665c:	b118      	cbz	r0, 8006666 <__swbuf_r+0x32>
 800665e:	f04f 37ff 	mov.w	r7, #4294967295
 8006662:	4638      	mov	r0, r7
 8006664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006666:	6823      	ldr	r3, [r4, #0]
 8006668:	6922      	ldr	r2, [r4, #16]
 800666a:	1a98      	subs	r0, r3, r2
 800666c:	6963      	ldr	r3, [r4, #20]
 800666e:	b2f6      	uxtb	r6, r6
 8006670:	4283      	cmp	r3, r0
 8006672:	4637      	mov	r7, r6
 8006674:	dc05      	bgt.n	8006682 <__swbuf_r+0x4e>
 8006676:	4621      	mov	r1, r4
 8006678:	4628      	mov	r0, r5
 800667a:	f7ff fcbb 	bl	8005ff4 <_fflush_r>
 800667e:	2800      	cmp	r0, #0
 8006680:	d1ed      	bne.n	800665e <__swbuf_r+0x2a>
 8006682:	68a3      	ldr	r3, [r4, #8]
 8006684:	3b01      	subs	r3, #1
 8006686:	60a3      	str	r3, [r4, #8]
 8006688:	6823      	ldr	r3, [r4, #0]
 800668a:	1c5a      	adds	r2, r3, #1
 800668c:	6022      	str	r2, [r4, #0]
 800668e:	701e      	strb	r6, [r3, #0]
 8006690:	6962      	ldr	r2, [r4, #20]
 8006692:	1c43      	adds	r3, r0, #1
 8006694:	429a      	cmp	r2, r3
 8006696:	d004      	beq.n	80066a2 <__swbuf_r+0x6e>
 8006698:	89a3      	ldrh	r3, [r4, #12]
 800669a:	07db      	lsls	r3, r3, #31
 800669c:	d5e1      	bpl.n	8006662 <__swbuf_r+0x2e>
 800669e:	2e0a      	cmp	r6, #10
 80066a0:	d1df      	bne.n	8006662 <__swbuf_r+0x2e>
 80066a2:	4621      	mov	r1, r4
 80066a4:	4628      	mov	r0, r5
 80066a6:	f7ff fca5 	bl	8005ff4 <_fflush_r>
 80066aa:	2800      	cmp	r0, #0
 80066ac:	d0d9      	beq.n	8006662 <__swbuf_r+0x2e>
 80066ae:	e7d6      	b.n	800665e <__swbuf_r+0x2a>

080066b0 <__swsetup_r>:
 80066b0:	b538      	push	{r3, r4, r5, lr}
 80066b2:	4b29      	ldr	r3, [pc, #164]	@ (8006758 <__swsetup_r+0xa8>)
 80066b4:	4605      	mov	r5, r0
 80066b6:	6818      	ldr	r0, [r3, #0]
 80066b8:	460c      	mov	r4, r1
 80066ba:	b118      	cbz	r0, 80066c4 <__swsetup_r+0x14>
 80066bc:	6a03      	ldr	r3, [r0, #32]
 80066be:	b90b      	cbnz	r3, 80066c4 <__swsetup_r+0x14>
 80066c0:	f7ff f9d2 	bl	8005a68 <__sinit>
 80066c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066c8:	0719      	lsls	r1, r3, #28
 80066ca:	d422      	bmi.n	8006712 <__swsetup_r+0x62>
 80066cc:	06da      	lsls	r2, r3, #27
 80066ce:	d407      	bmi.n	80066e0 <__swsetup_r+0x30>
 80066d0:	2209      	movs	r2, #9
 80066d2:	602a      	str	r2, [r5, #0]
 80066d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066d8:	81a3      	strh	r3, [r4, #12]
 80066da:	f04f 30ff 	mov.w	r0, #4294967295
 80066de:	e033      	b.n	8006748 <__swsetup_r+0x98>
 80066e0:	0758      	lsls	r0, r3, #29
 80066e2:	d512      	bpl.n	800670a <__swsetup_r+0x5a>
 80066e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80066e6:	b141      	cbz	r1, 80066fa <__swsetup_r+0x4a>
 80066e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80066ec:	4299      	cmp	r1, r3
 80066ee:	d002      	beq.n	80066f6 <__swsetup_r+0x46>
 80066f0:	4628      	mov	r0, r5
 80066f2:	f7ff fafb 	bl	8005cec <_free_r>
 80066f6:	2300      	movs	r3, #0
 80066f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80066fa:	89a3      	ldrh	r3, [r4, #12]
 80066fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006700:	81a3      	strh	r3, [r4, #12]
 8006702:	2300      	movs	r3, #0
 8006704:	6063      	str	r3, [r4, #4]
 8006706:	6923      	ldr	r3, [r4, #16]
 8006708:	6023      	str	r3, [r4, #0]
 800670a:	89a3      	ldrh	r3, [r4, #12]
 800670c:	f043 0308 	orr.w	r3, r3, #8
 8006710:	81a3      	strh	r3, [r4, #12]
 8006712:	6923      	ldr	r3, [r4, #16]
 8006714:	b94b      	cbnz	r3, 800672a <__swsetup_r+0x7a>
 8006716:	89a3      	ldrh	r3, [r4, #12]
 8006718:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800671c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006720:	d003      	beq.n	800672a <__swsetup_r+0x7a>
 8006722:	4621      	mov	r1, r4
 8006724:	4628      	mov	r0, r5
 8006726:	f000 f883 	bl	8006830 <__smakebuf_r>
 800672a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800672e:	f013 0201 	ands.w	r2, r3, #1
 8006732:	d00a      	beq.n	800674a <__swsetup_r+0x9a>
 8006734:	2200      	movs	r2, #0
 8006736:	60a2      	str	r2, [r4, #8]
 8006738:	6962      	ldr	r2, [r4, #20]
 800673a:	4252      	negs	r2, r2
 800673c:	61a2      	str	r2, [r4, #24]
 800673e:	6922      	ldr	r2, [r4, #16]
 8006740:	b942      	cbnz	r2, 8006754 <__swsetup_r+0xa4>
 8006742:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006746:	d1c5      	bne.n	80066d4 <__swsetup_r+0x24>
 8006748:	bd38      	pop	{r3, r4, r5, pc}
 800674a:	0799      	lsls	r1, r3, #30
 800674c:	bf58      	it	pl
 800674e:	6962      	ldrpl	r2, [r4, #20]
 8006750:	60a2      	str	r2, [r4, #8]
 8006752:	e7f4      	b.n	800673e <__swsetup_r+0x8e>
 8006754:	2000      	movs	r0, #0
 8006756:	e7f7      	b.n	8006748 <__swsetup_r+0x98>
 8006758:	2000001c 	.word	0x2000001c

0800675c <_raise_r>:
 800675c:	291f      	cmp	r1, #31
 800675e:	b538      	push	{r3, r4, r5, lr}
 8006760:	4605      	mov	r5, r0
 8006762:	460c      	mov	r4, r1
 8006764:	d904      	bls.n	8006770 <_raise_r+0x14>
 8006766:	2316      	movs	r3, #22
 8006768:	6003      	str	r3, [r0, #0]
 800676a:	f04f 30ff 	mov.w	r0, #4294967295
 800676e:	bd38      	pop	{r3, r4, r5, pc}
 8006770:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006772:	b112      	cbz	r2, 800677a <_raise_r+0x1e>
 8006774:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006778:	b94b      	cbnz	r3, 800678e <_raise_r+0x32>
 800677a:	4628      	mov	r0, r5
 800677c:	f000 f830 	bl	80067e0 <_getpid_r>
 8006780:	4622      	mov	r2, r4
 8006782:	4601      	mov	r1, r0
 8006784:	4628      	mov	r0, r5
 8006786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800678a:	f000 b817 	b.w	80067bc <_kill_r>
 800678e:	2b01      	cmp	r3, #1
 8006790:	d00a      	beq.n	80067a8 <_raise_r+0x4c>
 8006792:	1c59      	adds	r1, r3, #1
 8006794:	d103      	bne.n	800679e <_raise_r+0x42>
 8006796:	2316      	movs	r3, #22
 8006798:	6003      	str	r3, [r0, #0]
 800679a:	2001      	movs	r0, #1
 800679c:	e7e7      	b.n	800676e <_raise_r+0x12>
 800679e:	2100      	movs	r1, #0
 80067a0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80067a4:	4620      	mov	r0, r4
 80067a6:	4798      	blx	r3
 80067a8:	2000      	movs	r0, #0
 80067aa:	e7e0      	b.n	800676e <_raise_r+0x12>

080067ac <raise>:
 80067ac:	4b02      	ldr	r3, [pc, #8]	@ (80067b8 <raise+0xc>)
 80067ae:	4601      	mov	r1, r0
 80067b0:	6818      	ldr	r0, [r3, #0]
 80067b2:	f7ff bfd3 	b.w	800675c <_raise_r>
 80067b6:	bf00      	nop
 80067b8:	2000001c 	.word	0x2000001c

080067bc <_kill_r>:
 80067bc:	b538      	push	{r3, r4, r5, lr}
 80067be:	4d07      	ldr	r5, [pc, #28]	@ (80067dc <_kill_r+0x20>)
 80067c0:	2300      	movs	r3, #0
 80067c2:	4604      	mov	r4, r0
 80067c4:	4608      	mov	r0, r1
 80067c6:	4611      	mov	r1, r2
 80067c8:	602b      	str	r3, [r5, #0]
 80067ca:	f7fa fe49 	bl	8001460 <_kill>
 80067ce:	1c43      	adds	r3, r0, #1
 80067d0:	d102      	bne.n	80067d8 <_kill_r+0x1c>
 80067d2:	682b      	ldr	r3, [r5, #0]
 80067d4:	b103      	cbz	r3, 80067d8 <_kill_r+0x1c>
 80067d6:	6023      	str	r3, [r4, #0]
 80067d8:	bd38      	pop	{r3, r4, r5, pc}
 80067da:	bf00      	nop
 80067dc:	20000414 	.word	0x20000414

080067e0 <_getpid_r>:
 80067e0:	f7fa be36 	b.w	8001450 <_getpid>

080067e4 <__swhatbuf_r>:
 80067e4:	b570      	push	{r4, r5, r6, lr}
 80067e6:	460c      	mov	r4, r1
 80067e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067ec:	2900      	cmp	r1, #0
 80067ee:	b096      	sub	sp, #88	@ 0x58
 80067f0:	4615      	mov	r5, r2
 80067f2:	461e      	mov	r6, r3
 80067f4:	da0d      	bge.n	8006812 <__swhatbuf_r+0x2e>
 80067f6:	89a3      	ldrh	r3, [r4, #12]
 80067f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80067fc:	f04f 0100 	mov.w	r1, #0
 8006800:	bf14      	ite	ne
 8006802:	2340      	movne	r3, #64	@ 0x40
 8006804:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006808:	2000      	movs	r0, #0
 800680a:	6031      	str	r1, [r6, #0]
 800680c:	602b      	str	r3, [r5, #0]
 800680e:	b016      	add	sp, #88	@ 0x58
 8006810:	bd70      	pop	{r4, r5, r6, pc}
 8006812:	466a      	mov	r2, sp
 8006814:	f000 f848 	bl	80068a8 <_fstat_r>
 8006818:	2800      	cmp	r0, #0
 800681a:	dbec      	blt.n	80067f6 <__swhatbuf_r+0x12>
 800681c:	9901      	ldr	r1, [sp, #4]
 800681e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006822:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006826:	4259      	negs	r1, r3
 8006828:	4159      	adcs	r1, r3
 800682a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800682e:	e7eb      	b.n	8006808 <__swhatbuf_r+0x24>

08006830 <__smakebuf_r>:
 8006830:	898b      	ldrh	r3, [r1, #12]
 8006832:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006834:	079d      	lsls	r5, r3, #30
 8006836:	4606      	mov	r6, r0
 8006838:	460c      	mov	r4, r1
 800683a:	d507      	bpl.n	800684c <__smakebuf_r+0x1c>
 800683c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006840:	6023      	str	r3, [r4, #0]
 8006842:	6123      	str	r3, [r4, #16]
 8006844:	2301      	movs	r3, #1
 8006846:	6163      	str	r3, [r4, #20]
 8006848:	b003      	add	sp, #12
 800684a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800684c:	ab01      	add	r3, sp, #4
 800684e:	466a      	mov	r2, sp
 8006850:	f7ff ffc8 	bl	80067e4 <__swhatbuf_r>
 8006854:	9f00      	ldr	r7, [sp, #0]
 8006856:	4605      	mov	r5, r0
 8006858:	4639      	mov	r1, r7
 800685a:	4630      	mov	r0, r6
 800685c:	f7ff faba 	bl	8005dd4 <_malloc_r>
 8006860:	b948      	cbnz	r0, 8006876 <__smakebuf_r+0x46>
 8006862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006866:	059a      	lsls	r2, r3, #22
 8006868:	d4ee      	bmi.n	8006848 <__smakebuf_r+0x18>
 800686a:	f023 0303 	bic.w	r3, r3, #3
 800686e:	f043 0302 	orr.w	r3, r3, #2
 8006872:	81a3      	strh	r3, [r4, #12]
 8006874:	e7e2      	b.n	800683c <__smakebuf_r+0xc>
 8006876:	89a3      	ldrh	r3, [r4, #12]
 8006878:	6020      	str	r0, [r4, #0]
 800687a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800687e:	81a3      	strh	r3, [r4, #12]
 8006880:	9b01      	ldr	r3, [sp, #4]
 8006882:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006886:	b15b      	cbz	r3, 80068a0 <__smakebuf_r+0x70>
 8006888:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800688c:	4630      	mov	r0, r6
 800688e:	f000 f81d 	bl	80068cc <_isatty_r>
 8006892:	b128      	cbz	r0, 80068a0 <__smakebuf_r+0x70>
 8006894:	89a3      	ldrh	r3, [r4, #12]
 8006896:	f023 0303 	bic.w	r3, r3, #3
 800689a:	f043 0301 	orr.w	r3, r3, #1
 800689e:	81a3      	strh	r3, [r4, #12]
 80068a0:	89a3      	ldrh	r3, [r4, #12]
 80068a2:	431d      	orrs	r5, r3
 80068a4:	81a5      	strh	r5, [r4, #12]
 80068a6:	e7cf      	b.n	8006848 <__smakebuf_r+0x18>

080068a8 <_fstat_r>:
 80068a8:	b538      	push	{r3, r4, r5, lr}
 80068aa:	4d07      	ldr	r5, [pc, #28]	@ (80068c8 <_fstat_r+0x20>)
 80068ac:	2300      	movs	r3, #0
 80068ae:	4604      	mov	r4, r0
 80068b0:	4608      	mov	r0, r1
 80068b2:	4611      	mov	r1, r2
 80068b4:	602b      	str	r3, [r5, #0]
 80068b6:	f7fa fe33 	bl	8001520 <_fstat>
 80068ba:	1c43      	adds	r3, r0, #1
 80068bc:	d102      	bne.n	80068c4 <_fstat_r+0x1c>
 80068be:	682b      	ldr	r3, [r5, #0]
 80068c0:	b103      	cbz	r3, 80068c4 <_fstat_r+0x1c>
 80068c2:	6023      	str	r3, [r4, #0]
 80068c4:	bd38      	pop	{r3, r4, r5, pc}
 80068c6:	bf00      	nop
 80068c8:	20000414 	.word	0x20000414

080068cc <_isatty_r>:
 80068cc:	b538      	push	{r3, r4, r5, lr}
 80068ce:	4d06      	ldr	r5, [pc, #24]	@ (80068e8 <_isatty_r+0x1c>)
 80068d0:	2300      	movs	r3, #0
 80068d2:	4604      	mov	r4, r0
 80068d4:	4608      	mov	r0, r1
 80068d6:	602b      	str	r3, [r5, #0]
 80068d8:	f7fa fe32 	bl	8001540 <_isatty>
 80068dc:	1c43      	adds	r3, r0, #1
 80068de:	d102      	bne.n	80068e6 <_isatty_r+0x1a>
 80068e0:	682b      	ldr	r3, [r5, #0]
 80068e2:	b103      	cbz	r3, 80068e6 <_isatty_r+0x1a>
 80068e4:	6023      	str	r3, [r4, #0]
 80068e6:	bd38      	pop	{r3, r4, r5, pc}
 80068e8:	20000414 	.word	0x20000414

080068ec <_gettimeofday>:
 80068ec:	4b02      	ldr	r3, [pc, #8]	@ (80068f8 <_gettimeofday+0xc>)
 80068ee:	2258      	movs	r2, #88	@ 0x58
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	f04f 30ff 	mov.w	r0, #4294967295
 80068f6:	4770      	bx	lr
 80068f8:	20000414 	.word	0x20000414

080068fc <_init>:
 80068fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068fe:	bf00      	nop
 8006900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006902:	bc08      	pop	{r3}
 8006904:	469e      	mov	lr, r3
 8006906:	4770      	bx	lr

08006908 <_fini>:
 8006908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800690a:	bf00      	nop
 800690c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800690e:	bc08      	pop	{r3}
 8006910:	469e      	mov	lr, r3
 8006912:	4770      	bx	lr
