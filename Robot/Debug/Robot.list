
Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006458  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080065e8  080065e8  000075e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006700  08006700  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006700  08006700  00007700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006708  08006708  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006708  08006708  00007708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800670c  0800670c  0000770c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006710  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  2000006c  0800677c  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  0800677c  000083e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9fe  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002355  00000000  00000000  00017a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  00019df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b0f  00000000  00000000  0001ac18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ce66  00000000  00000000  0001b727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ba4  00000000  00000000  0003858d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a828b  00000000  00000000  0004a131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f23bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044c4  00000000  00000000  000f2400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000f68c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080065d0 	.word	0x080065d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080065d0 	.word	0x080065d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f001 f989 	bl	800158c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f929 	bl	80004d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 fb7d 	bl	800097c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000282:	f000 fb4b 	bl	800091c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000286:	f000 fb19 	bl	80008bc <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800028a:	f000 f981 	bl	8000590 <MX_TIM1_Init>
  MX_TIM16_Init();
 800028e:	f000 fa9b 	bl	80007c8 <MX_TIM16_Init>
  MX_TIM2_Init();
 8000292:	f000 fa35 	bl	8000700 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8000296:	4886      	ldr	r0, [pc, #536]	@ (80004b0 <main+0x240>)
 8000298:	f003 f98a 	bl	80035b0 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 800029c:	2200      	movs	r2, #0
 800029e:	2102      	movs	r1, #2
 80002a0:	4884      	ldr	r0, [pc, #528]	@ (80004b4 <main+0x244>)
 80002a2:	f001 fd0f 	bl	8001cc4 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80002a6:	2100      	movs	r1, #0
 80002a8:	4883      	ldr	r0, [pc, #524]	@ (80004b8 <main+0x248>)
 80002aa:	f003 fa25 	bl	80036f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80002ae:	2100      	movs	r1, #0
 80002b0:	487f      	ldr	r0, [pc, #508]	@ (80004b0 <main+0x240>)
 80002b2:	f003 fa21 	bl	80036f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80002b6:	210c      	movs	r1, #12
 80002b8:	487d      	ldr	r0, [pc, #500]	@ (80004b0 <main+0x240>)
 80002ba:	f003 fa1d 	bl	80036f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80002be:	2100      	movs	r1, #0
 80002c0:	487e      	ldr	r0, [pc, #504]	@ (80004bc <main+0x24c>)
 80002c2:	f003 fa19 	bl	80036f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80002c6:	2108      	movs	r1, #8
 80002c8:	487c      	ldr	r0, [pc, #496]	@ (80004bc <main+0x24c>)
 80002ca:	f003 fa15 	bl	80036f8 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //set_ang(0, 0);

  uint16_t counter=1;
 80002ce:	2301      	movs	r3, #1
 80002d0:	80fb      	strh	r3, [r7, #6]
  uint16_t distance;

  /**/
  uint8_t random_number;
  srand(time(NULL));
 80002d2:	2000      	movs	r0, #0
 80002d4:	f005 fab4 	bl	8005840 <time>
 80002d8:	4602      	mov	r2, r0
 80002da:	460b      	mov	r3, r1
 80002dc:	4613      	mov	r3, r2
 80002de:	4618      	mov	r0, r3
 80002e0:	f005 f934 	bl	800554c <srand>

  while (1)
  {
	  bluetooth(); //  testowane bez trybu, wrzucilem do 3
 80002e4:	f000 fc8e 	bl	8000c04 <bluetooth>

	  if(counter>4){
 80002e8:	88fb      	ldrh	r3, [r7, #6]
 80002ea:	2b04      	cmp	r3, #4
 80002ec:	d901      	bls.n	80002f2 <main+0x82>
	  	        	counter=1;
 80002ee:	2301      	movs	r3, #1
 80002f0:	80fb      	strh	r3, [r7, #6]
	  	        }
	  if (HAL_GPIO_ReadPin(ButtonExt_GPIO_Port, ButtonExt_Pin) == GPIO_PIN_SET)
 80002f2:	2104      	movs	r1, #4
 80002f4:	4872      	ldr	r0, [pc, #456]	@ (80004c0 <main+0x250>)
 80002f6:	f001 fccd 	bl	8001c94 <HAL_GPIO_ReadPin>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d106      	bne.n	800030e <main+0x9e>
	      {
	        // If the button is pressed, increment the counter
	        counter++;
 8000300:	88fb      	ldrh	r3, [r7, #6]
 8000302:	3301      	adds	r3, #1
 8000304:	80fb      	strh	r3, [r7, #6]
	        HAL_Delay(500);
 8000306:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800030a:	f001 f9a5 	bl	8001658 <HAL_Delay>

	      }

	  	  display_reset();
 800030e:	f000 fdfd 	bl	8000f0c <display_reset>
	      // Perform different actions based on the counter value
	      switch (counter)
 8000312:	88fb      	ldrh	r3, [r7, #6]
 8000314:	3b01      	subs	r3, #1
 8000316:	2b03      	cmp	r3, #3
 8000318:	f200 80c4 	bhi.w	80004a4 <main+0x234>
 800031c:	a201      	add	r2, pc, #4	@ (adr r2, 8000324 <main+0xb4>)
 800031e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000322:	bf00      	nop
 8000324:	08000335 	.word	0x08000335
 8000328:	08000403 	.word	0x08000403
 800032c:	0800048d 	.word	0x0800048d
 8000330:	0800049b 	.word	0x0800049b
	      {
	      case 1:
	        display_reset();
 8000334:	f000 fdea 	bl	8000f0c <display_reset>
	        display1();
 8000338:	f000 fd6c 	bl	8000e14 <display1>
	        if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 800033c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000340:	485c      	ldr	r0, [pc, #368]	@ (80004b4 <main+0x244>)
 8000342:	f001 fca7 	bl	8001c94 <HAL_GPIO_ReadPin>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	f040 80ad 	bne.w	80004a8 <main+0x238>
	        	      {
	        	        // If the button is pressed, increment the counter
	        	        countdown();
 800034e:	f000 fe0f 	bl	8000f70 <countdown>
	        	        while(1){
	        	        	/*line follower case 1*/

	        	        	 	 	 detect_states[0] = HAL_GPIO_ReadPin(DETECT1_GPIO_Port, DETECT1_Pin);
 8000352:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000356:	4857      	ldr	r0, [pc, #348]	@ (80004b4 <main+0x244>)
 8000358:	f001 fc9c 	bl	8001c94 <HAL_GPIO_ReadPin>
 800035c:	4603      	mov	r3, r0
 800035e:	461a      	mov	r2, r3
 8000360:	4b58      	ldr	r3, [pc, #352]	@ (80004c4 <main+0x254>)
 8000362:	701a      	strb	r2, [r3, #0]
	        	        		      detect_states[1] = HAL_GPIO_ReadPin(DETECT2_GPIO_Port, DETECT2_Pin);
 8000364:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000368:	4852      	ldr	r0, [pc, #328]	@ (80004b4 <main+0x244>)
 800036a:	f001 fc93 	bl	8001c94 <HAL_GPIO_ReadPin>
 800036e:	4603      	mov	r3, r0
 8000370:	461a      	mov	r2, r3
 8000372:	4b54      	ldr	r3, [pc, #336]	@ (80004c4 <main+0x254>)
 8000374:	705a      	strb	r2, [r3, #1]
	        	        		      detect_states[2] = HAL_GPIO_ReadPin(DETECT3_GPIO_Port, DETECT3_Pin);
 8000376:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800037a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800037e:	f001 fc89 	bl	8001c94 <HAL_GPIO_ReadPin>
 8000382:	4603      	mov	r3, r0
 8000384:	461a      	mov	r2, r3
 8000386:	4b4f      	ldr	r3, [pc, #316]	@ (80004c4 <main+0x254>)
 8000388:	709a      	strb	r2, [r3, #2]
	        	        		      detect_states[3] = HAL_GPIO_ReadPin(DETECT4_GPIO_Port, DETECT4_Pin);
 800038a:	2180      	movs	r1, #128	@ 0x80
 800038c:	484c      	ldr	r0, [pc, #304]	@ (80004c0 <main+0x250>)
 800038e:	f001 fc81 	bl	8001c94 <HAL_GPIO_ReadPin>
 8000392:	4603      	mov	r3, r0
 8000394:	461a      	mov	r2, r3
 8000396:	4b4b      	ldr	r3, [pc, #300]	@ (80004c4 <main+0x254>)
 8000398:	70da      	strb	r2, [r3, #3]
	        	        		      detect_states[4] = HAL_GPIO_ReadPin(DETECT5_GPIO_Port, DETECT5_Pin);
 800039a:	2104      	movs	r1, #4
 800039c:	4845      	ldr	r0, [pc, #276]	@ (80004b4 <main+0x244>)
 800039e:	f001 fc79 	bl	8001c94 <HAL_GPIO_ReadPin>
 80003a2:	4603      	mov	r3, r0
 80003a4:	461a      	mov	r2, r3
 80003a6:	4b47      	ldr	r3, [pc, #284]	@ (80004c4 <main+0x254>)
 80003a8:	711a      	strb	r2, [r3, #4]
	        	        		  if(detect_states[2]==0)
 80003aa:	4b46      	ldr	r3, [pc, #280]	@ (80004c4 <main+0x254>)
 80003ac:	789b      	ldrb	r3, [r3, #2]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d105      	bne.n	80003be <main+0x14e>
	        	        		  		  	  {

	        	        		  		  		motor_forward(cycle);
 80003b2:	4b45      	ldr	r3, [pc, #276]	@ (80004c8 <main+0x258>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4618      	mov	r0, r3
 80003b8:	f000 fc6c 	bl	8000c94 <motor_forward>
 80003bc:	e7c9      	b.n	8000352 <main+0xe2>
	        	        		  		  	  }
	        	        		  		  	  else{
	        	        		  		  		  if(detect_states[1]==0 || detect_states[0]==0){
 80003be:	4b41      	ldr	r3, [pc, #260]	@ (80004c4 <main+0x254>)
 80003c0:	785b      	ldrb	r3, [r3, #1]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d003      	beq.n	80003ce <main+0x15e>
 80003c6:	4b3f      	ldr	r3, [pc, #252]	@ (80004c4 <main+0x254>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d105      	bne.n	80003da <main+0x16a>
	        	        		  		  			motor_right(cycle);
 80003ce:	4b3e      	ldr	r3, [pc, #248]	@ (80004c8 <main+0x258>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4618      	mov	r0, r3
 80003d4:	f000 fcb0 	bl	8000d38 <motor_right>
 80003d8:	e012      	b.n	8000400 <main+0x190>
	        	        		  		  		  }
	        	        		  		  		  else if(detect_states[3]==0 || detect_states[4]==0){
 80003da:	4b3a      	ldr	r3, [pc, #232]	@ (80004c4 <main+0x254>)
 80003dc:	78db      	ldrb	r3, [r3, #3]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d003      	beq.n	80003ea <main+0x17a>
 80003e2:	4b38      	ldr	r3, [pc, #224]	@ (80004c4 <main+0x254>)
 80003e4:	791b      	ldrb	r3, [r3, #4]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d105      	bne.n	80003f6 <main+0x186>
	        	        		  		  			motor_left(cycle);
 80003ea:	4b37      	ldr	r3, [pc, #220]	@ (80004c8 <main+0x258>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	4618      	mov	r0, r3
 80003f0:	f000 fc78 	bl	8000ce4 <motor_left>
 80003f4:	e004      	b.n	8000400 <main+0x190>
	        	        		  		  		  		  }
	        	        		  		  		  else{
	        	        		  		  			motor_backward(cycle);
 80003f6:	4b34      	ldr	r3, [pc, #208]	@ (80004c8 <main+0x258>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4618      	mov	r0, r3
 80003fc:	f000 fcc6 	bl	8000d8c <motor_backward>
	        	        	 	 	 detect_states[0] = HAL_GPIO_ReadPin(DETECT1_GPIO_Port, DETECT1_Pin);
 8000400:	e7a7      	b.n	8000352 <main+0xe2>
	        	      }
	        	      }

	        break;
	      case 2:
	        display_reset();
 8000402:	f000 fd83 	bl	8000f0c <display_reset>
	        display2();
 8000406:	f000 fd15 	bl	8000e34 <display2>
	        if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET){
 800040a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800040e:	4829      	ldr	r0, [pc, #164]	@ (80004b4 <main+0x244>)
 8000410:	f001 fc40 	bl	8001c94 <HAL_GPIO_ReadPin>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d148      	bne.n	80004ac <main+0x23c>
	        	countdown();
 800041a:	f000 fda9 	bl	8000f70 <countdown>
	        	display_reset();
 800041e:	f000 fd75 	bl	8000f0c <display_reset>
	        	while(1){
	        		Distance=detectObstacle();
 8000422:	f000 fb67 	bl	8000af4 <detectObstacle>
 8000426:	4603      	mov	r3, r0
 8000428:	b29a      	uxth	r2, r3
 800042a:	4b28      	ldr	r3, [pc, #160]	@ (80004cc <main+0x25c>)
 800042c:	801a      	strh	r2, [r3, #0]
	        		random_number = rand()%2;
 800042e:	f005 f8bb 	bl	80055a8 <rand>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	f003 0301 	and.w	r3, r3, #1
 800043a:	bfb8      	it	lt
 800043c:	425b      	neglt	r3, r3
 800043e:	717b      	strb	r3, [r7, #5]
	        		motor_forward(cycle);
 8000440:	4b21      	ldr	r3, [pc, #132]	@ (80004c8 <main+0x258>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4618      	mov	r0, r3
 8000446:	f000 fc25 	bl	8000c94 <motor_forward>

	        		while(Distance<10){
 800044a:	e01a      	b.n	8000482 <main+0x212>
	        			if(Distance<5){
 800044c:	4b1f      	ldr	r3, [pc, #124]	@ (80004cc <main+0x25c>)
 800044e:	881b      	ldrh	r3, [r3, #0]
 8000450:	2b04      	cmp	r3, #4
 8000452:	d808      	bhi.n	8000466 <main+0x1f6>
	        				do{
	        					motor_backward(cycle);
 8000454:	4b1c      	ldr	r3, [pc, #112]	@ (80004c8 <main+0x258>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4618      	mov	r0, r3
 800045a:	f000 fc97 	bl	8000d8c <motor_backward>
	        				}while(Distance<15);
 800045e:	4b1b      	ldr	r3, [pc, #108]	@ (80004cc <main+0x25c>)
 8000460:	881b      	ldrh	r3, [r3, #0]
 8000462:	2b0e      	cmp	r3, #14
 8000464:	d9f6      	bls.n	8000454 <main+0x1e4>
	        			}
	        			if(random_number==0){
 8000466:	797b      	ldrb	r3, [r7, #5]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d105      	bne.n	8000478 <main+0x208>
	        				motor_left(cycle);
 800046c:	4b16      	ldr	r3, [pc, #88]	@ (80004c8 <main+0x258>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4618      	mov	r0, r3
 8000472:	f000 fc37 	bl	8000ce4 <motor_left>
 8000476:	e004      	b.n	8000482 <main+0x212>
	        			}
	        			else{
	        				motor_right(cycle);
 8000478:	4b13      	ldr	r3, [pc, #76]	@ (80004c8 <main+0x258>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4618      	mov	r0, r3
 800047e:	f000 fc5b 	bl	8000d38 <motor_right>
	        		while(Distance<10){
 8000482:	4b12      	ldr	r3, [pc, #72]	@ (80004cc <main+0x25c>)
 8000484:	881b      	ldrh	r3, [r3, #0]
 8000486:	2b09      	cmp	r3, #9
 8000488:	d9e0      	bls.n	800044c <main+0x1dc>
	        		Distance=detectObstacle();
 800048a:	e7ca      	b.n	8000422 <main+0x1b2>
	        		}
	        	}
	        }
	        break;
	      case 3:
	        display_reset();
 800048c:	f000 fd3e 	bl	8000f0c <display_reset>
	        display3();
 8000490:	f000 fcf8 	bl	8000e84 <display3>
	        bluetooth();
 8000494:	f000 fbb6 	bl	8000c04 <bluetooth>
	        break;
 8000498:	e009      	b.n	80004ae <main+0x23e>
	      case 4:
	        display_reset();
 800049a:	f000 fd37 	bl	8000f0c <display_reset>
	        display4();
 800049e:	f000 fd17 	bl	8000ed0 <display4>
	        break;
 80004a2:	e004      	b.n	80004ae <main+0x23e>
	      default:
	        // Do nothing for other counter values
	        break;
 80004a4:	bf00      	nop
 80004a6:	e71d      	b.n	80002e4 <main+0x74>
	        break;
 80004a8:	bf00      	nop
 80004aa:	e71b      	b.n	80002e4 <main+0x74>
	        break;
 80004ac:	bf00      	nop
	  bluetooth(); //  testowane bez trybu, wrzucilem do 3
 80004ae:	e719      	b.n	80002e4 <main+0x74>
 80004b0:	20000088 	.word	0x20000088
 80004b4:	48000800 	.word	0x48000800
 80004b8:	20000120 	.word	0x20000120
 80004bc:	200000d4 	.word	0x200000d4
 80004c0:	48000400 	.word	0x48000400
 80004c4:	2000028c 	.word	0x2000028c
 80004c8:	20000000 	.word	0x20000000
 80004cc:	20000288 	.word	0x20000288

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b09c      	sub	sp, #112	@ 0x70
 80004d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80004da:	2228      	movs	r2, #40	@ 0x28
 80004dc:	2100      	movs	r1, #0
 80004de:	4618      	mov	r0, r3
 80004e0:	f005 f9a5 	bl	800582e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	60da      	str	r2, [r3, #12]
 80004f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004f4:	463b      	mov	r3, r7
 80004f6:	2234      	movs	r2, #52	@ 0x34
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f005 f997 	bl	800582e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000500:	2301      	movs	r3, #1
 8000502:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000504:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000508:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800050e:	2301      	movs	r3, #1
 8000510:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000512:	2302      	movs	r3, #2
 8000514:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000516:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800051a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800051c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000520:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000522:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000526:	4618      	mov	r0, r3
 8000528:	f001 fbe4 	bl	8001cf4 <HAL_RCC_OscConfig>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000532:	f000 fd3b 	bl	8000fac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000536:	230f      	movs	r3, #15
 8000538:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800053a:	2302      	movs	r3, #2
 800053c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000542:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000546:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000548:	2300      	movs	r3, #0
 800054a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800054c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000550:	2102      	movs	r1, #2
 8000552:	4618      	mov	r0, r3
 8000554:	f002 fc0c 	bl	8002d70 <HAL_RCC_ClockConfig>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800055e:	f000 fd25 	bl	8000fac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 8000562:	4b0a      	ldr	r3, [pc, #40]	@ (800058c <SystemClock_Config+0xbc>)
 8000564:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM16;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000566:	2300      	movs	r3, #0
 8000568:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800056a:	2300      	movs	r3, #0
 800056c:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 800056e:	2300      	movs	r3, #0
 8000570:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000572:	463b      	mov	r3, r7
 8000574:	4618      	mov	r0, r3
 8000576:	f002 fe31 	bl	80031dc <HAL_RCCEx_PeriphCLKConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000580:	f000 fd14 	bl	8000fac <Error_Handler>
  }
}
 8000584:	bf00      	nop
 8000586:	3770      	adds	r7, #112	@ 0x70
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	00081001 	.word	0x00081001

08000590 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b09a      	sub	sp, #104	@ 0x68
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000596:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005b0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
 80005c0:	615a      	str	r2, [r3, #20]
 80005c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	222c      	movs	r2, #44	@ 0x2c
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f005 f92f 	bl	800582e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005d0:	4b49      	ldr	r3, [pc, #292]	@ (80006f8 <MX_TIM1_Init+0x168>)
 80005d2:	4a4a      	ldr	r2, [pc, #296]	@ (80006fc <MX_TIM1_Init+0x16c>)
 80005d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80005d6:	4b48      	ldr	r3, [pc, #288]	@ (80006f8 <MX_TIM1_Init+0x168>)
 80005d8:	2247      	movs	r2, #71	@ 0x47
 80005da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005dc:	4b46      	ldr	r3, [pc, #280]	@ (80006f8 <MX_TIM1_Init+0x168>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80005e2:	4b45      	ldr	r3, [pc, #276]	@ (80006f8 <MX_TIM1_Init+0x168>)
 80005e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80005e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ea:	4b43      	ldr	r3, [pc, #268]	@ (80006f8 <MX_TIM1_Init+0x168>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005f0:	4b41      	ldr	r3, [pc, #260]	@ (80006f8 <MX_TIM1_Init+0x168>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f6:	4b40      	ldr	r3, [pc, #256]	@ (80006f8 <MX_TIM1_Init+0x168>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005fc:	483e      	ldr	r0, [pc, #248]	@ (80006f8 <MX_TIM1_Init+0x168>)
 80005fe:	f002 ff7f 	bl	8003500 <HAL_TIM_Base_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000608:	f000 fcd0 	bl	8000fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800060c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000610:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000612:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000616:	4619      	mov	r1, r3
 8000618:	4837      	ldr	r0, [pc, #220]	@ (80006f8 <MX_TIM1_Init+0x168>)
 800061a:	f003 fa67 	bl	8003aec <HAL_TIM_ConfigClockSource>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000624:	f000 fcc2 	bl	8000fac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000628:	4833      	ldr	r0, [pc, #204]	@ (80006f8 <MX_TIM1_Init+0x168>)
 800062a:	f003 f80d 	bl	8003648 <HAL_TIM_PWM_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000634:	f000 fcba 	bl	8000fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000638:	2300      	movs	r3, #0
 800063a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800063c:	2300      	movs	r3, #0
 800063e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000640:	2300      	movs	r3, #0
 8000642:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000644:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000648:	4619      	mov	r1, r3
 800064a:	482b      	ldr	r0, [pc, #172]	@ (80006f8 <MX_TIM1_Init+0x168>)
 800064c:	f003 feec 	bl	8004428 <HAL_TIMEx_MasterConfigSynchronization>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000656:	f000 fca9 	bl	8000fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800065a:	2360      	movs	r3, #96	@ 0x60
 800065c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000662:	2300      	movs	r3, #0
 8000664:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000666:	2300      	movs	r3, #0
 8000668:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800066a:	2300      	movs	r3, #0
 800066c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800066e:	2300      	movs	r3, #0
 8000670:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000672:	2300      	movs	r3, #0
 8000674:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000676:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800067a:	2200      	movs	r2, #0
 800067c:	4619      	mov	r1, r3
 800067e:	481e      	ldr	r0, [pc, #120]	@ (80006f8 <MX_TIM1_Init+0x168>)
 8000680:	f003 f920 	bl	80038c4 <HAL_TIM_PWM_ConfigChannel>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800068a:	f000 fc8f 	bl	8000fac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800068e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000692:	220c      	movs	r2, #12
 8000694:	4619      	mov	r1, r3
 8000696:	4818      	ldr	r0, [pc, #96]	@ (80006f8 <MX_TIM1_Init+0x168>)
 8000698:	f003 f914 	bl	80038c4 <HAL_TIM_PWM_ConfigChannel>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80006a2:	f000 fc83 	bl	8000fac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006a6:	2300      	movs	r3, #0
 80006a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80006c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80006cc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	4619      	mov	r1, r3
 80006da:	4807      	ldr	r0, [pc, #28]	@ (80006f8 <MX_TIM1_Init+0x168>)
 80006dc:	f003 ff0a 	bl	80044f4 <HAL_TIMEx_ConfigBreakDeadTime>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80006e6:	f000 fc61 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006ea:	4803      	ldr	r0, [pc, #12]	@ (80006f8 <MX_TIM1_Init+0x168>)
 80006ec:	f000 fcda 	bl	80010a4 <HAL_TIM_MspPostInit>

}
 80006f0:	bf00      	nop
 80006f2:	3768      	adds	r7, #104	@ 0x68
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000088 	.word	0x20000088
 80006fc:	40012c00 	.word	0x40012c00

08000700 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	@ 0x28
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000712:	463b      	mov	r3, r7
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
 8000720:	615a      	str	r2, [r3, #20]
 8000722:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000724:	4b27      	ldr	r3, [pc, #156]	@ (80007c4 <MX_TIM2_Init+0xc4>)
 8000726:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800072a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800072c:	4b25      	ldr	r3, [pc, #148]	@ (80007c4 <MX_TIM2_Init+0xc4>)
 800072e:	2247      	movs	r2, #71	@ 0x47
 8000730:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000732:	4b24      	ldr	r3, [pc, #144]	@ (80007c4 <MX_TIM2_Init+0xc4>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000738:	4b22      	ldr	r3, [pc, #136]	@ (80007c4 <MX_TIM2_Init+0xc4>)
 800073a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800073e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000740:	4b20      	ldr	r3, [pc, #128]	@ (80007c4 <MX_TIM2_Init+0xc4>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000746:	4b1f      	ldr	r3, [pc, #124]	@ (80007c4 <MX_TIM2_Init+0xc4>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800074c:	481d      	ldr	r0, [pc, #116]	@ (80007c4 <MX_TIM2_Init+0xc4>)
 800074e:	f002 ff7b 	bl	8003648 <HAL_TIM_PWM_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000758:	f000 fc28 	bl	8000fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000760:	2300      	movs	r3, #0
 8000762:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	4619      	mov	r1, r3
 800076a:	4816      	ldr	r0, [pc, #88]	@ (80007c4 <MX_TIM2_Init+0xc4>)
 800076c:	f003 fe5c 	bl	8004428 <HAL_TIMEx_MasterConfigSynchronization>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000776:	f000 fc19 	bl	8000fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800077a:	2360      	movs	r3, #96	@ 0x60
 800077c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800078a:	463b      	mov	r3, r7
 800078c:	2200      	movs	r2, #0
 800078e:	4619      	mov	r1, r3
 8000790:	480c      	ldr	r0, [pc, #48]	@ (80007c4 <MX_TIM2_Init+0xc4>)
 8000792:	f003 f897 	bl	80038c4 <HAL_TIM_PWM_ConfigChannel>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800079c:	f000 fc06 	bl	8000fac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007a0:	463b      	mov	r3, r7
 80007a2:	2208      	movs	r2, #8
 80007a4:	4619      	mov	r1, r3
 80007a6:	4807      	ldr	r0, [pc, #28]	@ (80007c4 <MX_TIM2_Init+0xc4>)
 80007a8:	f003 f88c 	bl	80038c4 <HAL_TIM_PWM_ConfigChannel>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80007b2:	f000 fbfb 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007b6:	4803      	ldr	r0, [pc, #12]	@ (80007c4 <MX_TIM2_Init+0xc4>)
 80007b8:	f000 fc74 	bl	80010a4 <HAL_TIM_MspPostInit>

}
 80007bc:	bf00      	nop
 80007be:	3728      	adds	r7, #40	@ 0x28
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	200000d4 	.word	0x200000d4

080007c8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b092      	sub	sp, #72	@ 0x48
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]
 80007de:	615a      	str	r2, [r3, #20]
 80007e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007e2:	463b      	mov	r3, r7
 80007e4:	222c      	movs	r2, #44	@ 0x2c
 80007e6:	2100      	movs	r1, #0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f005 f820 	bl	800582e <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80007ee:	4b31      	ldr	r3, [pc, #196]	@ (80008b4 <MX_TIM16_Init+0xec>)
 80007f0:	4a31      	ldr	r2, [pc, #196]	@ (80008b8 <MX_TIM16_Init+0xf0>)
 80007f2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 71;
 80007f4:	4b2f      	ldr	r3, [pc, #188]	@ (80008b4 <MX_TIM16_Init+0xec>)
 80007f6:	2247      	movs	r2, #71	@ 0x47
 80007f8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fa:	4b2e      	ldr	r3, [pc, #184]	@ (80008b4 <MX_TIM16_Init+0xec>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 19999;
 8000800:	4b2c      	ldr	r3, [pc, #176]	@ (80008b4 <MX_TIM16_Init+0xec>)
 8000802:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000806:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000808:	4b2a      	ldr	r3, [pc, #168]	@ (80008b4 <MX_TIM16_Init+0xec>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800080e:	4b29      	ldr	r3, [pc, #164]	@ (80008b4 <MX_TIM16_Init+0xec>)
 8000810:	2200      	movs	r2, #0
 8000812:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000814:	4b27      	ldr	r3, [pc, #156]	@ (80008b4 <MX_TIM16_Init+0xec>)
 8000816:	2280      	movs	r2, #128	@ 0x80
 8000818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800081a:	4826      	ldr	r0, [pc, #152]	@ (80008b4 <MX_TIM16_Init+0xec>)
 800081c:	f002 fe70 	bl	8003500 <HAL_TIM_Base_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000826:	f000 fbc1 	bl	8000fac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800082a:	4822      	ldr	r0, [pc, #136]	@ (80008b4 <MX_TIM16_Init+0xec>)
 800082c:	f002 ff0c 	bl	8003648 <HAL_TIM_PWM_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000836:	f000 fbb9 	bl	8000fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800083a:	2360      	movs	r3, #96	@ 0x60
 800083c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000842:	2300      	movs	r3, #0
 8000844:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000846:	2300      	movs	r3, #0
 8000848:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800084e:	2300      	movs	r3, #0
 8000850:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000852:	2300      	movs	r3, #0
 8000854:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000856:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800085a:	2200      	movs	r2, #0
 800085c:	4619      	mov	r1, r3
 800085e:	4815      	ldr	r0, [pc, #84]	@ (80008b4 <MX_TIM16_Init+0xec>)
 8000860:	f003 f830 	bl	80038c4 <HAL_TIM_PWM_ConfigChannel>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800086a:	f000 fb9f 	bl	8000fac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800086e:	2300      	movs	r3, #0
 8000870:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000882:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000886:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800088c:	2300      	movs	r3, #0
 800088e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000890:	463b      	mov	r3, r7
 8000892:	4619      	mov	r1, r3
 8000894:	4807      	ldr	r0, [pc, #28]	@ (80008b4 <MX_TIM16_Init+0xec>)
 8000896:	f003 fe2d 	bl	80044f4 <HAL_TIMEx_ConfigBreakDeadTime>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80008a0:	f000 fb84 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80008a4:	4803      	ldr	r0, [pc, #12]	@ (80008b4 <MX_TIM16_Init+0xec>)
 80008a6:	f000 fbfd 	bl	80010a4 <HAL_TIM_MspPostInit>

}
 80008aa:	bf00      	nop
 80008ac:	3748      	adds	r7, #72	@ 0x48
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000120 	.word	0x20000120
 80008b8:	40014400 	.word	0x40014400

080008bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008c0:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <MX_USART1_UART_Init+0x58>)
 80008c2:	4a15      	ldr	r2, [pc, #84]	@ (8000918 <MX_USART1_UART_Init+0x5c>)
 80008c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80008c6:	4b13      	ldr	r3, [pc, #76]	@ (8000914 <MX_USART1_UART_Init+0x58>)
 80008c8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80008cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ce:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <MX_USART1_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <MX_USART1_UART_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008da:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <MX_USART1_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <MX_USART1_UART_Init+0x58>)
 80008e2:	220c      	movs	r2, #12
 80008e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000914 <MX_USART1_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ec:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <MX_USART1_UART_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f2:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <MX_USART1_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f8:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <MX_USART1_UART_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	@ (8000914 <MX_USART1_UART_Init+0x58>)
 8000900:	f003 fe70 	bl	80045e4 <HAL_UART_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800090a:	f000 fb4f 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	2000016c 	.word	0x2000016c
 8000918:	40013800 	.word	0x40013800

0800091c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000920:	4b14      	ldr	r3, [pc, #80]	@ (8000974 <MX_USART2_UART_Init+0x58>)
 8000922:	4a15      	ldr	r2, [pc, #84]	@ (8000978 <MX_USART2_UART_Init+0x5c>)
 8000924:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000926:	4b13      	ldr	r3, [pc, #76]	@ (8000974 <MX_USART2_UART_Init+0x58>)
 8000928:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800092c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800092e:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <MX_USART2_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000934:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <MX_USART2_UART_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800093a:	4b0e      	ldr	r3, [pc, #56]	@ (8000974 <MX_USART2_UART_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000940:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <MX_USART2_UART_Init+0x58>)
 8000942:	220c      	movs	r2, #12
 8000944:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000946:	4b0b      	ldr	r3, [pc, #44]	@ (8000974 <MX_USART2_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800094c:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <MX_USART2_UART_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000952:	4b08      	ldr	r3, [pc, #32]	@ (8000974 <MX_USART2_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000958:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <MX_USART2_UART_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800095e:	4805      	ldr	r0, [pc, #20]	@ (8000974 <MX_USART2_UART_Init+0x58>)
 8000960:	f003 fe40 	bl	80045e4 <HAL_UART_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800096a:	f000 fb1f 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200001f4 	.word	0x200001f4
 8000978:	40004400 	.word	0x40004400

0800097c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	@ 0x28
 8000980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000992:	4b55      	ldr	r3, [pc, #340]	@ (8000ae8 <MX_GPIO_Init+0x16c>)
 8000994:	695b      	ldr	r3, [r3, #20]
 8000996:	4a54      	ldr	r2, [pc, #336]	@ (8000ae8 <MX_GPIO_Init+0x16c>)
 8000998:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800099c:	6153      	str	r3, [r2, #20]
 800099e:	4b52      	ldr	r3, [pc, #328]	@ (8000ae8 <MX_GPIO_Init+0x16c>)
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009aa:	4b4f      	ldr	r3, [pc, #316]	@ (8000ae8 <MX_GPIO_Init+0x16c>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	4a4e      	ldr	r2, [pc, #312]	@ (8000ae8 <MX_GPIO_Init+0x16c>)
 80009b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009b4:	6153      	str	r3, [r2, #20]
 80009b6:	4b4c      	ldr	r3, [pc, #304]	@ (8000ae8 <MX_GPIO_Init+0x16c>)
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	4b49      	ldr	r3, [pc, #292]	@ (8000ae8 <MX_GPIO_Init+0x16c>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	4a48      	ldr	r2, [pc, #288]	@ (8000ae8 <MX_GPIO_Init+0x16c>)
 80009c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009cc:	6153      	str	r3, [r2, #20]
 80009ce:	4b46      	ldr	r3, [pc, #280]	@ (8000ae8 <MX_GPIO_Init+0x16c>)
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009da:	4b43      	ldr	r3, [pc, #268]	@ (8000ae8 <MX_GPIO_Init+0x16c>)
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	4a42      	ldr	r2, [pc, #264]	@ (8000ae8 <MX_GPIO_Init+0x16c>)
 80009e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009e4:	6153      	str	r3, [r2, #20]
 80009e6:	4b40      	ldr	r3, [pc, #256]	@ (8000ae8 <MX_GPIO_Init+0x16c>)
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TRIGGER_Pin|C_Pin|B_Pin|A_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80009f8:	483c      	ldr	r0, [pc, #240]	@ (8000aec <MX_GPIO_Init+0x170>)
 80009fa:	f001 f963 	bl	8001cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|E_Pin|D_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f641 0103 	movw	r1, #6147	@ 0x1803
 8000a04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a08:	f001 f95c 	bl	8001cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, G_Pin|F_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 8000a12:	4837      	ldr	r0, [pc, #220]	@ (8000af0 <MX_GPIO_Init+0x174>)
 8000a14:	f001 f956 	bl	8001cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a1e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	482f      	ldr	r0, [pc, #188]	@ (8000aec <MX_GPIO_Init+0x170>)
 8000a30:	f000 ffbe 	bl	80019b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ECHO_Pin DETECT5_Pin DETECT1_Pin DETECT2_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin|DETECT5_Pin|DETECT1_Pin|DETECT2_Pin;
 8000a34:	f241 4305 	movw	r3, #5125	@ 0x1405
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	4828      	ldr	r0, [pc, #160]	@ (8000aec <MX_GPIO_Init+0x170>)
 8000a4a:	f000 ffb1 	bl	80019b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIGGER_Pin C_Pin B_Pin A_Pin */
  GPIO_InitStruct.Pin = TRIGGER_Pin|C_Pin|B_Pin|A_Pin;
 8000a4e:	f44f 73b1 	mov.w	r3, #354	@ 0x162
 8000a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	4821      	ldr	r0, [pc, #132]	@ (8000aec <MX_GPIO_Init+0x170>)
 8000a68:	f000 ffa2 	bl	80019b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin E_Pin D_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|E_Pin|D_Pin;
 8000a6c:	f641 0303 	movw	r3, #6147	@ 0x1803
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a88:	f000 ff92 	bl	80019b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ButtonExt_Pin DETECT4_Pin */
  GPIO_InitStruct.Pin = ButtonExt_Pin|DETECT4_Pin;
 8000a8c:	2384      	movs	r3, #132	@ 0x84
 8000a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4814      	ldr	r0, [pc, #80]	@ (8000af0 <MX_GPIO_Init+0x174>)
 8000aa0:	f000 ff86 	bl	80019b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : G_Pin F_Pin LD2_Pin */
  GPIO_InitStruct.Pin = G_Pin|F_Pin|LD2_Pin;
 8000aa4:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	480c      	ldr	r0, [pc, #48]	@ (8000af0 <MX_GPIO_Init+0x174>)
 8000abe:	f000 ff77 	bl	80019b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DETECT3_Pin */
  GPIO_InitStruct.Pin = DETECT3_Pin;
 8000ac2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DETECT3_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ada:	f000 ff69 	bl	80019b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ade:	bf00      	nop
 8000ae0:	3728      	adds	r7, #40	@ 0x28
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	48000800 	.word	0x48000800
 8000af0:	48000400 	.word	0x48000400

08000af4 <detectObstacle>:

/* USER CODE BEGIN 4 */

int detectObstacle(void){
 8000af4:	b598      	push	{r3, r4, r7, lr}
 8000af6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000af8:	2201      	movs	r2, #1
 8000afa:	2102      	movs	r1, #2
 8000afc:	483a      	ldr	r0, [pc, #232]	@ (8000be8 <detectObstacle+0xf4>)
 8000afe:	f001 f8e1 	bl	8001cc4 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000b02:	4b3a      	ldr	r3, [pc, #232]	@ (8000bec <detectObstacle+0xf8>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2200      	movs	r2, #0
 8000b08:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000b0a:	bf00      	nop
 8000b0c:	4b37      	ldr	r3, [pc, #220]	@ (8000bec <detectObstacle+0xf8>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b12:	2b09      	cmp	r3, #9
 8000b14:	d9fa      	bls.n	8000b0c <detectObstacle+0x18>
	HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);  // pull the TRIG p
 8000b16:	2200      	movs	r2, #0
 8000b18:	2102      	movs	r1, #2
 8000b1a:	4833      	ldr	r0, [pc, #204]	@ (8000be8 <detectObstacle+0xf4>)
 8000b1c:	f001 f8d2 	bl	8001cc4 <HAL_GPIO_WritePin>
	pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000b20:	f000 fd8e 	bl	8001640 <HAL_GetTick>
 8000b24:	4603      	mov	r3, r0
 8000b26:	4a32      	ldr	r2, [pc, #200]	@ (8000bf0 <detectObstacle+0xfc>)
 8000b28:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (ECHO_GPIO_Port, ECHO_Pin)) && pMillis + 10 >  HAL_GetTick());
 8000b2a:	bf00      	nop
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	482e      	ldr	r0, [pc, #184]	@ (8000be8 <detectObstacle+0xf4>)
 8000b30:	f001 f8b0 	bl	8001c94 <HAL_GPIO_ReadPin>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d108      	bne.n	8000b4c <detectObstacle+0x58>
 8000b3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000bf0 <detectObstacle+0xfc>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f103 040a 	add.w	r4, r3, #10
 8000b42:	f000 fd7d 	bl	8001640 <HAL_GetTick>
 8000b46:	4603      	mov	r3, r0
 8000b48:	429c      	cmp	r4, r3
 8000b4a:	d8ef      	bhi.n	8000b2c <detectObstacle+0x38>
	Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 8000b4c:	4b27      	ldr	r3, [pc, #156]	@ (8000bec <detectObstacle+0xf8>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b52:	4a28      	ldr	r2, [pc, #160]	@ (8000bf4 <detectObstacle+0x100>)
 8000b54:	6013      	str	r3, [r2, #0]

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000b56:	f000 fd73 	bl	8001640 <HAL_GetTick>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	4a24      	ldr	r2, [pc, #144]	@ (8000bf0 <detectObstacle+0xfc>)
 8000b5e:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (ECHO_GPIO_Port, ECHO_Pin)) && pMillis + 50 > HAL_GetTick());
 8000b60:	bf00      	nop
 8000b62:	2101      	movs	r1, #1
 8000b64:	4820      	ldr	r0, [pc, #128]	@ (8000be8 <detectObstacle+0xf4>)
 8000b66:	f001 f895 	bl	8001c94 <HAL_GPIO_ReadPin>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d008      	beq.n	8000b82 <detectObstacle+0x8e>
 8000b70:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf0 <detectObstacle+0xfc>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 8000b78:	f000 fd62 	bl	8001640 <HAL_GetTick>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	429c      	cmp	r4, r3
 8000b80:	d8ef      	bhi.n	8000b62 <detectObstacle+0x6e>
	Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 8000b82:	4b1a      	ldr	r3, [pc, #104]	@ (8000bec <detectObstacle+0xf8>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b88:	4a1b      	ldr	r2, [pc, #108]	@ (8000bf8 <detectObstacle+0x104>)
 8000b8a:	6013      	str	r3, [r2, #0]

	Distance = (Value2-Value1) /58;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf8 <detectObstacle+0x104>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b18      	ldr	r3, [pc, #96]	@ (8000bf4 <detectObstacle+0x100>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	4a19      	ldr	r2, [pc, #100]	@ (8000bfc <detectObstacle+0x108>)
 8000b98:	fba2 2303 	umull	r2, r3, r2, r3
 8000b9c:	095b      	lsrs	r3, r3, #5
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	4b17      	ldr	r3, [pc, #92]	@ (8000c00 <detectObstacle+0x10c>)
 8000ba2:	801a      	strh	r2, [r3, #0]
	if(Distance<10){
 8000ba4:	4b16      	ldr	r3, [pc, #88]	@ (8000c00 <detectObstacle+0x10c>)
 8000ba6:	881b      	ldrh	r3, [r3, #0]
 8000ba8:	2b09      	cmp	r3, #9
 8000baa:	d80c      	bhi.n	8000bc6 <detectObstacle+0xd2>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000bac:	2201      	movs	r2, #1
 8000bae:	2101      	movs	r1, #1
 8000bb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb4:	f001 f886 	bl	8001cc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2102      	movs	r1, #2
 8000bbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc0:	f001 f880 	bl	8001cc4 <HAL_GPIO_WritePin>
 8000bc4:	e00b      	b.n	8000bde <detectObstacle+0xea>
	}
	else{
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2101      	movs	r1, #1
 8000bca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bce:	f001 f879 	bl	8001cc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bda:	f001 f873 	bl	8001cc4 <HAL_GPIO_WritePin>
	}
	return Distance;
 8000bde:	4b08      	ldr	r3, [pc, #32]	@ (8000c00 <detectObstacle+0x10c>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	bd98      	pop	{r3, r4, r7, pc}
 8000be6:	bf00      	nop
 8000be8:	48000800 	.word	0x48000800
 8000bec:	20000088 	.word	0x20000088
 8000bf0:	2000027c 	.word	0x2000027c
 8000bf4:	20000280 	.word	0x20000280
 8000bf8:	20000284 	.word	0x20000284
 8000bfc:	8d3dcb09 	.word	0x8d3dcb09
 8000c00:	20000288 	.word	0x20000288

08000c04 <bluetooth>:


void bluetooth(void) { // obsługa sterowania poprzez moduł bluetooth zs-040/hc-06
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0

    if (HAL_UART_Receive(&huart1, &receivedChar, 1, 0) == HAL_OK) {
 8000c08:	2300      	movs	r3, #0
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	491e      	ldr	r1, [pc, #120]	@ (8000c88 <bluetooth+0x84>)
 8000c0e:	481f      	ldr	r0, [pc, #124]	@ (8000c8c <bluetooth+0x88>)
 8000c10:	f003 fd36 	bl	8004680 <HAL_UART_Receive>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d12d      	bne.n	8000c76 <bluetooth+0x72>
        if (receivedChar == 's') {
 8000c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c88 <bluetooth+0x84>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b73      	cmp	r3, #115	@ 0x73
 8000c20:	d105      	bne.n	8000c2e <bluetooth+0x2a>
            motor_backward(cycle);
 8000c22:	4b1b      	ldr	r3, [pc, #108]	@ (8000c90 <bluetooth+0x8c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 f8b0 	bl	8000d8c <motor_backward>
 8000c2c:	e023      	b.n	8000c76 <bluetooth+0x72>
        } else if (receivedChar == 'w') {
 8000c2e:	4b16      	ldr	r3, [pc, #88]	@ (8000c88 <bluetooth+0x84>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b77      	cmp	r3, #119	@ 0x77
 8000c34:	d105      	bne.n	8000c42 <bluetooth+0x3e>
            motor_forward(cycle);
 8000c36:	4b16      	ldr	r3, [pc, #88]	@ (8000c90 <bluetooth+0x8c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 f82a 	bl	8000c94 <motor_forward>
 8000c40:	e019      	b.n	8000c76 <bluetooth+0x72>
        } else if (receivedChar == 'a') {
 8000c42:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <bluetooth+0x84>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b61      	cmp	r3, #97	@ 0x61
 8000c48:	d105      	bne.n	8000c56 <bluetooth+0x52>
            motor_left(cycle);
 8000c4a:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <bluetooth+0x8c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 f848 	bl	8000ce4 <motor_left>
 8000c54:	e00f      	b.n	8000c76 <bluetooth+0x72>
        } else if (receivedChar == 'd') {
 8000c56:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <bluetooth+0x84>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b64      	cmp	r3, #100	@ 0x64
 8000c5c:	d105      	bne.n	8000c6a <bluetooth+0x66>
            motor_right(cycle);
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <bluetooth+0x8c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f868 	bl	8000d38 <motor_right>
 8000c68:	e005      	b.n	8000c76 <bluetooth+0x72>
        } else if (receivedChar == 'q') {
 8000c6a:	4b07      	ldr	r3, [pc, #28]	@ (8000c88 <bluetooth+0x84>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b71      	cmp	r3, #113	@ 0x71
 8000c70:	d101      	bne.n	8000c76 <bluetooth+0x72>
            motor_stop();
 8000c72:	f000 f8b3 	bl	8000ddc <motor_stop>
        }
    }
    HAL_UART_Receive(&huart1, &receivedChar, 1,0);
 8000c76:	2300      	movs	r3, #0
 8000c78:	2201      	movs	r2, #1
 8000c7a:	4903      	ldr	r1, [pc, #12]	@ (8000c88 <bluetooth+0x84>)
 8000c7c:	4803      	ldr	r0, [pc, #12]	@ (8000c8c <bluetooth+0x88>)
 8000c7e:	f003 fcff 	bl	8004680 <HAL_UART_Receive>
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000291 	.word	0x20000291
 8000c8c:	2000016c 	.word	0x2000016c
 8000c90:	20000000 	.word	0x20000000

08000c94 <motor_forward>:
    (detect_states[0] != 0 && detect_states[1] != 0) ? turnover(&axle, 'a') :
    (detect_states[2] != 0 && detect_states[3] != 0 && detect_states[4] != 0) ? turnover(&axle, 'd') : 0;
}

void motor_forward(uint32_t duty_cycle)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle);
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <motor_forward+0x44>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <motor_forward+0x44>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle*3/4);
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	4613      	mov	r3, r2
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	441a      	add	r2, r3
 8000cb4:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <motor_forward+0x48>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	0892      	lsrs	r2, r2, #2
 8000cba:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000cbc:	4b07      	ldr	r3, [pc, #28]	@ (8000cdc <motor_forward+0x48>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cca:	4805      	ldr	r0, [pc, #20]	@ (8000ce0 <motor_forward+0x4c>)
 8000ccc:	f000 fffa 	bl	8001cc4 <HAL_GPIO_WritePin>
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000088 	.word	0x20000088
 8000cdc:	200000d4 	.word	0x200000d4
 8000ce0:	48000400 	.word	0x48000400

08000ce4 <motor_left>:
void motor_left(uint32_t duty_cycle)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000cec:	4b0e      	ldr	r3, [pc, #56]	@ (8000d28 <motor_left+0x44>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, duty_cycle/5);
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d28 <motor_left+0x44>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	490c      	ldr	r1, [pc, #48]	@ (8000d2c <motor_left+0x48>)
 8000cfc:	fba1 1202 	umull	r1, r2, r1, r2
 8000d00:	0892      	lsrs	r2, r2, #2
 8000d02:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle);
 8000d04:	4b0a      	ldr	r3, [pc, #40]	@ (8000d30 <motor_left+0x4c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000d0c:	4b08      	ldr	r3, [pc, #32]	@ (8000d30 <motor_left+0x4c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2200      	movs	r2, #0
 8000d12:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000d14:	2201      	movs	r2, #1
 8000d16:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d1a:	4806      	ldr	r0, [pc, #24]	@ (8000d34 <motor_left+0x50>)
 8000d1c:	f000 ffd2 	bl	8001cc4 <HAL_GPIO_WritePin>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000088 	.word	0x20000088
 8000d2c:	cccccccd 	.word	0xcccccccd
 8000d30:	200000d4 	.word	0x200000d4
 8000d34:	48000400 	.word	0x48000400

08000d38 <motor_right>:
void motor_right(uint32_t duty_cycle)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle);
 8000d40:	4b0e      	ldr	r3, [pc, #56]	@ (8000d7c <motor_right+0x44>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8000d48:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <motor_right+0x44>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000d50:	4b0b      	ldr	r3, [pc, #44]	@ (8000d80 <motor_right+0x48>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2200      	movs	r2, #0
 8000d56:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle/5);
 8000d58:	4b09      	ldr	r3, [pc, #36]	@ (8000d80 <motor_right+0x48>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	4909      	ldr	r1, [pc, #36]	@ (8000d84 <motor_right+0x4c>)
 8000d60:	fba1 1202 	umull	r1, r2, r1, r2
 8000d64:	0892      	lsrs	r2, r2, #2
 8000d66:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d6e:	4806      	ldr	r0, [pc, #24]	@ (8000d88 <motor_right+0x50>)
 8000d70:	f000 ffa8 	bl	8001cc4 <HAL_GPIO_WritePin>
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000088 	.word	0x20000088
 8000d80:	200000d4 	.word	0x200000d4
 8000d84:	cccccccd 	.word	0xcccccccd
 8000d88:	48000400 	.word	0x48000400

08000d8c <motor_backward>:

// Function to move motors backward
void motor_backward(uint32_t duty_cycle)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000d94:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd0 <motor_backward+0x44>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, duty_cycle);
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd0 <motor_backward+0x44>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000da4:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd4 <motor_backward+0x48>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2200      	movs	r2, #0
 8000daa:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle*3/4);
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	4613      	mov	r3, r2
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	441a      	add	r2, r3
 8000db4:	4b07      	ldr	r3, [pc, #28]	@ (8000dd4 <motor_backward+0x48>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	0892      	lsrs	r2, r2, #2
 8000dba:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dc2:	4805      	ldr	r0, [pc, #20]	@ (8000dd8 <motor_backward+0x4c>)
 8000dc4:	f000 ff7e 	bl	8001cc4 <HAL_GPIO_WritePin>
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000088 	.word	0x20000088
 8000dd4:	200000d4 	.word	0x200000d4
 8000dd8:	48000400 	.word	0x48000400

08000ddc <motor_stop>:

// Function to stop motors
void motor_stop(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000de0:	4b0a      	ldr	r3, [pc, #40]	@ (8000e0c <motor_stop+0x30>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2200      	movs	r2, #0
 8000de6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8000de8:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <motor_stop+0x30>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2200      	movs	r2, #0
 8000dee:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000df0:	4b07      	ldr	r3, [pc, #28]	@ (8000e10 <motor_stop+0x34>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2200      	movs	r2, #0
 8000df6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000df8:	4b05      	ldr	r3, [pc, #20]	@ (8000e10 <motor_stop+0x34>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20000088 	.word	0x20000088
 8000e10:	200000d4 	.word	0x200000d4

08000e14 <display1>:
void display1(void){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2140      	movs	r1, #64	@ 0x40
 8000e1c:	4804      	ldr	r0, [pc, #16]	@ (8000e30 <display1+0x1c>)
 8000e1e:	f000 ff51 	bl	8001cc4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8000e22:	2201      	movs	r2, #1
 8000e24:	2120      	movs	r1, #32
 8000e26:	4802      	ldr	r0, [pc, #8]	@ (8000e30 <display1+0x1c>)
 8000e28:	f000 ff4c 	bl	8001cc4 <HAL_GPIO_WritePin>
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	48000800 	.word	0x48000800

08000e34 <display2>:
void display2(void){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	//2
		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e3e:	480f      	ldr	r0, [pc, #60]	@ (8000e7c <display2+0x48>)
 8000e40:	f000 ff40 	bl	8001cc4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8000e44:	2201      	movs	r2, #1
 8000e46:	2140      	movs	r1, #64	@ 0x40
 8000e48:	480c      	ldr	r0, [pc, #48]	@ (8000e7c <display2+0x48>)
 8000e4a:	f000 ff3b 	bl	8001cc4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8000e4e:	2201      	movs	r2, #1
 8000e50:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e54:	480a      	ldr	r0, [pc, #40]	@ (8000e80 <display2+0x4c>)
 8000e56:	f000 ff35 	bl	8001cc4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e64:	f000 ff2e 	bl	8001cc4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e72:	f000 ff27 	bl	8001cc4 <HAL_GPIO_WritePin>

}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	48000800 	.word	0x48000800
 8000e80:	48000400 	.word	0x48000400

08000e84 <display3>:
void display3(void){
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
	//3
		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e8e:	480e      	ldr	r0, [pc, #56]	@ (8000ec8 <display3+0x44>)
 8000e90:	f000 ff18 	bl	8001cc4 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8000e94:	2201      	movs	r2, #1
 8000e96:	2140      	movs	r1, #64	@ 0x40
 8000e98:	480b      	ldr	r0, [pc, #44]	@ (8000ec8 <display3+0x44>)
 8000e9a:	f000 ff13 	bl	8001cc4 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ea4:	4809      	ldr	r0, [pc, #36]	@ (8000ecc <display3+0x48>)
 8000ea6:	f000 ff0d 	bl	8001cc4 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	2120      	movs	r1, #32
 8000eae:	4806      	ldr	r0, [pc, #24]	@ (8000ec8 <display3+0x44>)
 8000eb0:	f000 ff08 	bl	8001cc4 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000eba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ebe:	f000 ff01 	bl	8001cc4 <HAL_GPIO_WritePin>
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	48000800 	.word	0x48000800
 8000ecc:	48000400 	.word	0x48000400

08000ed0 <display4>:
void display4(void){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	//4
		  	HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000eda:	480a      	ldr	r0, [pc, #40]	@ (8000f04 <display4+0x34>)
 8000edc:	f000 fef2 	bl	8001cc4 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ee6:	4807      	ldr	r0, [pc, #28]	@ (8000f04 <display4+0x34>)
 8000ee8:	f000 feec 	bl	8001cc4 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8000eec:	2201      	movs	r2, #1
 8000eee:	2140      	movs	r1, #64	@ 0x40
 8000ef0:	4805      	ldr	r0, [pc, #20]	@ (8000f08 <display4+0x38>)
 8000ef2:	f000 fee7 	bl	8001cc4 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2120      	movs	r1, #32
 8000efa:	4803      	ldr	r0, [pc, #12]	@ (8000f08 <display4+0x38>)
 8000efc:	f000 fee2 	bl	8001cc4 <HAL_GPIO_WritePin>
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	48000400 	.word	0x48000400
 8000f08:	48000800 	.word	0x48000800

08000f0c <display_reset>:
void display_reset(void){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f16:	4814      	ldr	r0, [pc, #80]	@ (8000f68 <display_reset+0x5c>)
 8000f18:	f000 fed4 	bl	8001cc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2140      	movs	r1, #64	@ 0x40
 8000f20:	4811      	ldr	r0, [pc, #68]	@ (8000f68 <display_reset+0x5c>)
 8000f22:	f000 fecf 	bl	8001cc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2120      	movs	r1, #32
 8000f2a:	480f      	ldr	r0, [pc, #60]	@ (8000f68 <display_reset+0x5c>)
 8000f2c:	f000 feca 	bl	8001cc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f3a:	f000 fec3 	bl	8001cc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f48:	f000 febc 	bl	8001cc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f52:	4806      	ldr	r0, [pc, #24]	@ (8000f6c <display_reset+0x60>)
 8000f54:	f000 feb6 	bl	8001cc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f5e:	4803      	ldr	r0, [pc, #12]	@ (8000f6c <display_reset+0x60>)
 8000f60:	f000 feb0 	bl	8001cc4 <HAL_GPIO_WritePin>

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	48000800 	.word	0x48000800
 8000f6c:	48000400 	.word	0x48000400

08000f70 <countdown>:

void countdown(void){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	display_reset();
 8000f74:	f7ff ffca 	bl	8000f0c <display_reset>
	display3();
 8000f78:	f7ff ff84 	bl	8000e84 <display3>
	HAL_Delay(1000);
 8000f7c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f80:	f000 fb6a 	bl	8001658 <HAL_Delay>
	display_reset();
 8000f84:	f7ff ffc2 	bl	8000f0c <display_reset>
	display2();
 8000f88:	f7ff ff54 	bl	8000e34 <display2>
	HAL_Delay(1000);
 8000f8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f90:	f000 fb62 	bl	8001658 <HAL_Delay>
	display_reset();
 8000f94:	f7ff ffba 	bl	8000f0c <display_reset>
	display1();
 8000f98:	f7ff ff3c 	bl	8000e14 <display1>
	HAL_Delay(1000);
 8000f9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fa0:	f000 fb5a 	bl	8001658 <HAL_Delay>
	display_reset();
 8000fa4:	f7ff ffb2 	bl	8000f0c <display_reset>
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}

08000fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb0:	b672      	cpsid	i
}
 8000fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <Error_Handler+0x8>

08000fb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000ffc <HAL_MspInit+0x44>)
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	4a0e      	ldr	r2, [pc, #56]	@ (8000ffc <HAL_MspInit+0x44>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6193      	str	r3, [r2, #24]
 8000fca:	4b0c      	ldr	r3, [pc, #48]	@ (8000ffc <HAL_MspInit+0x44>)
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd6:	4b09      	ldr	r3, [pc, #36]	@ (8000ffc <HAL_MspInit+0x44>)
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	4a08      	ldr	r2, [pc, #32]	@ (8000ffc <HAL_MspInit+0x44>)
 8000fdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fe0:	61d3      	str	r3, [r2, #28]
 8000fe2:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <HAL_MspInit+0x44>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fee:	2007      	movs	r0, #7
 8000ff0:	f000 fc26 	bl	8001840 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40021000 	.word	0x40021000

08001000 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a13      	ldr	r2, [pc, #76]	@ (800105c <HAL_TIM_Base_MspInit+0x5c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d10c      	bne.n	800102c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001012:	4b13      	ldr	r3, [pc, #76]	@ (8001060 <HAL_TIM_Base_MspInit+0x60>)
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	4a12      	ldr	r2, [pc, #72]	@ (8001060 <HAL_TIM_Base_MspInit+0x60>)
 8001018:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800101c:	6193      	str	r3, [r2, #24]
 800101e:	4b10      	ldr	r3, [pc, #64]	@ (8001060 <HAL_TIM_Base_MspInit+0x60>)
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800102a:	e010      	b.n	800104e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0c      	ldr	r2, [pc, #48]	@ (8001064 <HAL_TIM_Base_MspInit+0x64>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d10b      	bne.n	800104e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001036:	4b0a      	ldr	r3, [pc, #40]	@ (8001060 <HAL_TIM_Base_MspInit+0x60>)
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	4a09      	ldr	r2, [pc, #36]	@ (8001060 <HAL_TIM_Base_MspInit+0x60>)
 800103c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001040:	6193      	str	r3, [r2, #24]
 8001042:	4b07      	ldr	r3, [pc, #28]	@ (8001060 <HAL_TIM_Base_MspInit+0x60>)
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
}
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	40012c00 	.word	0x40012c00
 8001060:	40021000 	.word	0x40021000
 8001064:	40014400 	.word	0x40014400

08001068 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001078:	d10b      	bne.n	8001092 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800107a:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <HAL_TIM_PWM_MspInit+0x38>)
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	4a08      	ldr	r2, [pc, #32]	@ (80010a0 <HAL_TIM_PWM_MspInit+0x38>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	61d3      	str	r3, [r2, #28]
 8001086:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <HAL_TIM_PWM_MspInit+0x38>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001092:	bf00      	nop
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40021000 	.word	0x40021000

080010a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08c      	sub	sp, #48	@ 0x30
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a51      	ldr	r2, [pc, #324]	@ (8001208 <HAL_TIM_MspPostInit+0x164>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d13a      	bne.n	800113c <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c6:	4b51      	ldr	r3, [pc, #324]	@ (800120c <HAL_TIM_MspPostInit+0x168>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	4a50      	ldr	r2, [pc, #320]	@ (800120c <HAL_TIM_MspPostInit+0x168>)
 80010cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80010d0:	6153      	str	r3, [r2, #20]
 80010d2:	4b4e      	ldr	r3, [pc, #312]	@ (800120c <HAL_TIM_MspPostInit+0x168>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80010da:	61bb      	str	r3, [r7, #24]
 80010dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	4b4b      	ldr	r3, [pc, #300]	@ (800120c <HAL_TIM_MspPostInit+0x168>)
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	4a4a      	ldr	r2, [pc, #296]	@ (800120c <HAL_TIM_MspPostInit+0x168>)
 80010e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010e8:	6153      	str	r3, [r2, #20]
 80010ea:	4b48      	ldr	r3, [pc, #288]	@ (800120c <HAL_TIM_MspPostInit+0x168>)
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = L2_Pin;
 80010f6:	2308      	movs	r3, #8
 80010f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001106:	2302      	movs	r3, #2
 8001108:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(L2_GPIO_Port, &GPIO_InitStruct);
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	4619      	mov	r1, r3
 8001110:	483f      	ldr	r0, [pc, #252]	@ (8001210 <HAL_TIM_MspPostInit+0x16c>)
 8001112:	f000 fc4d 	bl	80019b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = L1_Pin;
 8001116:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800111a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2300      	movs	r3, #0
 8001126:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001128:	2306      	movs	r3, #6
 800112a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(L1_GPIO_Port, &GPIO_InitStruct);
 800112c:	f107 031c 	add.w	r3, r7, #28
 8001130:	4619      	mov	r1, r3
 8001132:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001136:	f000 fc3b 	bl	80019b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800113a:	e061      	b.n	8001200 <HAL_TIM_MspPostInit+0x15c>
  else if(htim->Instance==TIM2)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001144:	d13a      	bne.n	80011bc <HAL_TIM_MspPostInit+0x118>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	4b31      	ldr	r3, [pc, #196]	@ (800120c <HAL_TIM_MspPostInit+0x168>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a30      	ldr	r2, [pc, #192]	@ (800120c <HAL_TIM_MspPostInit+0x168>)
 800114c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001150:	6153      	str	r3, [r2, #20]
 8001152:	4b2e      	ldr	r3, [pc, #184]	@ (800120c <HAL_TIM_MspPostInit+0x168>)
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	4b2b      	ldr	r3, [pc, #172]	@ (800120c <HAL_TIM_MspPostInit+0x168>)
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	4a2a      	ldr	r2, [pc, #168]	@ (800120c <HAL_TIM_MspPostInit+0x168>)
 8001164:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001168:	6153      	str	r3, [r2, #20]
 800116a:	4b28      	ldr	r3, [pc, #160]	@ (800120c <HAL_TIM_MspPostInit+0x168>)
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = P1_Pin;
 8001176:	2320      	movs	r3, #32
 8001178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001186:	2301      	movs	r3, #1
 8001188:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(P1_GPIO_Port, &GPIO_InitStruct);
 800118a:	f107 031c 	add.w	r3, r7, #28
 800118e:	4619      	mov	r1, r3
 8001190:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001194:	f000 fc0c 	bl	80019b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = P2_Pin;
 8001198:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800119c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011aa:	2301      	movs	r3, #1
 80011ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(P2_GPIO_Port, &GPIO_InitStruct);
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	4619      	mov	r1, r3
 80011b4:	4817      	ldr	r0, [pc, #92]	@ (8001214 <HAL_TIM_MspPostInit+0x170>)
 80011b6:	f000 fbfb 	bl	80019b0 <HAL_GPIO_Init>
}
 80011ba:	e021      	b.n	8001200 <HAL_TIM_MspPostInit+0x15c>
  else if(htim->Instance==TIM16)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a15      	ldr	r2, [pc, #84]	@ (8001218 <HAL_TIM_MspPostInit+0x174>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d11c      	bne.n	8001200 <HAL_TIM_MspPostInit+0x15c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	4b11      	ldr	r3, [pc, #68]	@ (800120c <HAL_TIM_MspPostInit+0x168>)
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	4a10      	ldr	r2, [pc, #64]	@ (800120c <HAL_TIM_MspPostInit+0x168>)
 80011cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011d0:	6153      	str	r3, [r2, #20]
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <HAL_TIM_MspPostInit+0x168>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011de:	2340      	movs	r3, #64	@ 0x40
 80011e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80011ee:	2301      	movs	r3, #1
 80011f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f2:	f107 031c 	add.w	r3, r7, #28
 80011f6:	4619      	mov	r1, r3
 80011f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011fc:	f000 fbd8 	bl	80019b0 <HAL_GPIO_Init>
}
 8001200:	bf00      	nop
 8001202:	3730      	adds	r7, #48	@ 0x30
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40012c00 	.word	0x40012c00
 800120c:	40021000 	.word	0x40021000
 8001210:	48000800 	.word	0x48000800
 8001214:	48000400 	.word	0x48000400
 8001218:	40014400 	.word	0x40014400

0800121c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08c      	sub	sp, #48	@ 0x30
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 031c 	add.w	r3, r7, #28
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a33      	ldr	r2, [pc, #204]	@ (8001308 <HAL_UART_MspInit+0xec>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d12a      	bne.n	8001294 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800123e:	4b33      	ldr	r3, [pc, #204]	@ (800130c <HAL_UART_MspInit+0xf0>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	4a32      	ldr	r2, [pc, #200]	@ (800130c <HAL_UART_MspInit+0xf0>)
 8001244:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001248:	6193      	str	r3, [r2, #24]
 800124a:	4b30      	ldr	r3, [pc, #192]	@ (800130c <HAL_UART_MspInit+0xf0>)
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001252:	61bb      	str	r3, [r7, #24]
 8001254:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	4b2d      	ldr	r3, [pc, #180]	@ (800130c <HAL_UART_MspInit+0xf0>)
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	4a2c      	ldr	r2, [pc, #176]	@ (800130c <HAL_UART_MspInit+0xf0>)
 800125c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001260:	6153      	str	r3, [r2, #20]
 8001262:	4b2a      	ldr	r3, [pc, #168]	@ (800130c <HAL_UART_MspInit+0xf0>)
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800126e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001280:	2307      	movs	r3, #7
 8001282:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	4619      	mov	r1, r3
 800128a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800128e:	f000 fb8f 	bl	80019b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001292:	e035      	b.n	8001300 <HAL_UART_MspInit+0xe4>
  else if(huart->Instance==USART2)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a1d      	ldr	r2, [pc, #116]	@ (8001310 <HAL_UART_MspInit+0xf4>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d130      	bne.n	8001300 <HAL_UART_MspInit+0xe4>
    __HAL_RCC_USART2_CLK_ENABLE();
 800129e:	4b1b      	ldr	r3, [pc, #108]	@ (800130c <HAL_UART_MspInit+0xf0>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	4a1a      	ldr	r2, [pc, #104]	@ (800130c <HAL_UART_MspInit+0xf0>)
 80012a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012a8:	61d3      	str	r3, [r2, #28]
 80012aa:	4b18      	ldr	r3, [pc, #96]	@ (800130c <HAL_UART_MspInit+0xf0>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	4b15      	ldr	r3, [pc, #84]	@ (800130c <HAL_UART_MspInit+0xf0>)
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	4a14      	ldr	r2, [pc, #80]	@ (800130c <HAL_UART_MspInit+0xf0>)
 80012bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012c0:	6153      	str	r3, [r2, #20]
 80012c2:	4b12      	ldr	r3, [pc, #72]	@ (800130c <HAL_UART_MspInit+0xf0>)
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012ce:	230c      	movs	r3, #12
 80012d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	2300      	movs	r3, #0
 80012dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012de:	2307      	movs	r3, #7
 80012e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	4619      	mov	r1, r3
 80012e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ec:	f000 fb60 	bl	80019b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2100      	movs	r1, #0
 80012f4:	2026      	movs	r0, #38	@ 0x26
 80012f6:	f000 faae 	bl	8001856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012fa:	2026      	movs	r0, #38	@ 0x26
 80012fc:	f000 fac7 	bl	800188e <HAL_NVIC_EnableIRQ>
}
 8001300:	bf00      	nop
 8001302:	3730      	adds	r7, #48	@ 0x30
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40013800 	.word	0x40013800
 800130c:	40021000 	.word	0x40021000
 8001310:	40004400 	.word	0x40004400

08001314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <NMI_Handler+0x4>

0800131c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <HardFault_Handler+0x4>

08001324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <MemManage_Handler+0x4>

0800132c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <BusFault_Handler+0x4>

08001334 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <UsageFault_Handler+0x4>

0800133c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800136a:	f000 f955 	bl	8001618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001378:	4802      	ldr	r0, [pc, #8]	@ (8001384 <USART2_IRQHandler+0x10>)
 800137a:	f003 fa4b 	bl	8004814 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200001f4 	.word	0x200001f4

08001388 <_getpid>:
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
 800138c:	2301      	movs	r3, #1
 800138e:	4618      	mov	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <_kill>:
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
 80013a2:	f004 fac1 	bl	8005928 <__errno>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2216      	movs	r2, #22
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	f04f 33ff 	mov.w	r3, #4294967295
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <_exit>:
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	f04f 31ff 	mov.w	r1, #4294967295
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ffe7 	bl	8001398 <_kill>
 80013ca:	bf00      	nop
 80013cc:	e7fd      	b.n	80013ca <_exit+0x12>

080013ce <_read>:
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b086      	sub	sp, #24
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	60f8      	str	r0, [r7, #12]
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	e00a      	b.n	80013f6 <_read+0x28>
 80013e0:	f3af 8000 	nop.w
 80013e4:	4601      	mov	r1, r0
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	1c5a      	adds	r2, r3, #1
 80013ea:	60ba      	str	r2, [r7, #8]
 80013ec:	b2ca      	uxtb	r2, r1
 80013ee:	701a      	strb	r2, [r3, #0]
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	3301      	adds	r3, #1
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	dbf0      	blt.n	80013e0 <_read+0x12>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <_write>:
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	e009      	b.n	800142e <_write+0x26>
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	1c5a      	adds	r2, r3, #1
 800141e:	60ba      	str	r2, [r7, #8]
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f3af 8000 	nop.w
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	3301      	adds	r3, #1
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	429a      	cmp	r2, r3
 8001434:	dbf1      	blt.n	800141a <_write+0x12>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4618      	mov	r0, r3
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <_close>:
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	f04f 33ff 	mov.w	r3, #4294967295
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <_fstat>:
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	2300      	movs	r3, #0
 800146c:	4618      	mov	r0, r3
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <_isatty>:
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	2301      	movs	r3, #1
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <_lseek>:
 800148e:	b480      	push	{r7}
 8001490:	b085      	sub	sp, #20
 8001492:	af00      	add	r7, sp, #0
 8001494:	60f8      	str	r0, [r7, #12]
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
 800149a:	2300      	movs	r3, #0
 800149c:	4618      	mov	r0, r3
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <_sbrk>:
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	4a14      	ldr	r2, [pc, #80]	@ (8001504 <_sbrk+0x5c>)
 80014b2:	4b15      	ldr	r3, [pc, #84]	@ (8001508 <_sbrk+0x60>)
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	4b13      	ldr	r3, [pc, #76]	@ (800150c <_sbrk+0x64>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d102      	bne.n	80014ca <_sbrk+0x22>
 80014c4:	4b11      	ldr	r3, [pc, #68]	@ (800150c <_sbrk+0x64>)
 80014c6:	4a12      	ldr	r2, [pc, #72]	@ (8001510 <_sbrk+0x68>)
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	4b10      	ldr	r3, [pc, #64]	@ (800150c <_sbrk+0x64>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d207      	bcs.n	80014e8 <_sbrk+0x40>
 80014d8:	f004 fa26 	bl	8005928 <__errno>
 80014dc:	4603      	mov	r3, r0
 80014de:	220c      	movs	r2, #12
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295
 80014e6:	e009      	b.n	80014fc <_sbrk+0x54>
 80014e8:	4b08      	ldr	r3, [pc, #32]	@ (800150c <_sbrk+0x64>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b07      	ldr	r3, [pc, #28]	@ (800150c <_sbrk+0x64>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	4a05      	ldr	r2, [pc, #20]	@ (800150c <_sbrk+0x64>)
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	4618      	mov	r0, r3
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20004000 	.word	0x20004000
 8001508:	00000400 	.word	0x00000400
 800150c:	20000294 	.word	0x20000294
 8001510:	200003e8 	.word	0x200003e8

08001514 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001518:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <SystemInit+0x20>)
 800151a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800151e:	4a05      	ldr	r2, [pc, #20]	@ (8001534 <SystemInit+0x20>)
 8001520:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001524:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <Reset_Handler>:
 8001538:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001570 <LoopForever+0x2>
 800153c:	f7ff ffea 	bl	8001514 <SystemInit>
 8001540:	480c      	ldr	r0, [pc, #48]	@ (8001574 <LoopForever+0x6>)
 8001542:	490d      	ldr	r1, [pc, #52]	@ (8001578 <LoopForever+0xa>)
 8001544:	4a0d      	ldr	r2, [pc, #52]	@ (800157c <LoopForever+0xe>)
 8001546:	2300      	movs	r3, #0
 8001548:	e002      	b.n	8001550 <LoopCopyDataInit>

0800154a <CopyDataInit>:
 800154a:	58d4      	ldr	r4, [r2, r3]
 800154c:	50c4      	str	r4, [r0, r3]
 800154e:	3304      	adds	r3, #4

08001550 <LoopCopyDataInit>:
 8001550:	18c4      	adds	r4, r0, r3
 8001552:	428c      	cmp	r4, r1
 8001554:	d3f9      	bcc.n	800154a <CopyDataInit>
 8001556:	4a0a      	ldr	r2, [pc, #40]	@ (8001580 <LoopForever+0x12>)
 8001558:	4c0a      	ldr	r4, [pc, #40]	@ (8001584 <LoopForever+0x16>)
 800155a:	2300      	movs	r3, #0
 800155c:	e001      	b.n	8001562 <LoopFillZerobss>

0800155e <FillZerobss>:
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	3204      	adds	r2, #4

08001562 <LoopFillZerobss>:
 8001562:	42a2      	cmp	r2, r4
 8001564:	d3fb      	bcc.n	800155e <FillZerobss>
 8001566:	f004 f9e5 	bl	8005934 <__libc_init_array>
 800156a:	f7fe fe81 	bl	8000270 <main>

0800156e <LoopForever>:
 800156e:	e7fe      	b.n	800156e <LoopForever>
 8001570:	20004000 	.word	0x20004000
 8001574:	20000000 	.word	0x20000000
 8001578:	2000006c 	.word	0x2000006c
 800157c:	08006710 	.word	0x08006710
 8001580:	2000006c 	.word	0x2000006c
 8001584:	200003e8 	.word	0x200003e8

08001588 <ADC1_IRQHandler>:
 8001588:	e7fe      	b.n	8001588 <ADC1_IRQHandler>
	...

0800158c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001590:	4b08      	ldr	r3, [pc, #32]	@ (80015b4 <HAL_Init+0x28>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a07      	ldr	r2, [pc, #28]	@ (80015b4 <HAL_Init+0x28>)
 8001596:	f043 0310 	orr.w	r3, r3, #16
 800159a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800159c:	2003      	movs	r0, #3
 800159e:	f000 f94f 	bl	8001840 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015a2:	2000      	movs	r0, #0
 80015a4:	f000 f808 	bl	80015b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a8:	f7ff fd06 	bl	8000fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40022000 	.word	0x40022000

080015b8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015c0:	4b12      	ldr	r3, [pc, #72]	@ (800160c <HAL_InitTick+0x54>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b12      	ldr	r3, [pc, #72]	@ (8001610 <HAL_InitTick+0x58>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4619      	mov	r1, r3
 80015ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80015d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 f967 	bl	80018aa <HAL_SYSTICK_Config>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e00e      	b.n	8001604 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b0f      	cmp	r3, #15
 80015ea:	d80a      	bhi.n	8001602 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ec:	2200      	movs	r2, #0
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295
 80015f4:	f000 f92f 	bl	8001856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f8:	4a06      	ldr	r2, [pc, #24]	@ (8001614 <HAL_InitTick+0x5c>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	e000      	b.n	8001604 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000004 	.word	0x20000004
 8001610:	2000000c 	.word	0x2000000c
 8001614:	20000008 	.word	0x20000008

08001618 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800161c:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <HAL_IncTick+0x20>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	461a      	mov	r2, r3
 8001622:	4b06      	ldr	r3, [pc, #24]	@ (800163c <HAL_IncTick+0x24>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4413      	add	r3, r2
 8001628:	4a04      	ldr	r2, [pc, #16]	@ (800163c <HAL_IncTick+0x24>)
 800162a:	6013      	str	r3, [r2, #0]
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	2000000c 	.word	0x2000000c
 800163c:	20000298 	.word	0x20000298

08001640 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return uwTick;  
 8001644:	4b03      	ldr	r3, [pc, #12]	@ (8001654 <HAL_GetTick+0x14>)
 8001646:	681b      	ldr	r3, [r3, #0]
}
 8001648:	4618      	mov	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	20000298 	.word	0x20000298

08001658 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001660:	f7ff ffee 	bl	8001640 <HAL_GetTick>
 8001664:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001670:	d005      	beq.n	800167e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001672:	4b0a      	ldr	r3, [pc, #40]	@ (800169c <HAL_Delay+0x44>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4413      	add	r3, r2
 800167c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800167e:	bf00      	nop
 8001680:	f7ff ffde 	bl	8001640 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	429a      	cmp	r2, r3
 800168e:	d8f7      	bhi.n	8001680 <HAL_Delay+0x28>
  {
  }
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	2000000c 	.word	0x2000000c

080016a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b0:	4b0c      	ldr	r3, [pc, #48]	@ (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016bc:	4013      	ands	r3, r2
 80016be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d2:	4a04      	ldr	r2, [pc, #16]	@ (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	60d3      	str	r3, [r2, #12]
}
 80016d8:	bf00      	nop
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ec:	4b04      	ldr	r3, [pc, #16]	@ (8001700 <__NVIC_GetPriorityGrouping+0x18>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	0a1b      	lsrs	r3, r3, #8
 80016f2:	f003 0307 	and.w	r3, r3, #7
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	2b00      	cmp	r3, #0
 8001714:	db0b      	blt.n	800172e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	f003 021f 	and.w	r2, r3, #31
 800171c:	4907      	ldr	r1, [pc, #28]	@ (800173c <__NVIC_EnableIRQ+0x38>)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	095b      	lsrs	r3, r3, #5
 8001724:	2001      	movs	r0, #1
 8001726:	fa00 f202 	lsl.w	r2, r0, r2
 800172a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000e100 	.word	0xe000e100

08001740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	6039      	str	r1, [r7, #0]
 800174a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001750:	2b00      	cmp	r3, #0
 8001752:	db0a      	blt.n	800176a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	b2da      	uxtb	r2, r3
 8001758:	490c      	ldr	r1, [pc, #48]	@ (800178c <__NVIC_SetPriority+0x4c>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	0112      	lsls	r2, r2, #4
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	440b      	add	r3, r1
 8001764:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001768:	e00a      	b.n	8001780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4908      	ldr	r1, [pc, #32]	@ (8001790 <__NVIC_SetPriority+0x50>)
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	3b04      	subs	r3, #4
 8001778:	0112      	lsls	r2, r2, #4
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	440b      	add	r3, r1
 800177e:	761a      	strb	r2, [r3, #24]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000e100 	.word	0xe000e100
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	@ 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f1c3 0307 	rsb	r3, r3, #7
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	bf28      	it	cs
 80017b2:	2304      	movcs	r3, #4
 80017b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3304      	adds	r3, #4
 80017ba:	2b06      	cmp	r3, #6
 80017bc:	d902      	bls.n	80017c4 <NVIC_EncodePriority+0x30>
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3b03      	subs	r3, #3
 80017c2:	e000      	b.n	80017c6 <NVIC_EncodePriority+0x32>
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	f04f 32ff 	mov.w	r2, #4294967295
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43da      	mvns	r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	401a      	ands	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017dc:	f04f 31ff 	mov.w	r1, #4294967295
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	43d9      	mvns	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	4313      	orrs	r3, r2
         );
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3724      	adds	r7, #36	@ 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3b01      	subs	r3, #1
 8001808:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800180c:	d301      	bcc.n	8001812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800180e:	2301      	movs	r3, #1
 8001810:	e00f      	b.n	8001832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001812:	4a0a      	ldr	r2, [pc, #40]	@ (800183c <SysTick_Config+0x40>)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3b01      	subs	r3, #1
 8001818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181a:	210f      	movs	r1, #15
 800181c:	f04f 30ff 	mov.w	r0, #4294967295
 8001820:	f7ff ff8e 	bl	8001740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001824:	4b05      	ldr	r3, [pc, #20]	@ (800183c <SysTick_Config+0x40>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182a:	4b04      	ldr	r3, [pc, #16]	@ (800183c <SysTick_Config+0x40>)
 800182c:	2207      	movs	r2, #7
 800182e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	e000e010 	.word	0xe000e010

08001840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff ff29 	bl	80016a0 <__NVIC_SetPriorityGrouping>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b086      	sub	sp, #24
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
 8001862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001868:	f7ff ff3e 	bl	80016e8 <__NVIC_GetPriorityGrouping>
 800186c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	6978      	ldr	r0, [r7, #20]
 8001874:	f7ff ff8e 	bl	8001794 <NVIC_EncodePriority>
 8001878:	4602      	mov	r2, r0
 800187a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff5d 	bl	8001740 <__NVIC_SetPriority>
}
 8001886:	bf00      	nop
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	4603      	mov	r3, r0
 8001896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff31 	bl	8001704 <__NVIC_EnableIRQ>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff ffa2 	bl	80017fc <SysTick_Config>
 80018b8:	4603      	mov	r3, r0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d008      	beq.n	80018e6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2204      	movs	r2, #4
 80018d8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e020      	b.n	8001928 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 020e 	bic.w	r2, r2, #14
 80018f4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 0201 	bic.w	r2, r2, #1
 8001904:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800190e:	2101      	movs	r1, #1
 8001910:	fa01 f202 	lsl.w	r2, r1, r2
 8001914:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800193c:	2300      	movs	r3, #0
 800193e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001946:	2b02      	cmp	r3, #2
 8001948:	d005      	beq.n	8001956 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2204      	movs	r2, #4
 800194e:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	73fb      	strb	r3, [r7, #15]
 8001954:	e027      	b.n	80019a6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 020e 	bic.w	r2, r2, #14
 8001964:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 0201 	bic.w	r2, r2, #1
 8001974:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800197e:	2101      	movs	r1, #1
 8001980:	fa01 f202 	lsl.w	r2, r1, r2
 8001984:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	4798      	blx	r3
    } 
  }
  return status;
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b087      	sub	sp, #28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019be:	e14e      	b.n	8001c5e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	2101      	movs	r1, #1
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	fa01 f303 	lsl.w	r3, r1, r3
 80019cc:	4013      	ands	r3, r2
 80019ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f000 8140 	beq.w	8001c58 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d005      	beq.n	80019f0 <HAL_GPIO_Init+0x40>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d130      	bne.n	8001a52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	2203      	movs	r2, #3
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4013      	ands	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	68da      	ldr	r2, [r3, #12]
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a26:	2201      	movs	r2, #1
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4013      	ands	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	091b      	lsrs	r3, r3, #4
 8001a3c:	f003 0201 	and.w	r2, r3, #1
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	d017      	beq.n	8001a8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	2203      	movs	r2, #3
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	689a      	ldr	r2, [r3, #8]
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d123      	bne.n	8001ae2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	08da      	lsrs	r2, r3, #3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3208      	adds	r2, #8
 8001aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	220f      	movs	r2, #15
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4013      	ands	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	691a      	ldr	r2, [r3, #16]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	08da      	lsrs	r2, r3, #3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3208      	adds	r2, #8
 8001adc:	6939      	ldr	r1, [r7, #16]
 8001ade:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	2203      	movs	r2, #3
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	4013      	ands	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 0203 	and.w	r2, r3, #3
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 809a 	beq.w	8001c58 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b24:	4b55      	ldr	r3, [pc, #340]	@ (8001c7c <HAL_GPIO_Init+0x2cc>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	4a54      	ldr	r2, [pc, #336]	@ (8001c7c <HAL_GPIO_Init+0x2cc>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	6193      	str	r3, [r2, #24]
 8001b30:	4b52      	ldr	r3, [pc, #328]	@ (8001c7c <HAL_GPIO_Init+0x2cc>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b3c:	4a50      	ldr	r2, [pc, #320]	@ (8001c80 <HAL_GPIO_Init+0x2d0>)
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	089b      	lsrs	r3, r3, #2
 8001b42:	3302      	adds	r3, #2
 8001b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	220f      	movs	r2, #15
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b66:	d013      	beq.n	8001b90 <HAL_GPIO_Init+0x1e0>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a46      	ldr	r2, [pc, #280]	@ (8001c84 <HAL_GPIO_Init+0x2d4>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d00d      	beq.n	8001b8c <HAL_GPIO_Init+0x1dc>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a45      	ldr	r2, [pc, #276]	@ (8001c88 <HAL_GPIO_Init+0x2d8>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d007      	beq.n	8001b88 <HAL_GPIO_Init+0x1d8>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a44      	ldr	r2, [pc, #272]	@ (8001c8c <HAL_GPIO_Init+0x2dc>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d101      	bne.n	8001b84 <HAL_GPIO_Init+0x1d4>
 8001b80:	2303      	movs	r3, #3
 8001b82:	e006      	b.n	8001b92 <HAL_GPIO_Init+0x1e2>
 8001b84:	2305      	movs	r3, #5
 8001b86:	e004      	b.n	8001b92 <HAL_GPIO_Init+0x1e2>
 8001b88:	2302      	movs	r3, #2
 8001b8a:	e002      	b.n	8001b92 <HAL_GPIO_Init+0x1e2>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e000      	b.n	8001b92 <HAL_GPIO_Init+0x1e2>
 8001b90:	2300      	movs	r3, #0
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	f002 0203 	and.w	r2, r2, #3
 8001b98:	0092      	lsls	r2, r2, #2
 8001b9a:	4093      	lsls	r3, r2
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ba2:	4937      	ldr	r1, [pc, #220]	@ (8001c80 <HAL_GPIO_Init+0x2d0>)
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	089b      	lsrs	r3, r3, #2
 8001ba8:	3302      	adds	r3, #2
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bb0:	4b37      	ldr	r3, [pc, #220]	@ (8001c90 <HAL_GPIO_Init+0x2e0>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bd4:	4a2e      	ldr	r2, [pc, #184]	@ (8001c90 <HAL_GPIO_Init+0x2e0>)
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bda:	4b2d      	ldr	r3, [pc, #180]	@ (8001c90 <HAL_GPIO_Init+0x2e0>)
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	43db      	mvns	r3, r3
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4013      	ands	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bfe:	4a24      	ldr	r2, [pc, #144]	@ (8001c90 <HAL_GPIO_Init+0x2e0>)
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c04:	4b22      	ldr	r3, [pc, #136]	@ (8001c90 <HAL_GPIO_Init+0x2e0>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4013      	ands	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c28:	4a19      	ldr	r2, [pc, #100]	@ (8001c90 <HAL_GPIO_Init+0x2e0>)
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c2e:	4b18      	ldr	r3, [pc, #96]	@ (8001c90 <HAL_GPIO_Init+0x2e0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	43db      	mvns	r3, r3
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c52:	4a0f      	ldr	r2, [pc, #60]	@ (8001c90 <HAL_GPIO_Init+0x2e0>)
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	fa22 f303 	lsr.w	r3, r2, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f47f aea9 	bne.w	80019c0 <HAL_GPIO_Init+0x10>
  }
}
 8001c6e:	bf00      	nop
 8001c70:	bf00      	nop
 8001c72:	371c      	adds	r7, #28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	40010000 	.word	0x40010000
 8001c84:	48000400 	.word	0x48000400
 8001c88:	48000800 	.word	0x48000800
 8001c8c:	48000c00 	.word	0x48000c00
 8001c90:	40010400 	.word	0x40010400

08001c94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691a      	ldr	r2, [r3, #16]
 8001ca4:	887b      	ldrh	r3, [r7, #2]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d002      	beq.n	8001cb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cac:	2301      	movs	r3, #1
 8001cae:	73fb      	strb	r3, [r7, #15]
 8001cb0:	e001      	b.n	8001cb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	807b      	strh	r3, [r7, #2]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cd4:	787b      	ldrb	r3, [r7, #1]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cda:	887a      	ldrh	r2, [r7, #2]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ce0:	e002      	b.n	8001ce8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ce2:	887a      	ldrh	r2, [r7, #2]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d04:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d102      	bne.n	8001d1a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	f001 b823 	b.w	8002d60 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 817d 	beq.w	800202a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d30:	4bbc      	ldr	r3, [pc, #752]	@ (8002024 <HAL_RCC_OscConfig+0x330>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 030c 	and.w	r3, r3, #12
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d00c      	beq.n	8001d56 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d3c:	4bb9      	ldr	r3, [pc, #740]	@ (8002024 <HAL_RCC_OscConfig+0x330>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 030c 	and.w	r3, r3, #12
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d15c      	bne.n	8001e02 <HAL_RCC_OscConfig+0x10e>
 8001d48:	4bb6      	ldr	r3, [pc, #728]	@ (8002024 <HAL_RCC_OscConfig+0x330>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d54:	d155      	bne.n	8001e02 <HAL_RCC_OscConfig+0x10e>
 8001d56:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d5a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001d62:	fa93 f3a3 	rbit	r3, r3
 8001d66:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d6a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6e:	fab3 f383 	clz	r3, r3
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	095b      	lsrs	r3, r3, #5
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d102      	bne.n	8001d88 <HAL_RCC_OscConfig+0x94>
 8001d82:	4ba8      	ldr	r3, [pc, #672]	@ (8002024 <HAL_RCC_OscConfig+0x330>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	e015      	b.n	8001db4 <HAL_RCC_OscConfig+0xc0>
 8001d88:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d8c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d90:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001d94:	fa93 f3a3 	rbit	r3, r3
 8001d98:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001d9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001da0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001da4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001da8:	fa93 f3a3 	rbit	r3, r3
 8001dac:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001db0:	4b9c      	ldr	r3, [pc, #624]	@ (8002024 <HAL_RCC_OscConfig+0x330>)
 8001db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001db8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001dbc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001dc0:	fa92 f2a2 	rbit	r2, r2
 8001dc4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001dc8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001dcc:	fab2 f282 	clz	r2, r2
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	f042 0220 	orr.w	r2, r2, #32
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	f002 021f 	and.w	r2, r2, #31
 8001ddc:	2101      	movs	r1, #1
 8001dde:	fa01 f202 	lsl.w	r2, r1, r2
 8001de2:	4013      	ands	r3, r2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 811f 	beq.w	8002028 <HAL_RCC_OscConfig+0x334>
 8001dea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f040 8116 	bne.w	8002028 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	f000 bfaf 	b.w	8002d60 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e12:	d106      	bne.n	8001e22 <HAL_RCC_OscConfig+0x12e>
 8001e14:	4b83      	ldr	r3, [pc, #524]	@ (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a82      	ldr	r2, [pc, #520]	@ (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e1e:	6013      	str	r3, [r2, #0]
 8001e20:	e036      	b.n	8001e90 <HAL_RCC_OscConfig+0x19c>
 8001e22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10c      	bne.n	8001e4c <HAL_RCC_OscConfig+0x158>
 8001e32:	4b7c      	ldr	r3, [pc, #496]	@ (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a7b      	ldr	r2, [pc, #492]	@ (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	4b79      	ldr	r3, [pc, #484]	@ (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a78      	ldr	r2, [pc, #480]	@ (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	e021      	b.n	8001e90 <HAL_RCC_OscConfig+0x19c>
 8001e4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e5c:	d10c      	bne.n	8001e78 <HAL_RCC_OscConfig+0x184>
 8001e5e:	4b71      	ldr	r3, [pc, #452]	@ (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a70      	ldr	r2, [pc, #448]	@ (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	4b6e      	ldr	r3, [pc, #440]	@ (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a6d      	ldr	r2, [pc, #436]	@ (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	e00b      	b.n	8001e90 <HAL_RCC_OscConfig+0x19c>
 8001e78:	4b6a      	ldr	r3, [pc, #424]	@ (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a69      	ldr	r2, [pc, #420]	@ (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	4b67      	ldr	r3, [pc, #412]	@ (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a66      	ldr	r2, [pc, #408]	@ (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e8e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e90:	4b64      	ldr	r3, [pc, #400]	@ (8002024 <HAL_RCC_OscConfig+0x330>)
 8001e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e94:	f023 020f 	bic.w	r2, r3, #15
 8001e98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e9c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	495f      	ldr	r1, [pc, #380]	@ (8002024 <HAL_RCC_OscConfig+0x330>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d059      	beq.n	8001f6e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eba:	f7ff fbc1 	bl	8001640 <HAL_GetTick>
 8001ebe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec2:	e00a      	b.n	8001eda <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ec4:	f7ff fbbc 	bl	8001640 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b64      	cmp	r3, #100	@ 0x64
 8001ed2:	d902      	bls.n	8001eda <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	f000 bf43 	b.w	8002d60 <HAL_RCC_OscConfig+0x106c>
 8001eda:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ede:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001ee6:	fa93 f3a3 	rbit	r3, r3
 8001eea:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001eee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef2:	fab3 f383 	clz	r3, r3
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	095b      	lsrs	r3, r3, #5
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d102      	bne.n	8001f0c <HAL_RCC_OscConfig+0x218>
 8001f06:	4b47      	ldr	r3, [pc, #284]	@ (8002024 <HAL_RCC_OscConfig+0x330>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	e015      	b.n	8001f38 <HAL_RCC_OscConfig+0x244>
 8001f0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f10:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f14:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001f18:	fa93 f3a3 	rbit	r3, r3
 8001f1c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001f20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f24:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001f28:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001f2c:	fa93 f3a3 	rbit	r3, r3
 8001f30:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001f34:	4b3b      	ldr	r3, [pc, #236]	@ (8002024 <HAL_RCC_OscConfig+0x330>)
 8001f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f38:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f3c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001f40:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001f44:	fa92 f2a2 	rbit	r2, r2
 8001f48:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001f4c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001f50:	fab2 f282 	clz	r2, r2
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	f042 0220 	orr.w	r2, r2, #32
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	f002 021f 	and.w	r2, r2, #31
 8001f60:	2101      	movs	r1, #1
 8001f62:	fa01 f202 	lsl.w	r2, r1, r2
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0ab      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x1d0>
 8001f6c:	e05d      	b.n	800202a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6e:	f7ff fb67 	bl	8001640 <HAL_GetTick>
 8001f72:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f76:	e00a      	b.n	8001f8e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f78:	f7ff fb62 	bl	8001640 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b64      	cmp	r3, #100	@ 0x64
 8001f86:	d902      	bls.n	8001f8e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	f000 bee9 	b.w	8002d60 <HAL_RCC_OscConfig+0x106c>
 8001f8e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f92:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f96:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001f9a:	fa93 f3a3 	rbit	r3, r3
 8001f9e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001fa2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa6:	fab3 f383 	clz	r3, r3
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	095b      	lsrs	r3, r3, #5
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d102      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x2cc>
 8001fba:	4b1a      	ldr	r3, [pc, #104]	@ (8002024 <HAL_RCC_OscConfig+0x330>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	e015      	b.n	8001fec <HAL_RCC_OscConfig+0x2f8>
 8001fc0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fc4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001fcc:	fa93 f3a3 	rbit	r3, r3
 8001fd0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001fd4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fd8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001fdc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001fe0:	fa93 f3a3 	rbit	r3, r3
 8001fe4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8002024 <HAL_RCC_OscConfig+0x330>)
 8001fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ff0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001ff4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001ff8:	fa92 f2a2 	rbit	r2, r2
 8001ffc:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002000:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002004:	fab2 f282 	clz	r2, r2
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	f042 0220 	orr.w	r2, r2, #32
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	f002 021f 	and.w	r2, r2, #31
 8002014:	2101      	movs	r1, #1
 8002016:	fa01 f202 	lsl.w	r2, r1, r2
 800201a:	4013      	ands	r3, r2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1ab      	bne.n	8001f78 <HAL_RCC_OscConfig+0x284>
 8002020:	e003      	b.n	800202a <HAL_RCC_OscConfig+0x336>
 8002022:	bf00      	nop
 8002024:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800202a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800202e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 817d 	beq.w	800233a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002040:	4ba6      	ldr	r3, [pc, #664]	@ (80022dc <HAL_RCC_OscConfig+0x5e8>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 030c 	and.w	r3, r3, #12
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00b      	beq.n	8002064 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800204c:	4ba3      	ldr	r3, [pc, #652]	@ (80022dc <HAL_RCC_OscConfig+0x5e8>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 030c 	and.w	r3, r3, #12
 8002054:	2b08      	cmp	r3, #8
 8002056:	d172      	bne.n	800213e <HAL_RCC_OscConfig+0x44a>
 8002058:	4ba0      	ldr	r3, [pc, #640]	@ (80022dc <HAL_RCC_OscConfig+0x5e8>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d16c      	bne.n	800213e <HAL_RCC_OscConfig+0x44a>
 8002064:	2302      	movs	r3, #2
 8002066:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002076:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800207a:	fab3 f383 	clz	r3, r3
 800207e:	b2db      	uxtb	r3, r3
 8002080:	095b      	lsrs	r3, r3, #5
 8002082:	b2db      	uxtb	r3, r3
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b01      	cmp	r3, #1
 800208c:	d102      	bne.n	8002094 <HAL_RCC_OscConfig+0x3a0>
 800208e:	4b93      	ldr	r3, [pc, #588]	@ (80022dc <HAL_RCC_OscConfig+0x5e8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	e013      	b.n	80020bc <HAL_RCC_OscConfig+0x3c8>
 8002094:	2302      	movs	r3, #2
 8002096:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800209e:	fa93 f3a3 	rbit	r3, r3
 80020a2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80020a6:	2302      	movs	r3, #2
 80020a8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80020ac:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80020b0:	fa93 f3a3 	rbit	r3, r3
 80020b4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80020b8:	4b88      	ldr	r3, [pc, #544]	@ (80022dc <HAL_RCC_OscConfig+0x5e8>)
 80020ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020bc:	2202      	movs	r2, #2
 80020be:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80020c2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80020c6:	fa92 f2a2 	rbit	r2, r2
 80020ca:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80020ce:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80020d2:	fab2 f282 	clz	r2, r2
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	f042 0220 	orr.w	r2, r2, #32
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	f002 021f 	and.w	r2, r2, #31
 80020e2:	2101      	movs	r1, #1
 80020e4:	fa01 f202 	lsl.w	r2, r1, r2
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00a      	beq.n	8002104 <HAL_RCC_OscConfig+0x410>
 80020ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d002      	beq.n	8002104 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	f000 be2e 	b.w	8002d60 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002104:	4b75      	ldr	r3, [pc, #468]	@ (80022dc <HAL_RCC_OscConfig+0x5e8>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800210c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002110:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	21f8      	movs	r1, #248	@ 0xf8
 800211a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002122:	fa91 f1a1 	rbit	r1, r1
 8002126:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800212a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800212e:	fab1 f181 	clz	r1, r1
 8002132:	b2c9      	uxtb	r1, r1
 8002134:	408b      	lsls	r3, r1
 8002136:	4969      	ldr	r1, [pc, #420]	@ (80022dc <HAL_RCC_OscConfig+0x5e8>)
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213c:	e0fd      	b.n	800233a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800213e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002142:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 8088 	beq.w	8002260 <HAL_RCC_OscConfig+0x56c>
 8002150:	2301      	movs	r3, #1
 8002152:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800215a:	fa93 f3a3 	rbit	r3, r3
 800215e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002162:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002166:	fab3 f383 	clz	r3, r3
 800216a:	b2db      	uxtb	r3, r3
 800216c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002170:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	461a      	mov	r2, r3
 8002178:	2301      	movs	r3, #1
 800217a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217c:	f7ff fa60 	bl	8001640 <HAL_GetTick>
 8002180:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002184:	e00a      	b.n	800219c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002186:	f7ff fa5b 	bl	8001640 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d902      	bls.n	800219c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	f000 bde2 	b.w	8002d60 <HAL_RCC_OscConfig+0x106c>
 800219c:	2302      	movs	r3, #2
 800219e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80021a6:	fa93 f3a3 	rbit	r3, r3
 80021aa:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80021ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b2:	fab3 f383 	clz	r3, r3
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	095b      	lsrs	r3, r3, #5
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d102      	bne.n	80021cc <HAL_RCC_OscConfig+0x4d8>
 80021c6:	4b45      	ldr	r3, [pc, #276]	@ (80022dc <HAL_RCC_OscConfig+0x5e8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	e013      	b.n	80021f4 <HAL_RCC_OscConfig+0x500>
 80021cc:	2302      	movs	r3, #2
 80021ce:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80021d6:	fa93 f3a3 	rbit	r3, r3
 80021da:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80021de:	2302      	movs	r3, #2
 80021e0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80021e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80021e8:	fa93 f3a3 	rbit	r3, r3
 80021ec:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80021f0:	4b3a      	ldr	r3, [pc, #232]	@ (80022dc <HAL_RCC_OscConfig+0x5e8>)
 80021f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f4:	2202      	movs	r2, #2
 80021f6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80021fa:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80021fe:	fa92 f2a2 	rbit	r2, r2
 8002202:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002206:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800220a:	fab2 f282 	clz	r2, r2
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	f042 0220 	orr.w	r2, r2, #32
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	f002 021f 	and.w	r2, r2, #31
 800221a:	2101      	movs	r1, #1
 800221c:	fa01 f202 	lsl.w	r2, r1, r2
 8002220:	4013      	ands	r3, r2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0af      	beq.n	8002186 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002226:	4b2d      	ldr	r3, [pc, #180]	@ (80022dc <HAL_RCC_OscConfig+0x5e8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800222e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002232:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	21f8      	movs	r1, #248	@ 0xf8
 800223c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002240:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002244:	fa91 f1a1 	rbit	r1, r1
 8002248:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800224c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002250:	fab1 f181 	clz	r1, r1
 8002254:	b2c9      	uxtb	r1, r1
 8002256:	408b      	lsls	r3, r1
 8002258:	4920      	ldr	r1, [pc, #128]	@ (80022dc <HAL_RCC_OscConfig+0x5e8>)
 800225a:	4313      	orrs	r3, r2
 800225c:	600b      	str	r3, [r1, #0]
 800225e:	e06c      	b.n	800233a <HAL_RCC_OscConfig+0x646>
 8002260:	2301      	movs	r3, #1
 8002262:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002266:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800226a:	fa93 f3a3 	rbit	r3, r3
 800226e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002272:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002276:	fab3 f383 	clz	r3, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002280:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	461a      	mov	r2, r3
 8002288:	2300      	movs	r3, #0
 800228a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7ff f9d8 	bl	8001640 <HAL_GetTick>
 8002290:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002294:	e00a      	b.n	80022ac <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002296:	f7ff f9d3 	bl	8001640 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d902      	bls.n	80022ac <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	f000 bd5a 	b.w	8002d60 <HAL_RCC_OscConfig+0x106c>
 80022ac:	2302      	movs	r3, #2
 80022ae:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80022be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c2:	fab3 f383 	clz	r3, r3
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	095b      	lsrs	r3, r3, #5
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d104      	bne.n	80022e0 <HAL_RCC_OscConfig+0x5ec>
 80022d6:	4b01      	ldr	r3, [pc, #4]	@ (80022dc <HAL_RCC_OscConfig+0x5e8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	e015      	b.n	8002308 <HAL_RCC_OscConfig+0x614>
 80022dc:	40021000 	.word	0x40021000
 80022e0:	2302      	movs	r3, #2
 80022e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80022ea:	fa93 f3a3 	rbit	r3, r3
 80022ee:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80022f2:	2302      	movs	r3, #2
 80022f4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80022f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80022fc:	fa93 f3a3 	rbit	r3, r3
 8002300:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002304:	4bc8      	ldr	r3, [pc, #800]	@ (8002628 <HAL_RCC_OscConfig+0x934>)
 8002306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002308:	2202      	movs	r2, #2
 800230a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800230e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002312:	fa92 f2a2 	rbit	r2, r2
 8002316:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800231a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800231e:	fab2 f282 	clz	r2, r2
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	f042 0220 	orr.w	r2, r2, #32
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	f002 021f 	and.w	r2, r2, #31
 800232e:	2101      	movs	r1, #1
 8002330:	fa01 f202 	lsl.w	r2, r1, r2
 8002334:	4013      	ands	r3, r2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1ad      	bne.n	8002296 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800233a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800233e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 8110 	beq.w	8002570 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002350:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002354:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d079      	beq.n	8002454 <HAL_RCC_OscConfig+0x760>
 8002360:	2301      	movs	r3, #1
 8002362:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002366:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800236a:	fa93 f3a3 	rbit	r3, r3
 800236e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002372:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002376:	fab3 f383 	clz	r3, r3
 800237a:	b2db      	uxtb	r3, r3
 800237c:	461a      	mov	r2, r3
 800237e:	4bab      	ldr	r3, [pc, #684]	@ (800262c <HAL_RCC_OscConfig+0x938>)
 8002380:	4413      	add	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	461a      	mov	r2, r3
 8002386:	2301      	movs	r3, #1
 8002388:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238a:	f7ff f959 	bl	8001640 <HAL_GetTick>
 800238e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002392:	e00a      	b.n	80023aa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002394:	f7ff f954 	bl	8001640 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d902      	bls.n	80023aa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	f000 bcdb 	b.w	8002d60 <HAL_RCC_OscConfig+0x106c>
 80023aa:	2302      	movs	r3, #2
 80023ac:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80023b4:	fa93 f3a3 	rbit	r3, r3
 80023b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80023bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80023c4:	2202      	movs	r2, #2
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023cc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	fa93 f2a3 	rbit	r2, r3
 80023d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80023e8:	2202      	movs	r2, #2
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	fa93 f2a3 	rbit	r2, r3
 80023fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002402:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002404:	4b88      	ldr	r3, [pc, #544]	@ (8002628 <HAL_RCC_OscConfig+0x934>)
 8002406:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002408:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800240c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002410:	2102      	movs	r1, #2
 8002412:	6019      	str	r1, [r3, #0]
 8002414:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002418:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	fa93 f1a3 	rbit	r1, r3
 8002422:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002426:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800242a:	6019      	str	r1, [r3, #0]
  return result;
 800242c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002430:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	fab3 f383 	clz	r3, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002440:	b2db      	uxtb	r3, r3
 8002442:	f003 031f 	and.w	r3, r3, #31
 8002446:	2101      	movs	r1, #1
 8002448:	fa01 f303 	lsl.w	r3, r1, r3
 800244c:	4013      	ands	r3, r2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0a0      	beq.n	8002394 <HAL_RCC_OscConfig+0x6a0>
 8002452:	e08d      	b.n	8002570 <HAL_RCC_OscConfig+0x87c>
 8002454:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002458:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800245c:	2201      	movs	r2, #1
 800245e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002460:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002464:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	fa93 f2a3 	rbit	r2, r3
 800246e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002472:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002476:	601a      	str	r2, [r3, #0]
  return result;
 8002478:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800247c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002480:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002482:	fab3 f383 	clz	r3, r3
 8002486:	b2db      	uxtb	r3, r3
 8002488:	461a      	mov	r2, r3
 800248a:	4b68      	ldr	r3, [pc, #416]	@ (800262c <HAL_RCC_OscConfig+0x938>)
 800248c:	4413      	add	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	461a      	mov	r2, r3
 8002492:	2300      	movs	r3, #0
 8002494:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002496:	f7ff f8d3 	bl	8001640 <HAL_GetTick>
 800249a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800249e:	e00a      	b.n	80024b6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024a0:	f7ff f8ce 	bl	8001640 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d902      	bls.n	80024b6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	f000 bc55 	b.w	8002d60 <HAL_RCC_OscConfig+0x106c>
 80024b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ba:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80024be:	2202      	movs	r2, #2
 80024c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	fa93 f2a3 	rbit	r2, r3
 80024d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024de:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80024e2:	2202      	movs	r2, #2
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ea:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	fa93 f2a3 	rbit	r2, r3
 80024f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002502:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002506:	2202      	movs	r2, #2
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	fa93 f2a3 	rbit	r2, r3
 8002518:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800251c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002520:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002522:	4b41      	ldr	r3, [pc, #260]	@ (8002628 <HAL_RCC_OscConfig+0x934>)
 8002524:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002526:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800252a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800252e:	2102      	movs	r1, #2
 8002530:	6019      	str	r1, [r3, #0]
 8002532:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002536:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	fa93 f1a3 	rbit	r1, r3
 8002540:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002544:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002548:	6019      	str	r1, [r3, #0]
  return result;
 800254a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800254e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	fab3 f383 	clz	r3, r3
 8002558:	b2db      	uxtb	r3, r3
 800255a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800255e:	b2db      	uxtb	r3, r3
 8002560:	f003 031f 	and.w	r3, r3, #31
 8002564:	2101      	movs	r1, #1
 8002566:	fa01 f303 	lsl.w	r3, r1, r3
 800256a:	4013      	ands	r3, r2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d197      	bne.n	80024a0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002570:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002574:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 81a1 	beq.w	80028c8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002586:	2300      	movs	r3, #0
 8002588:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800258c:	4b26      	ldr	r3, [pc, #152]	@ (8002628 <HAL_RCC_OscConfig+0x934>)
 800258e:	69db      	ldr	r3, [r3, #28]
 8002590:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d116      	bne.n	80025c6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002598:	4b23      	ldr	r3, [pc, #140]	@ (8002628 <HAL_RCC_OscConfig+0x934>)
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	4a22      	ldr	r2, [pc, #136]	@ (8002628 <HAL_RCC_OscConfig+0x934>)
 800259e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025a2:	61d3      	str	r3, [r2, #28]
 80025a4:	4b20      	ldr	r3, [pc, #128]	@ (8002628 <HAL_RCC_OscConfig+0x934>)
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80025ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ba:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80025be:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80025c0:	2301      	movs	r3, #1
 80025c2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002630 <HAL_RCC_OscConfig+0x93c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d11a      	bne.n	8002608 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025d2:	4b17      	ldr	r3, [pc, #92]	@ (8002630 <HAL_RCC_OscConfig+0x93c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a16      	ldr	r2, [pc, #88]	@ (8002630 <HAL_RCC_OscConfig+0x93c>)
 80025d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025de:	f7ff f82f 	bl	8001640 <HAL_GetTick>
 80025e2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e6:	e009      	b.n	80025fc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e8:	f7ff f82a 	bl	8001640 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b64      	cmp	r3, #100	@ 0x64
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e3b1      	b.n	8002d60 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002630 <HAL_RCC_OscConfig+0x93c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0ef      	beq.n	80025e8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002608:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800260c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d10d      	bne.n	8002634 <HAL_RCC_OscConfig+0x940>
 8002618:	4b03      	ldr	r3, [pc, #12]	@ (8002628 <HAL_RCC_OscConfig+0x934>)
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	4a02      	ldr	r2, [pc, #8]	@ (8002628 <HAL_RCC_OscConfig+0x934>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	6213      	str	r3, [r2, #32]
 8002624:	e03c      	b.n	80026a0 <HAL_RCC_OscConfig+0x9ac>
 8002626:	bf00      	nop
 8002628:	40021000 	.word	0x40021000
 800262c:	10908120 	.word	0x10908120
 8002630:	40007000 	.word	0x40007000
 8002634:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002638:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10c      	bne.n	800265e <HAL_RCC_OscConfig+0x96a>
 8002644:	4bc1      	ldr	r3, [pc, #772]	@ (800294c <HAL_RCC_OscConfig+0xc58>)
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	4ac0      	ldr	r2, [pc, #768]	@ (800294c <HAL_RCC_OscConfig+0xc58>)
 800264a:	f023 0301 	bic.w	r3, r3, #1
 800264e:	6213      	str	r3, [r2, #32]
 8002650:	4bbe      	ldr	r3, [pc, #760]	@ (800294c <HAL_RCC_OscConfig+0xc58>)
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	4abd      	ldr	r2, [pc, #756]	@ (800294c <HAL_RCC_OscConfig+0xc58>)
 8002656:	f023 0304 	bic.w	r3, r3, #4
 800265a:	6213      	str	r3, [r2, #32]
 800265c:	e020      	b.n	80026a0 <HAL_RCC_OscConfig+0x9ac>
 800265e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002662:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	2b05      	cmp	r3, #5
 800266c:	d10c      	bne.n	8002688 <HAL_RCC_OscConfig+0x994>
 800266e:	4bb7      	ldr	r3, [pc, #732]	@ (800294c <HAL_RCC_OscConfig+0xc58>)
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	4ab6      	ldr	r2, [pc, #728]	@ (800294c <HAL_RCC_OscConfig+0xc58>)
 8002674:	f043 0304 	orr.w	r3, r3, #4
 8002678:	6213      	str	r3, [r2, #32]
 800267a:	4bb4      	ldr	r3, [pc, #720]	@ (800294c <HAL_RCC_OscConfig+0xc58>)
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	4ab3      	ldr	r2, [pc, #716]	@ (800294c <HAL_RCC_OscConfig+0xc58>)
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	6213      	str	r3, [r2, #32]
 8002686:	e00b      	b.n	80026a0 <HAL_RCC_OscConfig+0x9ac>
 8002688:	4bb0      	ldr	r3, [pc, #704]	@ (800294c <HAL_RCC_OscConfig+0xc58>)
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	4aaf      	ldr	r2, [pc, #700]	@ (800294c <HAL_RCC_OscConfig+0xc58>)
 800268e:	f023 0301 	bic.w	r3, r3, #1
 8002692:	6213      	str	r3, [r2, #32]
 8002694:	4bad      	ldr	r3, [pc, #692]	@ (800294c <HAL_RCC_OscConfig+0xc58>)
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	4aac      	ldr	r2, [pc, #688]	@ (800294c <HAL_RCC_OscConfig+0xc58>)
 800269a:	f023 0304 	bic.w	r3, r3, #4
 800269e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 8081 	beq.w	80027b4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b2:	f7fe ffc5 	bl	8001640 <HAL_GetTick>
 80026b6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ba:	e00b      	b.n	80026d4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026bc:	f7fe ffc0 	bl	8001640 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e345      	b.n	8002d60 <HAL_RCC_OscConfig+0x106c>
 80026d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80026dc:	2202      	movs	r2, #2
 80026de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	fa93 f2a3 	rbit	r2, r3
 80026ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026fc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002700:	2202      	movs	r2, #2
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002708:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	fa93 f2a3 	rbit	r2, r3
 8002712:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002716:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800271a:	601a      	str	r2, [r3, #0]
  return result;
 800271c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002720:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002724:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002726:	fab3 f383 	clz	r3, r3
 800272a:	b2db      	uxtb	r3, r3
 800272c:	095b      	lsrs	r3, r3, #5
 800272e:	b2db      	uxtb	r3, r3
 8002730:	f043 0302 	orr.w	r3, r3, #2
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d102      	bne.n	8002740 <HAL_RCC_OscConfig+0xa4c>
 800273a:	4b84      	ldr	r3, [pc, #528]	@ (800294c <HAL_RCC_OscConfig+0xc58>)
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	e013      	b.n	8002768 <HAL_RCC_OscConfig+0xa74>
 8002740:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002744:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002748:	2202      	movs	r2, #2
 800274a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002750:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	fa93 f2a3 	rbit	r2, r3
 800275a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800275e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	4b79      	ldr	r3, [pc, #484]	@ (800294c <HAL_RCC_OscConfig+0xc58>)
 8002766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002768:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800276c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002770:	2102      	movs	r1, #2
 8002772:	6011      	str	r1, [r2, #0]
 8002774:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002778:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800277c:	6812      	ldr	r2, [r2, #0]
 800277e:	fa92 f1a2 	rbit	r1, r2
 8002782:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002786:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800278a:	6011      	str	r1, [r2, #0]
  return result;
 800278c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002790:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002794:	6812      	ldr	r2, [r2, #0]
 8002796:	fab2 f282 	clz	r2, r2
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	f002 021f 	and.w	r2, r2, #31
 80027a6:	2101      	movs	r1, #1
 80027a8:	fa01 f202 	lsl.w	r2, r1, r2
 80027ac:	4013      	ands	r3, r2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d084      	beq.n	80026bc <HAL_RCC_OscConfig+0x9c8>
 80027b2:	e07f      	b.n	80028b4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b4:	f7fe ff44 	bl	8001640 <HAL_GetTick>
 80027b8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027bc:	e00b      	b.n	80027d6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027be:	f7fe ff3f 	bl	8001640 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e2c4      	b.n	8002d60 <HAL_RCC_OscConfig+0x106c>
 80027d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027da:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80027de:	2202      	movs	r2, #2
 80027e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	fa93 f2a3 	rbit	r2, r3
 80027f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027fe:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002802:	2202      	movs	r2, #2
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800280a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	fa93 f2a3 	rbit	r2, r3
 8002814:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002818:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800281c:	601a      	str	r2, [r3, #0]
  return result;
 800281e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002822:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002826:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002828:	fab3 f383 	clz	r3, r3
 800282c:	b2db      	uxtb	r3, r3
 800282e:	095b      	lsrs	r3, r3, #5
 8002830:	b2db      	uxtb	r3, r3
 8002832:	f043 0302 	orr.w	r3, r3, #2
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d102      	bne.n	8002842 <HAL_RCC_OscConfig+0xb4e>
 800283c:	4b43      	ldr	r3, [pc, #268]	@ (800294c <HAL_RCC_OscConfig+0xc58>)
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	e013      	b.n	800286a <HAL_RCC_OscConfig+0xb76>
 8002842:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002846:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800284a:	2202      	movs	r2, #2
 800284c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002852:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	fa93 f2a3 	rbit	r2, r3
 800285c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002860:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	4b39      	ldr	r3, [pc, #228]	@ (800294c <HAL_RCC_OscConfig+0xc58>)
 8002868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800286e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002872:	2102      	movs	r1, #2
 8002874:	6011      	str	r1, [r2, #0]
 8002876:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800287a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800287e:	6812      	ldr	r2, [r2, #0]
 8002880:	fa92 f1a2 	rbit	r1, r2
 8002884:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002888:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800288c:	6011      	str	r1, [r2, #0]
  return result;
 800288e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002892:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	fab2 f282 	clz	r2, r2
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	f002 021f 	and.w	r2, r2, #31
 80028a8:	2101      	movs	r1, #1
 80028aa:	fa01 f202 	lsl.w	r2, r1, r2
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d184      	bne.n	80027be <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028b4:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d105      	bne.n	80028c8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028bc:	4b23      	ldr	r3, [pc, #140]	@ (800294c <HAL_RCC_OscConfig+0xc58>)
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	4a22      	ldr	r2, [pc, #136]	@ (800294c <HAL_RCC_OscConfig+0xc58>)
 80028c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028c6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 8242 	beq.w	8002d5e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028da:	4b1c      	ldr	r3, [pc, #112]	@ (800294c <HAL_RCC_OscConfig+0xc58>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f003 030c 	and.w	r3, r3, #12
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	f000 8213 	beq.w	8002d0e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	f040 8162 	bne.w	8002bbe <HAL_RCC_OscConfig+0xeca>
 80028fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028fe:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002902:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002906:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002908:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800290c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	fa93 f2a3 	rbit	r2, r3
 8002916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800291e:	601a      	str	r2, [r3, #0]
  return result;
 8002920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002924:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002928:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800292a:	fab3 f383 	clz	r3, r3
 800292e:	b2db      	uxtb	r3, r3
 8002930:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002934:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	461a      	mov	r2, r3
 800293c:	2300      	movs	r3, #0
 800293e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002940:	f7fe fe7e 	bl	8001640 <HAL_GetTick>
 8002944:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002948:	e00c      	b.n	8002964 <HAL_RCC_OscConfig+0xc70>
 800294a:	bf00      	nop
 800294c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002950:	f7fe fe76 	bl	8001640 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e1fd      	b.n	8002d60 <HAL_RCC_OscConfig+0x106c>
 8002964:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002968:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800296c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002970:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002972:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002976:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	fa93 f2a3 	rbit	r2, r3
 8002980:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002984:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002988:	601a      	str	r2, [r3, #0]
  return result;
 800298a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002992:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002994:	fab3 f383 	clz	r3, r3
 8002998:	b2db      	uxtb	r3, r3
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	b2db      	uxtb	r3, r3
 800299e:	f043 0301 	orr.w	r3, r3, #1
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d102      	bne.n	80029ae <HAL_RCC_OscConfig+0xcba>
 80029a8:	4bb0      	ldr	r3, [pc, #704]	@ (8002c6c <HAL_RCC_OscConfig+0xf78>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	e027      	b.n	80029fe <HAL_RCC_OscConfig+0xd0a>
 80029ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80029b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	fa93 f2a3 	rbit	r2, r3
 80029ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ce:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80029dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	fa93 f2a3 	rbit	r2, r3
 80029f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	4b9c      	ldr	r3, [pc, #624]	@ (8002c6c <HAL_RCC_OscConfig+0xf78>)
 80029fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a02:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002a06:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002a0a:	6011      	str	r1, [r2, #0]
 8002a0c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a10:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002a14:	6812      	ldr	r2, [r2, #0]
 8002a16:	fa92 f1a2 	rbit	r1, r2
 8002a1a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a1e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002a22:	6011      	str	r1, [r2, #0]
  return result;
 8002a24:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a28:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002a2c:	6812      	ldr	r2, [r2, #0]
 8002a2e:	fab2 f282 	clz	r2, r2
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	f042 0220 	orr.w	r2, r2, #32
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	f002 021f 	and.w	r2, r2, #31
 8002a3e:	2101      	movs	r1, #1
 8002a40:	fa01 f202 	lsl.w	r2, r1, r2
 8002a44:	4013      	ands	r3, r2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d182      	bne.n	8002950 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a4a:	4b88      	ldr	r3, [pc, #544]	@ (8002c6c <HAL_RCC_OscConfig+0xf78>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002a52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002a5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	430b      	orrs	r3, r1
 8002a6c:	497f      	ldr	r1, [pc, #508]	@ (8002c6c <HAL_RCC_OscConfig+0xf78>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	604b      	str	r3, [r1, #4]
 8002a72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a76:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002a7a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a84:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	fa93 f2a3 	rbit	r2, r3
 8002a8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a92:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002a96:	601a      	str	r2, [r3, #0]
  return result;
 8002a98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a9c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002aa0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aa2:	fab3 f383 	clz	r3, r3
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002aac:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab8:	f7fe fdc2 	bl	8001640 <HAL_GetTick>
 8002abc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ac0:	e009      	b.n	8002ad6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac2:	f7fe fdbd 	bl	8001640 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e144      	b.n	8002d60 <HAL_RCC_OscConfig+0x106c>
 8002ad6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ada:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002ade:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ae2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	fa93 f2a3 	rbit	r2, r3
 8002af2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002af6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002afa:	601a      	str	r2, [r3, #0]
  return result;
 8002afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b00:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002b04:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b06:	fab3 f383 	clz	r3, r3
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	095b      	lsrs	r3, r3, #5
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d102      	bne.n	8002b20 <HAL_RCC_OscConfig+0xe2c>
 8002b1a:	4b54      	ldr	r3, [pc, #336]	@ (8002c6c <HAL_RCC_OscConfig+0xf78>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	e027      	b.n	8002b70 <HAL_RCC_OscConfig+0xe7c>
 8002b20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b24:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002b28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b32:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	fa93 f2a3 	rbit	r2, r3
 8002b3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b40:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b4a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002b4e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b58:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	fa93 f2a3 	rbit	r2, r3
 8002b62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b66:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	4b3f      	ldr	r3, [pc, #252]	@ (8002c6c <HAL_RCC_OscConfig+0xf78>)
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b70:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b74:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002b78:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002b7c:	6011      	str	r1, [r2, #0]
 8002b7e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b82:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002b86:	6812      	ldr	r2, [r2, #0]
 8002b88:	fa92 f1a2 	rbit	r1, r2
 8002b8c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b90:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002b94:	6011      	str	r1, [r2, #0]
  return result;
 8002b96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b9a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002b9e:	6812      	ldr	r2, [r2, #0]
 8002ba0:	fab2 f282 	clz	r2, r2
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	f042 0220 	orr.w	r2, r2, #32
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	f002 021f 	and.w	r2, r2, #31
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d082      	beq.n	8002ac2 <HAL_RCC_OscConfig+0xdce>
 8002bbc:	e0cf      	b.n	8002d5e <HAL_RCC_OscConfig+0x106a>
 8002bbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002bc6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002bca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	fa93 f2a3 	rbit	r2, r3
 8002bda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bde:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002be2:	601a      	str	r2, [r3, #0]
  return result;
 8002be4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002bec:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bee:	fab3 f383 	clz	r3, r3
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002bf8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	461a      	mov	r2, r3
 8002c00:	2300      	movs	r3, #0
 8002c02:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c04:	f7fe fd1c 	bl	8001640 <HAL_GetTick>
 8002c08:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c0c:	e009      	b.n	8002c22 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c0e:	f7fe fd17 	bl	8001640 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e09e      	b.n	8002d60 <HAL_RCC_OscConfig+0x106c>
 8002c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c26:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002c2a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c34:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	fa93 f2a3 	rbit	r2, r3
 8002c3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c42:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002c46:	601a      	str	r2, [r3, #0]
  return result;
 8002c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c4c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002c50:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c52:	fab3 f383 	clz	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	095b      	lsrs	r3, r3, #5
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d104      	bne.n	8002c70 <HAL_RCC_OscConfig+0xf7c>
 8002c66:	4b01      	ldr	r3, [pc, #4]	@ (8002c6c <HAL_RCC_OscConfig+0xf78>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	e029      	b.n	8002cc0 <HAL_RCC_OscConfig+0xfcc>
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c74:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002c78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c82:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	fa93 f2a3 	rbit	r2, r3
 8002c8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c90:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c9a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002c9e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	fa93 f2a3 	rbit	r2, r3
 8002cb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	4b2b      	ldr	r3, [pc, #172]	@ (8002d6c <HAL_RCC_OscConfig+0x1078>)
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cc4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002cc8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002ccc:	6011      	str	r1, [r2, #0]
 8002cce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cd2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002cd6:	6812      	ldr	r2, [r2, #0]
 8002cd8:	fa92 f1a2 	rbit	r1, r2
 8002cdc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ce0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002ce4:	6011      	str	r1, [r2, #0]
  return result;
 8002ce6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cea:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002cee:	6812      	ldr	r2, [r2, #0]
 8002cf0:	fab2 f282 	clz	r2, r2
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	f042 0220 	orr.w	r2, r2, #32
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	f002 021f 	and.w	r2, r2, #31
 8002d00:	2101      	movs	r1, #1
 8002d02:	fa01 f202 	lsl.w	r2, r1, r2
 8002d06:	4013      	ands	r3, r2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d180      	bne.n	8002c0e <HAL_RCC_OscConfig+0xf1a>
 8002d0c:	e027      	b.n	8002d5e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d101      	bne.n	8002d22 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e01e      	b.n	8002d60 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d22:	4b12      	ldr	r3, [pc, #72]	@ (8002d6c <HAL_RCC_OscConfig+0x1078>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d2a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002d2e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002d32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d10b      	bne.n	8002d5a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002d42:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002d46:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002d4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d001      	beq.n	8002d5e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40021000 	.word	0x40021000

08002d70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b09e      	sub	sp, #120	@ 0x78
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e162      	b.n	800304e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d88:	4b90      	ldr	r3, [pc, #576]	@ (8002fcc <HAL_RCC_ClockConfig+0x25c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d910      	bls.n	8002db8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d96:	4b8d      	ldr	r3, [pc, #564]	@ (8002fcc <HAL_RCC_ClockConfig+0x25c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 0207 	bic.w	r2, r3, #7
 8002d9e:	498b      	ldr	r1, [pc, #556]	@ (8002fcc <HAL_RCC_ClockConfig+0x25c>)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da6:	4b89      	ldr	r3, [pc, #548]	@ (8002fcc <HAL_RCC_ClockConfig+0x25c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d001      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e14a      	b.n	800304e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d008      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc4:	4b82      	ldr	r3, [pc, #520]	@ (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	497f      	ldr	r1, [pc, #508]	@ (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 80dc 	beq.w	8002f9c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d13c      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xf6>
 8002dec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002df0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002df4:	fa93 f3a3 	rbit	r3, r3
 8002df8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002dfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dfc:	fab3 f383 	clz	r3, r3
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	095b      	lsrs	r3, r3, #5
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	f043 0301 	orr.w	r3, r3, #1
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d102      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xa6>
 8002e10:	4b6f      	ldr	r3, [pc, #444]	@ (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	e00f      	b.n	8002e36 <HAL_RCC_ClockConfig+0xc6>
 8002e16:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e1a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e1e:	fa93 f3a3 	rbit	r3, r3
 8002e22:	667b      	str	r3, [r7, #100]	@ 0x64
 8002e24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e28:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e2c:	fa93 f3a3 	rbit	r3, r3
 8002e30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e32:	4b67      	ldr	r3, [pc, #412]	@ (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e36:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e3a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002e3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e3e:	fa92 f2a2 	rbit	r2, r2
 8002e42:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002e44:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002e46:	fab2 f282 	clz	r2, r2
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	f042 0220 	orr.w	r2, r2, #32
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	f002 021f 	and.w	r2, r2, #31
 8002e56:	2101      	movs	r1, #1
 8002e58:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d17b      	bne.n	8002f5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e0f3      	b.n	800304e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d13c      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x178>
 8002e6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e72:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e76:	fa93 f3a3 	rbit	r3, r3
 8002e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002e7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e7e:	fab3 f383 	clz	r3, r3
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	095b      	lsrs	r3, r3, #5
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d102      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x128>
 8002e92:	4b4f      	ldr	r3, [pc, #316]	@ (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	e00f      	b.n	8002eb8 <HAL_RCC_ClockConfig+0x148>
 8002e98:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ea0:	fa93 f3a3 	rbit	r3, r3
 8002ea4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ea6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002eaa:	643b      	str	r3, [r7, #64]	@ 0x40
 8002eac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002eb4:	4b46      	ldr	r3, [pc, #280]	@ (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ebc:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002ebe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002ec0:	fa92 f2a2 	rbit	r2, r2
 8002ec4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002ec6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ec8:	fab2 f282 	clz	r2, r2
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	f042 0220 	orr.w	r2, r2, #32
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	f002 021f 	and.w	r2, r2, #31
 8002ed8:	2101      	movs	r1, #1
 8002eda:	fa01 f202 	lsl.w	r2, r1, r2
 8002ede:	4013      	ands	r3, r2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d13a      	bne.n	8002f5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e0b2      	b.n	800304e <HAL_RCC_ClockConfig+0x2de>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eee:	fa93 f3a3 	rbit	r3, r3
 8002ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef6:	fab3 f383 	clz	r3, r3
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	095b      	lsrs	r3, r3, #5
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d102      	bne.n	8002f10 <HAL_RCC_ClockConfig+0x1a0>
 8002f0a:	4b31      	ldr	r3, [pc, #196]	@ (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	e00d      	b.n	8002f2c <HAL_RCC_ClockConfig+0x1bc>
 8002f10:	2302      	movs	r3, #2
 8002f12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f16:	fa93 f3a3 	rbit	r3, r3
 8002f1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	623b      	str	r3, [r7, #32]
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	fa93 f3a3 	rbit	r3, r3
 8002f26:	61fb      	str	r3, [r7, #28]
 8002f28:	4b29      	ldr	r3, [pc, #164]	@ (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	61ba      	str	r2, [r7, #24]
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	fa92 f2a2 	rbit	r2, r2
 8002f36:	617a      	str	r2, [r7, #20]
  return result;
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	fab2 f282 	clz	r2, r2
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	f042 0220 	orr.w	r2, r2, #32
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	f002 021f 	and.w	r2, r2, #31
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e079      	b.n	800304e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f023 0203 	bic.w	r2, r3, #3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	491a      	ldr	r1, [pc, #104]	@ (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f6c:	f7fe fb68 	bl	8001640 <HAL_GetTick>
 8002f70:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f72:	e00a      	b.n	8002f8a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f74:	f7fe fb64 	bl	8001640 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e061      	b.n	800304e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8a:	4b11      	ldr	r3, [pc, #68]	@ (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f003 020c 	and.w	r2, r3, #12
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d1eb      	bne.n	8002f74 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002fcc <HAL_RCC_ClockConfig+0x25c>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d214      	bcs.n	8002fd4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002faa:	4b08      	ldr	r3, [pc, #32]	@ (8002fcc <HAL_RCC_ClockConfig+0x25c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f023 0207 	bic.w	r2, r3, #7
 8002fb2:	4906      	ldr	r1, [pc, #24]	@ (8002fcc <HAL_RCC_ClockConfig+0x25c>)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fba:	4b04      	ldr	r3, [pc, #16]	@ (8002fcc <HAL_RCC_ClockConfig+0x25c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d005      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e040      	b.n	800304e <HAL_RCC_ClockConfig+0x2de>
 8002fcc:	40022000 	.word	0x40022000
 8002fd0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d008      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8003058 <HAL_RCC_ClockConfig+0x2e8>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	491a      	ldr	r1, [pc, #104]	@ (8003058 <HAL_RCC_ClockConfig+0x2e8>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d009      	beq.n	8003012 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ffe:	4b16      	ldr	r3, [pc, #88]	@ (8003058 <HAL_RCC_ClockConfig+0x2e8>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4912      	ldr	r1, [pc, #72]	@ (8003058 <HAL_RCC_ClockConfig+0x2e8>)
 800300e:	4313      	orrs	r3, r2
 8003010:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003012:	f000 f829 	bl	8003068 <HAL_RCC_GetSysClockFreq>
 8003016:	4601      	mov	r1, r0
 8003018:	4b0f      	ldr	r3, [pc, #60]	@ (8003058 <HAL_RCC_ClockConfig+0x2e8>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003020:	22f0      	movs	r2, #240	@ 0xf0
 8003022:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	fa92 f2a2 	rbit	r2, r2
 800302a:	60fa      	str	r2, [r7, #12]
  return result;
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	fab2 f282 	clz	r2, r2
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	40d3      	lsrs	r3, r2
 8003036:	4a09      	ldr	r2, [pc, #36]	@ (800305c <HAL_RCC_ClockConfig+0x2ec>)
 8003038:	5cd3      	ldrb	r3, [r2, r3]
 800303a:	fa21 f303 	lsr.w	r3, r1, r3
 800303e:	4a08      	ldr	r2, [pc, #32]	@ (8003060 <HAL_RCC_ClockConfig+0x2f0>)
 8003040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003042:	4b08      	ldr	r3, [pc, #32]	@ (8003064 <HAL_RCC_ClockConfig+0x2f4>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f7fe fab6 	bl	80015b8 <HAL_InitTick>
  
  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3778      	adds	r7, #120	@ 0x78
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40021000 	.word	0x40021000
 800305c:	080065e8 	.word	0x080065e8
 8003060:	20000004 	.word	0x20000004
 8003064:	20000008 	.word	0x20000008

08003068 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003068:	b480      	push	{r7}
 800306a:	b08b      	sub	sp, #44	@ 0x2c
 800306c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800306e:	2300      	movs	r3, #0
 8003070:	61fb      	str	r3, [r7, #28]
 8003072:	2300      	movs	r3, #0
 8003074:	61bb      	str	r3, [r7, #24]
 8003076:	2300      	movs	r3, #0
 8003078:	627b      	str	r3, [r7, #36]	@ 0x24
 800307a:	2300      	movs	r3, #0
 800307c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800307e:	2300      	movs	r3, #0
 8003080:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003082:	4b29      	ldr	r3, [pc, #164]	@ (8003128 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f003 030c 	and.w	r3, r3, #12
 800308e:	2b04      	cmp	r3, #4
 8003090:	d002      	beq.n	8003098 <HAL_RCC_GetSysClockFreq+0x30>
 8003092:	2b08      	cmp	r3, #8
 8003094:	d003      	beq.n	800309e <HAL_RCC_GetSysClockFreq+0x36>
 8003096:	e03c      	b.n	8003112 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003098:	4b24      	ldr	r3, [pc, #144]	@ (800312c <HAL_RCC_GetSysClockFreq+0xc4>)
 800309a:	623b      	str	r3, [r7, #32]
      break;
 800309c:	e03c      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80030a4:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 80030a8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	fa92 f2a2 	rbit	r2, r2
 80030b0:	607a      	str	r2, [r7, #4]
  return result;
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	fab2 f282 	clz	r2, r2
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	40d3      	lsrs	r3, r2
 80030bc:	4a1c      	ldr	r2, [pc, #112]	@ (8003130 <HAL_RCC_GetSysClockFreq+0xc8>)
 80030be:	5cd3      	ldrb	r3, [r2, r3]
 80030c0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80030c2:	4b19      	ldr	r3, [pc, #100]	@ (8003128 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	220f      	movs	r2, #15
 80030cc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	fa92 f2a2 	rbit	r2, r2
 80030d4:	60fa      	str	r2, [r7, #12]
  return result;
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	fab2 f282 	clz	r2, r2
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	40d3      	lsrs	r3, r2
 80030e0:	4a14      	ldr	r2, [pc, #80]	@ (8003134 <HAL_RCC_GetSysClockFreq+0xcc>)
 80030e2:	5cd3      	ldrb	r3, [r2, r3]
 80030e4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d008      	beq.n	8003102 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030f0:	4a0e      	ldr	r2, [pc, #56]	@ (800312c <HAL_RCC_GetSysClockFreq+0xc4>)
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	fb02 f303 	mul.w	r3, r2, r3
 80030fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003100:	e004      	b.n	800310c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	4a0c      	ldr	r2, [pc, #48]	@ (8003138 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003106:	fb02 f303 	mul.w	r3, r2, r3
 800310a:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800310c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310e:	623b      	str	r3, [r7, #32]
      break;
 8003110:	e002      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003112:	4b06      	ldr	r3, [pc, #24]	@ (800312c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003114:	623b      	str	r3, [r7, #32]
      break;
 8003116:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003118:	6a3b      	ldr	r3, [r7, #32]
}
 800311a:	4618      	mov	r0, r3
 800311c:	372c      	adds	r7, #44	@ 0x2c
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	40021000 	.word	0x40021000
 800312c:	007a1200 	.word	0x007a1200
 8003130:	08006600 	.word	0x08006600
 8003134:	08006610 	.word	0x08006610
 8003138:	003d0900 	.word	0x003d0900

0800313c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003140:	4b03      	ldr	r3, [pc, #12]	@ (8003150 <HAL_RCC_GetHCLKFreq+0x14>)
 8003142:	681b      	ldr	r3, [r3, #0]
}
 8003144:	4618      	mov	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	20000004 	.word	0x20000004

08003154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800315a:	f7ff ffef 	bl	800313c <HAL_RCC_GetHCLKFreq>
 800315e:	4601      	mov	r1, r0
 8003160:	4b0b      	ldr	r3, [pc, #44]	@ (8003190 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003168:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800316c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	fa92 f2a2 	rbit	r2, r2
 8003174:	603a      	str	r2, [r7, #0]
  return result;
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	fab2 f282 	clz	r2, r2
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	40d3      	lsrs	r3, r2
 8003180:	4a04      	ldr	r2, [pc, #16]	@ (8003194 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003182:	5cd3      	ldrb	r3, [r2, r3]
 8003184:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003188:	4618      	mov	r0, r3
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40021000 	.word	0x40021000
 8003194:	080065f8 	.word	0x080065f8

08003198 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800319e:	f7ff ffcd 	bl	800313c <HAL_RCC_GetHCLKFreq>
 80031a2:	4601      	mov	r1, r0
 80031a4:	4b0b      	ldr	r3, [pc, #44]	@ (80031d4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80031ac:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80031b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	fa92 f2a2 	rbit	r2, r2
 80031b8:	603a      	str	r2, [r7, #0]
  return result;
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	fab2 f282 	clz	r2, r2
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	40d3      	lsrs	r3, r2
 80031c4:	4a04      	ldr	r2, [pc, #16]	@ (80031d8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80031c6:	5cd3      	ldrb	r3, [r2, r3]
 80031c8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80031cc:	4618      	mov	r0, r3
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40021000 	.word	0x40021000
 80031d8:	080065f8 	.word	0x080065f8

080031dc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b092      	sub	sp, #72	@ 0x48
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80031ec:	2300      	movs	r3, #0
 80031ee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 80d4 	beq.w	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003200:	4b4e      	ldr	r3, [pc, #312]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10e      	bne.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800320c:	4b4b      	ldr	r3, [pc, #300]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	4a4a      	ldr	r2, [pc, #296]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003212:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003216:	61d3      	str	r3, [r2, #28]
 8003218:	4b48      	ldr	r3, [pc, #288]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003220:	60bb      	str	r3, [r7, #8]
 8003222:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003224:	2301      	movs	r3, #1
 8003226:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800322a:	4b45      	ldr	r3, [pc, #276]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003232:	2b00      	cmp	r3, #0
 8003234:	d118      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003236:	4b42      	ldr	r3, [pc, #264]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a41      	ldr	r2, [pc, #260]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800323c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003240:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003242:	f7fe f9fd 	bl	8001640 <HAL_GetTick>
 8003246:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003248:	e008      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800324a:	f7fe f9f9 	bl	8001640 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b64      	cmp	r3, #100	@ 0x64
 8003256:	d901      	bls.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e14b      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325c:	4b38      	ldr	r3, [pc, #224]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0f0      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003268:	4b34      	ldr	r3, [pc, #208]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003270:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 8084 	beq.w	8003382 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003282:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003284:	429a      	cmp	r2, r3
 8003286:	d07c      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003288:	4b2c      	ldr	r3, [pc, #176]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003290:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003292:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003296:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800329a:	fa93 f3a3 	rbit	r3, r3
 800329e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80032a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032a2:	fab3 f383 	clz	r3, r3
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	461a      	mov	r2, r3
 80032aa:	4b26      	ldr	r3, [pc, #152]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032ac:	4413      	add	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	461a      	mov	r2, r3
 80032b2:	2301      	movs	r3, #1
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80032ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032be:	fa93 f3a3 	rbit	r3, r3
 80032c2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80032c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032c6:	fab3 f383 	clz	r3, r3
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	461a      	mov	r2, r3
 80032ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032d0:	4413      	add	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	461a      	mov	r2, r3
 80032d6:	2300      	movs	r3, #0
 80032d8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032da:	4a18      	ldr	r2, [pc, #96]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032de:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d04b      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ea:	f7fe f9a9 	bl	8001640 <HAL_GetTick>
 80032ee:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f0:	e00a      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f2:	f7fe f9a5 	bl	8001640 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003300:	4293      	cmp	r3, r2
 8003302:	d901      	bls.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e0f5      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003308:	2302      	movs	r3, #2
 800330a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800330e:	fa93 f3a3 	rbit	r3, r3
 8003312:	627b      	str	r3, [r7, #36]	@ 0x24
 8003314:	2302      	movs	r3, #2
 8003316:	623b      	str	r3, [r7, #32]
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	fa93 f3a3 	rbit	r3, r3
 800331e:	61fb      	str	r3, [r7, #28]
  return result;
 8003320:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003322:	fab3 f383 	clz	r3, r3
 8003326:	b2db      	uxtb	r3, r3
 8003328:	095b      	lsrs	r3, r3, #5
 800332a:	b2db      	uxtb	r3, r3
 800332c:	f043 0302 	orr.w	r3, r3, #2
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d108      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003336:	4b01      	ldr	r3, [pc, #4]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	e00d      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800333c:	40021000 	.word	0x40021000
 8003340:	40007000 	.word	0x40007000
 8003344:	10908100 	.word	0x10908100
 8003348:	2302      	movs	r3, #2
 800334a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	fa93 f3a3 	rbit	r3, r3
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	4b69      	ldr	r3, [pc, #420]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003358:	2202      	movs	r2, #2
 800335a:	613a      	str	r2, [r7, #16]
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	fa92 f2a2 	rbit	r2, r2
 8003362:	60fa      	str	r2, [r7, #12]
  return result;
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	fab2 f282 	clz	r2, r2
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	f002 021f 	and.w	r2, r2, #31
 8003376:	2101      	movs	r1, #1
 8003378:	fa01 f202 	lsl.w	r2, r1, r2
 800337c:	4013      	ands	r3, r2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0b7      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003382:	4b5e      	ldr	r3, [pc, #376]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	495b      	ldr	r1, [pc, #364]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003390:	4313      	orrs	r3, r2
 8003392:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003394:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003398:	2b01      	cmp	r3, #1
 800339a:	d105      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800339c:	4b57      	ldr	r3, [pc, #348]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	4a56      	ldr	r2, [pc, #344]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d008      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033b4:	4b51      	ldr	r3, [pc, #324]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b8:	f023 0203 	bic.w	r2, r3, #3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	494e      	ldr	r1, [pc, #312]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0320 	and.w	r3, r3, #32
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d008      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033d2:	4b4a      	ldr	r3, [pc, #296]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d6:	f023 0210 	bic.w	r2, r3, #16
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	4947      	ldr	r1, [pc, #284]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d008      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80033f0:	4b42      	ldr	r3, [pc, #264]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fc:	493f      	ldr	r1, [pc, #252]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800340a:	2b00      	cmp	r3, #0
 800340c:	d008      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800340e:	4b3b      	ldr	r3, [pc, #236]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003412:	f023 0220 	bic.w	r2, r3, #32
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	4938      	ldr	r1, [pc, #224]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800341c:	4313      	orrs	r3, r2
 800341e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d008      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800342c:	4b33      	ldr	r3, [pc, #204]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800342e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003430:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	4930      	ldr	r1, [pc, #192]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800343a:	4313      	orrs	r3, r2
 800343c:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003446:	2b00      	cmp	r3, #0
 8003448:	d008      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800344a:	4b2c      	ldr	r3, [pc, #176]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	4929      	ldr	r1, [pc, #164]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003458:	4313      	orrs	r3, r2
 800345a:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003468:	4b24      	ldr	r3, [pc, #144]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800346a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800346c:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	4921      	ldr	r1, [pc, #132]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003476:	4313      	orrs	r3, r2
 8003478:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d008      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003486:	4b1d      	ldr	r3, [pc, #116]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	491a      	ldr	r1, [pc, #104]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003494:	4313      	orrs	r3, r2
 8003496:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d008      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80034a4:	4b15      	ldr	r3, [pc, #84]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b0:	4912      	ldr	r1, [pc, #72]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d008      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80034c2:	4b0e      	ldr	r3, [pc, #56]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c6:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ce:	490b      	ldr	r1, [pc, #44]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80034e0:	4b06      	ldr	r3, [pc, #24]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ec:	4903      	ldr	r1, [pc, #12]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3748      	adds	r7, #72	@ 0x48
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40021000 	.word	0x40021000

08003500 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e049      	b.n	80035a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d106      	bne.n	800352c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7fd fd6a 	bl	8001000 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3304      	adds	r3, #4
 800353c:	4619      	mov	r1, r3
 800353e:	4610      	mov	r0, r2
 8003540:	f000 fb9e 	bl	8003c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d001      	beq.n	80035c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e033      	b.n	8003630 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a19      	ldr	r2, [pc, #100]	@ (800363c <HAL_TIM_Base_Start+0x8c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d009      	beq.n	80035ee <HAL_TIM_Base_Start+0x3e>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035e2:	d004      	beq.n	80035ee <HAL_TIM_Base_Start+0x3e>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a15      	ldr	r2, [pc, #84]	@ (8003640 <HAL_TIM_Base_Start+0x90>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d115      	bne.n	800361a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	4b13      	ldr	r3, [pc, #76]	@ (8003644 <HAL_TIM_Base_Start+0x94>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2b06      	cmp	r3, #6
 80035fe:	d015      	beq.n	800362c <HAL_TIM_Base_Start+0x7c>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003606:	d011      	beq.n	800362c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0201 	orr.w	r2, r2, #1
 8003616:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003618:	e008      	b.n	800362c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f042 0201 	orr.w	r2, r2, #1
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	e000      	b.n	800362e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800362c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	40012c00 	.word	0x40012c00
 8003640:	40014000 	.word	0x40014000
 8003644:	00010007 	.word	0x00010007

08003648 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e049      	b.n	80036ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d106      	bne.n	8003674 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7fd fcfa 	bl	8001068 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3304      	adds	r3, #4
 8003684:	4619      	mov	r1, r3
 8003686:	4610      	mov	r0, r2
 8003688:	f000 fafa 	bl	8003c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d109      	bne.n	800371c <HAL_TIM_PWM_Start+0x24>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b01      	cmp	r3, #1
 8003712:	bf14      	ite	ne
 8003714:	2301      	movne	r3, #1
 8003716:	2300      	moveq	r3, #0
 8003718:	b2db      	uxtb	r3, r3
 800371a:	e03c      	b.n	8003796 <HAL_TIM_PWM_Start+0x9e>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	2b04      	cmp	r3, #4
 8003720:	d109      	bne.n	8003736 <HAL_TIM_PWM_Start+0x3e>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b01      	cmp	r3, #1
 800372c:	bf14      	ite	ne
 800372e:	2301      	movne	r3, #1
 8003730:	2300      	moveq	r3, #0
 8003732:	b2db      	uxtb	r3, r3
 8003734:	e02f      	b.n	8003796 <HAL_TIM_PWM_Start+0x9e>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2b08      	cmp	r3, #8
 800373a:	d109      	bne.n	8003750 <HAL_TIM_PWM_Start+0x58>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b01      	cmp	r3, #1
 8003746:	bf14      	ite	ne
 8003748:	2301      	movne	r3, #1
 800374a:	2300      	moveq	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	e022      	b.n	8003796 <HAL_TIM_PWM_Start+0x9e>
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	2b0c      	cmp	r3, #12
 8003754:	d109      	bne.n	800376a <HAL_TIM_PWM_Start+0x72>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b01      	cmp	r3, #1
 8003760:	bf14      	ite	ne
 8003762:	2301      	movne	r3, #1
 8003764:	2300      	moveq	r3, #0
 8003766:	b2db      	uxtb	r3, r3
 8003768:	e015      	b.n	8003796 <HAL_TIM_PWM_Start+0x9e>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b10      	cmp	r3, #16
 800376e:	d109      	bne.n	8003784 <HAL_TIM_PWM_Start+0x8c>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b01      	cmp	r3, #1
 800377a:	bf14      	ite	ne
 800377c:	2301      	movne	r3, #1
 800377e:	2300      	moveq	r3, #0
 8003780:	b2db      	uxtb	r3, r3
 8003782:	e008      	b.n	8003796 <HAL_TIM_PWM_Start+0x9e>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b01      	cmp	r3, #1
 800378e:	bf14      	ite	ne
 8003790:	2301      	movne	r3, #1
 8003792:	2300      	moveq	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e083      	b.n	80038a6 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d104      	bne.n	80037ae <HAL_TIM_PWM_Start+0xb6>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2202      	movs	r2, #2
 80037a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037ac:	e023      	b.n	80037f6 <HAL_TIM_PWM_Start+0xfe>
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2b04      	cmp	r3, #4
 80037b2:	d104      	bne.n	80037be <HAL_TIM_PWM_Start+0xc6>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037bc:	e01b      	b.n	80037f6 <HAL_TIM_PWM_Start+0xfe>
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d104      	bne.n	80037ce <HAL_TIM_PWM_Start+0xd6>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2202      	movs	r2, #2
 80037c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037cc:	e013      	b.n	80037f6 <HAL_TIM_PWM_Start+0xfe>
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2b0c      	cmp	r3, #12
 80037d2:	d104      	bne.n	80037de <HAL_TIM_PWM_Start+0xe6>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80037dc:	e00b      	b.n	80037f6 <HAL_TIM_PWM_Start+0xfe>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b10      	cmp	r3, #16
 80037e2:	d104      	bne.n	80037ee <HAL_TIM_PWM_Start+0xf6>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2202      	movs	r2, #2
 80037e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037ec:	e003      	b.n	80037f6 <HAL_TIM_PWM_Start+0xfe>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2202      	movs	r2, #2
 80037f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2201      	movs	r2, #1
 80037fc:	6839      	ldr	r1, [r7, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 fdec 	bl	80043dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a29      	ldr	r2, [pc, #164]	@ (80038b0 <HAL_TIM_PWM_Start+0x1b8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d00e      	beq.n	800382c <HAL_TIM_PWM_Start+0x134>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a28      	ldr	r2, [pc, #160]	@ (80038b4 <HAL_TIM_PWM_Start+0x1bc>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d009      	beq.n	800382c <HAL_TIM_PWM_Start+0x134>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a26      	ldr	r2, [pc, #152]	@ (80038b8 <HAL_TIM_PWM_Start+0x1c0>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d004      	beq.n	800382c <HAL_TIM_PWM_Start+0x134>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a25      	ldr	r2, [pc, #148]	@ (80038bc <HAL_TIM_PWM_Start+0x1c4>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d101      	bne.n	8003830 <HAL_TIM_PWM_Start+0x138>
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <HAL_TIM_PWM_Start+0x13a>
 8003830:	2300      	movs	r3, #0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d007      	beq.n	8003846 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003844:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a19      	ldr	r2, [pc, #100]	@ (80038b0 <HAL_TIM_PWM_Start+0x1b8>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d009      	beq.n	8003864 <HAL_TIM_PWM_Start+0x16c>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003858:	d004      	beq.n	8003864 <HAL_TIM_PWM_Start+0x16c>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a15      	ldr	r2, [pc, #84]	@ (80038b4 <HAL_TIM_PWM_Start+0x1bc>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d115      	bne.n	8003890 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689a      	ldr	r2, [r3, #8]
 800386a:	4b15      	ldr	r3, [pc, #84]	@ (80038c0 <HAL_TIM_PWM_Start+0x1c8>)
 800386c:	4013      	ands	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2b06      	cmp	r3, #6
 8003874:	d015      	beq.n	80038a2 <HAL_TIM_PWM_Start+0x1aa>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800387c:	d011      	beq.n	80038a2 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f042 0201 	orr.w	r2, r2, #1
 800388c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800388e:	e008      	b.n	80038a2 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0201 	orr.w	r2, r2, #1
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	e000      	b.n	80038a4 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40012c00 	.word	0x40012c00
 80038b4:	40014000 	.word	0x40014000
 80038b8:	40014400 	.word	0x40014400
 80038bc:	40014800 	.word	0x40014800
 80038c0:	00010007 	.word	0x00010007

080038c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d101      	bne.n	80038e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038de:	2302      	movs	r3, #2
 80038e0:	e0ff      	b.n	8003ae2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b14      	cmp	r3, #20
 80038ee:	f200 80f0 	bhi.w	8003ad2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80038f2:	a201      	add	r2, pc, #4	@ (adr r2, 80038f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80038f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f8:	0800394d 	.word	0x0800394d
 80038fc:	08003ad3 	.word	0x08003ad3
 8003900:	08003ad3 	.word	0x08003ad3
 8003904:	08003ad3 	.word	0x08003ad3
 8003908:	0800398d 	.word	0x0800398d
 800390c:	08003ad3 	.word	0x08003ad3
 8003910:	08003ad3 	.word	0x08003ad3
 8003914:	08003ad3 	.word	0x08003ad3
 8003918:	080039cf 	.word	0x080039cf
 800391c:	08003ad3 	.word	0x08003ad3
 8003920:	08003ad3 	.word	0x08003ad3
 8003924:	08003ad3 	.word	0x08003ad3
 8003928:	08003a0f 	.word	0x08003a0f
 800392c:	08003ad3 	.word	0x08003ad3
 8003930:	08003ad3 	.word	0x08003ad3
 8003934:	08003ad3 	.word	0x08003ad3
 8003938:	08003a51 	.word	0x08003a51
 800393c:	08003ad3 	.word	0x08003ad3
 8003940:	08003ad3 	.word	0x08003ad3
 8003944:	08003ad3 	.word	0x08003ad3
 8003948:	08003a91 	.word	0x08003a91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68b9      	ldr	r1, [r7, #8]
 8003952:	4618      	mov	r0, r3
 8003954:	f000 fa02 	bl	8003d5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699a      	ldr	r2, [r3, #24]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0208 	orr.w	r2, r2, #8
 8003966:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	699a      	ldr	r2, [r3, #24]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0204 	bic.w	r2, r2, #4
 8003976:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6999      	ldr	r1, [r3, #24]
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	691a      	ldr	r2, [r3, #16]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	619a      	str	r2, [r3, #24]
      break;
 800398a:	e0a5      	b.n	8003ad8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68b9      	ldr	r1, [r7, #8]
 8003992:	4618      	mov	r0, r3
 8003994:	f000 fa68 	bl	8003e68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	699a      	ldr	r2, [r3, #24]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	699a      	ldr	r2, [r3, #24]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6999      	ldr	r1, [r3, #24]
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	021a      	lsls	r2, r3, #8
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	619a      	str	r2, [r3, #24]
      break;
 80039cc:	e084      	b.n	8003ad8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68b9      	ldr	r1, [r7, #8]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 fac7 	bl	8003f68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	69da      	ldr	r2, [r3, #28]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f042 0208 	orr.w	r2, r2, #8
 80039e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	69da      	ldr	r2, [r3, #28]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0204 	bic.w	r2, r2, #4
 80039f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	69d9      	ldr	r1, [r3, #28]
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	61da      	str	r2, [r3, #28]
      break;
 8003a0c:	e064      	b.n	8003ad8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68b9      	ldr	r1, [r7, #8]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 fb25 	bl	8004064 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	69da      	ldr	r2, [r3, #28]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	69da      	ldr	r2, [r3, #28]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	69d9      	ldr	r1, [r3, #28]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	021a      	lsls	r2, r3, #8
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	61da      	str	r2, [r3, #28]
      break;
 8003a4e:	e043      	b.n	8003ad8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68b9      	ldr	r1, [r7, #8]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 fb68 	bl	800412c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0208 	orr.w	r2, r2, #8
 8003a6a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0204 	bic.w	r2, r2, #4
 8003a7a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	691a      	ldr	r2, [r3, #16]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003a8e:	e023      	b.n	8003ad8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68b9      	ldr	r1, [r7, #8]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fba6 	bl	80041e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003aaa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003aba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	021a      	lsls	r2, r3, #8
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003ad0:	e002      	b.n	8003ad8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ad6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3718      	adds	r7, #24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop

08003aec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_TIM_ConfigClockSource+0x1c>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e0b6      	b.n	8003c76 <HAL_TIM_ConfigClockSource+0x18a>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b26:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003b2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b44:	d03e      	beq.n	8003bc4 <HAL_TIM_ConfigClockSource+0xd8>
 8003b46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b4a:	f200 8087 	bhi.w	8003c5c <HAL_TIM_ConfigClockSource+0x170>
 8003b4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b52:	f000 8086 	beq.w	8003c62 <HAL_TIM_ConfigClockSource+0x176>
 8003b56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b5a:	d87f      	bhi.n	8003c5c <HAL_TIM_ConfigClockSource+0x170>
 8003b5c:	2b70      	cmp	r3, #112	@ 0x70
 8003b5e:	d01a      	beq.n	8003b96 <HAL_TIM_ConfigClockSource+0xaa>
 8003b60:	2b70      	cmp	r3, #112	@ 0x70
 8003b62:	d87b      	bhi.n	8003c5c <HAL_TIM_ConfigClockSource+0x170>
 8003b64:	2b60      	cmp	r3, #96	@ 0x60
 8003b66:	d050      	beq.n	8003c0a <HAL_TIM_ConfigClockSource+0x11e>
 8003b68:	2b60      	cmp	r3, #96	@ 0x60
 8003b6a:	d877      	bhi.n	8003c5c <HAL_TIM_ConfigClockSource+0x170>
 8003b6c:	2b50      	cmp	r3, #80	@ 0x50
 8003b6e:	d03c      	beq.n	8003bea <HAL_TIM_ConfigClockSource+0xfe>
 8003b70:	2b50      	cmp	r3, #80	@ 0x50
 8003b72:	d873      	bhi.n	8003c5c <HAL_TIM_ConfigClockSource+0x170>
 8003b74:	2b40      	cmp	r3, #64	@ 0x40
 8003b76:	d058      	beq.n	8003c2a <HAL_TIM_ConfigClockSource+0x13e>
 8003b78:	2b40      	cmp	r3, #64	@ 0x40
 8003b7a:	d86f      	bhi.n	8003c5c <HAL_TIM_ConfigClockSource+0x170>
 8003b7c:	2b30      	cmp	r3, #48	@ 0x30
 8003b7e:	d064      	beq.n	8003c4a <HAL_TIM_ConfigClockSource+0x15e>
 8003b80:	2b30      	cmp	r3, #48	@ 0x30
 8003b82:	d86b      	bhi.n	8003c5c <HAL_TIM_ConfigClockSource+0x170>
 8003b84:	2b20      	cmp	r3, #32
 8003b86:	d060      	beq.n	8003c4a <HAL_TIM_ConfigClockSource+0x15e>
 8003b88:	2b20      	cmp	r3, #32
 8003b8a:	d867      	bhi.n	8003c5c <HAL_TIM_ConfigClockSource+0x170>
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d05c      	beq.n	8003c4a <HAL_TIM_ConfigClockSource+0x15e>
 8003b90:	2b10      	cmp	r3, #16
 8003b92:	d05a      	beq.n	8003c4a <HAL_TIM_ConfigClockSource+0x15e>
 8003b94:	e062      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ba6:	f000 fbf9 	bl	800439c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003bb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	609a      	str	r2, [r3, #8]
      break;
 8003bc2:	e04f      	b.n	8003c64 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bd4:	f000 fbe2 	bl	800439c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003be6:	609a      	str	r2, [r3, #8]
      break;
 8003be8:	e03c      	b.n	8003c64 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	f000 fb56 	bl	80042a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2150      	movs	r1, #80	@ 0x50
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 fbaf 	bl	8004366 <TIM_ITRx_SetConfig>
      break;
 8003c08:	e02c      	b.n	8003c64 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c16:	461a      	mov	r2, r3
 8003c18:	f000 fb75 	bl	8004306 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2160      	movs	r1, #96	@ 0x60
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fb9f 	bl	8004366 <TIM_ITRx_SetConfig>
      break;
 8003c28:	e01c      	b.n	8003c64 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c36:	461a      	mov	r2, r3
 8003c38:	f000 fb36 	bl	80042a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2140      	movs	r1, #64	@ 0x40
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fb8f 	bl	8004366 <TIM_ITRx_SetConfig>
      break;
 8003c48:	e00c      	b.n	8003c64 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4619      	mov	r1, r3
 8003c54:	4610      	mov	r0, r2
 8003c56:	f000 fb86 	bl	8004366 <TIM_ITRx_SetConfig>
      break;
 8003c5a:	e003      	b.n	8003c64 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c60:	e000      	b.n	8003c64 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003c62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
	...

08003c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a2e      	ldr	r2, [pc, #184]	@ (8003d4c <TIM_Base_SetConfig+0xcc>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d003      	beq.n	8003ca0 <TIM_Base_SetConfig+0x20>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c9e:	d108      	bne.n	8003cb2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a25      	ldr	r2, [pc, #148]	@ (8003d4c <TIM_Base_SetConfig+0xcc>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d00f      	beq.n	8003cda <TIM_Base_SetConfig+0x5a>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cc0:	d00b      	beq.n	8003cda <TIM_Base_SetConfig+0x5a>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a22      	ldr	r2, [pc, #136]	@ (8003d50 <TIM_Base_SetConfig+0xd0>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d007      	beq.n	8003cda <TIM_Base_SetConfig+0x5a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a21      	ldr	r2, [pc, #132]	@ (8003d54 <TIM_Base_SetConfig+0xd4>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d003      	beq.n	8003cda <TIM_Base_SetConfig+0x5a>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a20      	ldr	r2, [pc, #128]	@ (8003d58 <TIM_Base_SetConfig+0xd8>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d108      	bne.n	8003cec <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a0e      	ldr	r2, [pc, #56]	@ (8003d4c <TIM_Base_SetConfig+0xcc>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d00b      	beq.n	8003d30 <TIM_Base_SetConfig+0xb0>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a0d      	ldr	r2, [pc, #52]	@ (8003d50 <TIM_Base_SetConfig+0xd0>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d007      	beq.n	8003d30 <TIM_Base_SetConfig+0xb0>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a0c      	ldr	r2, [pc, #48]	@ (8003d54 <TIM_Base_SetConfig+0xd4>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d003      	beq.n	8003d30 <TIM_Base_SetConfig+0xb0>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a0b      	ldr	r2, [pc, #44]	@ (8003d58 <TIM_Base_SetConfig+0xd8>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d103      	bne.n	8003d38 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	691a      	ldr	r2, [r3, #16]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	615a      	str	r2, [r3, #20]
}
 8003d3e:	bf00      	nop
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	40012c00 	.word	0x40012c00
 8003d50:	40014000 	.word	0x40014000
 8003d54:	40014400 	.word	0x40014400
 8003d58:	40014800 	.word	0x40014800

08003d5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	f023 0201 	bic.w	r2, r3, #1
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 0303 	bic.w	r3, r3, #3
 8003d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f023 0302 	bic.w	r3, r3, #2
 8003da8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a28      	ldr	r2, [pc, #160]	@ (8003e58 <TIM_OC1_SetConfig+0xfc>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d00b      	beq.n	8003dd4 <TIM_OC1_SetConfig+0x78>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a27      	ldr	r2, [pc, #156]	@ (8003e5c <TIM_OC1_SetConfig+0x100>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d007      	beq.n	8003dd4 <TIM_OC1_SetConfig+0x78>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a26      	ldr	r2, [pc, #152]	@ (8003e60 <TIM_OC1_SetConfig+0x104>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d003      	beq.n	8003dd4 <TIM_OC1_SetConfig+0x78>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a25      	ldr	r2, [pc, #148]	@ (8003e64 <TIM_OC1_SetConfig+0x108>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d10c      	bne.n	8003dee <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	f023 0308 	bic.w	r3, r3, #8
 8003dda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f023 0304 	bic.w	r3, r3, #4
 8003dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a19      	ldr	r2, [pc, #100]	@ (8003e58 <TIM_OC1_SetConfig+0xfc>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00b      	beq.n	8003e0e <TIM_OC1_SetConfig+0xb2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a18      	ldr	r2, [pc, #96]	@ (8003e5c <TIM_OC1_SetConfig+0x100>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d007      	beq.n	8003e0e <TIM_OC1_SetConfig+0xb2>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a17      	ldr	r2, [pc, #92]	@ (8003e60 <TIM_OC1_SetConfig+0x104>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d003      	beq.n	8003e0e <TIM_OC1_SetConfig+0xb2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a16      	ldr	r2, [pc, #88]	@ (8003e64 <TIM_OC1_SetConfig+0x108>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d111      	bne.n	8003e32 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	621a      	str	r2, [r3, #32]
}
 8003e4c:	bf00      	nop
 8003e4e:	371c      	adds	r7, #28
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	40012c00 	.word	0x40012c00
 8003e5c:	40014000 	.word	0x40014000
 8003e60:	40014400 	.word	0x40014400
 8003e64:	40014800 	.word	0x40014800

08003e68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b087      	sub	sp, #28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	f023 0210 	bic.w	r2, r3, #16
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	021b      	lsls	r3, r3, #8
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f023 0320 	bic.w	r3, r3, #32
 8003eb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	011b      	lsls	r3, r3, #4
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a24      	ldr	r2, [pc, #144]	@ (8003f58 <TIM_OC2_SetConfig+0xf0>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d10d      	bne.n	8003ee8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ed2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	011b      	lsls	r3, r3, #4
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ee6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a1b      	ldr	r2, [pc, #108]	@ (8003f58 <TIM_OC2_SetConfig+0xf0>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d00b      	beq.n	8003f08 <TIM_OC2_SetConfig+0xa0>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a1a      	ldr	r2, [pc, #104]	@ (8003f5c <TIM_OC2_SetConfig+0xf4>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d007      	beq.n	8003f08 <TIM_OC2_SetConfig+0xa0>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a19      	ldr	r2, [pc, #100]	@ (8003f60 <TIM_OC2_SetConfig+0xf8>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d003      	beq.n	8003f08 <TIM_OC2_SetConfig+0xa0>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a18      	ldr	r2, [pc, #96]	@ (8003f64 <TIM_OC2_SetConfig+0xfc>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d113      	bne.n	8003f30 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f0e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f16:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	621a      	str	r2, [r3, #32]
}
 8003f4a:	bf00      	nop
 8003f4c:	371c      	adds	r7, #28
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	40012c00 	.word	0x40012c00
 8003f5c:	40014000 	.word	0x40014000
 8003f60:	40014400 	.word	0x40014400
 8003f64:	40014800 	.word	0x40014800

08003f68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 0303 	bic.w	r3, r3, #3
 8003fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003fb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	021b      	lsls	r3, r3, #8
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a23      	ldr	r2, [pc, #140]	@ (8004054 <TIM_OC3_SetConfig+0xec>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d10d      	bne.n	8003fe6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003fd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	021b      	lsls	r3, r3, #8
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003fe4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a1a      	ldr	r2, [pc, #104]	@ (8004054 <TIM_OC3_SetConfig+0xec>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d00b      	beq.n	8004006 <TIM_OC3_SetConfig+0x9e>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a19      	ldr	r2, [pc, #100]	@ (8004058 <TIM_OC3_SetConfig+0xf0>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d007      	beq.n	8004006 <TIM_OC3_SetConfig+0x9e>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a18      	ldr	r2, [pc, #96]	@ (800405c <TIM_OC3_SetConfig+0xf4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d003      	beq.n	8004006 <TIM_OC3_SetConfig+0x9e>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a17      	ldr	r2, [pc, #92]	@ (8004060 <TIM_OC3_SetConfig+0xf8>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d113      	bne.n	800402e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800400c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004014:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	4313      	orrs	r3, r2
 8004020:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	4313      	orrs	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	621a      	str	r2, [r3, #32]
}
 8004048:	bf00      	nop
 800404a:	371c      	adds	r7, #28
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	40012c00 	.word	0x40012c00
 8004058:	40014000 	.word	0x40014000
 800405c:	40014400 	.word	0x40014400
 8004060:	40014800 	.word	0x40014800

08004064 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004064:	b480      	push	{r7}
 8004066:	b087      	sub	sp, #28
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004092:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800409e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	021b      	lsls	r3, r3, #8
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	031b      	lsls	r3, r3, #12
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a16      	ldr	r2, [pc, #88]	@ (800411c <TIM_OC4_SetConfig+0xb8>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d00b      	beq.n	80040e0 <TIM_OC4_SetConfig+0x7c>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a15      	ldr	r2, [pc, #84]	@ (8004120 <TIM_OC4_SetConfig+0xbc>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d007      	beq.n	80040e0 <TIM_OC4_SetConfig+0x7c>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a14      	ldr	r2, [pc, #80]	@ (8004124 <TIM_OC4_SetConfig+0xc0>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d003      	beq.n	80040e0 <TIM_OC4_SetConfig+0x7c>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a13      	ldr	r2, [pc, #76]	@ (8004128 <TIM_OC4_SetConfig+0xc4>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d109      	bne.n	80040f4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	019b      	lsls	r3, r3, #6
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	621a      	str	r2, [r3, #32]
}
 800410e:	bf00      	nop
 8004110:	371c      	adds	r7, #28
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	40012c00 	.word	0x40012c00
 8004120:	40014000 	.word	0x40014000
 8004124:	40014400 	.word	0x40014400
 8004128:	40014800 	.word	0x40014800

0800412c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800415a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800415e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004170:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	041b      	lsls	r3, r3, #16
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	4313      	orrs	r3, r2
 800417c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a15      	ldr	r2, [pc, #84]	@ (80041d8 <TIM_OC5_SetConfig+0xac>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d00b      	beq.n	800419e <TIM_OC5_SetConfig+0x72>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a14      	ldr	r2, [pc, #80]	@ (80041dc <TIM_OC5_SetConfig+0xb0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d007      	beq.n	800419e <TIM_OC5_SetConfig+0x72>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a13      	ldr	r2, [pc, #76]	@ (80041e0 <TIM_OC5_SetConfig+0xb4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d003      	beq.n	800419e <TIM_OC5_SetConfig+0x72>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a12      	ldr	r2, [pc, #72]	@ (80041e4 <TIM_OC5_SetConfig+0xb8>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d109      	bne.n	80041b2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	021b      	lsls	r3, r3, #8
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	621a      	str	r2, [r3, #32]
}
 80041cc:	bf00      	nop
 80041ce:	371c      	adds	r7, #28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	40012c00 	.word	0x40012c00
 80041dc:	40014000 	.word	0x40014000
 80041e0:	40014400 	.word	0x40014400
 80041e4:	40014800 	.word	0x40014800

080041e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800420e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004216:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800421a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	021b      	lsls	r3, r3, #8
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	4313      	orrs	r3, r2
 8004226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800422e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	051b      	lsls	r3, r3, #20
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a16      	ldr	r2, [pc, #88]	@ (8004298 <TIM_OC6_SetConfig+0xb0>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d00b      	beq.n	800425c <TIM_OC6_SetConfig+0x74>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a15      	ldr	r2, [pc, #84]	@ (800429c <TIM_OC6_SetConfig+0xb4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d007      	beq.n	800425c <TIM_OC6_SetConfig+0x74>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a14      	ldr	r2, [pc, #80]	@ (80042a0 <TIM_OC6_SetConfig+0xb8>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d003      	beq.n	800425c <TIM_OC6_SetConfig+0x74>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a13      	ldr	r2, [pc, #76]	@ (80042a4 <TIM_OC6_SetConfig+0xbc>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d109      	bne.n	8004270 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004262:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	029b      	lsls	r3, r3, #10
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	4313      	orrs	r3, r2
 800426e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	621a      	str	r2, [r3, #32]
}
 800428a:	bf00      	nop
 800428c:	371c      	adds	r7, #28
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40012c00 	.word	0x40012c00
 800429c:	40014000 	.word	0x40014000
 80042a0:	40014400 	.word	0x40014400
 80042a4:	40014800 	.word	0x40014800

080042a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	f023 0201 	bic.w	r2, r3, #1
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f023 030a 	bic.w	r3, r3, #10
 80042e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	621a      	str	r2, [r3, #32]
}
 80042fa:	bf00      	nop
 80042fc:	371c      	adds	r7, #28
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004306:	b480      	push	{r7}
 8004308:	b087      	sub	sp, #28
 800430a:	af00      	add	r7, sp, #0
 800430c:	60f8      	str	r0, [r7, #12]
 800430e:	60b9      	str	r1, [r7, #8]
 8004310:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	f023 0210 	bic.w	r2, r3, #16
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004330:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	031b      	lsls	r3, r3, #12
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	4313      	orrs	r3, r2
 800433a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004342:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	4313      	orrs	r3, r2
 800434c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	621a      	str	r2, [r3, #32]
}
 800435a:	bf00      	nop
 800435c:	371c      	adds	r7, #28
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004366:	b480      	push	{r7}
 8004368:	b085      	sub	sp, #20
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
 800436e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800437c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4313      	orrs	r3, r2
 8004384:	f043 0307 	orr.w	r3, r3, #7
 8004388:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	609a      	str	r2, [r3, #8]
}
 8004390:	bf00      	nop
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	021a      	lsls	r2, r3, #8
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	431a      	orrs	r2, r3
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	609a      	str	r2, [r3, #8]
}
 80043d0:	bf00      	nop
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043dc:	b480      	push	{r7}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f003 031f 	and.w	r3, r3, #31
 80043ee:	2201      	movs	r2, #1
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6a1a      	ldr	r2, [r3, #32]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	43db      	mvns	r3, r3
 80043fe:	401a      	ands	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6a1a      	ldr	r2, [r3, #32]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f003 031f 	and.w	r3, r3, #31
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	fa01 f303 	lsl.w	r3, r1, r3
 8004414:	431a      	orrs	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	621a      	str	r2, [r3, #32]
}
 800441a:	bf00      	nop
 800441c:	371c      	adds	r7, #28
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
	...

08004428 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004438:	2b01      	cmp	r3, #1
 800443a:	d101      	bne.n	8004440 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800443c:	2302      	movs	r3, #2
 800443e:	e04f      	b.n	80044e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a21      	ldr	r2, [pc, #132]	@ (80044ec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d108      	bne.n	800447c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004470:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	4313      	orrs	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004482:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a14      	ldr	r2, [pc, #80]	@ (80044ec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d009      	beq.n	80044b4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044a8:	d004      	beq.n	80044b4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a10      	ldr	r2, [pc, #64]	@ (80044f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d10c      	bne.n	80044ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	40012c00 	.word	0x40012c00
 80044f0:	40014000 	.word	0x40014000

080044f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80044fe:	2300      	movs	r3, #0
 8004500:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004508:	2b01      	cmp	r3, #1
 800450a:	d101      	bne.n	8004510 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800450c:	2302      	movs	r3, #2
 800450e:	e060      	b.n	80045d2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	4313      	orrs	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	4313      	orrs	r3, r2
 8004532:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	4313      	orrs	r3, r2
 8004540:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4313      	orrs	r3, r2
 800454e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	4313      	orrs	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004576:	4313      	orrs	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	041b      	lsls	r3, r3, #16
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a14      	ldr	r2, [pc, #80]	@ (80045e0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d115      	bne.n	80045c0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459e:	051b      	lsls	r3, r3, #20
 80045a0:	4313      	orrs	r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	4313      	orrs	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	40012c00 	.word	0x40012c00

080045e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e040      	b.n	8004678 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d106      	bne.n	800460c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7fc fe08 	bl	800121c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2224      	movs	r2, #36	@ 0x24
 8004610:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 0201 	bic.w	r2, r2, #1
 8004620:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fbfc 	bl	8004e20 <UART_SetConfig>
 8004628:	4603      	mov	r3, r0
 800462a:	2b01      	cmp	r3, #1
 800462c:	d101      	bne.n	8004632 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e022      	b.n	8004678 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004636:	2b00      	cmp	r3, #0
 8004638:	d002      	beq.n	8004640 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 fd26 	bl	800508c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800464e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689a      	ldr	r2, [r3, #8]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800465e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f042 0201 	orr.w	r2, r2, #1
 800466e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 fdad 	bl	80051d0 <UART_CheckIdleState>
 8004676:	4603      	mov	r3, r0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b08a      	sub	sp, #40	@ 0x28
 8004684:	af02      	add	r7, sp, #8
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	603b      	str	r3, [r7, #0]
 800468c:	4613      	mov	r3, r2
 800468e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004696:	2b20      	cmp	r3, #32
 8004698:	f040 80b6 	bne.w	8004808 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <HAL_UART_Receive+0x28>
 80046a2:	88fb      	ldrh	r3, [r7, #6]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e0ae      	b.n	800480a <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2222      	movs	r2, #34	@ 0x22
 80046b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046c2:	f7fc ffbd 	bl	8001640 <HAL_GetTick>
 80046c6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	88fa      	ldrh	r2, [r7, #6]
 80046cc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	88fa      	ldrh	r2, [r7, #6]
 80046d4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046e0:	d10e      	bne.n	8004700 <HAL_UART_Receive+0x80>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d105      	bne.n	80046f6 <HAL_UART_Receive+0x76>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80046f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80046f4:	e02d      	b.n	8004752 <HAL_UART_Receive+0xd2>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	22ff      	movs	r2, #255	@ 0xff
 80046fa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80046fe:	e028      	b.n	8004752 <HAL_UART_Receive+0xd2>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10d      	bne.n	8004724 <HAL_UART_Receive+0xa4>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d104      	bne.n	800471a <HAL_UART_Receive+0x9a>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	22ff      	movs	r2, #255	@ 0xff
 8004714:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004718:	e01b      	b.n	8004752 <HAL_UART_Receive+0xd2>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	227f      	movs	r2, #127	@ 0x7f
 800471e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004722:	e016      	b.n	8004752 <HAL_UART_Receive+0xd2>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800472c:	d10d      	bne.n	800474a <HAL_UART_Receive+0xca>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d104      	bne.n	8004740 <HAL_UART_Receive+0xc0>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	227f      	movs	r2, #127	@ 0x7f
 800473a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800473e:	e008      	b.n	8004752 <HAL_UART_Receive+0xd2>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	223f      	movs	r2, #63	@ 0x3f
 8004744:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004748:	e003      	b.n	8004752 <HAL_UART_Receive+0xd2>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004758:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004762:	d108      	bne.n	8004776 <HAL_UART_Receive+0xf6>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d104      	bne.n	8004776 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800476c:	2300      	movs	r3, #0
 800476e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	61bb      	str	r3, [r7, #24]
 8004774:	e003      	b.n	800477e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800477a:	2300      	movs	r3, #0
 800477c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800477e:	e037      	b.n	80047f0 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	2200      	movs	r2, #0
 8004788:	2120      	movs	r1, #32
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 fdc8 	bl	8005320 <UART_WaitOnFlagUntilTimeout>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d005      	beq.n	80047a2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e033      	b.n	800480a <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10c      	bne.n	80047c2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	8a7b      	ldrh	r3, [r7, #18]
 80047b2:	4013      	ands	r3, r2
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	3302      	adds	r3, #2
 80047be:	61bb      	str	r3, [r7, #24]
 80047c0:	e00d      	b.n	80047de <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	8a7b      	ldrh	r3, [r7, #18]
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	4013      	ands	r3, r2
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	3301      	adds	r3, #1
 80047dc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	3b01      	subs	r3, #1
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1c1      	bne.n	8004780 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2220      	movs	r2, #32
 8004800:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8004804:	2300      	movs	r3, #0
 8004806:	e000      	b.n	800480a <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004808:	2302      	movs	r3, #2
  }
}
 800480a:	4618      	mov	r0, r3
 800480c:	3720      	adds	r7, #32
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
	...

08004814 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b0ba      	sub	sp, #232	@ 0xe8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800483a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800483e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004842:	4013      	ands	r3, r2
 8004844:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004848:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800484c:	2b00      	cmp	r3, #0
 800484e:	d115      	bne.n	800487c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004854:	f003 0320 	and.w	r3, r3, #32
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00f      	beq.n	800487c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800485c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004860:	f003 0320 	and.w	r3, r3, #32
 8004864:	2b00      	cmp	r3, #0
 8004866:	d009      	beq.n	800487c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 82ab 	beq.w	8004dc8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	4798      	blx	r3
      }
      return;
 800487a:	e2a5      	b.n	8004dc8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800487c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 8117 	beq.w	8004ab4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d106      	bne.n	80048a0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004892:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004896:	4b85      	ldr	r3, [pc, #532]	@ (8004aac <HAL_UART_IRQHandler+0x298>)
 8004898:	4013      	ands	r3, r2
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 810a 	beq.w	8004ab4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80048a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d011      	beq.n	80048d0 <HAL_UART_IRQHandler+0xbc>
 80048ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00b      	beq.n	80048d0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2201      	movs	r2, #1
 80048be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048c6:	f043 0201 	orr.w	r2, r3, #1
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d011      	beq.n	8004900 <HAL_UART_IRQHandler+0xec>
 80048dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00b      	beq.n	8004900 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2202      	movs	r2, #2
 80048ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048f6:	f043 0204 	orr.w	r2, r3, #4
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b00      	cmp	r3, #0
 800490a:	d011      	beq.n	8004930 <HAL_UART_IRQHandler+0x11c>
 800490c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00b      	beq.n	8004930 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2204      	movs	r2, #4
 800491e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004926:	f043 0202 	orr.w	r2, r3, #2
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	2b00      	cmp	r3, #0
 800493a:	d017      	beq.n	800496c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800493c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004940:	f003 0320 	and.w	r3, r3, #32
 8004944:	2b00      	cmp	r3, #0
 8004946:	d105      	bne.n	8004954 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800494c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00b      	beq.n	800496c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2208      	movs	r2, #8
 800495a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004962:	f043 0208 	orr.w	r2, r3, #8
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800496c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004970:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004974:	2b00      	cmp	r3, #0
 8004976:	d012      	beq.n	800499e <HAL_UART_IRQHandler+0x18a>
 8004978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800497c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00c      	beq.n	800499e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800498c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004994:	f043 0220 	orr.w	r2, r3, #32
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 8211 	beq.w	8004dcc <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80049aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049ae:	f003 0320 	and.w	r3, r3, #32
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00d      	beq.n	80049d2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80049b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049ba:	f003 0320 	and.w	r3, r3, #32
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d007      	beq.n	80049d2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049e6:	2b40      	cmp	r3, #64	@ 0x40
 80049e8:	d005      	beq.n	80049f6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80049ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049ee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d04f      	beq.n	8004a96 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 fcf9 	bl	80053ee <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a06:	2b40      	cmp	r3, #64	@ 0x40
 8004a08:	d141      	bne.n	8004a8e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	3308      	adds	r3, #8
 8004a10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a18:	e853 3f00 	ldrex	r3, [r3]
 8004a1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004a20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	3308      	adds	r3, #8
 8004a32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004a36:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004a3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004a42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004a46:	e841 2300 	strex	r3, r2, [r1]
 8004a4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004a4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1d9      	bne.n	8004a0a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d013      	beq.n	8004a86 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a62:	4a13      	ldr	r2, [pc, #76]	@ (8004ab0 <HAL_UART_IRQHandler+0x29c>)
 8004a64:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fc ff62 	bl	8001934 <HAL_DMA_Abort_IT>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d017      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004a80:	4610      	mov	r0, r2
 8004a82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a84:	e00f      	b.n	8004aa6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f9b4 	bl	8004df4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a8c:	e00b      	b.n	8004aa6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f9b0 	bl	8004df4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a94:	e007      	b.n	8004aa6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f9ac 	bl	8004df4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004aa4:	e192      	b.n	8004dcc <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aa6:	bf00      	nop
    return;
 8004aa8:	e190      	b.n	8004dcc <HAL_UART_IRQHandler+0x5b8>
 8004aaa:	bf00      	nop
 8004aac:	04000120 	.word	0x04000120
 8004ab0:	080054b7 	.word	0x080054b7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	f040 814b 	bne.w	8004d54 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ac2:	f003 0310 	and.w	r3, r3, #16
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f000 8144 	beq.w	8004d54 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ad0:	f003 0310 	and.w	r3, r3, #16
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 813d 	beq.w	8004d54 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2210      	movs	r2, #16
 8004ae0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aec:	2b40      	cmp	r3, #64	@ 0x40
 8004aee:	f040 80b5 	bne.w	8004c5c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004afe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 8164 	beq.w	8004dd0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004b0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b12:	429a      	cmp	r2, r3
 8004b14:	f080 815c 	bcs.w	8004dd0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b1e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	2b20      	cmp	r3, #32
 8004b2a:	f000 8086 	beq.w	8004c3a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b36:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b3a:	e853 3f00 	ldrex	r3, [r3]
 8004b3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004b42:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b46:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b4a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	461a      	mov	r2, r3
 8004b54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004b58:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b5c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b60:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004b64:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004b68:	e841 2300 	strex	r3, r2, [r1]
 8004b6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004b70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1da      	bne.n	8004b2e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3308      	adds	r3, #8
 8004b7e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b82:	e853 3f00 	ldrex	r3, [r3]
 8004b86:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b88:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b8a:	f023 0301 	bic.w	r3, r3, #1
 8004b8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	3308      	adds	r3, #8
 8004b98:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b9c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004ba0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004ba4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004ba8:	e841 2300 	strex	r3, r2, [r1]
 8004bac:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004bae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1e1      	bne.n	8004b78 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3308      	adds	r3, #8
 8004bba:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bbe:	e853 3f00 	ldrex	r3, [r3]
 8004bc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004bc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3308      	adds	r3, #8
 8004bd4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004bd8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004bda:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bdc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004bde:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004be0:	e841 2300 	strex	r3, r2, [r1]
 8004be4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004be6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1e3      	bne.n	8004bb4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c02:	e853 3f00 	ldrex	r3, [r3]
 8004c06:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004c08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c0a:	f023 0310 	bic.w	r3, r3, #16
 8004c0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	461a      	mov	r2, r3
 8004c18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c1e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c24:	e841 2300 	strex	r3, r2, [r1]
 8004c28:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1e4      	bne.n	8004bfa <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7fc fe44 	bl	80018c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	4619      	mov	r1, r3
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f8d7 	bl	8004e08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c5a:	e0b9      	b.n	8004dd0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 80ab 	beq.w	8004dd4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004c7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 80a6 	beq.w	8004dd4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c90:	e853 3f00 	ldrex	r3, [r3]
 8004c94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004caa:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cac:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cb2:	e841 2300 	strex	r3, r2, [r1]
 8004cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004cb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1e4      	bne.n	8004c88 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	3308      	adds	r3, #8
 8004cc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc8:	e853 3f00 	ldrex	r3, [r3]
 8004ccc:	623b      	str	r3, [r7, #32]
   return(result);
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	f023 0301 	bic.w	r3, r3, #1
 8004cd4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3308      	adds	r3, #8
 8004cde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004ce2:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ce8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cea:	e841 2300 	strex	r3, r2, [r1]
 8004cee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1e3      	bne.n	8004cbe <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	e853 3f00 	ldrex	r3, [r3]
 8004d16:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 0310 	bic.w	r3, r3, #16
 8004d1e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	461a      	mov	r2, r3
 8004d28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004d2c:	61fb      	str	r3, [r7, #28]
 8004d2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	69b9      	ldr	r1, [r7, #24]
 8004d32:	69fa      	ldr	r2, [r7, #28]
 8004d34:	e841 2300 	strex	r3, r2, [r1]
 8004d38:	617b      	str	r3, [r7, #20]
   return(result);
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e4      	bne.n	8004d0a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2202      	movs	r2, #2
 8004d44:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f85b 	bl	8004e08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d52:	e03f      	b.n	8004dd4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00e      	beq.n	8004d7e <HAL_UART_IRQHandler+0x56a>
 8004d60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d008      	beq.n	8004d7e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004d74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 fbdd 	bl	8005536 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d7c:	e02d      	b.n	8004dda <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00e      	beq.n	8004da8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d008      	beq.n	8004da8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d01c      	beq.n	8004dd8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	4798      	blx	r3
    }
    return;
 8004da6:	e017      	b.n	8004dd8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d012      	beq.n	8004dda <HAL_UART_IRQHandler+0x5c6>
 8004db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00c      	beq.n	8004dda <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 fb8e 	bl	80054e2 <UART_EndTransmit_IT>
    return;
 8004dc6:	e008      	b.n	8004dda <HAL_UART_IRQHandler+0x5c6>
      return;
 8004dc8:	bf00      	nop
 8004dca:	e006      	b.n	8004dda <HAL_UART_IRQHandler+0x5c6>
    return;
 8004dcc:	bf00      	nop
 8004dce:	e004      	b.n	8004dda <HAL_UART_IRQHandler+0x5c6>
      return;
 8004dd0:	bf00      	nop
 8004dd2:	e002      	b.n	8004dda <HAL_UART_IRQHandler+0x5c6>
      return;
 8004dd4:	bf00      	nop
 8004dd6:	e000      	b.n	8004dda <HAL_UART_IRQHandler+0x5c6>
    return;
 8004dd8:	bf00      	nop
  }

}
 8004dda:	37e8      	adds	r7, #232	@ 0xe8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	460b      	mov	r3, r1
 8004e12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b088      	sub	sp, #32
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689a      	ldr	r2, [r3, #8]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	431a      	orrs	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	69db      	ldr	r3, [r3, #28]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	4b8a      	ldr	r3, [pc, #552]	@ (8005074 <UART_SetConfig+0x254>)
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	6812      	ldr	r2, [r2, #0]
 8004e52:	6979      	ldr	r1, [r7, #20]
 8004e54:	430b      	orrs	r3, r1
 8004e56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a78      	ldr	r2, [pc, #480]	@ (8005078 <UART_SetConfig+0x258>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d120      	bne.n	8004ede <UART_SetConfig+0xbe>
 8004e9c:	4b77      	ldr	r3, [pc, #476]	@ (800507c <UART_SetConfig+0x25c>)
 8004e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea0:	f003 0303 	and.w	r3, r3, #3
 8004ea4:	2b03      	cmp	r3, #3
 8004ea6:	d817      	bhi.n	8004ed8 <UART_SetConfig+0xb8>
 8004ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8004eb0 <UART_SetConfig+0x90>)
 8004eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eae:	bf00      	nop
 8004eb0:	08004ec1 	.word	0x08004ec1
 8004eb4:	08004ecd 	.word	0x08004ecd
 8004eb8:	08004ed3 	.word	0x08004ed3
 8004ebc:	08004ec7 	.word	0x08004ec7
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	77fb      	strb	r3, [r7, #31]
 8004ec4:	e01d      	b.n	8004f02 <UART_SetConfig+0xe2>
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	77fb      	strb	r3, [r7, #31]
 8004eca:	e01a      	b.n	8004f02 <UART_SetConfig+0xe2>
 8004ecc:	2304      	movs	r3, #4
 8004ece:	77fb      	strb	r3, [r7, #31]
 8004ed0:	e017      	b.n	8004f02 <UART_SetConfig+0xe2>
 8004ed2:	2308      	movs	r3, #8
 8004ed4:	77fb      	strb	r3, [r7, #31]
 8004ed6:	e014      	b.n	8004f02 <UART_SetConfig+0xe2>
 8004ed8:	2310      	movs	r3, #16
 8004eda:	77fb      	strb	r3, [r7, #31]
 8004edc:	e011      	b.n	8004f02 <UART_SetConfig+0xe2>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a67      	ldr	r2, [pc, #412]	@ (8005080 <UART_SetConfig+0x260>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d102      	bne.n	8004eee <UART_SetConfig+0xce>
 8004ee8:	2300      	movs	r3, #0
 8004eea:	77fb      	strb	r3, [r7, #31]
 8004eec:	e009      	b.n	8004f02 <UART_SetConfig+0xe2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a64      	ldr	r2, [pc, #400]	@ (8005084 <UART_SetConfig+0x264>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d102      	bne.n	8004efe <UART_SetConfig+0xde>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	77fb      	strb	r3, [r7, #31]
 8004efc:	e001      	b.n	8004f02 <UART_SetConfig+0xe2>
 8004efe:	2310      	movs	r3, #16
 8004f00:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f0a:	d15a      	bne.n	8004fc2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004f0c:	7ffb      	ldrb	r3, [r7, #31]
 8004f0e:	2b08      	cmp	r3, #8
 8004f10:	d827      	bhi.n	8004f62 <UART_SetConfig+0x142>
 8004f12:	a201      	add	r2, pc, #4	@ (adr r2, 8004f18 <UART_SetConfig+0xf8>)
 8004f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f18:	08004f3d 	.word	0x08004f3d
 8004f1c:	08004f45 	.word	0x08004f45
 8004f20:	08004f4d 	.word	0x08004f4d
 8004f24:	08004f63 	.word	0x08004f63
 8004f28:	08004f53 	.word	0x08004f53
 8004f2c:	08004f63 	.word	0x08004f63
 8004f30:	08004f63 	.word	0x08004f63
 8004f34:	08004f63 	.word	0x08004f63
 8004f38:	08004f5b 	.word	0x08004f5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f3c:	f7fe f90a 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
 8004f40:	61b8      	str	r0, [r7, #24]
        break;
 8004f42:	e013      	b.n	8004f6c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f44:	f7fe f928 	bl	8003198 <HAL_RCC_GetPCLK2Freq>
 8004f48:	61b8      	str	r0, [r7, #24]
        break;
 8004f4a:	e00f      	b.n	8004f6c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f4c:	4b4e      	ldr	r3, [pc, #312]	@ (8005088 <UART_SetConfig+0x268>)
 8004f4e:	61bb      	str	r3, [r7, #24]
        break;
 8004f50:	e00c      	b.n	8004f6c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f52:	f7fe f889 	bl	8003068 <HAL_RCC_GetSysClockFreq>
 8004f56:	61b8      	str	r0, [r7, #24]
        break;
 8004f58:	e008      	b.n	8004f6c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f5e:	61bb      	str	r3, [r7, #24]
        break;
 8004f60:	e004      	b.n	8004f6c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	77bb      	strb	r3, [r7, #30]
        break;
 8004f6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d074      	beq.n	800505c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	005a      	lsls	r2, r3, #1
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	085b      	lsrs	r3, r3, #1
 8004f7c:	441a      	add	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	2b0f      	cmp	r3, #15
 8004f8c:	d916      	bls.n	8004fbc <UART_SetConfig+0x19c>
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f94:	d212      	bcs.n	8004fbc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	f023 030f 	bic.w	r3, r3, #15
 8004f9e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	085b      	lsrs	r3, r3, #1
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	f003 0307 	and.w	r3, r3, #7
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	89fb      	ldrh	r3, [r7, #14]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	89fa      	ldrh	r2, [r7, #14]
 8004fb8:	60da      	str	r2, [r3, #12]
 8004fba:	e04f      	b.n	800505c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	77bb      	strb	r3, [r7, #30]
 8004fc0:	e04c      	b.n	800505c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fc2:	7ffb      	ldrb	r3, [r7, #31]
 8004fc4:	2b08      	cmp	r3, #8
 8004fc6:	d828      	bhi.n	800501a <UART_SetConfig+0x1fa>
 8004fc8:	a201      	add	r2, pc, #4	@ (adr r2, 8004fd0 <UART_SetConfig+0x1b0>)
 8004fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fce:	bf00      	nop
 8004fd0:	08004ff5 	.word	0x08004ff5
 8004fd4:	08004ffd 	.word	0x08004ffd
 8004fd8:	08005005 	.word	0x08005005
 8004fdc:	0800501b 	.word	0x0800501b
 8004fe0:	0800500b 	.word	0x0800500b
 8004fe4:	0800501b 	.word	0x0800501b
 8004fe8:	0800501b 	.word	0x0800501b
 8004fec:	0800501b 	.word	0x0800501b
 8004ff0:	08005013 	.word	0x08005013
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ff4:	f7fe f8ae 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
 8004ff8:	61b8      	str	r0, [r7, #24]
        break;
 8004ffa:	e013      	b.n	8005024 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ffc:	f7fe f8cc 	bl	8003198 <HAL_RCC_GetPCLK2Freq>
 8005000:	61b8      	str	r0, [r7, #24]
        break;
 8005002:	e00f      	b.n	8005024 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005004:	4b20      	ldr	r3, [pc, #128]	@ (8005088 <UART_SetConfig+0x268>)
 8005006:	61bb      	str	r3, [r7, #24]
        break;
 8005008:	e00c      	b.n	8005024 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800500a:	f7fe f82d 	bl	8003068 <HAL_RCC_GetSysClockFreq>
 800500e:	61b8      	str	r0, [r7, #24]
        break;
 8005010:	e008      	b.n	8005024 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005012:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005016:	61bb      	str	r3, [r7, #24]
        break;
 8005018:	e004      	b.n	8005024 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800501a:	2300      	movs	r3, #0
 800501c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	77bb      	strb	r3, [r7, #30]
        break;
 8005022:	bf00      	nop
    }

    if (pclk != 0U)
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d018      	beq.n	800505c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	085a      	lsrs	r2, r3, #1
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	441a      	add	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	fbb2 f3f3 	udiv	r3, r2, r3
 800503c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	2b0f      	cmp	r3, #15
 8005042:	d909      	bls.n	8005058 <UART_SetConfig+0x238>
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800504a:	d205      	bcs.n	8005058 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	b29a      	uxth	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	60da      	str	r2, [r3, #12]
 8005056:	e001      	b.n	800505c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005068:	7fbb      	ldrb	r3, [r7, #30]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3720      	adds	r7, #32
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	efff69f3 	.word	0xefff69f3
 8005078:	40013800 	.word	0x40013800
 800507c:	40021000 	.word	0x40021000
 8005080:	40004400 	.word	0x40004400
 8005084:	40004800 	.word	0x40004800
 8005088:	007a1200 	.word	0x007a1200

0800508c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00a      	beq.n	80050b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00a      	beq.n	80050d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050dc:	f003 0304 	and.w	r3, r3, #4
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00a      	beq.n	80050fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fe:	f003 0308 	and.w	r3, r3, #8
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00a      	beq.n	800511c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005120:	f003 0310 	and.w	r3, r3, #16
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00a      	beq.n	800513e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005142:	f003 0320 	and.w	r3, r3, #32
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00a      	beq.n	8005160 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	430a      	orrs	r2, r1
 800515e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005168:	2b00      	cmp	r3, #0
 800516a:	d01a      	beq.n	80051a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005186:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800518a:	d10a      	bne.n	80051a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00a      	beq.n	80051c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	430a      	orrs	r2, r1
 80051c2:	605a      	str	r2, [r3, #4]
  }
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b098      	sub	sp, #96	@ 0x60
 80051d4:	af02      	add	r7, sp, #8
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051e0:	f7fc fa2e 	bl	8001640 <HAL_GetTick>
 80051e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0308 	and.w	r3, r3, #8
 80051f0:	2b08      	cmp	r3, #8
 80051f2:	d12e      	bne.n	8005252 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051fc:	2200      	movs	r2, #0
 80051fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f88c 	bl	8005320 <UART_WaitOnFlagUntilTimeout>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d021      	beq.n	8005252 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005216:	e853 3f00 	ldrex	r3, [r3]
 800521a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800521c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800521e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005222:	653b      	str	r3, [r7, #80]	@ 0x50
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	461a      	mov	r2, r3
 800522a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800522c:	647b      	str	r3, [r7, #68]	@ 0x44
 800522e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005230:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005232:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005234:	e841 2300 	strex	r3, r2, [r1]
 8005238:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800523a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1e6      	bne.n	800520e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2220      	movs	r2, #32
 8005244:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e062      	b.n	8005318 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0304 	and.w	r3, r3, #4
 800525c:	2b04      	cmp	r3, #4
 800525e:	d149      	bne.n	80052f4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005260:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005268:	2200      	movs	r2, #0
 800526a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f856 	bl	8005320 <UART_WaitOnFlagUntilTimeout>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d03c      	beq.n	80052f4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005282:	e853 3f00 	ldrex	r3, [r3]
 8005286:	623b      	str	r3, [r7, #32]
   return(result);
 8005288:	6a3b      	ldr	r3, [r7, #32]
 800528a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800528e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	461a      	mov	r2, r3
 8005296:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005298:	633b      	str	r3, [r7, #48]	@ 0x30
 800529a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800529e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052a0:	e841 2300 	strex	r3, r2, [r1]
 80052a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1e6      	bne.n	800527a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	3308      	adds	r3, #8
 80052b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	e853 3f00 	ldrex	r3, [r3]
 80052ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f023 0301 	bic.w	r3, r3, #1
 80052c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	3308      	adds	r3, #8
 80052ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052cc:	61fa      	str	r2, [r7, #28]
 80052ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d0:	69b9      	ldr	r1, [r7, #24]
 80052d2:	69fa      	ldr	r2, [r7, #28]
 80052d4:	e841 2300 	strex	r3, r2, [r1]
 80052d8:	617b      	str	r3, [r7, #20]
   return(result);
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1e5      	bne.n	80052ac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e011      	b.n	8005318 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2220      	movs	r2, #32
 80052f8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2220      	movs	r2, #32
 80052fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3758      	adds	r7, #88	@ 0x58
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	603b      	str	r3, [r7, #0]
 800532c:	4613      	mov	r3, r2
 800532e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005330:	e049      	b.n	80053c6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005338:	d045      	beq.n	80053c6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800533a:	f7fc f981 	bl	8001640 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	429a      	cmp	r2, r3
 8005348:	d302      	bcc.n	8005350 <UART_WaitOnFlagUntilTimeout+0x30>
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e048      	b.n	80053e6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0304 	and.w	r3, r3, #4
 800535e:	2b00      	cmp	r3, #0
 8005360:	d031      	beq.n	80053c6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	69db      	ldr	r3, [r3, #28]
 8005368:	f003 0308 	and.w	r3, r3, #8
 800536c:	2b08      	cmp	r3, #8
 800536e:	d110      	bne.n	8005392 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2208      	movs	r2, #8
 8005376:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f000 f838 	bl	80053ee <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2208      	movs	r2, #8
 8005382:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e029      	b.n	80053e6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800539c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053a0:	d111      	bne.n	80053c6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80053aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 f81e 	bl	80053ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2220      	movs	r2, #32
 80053b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e00f      	b.n	80053e6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	69da      	ldr	r2, [r3, #28]
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	4013      	ands	r3, r2
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	bf0c      	ite	eq
 80053d6:	2301      	moveq	r3, #1
 80053d8:	2300      	movne	r3, #0
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	461a      	mov	r2, r3
 80053de:	79fb      	ldrb	r3, [r7, #7]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d0a6      	beq.n	8005332 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b095      	sub	sp, #84	@ 0x54
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053fe:	e853 3f00 	ldrex	r3, [r3]
 8005402:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005406:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800540a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	461a      	mov	r2, r3
 8005412:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005414:	643b      	str	r3, [r7, #64]	@ 0x40
 8005416:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005418:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800541a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800541c:	e841 2300 	strex	r3, r2, [r1]
 8005420:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1e6      	bne.n	80053f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	3308      	adds	r3, #8
 800542e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	e853 3f00 	ldrex	r3, [r3]
 8005436:	61fb      	str	r3, [r7, #28]
   return(result);
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	f023 0301 	bic.w	r3, r3, #1
 800543e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	3308      	adds	r3, #8
 8005446:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005448:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800544a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800544e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005450:	e841 2300 	strex	r3, r2, [r1]
 8005454:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1e5      	bne.n	8005428 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005460:	2b01      	cmp	r3, #1
 8005462:	d118      	bne.n	8005496 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	e853 3f00 	ldrex	r3, [r3]
 8005470:	60bb      	str	r3, [r7, #8]
   return(result);
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	f023 0310 	bic.w	r3, r3, #16
 8005478:	647b      	str	r3, [r7, #68]	@ 0x44
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	461a      	mov	r2, r3
 8005480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005482:	61bb      	str	r3, [r7, #24]
 8005484:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005486:	6979      	ldr	r1, [r7, #20]
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	e841 2300 	strex	r3, r2, [r1]
 800548e:	613b      	str	r3, [r7, #16]
   return(result);
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1e6      	bne.n	8005464 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2220      	movs	r2, #32
 800549a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80054aa:	bf00      	nop
 80054ac:	3754      	adds	r7, #84	@ 0x54
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b084      	sub	sp, #16
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f7ff fc8d 	bl	8004df4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054da:	bf00      	nop
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b088      	sub	sp, #32
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	e853 3f00 	ldrex	r3, [r3]
 80054f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054fe:	61fb      	str	r3, [r7, #28]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	461a      	mov	r2, r3
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	61bb      	str	r3, [r7, #24]
 800550a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550c:	6979      	ldr	r1, [r7, #20]
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	e841 2300 	strex	r3, r2, [r1]
 8005514:	613b      	str	r3, [r7, #16]
   return(result);
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1e6      	bne.n	80054ea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2220      	movs	r2, #32
 8005520:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7ff fc59 	bl	8004de0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800552e:	bf00      	nop
 8005530:	3720      	adds	r7, #32
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800553e:	bf00      	nop
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
	...

0800554c <srand>:
 800554c:	b538      	push	{r3, r4, r5, lr}
 800554e:	4b10      	ldr	r3, [pc, #64]	@ (8005590 <srand+0x44>)
 8005550:	681d      	ldr	r5, [r3, #0]
 8005552:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005554:	4604      	mov	r4, r0
 8005556:	b9b3      	cbnz	r3, 8005586 <srand+0x3a>
 8005558:	2018      	movs	r0, #24
 800555a:	f000 fa7b 	bl	8005a54 <malloc>
 800555e:	4602      	mov	r2, r0
 8005560:	6328      	str	r0, [r5, #48]	@ 0x30
 8005562:	b920      	cbnz	r0, 800556e <srand+0x22>
 8005564:	4b0b      	ldr	r3, [pc, #44]	@ (8005594 <srand+0x48>)
 8005566:	480c      	ldr	r0, [pc, #48]	@ (8005598 <srand+0x4c>)
 8005568:	2146      	movs	r1, #70	@ 0x46
 800556a:	f000 fa0b 	bl	8005984 <__assert_func>
 800556e:	490b      	ldr	r1, [pc, #44]	@ (800559c <srand+0x50>)
 8005570:	4b0b      	ldr	r3, [pc, #44]	@ (80055a0 <srand+0x54>)
 8005572:	e9c0 1300 	strd	r1, r3, [r0]
 8005576:	4b0b      	ldr	r3, [pc, #44]	@ (80055a4 <srand+0x58>)
 8005578:	6083      	str	r3, [r0, #8]
 800557a:	230b      	movs	r3, #11
 800557c:	8183      	strh	r3, [r0, #12]
 800557e:	2100      	movs	r1, #0
 8005580:	2001      	movs	r0, #1
 8005582:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005586:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005588:	2200      	movs	r2, #0
 800558a:	611c      	str	r4, [r3, #16]
 800558c:	615a      	str	r2, [r3, #20]
 800558e:	bd38      	pop	{r3, r4, r5, pc}
 8005590:	2000001c 	.word	0x2000001c
 8005594:	08006620 	.word	0x08006620
 8005598:	08006637 	.word	0x08006637
 800559c:	abcd330e 	.word	0xabcd330e
 80055a0:	e66d1234 	.word	0xe66d1234
 80055a4:	0005deec 	.word	0x0005deec

080055a8 <rand>:
 80055a8:	4b16      	ldr	r3, [pc, #88]	@ (8005604 <rand+0x5c>)
 80055aa:	b510      	push	{r4, lr}
 80055ac:	681c      	ldr	r4, [r3, #0]
 80055ae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80055b0:	b9b3      	cbnz	r3, 80055e0 <rand+0x38>
 80055b2:	2018      	movs	r0, #24
 80055b4:	f000 fa4e 	bl	8005a54 <malloc>
 80055b8:	4602      	mov	r2, r0
 80055ba:	6320      	str	r0, [r4, #48]	@ 0x30
 80055bc:	b920      	cbnz	r0, 80055c8 <rand+0x20>
 80055be:	4b12      	ldr	r3, [pc, #72]	@ (8005608 <rand+0x60>)
 80055c0:	4812      	ldr	r0, [pc, #72]	@ (800560c <rand+0x64>)
 80055c2:	2152      	movs	r1, #82	@ 0x52
 80055c4:	f000 f9de 	bl	8005984 <__assert_func>
 80055c8:	4911      	ldr	r1, [pc, #68]	@ (8005610 <rand+0x68>)
 80055ca:	4b12      	ldr	r3, [pc, #72]	@ (8005614 <rand+0x6c>)
 80055cc:	e9c0 1300 	strd	r1, r3, [r0]
 80055d0:	4b11      	ldr	r3, [pc, #68]	@ (8005618 <rand+0x70>)
 80055d2:	6083      	str	r3, [r0, #8]
 80055d4:	230b      	movs	r3, #11
 80055d6:	8183      	strh	r3, [r0, #12]
 80055d8:	2100      	movs	r1, #0
 80055da:	2001      	movs	r0, #1
 80055dc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80055e0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80055e2:	480e      	ldr	r0, [pc, #56]	@ (800561c <rand+0x74>)
 80055e4:	690b      	ldr	r3, [r1, #16]
 80055e6:	694c      	ldr	r4, [r1, #20]
 80055e8:	4a0d      	ldr	r2, [pc, #52]	@ (8005620 <rand+0x78>)
 80055ea:	4358      	muls	r0, r3
 80055ec:	fb02 0004 	mla	r0, r2, r4, r0
 80055f0:	fba3 3202 	umull	r3, r2, r3, r2
 80055f4:	3301      	adds	r3, #1
 80055f6:	eb40 0002 	adc.w	r0, r0, r2
 80055fa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80055fe:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005602:	bd10      	pop	{r4, pc}
 8005604:	2000001c 	.word	0x2000001c
 8005608:	08006620 	.word	0x08006620
 800560c:	08006637 	.word	0x08006637
 8005610:	abcd330e 	.word	0xabcd330e
 8005614:	e66d1234 	.word	0xe66d1234
 8005618:	0005deec 	.word	0x0005deec
 800561c:	5851f42d 	.word	0x5851f42d
 8005620:	4c957f2d 	.word	0x4c957f2d

08005624 <std>:
 8005624:	2300      	movs	r3, #0
 8005626:	b510      	push	{r4, lr}
 8005628:	4604      	mov	r4, r0
 800562a:	e9c0 3300 	strd	r3, r3, [r0]
 800562e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005632:	6083      	str	r3, [r0, #8]
 8005634:	8181      	strh	r1, [r0, #12]
 8005636:	6643      	str	r3, [r0, #100]	@ 0x64
 8005638:	81c2      	strh	r2, [r0, #14]
 800563a:	6183      	str	r3, [r0, #24]
 800563c:	4619      	mov	r1, r3
 800563e:	2208      	movs	r2, #8
 8005640:	305c      	adds	r0, #92	@ 0x5c
 8005642:	f000 f8f4 	bl	800582e <memset>
 8005646:	4b0d      	ldr	r3, [pc, #52]	@ (800567c <std+0x58>)
 8005648:	6263      	str	r3, [r4, #36]	@ 0x24
 800564a:	4b0d      	ldr	r3, [pc, #52]	@ (8005680 <std+0x5c>)
 800564c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800564e:	4b0d      	ldr	r3, [pc, #52]	@ (8005684 <std+0x60>)
 8005650:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005652:	4b0d      	ldr	r3, [pc, #52]	@ (8005688 <std+0x64>)
 8005654:	6323      	str	r3, [r4, #48]	@ 0x30
 8005656:	4b0d      	ldr	r3, [pc, #52]	@ (800568c <std+0x68>)
 8005658:	6224      	str	r4, [r4, #32]
 800565a:	429c      	cmp	r4, r3
 800565c:	d006      	beq.n	800566c <std+0x48>
 800565e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005662:	4294      	cmp	r4, r2
 8005664:	d002      	beq.n	800566c <std+0x48>
 8005666:	33d0      	adds	r3, #208	@ 0xd0
 8005668:	429c      	cmp	r4, r3
 800566a:	d105      	bne.n	8005678 <std+0x54>
 800566c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005674:	f000 b982 	b.w	800597c <__retarget_lock_init_recursive>
 8005678:	bd10      	pop	{r4, pc}
 800567a:	bf00      	nop
 800567c:	080057a9 	.word	0x080057a9
 8005680:	080057cb 	.word	0x080057cb
 8005684:	08005803 	.word	0x08005803
 8005688:	08005827 	.word	0x08005827
 800568c:	2000029c 	.word	0x2000029c

08005690 <stdio_exit_handler>:
 8005690:	4a02      	ldr	r2, [pc, #8]	@ (800569c <stdio_exit_handler+0xc>)
 8005692:	4903      	ldr	r1, [pc, #12]	@ (80056a0 <stdio_exit_handler+0x10>)
 8005694:	4803      	ldr	r0, [pc, #12]	@ (80056a4 <stdio_exit_handler+0x14>)
 8005696:	f000 b869 	b.w	800576c <_fwalk_sglue>
 800569a:	bf00      	nop
 800569c:	20000010 	.word	0x20000010
 80056a0:	08005cc9 	.word	0x08005cc9
 80056a4:	20000020 	.word	0x20000020

080056a8 <cleanup_stdio>:
 80056a8:	6841      	ldr	r1, [r0, #4]
 80056aa:	4b0c      	ldr	r3, [pc, #48]	@ (80056dc <cleanup_stdio+0x34>)
 80056ac:	4299      	cmp	r1, r3
 80056ae:	b510      	push	{r4, lr}
 80056b0:	4604      	mov	r4, r0
 80056b2:	d001      	beq.n	80056b8 <cleanup_stdio+0x10>
 80056b4:	f000 fb08 	bl	8005cc8 <_fflush_r>
 80056b8:	68a1      	ldr	r1, [r4, #8]
 80056ba:	4b09      	ldr	r3, [pc, #36]	@ (80056e0 <cleanup_stdio+0x38>)
 80056bc:	4299      	cmp	r1, r3
 80056be:	d002      	beq.n	80056c6 <cleanup_stdio+0x1e>
 80056c0:	4620      	mov	r0, r4
 80056c2:	f000 fb01 	bl	8005cc8 <_fflush_r>
 80056c6:	68e1      	ldr	r1, [r4, #12]
 80056c8:	4b06      	ldr	r3, [pc, #24]	@ (80056e4 <cleanup_stdio+0x3c>)
 80056ca:	4299      	cmp	r1, r3
 80056cc:	d004      	beq.n	80056d8 <cleanup_stdio+0x30>
 80056ce:	4620      	mov	r0, r4
 80056d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056d4:	f000 baf8 	b.w	8005cc8 <_fflush_r>
 80056d8:	bd10      	pop	{r4, pc}
 80056da:	bf00      	nop
 80056dc:	2000029c 	.word	0x2000029c
 80056e0:	20000304 	.word	0x20000304
 80056e4:	2000036c 	.word	0x2000036c

080056e8 <global_stdio_init.part.0>:
 80056e8:	b510      	push	{r4, lr}
 80056ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005718 <global_stdio_init.part.0+0x30>)
 80056ec:	4c0b      	ldr	r4, [pc, #44]	@ (800571c <global_stdio_init.part.0+0x34>)
 80056ee:	4a0c      	ldr	r2, [pc, #48]	@ (8005720 <global_stdio_init.part.0+0x38>)
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	4620      	mov	r0, r4
 80056f4:	2200      	movs	r2, #0
 80056f6:	2104      	movs	r1, #4
 80056f8:	f7ff ff94 	bl	8005624 <std>
 80056fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005700:	2201      	movs	r2, #1
 8005702:	2109      	movs	r1, #9
 8005704:	f7ff ff8e 	bl	8005624 <std>
 8005708:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800570c:	2202      	movs	r2, #2
 800570e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005712:	2112      	movs	r1, #18
 8005714:	f7ff bf86 	b.w	8005624 <std>
 8005718:	200003d4 	.word	0x200003d4
 800571c:	2000029c 	.word	0x2000029c
 8005720:	08005691 	.word	0x08005691

08005724 <__sfp_lock_acquire>:
 8005724:	4801      	ldr	r0, [pc, #4]	@ (800572c <__sfp_lock_acquire+0x8>)
 8005726:	f000 b92a 	b.w	800597e <__retarget_lock_acquire_recursive>
 800572a:	bf00      	nop
 800572c:	200003dd 	.word	0x200003dd

08005730 <__sfp_lock_release>:
 8005730:	4801      	ldr	r0, [pc, #4]	@ (8005738 <__sfp_lock_release+0x8>)
 8005732:	f000 b925 	b.w	8005980 <__retarget_lock_release_recursive>
 8005736:	bf00      	nop
 8005738:	200003dd 	.word	0x200003dd

0800573c <__sinit>:
 800573c:	b510      	push	{r4, lr}
 800573e:	4604      	mov	r4, r0
 8005740:	f7ff fff0 	bl	8005724 <__sfp_lock_acquire>
 8005744:	6a23      	ldr	r3, [r4, #32]
 8005746:	b11b      	cbz	r3, 8005750 <__sinit+0x14>
 8005748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800574c:	f7ff bff0 	b.w	8005730 <__sfp_lock_release>
 8005750:	4b04      	ldr	r3, [pc, #16]	@ (8005764 <__sinit+0x28>)
 8005752:	6223      	str	r3, [r4, #32]
 8005754:	4b04      	ldr	r3, [pc, #16]	@ (8005768 <__sinit+0x2c>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1f5      	bne.n	8005748 <__sinit+0xc>
 800575c:	f7ff ffc4 	bl	80056e8 <global_stdio_init.part.0>
 8005760:	e7f2      	b.n	8005748 <__sinit+0xc>
 8005762:	bf00      	nop
 8005764:	080056a9 	.word	0x080056a9
 8005768:	200003d4 	.word	0x200003d4

0800576c <_fwalk_sglue>:
 800576c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005770:	4607      	mov	r7, r0
 8005772:	4688      	mov	r8, r1
 8005774:	4614      	mov	r4, r2
 8005776:	2600      	movs	r6, #0
 8005778:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800577c:	f1b9 0901 	subs.w	r9, r9, #1
 8005780:	d505      	bpl.n	800578e <_fwalk_sglue+0x22>
 8005782:	6824      	ldr	r4, [r4, #0]
 8005784:	2c00      	cmp	r4, #0
 8005786:	d1f7      	bne.n	8005778 <_fwalk_sglue+0xc>
 8005788:	4630      	mov	r0, r6
 800578a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800578e:	89ab      	ldrh	r3, [r5, #12]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d907      	bls.n	80057a4 <_fwalk_sglue+0x38>
 8005794:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005798:	3301      	adds	r3, #1
 800579a:	d003      	beq.n	80057a4 <_fwalk_sglue+0x38>
 800579c:	4629      	mov	r1, r5
 800579e:	4638      	mov	r0, r7
 80057a0:	47c0      	blx	r8
 80057a2:	4306      	orrs	r6, r0
 80057a4:	3568      	adds	r5, #104	@ 0x68
 80057a6:	e7e9      	b.n	800577c <_fwalk_sglue+0x10>

080057a8 <__sread>:
 80057a8:	b510      	push	{r4, lr}
 80057aa:	460c      	mov	r4, r1
 80057ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057b0:	f000 f896 	bl	80058e0 <_read_r>
 80057b4:	2800      	cmp	r0, #0
 80057b6:	bfab      	itete	ge
 80057b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80057ba:	89a3      	ldrhlt	r3, [r4, #12]
 80057bc:	181b      	addge	r3, r3, r0
 80057be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80057c2:	bfac      	ite	ge
 80057c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80057c6:	81a3      	strhlt	r3, [r4, #12]
 80057c8:	bd10      	pop	{r4, pc}

080057ca <__swrite>:
 80057ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057ce:	461f      	mov	r7, r3
 80057d0:	898b      	ldrh	r3, [r1, #12]
 80057d2:	05db      	lsls	r3, r3, #23
 80057d4:	4605      	mov	r5, r0
 80057d6:	460c      	mov	r4, r1
 80057d8:	4616      	mov	r6, r2
 80057da:	d505      	bpl.n	80057e8 <__swrite+0x1e>
 80057dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057e0:	2302      	movs	r3, #2
 80057e2:	2200      	movs	r2, #0
 80057e4:	f000 f86a 	bl	80058bc <_lseek_r>
 80057e8:	89a3      	ldrh	r3, [r4, #12]
 80057ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057f2:	81a3      	strh	r3, [r4, #12]
 80057f4:	4632      	mov	r2, r6
 80057f6:	463b      	mov	r3, r7
 80057f8:	4628      	mov	r0, r5
 80057fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057fe:	f000 b881 	b.w	8005904 <_write_r>

08005802 <__sseek>:
 8005802:	b510      	push	{r4, lr}
 8005804:	460c      	mov	r4, r1
 8005806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800580a:	f000 f857 	bl	80058bc <_lseek_r>
 800580e:	1c43      	adds	r3, r0, #1
 8005810:	89a3      	ldrh	r3, [r4, #12]
 8005812:	bf15      	itete	ne
 8005814:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005816:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800581a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800581e:	81a3      	strheq	r3, [r4, #12]
 8005820:	bf18      	it	ne
 8005822:	81a3      	strhne	r3, [r4, #12]
 8005824:	bd10      	pop	{r4, pc}

08005826 <__sclose>:
 8005826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800582a:	f000 b825 	b.w	8005878 <_close_r>

0800582e <memset>:
 800582e:	4402      	add	r2, r0
 8005830:	4603      	mov	r3, r0
 8005832:	4293      	cmp	r3, r2
 8005834:	d100      	bne.n	8005838 <memset+0xa>
 8005836:	4770      	bx	lr
 8005838:	f803 1b01 	strb.w	r1, [r3], #1
 800583c:	e7f9      	b.n	8005832 <memset+0x4>
	...

08005840 <time>:
 8005840:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8005842:	4b0c      	ldr	r3, [pc, #48]	@ (8005874 <time+0x34>)
 8005844:	f04f 36ff 	mov.w	r6, #4294967295
 8005848:	f04f 37ff 	mov.w	r7, #4294967295
 800584c:	4669      	mov	r1, sp
 800584e:	4604      	mov	r4, r0
 8005850:	2200      	movs	r2, #0
 8005852:	6818      	ldr	r0, [r3, #0]
 8005854:	e9cd 6700 	strd	r6, r7, [sp]
 8005858:	f000 f81e 	bl	8005898 <_gettimeofday_r>
 800585c:	2800      	cmp	r0, #0
 800585e:	bfb8      	it	lt
 8005860:	e9cd 6700 	strdlt	r6, r7, [sp]
 8005864:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005868:	b10c      	cbz	r4, 800586e <time+0x2e>
 800586a:	e9c4 0100 	strd	r0, r1, [r4]
 800586e:	b004      	add	sp, #16
 8005870:	bdd0      	pop	{r4, r6, r7, pc}
 8005872:	bf00      	nop
 8005874:	2000001c 	.word	0x2000001c

08005878 <_close_r>:
 8005878:	b538      	push	{r3, r4, r5, lr}
 800587a:	4d06      	ldr	r5, [pc, #24]	@ (8005894 <_close_r+0x1c>)
 800587c:	2300      	movs	r3, #0
 800587e:	4604      	mov	r4, r0
 8005880:	4608      	mov	r0, r1
 8005882:	602b      	str	r3, [r5, #0]
 8005884:	f7fb fddc 	bl	8001440 <_close>
 8005888:	1c43      	adds	r3, r0, #1
 800588a:	d102      	bne.n	8005892 <_close_r+0x1a>
 800588c:	682b      	ldr	r3, [r5, #0]
 800588e:	b103      	cbz	r3, 8005892 <_close_r+0x1a>
 8005890:	6023      	str	r3, [r4, #0]
 8005892:	bd38      	pop	{r3, r4, r5, pc}
 8005894:	200003d8 	.word	0x200003d8

08005898 <_gettimeofday_r>:
 8005898:	b538      	push	{r3, r4, r5, lr}
 800589a:	4d07      	ldr	r5, [pc, #28]	@ (80058b8 <_gettimeofday_r+0x20>)
 800589c:	2300      	movs	r3, #0
 800589e:	4604      	mov	r4, r0
 80058a0:	4608      	mov	r0, r1
 80058a2:	4611      	mov	r1, r2
 80058a4:	602b      	str	r3, [r5, #0]
 80058a6:	f000 fe8b 	bl	80065c0 <_gettimeofday>
 80058aa:	1c43      	adds	r3, r0, #1
 80058ac:	d102      	bne.n	80058b4 <_gettimeofday_r+0x1c>
 80058ae:	682b      	ldr	r3, [r5, #0]
 80058b0:	b103      	cbz	r3, 80058b4 <_gettimeofday_r+0x1c>
 80058b2:	6023      	str	r3, [r4, #0]
 80058b4:	bd38      	pop	{r3, r4, r5, pc}
 80058b6:	bf00      	nop
 80058b8:	200003d8 	.word	0x200003d8

080058bc <_lseek_r>:
 80058bc:	b538      	push	{r3, r4, r5, lr}
 80058be:	4d07      	ldr	r5, [pc, #28]	@ (80058dc <_lseek_r+0x20>)
 80058c0:	4604      	mov	r4, r0
 80058c2:	4608      	mov	r0, r1
 80058c4:	4611      	mov	r1, r2
 80058c6:	2200      	movs	r2, #0
 80058c8:	602a      	str	r2, [r5, #0]
 80058ca:	461a      	mov	r2, r3
 80058cc:	f7fb fddf 	bl	800148e <_lseek>
 80058d0:	1c43      	adds	r3, r0, #1
 80058d2:	d102      	bne.n	80058da <_lseek_r+0x1e>
 80058d4:	682b      	ldr	r3, [r5, #0]
 80058d6:	b103      	cbz	r3, 80058da <_lseek_r+0x1e>
 80058d8:	6023      	str	r3, [r4, #0]
 80058da:	bd38      	pop	{r3, r4, r5, pc}
 80058dc:	200003d8 	.word	0x200003d8

080058e0 <_read_r>:
 80058e0:	b538      	push	{r3, r4, r5, lr}
 80058e2:	4d07      	ldr	r5, [pc, #28]	@ (8005900 <_read_r+0x20>)
 80058e4:	4604      	mov	r4, r0
 80058e6:	4608      	mov	r0, r1
 80058e8:	4611      	mov	r1, r2
 80058ea:	2200      	movs	r2, #0
 80058ec:	602a      	str	r2, [r5, #0]
 80058ee:	461a      	mov	r2, r3
 80058f0:	f7fb fd6d 	bl	80013ce <_read>
 80058f4:	1c43      	adds	r3, r0, #1
 80058f6:	d102      	bne.n	80058fe <_read_r+0x1e>
 80058f8:	682b      	ldr	r3, [r5, #0]
 80058fa:	b103      	cbz	r3, 80058fe <_read_r+0x1e>
 80058fc:	6023      	str	r3, [r4, #0]
 80058fe:	bd38      	pop	{r3, r4, r5, pc}
 8005900:	200003d8 	.word	0x200003d8

08005904 <_write_r>:
 8005904:	b538      	push	{r3, r4, r5, lr}
 8005906:	4d07      	ldr	r5, [pc, #28]	@ (8005924 <_write_r+0x20>)
 8005908:	4604      	mov	r4, r0
 800590a:	4608      	mov	r0, r1
 800590c:	4611      	mov	r1, r2
 800590e:	2200      	movs	r2, #0
 8005910:	602a      	str	r2, [r5, #0]
 8005912:	461a      	mov	r2, r3
 8005914:	f7fb fd78 	bl	8001408 <_write>
 8005918:	1c43      	adds	r3, r0, #1
 800591a:	d102      	bne.n	8005922 <_write_r+0x1e>
 800591c:	682b      	ldr	r3, [r5, #0]
 800591e:	b103      	cbz	r3, 8005922 <_write_r+0x1e>
 8005920:	6023      	str	r3, [r4, #0]
 8005922:	bd38      	pop	{r3, r4, r5, pc}
 8005924:	200003d8 	.word	0x200003d8

08005928 <__errno>:
 8005928:	4b01      	ldr	r3, [pc, #4]	@ (8005930 <__errno+0x8>)
 800592a:	6818      	ldr	r0, [r3, #0]
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	2000001c 	.word	0x2000001c

08005934 <__libc_init_array>:
 8005934:	b570      	push	{r4, r5, r6, lr}
 8005936:	4d0d      	ldr	r5, [pc, #52]	@ (800596c <__libc_init_array+0x38>)
 8005938:	4c0d      	ldr	r4, [pc, #52]	@ (8005970 <__libc_init_array+0x3c>)
 800593a:	1b64      	subs	r4, r4, r5
 800593c:	10a4      	asrs	r4, r4, #2
 800593e:	2600      	movs	r6, #0
 8005940:	42a6      	cmp	r6, r4
 8005942:	d109      	bne.n	8005958 <__libc_init_array+0x24>
 8005944:	4d0b      	ldr	r5, [pc, #44]	@ (8005974 <__libc_init_array+0x40>)
 8005946:	4c0c      	ldr	r4, [pc, #48]	@ (8005978 <__libc_init_array+0x44>)
 8005948:	f000 fe42 	bl	80065d0 <_init>
 800594c:	1b64      	subs	r4, r4, r5
 800594e:	10a4      	asrs	r4, r4, #2
 8005950:	2600      	movs	r6, #0
 8005952:	42a6      	cmp	r6, r4
 8005954:	d105      	bne.n	8005962 <__libc_init_array+0x2e>
 8005956:	bd70      	pop	{r4, r5, r6, pc}
 8005958:	f855 3b04 	ldr.w	r3, [r5], #4
 800595c:	4798      	blx	r3
 800595e:	3601      	adds	r6, #1
 8005960:	e7ee      	b.n	8005940 <__libc_init_array+0xc>
 8005962:	f855 3b04 	ldr.w	r3, [r5], #4
 8005966:	4798      	blx	r3
 8005968:	3601      	adds	r6, #1
 800596a:	e7f2      	b.n	8005952 <__libc_init_array+0x1e>
 800596c:	08006708 	.word	0x08006708
 8005970:	08006708 	.word	0x08006708
 8005974:	08006708 	.word	0x08006708
 8005978:	0800670c 	.word	0x0800670c

0800597c <__retarget_lock_init_recursive>:
 800597c:	4770      	bx	lr

0800597e <__retarget_lock_acquire_recursive>:
 800597e:	4770      	bx	lr

08005980 <__retarget_lock_release_recursive>:
 8005980:	4770      	bx	lr
	...

08005984 <__assert_func>:
 8005984:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005986:	4614      	mov	r4, r2
 8005988:	461a      	mov	r2, r3
 800598a:	4b09      	ldr	r3, [pc, #36]	@ (80059b0 <__assert_func+0x2c>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4605      	mov	r5, r0
 8005990:	68d8      	ldr	r0, [r3, #12]
 8005992:	b954      	cbnz	r4, 80059aa <__assert_func+0x26>
 8005994:	4b07      	ldr	r3, [pc, #28]	@ (80059b4 <__assert_func+0x30>)
 8005996:	461c      	mov	r4, r3
 8005998:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800599c:	9100      	str	r1, [sp, #0]
 800599e:	462b      	mov	r3, r5
 80059a0:	4905      	ldr	r1, [pc, #20]	@ (80059b8 <__assert_func+0x34>)
 80059a2:	f000 f9b9 	bl	8005d18 <fiprintf>
 80059a6:	f000 f9d9 	bl	8005d5c <abort>
 80059aa:	4b04      	ldr	r3, [pc, #16]	@ (80059bc <__assert_func+0x38>)
 80059ac:	e7f4      	b.n	8005998 <__assert_func+0x14>
 80059ae:	bf00      	nop
 80059b0:	2000001c 	.word	0x2000001c
 80059b4:	080066ca 	.word	0x080066ca
 80059b8:	0800669c 	.word	0x0800669c
 80059bc:	0800668f 	.word	0x0800668f

080059c0 <_free_r>:
 80059c0:	b538      	push	{r3, r4, r5, lr}
 80059c2:	4605      	mov	r5, r0
 80059c4:	2900      	cmp	r1, #0
 80059c6:	d041      	beq.n	8005a4c <_free_r+0x8c>
 80059c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059cc:	1f0c      	subs	r4, r1, #4
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	bfb8      	it	lt
 80059d2:	18e4      	addlt	r4, r4, r3
 80059d4:	f000 f8e8 	bl	8005ba8 <__malloc_lock>
 80059d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005a50 <_free_r+0x90>)
 80059da:	6813      	ldr	r3, [r2, #0]
 80059dc:	b933      	cbnz	r3, 80059ec <_free_r+0x2c>
 80059de:	6063      	str	r3, [r4, #4]
 80059e0:	6014      	str	r4, [r2, #0]
 80059e2:	4628      	mov	r0, r5
 80059e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059e8:	f000 b8e4 	b.w	8005bb4 <__malloc_unlock>
 80059ec:	42a3      	cmp	r3, r4
 80059ee:	d908      	bls.n	8005a02 <_free_r+0x42>
 80059f0:	6820      	ldr	r0, [r4, #0]
 80059f2:	1821      	adds	r1, r4, r0
 80059f4:	428b      	cmp	r3, r1
 80059f6:	bf01      	itttt	eq
 80059f8:	6819      	ldreq	r1, [r3, #0]
 80059fa:	685b      	ldreq	r3, [r3, #4]
 80059fc:	1809      	addeq	r1, r1, r0
 80059fe:	6021      	streq	r1, [r4, #0]
 8005a00:	e7ed      	b.n	80059de <_free_r+0x1e>
 8005a02:	461a      	mov	r2, r3
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	b10b      	cbz	r3, 8005a0c <_free_r+0x4c>
 8005a08:	42a3      	cmp	r3, r4
 8005a0a:	d9fa      	bls.n	8005a02 <_free_r+0x42>
 8005a0c:	6811      	ldr	r1, [r2, #0]
 8005a0e:	1850      	adds	r0, r2, r1
 8005a10:	42a0      	cmp	r0, r4
 8005a12:	d10b      	bne.n	8005a2c <_free_r+0x6c>
 8005a14:	6820      	ldr	r0, [r4, #0]
 8005a16:	4401      	add	r1, r0
 8005a18:	1850      	adds	r0, r2, r1
 8005a1a:	4283      	cmp	r3, r0
 8005a1c:	6011      	str	r1, [r2, #0]
 8005a1e:	d1e0      	bne.n	80059e2 <_free_r+0x22>
 8005a20:	6818      	ldr	r0, [r3, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	6053      	str	r3, [r2, #4]
 8005a26:	4408      	add	r0, r1
 8005a28:	6010      	str	r0, [r2, #0]
 8005a2a:	e7da      	b.n	80059e2 <_free_r+0x22>
 8005a2c:	d902      	bls.n	8005a34 <_free_r+0x74>
 8005a2e:	230c      	movs	r3, #12
 8005a30:	602b      	str	r3, [r5, #0]
 8005a32:	e7d6      	b.n	80059e2 <_free_r+0x22>
 8005a34:	6820      	ldr	r0, [r4, #0]
 8005a36:	1821      	adds	r1, r4, r0
 8005a38:	428b      	cmp	r3, r1
 8005a3a:	bf04      	itt	eq
 8005a3c:	6819      	ldreq	r1, [r3, #0]
 8005a3e:	685b      	ldreq	r3, [r3, #4]
 8005a40:	6063      	str	r3, [r4, #4]
 8005a42:	bf04      	itt	eq
 8005a44:	1809      	addeq	r1, r1, r0
 8005a46:	6021      	streq	r1, [r4, #0]
 8005a48:	6054      	str	r4, [r2, #4]
 8005a4a:	e7ca      	b.n	80059e2 <_free_r+0x22>
 8005a4c:	bd38      	pop	{r3, r4, r5, pc}
 8005a4e:	bf00      	nop
 8005a50:	200003e4 	.word	0x200003e4

08005a54 <malloc>:
 8005a54:	4b02      	ldr	r3, [pc, #8]	@ (8005a60 <malloc+0xc>)
 8005a56:	4601      	mov	r1, r0
 8005a58:	6818      	ldr	r0, [r3, #0]
 8005a5a:	f000 b825 	b.w	8005aa8 <_malloc_r>
 8005a5e:	bf00      	nop
 8005a60:	2000001c 	.word	0x2000001c

08005a64 <sbrk_aligned>:
 8005a64:	b570      	push	{r4, r5, r6, lr}
 8005a66:	4e0f      	ldr	r6, [pc, #60]	@ (8005aa4 <sbrk_aligned+0x40>)
 8005a68:	460c      	mov	r4, r1
 8005a6a:	6831      	ldr	r1, [r6, #0]
 8005a6c:	4605      	mov	r5, r0
 8005a6e:	b911      	cbnz	r1, 8005a76 <sbrk_aligned+0x12>
 8005a70:	f000 f964 	bl	8005d3c <_sbrk_r>
 8005a74:	6030      	str	r0, [r6, #0]
 8005a76:	4621      	mov	r1, r4
 8005a78:	4628      	mov	r0, r5
 8005a7a:	f000 f95f 	bl	8005d3c <_sbrk_r>
 8005a7e:	1c43      	adds	r3, r0, #1
 8005a80:	d103      	bne.n	8005a8a <sbrk_aligned+0x26>
 8005a82:	f04f 34ff 	mov.w	r4, #4294967295
 8005a86:	4620      	mov	r0, r4
 8005a88:	bd70      	pop	{r4, r5, r6, pc}
 8005a8a:	1cc4      	adds	r4, r0, #3
 8005a8c:	f024 0403 	bic.w	r4, r4, #3
 8005a90:	42a0      	cmp	r0, r4
 8005a92:	d0f8      	beq.n	8005a86 <sbrk_aligned+0x22>
 8005a94:	1a21      	subs	r1, r4, r0
 8005a96:	4628      	mov	r0, r5
 8005a98:	f000 f950 	bl	8005d3c <_sbrk_r>
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	d1f2      	bne.n	8005a86 <sbrk_aligned+0x22>
 8005aa0:	e7ef      	b.n	8005a82 <sbrk_aligned+0x1e>
 8005aa2:	bf00      	nop
 8005aa4:	200003e0 	.word	0x200003e0

08005aa8 <_malloc_r>:
 8005aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005aac:	1ccd      	adds	r5, r1, #3
 8005aae:	f025 0503 	bic.w	r5, r5, #3
 8005ab2:	3508      	adds	r5, #8
 8005ab4:	2d0c      	cmp	r5, #12
 8005ab6:	bf38      	it	cc
 8005ab8:	250c      	movcc	r5, #12
 8005aba:	2d00      	cmp	r5, #0
 8005abc:	4606      	mov	r6, r0
 8005abe:	db01      	blt.n	8005ac4 <_malloc_r+0x1c>
 8005ac0:	42a9      	cmp	r1, r5
 8005ac2:	d904      	bls.n	8005ace <_malloc_r+0x26>
 8005ac4:	230c      	movs	r3, #12
 8005ac6:	6033      	str	r3, [r6, #0]
 8005ac8:	2000      	movs	r0, #0
 8005aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ace:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ba4 <_malloc_r+0xfc>
 8005ad2:	f000 f869 	bl	8005ba8 <__malloc_lock>
 8005ad6:	f8d8 3000 	ldr.w	r3, [r8]
 8005ada:	461c      	mov	r4, r3
 8005adc:	bb44      	cbnz	r4, 8005b30 <_malloc_r+0x88>
 8005ade:	4629      	mov	r1, r5
 8005ae0:	4630      	mov	r0, r6
 8005ae2:	f7ff ffbf 	bl	8005a64 <sbrk_aligned>
 8005ae6:	1c43      	adds	r3, r0, #1
 8005ae8:	4604      	mov	r4, r0
 8005aea:	d158      	bne.n	8005b9e <_malloc_r+0xf6>
 8005aec:	f8d8 4000 	ldr.w	r4, [r8]
 8005af0:	4627      	mov	r7, r4
 8005af2:	2f00      	cmp	r7, #0
 8005af4:	d143      	bne.n	8005b7e <_malloc_r+0xd6>
 8005af6:	2c00      	cmp	r4, #0
 8005af8:	d04b      	beq.n	8005b92 <_malloc_r+0xea>
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	4639      	mov	r1, r7
 8005afe:	4630      	mov	r0, r6
 8005b00:	eb04 0903 	add.w	r9, r4, r3
 8005b04:	f000 f91a 	bl	8005d3c <_sbrk_r>
 8005b08:	4581      	cmp	r9, r0
 8005b0a:	d142      	bne.n	8005b92 <_malloc_r+0xea>
 8005b0c:	6821      	ldr	r1, [r4, #0]
 8005b0e:	1a6d      	subs	r5, r5, r1
 8005b10:	4629      	mov	r1, r5
 8005b12:	4630      	mov	r0, r6
 8005b14:	f7ff ffa6 	bl	8005a64 <sbrk_aligned>
 8005b18:	3001      	adds	r0, #1
 8005b1a:	d03a      	beq.n	8005b92 <_malloc_r+0xea>
 8005b1c:	6823      	ldr	r3, [r4, #0]
 8005b1e:	442b      	add	r3, r5
 8005b20:	6023      	str	r3, [r4, #0]
 8005b22:	f8d8 3000 	ldr.w	r3, [r8]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	bb62      	cbnz	r2, 8005b84 <_malloc_r+0xdc>
 8005b2a:	f8c8 7000 	str.w	r7, [r8]
 8005b2e:	e00f      	b.n	8005b50 <_malloc_r+0xa8>
 8005b30:	6822      	ldr	r2, [r4, #0]
 8005b32:	1b52      	subs	r2, r2, r5
 8005b34:	d420      	bmi.n	8005b78 <_malloc_r+0xd0>
 8005b36:	2a0b      	cmp	r2, #11
 8005b38:	d917      	bls.n	8005b6a <_malloc_r+0xc2>
 8005b3a:	1961      	adds	r1, r4, r5
 8005b3c:	42a3      	cmp	r3, r4
 8005b3e:	6025      	str	r5, [r4, #0]
 8005b40:	bf18      	it	ne
 8005b42:	6059      	strne	r1, [r3, #4]
 8005b44:	6863      	ldr	r3, [r4, #4]
 8005b46:	bf08      	it	eq
 8005b48:	f8c8 1000 	streq.w	r1, [r8]
 8005b4c:	5162      	str	r2, [r4, r5]
 8005b4e:	604b      	str	r3, [r1, #4]
 8005b50:	4630      	mov	r0, r6
 8005b52:	f000 f82f 	bl	8005bb4 <__malloc_unlock>
 8005b56:	f104 000b 	add.w	r0, r4, #11
 8005b5a:	1d23      	adds	r3, r4, #4
 8005b5c:	f020 0007 	bic.w	r0, r0, #7
 8005b60:	1ac2      	subs	r2, r0, r3
 8005b62:	bf1c      	itt	ne
 8005b64:	1a1b      	subne	r3, r3, r0
 8005b66:	50a3      	strne	r3, [r4, r2]
 8005b68:	e7af      	b.n	8005aca <_malloc_r+0x22>
 8005b6a:	6862      	ldr	r2, [r4, #4]
 8005b6c:	42a3      	cmp	r3, r4
 8005b6e:	bf0c      	ite	eq
 8005b70:	f8c8 2000 	streq.w	r2, [r8]
 8005b74:	605a      	strne	r2, [r3, #4]
 8005b76:	e7eb      	b.n	8005b50 <_malloc_r+0xa8>
 8005b78:	4623      	mov	r3, r4
 8005b7a:	6864      	ldr	r4, [r4, #4]
 8005b7c:	e7ae      	b.n	8005adc <_malloc_r+0x34>
 8005b7e:	463c      	mov	r4, r7
 8005b80:	687f      	ldr	r7, [r7, #4]
 8005b82:	e7b6      	b.n	8005af2 <_malloc_r+0x4a>
 8005b84:	461a      	mov	r2, r3
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	42a3      	cmp	r3, r4
 8005b8a:	d1fb      	bne.n	8005b84 <_malloc_r+0xdc>
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	6053      	str	r3, [r2, #4]
 8005b90:	e7de      	b.n	8005b50 <_malloc_r+0xa8>
 8005b92:	230c      	movs	r3, #12
 8005b94:	6033      	str	r3, [r6, #0]
 8005b96:	4630      	mov	r0, r6
 8005b98:	f000 f80c 	bl	8005bb4 <__malloc_unlock>
 8005b9c:	e794      	b.n	8005ac8 <_malloc_r+0x20>
 8005b9e:	6005      	str	r5, [r0, #0]
 8005ba0:	e7d6      	b.n	8005b50 <_malloc_r+0xa8>
 8005ba2:	bf00      	nop
 8005ba4:	200003e4 	.word	0x200003e4

08005ba8 <__malloc_lock>:
 8005ba8:	4801      	ldr	r0, [pc, #4]	@ (8005bb0 <__malloc_lock+0x8>)
 8005baa:	f7ff bee8 	b.w	800597e <__retarget_lock_acquire_recursive>
 8005bae:	bf00      	nop
 8005bb0:	200003dc 	.word	0x200003dc

08005bb4 <__malloc_unlock>:
 8005bb4:	4801      	ldr	r0, [pc, #4]	@ (8005bbc <__malloc_unlock+0x8>)
 8005bb6:	f7ff bee3 	b.w	8005980 <__retarget_lock_release_recursive>
 8005bba:	bf00      	nop
 8005bbc:	200003dc 	.word	0x200003dc

08005bc0 <__sflush_r>:
 8005bc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bc8:	0716      	lsls	r6, r2, #28
 8005bca:	4605      	mov	r5, r0
 8005bcc:	460c      	mov	r4, r1
 8005bce:	d454      	bmi.n	8005c7a <__sflush_r+0xba>
 8005bd0:	684b      	ldr	r3, [r1, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	dc02      	bgt.n	8005bdc <__sflush_r+0x1c>
 8005bd6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	dd48      	ble.n	8005c6e <__sflush_r+0xae>
 8005bdc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005bde:	2e00      	cmp	r6, #0
 8005be0:	d045      	beq.n	8005c6e <__sflush_r+0xae>
 8005be2:	2300      	movs	r3, #0
 8005be4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005be8:	682f      	ldr	r7, [r5, #0]
 8005bea:	6a21      	ldr	r1, [r4, #32]
 8005bec:	602b      	str	r3, [r5, #0]
 8005bee:	d030      	beq.n	8005c52 <__sflush_r+0x92>
 8005bf0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005bf2:	89a3      	ldrh	r3, [r4, #12]
 8005bf4:	0759      	lsls	r1, r3, #29
 8005bf6:	d505      	bpl.n	8005c04 <__sflush_r+0x44>
 8005bf8:	6863      	ldr	r3, [r4, #4]
 8005bfa:	1ad2      	subs	r2, r2, r3
 8005bfc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005bfe:	b10b      	cbz	r3, 8005c04 <__sflush_r+0x44>
 8005c00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005c02:	1ad2      	subs	r2, r2, r3
 8005c04:	2300      	movs	r3, #0
 8005c06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c08:	6a21      	ldr	r1, [r4, #32]
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	47b0      	blx	r6
 8005c0e:	1c43      	adds	r3, r0, #1
 8005c10:	89a3      	ldrh	r3, [r4, #12]
 8005c12:	d106      	bne.n	8005c22 <__sflush_r+0x62>
 8005c14:	6829      	ldr	r1, [r5, #0]
 8005c16:	291d      	cmp	r1, #29
 8005c18:	d82b      	bhi.n	8005c72 <__sflush_r+0xb2>
 8005c1a:	4a2a      	ldr	r2, [pc, #168]	@ (8005cc4 <__sflush_r+0x104>)
 8005c1c:	410a      	asrs	r2, r1
 8005c1e:	07d6      	lsls	r6, r2, #31
 8005c20:	d427      	bmi.n	8005c72 <__sflush_r+0xb2>
 8005c22:	2200      	movs	r2, #0
 8005c24:	6062      	str	r2, [r4, #4]
 8005c26:	04d9      	lsls	r1, r3, #19
 8005c28:	6922      	ldr	r2, [r4, #16]
 8005c2a:	6022      	str	r2, [r4, #0]
 8005c2c:	d504      	bpl.n	8005c38 <__sflush_r+0x78>
 8005c2e:	1c42      	adds	r2, r0, #1
 8005c30:	d101      	bne.n	8005c36 <__sflush_r+0x76>
 8005c32:	682b      	ldr	r3, [r5, #0]
 8005c34:	b903      	cbnz	r3, 8005c38 <__sflush_r+0x78>
 8005c36:	6560      	str	r0, [r4, #84]	@ 0x54
 8005c38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c3a:	602f      	str	r7, [r5, #0]
 8005c3c:	b1b9      	cbz	r1, 8005c6e <__sflush_r+0xae>
 8005c3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c42:	4299      	cmp	r1, r3
 8005c44:	d002      	beq.n	8005c4c <__sflush_r+0x8c>
 8005c46:	4628      	mov	r0, r5
 8005c48:	f7ff feba 	bl	80059c0 <_free_r>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c50:	e00d      	b.n	8005c6e <__sflush_r+0xae>
 8005c52:	2301      	movs	r3, #1
 8005c54:	4628      	mov	r0, r5
 8005c56:	47b0      	blx	r6
 8005c58:	4602      	mov	r2, r0
 8005c5a:	1c50      	adds	r0, r2, #1
 8005c5c:	d1c9      	bne.n	8005bf2 <__sflush_r+0x32>
 8005c5e:	682b      	ldr	r3, [r5, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d0c6      	beq.n	8005bf2 <__sflush_r+0x32>
 8005c64:	2b1d      	cmp	r3, #29
 8005c66:	d001      	beq.n	8005c6c <__sflush_r+0xac>
 8005c68:	2b16      	cmp	r3, #22
 8005c6a:	d11e      	bne.n	8005caa <__sflush_r+0xea>
 8005c6c:	602f      	str	r7, [r5, #0]
 8005c6e:	2000      	movs	r0, #0
 8005c70:	e022      	b.n	8005cb8 <__sflush_r+0xf8>
 8005c72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c76:	b21b      	sxth	r3, r3
 8005c78:	e01b      	b.n	8005cb2 <__sflush_r+0xf2>
 8005c7a:	690f      	ldr	r7, [r1, #16]
 8005c7c:	2f00      	cmp	r7, #0
 8005c7e:	d0f6      	beq.n	8005c6e <__sflush_r+0xae>
 8005c80:	0793      	lsls	r3, r2, #30
 8005c82:	680e      	ldr	r6, [r1, #0]
 8005c84:	bf08      	it	eq
 8005c86:	694b      	ldreq	r3, [r1, #20]
 8005c88:	600f      	str	r7, [r1, #0]
 8005c8a:	bf18      	it	ne
 8005c8c:	2300      	movne	r3, #0
 8005c8e:	eba6 0807 	sub.w	r8, r6, r7
 8005c92:	608b      	str	r3, [r1, #8]
 8005c94:	f1b8 0f00 	cmp.w	r8, #0
 8005c98:	dde9      	ble.n	8005c6e <__sflush_r+0xae>
 8005c9a:	6a21      	ldr	r1, [r4, #32]
 8005c9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005c9e:	4643      	mov	r3, r8
 8005ca0:	463a      	mov	r2, r7
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	47b0      	blx	r6
 8005ca6:	2800      	cmp	r0, #0
 8005ca8:	dc08      	bgt.n	8005cbc <__sflush_r+0xfc>
 8005caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cb2:	81a3      	strh	r3, [r4, #12]
 8005cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cbc:	4407      	add	r7, r0
 8005cbe:	eba8 0800 	sub.w	r8, r8, r0
 8005cc2:	e7e7      	b.n	8005c94 <__sflush_r+0xd4>
 8005cc4:	dfbffffe 	.word	0xdfbffffe

08005cc8 <_fflush_r>:
 8005cc8:	b538      	push	{r3, r4, r5, lr}
 8005cca:	690b      	ldr	r3, [r1, #16]
 8005ccc:	4605      	mov	r5, r0
 8005cce:	460c      	mov	r4, r1
 8005cd0:	b913      	cbnz	r3, 8005cd8 <_fflush_r+0x10>
 8005cd2:	2500      	movs	r5, #0
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	bd38      	pop	{r3, r4, r5, pc}
 8005cd8:	b118      	cbz	r0, 8005ce2 <_fflush_r+0x1a>
 8005cda:	6a03      	ldr	r3, [r0, #32]
 8005cdc:	b90b      	cbnz	r3, 8005ce2 <_fflush_r+0x1a>
 8005cde:	f7ff fd2d 	bl	800573c <__sinit>
 8005ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0f3      	beq.n	8005cd2 <_fflush_r+0xa>
 8005cea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005cec:	07d0      	lsls	r0, r2, #31
 8005cee:	d404      	bmi.n	8005cfa <_fflush_r+0x32>
 8005cf0:	0599      	lsls	r1, r3, #22
 8005cf2:	d402      	bmi.n	8005cfa <_fflush_r+0x32>
 8005cf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cf6:	f7ff fe42 	bl	800597e <__retarget_lock_acquire_recursive>
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	4621      	mov	r1, r4
 8005cfe:	f7ff ff5f 	bl	8005bc0 <__sflush_r>
 8005d02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d04:	07da      	lsls	r2, r3, #31
 8005d06:	4605      	mov	r5, r0
 8005d08:	d4e4      	bmi.n	8005cd4 <_fflush_r+0xc>
 8005d0a:	89a3      	ldrh	r3, [r4, #12]
 8005d0c:	059b      	lsls	r3, r3, #22
 8005d0e:	d4e1      	bmi.n	8005cd4 <_fflush_r+0xc>
 8005d10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d12:	f7ff fe35 	bl	8005980 <__retarget_lock_release_recursive>
 8005d16:	e7dd      	b.n	8005cd4 <_fflush_r+0xc>

08005d18 <fiprintf>:
 8005d18:	b40e      	push	{r1, r2, r3}
 8005d1a:	b503      	push	{r0, r1, lr}
 8005d1c:	4601      	mov	r1, r0
 8005d1e:	ab03      	add	r3, sp, #12
 8005d20:	4805      	ldr	r0, [pc, #20]	@ (8005d38 <fiprintf+0x20>)
 8005d22:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d26:	6800      	ldr	r0, [r0, #0]
 8005d28:	9301      	str	r3, [sp, #4]
 8005d2a:	f000 f847 	bl	8005dbc <_vfiprintf_r>
 8005d2e:	b002      	add	sp, #8
 8005d30:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d34:	b003      	add	sp, #12
 8005d36:	4770      	bx	lr
 8005d38:	2000001c 	.word	0x2000001c

08005d3c <_sbrk_r>:
 8005d3c:	b538      	push	{r3, r4, r5, lr}
 8005d3e:	4d06      	ldr	r5, [pc, #24]	@ (8005d58 <_sbrk_r+0x1c>)
 8005d40:	2300      	movs	r3, #0
 8005d42:	4604      	mov	r4, r0
 8005d44:	4608      	mov	r0, r1
 8005d46:	602b      	str	r3, [r5, #0]
 8005d48:	f7fb fbae 	bl	80014a8 <_sbrk>
 8005d4c:	1c43      	adds	r3, r0, #1
 8005d4e:	d102      	bne.n	8005d56 <_sbrk_r+0x1a>
 8005d50:	682b      	ldr	r3, [r5, #0]
 8005d52:	b103      	cbz	r3, 8005d56 <_sbrk_r+0x1a>
 8005d54:	6023      	str	r3, [r4, #0]
 8005d56:	bd38      	pop	{r3, r4, r5, pc}
 8005d58:	200003d8 	.word	0x200003d8

08005d5c <abort>:
 8005d5c:	b508      	push	{r3, lr}
 8005d5e:	2006      	movs	r0, #6
 8005d60:	f000 fb8e 	bl	8006480 <raise>
 8005d64:	2001      	movs	r0, #1
 8005d66:	f7fb fb27 	bl	80013b8 <_exit>

08005d6a <__sfputc_r>:
 8005d6a:	6893      	ldr	r3, [r2, #8]
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	b410      	push	{r4}
 8005d72:	6093      	str	r3, [r2, #8]
 8005d74:	da08      	bge.n	8005d88 <__sfputc_r+0x1e>
 8005d76:	6994      	ldr	r4, [r2, #24]
 8005d78:	42a3      	cmp	r3, r4
 8005d7a:	db01      	blt.n	8005d80 <__sfputc_r+0x16>
 8005d7c:	290a      	cmp	r1, #10
 8005d7e:	d103      	bne.n	8005d88 <__sfputc_r+0x1e>
 8005d80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d84:	f000 bac0 	b.w	8006308 <__swbuf_r>
 8005d88:	6813      	ldr	r3, [r2, #0]
 8005d8a:	1c58      	adds	r0, r3, #1
 8005d8c:	6010      	str	r0, [r2, #0]
 8005d8e:	7019      	strb	r1, [r3, #0]
 8005d90:	4608      	mov	r0, r1
 8005d92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <__sfputs_r>:
 8005d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d9a:	4606      	mov	r6, r0
 8005d9c:	460f      	mov	r7, r1
 8005d9e:	4614      	mov	r4, r2
 8005da0:	18d5      	adds	r5, r2, r3
 8005da2:	42ac      	cmp	r4, r5
 8005da4:	d101      	bne.n	8005daa <__sfputs_r+0x12>
 8005da6:	2000      	movs	r0, #0
 8005da8:	e007      	b.n	8005dba <__sfputs_r+0x22>
 8005daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dae:	463a      	mov	r2, r7
 8005db0:	4630      	mov	r0, r6
 8005db2:	f7ff ffda 	bl	8005d6a <__sfputc_r>
 8005db6:	1c43      	adds	r3, r0, #1
 8005db8:	d1f3      	bne.n	8005da2 <__sfputs_r+0xa>
 8005dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005dbc <_vfiprintf_r>:
 8005dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc0:	460d      	mov	r5, r1
 8005dc2:	b09d      	sub	sp, #116	@ 0x74
 8005dc4:	4614      	mov	r4, r2
 8005dc6:	4698      	mov	r8, r3
 8005dc8:	4606      	mov	r6, r0
 8005dca:	b118      	cbz	r0, 8005dd4 <_vfiprintf_r+0x18>
 8005dcc:	6a03      	ldr	r3, [r0, #32]
 8005dce:	b90b      	cbnz	r3, 8005dd4 <_vfiprintf_r+0x18>
 8005dd0:	f7ff fcb4 	bl	800573c <__sinit>
 8005dd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005dd6:	07d9      	lsls	r1, r3, #31
 8005dd8:	d405      	bmi.n	8005de6 <_vfiprintf_r+0x2a>
 8005dda:	89ab      	ldrh	r3, [r5, #12]
 8005ddc:	059a      	lsls	r2, r3, #22
 8005dde:	d402      	bmi.n	8005de6 <_vfiprintf_r+0x2a>
 8005de0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005de2:	f7ff fdcc 	bl	800597e <__retarget_lock_acquire_recursive>
 8005de6:	89ab      	ldrh	r3, [r5, #12]
 8005de8:	071b      	lsls	r3, r3, #28
 8005dea:	d501      	bpl.n	8005df0 <_vfiprintf_r+0x34>
 8005dec:	692b      	ldr	r3, [r5, #16]
 8005dee:	b99b      	cbnz	r3, 8005e18 <_vfiprintf_r+0x5c>
 8005df0:	4629      	mov	r1, r5
 8005df2:	4630      	mov	r0, r6
 8005df4:	f000 fac6 	bl	8006384 <__swsetup_r>
 8005df8:	b170      	cbz	r0, 8005e18 <_vfiprintf_r+0x5c>
 8005dfa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005dfc:	07dc      	lsls	r4, r3, #31
 8005dfe:	d504      	bpl.n	8005e0a <_vfiprintf_r+0x4e>
 8005e00:	f04f 30ff 	mov.w	r0, #4294967295
 8005e04:	b01d      	add	sp, #116	@ 0x74
 8005e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e0a:	89ab      	ldrh	r3, [r5, #12]
 8005e0c:	0598      	lsls	r0, r3, #22
 8005e0e:	d4f7      	bmi.n	8005e00 <_vfiprintf_r+0x44>
 8005e10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e12:	f7ff fdb5 	bl	8005980 <__retarget_lock_release_recursive>
 8005e16:	e7f3      	b.n	8005e00 <_vfiprintf_r+0x44>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e1c:	2320      	movs	r3, #32
 8005e1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e22:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e26:	2330      	movs	r3, #48	@ 0x30
 8005e28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005fd8 <_vfiprintf_r+0x21c>
 8005e2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e30:	f04f 0901 	mov.w	r9, #1
 8005e34:	4623      	mov	r3, r4
 8005e36:	469a      	mov	sl, r3
 8005e38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e3c:	b10a      	cbz	r2, 8005e42 <_vfiprintf_r+0x86>
 8005e3e:	2a25      	cmp	r2, #37	@ 0x25
 8005e40:	d1f9      	bne.n	8005e36 <_vfiprintf_r+0x7a>
 8005e42:	ebba 0b04 	subs.w	fp, sl, r4
 8005e46:	d00b      	beq.n	8005e60 <_vfiprintf_r+0xa4>
 8005e48:	465b      	mov	r3, fp
 8005e4a:	4622      	mov	r2, r4
 8005e4c:	4629      	mov	r1, r5
 8005e4e:	4630      	mov	r0, r6
 8005e50:	f7ff ffa2 	bl	8005d98 <__sfputs_r>
 8005e54:	3001      	adds	r0, #1
 8005e56:	f000 80a7 	beq.w	8005fa8 <_vfiprintf_r+0x1ec>
 8005e5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e5c:	445a      	add	r2, fp
 8005e5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e60:	f89a 3000 	ldrb.w	r3, [sl]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f000 809f 	beq.w	8005fa8 <_vfiprintf_r+0x1ec>
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e74:	f10a 0a01 	add.w	sl, sl, #1
 8005e78:	9304      	str	r3, [sp, #16]
 8005e7a:	9307      	str	r3, [sp, #28]
 8005e7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e80:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e82:	4654      	mov	r4, sl
 8005e84:	2205      	movs	r2, #5
 8005e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e8a:	4853      	ldr	r0, [pc, #332]	@ (8005fd8 <_vfiprintf_r+0x21c>)
 8005e8c:	f7fa f9a0 	bl	80001d0 <memchr>
 8005e90:	9a04      	ldr	r2, [sp, #16]
 8005e92:	b9d8      	cbnz	r0, 8005ecc <_vfiprintf_r+0x110>
 8005e94:	06d1      	lsls	r1, r2, #27
 8005e96:	bf44      	itt	mi
 8005e98:	2320      	movmi	r3, #32
 8005e9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e9e:	0713      	lsls	r3, r2, #28
 8005ea0:	bf44      	itt	mi
 8005ea2:	232b      	movmi	r3, #43	@ 0x2b
 8005ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8005eac:	2b2a      	cmp	r3, #42	@ 0x2a
 8005eae:	d015      	beq.n	8005edc <_vfiprintf_r+0x120>
 8005eb0:	9a07      	ldr	r2, [sp, #28]
 8005eb2:	4654      	mov	r4, sl
 8005eb4:	2000      	movs	r0, #0
 8005eb6:	f04f 0c0a 	mov.w	ip, #10
 8005eba:	4621      	mov	r1, r4
 8005ebc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ec0:	3b30      	subs	r3, #48	@ 0x30
 8005ec2:	2b09      	cmp	r3, #9
 8005ec4:	d94b      	bls.n	8005f5e <_vfiprintf_r+0x1a2>
 8005ec6:	b1b0      	cbz	r0, 8005ef6 <_vfiprintf_r+0x13a>
 8005ec8:	9207      	str	r2, [sp, #28]
 8005eca:	e014      	b.n	8005ef6 <_vfiprintf_r+0x13a>
 8005ecc:	eba0 0308 	sub.w	r3, r0, r8
 8005ed0:	fa09 f303 	lsl.w	r3, r9, r3
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	9304      	str	r3, [sp, #16]
 8005ed8:	46a2      	mov	sl, r4
 8005eda:	e7d2      	b.n	8005e82 <_vfiprintf_r+0xc6>
 8005edc:	9b03      	ldr	r3, [sp, #12]
 8005ede:	1d19      	adds	r1, r3, #4
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	9103      	str	r1, [sp, #12]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	bfbb      	ittet	lt
 8005ee8:	425b      	neglt	r3, r3
 8005eea:	f042 0202 	orrlt.w	r2, r2, #2
 8005eee:	9307      	strge	r3, [sp, #28]
 8005ef0:	9307      	strlt	r3, [sp, #28]
 8005ef2:	bfb8      	it	lt
 8005ef4:	9204      	strlt	r2, [sp, #16]
 8005ef6:	7823      	ldrb	r3, [r4, #0]
 8005ef8:	2b2e      	cmp	r3, #46	@ 0x2e
 8005efa:	d10a      	bne.n	8005f12 <_vfiprintf_r+0x156>
 8005efc:	7863      	ldrb	r3, [r4, #1]
 8005efe:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f00:	d132      	bne.n	8005f68 <_vfiprintf_r+0x1ac>
 8005f02:	9b03      	ldr	r3, [sp, #12]
 8005f04:	1d1a      	adds	r2, r3, #4
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	9203      	str	r2, [sp, #12]
 8005f0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f0e:	3402      	adds	r4, #2
 8005f10:	9305      	str	r3, [sp, #20]
 8005f12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005fe8 <_vfiprintf_r+0x22c>
 8005f16:	7821      	ldrb	r1, [r4, #0]
 8005f18:	2203      	movs	r2, #3
 8005f1a:	4650      	mov	r0, sl
 8005f1c:	f7fa f958 	bl	80001d0 <memchr>
 8005f20:	b138      	cbz	r0, 8005f32 <_vfiprintf_r+0x176>
 8005f22:	9b04      	ldr	r3, [sp, #16]
 8005f24:	eba0 000a 	sub.w	r0, r0, sl
 8005f28:	2240      	movs	r2, #64	@ 0x40
 8005f2a:	4082      	lsls	r2, r0
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	3401      	adds	r4, #1
 8005f30:	9304      	str	r3, [sp, #16]
 8005f32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f36:	4829      	ldr	r0, [pc, #164]	@ (8005fdc <_vfiprintf_r+0x220>)
 8005f38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f3c:	2206      	movs	r2, #6
 8005f3e:	f7fa f947 	bl	80001d0 <memchr>
 8005f42:	2800      	cmp	r0, #0
 8005f44:	d03f      	beq.n	8005fc6 <_vfiprintf_r+0x20a>
 8005f46:	4b26      	ldr	r3, [pc, #152]	@ (8005fe0 <_vfiprintf_r+0x224>)
 8005f48:	bb1b      	cbnz	r3, 8005f92 <_vfiprintf_r+0x1d6>
 8005f4a:	9b03      	ldr	r3, [sp, #12]
 8005f4c:	3307      	adds	r3, #7
 8005f4e:	f023 0307 	bic.w	r3, r3, #7
 8005f52:	3308      	adds	r3, #8
 8005f54:	9303      	str	r3, [sp, #12]
 8005f56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f58:	443b      	add	r3, r7
 8005f5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f5c:	e76a      	b.n	8005e34 <_vfiprintf_r+0x78>
 8005f5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f62:	460c      	mov	r4, r1
 8005f64:	2001      	movs	r0, #1
 8005f66:	e7a8      	b.n	8005eba <_vfiprintf_r+0xfe>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	3401      	adds	r4, #1
 8005f6c:	9305      	str	r3, [sp, #20]
 8005f6e:	4619      	mov	r1, r3
 8005f70:	f04f 0c0a 	mov.w	ip, #10
 8005f74:	4620      	mov	r0, r4
 8005f76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f7a:	3a30      	subs	r2, #48	@ 0x30
 8005f7c:	2a09      	cmp	r2, #9
 8005f7e:	d903      	bls.n	8005f88 <_vfiprintf_r+0x1cc>
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0c6      	beq.n	8005f12 <_vfiprintf_r+0x156>
 8005f84:	9105      	str	r1, [sp, #20]
 8005f86:	e7c4      	b.n	8005f12 <_vfiprintf_r+0x156>
 8005f88:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f8c:	4604      	mov	r4, r0
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e7f0      	b.n	8005f74 <_vfiprintf_r+0x1b8>
 8005f92:	ab03      	add	r3, sp, #12
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	462a      	mov	r2, r5
 8005f98:	4b12      	ldr	r3, [pc, #72]	@ (8005fe4 <_vfiprintf_r+0x228>)
 8005f9a:	a904      	add	r1, sp, #16
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	f3af 8000 	nop.w
 8005fa2:	4607      	mov	r7, r0
 8005fa4:	1c78      	adds	r0, r7, #1
 8005fa6:	d1d6      	bne.n	8005f56 <_vfiprintf_r+0x19a>
 8005fa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005faa:	07d9      	lsls	r1, r3, #31
 8005fac:	d405      	bmi.n	8005fba <_vfiprintf_r+0x1fe>
 8005fae:	89ab      	ldrh	r3, [r5, #12]
 8005fb0:	059a      	lsls	r2, r3, #22
 8005fb2:	d402      	bmi.n	8005fba <_vfiprintf_r+0x1fe>
 8005fb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005fb6:	f7ff fce3 	bl	8005980 <__retarget_lock_release_recursive>
 8005fba:	89ab      	ldrh	r3, [r5, #12]
 8005fbc:	065b      	lsls	r3, r3, #25
 8005fbe:	f53f af1f 	bmi.w	8005e00 <_vfiprintf_r+0x44>
 8005fc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005fc4:	e71e      	b.n	8005e04 <_vfiprintf_r+0x48>
 8005fc6:	ab03      	add	r3, sp, #12
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	462a      	mov	r2, r5
 8005fcc:	4b05      	ldr	r3, [pc, #20]	@ (8005fe4 <_vfiprintf_r+0x228>)
 8005fce:	a904      	add	r1, sp, #16
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	f000 f879 	bl	80060c8 <_printf_i>
 8005fd6:	e7e4      	b.n	8005fa2 <_vfiprintf_r+0x1e6>
 8005fd8:	080066cb 	.word	0x080066cb
 8005fdc:	080066d5 	.word	0x080066d5
 8005fe0:	00000000 	.word	0x00000000
 8005fe4:	08005d99 	.word	0x08005d99
 8005fe8:	080066d1 	.word	0x080066d1

08005fec <_printf_common>:
 8005fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ff0:	4616      	mov	r6, r2
 8005ff2:	4698      	mov	r8, r3
 8005ff4:	688a      	ldr	r2, [r1, #8]
 8005ff6:	690b      	ldr	r3, [r1, #16]
 8005ff8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	bfb8      	it	lt
 8006000:	4613      	movlt	r3, r2
 8006002:	6033      	str	r3, [r6, #0]
 8006004:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006008:	4607      	mov	r7, r0
 800600a:	460c      	mov	r4, r1
 800600c:	b10a      	cbz	r2, 8006012 <_printf_common+0x26>
 800600e:	3301      	adds	r3, #1
 8006010:	6033      	str	r3, [r6, #0]
 8006012:	6823      	ldr	r3, [r4, #0]
 8006014:	0699      	lsls	r1, r3, #26
 8006016:	bf42      	ittt	mi
 8006018:	6833      	ldrmi	r3, [r6, #0]
 800601a:	3302      	addmi	r3, #2
 800601c:	6033      	strmi	r3, [r6, #0]
 800601e:	6825      	ldr	r5, [r4, #0]
 8006020:	f015 0506 	ands.w	r5, r5, #6
 8006024:	d106      	bne.n	8006034 <_printf_common+0x48>
 8006026:	f104 0a19 	add.w	sl, r4, #25
 800602a:	68e3      	ldr	r3, [r4, #12]
 800602c:	6832      	ldr	r2, [r6, #0]
 800602e:	1a9b      	subs	r3, r3, r2
 8006030:	42ab      	cmp	r3, r5
 8006032:	dc26      	bgt.n	8006082 <_printf_common+0x96>
 8006034:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006038:	6822      	ldr	r2, [r4, #0]
 800603a:	3b00      	subs	r3, #0
 800603c:	bf18      	it	ne
 800603e:	2301      	movne	r3, #1
 8006040:	0692      	lsls	r2, r2, #26
 8006042:	d42b      	bmi.n	800609c <_printf_common+0xb0>
 8006044:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006048:	4641      	mov	r1, r8
 800604a:	4638      	mov	r0, r7
 800604c:	47c8      	blx	r9
 800604e:	3001      	adds	r0, #1
 8006050:	d01e      	beq.n	8006090 <_printf_common+0xa4>
 8006052:	6823      	ldr	r3, [r4, #0]
 8006054:	6922      	ldr	r2, [r4, #16]
 8006056:	f003 0306 	and.w	r3, r3, #6
 800605a:	2b04      	cmp	r3, #4
 800605c:	bf02      	ittt	eq
 800605e:	68e5      	ldreq	r5, [r4, #12]
 8006060:	6833      	ldreq	r3, [r6, #0]
 8006062:	1aed      	subeq	r5, r5, r3
 8006064:	68a3      	ldr	r3, [r4, #8]
 8006066:	bf0c      	ite	eq
 8006068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800606c:	2500      	movne	r5, #0
 800606e:	4293      	cmp	r3, r2
 8006070:	bfc4      	itt	gt
 8006072:	1a9b      	subgt	r3, r3, r2
 8006074:	18ed      	addgt	r5, r5, r3
 8006076:	2600      	movs	r6, #0
 8006078:	341a      	adds	r4, #26
 800607a:	42b5      	cmp	r5, r6
 800607c:	d11a      	bne.n	80060b4 <_printf_common+0xc8>
 800607e:	2000      	movs	r0, #0
 8006080:	e008      	b.n	8006094 <_printf_common+0xa8>
 8006082:	2301      	movs	r3, #1
 8006084:	4652      	mov	r2, sl
 8006086:	4641      	mov	r1, r8
 8006088:	4638      	mov	r0, r7
 800608a:	47c8      	blx	r9
 800608c:	3001      	adds	r0, #1
 800608e:	d103      	bne.n	8006098 <_printf_common+0xac>
 8006090:	f04f 30ff 	mov.w	r0, #4294967295
 8006094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006098:	3501      	adds	r5, #1
 800609a:	e7c6      	b.n	800602a <_printf_common+0x3e>
 800609c:	18e1      	adds	r1, r4, r3
 800609e:	1c5a      	adds	r2, r3, #1
 80060a0:	2030      	movs	r0, #48	@ 0x30
 80060a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80060a6:	4422      	add	r2, r4
 80060a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80060ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80060b0:	3302      	adds	r3, #2
 80060b2:	e7c7      	b.n	8006044 <_printf_common+0x58>
 80060b4:	2301      	movs	r3, #1
 80060b6:	4622      	mov	r2, r4
 80060b8:	4641      	mov	r1, r8
 80060ba:	4638      	mov	r0, r7
 80060bc:	47c8      	blx	r9
 80060be:	3001      	adds	r0, #1
 80060c0:	d0e6      	beq.n	8006090 <_printf_common+0xa4>
 80060c2:	3601      	adds	r6, #1
 80060c4:	e7d9      	b.n	800607a <_printf_common+0x8e>
	...

080060c8 <_printf_i>:
 80060c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060cc:	7e0f      	ldrb	r7, [r1, #24]
 80060ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060d0:	2f78      	cmp	r7, #120	@ 0x78
 80060d2:	4691      	mov	r9, r2
 80060d4:	4680      	mov	r8, r0
 80060d6:	460c      	mov	r4, r1
 80060d8:	469a      	mov	sl, r3
 80060da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060de:	d807      	bhi.n	80060f0 <_printf_i+0x28>
 80060e0:	2f62      	cmp	r7, #98	@ 0x62
 80060e2:	d80a      	bhi.n	80060fa <_printf_i+0x32>
 80060e4:	2f00      	cmp	r7, #0
 80060e6:	f000 80d2 	beq.w	800628e <_printf_i+0x1c6>
 80060ea:	2f58      	cmp	r7, #88	@ 0x58
 80060ec:	f000 80b9 	beq.w	8006262 <_printf_i+0x19a>
 80060f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060f8:	e03a      	b.n	8006170 <_printf_i+0xa8>
 80060fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060fe:	2b15      	cmp	r3, #21
 8006100:	d8f6      	bhi.n	80060f0 <_printf_i+0x28>
 8006102:	a101      	add	r1, pc, #4	@ (adr r1, 8006108 <_printf_i+0x40>)
 8006104:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006108:	08006161 	.word	0x08006161
 800610c:	08006175 	.word	0x08006175
 8006110:	080060f1 	.word	0x080060f1
 8006114:	080060f1 	.word	0x080060f1
 8006118:	080060f1 	.word	0x080060f1
 800611c:	080060f1 	.word	0x080060f1
 8006120:	08006175 	.word	0x08006175
 8006124:	080060f1 	.word	0x080060f1
 8006128:	080060f1 	.word	0x080060f1
 800612c:	080060f1 	.word	0x080060f1
 8006130:	080060f1 	.word	0x080060f1
 8006134:	08006275 	.word	0x08006275
 8006138:	0800619f 	.word	0x0800619f
 800613c:	0800622f 	.word	0x0800622f
 8006140:	080060f1 	.word	0x080060f1
 8006144:	080060f1 	.word	0x080060f1
 8006148:	08006297 	.word	0x08006297
 800614c:	080060f1 	.word	0x080060f1
 8006150:	0800619f 	.word	0x0800619f
 8006154:	080060f1 	.word	0x080060f1
 8006158:	080060f1 	.word	0x080060f1
 800615c:	08006237 	.word	0x08006237
 8006160:	6833      	ldr	r3, [r6, #0]
 8006162:	1d1a      	adds	r2, r3, #4
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	6032      	str	r2, [r6, #0]
 8006168:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800616c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006170:	2301      	movs	r3, #1
 8006172:	e09d      	b.n	80062b0 <_printf_i+0x1e8>
 8006174:	6833      	ldr	r3, [r6, #0]
 8006176:	6820      	ldr	r0, [r4, #0]
 8006178:	1d19      	adds	r1, r3, #4
 800617a:	6031      	str	r1, [r6, #0]
 800617c:	0606      	lsls	r6, r0, #24
 800617e:	d501      	bpl.n	8006184 <_printf_i+0xbc>
 8006180:	681d      	ldr	r5, [r3, #0]
 8006182:	e003      	b.n	800618c <_printf_i+0xc4>
 8006184:	0645      	lsls	r5, r0, #25
 8006186:	d5fb      	bpl.n	8006180 <_printf_i+0xb8>
 8006188:	f9b3 5000 	ldrsh.w	r5, [r3]
 800618c:	2d00      	cmp	r5, #0
 800618e:	da03      	bge.n	8006198 <_printf_i+0xd0>
 8006190:	232d      	movs	r3, #45	@ 0x2d
 8006192:	426d      	negs	r5, r5
 8006194:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006198:	4859      	ldr	r0, [pc, #356]	@ (8006300 <_printf_i+0x238>)
 800619a:	230a      	movs	r3, #10
 800619c:	e011      	b.n	80061c2 <_printf_i+0xfa>
 800619e:	6821      	ldr	r1, [r4, #0]
 80061a0:	6833      	ldr	r3, [r6, #0]
 80061a2:	0608      	lsls	r0, r1, #24
 80061a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80061a8:	d402      	bmi.n	80061b0 <_printf_i+0xe8>
 80061aa:	0649      	lsls	r1, r1, #25
 80061ac:	bf48      	it	mi
 80061ae:	b2ad      	uxthmi	r5, r5
 80061b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80061b2:	4853      	ldr	r0, [pc, #332]	@ (8006300 <_printf_i+0x238>)
 80061b4:	6033      	str	r3, [r6, #0]
 80061b6:	bf14      	ite	ne
 80061b8:	230a      	movne	r3, #10
 80061ba:	2308      	moveq	r3, #8
 80061bc:	2100      	movs	r1, #0
 80061be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80061c2:	6866      	ldr	r6, [r4, #4]
 80061c4:	60a6      	str	r6, [r4, #8]
 80061c6:	2e00      	cmp	r6, #0
 80061c8:	bfa2      	ittt	ge
 80061ca:	6821      	ldrge	r1, [r4, #0]
 80061cc:	f021 0104 	bicge.w	r1, r1, #4
 80061d0:	6021      	strge	r1, [r4, #0]
 80061d2:	b90d      	cbnz	r5, 80061d8 <_printf_i+0x110>
 80061d4:	2e00      	cmp	r6, #0
 80061d6:	d04b      	beq.n	8006270 <_printf_i+0x1a8>
 80061d8:	4616      	mov	r6, r2
 80061da:	fbb5 f1f3 	udiv	r1, r5, r3
 80061de:	fb03 5711 	mls	r7, r3, r1, r5
 80061e2:	5dc7      	ldrb	r7, [r0, r7]
 80061e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061e8:	462f      	mov	r7, r5
 80061ea:	42bb      	cmp	r3, r7
 80061ec:	460d      	mov	r5, r1
 80061ee:	d9f4      	bls.n	80061da <_printf_i+0x112>
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	d10b      	bne.n	800620c <_printf_i+0x144>
 80061f4:	6823      	ldr	r3, [r4, #0]
 80061f6:	07df      	lsls	r7, r3, #31
 80061f8:	d508      	bpl.n	800620c <_printf_i+0x144>
 80061fa:	6923      	ldr	r3, [r4, #16]
 80061fc:	6861      	ldr	r1, [r4, #4]
 80061fe:	4299      	cmp	r1, r3
 8006200:	bfde      	ittt	le
 8006202:	2330      	movle	r3, #48	@ 0x30
 8006204:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006208:	f106 36ff 	addle.w	r6, r6, #4294967295
 800620c:	1b92      	subs	r2, r2, r6
 800620e:	6122      	str	r2, [r4, #16]
 8006210:	f8cd a000 	str.w	sl, [sp]
 8006214:	464b      	mov	r3, r9
 8006216:	aa03      	add	r2, sp, #12
 8006218:	4621      	mov	r1, r4
 800621a:	4640      	mov	r0, r8
 800621c:	f7ff fee6 	bl	8005fec <_printf_common>
 8006220:	3001      	adds	r0, #1
 8006222:	d14a      	bne.n	80062ba <_printf_i+0x1f2>
 8006224:	f04f 30ff 	mov.w	r0, #4294967295
 8006228:	b004      	add	sp, #16
 800622a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	f043 0320 	orr.w	r3, r3, #32
 8006234:	6023      	str	r3, [r4, #0]
 8006236:	4833      	ldr	r0, [pc, #204]	@ (8006304 <_printf_i+0x23c>)
 8006238:	2778      	movs	r7, #120	@ 0x78
 800623a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	6831      	ldr	r1, [r6, #0]
 8006242:	061f      	lsls	r7, r3, #24
 8006244:	f851 5b04 	ldr.w	r5, [r1], #4
 8006248:	d402      	bmi.n	8006250 <_printf_i+0x188>
 800624a:	065f      	lsls	r7, r3, #25
 800624c:	bf48      	it	mi
 800624e:	b2ad      	uxthmi	r5, r5
 8006250:	6031      	str	r1, [r6, #0]
 8006252:	07d9      	lsls	r1, r3, #31
 8006254:	bf44      	itt	mi
 8006256:	f043 0320 	orrmi.w	r3, r3, #32
 800625a:	6023      	strmi	r3, [r4, #0]
 800625c:	b11d      	cbz	r5, 8006266 <_printf_i+0x19e>
 800625e:	2310      	movs	r3, #16
 8006260:	e7ac      	b.n	80061bc <_printf_i+0xf4>
 8006262:	4827      	ldr	r0, [pc, #156]	@ (8006300 <_printf_i+0x238>)
 8006264:	e7e9      	b.n	800623a <_printf_i+0x172>
 8006266:	6823      	ldr	r3, [r4, #0]
 8006268:	f023 0320 	bic.w	r3, r3, #32
 800626c:	6023      	str	r3, [r4, #0]
 800626e:	e7f6      	b.n	800625e <_printf_i+0x196>
 8006270:	4616      	mov	r6, r2
 8006272:	e7bd      	b.n	80061f0 <_printf_i+0x128>
 8006274:	6833      	ldr	r3, [r6, #0]
 8006276:	6825      	ldr	r5, [r4, #0]
 8006278:	6961      	ldr	r1, [r4, #20]
 800627a:	1d18      	adds	r0, r3, #4
 800627c:	6030      	str	r0, [r6, #0]
 800627e:	062e      	lsls	r6, r5, #24
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	d501      	bpl.n	8006288 <_printf_i+0x1c0>
 8006284:	6019      	str	r1, [r3, #0]
 8006286:	e002      	b.n	800628e <_printf_i+0x1c6>
 8006288:	0668      	lsls	r0, r5, #25
 800628a:	d5fb      	bpl.n	8006284 <_printf_i+0x1bc>
 800628c:	8019      	strh	r1, [r3, #0]
 800628e:	2300      	movs	r3, #0
 8006290:	6123      	str	r3, [r4, #16]
 8006292:	4616      	mov	r6, r2
 8006294:	e7bc      	b.n	8006210 <_printf_i+0x148>
 8006296:	6833      	ldr	r3, [r6, #0]
 8006298:	1d1a      	adds	r2, r3, #4
 800629a:	6032      	str	r2, [r6, #0]
 800629c:	681e      	ldr	r6, [r3, #0]
 800629e:	6862      	ldr	r2, [r4, #4]
 80062a0:	2100      	movs	r1, #0
 80062a2:	4630      	mov	r0, r6
 80062a4:	f7f9 ff94 	bl	80001d0 <memchr>
 80062a8:	b108      	cbz	r0, 80062ae <_printf_i+0x1e6>
 80062aa:	1b80      	subs	r0, r0, r6
 80062ac:	6060      	str	r0, [r4, #4]
 80062ae:	6863      	ldr	r3, [r4, #4]
 80062b0:	6123      	str	r3, [r4, #16]
 80062b2:	2300      	movs	r3, #0
 80062b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062b8:	e7aa      	b.n	8006210 <_printf_i+0x148>
 80062ba:	6923      	ldr	r3, [r4, #16]
 80062bc:	4632      	mov	r2, r6
 80062be:	4649      	mov	r1, r9
 80062c0:	4640      	mov	r0, r8
 80062c2:	47d0      	blx	sl
 80062c4:	3001      	adds	r0, #1
 80062c6:	d0ad      	beq.n	8006224 <_printf_i+0x15c>
 80062c8:	6823      	ldr	r3, [r4, #0]
 80062ca:	079b      	lsls	r3, r3, #30
 80062cc:	d413      	bmi.n	80062f6 <_printf_i+0x22e>
 80062ce:	68e0      	ldr	r0, [r4, #12]
 80062d0:	9b03      	ldr	r3, [sp, #12]
 80062d2:	4298      	cmp	r0, r3
 80062d4:	bfb8      	it	lt
 80062d6:	4618      	movlt	r0, r3
 80062d8:	e7a6      	b.n	8006228 <_printf_i+0x160>
 80062da:	2301      	movs	r3, #1
 80062dc:	4632      	mov	r2, r6
 80062de:	4649      	mov	r1, r9
 80062e0:	4640      	mov	r0, r8
 80062e2:	47d0      	blx	sl
 80062e4:	3001      	adds	r0, #1
 80062e6:	d09d      	beq.n	8006224 <_printf_i+0x15c>
 80062e8:	3501      	adds	r5, #1
 80062ea:	68e3      	ldr	r3, [r4, #12]
 80062ec:	9903      	ldr	r1, [sp, #12]
 80062ee:	1a5b      	subs	r3, r3, r1
 80062f0:	42ab      	cmp	r3, r5
 80062f2:	dcf2      	bgt.n	80062da <_printf_i+0x212>
 80062f4:	e7eb      	b.n	80062ce <_printf_i+0x206>
 80062f6:	2500      	movs	r5, #0
 80062f8:	f104 0619 	add.w	r6, r4, #25
 80062fc:	e7f5      	b.n	80062ea <_printf_i+0x222>
 80062fe:	bf00      	nop
 8006300:	080066dc 	.word	0x080066dc
 8006304:	080066ed 	.word	0x080066ed

08006308 <__swbuf_r>:
 8006308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800630a:	460e      	mov	r6, r1
 800630c:	4614      	mov	r4, r2
 800630e:	4605      	mov	r5, r0
 8006310:	b118      	cbz	r0, 800631a <__swbuf_r+0x12>
 8006312:	6a03      	ldr	r3, [r0, #32]
 8006314:	b90b      	cbnz	r3, 800631a <__swbuf_r+0x12>
 8006316:	f7ff fa11 	bl	800573c <__sinit>
 800631a:	69a3      	ldr	r3, [r4, #24]
 800631c:	60a3      	str	r3, [r4, #8]
 800631e:	89a3      	ldrh	r3, [r4, #12]
 8006320:	071a      	lsls	r2, r3, #28
 8006322:	d501      	bpl.n	8006328 <__swbuf_r+0x20>
 8006324:	6923      	ldr	r3, [r4, #16]
 8006326:	b943      	cbnz	r3, 800633a <__swbuf_r+0x32>
 8006328:	4621      	mov	r1, r4
 800632a:	4628      	mov	r0, r5
 800632c:	f000 f82a 	bl	8006384 <__swsetup_r>
 8006330:	b118      	cbz	r0, 800633a <__swbuf_r+0x32>
 8006332:	f04f 37ff 	mov.w	r7, #4294967295
 8006336:	4638      	mov	r0, r7
 8006338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800633a:	6823      	ldr	r3, [r4, #0]
 800633c:	6922      	ldr	r2, [r4, #16]
 800633e:	1a98      	subs	r0, r3, r2
 8006340:	6963      	ldr	r3, [r4, #20]
 8006342:	b2f6      	uxtb	r6, r6
 8006344:	4283      	cmp	r3, r0
 8006346:	4637      	mov	r7, r6
 8006348:	dc05      	bgt.n	8006356 <__swbuf_r+0x4e>
 800634a:	4621      	mov	r1, r4
 800634c:	4628      	mov	r0, r5
 800634e:	f7ff fcbb 	bl	8005cc8 <_fflush_r>
 8006352:	2800      	cmp	r0, #0
 8006354:	d1ed      	bne.n	8006332 <__swbuf_r+0x2a>
 8006356:	68a3      	ldr	r3, [r4, #8]
 8006358:	3b01      	subs	r3, #1
 800635a:	60a3      	str	r3, [r4, #8]
 800635c:	6823      	ldr	r3, [r4, #0]
 800635e:	1c5a      	adds	r2, r3, #1
 8006360:	6022      	str	r2, [r4, #0]
 8006362:	701e      	strb	r6, [r3, #0]
 8006364:	6962      	ldr	r2, [r4, #20]
 8006366:	1c43      	adds	r3, r0, #1
 8006368:	429a      	cmp	r2, r3
 800636a:	d004      	beq.n	8006376 <__swbuf_r+0x6e>
 800636c:	89a3      	ldrh	r3, [r4, #12]
 800636e:	07db      	lsls	r3, r3, #31
 8006370:	d5e1      	bpl.n	8006336 <__swbuf_r+0x2e>
 8006372:	2e0a      	cmp	r6, #10
 8006374:	d1df      	bne.n	8006336 <__swbuf_r+0x2e>
 8006376:	4621      	mov	r1, r4
 8006378:	4628      	mov	r0, r5
 800637a:	f7ff fca5 	bl	8005cc8 <_fflush_r>
 800637e:	2800      	cmp	r0, #0
 8006380:	d0d9      	beq.n	8006336 <__swbuf_r+0x2e>
 8006382:	e7d6      	b.n	8006332 <__swbuf_r+0x2a>

08006384 <__swsetup_r>:
 8006384:	b538      	push	{r3, r4, r5, lr}
 8006386:	4b29      	ldr	r3, [pc, #164]	@ (800642c <__swsetup_r+0xa8>)
 8006388:	4605      	mov	r5, r0
 800638a:	6818      	ldr	r0, [r3, #0]
 800638c:	460c      	mov	r4, r1
 800638e:	b118      	cbz	r0, 8006398 <__swsetup_r+0x14>
 8006390:	6a03      	ldr	r3, [r0, #32]
 8006392:	b90b      	cbnz	r3, 8006398 <__swsetup_r+0x14>
 8006394:	f7ff f9d2 	bl	800573c <__sinit>
 8006398:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800639c:	0719      	lsls	r1, r3, #28
 800639e:	d422      	bmi.n	80063e6 <__swsetup_r+0x62>
 80063a0:	06da      	lsls	r2, r3, #27
 80063a2:	d407      	bmi.n	80063b4 <__swsetup_r+0x30>
 80063a4:	2209      	movs	r2, #9
 80063a6:	602a      	str	r2, [r5, #0]
 80063a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063ac:	81a3      	strh	r3, [r4, #12]
 80063ae:	f04f 30ff 	mov.w	r0, #4294967295
 80063b2:	e033      	b.n	800641c <__swsetup_r+0x98>
 80063b4:	0758      	lsls	r0, r3, #29
 80063b6:	d512      	bpl.n	80063de <__swsetup_r+0x5a>
 80063b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80063ba:	b141      	cbz	r1, 80063ce <__swsetup_r+0x4a>
 80063bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80063c0:	4299      	cmp	r1, r3
 80063c2:	d002      	beq.n	80063ca <__swsetup_r+0x46>
 80063c4:	4628      	mov	r0, r5
 80063c6:	f7ff fafb 	bl	80059c0 <_free_r>
 80063ca:	2300      	movs	r3, #0
 80063cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80063ce:	89a3      	ldrh	r3, [r4, #12]
 80063d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80063d4:	81a3      	strh	r3, [r4, #12]
 80063d6:	2300      	movs	r3, #0
 80063d8:	6063      	str	r3, [r4, #4]
 80063da:	6923      	ldr	r3, [r4, #16]
 80063dc:	6023      	str	r3, [r4, #0]
 80063de:	89a3      	ldrh	r3, [r4, #12]
 80063e0:	f043 0308 	orr.w	r3, r3, #8
 80063e4:	81a3      	strh	r3, [r4, #12]
 80063e6:	6923      	ldr	r3, [r4, #16]
 80063e8:	b94b      	cbnz	r3, 80063fe <__swsetup_r+0x7a>
 80063ea:	89a3      	ldrh	r3, [r4, #12]
 80063ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80063f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063f4:	d003      	beq.n	80063fe <__swsetup_r+0x7a>
 80063f6:	4621      	mov	r1, r4
 80063f8:	4628      	mov	r0, r5
 80063fa:	f000 f883 	bl	8006504 <__smakebuf_r>
 80063fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006402:	f013 0201 	ands.w	r2, r3, #1
 8006406:	d00a      	beq.n	800641e <__swsetup_r+0x9a>
 8006408:	2200      	movs	r2, #0
 800640a:	60a2      	str	r2, [r4, #8]
 800640c:	6962      	ldr	r2, [r4, #20]
 800640e:	4252      	negs	r2, r2
 8006410:	61a2      	str	r2, [r4, #24]
 8006412:	6922      	ldr	r2, [r4, #16]
 8006414:	b942      	cbnz	r2, 8006428 <__swsetup_r+0xa4>
 8006416:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800641a:	d1c5      	bne.n	80063a8 <__swsetup_r+0x24>
 800641c:	bd38      	pop	{r3, r4, r5, pc}
 800641e:	0799      	lsls	r1, r3, #30
 8006420:	bf58      	it	pl
 8006422:	6962      	ldrpl	r2, [r4, #20]
 8006424:	60a2      	str	r2, [r4, #8]
 8006426:	e7f4      	b.n	8006412 <__swsetup_r+0x8e>
 8006428:	2000      	movs	r0, #0
 800642a:	e7f7      	b.n	800641c <__swsetup_r+0x98>
 800642c:	2000001c 	.word	0x2000001c

08006430 <_raise_r>:
 8006430:	291f      	cmp	r1, #31
 8006432:	b538      	push	{r3, r4, r5, lr}
 8006434:	4605      	mov	r5, r0
 8006436:	460c      	mov	r4, r1
 8006438:	d904      	bls.n	8006444 <_raise_r+0x14>
 800643a:	2316      	movs	r3, #22
 800643c:	6003      	str	r3, [r0, #0]
 800643e:	f04f 30ff 	mov.w	r0, #4294967295
 8006442:	bd38      	pop	{r3, r4, r5, pc}
 8006444:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006446:	b112      	cbz	r2, 800644e <_raise_r+0x1e>
 8006448:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800644c:	b94b      	cbnz	r3, 8006462 <_raise_r+0x32>
 800644e:	4628      	mov	r0, r5
 8006450:	f000 f830 	bl	80064b4 <_getpid_r>
 8006454:	4622      	mov	r2, r4
 8006456:	4601      	mov	r1, r0
 8006458:	4628      	mov	r0, r5
 800645a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800645e:	f000 b817 	b.w	8006490 <_kill_r>
 8006462:	2b01      	cmp	r3, #1
 8006464:	d00a      	beq.n	800647c <_raise_r+0x4c>
 8006466:	1c59      	adds	r1, r3, #1
 8006468:	d103      	bne.n	8006472 <_raise_r+0x42>
 800646a:	2316      	movs	r3, #22
 800646c:	6003      	str	r3, [r0, #0]
 800646e:	2001      	movs	r0, #1
 8006470:	e7e7      	b.n	8006442 <_raise_r+0x12>
 8006472:	2100      	movs	r1, #0
 8006474:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006478:	4620      	mov	r0, r4
 800647a:	4798      	blx	r3
 800647c:	2000      	movs	r0, #0
 800647e:	e7e0      	b.n	8006442 <_raise_r+0x12>

08006480 <raise>:
 8006480:	4b02      	ldr	r3, [pc, #8]	@ (800648c <raise+0xc>)
 8006482:	4601      	mov	r1, r0
 8006484:	6818      	ldr	r0, [r3, #0]
 8006486:	f7ff bfd3 	b.w	8006430 <_raise_r>
 800648a:	bf00      	nop
 800648c:	2000001c 	.word	0x2000001c

08006490 <_kill_r>:
 8006490:	b538      	push	{r3, r4, r5, lr}
 8006492:	4d07      	ldr	r5, [pc, #28]	@ (80064b0 <_kill_r+0x20>)
 8006494:	2300      	movs	r3, #0
 8006496:	4604      	mov	r4, r0
 8006498:	4608      	mov	r0, r1
 800649a:	4611      	mov	r1, r2
 800649c:	602b      	str	r3, [r5, #0]
 800649e:	f7fa ff7b 	bl	8001398 <_kill>
 80064a2:	1c43      	adds	r3, r0, #1
 80064a4:	d102      	bne.n	80064ac <_kill_r+0x1c>
 80064a6:	682b      	ldr	r3, [r5, #0]
 80064a8:	b103      	cbz	r3, 80064ac <_kill_r+0x1c>
 80064aa:	6023      	str	r3, [r4, #0]
 80064ac:	bd38      	pop	{r3, r4, r5, pc}
 80064ae:	bf00      	nop
 80064b0:	200003d8 	.word	0x200003d8

080064b4 <_getpid_r>:
 80064b4:	f7fa bf68 	b.w	8001388 <_getpid>

080064b8 <__swhatbuf_r>:
 80064b8:	b570      	push	{r4, r5, r6, lr}
 80064ba:	460c      	mov	r4, r1
 80064bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064c0:	2900      	cmp	r1, #0
 80064c2:	b096      	sub	sp, #88	@ 0x58
 80064c4:	4615      	mov	r5, r2
 80064c6:	461e      	mov	r6, r3
 80064c8:	da0d      	bge.n	80064e6 <__swhatbuf_r+0x2e>
 80064ca:	89a3      	ldrh	r3, [r4, #12]
 80064cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80064d0:	f04f 0100 	mov.w	r1, #0
 80064d4:	bf14      	ite	ne
 80064d6:	2340      	movne	r3, #64	@ 0x40
 80064d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80064dc:	2000      	movs	r0, #0
 80064de:	6031      	str	r1, [r6, #0]
 80064e0:	602b      	str	r3, [r5, #0]
 80064e2:	b016      	add	sp, #88	@ 0x58
 80064e4:	bd70      	pop	{r4, r5, r6, pc}
 80064e6:	466a      	mov	r2, sp
 80064e8:	f000 f848 	bl	800657c <_fstat_r>
 80064ec:	2800      	cmp	r0, #0
 80064ee:	dbec      	blt.n	80064ca <__swhatbuf_r+0x12>
 80064f0:	9901      	ldr	r1, [sp, #4]
 80064f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80064f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80064fa:	4259      	negs	r1, r3
 80064fc:	4159      	adcs	r1, r3
 80064fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006502:	e7eb      	b.n	80064dc <__swhatbuf_r+0x24>

08006504 <__smakebuf_r>:
 8006504:	898b      	ldrh	r3, [r1, #12]
 8006506:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006508:	079d      	lsls	r5, r3, #30
 800650a:	4606      	mov	r6, r0
 800650c:	460c      	mov	r4, r1
 800650e:	d507      	bpl.n	8006520 <__smakebuf_r+0x1c>
 8006510:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006514:	6023      	str	r3, [r4, #0]
 8006516:	6123      	str	r3, [r4, #16]
 8006518:	2301      	movs	r3, #1
 800651a:	6163      	str	r3, [r4, #20]
 800651c:	b003      	add	sp, #12
 800651e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006520:	ab01      	add	r3, sp, #4
 8006522:	466a      	mov	r2, sp
 8006524:	f7ff ffc8 	bl	80064b8 <__swhatbuf_r>
 8006528:	9f00      	ldr	r7, [sp, #0]
 800652a:	4605      	mov	r5, r0
 800652c:	4639      	mov	r1, r7
 800652e:	4630      	mov	r0, r6
 8006530:	f7ff faba 	bl	8005aa8 <_malloc_r>
 8006534:	b948      	cbnz	r0, 800654a <__smakebuf_r+0x46>
 8006536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800653a:	059a      	lsls	r2, r3, #22
 800653c:	d4ee      	bmi.n	800651c <__smakebuf_r+0x18>
 800653e:	f023 0303 	bic.w	r3, r3, #3
 8006542:	f043 0302 	orr.w	r3, r3, #2
 8006546:	81a3      	strh	r3, [r4, #12]
 8006548:	e7e2      	b.n	8006510 <__smakebuf_r+0xc>
 800654a:	89a3      	ldrh	r3, [r4, #12]
 800654c:	6020      	str	r0, [r4, #0]
 800654e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006552:	81a3      	strh	r3, [r4, #12]
 8006554:	9b01      	ldr	r3, [sp, #4]
 8006556:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800655a:	b15b      	cbz	r3, 8006574 <__smakebuf_r+0x70>
 800655c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006560:	4630      	mov	r0, r6
 8006562:	f000 f81d 	bl	80065a0 <_isatty_r>
 8006566:	b128      	cbz	r0, 8006574 <__smakebuf_r+0x70>
 8006568:	89a3      	ldrh	r3, [r4, #12]
 800656a:	f023 0303 	bic.w	r3, r3, #3
 800656e:	f043 0301 	orr.w	r3, r3, #1
 8006572:	81a3      	strh	r3, [r4, #12]
 8006574:	89a3      	ldrh	r3, [r4, #12]
 8006576:	431d      	orrs	r5, r3
 8006578:	81a5      	strh	r5, [r4, #12]
 800657a:	e7cf      	b.n	800651c <__smakebuf_r+0x18>

0800657c <_fstat_r>:
 800657c:	b538      	push	{r3, r4, r5, lr}
 800657e:	4d07      	ldr	r5, [pc, #28]	@ (800659c <_fstat_r+0x20>)
 8006580:	2300      	movs	r3, #0
 8006582:	4604      	mov	r4, r0
 8006584:	4608      	mov	r0, r1
 8006586:	4611      	mov	r1, r2
 8006588:	602b      	str	r3, [r5, #0]
 800658a:	f7fa ff65 	bl	8001458 <_fstat>
 800658e:	1c43      	adds	r3, r0, #1
 8006590:	d102      	bne.n	8006598 <_fstat_r+0x1c>
 8006592:	682b      	ldr	r3, [r5, #0]
 8006594:	b103      	cbz	r3, 8006598 <_fstat_r+0x1c>
 8006596:	6023      	str	r3, [r4, #0]
 8006598:	bd38      	pop	{r3, r4, r5, pc}
 800659a:	bf00      	nop
 800659c:	200003d8 	.word	0x200003d8

080065a0 <_isatty_r>:
 80065a0:	b538      	push	{r3, r4, r5, lr}
 80065a2:	4d06      	ldr	r5, [pc, #24]	@ (80065bc <_isatty_r+0x1c>)
 80065a4:	2300      	movs	r3, #0
 80065a6:	4604      	mov	r4, r0
 80065a8:	4608      	mov	r0, r1
 80065aa:	602b      	str	r3, [r5, #0]
 80065ac:	f7fa ff64 	bl	8001478 <_isatty>
 80065b0:	1c43      	adds	r3, r0, #1
 80065b2:	d102      	bne.n	80065ba <_isatty_r+0x1a>
 80065b4:	682b      	ldr	r3, [r5, #0]
 80065b6:	b103      	cbz	r3, 80065ba <_isatty_r+0x1a>
 80065b8:	6023      	str	r3, [r4, #0]
 80065ba:	bd38      	pop	{r3, r4, r5, pc}
 80065bc:	200003d8 	.word	0x200003d8

080065c0 <_gettimeofday>:
 80065c0:	4b02      	ldr	r3, [pc, #8]	@ (80065cc <_gettimeofday+0xc>)
 80065c2:	2258      	movs	r2, #88	@ 0x58
 80065c4:	601a      	str	r2, [r3, #0]
 80065c6:	f04f 30ff 	mov.w	r0, #4294967295
 80065ca:	4770      	bx	lr
 80065cc:	200003d8 	.word	0x200003d8

080065d0 <_init>:
 80065d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d2:	bf00      	nop
 80065d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065d6:	bc08      	pop	{r3}
 80065d8:	469e      	mov	lr, r3
 80065da:	4770      	bx	lr

080065dc <_fini>:
 80065dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065de:	bf00      	nop
 80065e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065e2:	bc08      	pop	{r3}
 80065e4:	469e      	mov	lr, r3
 80065e6:	4770      	bx	lr
