
Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006288  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08006418  08006418  00007418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006530  08006530  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006530  08006530  00007530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006538  08006538  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006538  08006538  00007538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800653c  0800653c  0000753c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006540  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  20000068  080065a8  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  080065a8  000083dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa38  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000235e  00000000  00000000  00017ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  00019e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b14  00000000  00000000  0001ac60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ce66  00000000  00000000  0001b774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a35  00000000  00000000  000385da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a828d  00000000  00000000  0004a00f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f229c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044e8  00000000  00000000  000f22e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000f67c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006400 	.word	0x08006400

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006400 	.word	0x08006400

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f000 ff1b 	bl	80010b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f84d 	bl	8000318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 faa1 	bl	80007c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000282:	f000 fa6f 	bl	8000764 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000286:	f000 fa3d 	bl	8000704 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800028a:	f000 f8a5 	bl	80003d8 <MX_TIM1_Init>
  MX_TIM16_Init();
 800028e:	f000 f9bf 	bl	8000610 <MX_TIM16_Init>
  MX_TIM2_Init();
 8000292:	f000 f959 	bl	8000548 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,&receivedChar,1); // uruchomienie obs≈Çugi uart dla bluetooth hc-06
 8000296:	2201      	movs	r2, #1
 8000298:	4918      	ldr	r1, [pc, #96]	@ (80002fc <main+0x8c>)
 800029a:	4819      	ldr	r0, [pc, #100]	@ (8000300 <main+0x90>)
 800029c:	f003 ff5e 	bl	800415c <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start(&htim1);
 80002a0:	4818      	ldr	r0, [pc, #96]	@ (8000304 <main+0x94>)
 80002a2:	f002 fef3 	bl	800308c <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 80002a6:	2200      	movs	r2, #0
 80002a8:	2102      	movs	r1, #2
 80002aa:	4817      	ldr	r0, [pc, #92]	@ (8000308 <main+0x98>)
 80002ac:	f001 fa78 	bl	80017a0 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80002b0:	2100      	movs	r1, #0
 80002b2:	4816      	ldr	r0, [pc, #88]	@ (800030c <main+0x9c>)
 80002b4:	f002 ff8e 	bl	80031d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80002b8:	2100      	movs	r1, #0
 80002ba:	4812      	ldr	r0, [pc, #72]	@ (8000304 <main+0x94>)
 80002bc:	f002 ff8a 	bl	80031d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80002c0:	210c      	movs	r1, #12
 80002c2:	4810      	ldr	r0, [pc, #64]	@ (8000304 <main+0x94>)
 80002c4:	f002 ff86 	bl	80031d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80002c8:	2100      	movs	r1, #0
 80002ca:	4811      	ldr	r0, [pc, #68]	@ (8000310 <main+0xa0>)
 80002cc:	f002 ff82 	bl	80031d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80002d0:	2108      	movs	r1, #8
 80002d2:	480f      	ldr	r0, [pc, #60]	@ (8000310 <main+0xa0>)
 80002d4:	f002 ff7e 	bl	80031d4 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //set_ang(0, 0);

  uint16_t counter=1;
 80002d8:	2301      	movs	r3, #1
 80002da:	80fb      	strh	r3, [r7, #6]
  uint16_t distance;

  /**/
  uint8_t random_number;
  srand(time(NULL));
 80002dc:	2000      	movs	r0, #0
 80002de:	f005 f9c7 	bl	8005670 <time>
 80002e2:	4602      	mov	r2, r0
 80002e4:	460b      	mov	r3, r1
 80002e6:	4613      	mov	r3, r2
 80002e8:	4618      	mov	r0, r3
 80002ea:	f005 f885 	bl	80053f8 <srand>
  while (1)
  {



	  Distance=detectObstacle();
 80002ee:	f000 fb25 	bl	800093c <detectObstacle>
 80002f2:	4603      	mov	r3, r0
 80002f4:	b29a      	uxth	r2, r3
 80002f6:	4b07      	ldr	r3, [pc, #28]	@ (8000314 <main+0xa4>)
 80002f8:	801a      	strh	r2, [r3, #0]
 80002fa:	e7f8      	b.n	80002ee <main+0x7e>
 80002fc:	20000286 	.word	0x20000286
 8000300:	20000168 	.word	0x20000168
 8000304:	20000084 	.word	0x20000084
 8000308:	48000800 	.word	0x48000800
 800030c:	2000011c 	.word	0x2000011c
 8000310:	200000d0 	.word	0x200000d0
 8000314:	20000284 	.word	0x20000284

08000318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b09c      	sub	sp, #112	@ 0x70
 800031c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000322:	2228      	movs	r2, #40	@ 0x28
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f005 f999 	bl	800565e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000330:	2200      	movs	r2, #0
 8000332:	601a      	str	r2, [r3, #0]
 8000334:	605a      	str	r2, [r3, #4]
 8000336:	609a      	str	r2, [r3, #8]
 8000338:	60da      	str	r2, [r3, #12]
 800033a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800033c:	463b      	mov	r3, r7
 800033e:	2234      	movs	r2, #52	@ 0x34
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f005 f98b 	bl	800565e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000348:	2301      	movs	r3, #1
 800034a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800034c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000350:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000352:	2300      	movs	r3, #0
 8000354:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000356:	2301      	movs	r3, #1
 8000358:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035a:	2302      	movs	r3, #2
 800035c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800035e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000362:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000364:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000368:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800036e:	4618      	mov	r0, r3
 8000370:	f001 fa2e 	bl	80017d0 <HAL_RCC_OscConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800037a:	f000 fb97 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800037e:	230f      	movs	r3, #15
 8000380:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000382:	2302      	movs	r3, #2
 8000384:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000386:	2300      	movs	r3, #0
 8000388:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800038a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800038e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000390:	2300      	movs	r3, #0
 8000392:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000394:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000398:	2102      	movs	r1, #2
 800039a:	4618      	mov	r0, r3
 800039c:	f002 fa56 	bl	800284c <HAL_RCC_ClockConfig>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80003a6:	f000 fb81 	bl	8000aac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 80003aa:	4b0a      	ldr	r3, [pc, #40]	@ (80003d4 <SystemClock_Config+0xbc>)
 80003ac:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM16;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80003ae:	2300      	movs	r3, #0
 80003b0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80003b2:	2300      	movs	r3, #0
 80003b4:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80003b6:	2300      	movs	r3, #0
 80003b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ba:	463b      	mov	r3, r7
 80003bc:	4618      	mov	r0, r3
 80003be:	f002 fc7b 	bl	8002cb8 <HAL_RCCEx_PeriphCLKConfig>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80003c8:	f000 fb70 	bl	8000aac <Error_Handler>
  }
}
 80003cc:	bf00      	nop
 80003ce:	3770      	adds	r7, #112	@ 0x70
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	00081001 	.word	0x00081001

080003d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b09a      	sub	sp, #104	@ 0x68
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003de:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ec:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	605a      	str	r2, [r3, #4]
 80003f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003f8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]
 8000404:	60da      	str	r2, [r3, #12]
 8000406:	611a      	str	r2, [r3, #16]
 8000408:	615a      	str	r2, [r3, #20]
 800040a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	222c      	movs	r2, #44	@ 0x2c
 8000410:	2100      	movs	r1, #0
 8000412:	4618      	mov	r0, r3
 8000414:	f005 f923 	bl	800565e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000418:	4b49      	ldr	r3, [pc, #292]	@ (8000540 <MX_TIM1_Init+0x168>)
 800041a:	4a4a      	ldr	r2, [pc, #296]	@ (8000544 <MX_TIM1_Init+0x16c>)
 800041c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800041e:	4b48      	ldr	r3, [pc, #288]	@ (8000540 <MX_TIM1_Init+0x168>)
 8000420:	2247      	movs	r2, #71	@ 0x47
 8000422:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000424:	4b46      	ldr	r3, [pc, #280]	@ (8000540 <MX_TIM1_Init+0x168>)
 8000426:	2200      	movs	r2, #0
 8000428:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800042a:	4b45      	ldr	r3, [pc, #276]	@ (8000540 <MX_TIM1_Init+0x168>)
 800042c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000430:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000432:	4b43      	ldr	r3, [pc, #268]	@ (8000540 <MX_TIM1_Init+0x168>)
 8000434:	2200      	movs	r2, #0
 8000436:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000438:	4b41      	ldr	r3, [pc, #260]	@ (8000540 <MX_TIM1_Init+0x168>)
 800043a:	2200      	movs	r2, #0
 800043c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800043e:	4b40      	ldr	r3, [pc, #256]	@ (8000540 <MX_TIM1_Init+0x168>)
 8000440:	2200      	movs	r2, #0
 8000442:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000444:	483e      	ldr	r0, [pc, #248]	@ (8000540 <MX_TIM1_Init+0x168>)
 8000446:	f002 fdc9 	bl	8002fdc <HAL_TIM_Base_Init>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000450:	f000 fb2c 	bl	8000aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000454:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000458:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800045a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800045e:	4619      	mov	r1, r3
 8000460:	4837      	ldr	r0, [pc, #220]	@ (8000540 <MX_TIM1_Init+0x168>)
 8000462:	f003 f8b1 	bl	80035c8 <HAL_TIM_ConfigClockSource>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800046c:	f000 fb1e 	bl	8000aac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000470:	4833      	ldr	r0, [pc, #204]	@ (8000540 <MX_TIM1_Init+0x168>)
 8000472:	f002 fe57 	bl	8003124 <HAL_TIM_PWM_Init>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800047c:	f000 fb16 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000480:	2300      	movs	r3, #0
 8000482:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000484:	2300      	movs	r3, #0
 8000486:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000488:	2300      	movs	r3, #0
 800048a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800048c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000490:	4619      	mov	r1, r3
 8000492:	482b      	ldr	r0, [pc, #172]	@ (8000540 <MX_TIM1_Init+0x168>)
 8000494:	f003 fd36 	bl	8003f04 <HAL_TIMEx_MasterConfigSynchronization>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800049e:	f000 fb05 	bl	8000aac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004a2:	2360      	movs	r3, #96	@ 0x60
 80004a4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004aa:	2300      	movs	r3, #0
 80004ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004ae:	2300      	movs	r3, #0
 80004b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004b2:	2300      	movs	r3, #0
 80004b4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004b6:	2300      	movs	r3, #0
 80004b8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004ba:	2300      	movs	r3, #0
 80004bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004be:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80004c2:	2200      	movs	r2, #0
 80004c4:	4619      	mov	r1, r3
 80004c6:	481e      	ldr	r0, [pc, #120]	@ (8000540 <MX_TIM1_Init+0x168>)
 80004c8:	f002 ff6a 	bl	80033a0 <HAL_TIM_PWM_ConfigChannel>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80004d2:	f000 faeb 	bl	8000aac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80004da:	220c      	movs	r2, #12
 80004dc:	4619      	mov	r1, r3
 80004de:	4818      	ldr	r0, [pc, #96]	@ (8000540 <MX_TIM1_Init+0x168>)
 80004e0:	f002 ff5e 	bl	80033a0 <HAL_TIM_PWM_ConfigChannel>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80004ea:	f000 fadf 	bl	8000aac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004ee:	2300      	movs	r3, #0
 80004f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004f2:	2300      	movs	r3, #0
 80004f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004fa:	2300      	movs	r3, #0
 80004fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000502:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000506:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800050c:	2300      	movs	r3, #0
 800050e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000510:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000514:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000516:	2300      	movs	r3, #0
 8000518:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800051a:	2300      	movs	r3, #0
 800051c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	4619      	mov	r1, r3
 8000522:	4807      	ldr	r0, [pc, #28]	@ (8000540 <MX_TIM1_Init+0x168>)
 8000524:	f003 fd54 	bl	8003fd0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800052e:	f000 fabd 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000532:	4803      	ldr	r0, [pc, #12]	@ (8000540 <MX_TIM1_Init+0x168>)
 8000534:	f000 fb36 	bl	8000ba4 <HAL_TIM_MspPostInit>

}
 8000538:	bf00      	nop
 800053a:	3768      	adds	r7, #104	@ 0x68
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000084 	.word	0x20000084
 8000544:	40012c00 	.word	0x40012c00

08000548 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b08a      	sub	sp, #40	@ 0x28
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800054e:	f107 031c 	add.w	r3, r7, #28
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800055a:	463b      	mov	r3, r7
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]
 8000568:	615a      	str	r2, [r3, #20]
 800056a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800056c:	4b27      	ldr	r3, [pc, #156]	@ (800060c <MX_TIM2_Init+0xc4>)
 800056e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000572:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000574:	4b25      	ldr	r3, [pc, #148]	@ (800060c <MX_TIM2_Init+0xc4>)
 8000576:	2247      	movs	r2, #71	@ 0x47
 8000578:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800057a:	4b24      	ldr	r3, [pc, #144]	@ (800060c <MX_TIM2_Init+0xc4>)
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000580:	4b22      	ldr	r3, [pc, #136]	@ (800060c <MX_TIM2_Init+0xc4>)
 8000582:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000586:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000588:	4b20      	ldr	r3, [pc, #128]	@ (800060c <MX_TIM2_Init+0xc4>)
 800058a:	2200      	movs	r2, #0
 800058c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800058e:	4b1f      	ldr	r3, [pc, #124]	@ (800060c <MX_TIM2_Init+0xc4>)
 8000590:	2200      	movs	r2, #0
 8000592:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000594:	481d      	ldr	r0, [pc, #116]	@ (800060c <MX_TIM2_Init+0xc4>)
 8000596:	f002 fdc5 	bl	8003124 <HAL_TIM_PWM_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80005a0:	f000 fa84 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005a8:	2300      	movs	r3, #0
 80005aa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005ac:	f107 031c 	add.w	r3, r7, #28
 80005b0:	4619      	mov	r1, r3
 80005b2:	4816      	ldr	r0, [pc, #88]	@ (800060c <MX_TIM2_Init+0xc4>)
 80005b4:	f003 fca6 	bl	8003f04 <HAL_TIMEx_MasterConfigSynchronization>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80005be:	f000 fa75 	bl	8000aac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005c2:	2360      	movs	r3, #96	@ 0x60
 80005c4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005d2:	463b      	mov	r3, r7
 80005d4:	2200      	movs	r2, #0
 80005d6:	4619      	mov	r1, r3
 80005d8:	480c      	ldr	r0, [pc, #48]	@ (800060c <MX_TIM2_Init+0xc4>)
 80005da:	f002 fee1 	bl	80033a0 <HAL_TIM_PWM_ConfigChannel>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80005e4:	f000 fa62 	bl	8000aac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005e8:	463b      	mov	r3, r7
 80005ea:	2208      	movs	r2, #8
 80005ec:	4619      	mov	r1, r3
 80005ee:	4807      	ldr	r0, [pc, #28]	@ (800060c <MX_TIM2_Init+0xc4>)
 80005f0:	f002 fed6 	bl	80033a0 <HAL_TIM_PWM_ConfigChannel>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80005fa:	f000 fa57 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80005fe:	4803      	ldr	r0, [pc, #12]	@ (800060c <MX_TIM2_Init+0xc4>)
 8000600:	f000 fad0 	bl	8000ba4 <HAL_TIM_MspPostInit>

}
 8000604:	bf00      	nop
 8000606:	3728      	adds	r7, #40	@ 0x28
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	200000d0 	.word	0x200000d0

08000610 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b092      	sub	sp, #72	@ 0x48
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000616:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]
 8000626:	615a      	str	r2, [r3, #20]
 8000628:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800062a:	463b      	mov	r3, r7
 800062c:	222c      	movs	r2, #44	@ 0x2c
 800062e:	2100      	movs	r1, #0
 8000630:	4618      	mov	r0, r3
 8000632:	f005 f814 	bl	800565e <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000636:	4b31      	ldr	r3, [pc, #196]	@ (80006fc <MX_TIM16_Init+0xec>)
 8000638:	4a31      	ldr	r2, [pc, #196]	@ (8000700 <MX_TIM16_Init+0xf0>)
 800063a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 71;
 800063c:	4b2f      	ldr	r3, [pc, #188]	@ (80006fc <MX_TIM16_Init+0xec>)
 800063e:	2247      	movs	r2, #71	@ 0x47
 8000640:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000642:	4b2e      	ldr	r3, [pc, #184]	@ (80006fc <MX_TIM16_Init+0xec>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 19999;
 8000648:	4b2c      	ldr	r3, [pc, #176]	@ (80006fc <MX_TIM16_Init+0xec>)
 800064a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800064e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000650:	4b2a      	ldr	r3, [pc, #168]	@ (80006fc <MX_TIM16_Init+0xec>)
 8000652:	2200      	movs	r2, #0
 8000654:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000656:	4b29      	ldr	r3, [pc, #164]	@ (80006fc <MX_TIM16_Init+0xec>)
 8000658:	2200      	movs	r2, #0
 800065a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800065c:	4b27      	ldr	r3, [pc, #156]	@ (80006fc <MX_TIM16_Init+0xec>)
 800065e:	2280      	movs	r2, #128	@ 0x80
 8000660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000662:	4826      	ldr	r0, [pc, #152]	@ (80006fc <MX_TIM16_Init+0xec>)
 8000664:	f002 fcba 	bl	8002fdc <HAL_TIM_Base_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800066e:	f000 fa1d 	bl	8000aac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000672:	4822      	ldr	r0, [pc, #136]	@ (80006fc <MX_TIM16_Init+0xec>)
 8000674:	f002 fd56 	bl	8003124 <HAL_TIM_PWM_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800067e:	f000 fa15 	bl	8000aac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000682:	2360      	movs	r3, #96	@ 0x60
 8000684:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800068a:	2300      	movs	r3, #0
 800068c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800068e:	2300      	movs	r3, #0
 8000690:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000692:	2300      	movs	r3, #0
 8000694:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000696:	2300      	movs	r3, #0
 8000698:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800069a:	2300      	movs	r3, #0
 800069c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800069e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006a2:	2200      	movs	r2, #0
 80006a4:	4619      	mov	r1, r3
 80006a6:	4815      	ldr	r0, [pc, #84]	@ (80006fc <MX_TIM16_Init+0xec>)
 80006a8:	f002 fe7a 	bl	80033a0 <HAL_TIM_PWM_ConfigChannel>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80006b2:	f000 f9fb 	bl	8000aac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006b6:	2300      	movs	r3, #0
 80006b8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006be:	2300      	movs	r3, #0
 80006c0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80006d8:	463b      	mov	r3, r7
 80006da:	4619      	mov	r1, r3
 80006dc:	4807      	ldr	r0, [pc, #28]	@ (80006fc <MX_TIM16_Init+0xec>)
 80006de:	f003 fc77 	bl	8003fd0 <HAL_TIMEx_ConfigBreakDeadTime>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80006e8:	f000 f9e0 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80006ec:	4803      	ldr	r0, [pc, #12]	@ (80006fc <MX_TIM16_Init+0xec>)
 80006ee:	f000 fa59 	bl	8000ba4 <HAL_TIM_MspPostInit>

}
 80006f2:	bf00      	nop
 80006f4:	3748      	adds	r7, #72	@ 0x48
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	2000011c 	.word	0x2000011c
 8000700:	40014400 	.word	0x40014400

08000704 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000708:	4b14      	ldr	r3, [pc, #80]	@ (800075c <MX_USART1_UART_Init+0x58>)
 800070a:	4a15      	ldr	r2, [pc, #84]	@ (8000760 <MX_USART1_UART_Init+0x5c>)
 800070c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800070e:	4b13      	ldr	r3, [pc, #76]	@ (800075c <MX_USART1_UART_Init+0x58>)
 8000710:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000714:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b11      	ldr	r3, [pc, #68]	@ (800075c <MX_USART1_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <MX_USART1_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <MX_USART1_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <MX_USART1_UART_Init+0x58>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	@ (800075c <MX_USART1_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b09      	ldr	r3, [pc, #36]	@ (800075c <MX_USART1_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800073a:	4b08      	ldr	r3, [pc, #32]	@ (800075c <MX_USART1_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000740:	4b06      	ldr	r3, [pc, #24]	@ (800075c <MX_USART1_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	@ (800075c <MX_USART1_UART_Init+0x58>)
 8000748:	f003 fcba 	bl	80040c0 <HAL_UART_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000752:	f000 f9ab 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000168 	.word	0x20000168
 8000760:	40013800 	.word	0x40013800

08000764 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000768:	4b14      	ldr	r3, [pc, #80]	@ (80007bc <MX_USART2_UART_Init+0x58>)
 800076a:	4a15      	ldr	r2, [pc, #84]	@ (80007c0 <MX_USART2_UART_Init+0x5c>)
 800076c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800076e:	4b13      	ldr	r3, [pc, #76]	@ (80007bc <MX_USART2_UART_Init+0x58>)
 8000770:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000774:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_USART2_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800077c:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <MX_USART2_UART_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_USART2_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <MX_USART2_UART_Init+0x58>)
 800078a:	220c      	movs	r2, #12
 800078c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <MX_USART2_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000794:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_USART2_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800079a:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <MX_USART2_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_USART2_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	@ (80007bc <MX_USART2_UART_Init+0x58>)
 80007a8:	f003 fc8a 	bl	80040c0 <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007b2:	f000 f97b 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200001f0 	.word	0x200001f0
 80007c0:	40004400 	.word	0x40004400

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	@ 0x28
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	4b55      	ldr	r3, [pc, #340]	@ (8000930 <MX_GPIO_Init+0x16c>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	4a54      	ldr	r2, [pc, #336]	@ (8000930 <MX_GPIO_Init+0x16c>)
 80007e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80007e4:	6153      	str	r3, [r2, #20]
 80007e6:	4b52      	ldr	r3, [pc, #328]	@ (8000930 <MX_GPIO_Init+0x16c>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007f2:	4b4f      	ldr	r3, [pc, #316]	@ (8000930 <MX_GPIO_Init+0x16c>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	4a4e      	ldr	r2, [pc, #312]	@ (8000930 <MX_GPIO_Init+0x16c>)
 80007f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007fc:	6153      	str	r3, [r2, #20]
 80007fe:	4b4c      	ldr	r3, [pc, #304]	@ (8000930 <MX_GPIO_Init+0x16c>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b49      	ldr	r3, [pc, #292]	@ (8000930 <MX_GPIO_Init+0x16c>)
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	4a48      	ldr	r2, [pc, #288]	@ (8000930 <MX_GPIO_Init+0x16c>)
 8000810:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000814:	6153      	str	r3, [r2, #20]
 8000816:	4b46      	ldr	r3, [pc, #280]	@ (8000930 <MX_GPIO_Init+0x16c>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	4b43      	ldr	r3, [pc, #268]	@ (8000930 <MX_GPIO_Init+0x16c>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	4a42      	ldr	r2, [pc, #264]	@ (8000930 <MX_GPIO_Init+0x16c>)
 8000828:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800082c:	6153      	str	r3, [r2, #20]
 800082e:	4b40      	ldr	r3, [pc, #256]	@ (8000930 <MX_GPIO_Init+0x16c>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TRIGGER_Pin|C_Pin|B_Pin|A_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8000840:	483c      	ldr	r0, [pc, #240]	@ (8000934 <MX_GPIO_Init+0x170>)
 8000842:	f000 ffad 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|E_Pin|D_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	f641 0103 	movw	r1, #6147	@ 0x1803
 800084c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000850:	f000 ffa6 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, G_Pin|F_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 800085a:	4837      	ldr	r0, [pc, #220]	@ (8000938 <MX_GPIO_Init+0x174>)
 800085c:	f000 ffa0 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000860:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000866:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800086a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4619      	mov	r1, r3
 8000876:	482f      	ldr	r0, [pc, #188]	@ (8000934 <MX_GPIO_Init+0x170>)
 8000878:	f000 fe08 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pins : ECHO_Pin DETECT5_Pin DETECT1_Pin DETECT2_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin|DETECT5_Pin|DETECT1_Pin|DETECT2_Pin;
 800087c:	f241 4305 	movw	r3, #5125	@ 0x1405
 8000880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000882:	2300      	movs	r3, #0
 8000884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	4828      	ldr	r0, [pc, #160]	@ (8000934 <MX_GPIO_Init+0x170>)
 8000892:	f000 fdfb 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIGGER_Pin C_Pin B_Pin A_Pin */
  GPIO_InitStruct.Pin = TRIGGER_Pin|C_Pin|B_Pin|A_Pin;
 8000896:	f44f 73b1 	mov.w	r3, #354	@ 0x162
 800089a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089c:	2301      	movs	r3, #1
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	4821      	ldr	r0, [pc, #132]	@ (8000934 <MX_GPIO_Init+0x170>)
 80008b0:	f000 fdec 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin E_Pin D_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|E_Pin|D_Pin;
 80008b4:	f641 0303 	movw	r3, #6147	@ 0x1803
 80008b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d0:	f000 fddc 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pins : ButtonExt_Pin DETECT4_Pin */
  GPIO_InitStruct.Pin = ButtonExt_Pin|DETECT4_Pin;
 80008d4:	2384      	movs	r3, #132	@ 0x84
 80008d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	@ (8000938 <MX_GPIO_Init+0x174>)
 80008e8:	f000 fdd0 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pins : G_Pin F_Pin LD2_Pin */
  GPIO_InitStruct.Pin = G_Pin|F_Pin|LD2_Pin;
 80008ec:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80008f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	480c      	ldr	r0, [pc, #48]	@ (8000938 <MX_GPIO_Init+0x174>)
 8000906:	f000 fdc1 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pin : DETECT3_Pin */
  GPIO_InitStruct.Pin = DETECT3_Pin;
 800090a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800090e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000910:	2300      	movs	r3, #0
 8000912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DETECT3_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000922:	f000 fdb3 	bl	800148c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	@ 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40021000 	.word	0x40021000
 8000934:	48000800 	.word	0x48000800
 8000938:	48000400 	.word	0x48000400

0800093c <detectObstacle>:

/* USER CODE BEGIN 4 */

int detectObstacle(void){
 800093c:	b598      	push	{r3, r4, r7, lr}
 800093e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000940:	2201      	movs	r2, #1
 8000942:	2102      	movs	r1, #2
 8000944:	483a      	ldr	r0, [pc, #232]	@ (8000a30 <detectObstacle+0xf4>)
 8000946:	f000 ff2b 	bl	80017a0 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800094a:	4b3a      	ldr	r3, [pc, #232]	@ (8000a34 <detectObstacle+0xf8>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000952:	bf00      	nop
 8000954:	4b37      	ldr	r3, [pc, #220]	@ (8000a34 <detectObstacle+0xf8>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800095a:	2b09      	cmp	r3, #9
 800095c:	d9fa      	bls.n	8000954 <detectObstacle+0x18>
	HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);  // pull the TRIG p
 800095e:	2200      	movs	r2, #0
 8000960:	2102      	movs	r1, #2
 8000962:	4833      	ldr	r0, [pc, #204]	@ (8000a30 <detectObstacle+0xf4>)
 8000964:	f000 ff1c 	bl	80017a0 <HAL_GPIO_WritePin>
	pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000968:	f000 fbfc 	bl	8001164 <HAL_GetTick>
 800096c:	4603      	mov	r3, r0
 800096e:	4a32      	ldr	r2, [pc, #200]	@ (8000a38 <detectObstacle+0xfc>)
 8000970:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (ECHO_GPIO_Port, ECHO_Pin)) && pMillis + 10 >  HAL_GetTick());
 8000972:	bf00      	nop
 8000974:	2101      	movs	r1, #1
 8000976:	482e      	ldr	r0, [pc, #184]	@ (8000a30 <detectObstacle+0xf4>)
 8000978:	f000 fefa 	bl	8001770 <HAL_GPIO_ReadPin>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d108      	bne.n	8000994 <detectObstacle+0x58>
 8000982:	4b2d      	ldr	r3, [pc, #180]	@ (8000a38 <detectObstacle+0xfc>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f103 040a 	add.w	r4, r3, #10
 800098a:	f000 fbeb 	bl	8001164 <HAL_GetTick>
 800098e:	4603      	mov	r3, r0
 8000990:	429c      	cmp	r4, r3
 8000992:	d8ef      	bhi.n	8000974 <detectObstacle+0x38>
	Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 8000994:	4b27      	ldr	r3, [pc, #156]	@ (8000a34 <detectObstacle+0xf8>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800099a:	4a28      	ldr	r2, [pc, #160]	@ (8000a3c <detectObstacle+0x100>)
 800099c:	6013      	str	r3, [r2, #0]

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 800099e:	f000 fbe1 	bl	8001164 <HAL_GetTick>
 80009a2:	4603      	mov	r3, r0
 80009a4:	4a24      	ldr	r2, [pc, #144]	@ (8000a38 <detectObstacle+0xfc>)
 80009a6:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (ECHO_GPIO_Port, ECHO_Pin)) && pMillis + 50 > HAL_GetTick());
 80009a8:	bf00      	nop
 80009aa:	2101      	movs	r1, #1
 80009ac:	4820      	ldr	r0, [pc, #128]	@ (8000a30 <detectObstacle+0xf4>)
 80009ae:	f000 fedf 	bl	8001770 <HAL_GPIO_ReadPin>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d008      	beq.n	80009ca <detectObstacle+0x8e>
 80009b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a38 <detectObstacle+0xfc>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 80009c0:	f000 fbd0 	bl	8001164 <HAL_GetTick>
 80009c4:	4603      	mov	r3, r0
 80009c6:	429c      	cmp	r4, r3
 80009c8:	d8ef      	bhi.n	80009aa <detectObstacle+0x6e>
	Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 80009ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000a34 <detectObstacle+0xf8>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a40 <detectObstacle+0x104>)
 80009d2:	6013      	str	r3, [r2, #0]

	Distance = (Value2-Value1) /58;
 80009d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a40 <detectObstacle+0x104>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	4b18      	ldr	r3, [pc, #96]	@ (8000a3c <detectObstacle+0x100>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	4a19      	ldr	r2, [pc, #100]	@ (8000a44 <detectObstacle+0x108>)
 80009e0:	fba2 2303 	umull	r2, r3, r2, r3
 80009e4:	095b      	lsrs	r3, r3, #5
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	4b17      	ldr	r3, [pc, #92]	@ (8000a48 <detectObstacle+0x10c>)
 80009ea:	801a      	strh	r2, [r3, #0]
	if(Distance<10){
 80009ec:	4b16      	ldr	r3, [pc, #88]	@ (8000a48 <detectObstacle+0x10c>)
 80009ee:	881b      	ldrh	r3, [r3, #0]
 80009f0:	2b09      	cmp	r3, #9
 80009f2:	d80c      	bhi.n	8000a0e <detectObstacle+0xd2>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80009f4:	2201      	movs	r2, #1
 80009f6:	2101      	movs	r1, #1
 80009f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009fc:	f000 fed0 	bl	80017a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2102      	movs	r1, #2
 8000a04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a08:	f000 feca 	bl	80017a0 <HAL_GPIO_WritePin>
 8000a0c:	e00b      	b.n	8000a26 <detectObstacle+0xea>
	}
	else{
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2101      	movs	r1, #1
 8000a12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a16:	f000 fec3 	bl	80017a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2102      	movs	r1, #2
 8000a1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a22:	f000 febd 	bl	80017a0 <HAL_GPIO_WritePin>
	}
	return Distance;
 8000a26:	4b08      	ldr	r3, [pc, #32]	@ (8000a48 <detectObstacle+0x10c>)
 8000a28:	881b      	ldrh	r3, [r3, #0]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	bd98      	pop	{r3, r4, r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	48000800 	.word	0x48000800
 8000a34:	20000084 	.word	0x20000084
 8000a38:	20000278 	.word	0x20000278
 8000a3c:	2000027c 	.word	0x2000027c
 8000a40:	20000280 	.word	0x20000280
 8000a44:	8d3dcb09 	.word	0x8d3dcb09
 8000a48:	20000284 	.word	0x20000284

08000a4c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // funkcja do obs≈Çugi bt po uart na podstawie przerwania
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a10      	ldr	r2, [pc, #64]	@ (8000a9c <HAL_UART_RxCpltCallback+0x50>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d119      	bne.n	8000a92 <HAL_UART_RxCpltCallback+0x46>
  {
    if(receivedChar=='N')
 8000a5e:	4b10      	ldr	r3, [pc, #64]	@ (8000aa0 <HAL_UART_RxCpltCallback+0x54>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b4e      	cmp	r3, #78	@ 0x4e
 8000a64:	d106      	bne.n	8000a74 <HAL_UART_RxCpltCallback+0x28>
    {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a6c:	480d      	ldr	r0, [pc, #52]	@ (8000aa4 <HAL_UART_RxCpltCallback+0x58>)
 8000a6e:	f000 fe97 	bl	80017a0 <HAL_GPIO_WritePin>
 8000a72:	e009      	b.n	8000a88 <HAL_UART_RxCpltCallback+0x3c>
    }
    else if (receivedChar=='Y')
 8000a74:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa0 <HAL_UART_RxCpltCallback+0x54>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b59      	cmp	r3, #89	@ 0x59
 8000a7a:	d105      	bne.n	8000a88 <HAL_UART_RxCpltCallback+0x3c>
    {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a82:	4808      	ldr	r0, [pc, #32]	@ (8000aa4 <HAL_UART_RxCpltCallback+0x58>)
 8000a84:	f000 fe8c 	bl	80017a0 <HAL_GPIO_WritePin>
    }
    HAL_UART_Receive_IT(&huart1,&receivedChar,1);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	4905      	ldr	r1, [pc, #20]	@ (8000aa0 <HAL_UART_RxCpltCallback+0x54>)
 8000a8c:	4806      	ldr	r0, [pc, #24]	@ (8000aa8 <HAL_UART_RxCpltCallback+0x5c>)
 8000a8e:	f003 fb65 	bl	800415c <HAL_UART_Receive_IT>
    		  	  	    	  motor_stop();
    		  	  	      }
    }
    HAL_UART_Receive_IT(&huart2,&receivedChar,1);
*/
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40013800 	.word	0x40013800
 8000aa0:	20000286 	.word	0x20000286
 8000aa4:	48000400 	.word	0x48000400
 8000aa8:	20000168 	.word	0x20000168

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <Error_Handler+0x8>

08000ab8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <HAL_MspInit+0x44>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8000afc <HAL_MspInit+0x44>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6193      	str	r3, [r2, #24]
 8000aca:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <HAL_MspInit+0x44>)
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <HAL_MspInit+0x44>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	4a08      	ldr	r2, [pc, #32]	@ (8000afc <HAL_MspInit+0x44>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae0:	61d3      	str	r3, [r2, #28]
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <HAL_MspInit+0x44>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aee:	2007      	movs	r0, #7
 8000af0:	f000 fc14 	bl	800131c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40021000 	.word	0x40021000

08000b00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a13      	ldr	r2, [pc, #76]	@ (8000b5c <HAL_TIM_Base_MspInit+0x5c>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d10c      	bne.n	8000b2c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b12:	4b13      	ldr	r3, [pc, #76]	@ (8000b60 <HAL_TIM_Base_MspInit+0x60>)
 8000b14:	699b      	ldr	r3, [r3, #24]
 8000b16:	4a12      	ldr	r2, [pc, #72]	@ (8000b60 <HAL_TIM_Base_MspInit+0x60>)
 8000b18:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b1c:	6193      	str	r3, [r2, #24]
 8000b1e:	4b10      	ldr	r3, [pc, #64]	@ (8000b60 <HAL_TIM_Base_MspInit+0x60>)
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000b2a:	e010      	b.n	8000b4e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a0c      	ldr	r2, [pc, #48]	@ (8000b64 <HAL_TIM_Base_MspInit+0x64>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d10b      	bne.n	8000b4e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000b36:	4b0a      	ldr	r3, [pc, #40]	@ (8000b60 <HAL_TIM_Base_MspInit+0x60>)
 8000b38:	699b      	ldr	r3, [r3, #24]
 8000b3a:	4a09      	ldr	r2, [pc, #36]	@ (8000b60 <HAL_TIM_Base_MspInit+0x60>)
 8000b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b40:	6193      	str	r3, [r2, #24]
 8000b42:	4b07      	ldr	r3, [pc, #28]	@ (8000b60 <HAL_TIM_Base_MspInit+0x60>)
 8000b44:	699b      	ldr	r3, [r3, #24]
 8000b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
}
 8000b4e:	bf00      	nop
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	40012c00 	.word	0x40012c00
 8000b60:	40021000 	.word	0x40021000
 8000b64:	40014400 	.word	0x40014400

08000b68 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b78:	d10b      	bne.n	8000b92 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <HAL_TIM_PWM_MspInit+0x38>)
 8000b7c:	69db      	ldr	r3, [r3, #28]
 8000b7e:	4a08      	ldr	r2, [pc, #32]	@ (8000ba0 <HAL_TIM_PWM_MspInit+0x38>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	61d3      	str	r3, [r2, #28]
 8000b86:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <HAL_TIM_PWM_MspInit+0x38>)
 8000b88:	69db      	ldr	r3, [r3, #28]
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b92:	bf00      	nop
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08c      	sub	sp, #48	@ 0x30
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 031c 	add.w	r3, r7, #28
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a51      	ldr	r2, [pc, #324]	@ (8000d08 <HAL_TIM_MspPostInit+0x164>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d13a      	bne.n	8000c3c <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc6:	4b51      	ldr	r3, [pc, #324]	@ (8000d0c <HAL_TIM_MspPostInit+0x168>)
 8000bc8:	695b      	ldr	r3, [r3, #20]
 8000bca:	4a50      	ldr	r2, [pc, #320]	@ (8000d0c <HAL_TIM_MspPostInit+0x168>)
 8000bcc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000bd0:	6153      	str	r3, [r2, #20]
 8000bd2:	4b4e      	ldr	r3, [pc, #312]	@ (8000d0c <HAL_TIM_MspPostInit+0x168>)
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000bda:	61bb      	str	r3, [r7, #24]
 8000bdc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	4b4b      	ldr	r3, [pc, #300]	@ (8000d0c <HAL_TIM_MspPostInit+0x168>)
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	4a4a      	ldr	r2, [pc, #296]	@ (8000d0c <HAL_TIM_MspPostInit+0x168>)
 8000be4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000be8:	6153      	str	r3, [r2, #20]
 8000bea:	4b48      	ldr	r3, [pc, #288]	@ (8000d0c <HAL_TIM_MspPostInit+0x168>)
 8000bec:	695b      	ldr	r3, [r3, #20]
 8000bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = L2_Pin;
 8000bf6:	2308      	movs	r3, #8
 8000bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000c06:	2302      	movs	r3, #2
 8000c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(L2_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	483f      	ldr	r0, [pc, #252]	@ (8000d10 <HAL_TIM_MspPostInit+0x16c>)
 8000c12:	f000 fc3b 	bl	800148c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = L1_Pin;
 8000c16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000c28:	2306      	movs	r3, #6
 8000c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(L1_GPIO_Port, &GPIO_InitStruct);
 8000c2c:	f107 031c 	add.w	r3, r7, #28
 8000c30:	4619      	mov	r1, r3
 8000c32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c36:	f000 fc29 	bl	800148c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000c3a:	e061      	b.n	8000d00 <HAL_TIM_MspPostInit+0x15c>
  else if(htim->Instance==TIM2)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c44:	d13a      	bne.n	8000cbc <HAL_TIM_MspPostInit+0x118>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	4b31      	ldr	r3, [pc, #196]	@ (8000d0c <HAL_TIM_MspPostInit+0x168>)
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	4a30      	ldr	r2, [pc, #192]	@ (8000d0c <HAL_TIM_MspPostInit+0x168>)
 8000c4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c50:	6153      	str	r3, [r2, #20]
 8000c52:	4b2e      	ldr	r3, [pc, #184]	@ (8000d0c <HAL_TIM_MspPostInit+0x168>)
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d0c <HAL_TIM_MspPostInit+0x168>)
 8000c60:	695b      	ldr	r3, [r3, #20]
 8000c62:	4a2a      	ldr	r2, [pc, #168]	@ (8000d0c <HAL_TIM_MspPostInit+0x168>)
 8000c64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c68:	6153      	str	r3, [r2, #20]
 8000c6a:	4b28      	ldr	r3, [pc, #160]	@ (8000d0c <HAL_TIM_MspPostInit+0x168>)
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = P1_Pin;
 8000c76:	2320      	movs	r3, #32
 8000c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c86:	2301      	movs	r3, #1
 8000c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(P1_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	4619      	mov	r1, r3
 8000c90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c94:	f000 fbfa 	bl	800148c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = P2_Pin;
 8000c98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000caa:	2301      	movs	r3, #1
 8000cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(P2_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4817      	ldr	r0, [pc, #92]	@ (8000d14 <HAL_TIM_MspPostInit+0x170>)
 8000cb6:	f000 fbe9 	bl	800148c <HAL_GPIO_Init>
}
 8000cba:	e021      	b.n	8000d00 <HAL_TIM_MspPostInit+0x15c>
  else if(htim->Instance==TIM16)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a15      	ldr	r2, [pc, #84]	@ (8000d18 <HAL_TIM_MspPostInit+0x174>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d11c      	bne.n	8000d00 <HAL_TIM_MspPostInit+0x15c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc6:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <HAL_TIM_MspPostInit+0x168>)
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	4a10      	ldr	r2, [pc, #64]	@ (8000d0c <HAL_TIM_MspPostInit+0x168>)
 8000ccc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cd0:	6153      	str	r3, [r2, #20]
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <HAL_TIM_MspPostInit+0x168>)
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cde:	2340      	movs	r3, #64	@ 0x40
 8000ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf2:	f107 031c 	add.w	r3, r7, #28
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cfc:	f000 fbc6 	bl	800148c <HAL_GPIO_Init>
}
 8000d00:	bf00      	nop
 8000d02:	3730      	adds	r7, #48	@ 0x30
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40012c00 	.word	0x40012c00
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	48000800 	.word	0x48000800
 8000d14:	48000400 	.word	0x48000400
 8000d18:	40014400 	.word	0x40014400

08000d1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08c      	sub	sp, #48	@ 0x30
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a37      	ldr	r2, [pc, #220]	@ (8000e18 <HAL_UART_MspInit+0xfc>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d132      	bne.n	8000da4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d3e:	4b37      	ldr	r3, [pc, #220]	@ (8000e1c <HAL_UART_MspInit+0x100>)
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	4a36      	ldr	r2, [pc, #216]	@ (8000e1c <HAL_UART_MspInit+0x100>)
 8000d44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d48:	6193      	str	r3, [r2, #24]
 8000d4a:	4b34      	ldr	r3, [pc, #208]	@ (8000e1c <HAL_UART_MspInit+0x100>)
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d52:	61bb      	str	r3, [r7, #24]
 8000d54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	4b31      	ldr	r3, [pc, #196]	@ (8000e1c <HAL_UART_MspInit+0x100>)
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	4a30      	ldr	r2, [pc, #192]	@ (8000e1c <HAL_UART_MspInit+0x100>)
 8000d5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d60:	6153      	str	r3, [r2, #20]
 8000d62:	4b2e      	ldr	r3, [pc, #184]	@ (8000e1c <HAL_UART_MspInit+0x100>)
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d6e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d80:	2307      	movs	r3, #7
 8000d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d8e:	f000 fb7d 	bl	800148c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2100      	movs	r1, #0
 8000d96:	2025      	movs	r0, #37	@ 0x25
 8000d98:	f000 facb 	bl	8001332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d9c:	2025      	movs	r0, #37	@ 0x25
 8000d9e:	f000 fae4 	bl	800136a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000da2:	e035      	b.n	8000e10 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART2)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a1d      	ldr	r2, [pc, #116]	@ (8000e20 <HAL_UART_MspInit+0x104>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d130      	bne.n	8000e10 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dae:	4b1b      	ldr	r3, [pc, #108]	@ (8000e1c <HAL_UART_MspInit+0x100>)
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	4a1a      	ldr	r2, [pc, #104]	@ (8000e1c <HAL_UART_MspInit+0x100>)
 8000db4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000db8:	61d3      	str	r3, [r2, #28]
 8000dba:	4b18      	ldr	r3, [pc, #96]	@ (8000e1c <HAL_UART_MspInit+0x100>)
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	4b15      	ldr	r3, [pc, #84]	@ (8000e1c <HAL_UART_MspInit+0x100>)
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	4a14      	ldr	r2, [pc, #80]	@ (8000e1c <HAL_UART_MspInit+0x100>)
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dd0:	6153      	str	r3, [r2, #20]
 8000dd2:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <HAL_UART_MspInit+0x100>)
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dde:	230c      	movs	r3, #12
 8000de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dee:	2307      	movs	r3, #7
 8000df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dfc:	f000 fb46 	bl	800148c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2100      	movs	r1, #0
 8000e04:	2026      	movs	r0, #38	@ 0x26
 8000e06:	f000 fa94 	bl	8001332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e0a:	2026      	movs	r0, #38	@ 0x26
 8000e0c:	f000 faad 	bl	800136a <HAL_NVIC_EnableIRQ>
}
 8000e10:	bf00      	nop
 8000e12:	3730      	adds	r7, #48	@ 0x30
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40013800 	.word	0x40013800
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	40004400 	.word	0x40004400

08000e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <NMI_Handler+0x4>

08000e2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <HardFault_Handler+0x4>

08000e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <MemManage_Handler+0x4>

08000e3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <BusFault_Handler+0x4>

08000e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <UsageFault_Handler+0x4>

08000e4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e7a:	f000 f95f 	bl	800113c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e88:	4802      	ldr	r0, [pc, #8]	@ (8000e94 <USART1_IRQHandler+0x10>)
 8000e8a:	f003 f9ab 	bl	80041e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000168 	.word	0x20000168

08000e98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e9c:	4802      	ldr	r0, [pc, #8]	@ (8000ea8 <USART2_IRQHandler+0x10>)
 8000e9e:	f003 f9a1 	bl	80041e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200001f0 	.word	0x200001f0

08000eac <_getpid>:
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <_kill>:
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	f004 fc47 	bl	8005758 <__errno>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2216      	movs	r2, #22
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <_exit>:
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff ffe7 	bl	8000ebc <_kill>
 8000eee:	bf00      	nop
 8000ef0:	e7fd      	b.n	8000eee <_exit+0x12>

08000ef2 <_read>:
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	60f8      	str	r0, [r7, #12]
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	e00a      	b.n	8000f1a <_read+0x28>
 8000f04:	f3af 8000 	nop.w
 8000f08:	4601      	mov	r1, r0
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1c5a      	adds	r2, r3, #1
 8000f0e:	60ba      	str	r2, [r7, #8]
 8000f10:	b2ca      	uxtb	r2, r1
 8000f12:	701a      	strb	r2, [r3, #0]
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	3301      	adds	r3, #1
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	dbf0      	blt.n	8000f04 <_read+0x12>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <_write>:
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	e009      	b.n	8000f52 <_write+0x26>
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	1c5a      	adds	r2, r3, #1
 8000f42:	60ba      	str	r2, [r7, #8]
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f3af 8000 	nop.w
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	697a      	ldr	r2, [r7, #20]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	dbf1      	blt.n	8000f3e <_write+0x12>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <_close>:
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f70:	4618      	mov	r0, r3
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <_fstat>:
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	2300      	movs	r3, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <_isatty>:
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <_lseek>:
 8000fb2:	b480      	push	{r7}
 8000fb4:	b085      	sub	sp, #20
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	60f8      	str	r0, [r7, #12]
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <_sbrk>:
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	4a14      	ldr	r2, [pc, #80]	@ (8001028 <_sbrk+0x5c>)
 8000fd6:	4b15      	ldr	r3, [pc, #84]	@ (800102c <_sbrk+0x60>)
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	4b13      	ldr	r3, [pc, #76]	@ (8001030 <_sbrk+0x64>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d102      	bne.n	8000fee <_sbrk+0x22>
 8000fe8:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <_sbrk+0x64>)
 8000fea:	4a12      	ldr	r2, [pc, #72]	@ (8001034 <_sbrk+0x68>)
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	4b10      	ldr	r3, [pc, #64]	@ (8001030 <_sbrk+0x64>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d207      	bcs.n	800100c <_sbrk+0x40>
 8000ffc:	f004 fbac 	bl	8005758 <__errno>
 8001000:	4603      	mov	r3, r0
 8001002:	220c      	movs	r2, #12
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	f04f 33ff 	mov.w	r3, #4294967295
 800100a:	e009      	b.n	8001020 <_sbrk+0x54>
 800100c:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <_sbrk+0x64>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4b07      	ldr	r3, [pc, #28]	@ (8001030 <_sbrk+0x64>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	4a05      	ldr	r2, [pc, #20]	@ (8001030 <_sbrk+0x64>)
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	4618      	mov	r0, r3
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20004000 	.word	0x20004000
 800102c:	00000400 	.word	0x00000400
 8001030:	20000288 	.word	0x20000288
 8001034:	200003e0 	.word	0x200003e0

08001038 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800103c:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <SystemInit+0x20>)
 800103e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001042:	4a05      	ldr	r2, [pc, #20]	@ (8001058 <SystemInit+0x20>)
 8001044:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001048:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <Reset_Handler>:
 800105c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001094 <LoopForever+0x2>
 8001060:	f7ff ffea 	bl	8001038 <SystemInit>
 8001064:	480c      	ldr	r0, [pc, #48]	@ (8001098 <LoopForever+0x6>)
 8001066:	490d      	ldr	r1, [pc, #52]	@ (800109c <LoopForever+0xa>)
 8001068:	4a0d      	ldr	r2, [pc, #52]	@ (80010a0 <LoopForever+0xe>)
 800106a:	2300      	movs	r3, #0
 800106c:	e002      	b.n	8001074 <LoopCopyDataInit>

0800106e <CopyDataInit>:
 800106e:	58d4      	ldr	r4, [r2, r3]
 8001070:	50c4      	str	r4, [r0, r3]
 8001072:	3304      	adds	r3, #4

08001074 <LoopCopyDataInit>:
 8001074:	18c4      	adds	r4, r0, r3
 8001076:	428c      	cmp	r4, r1
 8001078:	d3f9      	bcc.n	800106e <CopyDataInit>
 800107a:	4a0a      	ldr	r2, [pc, #40]	@ (80010a4 <LoopForever+0x12>)
 800107c:	4c0a      	ldr	r4, [pc, #40]	@ (80010a8 <LoopForever+0x16>)
 800107e:	2300      	movs	r3, #0
 8001080:	e001      	b.n	8001086 <LoopFillZerobss>

08001082 <FillZerobss>:
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	3204      	adds	r2, #4

08001086 <LoopFillZerobss>:
 8001086:	42a2      	cmp	r2, r4
 8001088:	d3fb      	bcc.n	8001082 <FillZerobss>
 800108a:	f004 fb6b 	bl	8005764 <__libc_init_array>
 800108e:	f7ff f8ef 	bl	8000270 <main>

08001092 <LoopForever>:
 8001092:	e7fe      	b.n	8001092 <LoopForever>
 8001094:	20004000 	.word	0x20004000
 8001098:	20000000 	.word	0x20000000
 800109c:	20000068 	.word	0x20000068
 80010a0:	08006540 	.word	0x08006540
 80010a4:	20000068 	.word	0x20000068
 80010a8:	200003dc 	.word	0x200003dc

080010ac <ADC1_IRQHandler>:
 80010ac:	e7fe      	b.n	80010ac <ADC1_IRQHandler>
	...

080010b0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b4:	4b08      	ldr	r3, [pc, #32]	@ (80010d8 <HAL_Init+0x28>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a07      	ldr	r2, [pc, #28]	@ (80010d8 <HAL_Init+0x28>)
 80010ba:	f043 0310 	orr.w	r3, r3, #16
 80010be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c0:	2003      	movs	r0, #3
 80010c2:	f000 f92b 	bl	800131c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010c6:	2000      	movs	r0, #0
 80010c8:	f000 f808 	bl	80010dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010cc:	f7ff fcf4 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40022000 	.word	0x40022000

080010dc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e4:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <HAL_InitTick+0x54>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <HAL_InitTick+0x58>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4619      	mov	r1, r3
 80010ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f943 	bl	8001386 <HAL_SYSTICK_Config>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e00e      	b.n	8001128 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b0f      	cmp	r3, #15
 800110e:	d80a      	bhi.n	8001126 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001110:	2200      	movs	r2, #0
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	f000 f90b 	bl	8001332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800111c:	4a06      	ldr	r2, [pc, #24]	@ (8001138 <HAL_InitTick+0x5c>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001122:	2300      	movs	r3, #0
 8001124:	e000      	b.n	8001128 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000000 	.word	0x20000000
 8001134:	20000008 	.word	0x20000008
 8001138:	20000004 	.word	0x20000004

0800113c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001140:	4b06      	ldr	r3, [pc, #24]	@ (800115c <HAL_IncTick+0x20>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <HAL_IncTick+0x24>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4413      	add	r3, r2
 800114c:	4a04      	ldr	r2, [pc, #16]	@ (8001160 <HAL_IncTick+0x24>)
 800114e:	6013      	str	r3, [r2, #0]
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	20000008 	.word	0x20000008
 8001160:	2000028c 	.word	0x2000028c

08001164 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return uwTick;  
 8001168:	4b03      	ldr	r3, [pc, #12]	@ (8001178 <HAL_GetTick+0x14>)
 800116a:	681b      	ldr	r3, [r3, #0]
}
 800116c:	4618      	mov	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	2000028c 	.word	0x2000028c

0800117c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800118c:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001198:	4013      	ands	r3, r2
 800119a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ae:	4a04      	ldr	r2, [pc, #16]	@ (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	60d3      	str	r3, [r2, #12]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c8:	4b04      	ldr	r3, [pc, #16]	@ (80011dc <__NVIC_GetPriorityGrouping+0x18>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	0a1b      	lsrs	r3, r3, #8
 80011ce:	f003 0307 	and.w	r3, r3, #7
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	db0b      	blt.n	800120a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	f003 021f 	and.w	r2, r3, #31
 80011f8:	4907      	ldr	r1, [pc, #28]	@ (8001218 <__NVIC_EnableIRQ+0x38>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	095b      	lsrs	r3, r3, #5
 8001200:	2001      	movs	r0, #1
 8001202:	fa00 f202 	lsl.w	r2, r0, r2
 8001206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000e100 	.word	0xe000e100

0800121c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	db0a      	blt.n	8001246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	490c      	ldr	r1, [pc, #48]	@ (8001268 <__NVIC_SetPriority+0x4c>)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	0112      	lsls	r2, r2, #4
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	440b      	add	r3, r1
 8001240:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001244:	e00a      	b.n	800125c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4908      	ldr	r1, [pc, #32]	@ (800126c <__NVIC_SetPriority+0x50>)
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	3b04      	subs	r3, #4
 8001254:	0112      	lsls	r2, r2, #4
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	440b      	add	r3, r1
 800125a:	761a      	strb	r2, [r3, #24]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000e100 	.word	0xe000e100
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	@ 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f1c3 0307 	rsb	r3, r3, #7
 800128a:	2b04      	cmp	r3, #4
 800128c:	bf28      	it	cs
 800128e:	2304      	movcs	r3, #4
 8001290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3304      	adds	r3, #4
 8001296:	2b06      	cmp	r3, #6
 8001298:	d902      	bls.n	80012a0 <NVIC_EncodePriority+0x30>
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3b03      	subs	r3, #3
 800129e:	e000      	b.n	80012a2 <NVIC_EncodePriority+0x32>
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	f04f 32ff 	mov.w	r2, #4294967295
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43da      	mvns	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	401a      	ands	r2, r3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b8:	f04f 31ff 	mov.w	r1, #4294967295
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	fa01 f303 	lsl.w	r3, r1, r3
 80012c2:	43d9      	mvns	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	4313      	orrs	r3, r2
         );
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3724      	adds	r7, #36	@ 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012e8:	d301      	bcc.n	80012ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00f      	b.n	800130e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001318 <SysTick_Config+0x40>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f6:	210f      	movs	r1, #15
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f7ff ff8e 	bl	800121c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001300:	4b05      	ldr	r3, [pc, #20]	@ (8001318 <SysTick_Config+0x40>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001306:	4b04      	ldr	r3, [pc, #16]	@ (8001318 <SysTick_Config+0x40>)
 8001308:	2207      	movs	r2, #7
 800130a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	e000e010 	.word	0xe000e010

0800131c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff29 	bl	800117c <__NVIC_SetPriorityGrouping>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001344:	f7ff ff3e 	bl	80011c4 <__NVIC_GetPriorityGrouping>
 8001348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	6978      	ldr	r0, [r7, #20]
 8001350:	f7ff ff8e 	bl	8001270 <NVIC_EncodePriority>
 8001354:	4602      	mov	r2, r0
 8001356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff5d 	bl	800121c <__NVIC_SetPriority>
}
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff31 	bl	80011e0 <__NVIC_EnableIRQ>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff ffa2 	bl	80012d8 <SysTick_Config>
 8001394:	4603      	mov	r3, r0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800139e:	b480      	push	{r7}
 80013a0:	b083      	sub	sp, #12
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d008      	beq.n	80013c2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2204      	movs	r2, #4
 80013b4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e020      	b.n	8001404 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 020e 	bic.w	r2, r2, #14
 80013d0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 0201 	bic.w	r2, r2, #1
 80013e0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013ea:	2101      	movs	r1, #1
 80013ec:	fa01 f202 	lsl.w	r2, r1, r2
 80013f0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2201      	movs	r2, #1
 80013f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001418:	2300      	movs	r3, #0
 800141a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001422:	2b02      	cmp	r3, #2
 8001424:	d005      	beq.n	8001432 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2204      	movs	r2, #4
 800142a:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	73fb      	strb	r3, [r7, #15]
 8001430:	e027      	b.n	8001482 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 020e 	bic.w	r2, r2, #14
 8001440:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 0201 	bic.w	r2, r2, #1
 8001450:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800145a:	2101      	movs	r1, #1
 800145c:	fa01 f202 	lsl.w	r2, r1, r2
 8001460:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2201      	movs	r2, #1
 8001466:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	4798      	blx	r3
    } 
  }
  return status;
 8001482:	7bfb      	ldrb	r3, [r7, #15]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800148c:	b480      	push	{r7}
 800148e:	b087      	sub	sp, #28
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800149a:	e14e      	b.n	800173a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	2101      	movs	r1, #1
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	fa01 f303 	lsl.w	r3, r1, r3
 80014a8:	4013      	ands	r3, r2
 80014aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 8140 	beq.w	8001734 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 0303 	and.w	r3, r3, #3
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d005      	beq.n	80014cc <HAL_GPIO_Init+0x40>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d130      	bne.n	800152e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	2203      	movs	r2, #3
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	68da      	ldr	r2, [r3, #12]
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001502:	2201      	movs	r2, #1
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4013      	ands	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	091b      	lsrs	r3, r3, #4
 8001518:	f003 0201 	and.w	r2, r3, #1
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	2b03      	cmp	r3, #3
 8001538:	d017      	beq.n	800156a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	2203      	movs	r2, #3
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4013      	ands	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	689a      	ldr	r2, [r3, #8]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4313      	orrs	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f003 0303 	and.w	r3, r3, #3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d123      	bne.n	80015be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	08da      	lsrs	r2, r3, #3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3208      	adds	r2, #8
 800157e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001582:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	220f      	movs	r2, #15
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4013      	ands	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	691a      	ldr	r2, [r3, #16]
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	f003 0307 	and.w	r3, r3, #7
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	08da      	lsrs	r2, r3, #3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3208      	adds	r2, #8
 80015b8:	6939      	ldr	r1, [r7, #16]
 80015ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	2203      	movs	r2, #3
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 0203 	and.w	r2, r3, #3
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 809a 	beq.w	8001734 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001600:	4b55      	ldr	r3, [pc, #340]	@ (8001758 <HAL_GPIO_Init+0x2cc>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	4a54      	ldr	r2, [pc, #336]	@ (8001758 <HAL_GPIO_Init+0x2cc>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	6193      	str	r3, [r2, #24]
 800160c:	4b52      	ldr	r3, [pc, #328]	@ (8001758 <HAL_GPIO_Init+0x2cc>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001618:	4a50      	ldr	r2, [pc, #320]	@ (800175c <HAL_GPIO_Init+0x2d0>)
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	089b      	lsrs	r3, r3, #2
 800161e:	3302      	adds	r3, #2
 8001620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001624:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	f003 0303 	and.w	r3, r3, #3
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	220f      	movs	r2, #15
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001642:	d013      	beq.n	800166c <HAL_GPIO_Init+0x1e0>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a46      	ldr	r2, [pc, #280]	@ (8001760 <HAL_GPIO_Init+0x2d4>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d00d      	beq.n	8001668 <HAL_GPIO_Init+0x1dc>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a45      	ldr	r2, [pc, #276]	@ (8001764 <HAL_GPIO_Init+0x2d8>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d007      	beq.n	8001664 <HAL_GPIO_Init+0x1d8>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a44      	ldr	r2, [pc, #272]	@ (8001768 <HAL_GPIO_Init+0x2dc>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d101      	bne.n	8001660 <HAL_GPIO_Init+0x1d4>
 800165c:	2303      	movs	r3, #3
 800165e:	e006      	b.n	800166e <HAL_GPIO_Init+0x1e2>
 8001660:	2305      	movs	r3, #5
 8001662:	e004      	b.n	800166e <HAL_GPIO_Init+0x1e2>
 8001664:	2302      	movs	r3, #2
 8001666:	e002      	b.n	800166e <HAL_GPIO_Init+0x1e2>
 8001668:	2301      	movs	r3, #1
 800166a:	e000      	b.n	800166e <HAL_GPIO_Init+0x1e2>
 800166c:	2300      	movs	r3, #0
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	f002 0203 	and.w	r2, r2, #3
 8001674:	0092      	lsls	r2, r2, #2
 8001676:	4093      	lsls	r3, r2
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	4313      	orrs	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800167e:	4937      	ldr	r1, [pc, #220]	@ (800175c <HAL_GPIO_Init+0x2d0>)
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	089b      	lsrs	r3, r3, #2
 8001684:	3302      	adds	r3, #2
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800168c:	4b37      	ldr	r3, [pc, #220]	@ (800176c <HAL_GPIO_Init+0x2e0>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	43db      	mvns	r3, r3
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4013      	ands	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016b0:	4a2e      	ldr	r2, [pc, #184]	@ (800176c <HAL_GPIO_Init+0x2e0>)
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016b6:	4b2d      	ldr	r3, [pc, #180]	@ (800176c <HAL_GPIO_Init+0x2e0>)
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	43db      	mvns	r3, r3
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	4013      	ands	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016da:	4a24      	ldr	r2, [pc, #144]	@ (800176c <HAL_GPIO_Init+0x2e0>)
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016e0:	4b22      	ldr	r3, [pc, #136]	@ (800176c <HAL_GPIO_Init+0x2e0>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	43db      	mvns	r3, r3
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4013      	ands	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d003      	beq.n	8001704 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4313      	orrs	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001704:	4a19      	ldr	r2, [pc, #100]	@ (800176c <HAL_GPIO_Init+0x2e0>)
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800170a:	4b18      	ldr	r3, [pc, #96]	@ (800176c <HAL_GPIO_Init+0x2e0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	43db      	mvns	r3, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800172e:	4a0f      	ldr	r2, [pc, #60]	@ (800176c <HAL_GPIO_Init+0x2e0>)
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	3301      	adds	r3, #1
 8001738:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	fa22 f303 	lsr.w	r3, r2, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	f47f aea9 	bne.w	800149c <HAL_GPIO_Init+0x10>
  }
}
 800174a:	bf00      	nop
 800174c:	bf00      	nop
 800174e:	371c      	adds	r7, #28
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	40021000 	.word	0x40021000
 800175c:	40010000 	.word	0x40010000
 8001760:	48000400 	.word	0x48000400
 8001764:	48000800 	.word	0x48000800
 8001768:	48000c00 	.word	0x48000c00
 800176c:	40010400 	.word	0x40010400

08001770 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	691a      	ldr	r2, [r3, #16]
 8001780:	887b      	ldrh	r3, [r7, #2]
 8001782:	4013      	ands	r3, r2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d002      	beq.n	800178e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001788:	2301      	movs	r3, #1
 800178a:	73fb      	strb	r3, [r7, #15]
 800178c:	e001      	b.n	8001792 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800178e:	2300      	movs	r3, #0
 8001790:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001792:	7bfb      	ldrb	r3, [r7, #15]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	807b      	strh	r3, [r7, #2]
 80017ac:	4613      	mov	r3, r2
 80017ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017b0:	787b      	ldrb	r3, [r7, #1]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017b6:	887a      	ldrh	r2, [r7, #2]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017bc:	e002      	b.n	80017c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017be:	887a      	ldrh	r2, [r7, #2]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017e0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d102      	bne.n	80017f6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	f001 b823 	b.w	800283c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 817d 	beq.w	8001b06 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800180c:	4bbc      	ldr	r3, [pc, #752]	@ (8001b00 <HAL_RCC_OscConfig+0x330>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 030c 	and.w	r3, r3, #12
 8001814:	2b04      	cmp	r3, #4
 8001816:	d00c      	beq.n	8001832 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001818:	4bb9      	ldr	r3, [pc, #740]	@ (8001b00 <HAL_RCC_OscConfig+0x330>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 030c 	and.w	r3, r3, #12
 8001820:	2b08      	cmp	r3, #8
 8001822:	d15c      	bne.n	80018de <HAL_RCC_OscConfig+0x10e>
 8001824:	4bb6      	ldr	r3, [pc, #728]	@ (8001b00 <HAL_RCC_OscConfig+0x330>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800182c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001830:	d155      	bne.n	80018de <HAL_RCC_OscConfig+0x10e>
 8001832:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001836:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800183e:	fa93 f3a3 	rbit	r3, r3
 8001842:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001846:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184a:	fab3 f383 	clz	r3, r3
 800184e:	b2db      	uxtb	r3, r3
 8001850:	095b      	lsrs	r3, r3, #5
 8001852:	b2db      	uxtb	r3, r3
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b01      	cmp	r3, #1
 800185c:	d102      	bne.n	8001864 <HAL_RCC_OscConfig+0x94>
 800185e:	4ba8      	ldr	r3, [pc, #672]	@ (8001b00 <HAL_RCC_OscConfig+0x330>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	e015      	b.n	8001890 <HAL_RCC_OscConfig+0xc0>
 8001864:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001868:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001870:	fa93 f3a3 	rbit	r3, r3
 8001874:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001878:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800187c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001880:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001884:	fa93 f3a3 	rbit	r3, r3
 8001888:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800188c:	4b9c      	ldr	r3, [pc, #624]	@ (8001b00 <HAL_RCC_OscConfig+0x330>)
 800188e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001890:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001894:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001898:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800189c:	fa92 f2a2 	rbit	r2, r2
 80018a0:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80018a4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80018a8:	fab2 f282 	clz	r2, r2
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	f042 0220 	orr.w	r2, r2, #32
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	f002 021f 	and.w	r2, r2, #31
 80018b8:	2101      	movs	r1, #1
 80018ba:	fa01 f202 	lsl.w	r2, r1, r2
 80018be:	4013      	ands	r3, r2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f000 811f 	beq.w	8001b04 <HAL_RCC_OscConfig+0x334>
 80018c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f040 8116 	bne.w	8001b04 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	f000 bfaf 	b.w	800283c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018ee:	d106      	bne.n	80018fe <HAL_RCC_OscConfig+0x12e>
 80018f0:	4b83      	ldr	r3, [pc, #524]	@ (8001b00 <HAL_RCC_OscConfig+0x330>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a82      	ldr	r2, [pc, #520]	@ (8001b00 <HAL_RCC_OscConfig+0x330>)
 80018f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	e036      	b.n	800196c <HAL_RCC_OscConfig+0x19c>
 80018fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001902:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10c      	bne.n	8001928 <HAL_RCC_OscConfig+0x158>
 800190e:	4b7c      	ldr	r3, [pc, #496]	@ (8001b00 <HAL_RCC_OscConfig+0x330>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a7b      	ldr	r2, [pc, #492]	@ (8001b00 <HAL_RCC_OscConfig+0x330>)
 8001914:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	4b79      	ldr	r3, [pc, #484]	@ (8001b00 <HAL_RCC_OscConfig+0x330>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a78      	ldr	r2, [pc, #480]	@ (8001b00 <HAL_RCC_OscConfig+0x330>)
 8001920:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	e021      	b.n	800196c <HAL_RCC_OscConfig+0x19c>
 8001928:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800192c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001938:	d10c      	bne.n	8001954 <HAL_RCC_OscConfig+0x184>
 800193a:	4b71      	ldr	r3, [pc, #452]	@ (8001b00 <HAL_RCC_OscConfig+0x330>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a70      	ldr	r2, [pc, #448]	@ (8001b00 <HAL_RCC_OscConfig+0x330>)
 8001940:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	4b6e      	ldr	r3, [pc, #440]	@ (8001b00 <HAL_RCC_OscConfig+0x330>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a6d      	ldr	r2, [pc, #436]	@ (8001b00 <HAL_RCC_OscConfig+0x330>)
 800194c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	e00b      	b.n	800196c <HAL_RCC_OscConfig+0x19c>
 8001954:	4b6a      	ldr	r3, [pc, #424]	@ (8001b00 <HAL_RCC_OscConfig+0x330>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a69      	ldr	r2, [pc, #420]	@ (8001b00 <HAL_RCC_OscConfig+0x330>)
 800195a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	4b67      	ldr	r3, [pc, #412]	@ (8001b00 <HAL_RCC_OscConfig+0x330>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a66      	ldr	r2, [pc, #408]	@ (8001b00 <HAL_RCC_OscConfig+0x330>)
 8001966:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800196a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800196c:	4b64      	ldr	r3, [pc, #400]	@ (8001b00 <HAL_RCC_OscConfig+0x330>)
 800196e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001970:	f023 020f 	bic.w	r2, r3, #15
 8001974:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001978:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	495f      	ldr	r1, [pc, #380]	@ (8001b00 <HAL_RCC_OscConfig+0x330>)
 8001982:	4313      	orrs	r3, r2
 8001984:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001986:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800198a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d059      	beq.n	8001a4a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001996:	f7ff fbe5 	bl	8001164 <HAL_GetTick>
 800199a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199e:	e00a      	b.n	80019b6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a0:	f7ff fbe0 	bl	8001164 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b64      	cmp	r3, #100	@ 0x64
 80019ae:	d902      	bls.n	80019b6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	f000 bf43 	b.w	800283c <HAL_RCC_OscConfig+0x106c>
 80019b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019ba:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019be:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80019c2:	fa93 f3a3 	rbit	r3, r3
 80019c6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80019ca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ce:	fab3 f383 	clz	r3, r3
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	095b      	lsrs	r3, r3, #5
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d102      	bne.n	80019e8 <HAL_RCC_OscConfig+0x218>
 80019e2:	4b47      	ldr	r3, [pc, #284]	@ (8001b00 <HAL_RCC_OscConfig+0x330>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	e015      	b.n	8001a14 <HAL_RCC_OscConfig+0x244>
 80019e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019ec:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80019f4:	fa93 f3a3 	rbit	r3, r3
 80019f8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80019fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a00:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001a04:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001a08:	fa93 f3a3 	rbit	r3, r3
 8001a0c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001a10:	4b3b      	ldr	r3, [pc, #236]	@ (8001b00 <HAL_RCC_OscConfig+0x330>)
 8001a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a14:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a18:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001a1c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001a20:	fa92 f2a2 	rbit	r2, r2
 8001a24:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001a28:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001a2c:	fab2 f282 	clz	r2, r2
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	f042 0220 	orr.w	r2, r2, #32
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	f002 021f 	and.w	r2, r2, #31
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a42:	4013      	ands	r3, r2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0ab      	beq.n	80019a0 <HAL_RCC_OscConfig+0x1d0>
 8001a48:	e05d      	b.n	8001b06 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4a:	f7ff fb8b 	bl	8001164 <HAL_GetTick>
 8001a4e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a52:	e00a      	b.n	8001a6a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a54:	f7ff fb86 	bl	8001164 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b64      	cmp	r3, #100	@ 0x64
 8001a62:	d902      	bls.n	8001a6a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	f000 bee9 	b.w	800283c <HAL_RCC_OscConfig+0x106c>
 8001a6a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a6e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a72:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001a76:	fa93 f3a3 	rbit	r3, r3
 8001a7a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001a7e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a82:	fab3 f383 	clz	r3, r3
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	095b      	lsrs	r3, r3, #5
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d102      	bne.n	8001a9c <HAL_RCC_OscConfig+0x2cc>
 8001a96:	4b1a      	ldr	r3, [pc, #104]	@ (8001b00 <HAL_RCC_OscConfig+0x330>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	e015      	b.n	8001ac8 <HAL_RCC_OscConfig+0x2f8>
 8001a9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001aa0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001aa8:	fa93 f3a3 	rbit	r3, r3
 8001aac:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001ab0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ab4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001ab8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001abc:	fa93 f3a3 	rbit	r3, r3
 8001ac0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b00 <HAL_RCC_OscConfig+0x330>)
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001acc:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001ad0:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001ad4:	fa92 f2a2 	rbit	r2, r2
 8001ad8:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001adc:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001ae0:	fab2 f282 	clz	r2, r2
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	f042 0220 	orr.w	r2, r2, #32
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	f002 021f 	and.w	r2, r2, #31
 8001af0:	2101      	movs	r1, #1
 8001af2:	fa01 f202 	lsl.w	r2, r1, r2
 8001af6:	4013      	ands	r3, r2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1ab      	bne.n	8001a54 <HAL_RCC_OscConfig+0x284>
 8001afc:	e003      	b.n	8001b06 <HAL_RCC_OscConfig+0x336>
 8001afe:	bf00      	nop
 8001b00:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 817d 	beq.w	8001e16 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b1c:	4ba6      	ldr	r3, [pc, #664]	@ (8001db8 <HAL_RCC_OscConfig+0x5e8>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 030c 	and.w	r3, r3, #12
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00b      	beq.n	8001b40 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b28:	4ba3      	ldr	r3, [pc, #652]	@ (8001db8 <HAL_RCC_OscConfig+0x5e8>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 030c 	and.w	r3, r3, #12
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d172      	bne.n	8001c1a <HAL_RCC_OscConfig+0x44a>
 8001b34:	4ba0      	ldr	r3, [pc, #640]	@ (8001db8 <HAL_RCC_OscConfig+0x5e8>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d16c      	bne.n	8001c1a <HAL_RCC_OscConfig+0x44a>
 8001b40:	2302      	movs	r3, #2
 8001b42:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b46:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001b4a:	fa93 f3a3 	rbit	r3, r3
 8001b4e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001b52:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b56:	fab3 f383 	clz	r3, r3
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	095b      	lsrs	r3, r3, #5
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d102      	bne.n	8001b70 <HAL_RCC_OscConfig+0x3a0>
 8001b6a:	4b93      	ldr	r3, [pc, #588]	@ (8001db8 <HAL_RCC_OscConfig+0x5e8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	e013      	b.n	8001b98 <HAL_RCC_OscConfig+0x3c8>
 8001b70:	2302      	movs	r3, #2
 8001b72:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b76:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001b7a:	fa93 f3a3 	rbit	r3, r3
 8001b7e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001b82:	2302      	movs	r3, #2
 8001b84:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001b88:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001b8c:	fa93 f3a3 	rbit	r3, r3
 8001b90:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001b94:	4b88      	ldr	r3, [pc, #544]	@ (8001db8 <HAL_RCC_OscConfig+0x5e8>)
 8001b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b98:	2202      	movs	r2, #2
 8001b9a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001b9e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001ba2:	fa92 f2a2 	rbit	r2, r2
 8001ba6:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001baa:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001bae:	fab2 f282 	clz	r2, r2
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	f042 0220 	orr.w	r2, r2, #32
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	f002 021f 	and.w	r2, r2, #31
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00a      	beq.n	8001be0 <HAL_RCC_OscConfig+0x410>
 8001bca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d002      	beq.n	8001be0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	f000 be2e 	b.w	800283c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be0:	4b75      	ldr	r3, [pc, #468]	@ (8001db8 <HAL_RCC_OscConfig+0x5e8>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	21f8      	movs	r1, #248	@ 0xf8
 8001bf6:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfa:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001bfe:	fa91 f1a1 	rbit	r1, r1
 8001c02:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001c06:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001c0a:	fab1 f181 	clz	r1, r1
 8001c0e:	b2c9      	uxtb	r1, r1
 8001c10:	408b      	lsls	r3, r1
 8001c12:	4969      	ldr	r1, [pc, #420]	@ (8001db8 <HAL_RCC_OscConfig+0x5e8>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c18:	e0fd      	b.n	8001e16 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 8088 	beq.w	8001d3c <HAL_RCC_OscConfig+0x56c>
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c32:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001c36:	fa93 f3a3 	rbit	r3, r3
 8001c3a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001c3e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c42:	fab3 f383 	clz	r3, r3
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c4c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	461a      	mov	r2, r3
 8001c54:	2301      	movs	r3, #1
 8001c56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c58:	f7ff fa84 	bl	8001164 <HAL_GetTick>
 8001c5c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c60:	e00a      	b.n	8001c78 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c62:	f7ff fa7f 	bl	8001164 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d902      	bls.n	8001c78 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	f000 bde2 	b.w	800283c <HAL_RCC_OscConfig+0x106c>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001c82:	fa93 f3a3 	rbit	r3, r3
 8001c86:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001c8a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8e:	fab3 f383 	clz	r3, r3
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	095b      	lsrs	r3, r3, #5
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d102      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x4d8>
 8001ca2:	4b45      	ldr	r3, [pc, #276]	@ (8001db8 <HAL_RCC_OscConfig+0x5e8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	e013      	b.n	8001cd0 <HAL_RCC_OscConfig+0x500>
 8001ca8:	2302      	movs	r3, #2
 8001caa:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001cb2:	fa93 f3a3 	rbit	r3, r3
 8001cb6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001cba:	2302      	movs	r3, #2
 8001cbc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001cc0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001cc4:	fa93 f3a3 	rbit	r3, r3
 8001cc8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001ccc:	4b3a      	ldr	r3, [pc, #232]	@ (8001db8 <HAL_RCC_OscConfig+0x5e8>)
 8001cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001cd6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001cda:	fa92 f2a2 	rbit	r2, r2
 8001cde:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001ce2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001ce6:	fab2 f282 	clz	r2, r2
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	f042 0220 	orr.w	r2, r2, #32
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	f002 021f 	and.w	r2, r2, #31
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0af      	beq.n	8001c62 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d02:	4b2d      	ldr	r3, [pc, #180]	@ (8001db8 <HAL_RCC_OscConfig+0x5e8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	21f8      	movs	r1, #248	@ 0xf8
 8001d18:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001d20:	fa91 f1a1 	rbit	r1, r1
 8001d24:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001d28:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001d2c:	fab1 f181 	clz	r1, r1
 8001d30:	b2c9      	uxtb	r1, r1
 8001d32:	408b      	lsls	r3, r1
 8001d34:	4920      	ldr	r1, [pc, #128]	@ (8001db8 <HAL_RCC_OscConfig+0x5e8>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]
 8001d3a:	e06c      	b.n	8001e16 <HAL_RCC_OscConfig+0x646>
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d42:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001d46:	fa93 f3a3 	rbit	r3, r3
 8001d4a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001d4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d52:	fab3 f383 	clz	r3, r3
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d5c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	461a      	mov	r2, r3
 8001d64:	2300      	movs	r3, #0
 8001d66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d68:	f7ff f9fc 	bl	8001164 <HAL_GetTick>
 8001d6c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d70:	e00a      	b.n	8001d88 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d72:	f7ff f9f7 	bl	8001164 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d902      	bls.n	8001d88 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	f000 bd5a 	b.w	800283c <HAL_RCC_OscConfig+0x106c>
 8001d88:	2302      	movs	r3, #2
 8001d8a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001d92:	fa93 f3a3 	rbit	r3, r3
 8001d96:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001d9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9e:	fab3 f383 	clz	r3, r3
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	095b      	lsrs	r3, r3, #5
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d104      	bne.n	8001dbc <HAL_RCC_OscConfig+0x5ec>
 8001db2:	4b01      	ldr	r3, [pc, #4]	@ (8001db8 <HAL_RCC_OscConfig+0x5e8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	e015      	b.n	8001de4 <HAL_RCC_OscConfig+0x614>
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001dce:	2302      	movs	r3, #2
 8001dd0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001dd4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001dd8:	fa93 f3a3 	rbit	r3, r3
 8001ddc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001de0:	4bc8      	ldr	r3, [pc, #800]	@ (8002104 <HAL_RCC_OscConfig+0x934>)
 8001de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de4:	2202      	movs	r2, #2
 8001de6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001dea:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001dee:	fa92 f2a2 	rbit	r2, r2
 8001df2:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001df6:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001dfa:	fab2 f282 	clz	r2, r2
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	f042 0220 	orr.w	r2, r2, #32
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	f002 021f 	and.w	r2, r2, #31
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e10:	4013      	ands	r3, r2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1ad      	bne.n	8001d72 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 8110 	beq.w	800204c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d079      	beq.n	8001f30 <HAL_RCC_OscConfig+0x760>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001e46:	fa93 f3a3 	rbit	r3, r3
 8001e4a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e52:	fab3 f383 	clz	r3, r3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4bab      	ldr	r3, [pc, #684]	@ (8002108 <HAL_RCC_OscConfig+0x938>)
 8001e5c:	4413      	add	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	461a      	mov	r2, r3
 8001e62:	2301      	movs	r3, #1
 8001e64:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e66:	f7ff f97d 	bl	8001164 <HAL_GetTick>
 8001e6a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e6e:	e00a      	b.n	8001e86 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e70:	f7ff f978 	bl	8001164 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d902      	bls.n	8001e86 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	f000 bcdb 	b.w	800283c <HAL_RCC_OscConfig+0x106c>
 8001e86:	2302      	movs	r3, #2
 8001e88:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001e90:	fa93 f3a3 	rbit	r3, r3
 8001e94:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001e98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e9c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	fa93 f2a3 	rbit	r2, r3
 8001eb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ecc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	fa93 f2a3 	rbit	r2, r3
 8001ed6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eda:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ede:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee0:	4b88      	ldr	r3, [pc, #544]	@ (8002104 <HAL_RCC_OscConfig+0x934>)
 8001ee2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ee4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001eec:	2102      	movs	r1, #2
 8001eee:	6019      	str	r1, [r3, #0]
 8001ef0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	fa93 f1a3 	rbit	r1, r3
 8001efe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f02:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f06:	6019      	str	r1, [r3, #0]
  return result;
 8001f08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f0c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	fab3 f383 	clz	r3, r3
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	f003 031f 	and.w	r3, r3, #31
 8001f22:	2101      	movs	r1, #1
 8001f24:	fa01 f303 	lsl.w	r3, r1, r3
 8001f28:	4013      	ands	r3, r2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0a0      	beq.n	8001e70 <HAL_RCC_OscConfig+0x6a0>
 8001f2e:	e08d      	b.n	800204c <HAL_RCC_OscConfig+0x87c>
 8001f30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f34:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001f38:	2201      	movs	r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f40:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	fa93 f2a3 	rbit	r2, r3
 8001f4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f4e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001f52:	601a      	str	r2, [r3, #0]
  return result;
 8001f54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f58:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001f5c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f5e:	fab3 f383 	clz	r3, r3
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	461a      	mov	r2, r3
 8001f66:	4b68      	ldr	r3, [pc, #416]	@ (8002108 <HAL_RCC_OscConfig+0x938>)
 8001f68:	4413      	add	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	2300      	movs	r3, #0
 8001f70:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f72:	f7ff f8f7 	bl	8001164 <HAL_GetTick>
 8001f76:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f7a:	e00a      	b.n	8001f92 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f7c:	f7ff f8f2 	bl	8001164 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d902      	bls.n	8001f92 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	f000 bc55 	b.w	800283c <HAL_RCC_OscConfig+0x106c>
 8001f92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f96:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fa2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	fa93 f2a3 	rbit	r2, r3
 8001fac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	fa93 f2a3 	rbit	r2, r3
 8001fd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fde:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fea:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	fa93 f2a3 	rbit	r2, r3
 8001ff4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ff8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001ffc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ffe:	4b41      	ldr	r3, [pc, #260]	@ (8002104 <HAL_RCC_OscConfig+0x934>)
 8002000:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002002:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002006:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800200a:	2102      	movs	r1, #2
 800200c:	6019      	str	r1, [r3, #0]
 800200e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002012:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	fa93 f1a3 	rbit	r1, r3
 800201c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002020:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002024:	6019      	str	r1, [r3, #0]
  return result;
 8002026:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800202a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	fab3 f383 	clz	r3, r3
 8002034:	b2db      	uxtb	r3, r3
 8002036:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800203a:	b2db      	uxtb	r3, r3
 800203c:	f003 031f 	and.w	r3, r3, #31
 8002040:	2101      	movs	r1, #1
 8002042:	fa01 f303 	lsl.w	r3, r1, r3
 8002046:	4013      	ands	r3, r2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d197      	bne.n	8001f7c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800204c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002050:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 81a1 	beq.w	80023a4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002062:	2300      	movs	r3, #0
 8002064:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002068:	4b26      	ldr	r3, [pc, #152]	@ (8002104 <HAL_RCC_OscConfig+0x934>)
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d116      	bne.n	80020a2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002074:	4b23      	ldr	r3, [pc, #140]	@ (8002104 <HAL_RCC_OscConfig+0x934>)
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	4a22      	ldr	r2, [pc, #136]	@ (8002104 <HAL_RCC_OscConfig+0x934>)
 800207a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800207e:	61d3      	str	r3, [r2, #28]
 8002080:	4b20      	ldr	r3, [pc, #128]	@ (8002104 <HAL_RCC_OscConfig+0x934>)
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002088:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800208c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002096:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800209a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800209c:	2301      	movs	r3, #1
 800209e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a2:	4b1a      	ldr	r3, [pc, #104]	@ (800210c <HAL_RCC_OscConfig+0x93c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d11a      	bne.n	80020e4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ae:	4b17      	ldr	r3, [pc, #92]	@ (800210c <HAL_RCC_OscConfig+0x93c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a16      	ldr	r2, [pc, #88]	@ (800210c <HAL_RCC_OscConfig+0x93c>)
 80020b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ba:	f7ff f853 	bl	8001164 <HAL_GetTick>
 80020be:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c2:	e009      	b.n	80020d8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c4:	f7ff f84e 	bl	8001164 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b64      	cmp	r3, #100	@ 0x64
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e3b1      	b.n	800283c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d8:	4b0c      	ldr	r3, [pc, #48]	@ (800210c <HAL_RCC_OscConfig+0x93c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0ef      	beq.n	80020c4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d10d      	bne.n	8002110 <HAL_RCC_OscConfig+0x940>
 80020f4:	4b03      	ldr	r3, [pc, #12]	@ (8002104 <HAL_RCC_OscConfig+0x934>)
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	4a02      	ldr	r2, [pc, #8]	@ (8002104 <HAL_RCC_OscConfig+0x934>)
 80020fa:	f043 0301 	orr.w	r3, r3, #1
 80020fe:	6213      	str	r3, [r2, #32]
 8002100:	e03c      	b.n	800217c <HAL_RCC_OscConfig+0x9ac>
 8002102:	bf00      	nop
 8002104:	40021000 	.word	0x40021000
 8002108:	10908120 	.word	0x10908120
 800210c:	40007000 	.word	0x40007000
 8002110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002114:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10c      	bne.n	800213a <HAL_RCC_OscConfig+0x96a>
 8002120:	4bc1      	ldr	r3, [pc, #772]	@ (8002428 <HAL_RCC_OscConfig+0xc58>)
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	4ac0      	ldr	r2, [pc, #768]	@ (8002428 <HAL_RCC_OscConfig+0xc58>)
 8002126:	f023 0301 	bic.w	r3, r3, #1
 800212a:	6213      	str	r3, [r2, #32]
 800212c:	4bbe      	ldr	r3, [pc, #760]	@ (8002428 <HAL_RCC_OscConfig+0xc58>)
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	4abd      	ldr	r2, [pc, #756]	@ (8002428 <HAL_RCC_OscConfig+0xc58>)
 8002132:	f023 0304 	bic.w	r3, r3, #4
 8002136:	6213      	str	r3, [r2, #32]
 8002138:	e020      	b.n	800217c <HAL_RCC_OscConfig+0x9ac>
 800213a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800213e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	2b05      	cmp	r3, #5
 8002148:	d10c      	bne.n	8002164 <HAL_RCC_OscConfig+0x994>
 800214a:	4bb7      	ldr	r3, [pc, #732]	@ (8002428 <HAL_RCC_OscConfig+0xc58>)
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	4ab6      	ldr	r2, [pc, #728]	@ (8002428 <HAL_RCC_OscConfig+0xc58>)
 8002150:	f043 0304 	orr.w	r3, r3, #4
 8002154:	6213      	str	r3, [r2, #32]
 8002156:	4bb4      	ldr	r3, [pc, #720]	@ (8002428 <HAL_RCC_OscConfig+0xc58>)
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	4ab3      	ldr	r2, [pc, #716]	@ (8002428 <HAL_RCC_OscConfig+0xc58>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	6213      	str	r3, [r2, #32]
 8002162:	e00b      	b.n	800217c <HAL_RCC_OscConfig+0x9ac>
 8002164:	4bb0      	ldr	r3, [pc, #704]	@ (8002428 <HAL_RCC_OscConfig+0xc58>)
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	4aaf      	ldr	r2, [pc, #700]	@ (8002428 <HAL_RCC_OscConfig+0xc58>)
 800216a:	f023 0301 	bic.w	r3, r3, #1
 800216e:	6213      	str	r3, [r2, #32]
 8002170:	4bad      	ldr	r3, [pc, #692]	@ (8002428 <HAL_RCC_OscConfig+0xc58>)
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	4aac      	ldr	r2, [pc, #688]	@ (8002428 <HAL_RCC_OscConfig+0xc58>)
 8002176:	f023 0304 	bic.w	r3, r3, #4
 800217a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800217c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002180:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 8081 	beq.w	8002290 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218e:	f7fe ffe9 	bl	8001164 <HAL_GetTick>
 8002192:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002196:	e00b      	b.n	80021b0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002198:	f7fe ffe4 	bl	8001164 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e345      	b.n	800283c <HAL_RCC_OscConfig+0x106c>
 80021b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80021b8:	2202      	movs	r2, #2
 80021ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	fa93 f2a3 	rbit	r2, r3
 80021ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ce:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80021dc:	2202      	movs	r2, #2
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	fa93 f2a3 	rbit	r2, r3
 80021ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80021f6:	601a      	str	r2, [r3, #0]
  return result;
 80021f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021fc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002200:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	095b      	lsrs	r3, r3, #5
 800220a:	b2db      	uxtb	r3, r3
 800220c:	f043 0302 	orr.w	r3, r3, #2
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d102      	bne.n	800221c <HAL_RCC_OscConfig+0xa4c>
 8002216:	4b84      	ldr	r3, [pc, #528]	@ (8002428 <HAL_RCC_OscConfig+0xc58>)
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	e013      	b.n	8002244 <HAL_RCC_OscConfig+0xa74>
 800221c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002220:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002224:	2202      	movs	r2, #2
 8002226:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800222c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	fa93 f2a3 	rbit	r2, r3
 8002236:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800223a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	4b79      	ldr	r3, [pc, #484]	@ (8002428 <HAL_RCC_OscConfig+0xc58>)
 8002242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002244:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002248:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800224c:	2102      	movs	r1, #2
 800224e:	6011      	str	r1, [r2, #0]
 8002250:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002254:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002258:	6812      	ldr	r2, [r2, #0]
 800225a:	fa92 f1a2 	rbit	r1, r2
 800225e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002262:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002266:	6011      	str	r1, [r2, #0]
  return result;
 8002268:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800226c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002270:	6812      	ldr	r2, [r2, #0]
 8002272:	fab2 f282 	clz	r2, r2
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	f002 021f 	and.w	r2, r2, #31
 8002282:	2101      	movs	r1, #1
 8002284:	fa01 f202 	lsl.w	r2, r1, r2
 8002288:	4013      	ands	r3, r2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d084      	beq.n	8002198 <HAL_RCC_OscConfig+0x9c8>
 800228e:	e07f      	b.n	8002390 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002290:	f7fe ff68 	bl	8001164 <HAL_GetTick>
 8002294:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002298:	e00b      	b.n	80022b2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800229a:	f7fe ff63 	bl	8001164 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e2c4      	b.n	800283c <HAL_RCC_OscConfig+0x106c>
 80022b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80022ba:	2202      	movs	r2, #2
 80022bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	fa93 f2a3 	rbit	r2, r3
 80022cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022da:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80022de:	2202      	movs	r2, #2
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	fa93 f2a3 	rbit	r2, r3
 80022f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80022f8:	601a      	str	r2, [r3, #0]
  return result;
 80022fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fe:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002302:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002304:	fab3 f383 	clz	r3, r3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	b2db      	uxtb	r3, r3
 800230e:	f043 0302 	orr.w	r3, r3, #2
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d102      	bne.n	800231e <HAL_RCC_OscConfig+0xb4e>
 8002318:	4b43      	ldr	r3, [pc, #268]	@ (8002428 <HAL_RCC_OscConfig+0xc58>)
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	e013      	b.n	8002346 <HAL_RCC_OscConfig+0xb76>
 800231e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002322:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002326:	2202      	movs	r2, #2
 8002328:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800232e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	fa93 f2a3 	rbit	r2, r3
 8002338:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800233c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	4b39      	ldr	r3, [pc, #228]	@ (8002428 <HAL_RCC_OscConfig+0xc58>)
 8002344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002346:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800234a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800234e:	2102      	movs	r1, #2
 8002350:	6011      	str	r1, [r2, #0]
 8002352:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002356:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800235a:	6812      	ldr	r2, [r2, #0]
 800235c:	fa92 f1a2 	rbit	r1, r2
 8002360:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002364:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002368:	6011      	str	r1, [r2, #0]
  return result;
 800236a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800236e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	fab2 f282 	clz	r2, r2
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	f002 021f 	and.w	r2, r2, #31
 8002384:	2101      	movs	r1, #1
 8002386:	fa01 f202 	lsl.w	r2, r1, r2
 800238a:	4013      	ands	r3, r2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d184      	bne.n	800229a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002390:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002394:	2b01      	cmp	r3, #1
 8002396:	d105      	bne.n	80023a4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002398:	4b23      	ldr	r3, [pc, #140]	@ (8002428 <HAL_RCC_OscConfig+0xc58>)
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	4a22      	ldr	r2, [pc, #136]	@ (8002428 <HAL_RCC_OscConfig+0xc58>)
 800239e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023a2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	69db      	ldr	r3, [r3, #28]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 8242 	beq.w	800283a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002428 <HAL_RCC_OscConfig+0xc58>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 030c 	and.w	r3, r3, #12
 80023be:	2b08      	cmp	r3, #8
 80023c0:	f000 8213 	beq.w	80027ea <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	69db      	ldr	r3, [r3, #28]
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	f040 8162 	bne.w	800269a <HAL_RCC_OscConfig+0xeca>
 80023d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023da:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80023de:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80023e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	fa93 f2a3 	rbit	r2, r3
 80023f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80023fa:	601a      	str	r2, [r3, #0]
  return result;
 80023fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002400:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002404:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002406:	fab3 f383 	clz	r3, r3
 800240a:	b2db      	uxtb	r3, r3
 800240c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002410:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	461a      	mov	r2, r3
 8002418:	2300      	movs	r3, #0
 800241a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241c:	f7fe fea2 	bl	8001164 <HAL_GetTick>
 8002420:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002424:	e00c      	b.n	8002440 <HAL_RCC_OscConfig+0xc70>
 8002426:	bf00      	nop
 8002428:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800242c:	f7fe fe9a 	bl	8001164 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e1fd      	b.n	800283c <HAL_RCC_OscConfig+0x106c>
 8002440:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002444:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002448:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800244c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002452:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	fa93 f2a3 	rbit	r2, r3
 800245c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002460:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002464:	601a      	str	r2, [r3, #0]
  return result;
 8002466:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800246a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800246e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002470:	fab3 f383 	clz	r3, r3
 8002474:	b2db      	uxtb	r3, r3
 8002476:	095b      	lsrs	r3, r3, #5
 8002478:	b2db      	uxtb	r3, r3
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b01      	cmp	r3, #1
 8002482:	d102      	bne.n	800248a <HAL_RCC_OscConfig+0xcba>
 8002484:	4bb0      	ldr	r3, [pc, #704]	@ (8002748 <HAL_RCC_OscConfig+0xf78>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	e027      	b.n	80024da <HAL_RCC_OscConfig+0xd0a>
 800248a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800248e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002492:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002496:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002498:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800249c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	fa93 f2a3 	rbit	r2, r3
 80024a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024aa:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80024b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	fa93 f2a3 	rbit	r2, r3
 80024cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	4b9c      	ldr	r3, [pc, #624]	@ (8002748 <HAL_RCC_OscConfig+0xf78>)
 80024d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024de:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80024e2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80024e6:	6011      	str	r1, [r2, #0]
 80024e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024ec:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80024f0:	6812      	ldr	r2, [r2, #0]
 80024f2:	fa92 f1a2 	rbit	r1, r2
 80024f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024fa:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80024fe:	6011      	str	r1, [r2, #0]
  return result;
 8002500:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002504:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002508:	6812      	ldr	r2, [r2, #0]
 800250a:	fab2 f282 	clz	r2, r2
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	f042 0220 	orr.w	r2, r2, #32
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	f002 021f 	and.w	r2, r2, #31
 800251a:	2101      	movs	r1, #1
 800251c:	fa01 f202 	lsl.w	r2, r1, r2
 8002520:	4013      	ands	r3, r2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d182      	bne.n	800242c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002526:	4b88      	ldr	r3, [pc, #544]	@ (8002748 <HAL_RCC_OscConfig+0xf78>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800252e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002532:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800253a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800253e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	430b      	orrs	r3, r1
 8002548:	497f      	ldr	r1, [pc, #508]	@ (8002748 <HAL_RCC_OscConfig+0xf78>)
 800254a:	4313      	orrs	r3, r2
 800254c:	604b      	str	r3, [r1, #4]
 800254e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002552:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002556:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800255a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002560:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	fa93 f2a3 	rbit	r2, r3
 800256a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800256e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002572:	601a      	str	r2, [r3, #0]
  return result;
 8002574:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002578:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800257c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800257e:	fab3 f383 	clz	r3, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002588:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	461a      	mov	r2, r3
 8002590:	2301      	movs	r3, #1
 8002592:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7fe fde6 	bl	8001164 <HAL_GetTick>
 8002598:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800259c:	e009      	b.n	80025b2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259e:	f7fe fde1 	bl	8001164 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e144      	b.n	800283c <HAL_RCC_OscConfig+0x106c>
 80025b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80025ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	fa93 f2a3 	rbit	r2, r3
 80025ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80025d6:	601a      	str	r2, [r3, #0]
  return result;
 80025d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025dc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80025e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025e2:	fab3 f383 	clz	r3, r3
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	095b      	lsrs	r3, r3, #5
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d102      	bne.n	80025fc <HAL_RCC_OscConfig+0xe2c>
 80025f6:	4b54      	ldr	r3, [pc, #336]	@ (8002748 <HAL_RCC_OscConfig+0xf78>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	e027      	b.n	800264c <HAL_RCC_OscConfig+0xe7c>
 80025fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002600:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002604:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002608:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800260e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	fa93 f2a3 	rbit	r2, r3
 8002618:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800261c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002626:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800262a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002634:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	fa93 f2a3 	rbit	r2, r3
 800263e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002642:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	4b3f      	ldr	r3, [pc, #252]	@ (8002748 <HAL_RCC_OscConfig+0xf78>)
 800264a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002650:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002654:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002658:	6011      	str	r1, [r2, #0]
 800265a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800265e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002662:	6812      	ldr	r2, [r2, #0]
 8002664:	fa92 f1a2 	rbit	r1, r2
 8002668:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800266c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002670:	6011      	str	r1, [r2, #0]
  return result;
 8002672:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002676:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	fab2 f282 	clz	r2, r2
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	f042 0220 	orr.w	r2, r2, #32
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	f002 021f 	and.w	r2, r2, #31
 800268c:	2101      	movs	r1, #1
 800268e:	fa01 f202 	lsl.w	r2, r1, r2
 8002692:	4013      	ands	r3, r2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d082      	beq.n	800259e <HAL_RCC_OscConfig+0xdce>
 8002698:	e0cf      	b.n	800283a <HAL_RCC_OscConfig+0x106a>
 800269a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800269e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80026a2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80026a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ac:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	fa93 f2a3 	rbit	r2, r3
 80026b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ba:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80026be:	601a      	str	r2, [r3, #0]
  return result;
 80026c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80026c8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ca:	fab3 f383 	clz	r3, r3
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80026d4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	461a      	mov	r2, r3
 80026dc:	2300      	movs	r3, #0
 80026de:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e0:	f7fe fd40 	bl	8001164 <HAL_GetTick>
 80026e4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026e8:	e009      	b.n	80026fe <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ea:	f7fe fd3b 	bl	8001164 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e09e      	b.n	800283c <HAL_RCC_OscConfig+0x106c>
 80026fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002702:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002706:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800270a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002710:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	fa93 f2a3 	rbit	r2, r3
 800271a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800271e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002722:	601a      	str	r2, [r3, #0]
  return result;
 8002724:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002728:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800272c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800272e:	fab3 f383 	clz	r3, r3
 8002732:	b2db      	uxtb	r3, r3
 8002734:	095b      	lsrs	r3, r3, #5
 8002736:	b2db      	uxtb	r3, r3
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b01      	cmp	r3, #1
 8002740:	d104      	bne.n	800274c <HAL_RCC_OscConfig+0xf7c>
 8002742:	4b01      	ldr	r3, [pc, #4]	@ (8002748 <HAL_RCC_OscConfig+0xf78>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	e029      	b.n	800279c <HAL_RCC_OscConfig+0xfcc>
 8002748:	40021000 	.word	0x40021000
 800274c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002750:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002754:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002758:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800275e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	fa93 f2a3 	rbit	r2, r3
 8002768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800276c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002776:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800277a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002784:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	fa93 f2a3 	rbit	r2, r3
 800278e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002792:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	4b2b      	ldr	r3, [pc, #172]	@ (8002848 <HAL_RCC_OscConfig+0x1078>)
 800279a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027a0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80027a4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80027a8:	6011      	str	r1, [r2, #0]
 80027aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027ae:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80027b2:	6812      	ldr	r2, [r2, #0]
 80027b4:	fa92 f1a2 	rbit	r1, r2
 80027b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027bc:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80027c0:	6011      	str	r1, [r2, #0]
  return result;
 80027c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027c6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	fab2 f282 	clz	r2, r2
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	f042 0220 	orr.w	r2, r2, #32
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	f002 021f 	and.w	r2, r2, #31
 80027dc:	2101      	movs	r1, #1
 80027de:	fa01 f202 	lsl.w	r2, r1, r2
 80027e2:	4013      	ands	r3, r2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d180      	bne.n	80026ea <HAL_RCC_OscConfig+0xf1a>
 80027e8:	e027      	b.n	800283a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d101      	bne.n	80027fe <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e01e      	b.n	800283c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027fe:	4b12      	ldr	r3, [pc, #72]	@ (8002848 <HAL_RCC_OscConfig+0x1078>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002806:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800280a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800280e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002812:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	429a      	cmp	r2, r3
 800281c:	d10b      	bne.n	8002836 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800281e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002822:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002826:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800282a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002832:	429a      	cmp	r2, r3
 8002834:	d001      	beq.n	800283a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b09e      	sub	sp, #120	@ 0x78
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002856:	2300      	movs	r3, #0
 8002858:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e162      	b.n	8002b2a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002864:	4b90      	ldr	r3, [pc, #576]	@ (8002aa8 <HAL_RCC_ClockConfig+0x25c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d910      	bls.n	8002894 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002872:	4b8d      	ldr	r3, [pc, #564]	@ (8002aa8 <HAL_RCC_ClockConfig+0x25c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f023 0207 	bic.w	r2, r3, #7
 800287a:	498b      	ldr	r1, [pc, #556]	@ (8002aa8 <HAL_RCC_ClockConfig+0x25c>)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	4313      	orrs	r3, r2
 8002880:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002882:	4b89      	ldr	r3, [pc, #548]	@ (8002aa8 <HAL_RCC_ClockConfig+0x25c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	429a      	cmp	r2, r3
 800288e:	d001      	beq.n	8002894 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e14a      	b.n	8002b2a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d008      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a0:	4b82      	ldr	r3, [pc, #520]	@ (8002aac <HAL_RCC_ClockConfig+0x260>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	497f      	ldr	r1, [pc, #508]	@ (8002aac <HAL_RCC_ClockConfig+0x260>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 80dc 	beq.w	8002a78 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d13c      	bne.n	8002942 <HAL_RCC_ClockConfig+0xf6>
 80028c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028cc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028d0:	fa93 f3a3 	rbit	r3, r3
 80028d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80028d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d8:	fab3 f383 	clz	r3, r3
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	095b      	lsrs	r3, r3, #5
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d102      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xa6>
 80028ec:	4b6f      	ldr	r3, [pc, #444]	@ (8002aac <HAL_RCC_ClockConfig+0x260>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	e00f      	b.n	8002912 <HAL_RCC_ClockConfig+0xc6>
 80028f2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028f6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028fa:	fa93 f3a3 	rbit	r3, r3
 80028fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8002900:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002904:	663b      	str	r3, [r7, #96]	@ 0x60
 8002906:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002908:	fa93 f3a3 	rbit	r3, r3
 800290c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800290e:	4b67      	ldr	r3, [pc, #412]	@ (8002aac <HAL_RCC_ClockConfig+0x260>)
 8002910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002912:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002916:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002918:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800291a:	fa92 f2a2 	rbit	r2, r2
 800291e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002920:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002922:	fab2 f282 	clz	r2, r2
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	f042 0220 	orr.w	r2, r2, #32
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	f002 021f 	and.w	r2, r2, #31
 8002932:	2101      	movs	r1, #1
 8002934:	fa01 f202 	lsl.w	r2, r1, r2
 8002938:	4013      	ands	r3, r2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d17b      	bne.n	8002a36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e0f3      	b.n	8002b2a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d13c      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x178>
 800294a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800294e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002952:	fa93 f3a3 	rbit	r3, r3
 8002956:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002958:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800295a:	fab3 f383 	clz	r3, r3
 800295e:	b2db      	uxtb	r3, r3
 8002960:	095b      	lsrs	r3, r3, #5
 8002962:	b2db      	uxtb	r3, r3
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b01      	cmp	r3, #1
 800296c:	d102      	bne.n	8002974 <HAL_RCC_ClockConfig+0x128>
 800296e:	4b4f      	ldr	r3, [pc, #316]	@ (8002aac <HAL_RCC_ClockConfig+0x260>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	e00f      	b.n	8002994 <HAL_RCC_ClockConfig+0x148>
 8002974:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002978:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800297c:	fa93 f3a3 	rbit	r3, r3
 8002980:	647b      	str	r3, [r7, #68]	@ 0x44
 8002982:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002986:	643b      	str	r3, [r7, #64]	@ 0x40
 8002988:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800298a:	fa93 f3a3 	rbit	r3, r3
 800298e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002990:	4b46      	ldr	r3, [pc, #280]	@ (8002aac <HAL_RCC_ClockConfig+0x260>)
 8002992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002994:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002998:	63ba      	str	r2, [r7, #56]	@ 0x38
 800299a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800299c:	fa92 f2a2 	rbit	r2, r2
 80029a0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80029a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80029a4:	fab2 f282 	clz	r2, r2
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	f042 0220 	orr.w	r2, r2, #32
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	f002 021f 	and.w	r2, r2, #31
 80029b4:	2101      	movs	r1, #1
 80029b6:	fa01 f202 	lsl.w	r2, r1, r2
 80029ba:	4013      	ands	r3, r2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d13a      	bne.n	8002a36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0b2      	b.n	8002b2a <HAL_RCC_ClockConfig+0x2de>
 80029c4:	2302      	movs	r3, #2
 80029c6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ca:	fa93 f3a3 	rbit	r3, r3
 80029ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80029d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d2:	fab3 f383 	clz	r3, r3
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	095b      	lsrs	r3, r3, #5
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d102      	bne.n	80029ec <HAL_RCC_ClockConfig+0x1a0>
 80029e6:	4b31      	ldr	r3, [pc, #196]	@ (8002aac <HAL_RCC_ClockConfig+0x260>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	e00d      	b.n	8002a08 <HAL_RCC_ClockConfig+0x1bc>
 80029ec:	2302      	movs	r3, #2
 80029ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f2:	fa93 f3a3 	rbit	r3, r3
 80029f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80029f8:	2302      	movs	r3, #2
 80029fa:	623b      	str	r3, [r7, #32]
 80029fc:	6a3b      	ldr	r3, [r7, #32]
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	61fb      	str	r3, [r7, #28]
 8002a04:	4b29      	ldr	r3, [pc, #164]	@ (8002aac <HAL_RCC_ClockConfig+0x260>)
 8002a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a08:	2202      	movs	r2, #2
 8002a0a:	61ba      	str	r2, [r7, #24]
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	fa92 f2a2 	rbit	r2, r2
 8002a12:	617a      	str	r2, [r7, #20]
  return result;
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	fab2 f282 	clz	r2, r2
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	f042 0220 	orr.w	r2, r2, #32
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	f002 021f 	and.w	r2, r2, #31
 8002a26:	2101      	movs	r1, #1
 8002a28:	fa01 f202 	lsl.w	r2, r1, r2
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e079      	b.n	8002b2a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a36:	4b1d      	ldr	r3, [pc, #116]	@ (8002aac <HAL_RCC_ClockConfig+0x260>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f023 0203 	bic.w	r2, r3, #3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	491a      	ldr	r1, [pc, #104]	@ (8002aac <HAL_RCC_ClockConfig+0x260>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a48:	f7fe fb8c 	bl	8001164 <HAL_GetTick>
 8002a4c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4e:	e00a      	b.n	8002a66 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a50:	f7fe fb88 	bl	8001164 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e061      	b.n	8002b2a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a66:	4b11      	ldr	r3, [pc, #68]	@ (8002aac <HAL_RCC_ClockConfig+0x260>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f003 020c 	and.w	r2, r3, #12
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d1eb      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a78:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa8 <HAL_RCC_ClockConfig+0x25c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d214      	bcs.n	8002ab0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a86:	4b08      	ldr	r3, [pc, #32]	@ (8002aa8 <HAL_RCC_ClockConfig+0x25c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 0207 	bic.w	r2, r3, #7
 8002a8e:	4906      	ldr	r1, [pc, #24]	@ (8002aa8 <HAL_RCC_ClockConfig+0x25c>)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a96:	4b04      	ldr	r3, [pc, #16]	@ (8002aa8 <HAL_RCC_ClockConfig+0x25c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d005      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e040      	b.n	8002b2a <HAL_RCC_ClockConfig+0x2de>
 8002aa8:	40022000 	.word	0x40022000
 8002aac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d008      	beq.n	8002ace <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002abc:	4b1d      	ldr	r3, [pc, #116]	@ (8002b34 <HAL_RCC_ClockConfig+0x2e8>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	491a      	ldr	r1, [pc, #104]	@ (8002b34 <HAL_RCC_ClockConfig+0x2e8>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d009      	beq.n	8002aee <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ada:	4b16      	ldr	r3, [pc, #88]	@ (8002b34 <HAL_RCC_ClockConfig+0x2e8>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4912      	ldr	r1, [pc, #72]	@ (8002b34 <HAL_RCC_ClockConfig+0x2e8>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002aee:	f000 f829 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 8002af2:	4601      	mov	r1, r0
 8002af4:	4b0f      	ldr	r3, [pc, #60]	@ (8002b34 <HAL_RCC_ClockConfig+0x2e8>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002afc:	22f0      	movs	r2, #240	@ 0xf0
 8002afe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	fa92 f2a2 	rbit	r2, r2
 8002b06:	60fa      	str	r2, [r7, #12]
  return result;
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	fab2 f282 	clz	r2, r2
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	40d3      	lsrs	r3, r2
 8002b12:	4a09      	ldr	r2, [pc, #36]	@ (8002b38 <HAL_RCC_ClockConfig+0x2ec>)
 8002b14:	5cd3      	ldrb	r3, [r2, r3]
 8002b16:	fa21 f303 	lsr.w	r3, r1, r3
 8002b1a:	4a08      	ldr	r2, [pc, #32]	@ (8002b3c <HAL_RCC_ClockConfig+0x2f0>)
 8002b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002b1e:	4b08      	ldr	r3, [pc, #32]	@ (8002b40 <HAL_RCC_ClockConfig+0x2f4>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fe fada 	bl	80010dc <HAL_InitTick>
  
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3778      	adds	r7, #120	@ 0x78
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40021000 	.word	0x40021000
 8002b38:	08006418 	.word	0x08006418
 8002b3c:	20000000 	.word	0x20000000
 8002b40:	20000004 	.word	0x20000004

08002b44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b08b      	sub	sp, #44	@ 0x2c
 8002b48:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61bb      	str	r3, [r7, #24]
 8002b52:	2300      	movs	r3, #0
 8002b54:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b56:	2300      	movs	r3, #0
 8002b58:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002b5e:	4b29      	ldr	r3, [pc, #164]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	f003 030c 	and.w	r3, r3, #12
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d002      	beq.n	8002b74 <HAL_RCC_GetSysClockFreq+0x30>
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d003      	beq.n	8002b7a <HAL_RCC_GetSysClockFreq+0x36>
 8002b72:	e03c      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b74:	4b24      	ldr	r3, [pc, #144]	@ (8002c08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b76:	623b      	str	r3, [r7, #32]
      break;
 8002b78:	e03c      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002b80:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002b84:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	fa92 f2a2 	rbit	r2, r2
 8002b8c:	607a      	str	r2, [r7, #4]
  return result;
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	fab2 f282 	clz	r2, r2
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	40d3      	lsrs	r3, r2
 8002b98:	4a1c      	ldr	r2, [pc, #112]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b9a:	5cd3      	ldrb	r3, [r2, r3]
 8002b9c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002b9e:	4b19      	ldr	r3, [pc, #100]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	220f      	movs	r2, #15
 8002ba8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	fa92 f2a2 	rbit	r2, r2
 8002bb0:	60fa      	str	r2, [r7, #12]
  return result;
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	fab2 f282 	clz	r2, r2
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	40d3      	lsrs	r3, r2
 8002bbc:	4a14      	ldr	r2, [pc, #80]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002bbe:	5cd3      	ldrb	r3, [r2, r3]
 8002bc0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d008      	beq.n	8002bde <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002bcc:	4a0e      	ldr	r2, [pc, #56]	@ (8002c08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	fb02 f303 	mul.w	r3, r2, r3
 8002bda:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bdc:	e004      	b.n	8002be8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	4a0c      	ldr	r2, [pc, #48]	@ (8002c14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002be2:	fb02 f303 	mul.w	r3, r2, r3
 8002be6:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bea:	623b      	str	r3, [r7, #32]
      break;
 8002bec:	e002      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bee:	4b06      	ldr	r3, [pc, #24]	@ (8002c08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bf0:	623b      	str	r3, [r7, #32]
      break;
 8002bf2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	372c      	adds	r7, #44	@ 0x2c
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	40021000 	.word	0x40021000
 8002c08:	007a1200 	.word	0x007a1200
 8002c0c:	08006430 	.word	0x08006430
 8002c10:	08006440 	.word	0x08006440
 8002c14:	003d0900 	.word	0x003d0900

08002c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c1c:	4b03      	ldr	r3, [pc, #12]	@ (8002c2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	20000000 	.word	0x20000000

08002c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002c36:	f7ff ffef 	bl	8002c18 <HAL_RCC_GetHCLKFreq>
 8002c3a:	4601      	mov	r1, r0
 8002c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c6c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c44:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002c48:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	fa92 f2a2 	rbit	r2, r2
 8002c50:	603a      	str	r2, [r7, #0]
  return result;
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	fab2 f282 	clz	r2, r2
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	40d3      	lsrs	r3, r2
 8002c5c:	4a04      	ldr	r2, [pc, #16]	@ (8002c70 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002c5e:	5cd3      	ldrb	r3, [r2, r3]
 8002c60:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002c64:	4618      	mov	r0, r3
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	08006428 	.word	0x08006428

08002c74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002c7a:	f7ff ffcd 	bl	8002c18 <HAL_RCC_GetHCLKFreq>
 8002c7e:	4601      	mov	r1, r0
 8002c80:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002c88:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002c8c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	fa92 f2a2 	rbit	r2, r2
 8002c94:	603a      	str	r2, [r7, #0]
  return result;
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	fab2 f282 	clz	r2, r2
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	40d3      	lsrs	r3, r2
 8002ca0:	4a04      	ldr	r2, [pc, #16]	@ (8002cb4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002ca2:	5cd3      	ldrb	r3, [r2, r3]
 8002ca4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	08006428 	.word	0x08006428

08002cb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b092      	sub	sp, #72	@ 0x48
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 80d4 	beq.w	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cdc:	4b4e      	ldr	r3, [pc, #312]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cde:	69db      	ldr	r3, [r3, #28]
 8002ce0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10e      	bne.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce8:	4b4b      	ldr	r3, [pc, #300]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	4a4a      	ldr	r2, [pc, #296]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cf2:	61d3      	str	r3, [r2, #28]
 8002cf4:	4b48      	ldr	r3, [pc, #288]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d00:	2301      	movs	r3, #1
 8002d02:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d06:	4b45      	ldr	r3, [pc, #276]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d118      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d12:	4b42      	ldr	r3, [pc, #264]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a41      	ldr	r2, [pc, #260]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d1c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d1e:	f7fe fa21 	bl	8001164 <HAL_GetTick>
 8002d22:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d24:	e008      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d26:	f7fe fa1d 	bl	8001164 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b64      	cmp	r3, #100	@ 0x64
 8002d32:	d901      	bls.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e14b      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d38:	4b38      	ldr	r3, [pc, #224]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0f0      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d44:	4b34      	ldr	r3, [pc, #208]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 8084 	beq.w	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d5e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d07c      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d64:	4b2c      	ldr	r3, [pc, #176]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d6e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d72:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d7e:	fab3 f383 	clz	r3, r3
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	461a      	mov	r2, r3
 8002d86:	4b26      	ldr	r3, [pc, #152]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d88:	4413      	add	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	2301      	movs	r3, #1
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d9a:	fa93 f3a3 	rbit	r3, r3
 8002d9e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002da2:	fab3 f383 	clz	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	461a      	mov	r2, r3
 8002daa:	4b1d      	ldr	r3, [pc, #116]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002dac:	4413      	add	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	461a      	mov	r2, r3
 8002db2:	2300      	movs	r3, #0
 8002db4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002db6:	4a18      	ldr	r2, [pc, #96]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dba:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002dbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d04b      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc6:	f7fe f9cd 	bl	8001164 <HAL_GetTick>
 8002dca:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dcc:	e00a      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dce:	f7fe f9c9 	bl	8001164 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e0f5      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002de4:	2302      	movs	r3, #2
 8002de6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dea:	fa93 f3a3 	rbit	r3, r3
 8002dee:	627b      	str	r3, [r7, #36]	@ 0x24
 8002df0:	2302      	movs	r3, #2
 8002df2:	623b      	str	r3, [r7, #32]
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	fa93 f3a3 	rbit	r3, r3
 8002dfa:	61fb      	str	r3, [r7, #28]
  return result;
 8002dfc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dfe:	fab3 f383 	clz	r3, r3
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	095b      	lsrs	r3, r3, #5
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	f043 0302 	orr.w	r3, r3, #2
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d108      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002e12:	4b01      	ldr	r3, [pc, #4]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	e00d      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	40007000 	.word	0x40007000
 8002e20:	10908100 	.word	0x10908100
 8002e24:	2302      	movs	r3, #2
 8002e26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	fa93 f3a3 	rbit	r3, r3
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	4b69      	ldr	r3, [pc, #420]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e34:	2202      	movs	r2, #2
 8002e36:	613a      	str	r2, [r7, #16]
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	fa92 f2a2 	rbit	r2, r2
 8002e3e:	60fa      	str	r2, [r7, #12]
  return result;
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	fab2 f282 	clz	r2, r2
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	f002 021f 	and.w	r2, r2, #31
 8002e52:	2101      	movs	r1, #1
 8002e54:	fa01 f202 	lsl.w	r2, r1, r2
 8002e58:	4013      	ands	r3, r2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0b7      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002e5e:	4b5e      	ldr	r3, [pc, #376]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	495b      	ldr	r1, [pc, #364]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e70:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d105      	bne.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e78:	4b57      	ldr	r3, [pc, #348]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	4a56      	ldr	r2, [pc, #344]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d008      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e90:	4b51      	ldr	r3, [pc, #324]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e94:	f023 0203 	bic.w	r2, r3, #3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	494e      	ldr	r1, [pc, #312]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0320 	and.w	r3, r3, #32
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d008      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eae:	4b4a      	ldr	r3, [pc, #296]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb2:	f023 0210 	bic.w	r2, r3, #16
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	4947      	ldr	r1, [pc, #284]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d008      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002ecc:	4b42      	ldr	r3, [pc, #264]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed8:	493f      	ldr	r1, [pc, #252]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d008      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002eea:	4b3b      	ldr	r3, [pc, #236]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eee:	f023 0220 	bic.w	r2, r3, #32
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	4938      	ldr	r1, [pc, #224]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d008      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f08:	4b33      	ldr	r3, [pc, #204]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	4930      	ldr	r1, [pc, #192]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d008      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f26:	4b2c      	ldr	r3, [pc, #176]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	4929      	ldr	r1, [pc, #164]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d008      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002f44:	4b24      	ldr	r3, [pc, #144]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f48:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	4921      	ldr	r1, [pc, #132]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d008      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f62:	4b1d      	ldr	r3, [pc, #116]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f66:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	491a      	ldr	r1, [pc, #104]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d008      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002f80:	4b15      	ldr	r3, [pc, #84]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f84:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8c:	4912      	ldr	r1, [pc, #72]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d008      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002faa:	490b      	ldr	r1, [pc, #44]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d008      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002fbc:	4b06      	ldr	r3, [pc, #24]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc8:	4903      	ldr	r1, [pc, #12]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3748      	adds	r7, #72	@ 0x48
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40021000 	.word	0x40021000

08002fdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e049      	b.n	8003082 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d106      	bne.n	8003008 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7fd fd7c 	bl	8000b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3304      	adds	r3, #4
 8003018:	4619      	mov	r1, r3
 800301a:	4610      	mov	r0, r2
 800301c:	f000 fb9e 	bl	800375c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b01      	cmp	r3, #1
 800309e:	d001      	beq.n	80030a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e033      	b.n	800310c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a19      	ldr	r2, [pc, #100]	@ (8003118 <HAL_TIM_Base_Start+0x8c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d009      	beq.n	80030ca <HAL_TIM_Base_Start+0x3e>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030be:	d004      	beq.n	80030ca <HAL_TIM_Base_Start+0x3e>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a15      	ldr	r2, [pc, #84]	@ (800311c <HAL_TIM_Base_Start+0x90>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d115      	bne.n	80030f6 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	4b13      	ldr	r3, [pc, #76]	@ (8003120 <HAL_TIM_Base_Start+0x94>)
 80030d2:	4013      	ands	r3, r2
 80030d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2b06      	cmp	r3, #6
 80030da:	d015      	beq.n	8003108 <HAL_TIM_Base_Start+0x7c>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030e2:	d011      	beq.n	8003108 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0201 	orr.w	r2, r2, #1
 80030f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f4:	e008      	b.n	8003108 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f042 0201 	orr.w	r2, r2, #1
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	e000      	b.n	800310a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003108:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	40012c00 	.word	0x40012c00
 800311c:	40014000 	.word	0x40014000
 8003120:	00010007 	.word	0x00010007

08003124 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e049      	b.n	80031ca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d106      	bne.n	8003150 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7fd fd0c 	bl	8000b68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3304      	adds	r3, #4
 8003160:	4619      	mov	r1, r3
 8003162:	4610      	mov	r0, r2
 8003164:	f000 fafa 	bl	800375c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d109      	bne.n	80031f8 <HAL_TIM_PWM_Start+0x24>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	bf14      	ite	ne
 80031f0:	2301      	movne	r3, #1
 80031f2:	2300      	moveq	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	e03c      	b.n	8003272 <HAL_TIM_PWM_Start+0x9e>
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d109      	bne.n	8003212 <HAL_TIM_PWM_Start+0x3e>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b01      	cmp	r3, #1
 8003208:	bf14      	ite	ne
 800320a:	2301      	movne	r3, #1
 800320c:	2300      	moveq	r3, #0
 800320e:	b2db      	uxtb	r3, r3
 8003210:	e02f      	b.n	8003272 <HAL_TIM_PWM_Start+0x9e>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	2b08      	cmp	r3, #8
 8003216:	d109      	bne.n	800322c <HAL_TIM_PWM_Start+0x58>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b01      	cmp	r3, #1
 8003222:	bf14      	ite	ne
 8003224:	2301      	movne	r3, #1
 8003226:	2300      	moveq	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	e022      	b.n	8003272 <HAL_TIM_PWM_Start+0x9e>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	2b0c      	cmp	r3, #12
 8003230:	d109      	bne.n	8003246 <HAL_TIM_PWM_Start+0x72>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b01      	cmp	r3, #1
 800323c:	bf14      	ite	ne
 800323e:	2301      	movne	r3, #1
 8003240:	2300      	moveq	r3, #0
 8003242:	b2db      	uxtb	r3, r3
 8003244:	e015      	b.n	8003272 <HAL_TIM_PWM_Start+0x9e>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	2b10      	cmp	r3, #16
 800324a:	d109      	bne.n	8003260 <HAL_TIM_PWM_Start+0x8c>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b01      	cmp	r3, #1
 8003256:	bf14      	ite	ne
 8003258:	2301      	movne	r3, #1
 800325a:	2300      	moveq	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	e008      	b.n	8003272 <HAL_TIM_PWM_Start+0x9e>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b01      	cmp	r3, #1
 800326a:	bf14      	ite	ne
 800326c:	2301      	movne	r3, #1
 800326e:	2300      	moveq	r3, #0
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e083      	b.n	8003382 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d104      	bne.n	800328a <HAL_TIM_PWM_Start+0xb6>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2202      	movs	r2, #2
 8003284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003288:	e023      	b.n	80032d2 <HAL_TIM_PWM_Start+0xfe>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b04      	cmp	r3, #4
 800328e:	d104      	bne.n	800329a <HAL_TIM_PWM_Start+0xc6>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2202      	movs	r2, #2
 8003294:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003298:	e01b      	b.n	80032d2 <HAL_TIM_PWM_Start+0xfe>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	2b08      	cmp	r3, #8
 800329e:	d104      	bne.n	80032aa <HAL_TIM_PWM_Start+0xd6>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032a8:	e013      	b.n	80032d2 <HAL_TIM_PWM_Start+0xfe>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2b0c      	cmp	r3, #12
 80032ae:	d104      	bne.n	80032ba <HAL_TIM_PWM_Start+0xe6>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80032b8:	e00b      	b.n	80032d2 <HAL_TIM_PWM_Start+0xfe>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b10      	cmp	r3, #16
 80032be:	d104      	bne.n	80032ca <HAL_TIM_PWM_Start+0xf6>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2202      	movs	r2, #2
 80032c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032c8:	e003      	b.n	80032d2 <HAL_TIM_PWM_Start+0xfe>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2202      	movs	r2, #2
 80032ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2201      	movs	r2, #1
 80032d8:	6839      	ldr	r1, [r7, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 fdec 	bl	8003eb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a29      	ldr	r2, [pc, #164]	@ (800338c <HAL_TIM_PWM_Start+0x1b8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00e      	beq.n	8003308 <HAL_TIM_PWM_Start+0x134>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a28      	ldr	r2, [pc, #160]	@ (8003390 <HAL_TIM_PWM_Start+0x1bc>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d009      	beq.n	8003308 <HAL_TIM_PWM_Start+0x134>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a26      	ldr	r2, [pc, #152]	@ (8003394 <HAL_TIM_PWM_Start+0x1c0>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d004      	beq.n	8003308 <HAL_TIM_PWM_Start+0x134>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a25      	ldr	r2, [pc, #148]	@ (8003398 <HAL_TIM_PWM_Start+0x1c4>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d101      	bne.n	800330c <HAL_TIM_PWM_Start+0x138>
 8003308:	2301      	movs	r3, #1
 800330a:	e000      	b.n	800330e <HAL_TIM_PWM_Start+0x13a>
 800330c:	2300      	movs	r3, #0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d007      	beq.n	8003322 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003320:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a19      	ldr	r2, [pc, #100]	@ (800338c <HAL_TIM_PWM_Start+0x1b8>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d009      	beq.n	8003340 <HAL_TIM_PWM_Start+0x16c>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003334:	d004      	beq.n	8003340 <HAL_TIM_PWM_Start+0x16c>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a15      	ldr	r2, [pc, #84]	@ (8003390 <HAL_TIM_PWM_Start+0x1bc>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d115      	bne.n	800336c <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	4b15      	ldr	r3, [pc, #84]	@ (800339c <HAL_TIM_PWM_Start+0x1c8>)
 8003348:	4013      	ands	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2b06      	cmp	r3, #6
 8003350:	d015      	beq.n	800337e <HAL_TIM_PWM_Start+0x1aa>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003358:	d011      	beq.n	800337e <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0201 	orr.w	r2, r2, #1
 8003368:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800336a:	e008      	b.n	800337e <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0201 	orr.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	e000      	b.n	8003380 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40012c00 	.word	0x40012c00
 8003390:	40014000 	.word	0x40014000
 8003394:	40014400 	.word	0x40014400
 8003398:	40014800 	.word	0x40014800
 800339c:	00010007 	.word	0x00010007

080033a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033ac:	2300      	movs	r3, #0
 80033ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d101      	bne.n	80033be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80033ba:	2302      	movs	r3, #2
 80033bc:	e0ff      	b.n	80035be <HAL_TIM_PWM_ConfigChannel+0x21e>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b14      	cmp	r3, #20
 80033ca:	f200 80f0 	bhi.w	80035ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80033ce:	a201      	add	r2, pc, #4	@ (adr r2, 80033d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80033d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d4:	08003429 	.word	0x08003429
 80033d8:	080035af 	.word	0x080035af
 80033dc:	080035af 	.word	0x080035af
 80033e0:	080035af 	.word	0x080035af
 80033e4:	08003469 	.word	0x08003469
 80033e8:	080035af 	.word	0x080035af
 80033ec:	080035af 	.word	0x080035af
 80033f0:	080035af 	.word	0x080035af
 80033f4:	080034ab 	.word	0x080034ab
 80033f8:	080035af 	.word	0x080035af
 80033fc:	080035af 	.word	0x080035af
 8003400:	080035af 	.word	0x080035af
 8003404:	080034eb 	.word	0x080034eb
 8003408:	080035af 	.word	0x080035af
 800340c:	080035af 	.word	0x080035af
 8003410:	080035af 	.word	0x080035af
 8003414:	0800352d 	.word	0x0800352d
 8003418:	080035af 	.word	0x080035af
 800341c:	080035af 	.word	0x080035af
 8003420:	080035af 	.word	0x080035af
 8003424:	0800356d 	.word	0x0800356d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68b9      	ldr	r1, [r7, #8]
 800342e:	4618      	mov	r0, r3
 8003430:	f000 fa02 	bl	8003838 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0208 	orr.w	r2, r2, #8
 8003442:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	699a      	ldr	r2, [r3, #24]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0204 	bic.w	r2, r2, #4
 8003452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6999      	ldr	r1, [r3, #24]
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	691a      	ldr	r2, [r3, #16]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	619a      	str	r2, [r3, #24]
      break;
 8003466:	e0a5      	b.n	80035b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68b9      	ldr	r1, [r7, #8]
 800346e:	4618      	mov	r0, r3
 8003470:	f000 fa68 	bl	8003944 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699a      	ldr	r2, [r3, #24]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699a      	ldr	r2, [r3, #24]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6999      	ldr	r1, [r3, #24]
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	021a      	lsls	r2, r3, #8
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	619a      	str	r2, [r3, #24]
      break;
 80034a8:	e084      	b.n	80035b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68b9      	ldr	r1, [r7, #8]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 fac7 	bl	8003a44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	69da      	ldr	r2, [r3, #28]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f042 0208 	orr.w	r2, r2, #8
 80034c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	69da      	ldr	r2, [r3, #28]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0204 	bic.w	r2, r2, #4
 80034d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	69d9      	ldr	r1, [r3, #28]
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	691a      	ldr	r2, [r3, #16]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	61da      	str	r2, [r3, #28]
      break;
 80034e8:	e064      	b.n	80035b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68b9      	ldr	r1, [r7, #8]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fb25 	bl	8003b40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	69da      	ldr	r2, [r3, #28]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	69da      	ldr	r2, [r3, #28]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	69d9      	ldr	r1, [r3, #28]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	021a      	lsls	r2, r3, #8
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	61da      	str	r2, [r3, #28]
      break;
 800352a:	e043      	b.n	80035b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68b9      	ldr	r1, [r7, #8]
 8003532:	4618      	mov	r0, r3
 8003534:	f000 fb68 	bl	8003c08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0208 	orr.w	r2, r2, #8
 8003546:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0204 	bic.w	r2, r2, #4
 8003556:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	691a      	ldr	r2, [r3, #16]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800356a:	e023      	b.n	80035b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68b9      	ldr	r1, [r7, #8]
 8003572:	4618      	mov	r0, r3
 8003574:	f000 fba6 	bl	8003cc4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003586:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003596:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	021a      	lsls	r2, r3, #8
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80035ac:	e002      	b.n	80035b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	75fb      	strb	r3, [r7, #23]
      break;
 80035b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80035bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop

080035c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d101      	bne.n	80035e4 <HAL_TIM_ConfigClockSource+0x1c>
 80035e0:	2302      	movs	r3, #2
 80035e2:	e0b6      	b.n	8003752 <HAL_TIM_ConfigClockSource+0x18a>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003602:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003606:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800360e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003620:	d03e      	beq.n	80036a0 <HAL_TIM_ConfigClockSource+0xd8>
 8003622:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003626:	f200 8087 	bhi.w	8003738 <HAL_TIM_ConfigClockSource+0x170>
 800362a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800362e:	f000 8086 	beq.w	800373e <HAL_TIM_ConfigClockSource+0x176>
 8003632:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003636:	d87f      	bhi.n	8003738 <HAL_TIM_ConfigClockSource+0x170>
 8003638:	2b70      	cmp	r3, #112	@ 0x70
 800363a:	d01a      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0xaa>
 800363c:	2b70      	cmp	r3, #112	@ 0x70
 800363e:	d87b      	bhi.n	8003738 <HAL_TIM_ConfigClockSource+0x170>
 8003640:	2b60      	cmp	r3, #96	@ 0x60
 8003642:	d050      	beq.n	80036e6 <HAL_TIM_ConfigClockSource+0x11e>
 8003644:	2b60      	cmp	r3, #96	@ 0x60
 8003646:	d877      	bhi.n	8003738 <HAL_TIM_ConfigClockSource+0x170>
 8003648:	2b50      	cmp	r3, #80	@ 0x50
 800364a:	d03c      	beq.n	80036c6 <HAL_TIM_ConfigClockSource+0xfe>
 800364c:	2b50      	cmp	r3, #80	@ 0x50
 800364e:	d873      	bhi.n	8003738 <HAL_TIM_ConfigClockSource+0x170>
 8003650:	2b40      	cmp	r3, #64	@ 0x40
 8003652:	d058      	beq.n	8003706 <HAL_TIM_ConfigClockSource+0x13e>
 8003654:	2b40      	cmp	r3, #64	@ 0x40
 8003656:	d86f      	bhi.n	8003738 <HAL_TIM_ConfigClockSource+0x170>
 8003658:	2b30      	cmp	r3, #48	@ 0x30
 800365a:	d064      	beq.n	8003726 <HAL_TIM_ConfigClockSource+0x15e>
 800365c:	2b30      	cmp	r3, #48	@ 0x30
 800365e:	d86b      	bhi.n	8003738 <HAL_TIM_ConfigClockSource+0x170>
 8003660:	2b20      	cmp	r3, #32
 8003662:	d060      	beq.n	8003726 <HAL_TIM_ConfigClockSource+0x15e>
 8003664:	2b20      	cmp	r3, #32
 8003666:	d867      	bhi.n	8003738 <HAL_TIM_ConfigClockSource+0x170>
 8003668:	2b00      	cmp	r3, #0
 800366a:	d05c      	beq.n	8003726 <HAL_TIM_ConfigClockSource+0x15e>
 800366c:	2b10      	cmp	r3, #16
 800366e:	d05a      	beq.n	8003726 <HAL_TIM_ConfigClockSource+0x15e>
 8003670:	e062      	b.n	8003738 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003682:	f000 fbf9 	bl	8003e78 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003694:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	609a      	str	r2, [r3, #8]
      break;
 800369e:	e04f      	b.n	8003740 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036b0:	f000 fbe2 	bl	8003e78 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036c2:	609a      	str	r2, [r3, #8]
      break;
 80036c4:	e03c      	b.n	8003740 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036d2:	461a      	mov	r2, r3
 80036d4:	f000 fb56 	bl	8003d84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2150      	movs	r1, #80	@ 0x50
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 fbaf 	bl	8003e42 <TIM_ITRx_SetConfig>
      break;
 80036e4:	e02c      	b.n	8003740 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036f2:	461a      	mov	r2, r3
 80036f4:	f000 fb75 	bl	8003de2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2160      	movs	r1, #96	@ 0x60
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fb9f 	bl	8003e42 <TIM_ITRx_SetConfig>
      break;
 8003704:	e01c      	b.n	8003740 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003712:	461a      	mov	r2, r3
 8003714:	f000 fb36 	bl	8003d84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2140      	movs	r1, #64	@ 0x40
 800371e:	4618      	mov	r0, r3
 8003720:	f000 fb8f 	bl	8003e42 <TIM_ITRx_SetConfig>
      break;
 8003724:	e00c      	b.n	8003740 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4619      	mov	r1, r3
 8003730:	4610      	mov	r0, r2
 8003732:	f000 fb86 	bl	8003e42 <TIM_ITRx_SetConfig>
      break;
 8003736:	e003      	b.n	8003740 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	73fb      	strb	r3, [r7, #15]
      break;
 800373c:	e000      	b.n	8003740 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800373e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003750:	7bfb      	ldrb	r3, [r7, #15]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a2e      	ldr	r2, [pc, #184]	@ (8003828 <TIM_Base_SetConfig+0xcc>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d003      	beq.n	800377c <TIM_Base_SetConfig+0x20>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800377a:	d108      	bne.n	800378e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003782:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4313      	orrs	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a25      	ldr	r2, [pc, #148]	@ (8003828 <TIM_Base_SetConfig+0xcc>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d00f      	beq.n	80037b6 <TIM_Base_SetConfig+0x5a>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800379c:	d00b      	beq.n	80037b6 <TIM_Base_SetConfig+0x5a>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a22      	ldr	r2, [pc, #136]	@ (800382c <TIM_Base_SetConfig+0xd0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d007      	beq.n	80037b6 <TIM_Base_SetConfig+0x5a>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a21      	ldr	r2, [pc, #132]	@ (8003830 <TIM_Base_SetConfig+0xd4>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d003      	beq.n	80037b6 <TIM_Base_SetConfig+0x5a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a20      	ldr	r2, [pc, #128]	@ (8003834 <TIM_Base_SetConfig+0xd8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d108      	bne.n	80037c8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a0e      	ldr	r2, [pc, #56]	@ (8003828 <TIM_Base_SetConfig+0xcc>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d00b      	beq.n	800380c <TIM_Base_SetConfig+0xb0>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a0d      	ldr	r2, [pc, #52]	@ (800382c <TIM_Base_SetConfig+0xd0>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d007      	beq.n	800380c <TIM_Base_SetConfig+0xb0>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a0c      	ldr	r2, [pc, #48]	@ (8003830 <TIM_Base_SetConfig+0xd4>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d003      	beq.n	800380c <TIM_Base_SetConfig+0xb0>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a0b      	ldr	r2, [pc, #44]	@ (8003834 <TIM_Base_SetConfig+0xd8>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d103      	bne.n	8003814 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	615a      	str	r2, [r3, #20]
}
 800381a:	bf00      	nop
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40012c00 	.word	0x40012c00
 800382c:	40014000 	.word	0x40014000
 8003830:	40014400 	.word	0x40014400
 8003834:	40014800 	.word	0x40014800

08003838 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003838:	b480      	push	{r7}
 800383a:	b087      	sub	sp, #28
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	f023 0201 	bic.w	r2, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800386a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f023 0303 	bic.w	r3, r3, #3
 8003872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f023 0302 	bic.w	r3, r3, #2
 8003884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4313      	orrs	r3, r2
 800388e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a28      	ldr	r2, [pc, #160]	@ (8003934 <TIM_OC1_SetConfig+0xfc>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d00b      	beq.n	80038b0 <TIM_OC1_SetConfig+0x78>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a27      	ldr	r2, [pc, #156]	@ (8003938 <TIM_OC1_SetConfig+0x100>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d007      	beq.n	80038b0 <TIM_OC1_SetConfig+0x78>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a26      	ldr	r2, [pc, #152]	@ (800393c <TIM_OC1_SetConfig+0x104>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d003      	beq.n	80038b0 <TIM_OC1_SetConfig+0x78>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a25      	ldr	r2, [pc, #148]	@ (8003940 <TIM_OC1_SetConfig+0x108>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d10c      	bne.n	80038ca <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	f023 0308 	bic.w	r3, r3, #8
 80038b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	4313      	orrs	r3, r2
 80038c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f023 0304 	bic.w	r3, r3, #4
 80038c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a19      	ldr	r2, [pc, #100]	@ (8003934 <TIM_OC1_SetConfig+0xfc>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d00b      	beq.n	80038ea <TIM_OC1_SetConfig+0xb2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a18      	ldr	r2, [pc, #96]	@ (8003938 <TIM_OC1_SetConfig+0x100>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d007      	beq.n	80038ea <TIM_OC1_SetConfig+0xb2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a17      	ldr	r2, [pc, #92]	@ (800393c <TIM_OC1_SetConfig+0x104>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d003      	beq.n	80038ea <TIM_OC1_SetConfig+0xb2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a16      	ldr	r2, [pc, #88]	@ (8003940 <TIM_OC1_SetConfig+0x108>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d111      	bne.n	800390e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4313      	orrs	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	4313      	orrs	r3, r2
 800390c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	621a      	str	r2, [r3, #32]
}
 8003928:	bf00      	nop
 800392a:	371c      	adds	r7, #28
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	40012c00 	.word	0x40012c00
 8003938:	40014000 	.word	0x40014000
 800393c:	40014400 	.word	0x40014400
 8003940:	40014800 	.word	0x40014800

08003944 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	f023 0210 	bic.w	r2, r3, #16
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003972:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800397e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	021b      	lsls	r3, r3, #8
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	4313      	orrs	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f023 0320 	bic.w	r3, r3, #32
 8003992:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	4313      	orrs	r3, r2
 800399e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a24      	ldr	r2, [pc, #144]	@ (8003a34 <TIM_OC2_SetConfig+0xf0>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d10d      	bne.n	80039c4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003a34 <TIM_OC2_SetConfig+0xf0>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d00b      	beq.n	80039e4 <TIM_OC2_SetConfig+0xa0>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003a38 <TIM_OC2_SetConfig+0xf4>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d007      	beq.n	80039e4 <TIM_OC2_SetConfig+0xa0>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a19      	ldr	r2, [pc, #100]	@ (8003a3c <TIM_OC2_SetConfig+0xf8>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d003      	beq.n	80039e4 <TIM_OC2_SetConfig+0xa0>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a18      	ldr	r2, [pc, #96]	@ (8003a40 <TIM_OC2_SetConfig+0xfc>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d113      	bne.n	8003a0c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039ea:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039f2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	621a      	str	r2, [r3, #32]
}
 8003a26:	bf00      	nop
 8003a28:	371c      	adds	r7, #28
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40012c00 	.word	0x40012c00
 8003a38:	40014000 	.word	0x40014000
 8003a3c:	40014400 	.word	0x40014400
 8003a40:	40014800 	.word	0x40014800

08003a44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f023 0303 	bic.w	r3, r3, #3
 8003a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	021b      	lsls	r3, r3, #8
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a23      	ldr	r2, [pc, #140]	@ (8003b30 <TIM_OC3_SetConfig+0xec>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d10d      	bne.n	8003ac2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003aac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	021b      	lsls	r3, r3, #8
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ac0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a1a      	ldr	r2, [pc, #104]	@ (8003b30 <TIM_OC3_SetConfig+0xec>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d00b      	beq.n	8003ae2 <TIM_OC3_SetConfig+0x9e>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a19      	ldr	r2, [pc, #100]	@ (8003b34 <TIM_OC3_SetConfig+0xf0>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d007      	beq.n	8003ae2 <TIM_OC3_SetConfig+0x9e>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a18      	ldr	r2, [pc, #96]	@ (8003b38 <TIM_OC3_SetConfig+0xf4>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d003      	beq.n	8003ae2 <TIM_OC3_SetConfig+0x9e>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a17      	ldr	r2, [pc, #92]	@ (8003b3c <TIM_OC3_SetConfig+0xf8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d113      	bne.n	8003b0a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ae8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003af0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	621a      	str	r2, [r3, #32]
}
 8003b24:	bf00      	nop
 8003b26:	371c      	adds	r7, #28
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	40012c00 	.word	0x40012c00
 8003b34:	40014000 	.word	0x40014000
 8003b38:	40014400 	.word	0x40014400
 8003b3c:	40014800 	.word	0x40014800

08003b40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	021b      	lsls	r3, r3, #8
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	031b      	lsls	r3, r3, #12
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a16      	ldr	r2, [pc, #88]	@ (8003bf8 <TIM_OC4_SetConfig+0xb8>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d00b      	beq.n	8003bbc <TIM_OC4_SetConfig+0x7c>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a15      	ldr	r2, [pc, #84]	@ (8003bfc <TIM_OC4_SetConfig+0xbc>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d007      	beq.n	8003bbc <TIM_OC4_SetConfig+0x7c>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a14      	ldr	r2, [pc, #80]	@ (8003c00 <TIM_OC4_SetConfig+0xc0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d003      	beq.n	8003bbc <TIM_OC4_SetConfig+0x7c>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a13      	ldr	r2, [pc, #76]	@ (8003c04 <TIM_OC4_SetConfig+0xc4>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d109      	bne.n	8003bd0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	019b      	lsls	r3, r3, #6
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	621a      	str	r2, [r3, #32]
}
 8003bea:	bf00      	nop
 8003bec:	371c      	adds	r7, #28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	40012c00 	.word	0x40012c00
 8003bfc:	40014000 	.word	0x40014000
 8003c00:	40014400 	.word	0x40014400
 8003c04:	40014800 	.word	0x40014800

08003c08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003c4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	041b      	lsls	r3, r3, #16
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a15      	ldr	r2, [pc, #84]	@ (8003cb4 <TIM_OC5_SetConfig+0xac>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d00b      	beq.n	8003c7a <TIM_OC5_SetConfig+0x72>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a14      	ldr	r2, [pc, #80]	@ (8003cb8 <TIM_OC5_SetConfig+0xb0>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d007      	beq.n	8003c7a <TIM_OC5_SetConfig+0x72>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a13      	ldr	r2, [pc, #76]	@ (8003cbc <TIM_OC5_SetConfig+0xb4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d003      	beq.n	8003c7a <TIM_OC5_SetConfig+0x72>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a12      	ldr	r2, [pc, #72]	@ (8003cc0 <TIM_OC5_SetConfig+0xb8>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d109      	bne.n	8003c8e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	021b      	lsls	r3, r3, #8
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	621a      	str	r2, [r3, #32]
}
 8003ca8:	bf00      	nop
 8003caa:	371c      	adds	r7, #28
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	40012c00 	.word	0x40012c00
 8003cb8:	40014000 	.word	0x40014000
 8003cbc:	40014400 	.word	0x40014400
 8003cc0:	40014800 	.word	0x40014800

08003cc4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	021b      	lsls	r3, r3, #8
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	051b      	lsls	r3, r3, #20
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a16      	ldr	r2, [pc, #88]	@ (8003d74 <TIM_OC6_SetConfig+0xb0>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d00b      	beq.n	8003d38 <TIM_OC6_SetConfig+0x74>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a15      	ldr	r2, [pc, #84]	@ (8003d78 <TIM_OC6_SetConfig+0xb4>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d007      	beq.n	8003d38 <TIM_OC6_SetConfig+0x74>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a14      	ldr	r2, [pc, #80]	@ (8003d7c <TIM_OC6_SetConfig+0xb8>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d003      	beq.n	8003d38 <TIM_OC6_SetConfig+0x74>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a13      	ldr	r2, [pc, #76]	@ (8003d80 <TIM_OC6_SetConfig+0xbc>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d109      	bne.n	8003d4c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	029b      	lsls	r3, r3, #10
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	621a      	str	r2, [r3, #32]
}
 8003d66:	bf00      	nop
 8003d68:	371c      	adds	r7, #28
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	40012c00 	.word	0x40012c00
 8003d78:	40014000 	.word	0x40014000
 8003d7c:	40014400 	.word	0x40014400
 8003d80:	40014800 	.word	0x40014800

08003d84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b087      	sub	sp, #28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	f023 0201 	bic.w	r2, r3, #1
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003dae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	011b      	lsls	r3, r3, #4
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f023 030a 	bic.w	r3, r3, #10
 8003dc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	621a      	str	r2, [r3, #32]
}
 8003dd6:	bf00      	nop
 8003dd8:	371c      	adds	r7, #28
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b087      	sub	sp, #28
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	60f8      	str	r0, [r7, #12]
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	f023 0210 	bic.w	r2, r3, #16
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	031b      	lsls	r3, r3, #12
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	621a      	str	r2, [r3, #32]
}
 8003e36:	bf00      	nop
 8003e38:	371c      	adds	r7, #28
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b085      	sub	sp, #20
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
 8003e4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f043 0307 	orr.w	r3, r3, #7
 8003e64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	609a      	str	r2, [r3, #8]
}
 8003e6c:	bf00      	nop
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
 8003e84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	021a      	lsls	r2, r3, #8
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	609a      	str	r2, [r3, #8]
}
 8003eac:	bf00      	nop
 8003eae:	371c      	adds	r7, #28
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	f003 031f 	and.w	r3, r3, #31
 8003eca:	2201      	movs	r2, #1
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6a1a      	ldr	r2, [r3, #32]
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	43db      	mvns	r3, r3
 8003eda:	401a      	ands	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6a1a      	ldr	r2, [r3, #32]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f003 031f 	and.w	r3, r3, #31
 8003eea:	6879      	ldr	r1, [r7, #4]
 8003eec:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	621a      	str	r2, [r3, #32]
}
 8003ef6:	bf00      	nop
 8003ef8:	371c      	adds	r7, #28
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
	...

08003f04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d101      	bne.n	8003f1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f18:	2302      	movs	r3, #2
 8003f1a:	e04f      	b.n	8003fbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2202      	movs	r2, #2
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a21      	ldr	r2, [pc, #132]	@ (8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d108      	bne.n	8003f58 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003f4c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a14      	ldr	r2, [pc, #80]	@ (8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d009      	beq.n	8003f90 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f84:	d004      	beq.n	8003f90 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a10      	ldr	r2, [pc, #64]	@ (8003fcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d10c      	bne.n	8003faa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	40012c00 	.word	0x40012c00
 8003fcc:	40014000 	.word	0x40014000

08003fd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e060      	b.n	80040ae <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	4313      	orrs	r3, r2
 800400e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4313      	orrs	r3, r2
 800402a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	4313      	orrs	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	4313      	orrs	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004052:	4313      	orrs	r3, r2
 8004054:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	041b      	lsls	r3, r3, #16
 8004062:	4313      	orrs	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a14      	ldr	r2, [pc, #80]	@ (80040bc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d115      	bne.n	800409c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407a:	051b      	lsls	r3, r3, #20
 800407c:	4313      	orrs	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	4313      	orrs	r3, r2
 800408c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	4313      	orrs	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40012c00 	.word	0x40012c00

080040c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e040      	b.n	8004154 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d106      	bne.n	80040e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7fc fe1a 	bl	8000d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2224      	movs	r2, #36	@ 0x24
 80040ec:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0201 	bic.w	r2, r2, #1
 80040fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 fb76 	bl	80047f0 <UART_SetConfig>
 8004104:	4603      	mov	r3, r0
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e022      	b.n	8004154 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 fca0 	bl	8004a5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800412a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800413a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 0201 	orr.w	r2, r2, #1
 800414a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 fd27 	bl	8004ba0 <UART_CheckIdleState>
 8004152:	4603      	mov	r3, r0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3708      	adds	r7, #8
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b08a      	sub	sp, #40	@ 0x28
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	4613      	mov	r3, r2
 8004168:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004170:	2b20      	cmp	r3, #32
 8004172:	d132      	bne.n	80041da <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d002      	beq.n	8004180 <HAL_UART_Receive_IT+0x24>
 800417a:	88fb      	ldrh	r3, [r7, #6]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e02b      	b.n	80041dc <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d018      	beq.n	80041ca <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	e853 3f00 	ldrex	r3, [r3]
 80041a4:	613b      	str	r3, [r7, #16]
   return(result);
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80041ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	461a      	mov	r2, r3
 80041b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b6:	623b      	str	r3, [r7, #32]
 80041b8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ba:	69f9      	ldr	r1, [r7, #28]
 80041bc:	6a3a      	ldr	r2, [r7, #32]
 80041be:	e841 2300 	strex	r3, r2, [r1]
 80041c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1e6      	bne.n	8004198 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80041ca:	88fb      	ldrh	r3, [r7, #6]
 80041cc:	461a      	mov	r2, r3
 80041ce:	68b9      	ldr	r1, [r7, #8]
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 fdf5 	bl	8004dc0 <UART_Start_Receive_IT>
 80041d6:	4603      	mov	r3, r0
 80041d8:	e000      	b.n	80041dc <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80041da:	2302      	movs	r3, #2
  }
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3728      	adds	r7, #40	@ 0x28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b0ba      	sub	sp, #232	@ 0xe8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800420a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800420e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004212:	4013      	ands	r3, r2
 8004214:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004218:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800421c:	2b00      	cmp	r3, #0
 800421e:	d115      	bne.n	800424c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004224:	f003 0320 	and.w	r3, r3, #32
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00f      	beq.n	800424c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800422c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004230:	f003 0320 	and.w	r3, r3, #32
 8004234:	2b00      	cmp	r3, #0
 8004236:	d009      	beq.n	800424c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 82ab 	beq.w	8004798 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	4798      	blx	r3
      }
      return;
 800424a:	e2a5      	b.n	8004798 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800424c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 8117 	beq.w	8004484 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d106      	bne.n	8004270 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004262:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004266:	4b85      	ldr	r3, [pc, #532]	@ (800447c <HAL_UART_IRQHandler+0x298>)
 8004268:	4013      	ands	r3, r2
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 810a 	beq.w	8004484 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d011      	beq.n	80042a0 <HAL_UART_IRQHandler+0xbc>
 800427c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00b      	beq.n	80042a0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2201      	movs	r2, #1
 800428e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004296:	f043 0201 	orr.w	r2, r3, #1
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d011      	beq.n	80042d0 <HAL_UART_IRQHandler+0xec>
 80042ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00b      	beq.n	80042d0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2202      	movs	r2, #2
 80042be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042c6:	f043 0204 	orr.w	r2, r3, #4
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d011      	beq.n	8004300 <HAL_UART_IRQHandler+0x11c>
 80042dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00b      	beq.n	8004300 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2204      	movs	r2, #4
 80042ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042f6:	f043 0202 	orr.w	r2, r3, #2
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004304:	f003 0308 	and.w	r3, r3, #8
 8004308:	2b00      	cmp	r3, #0
 800430a:	d017      	beq.n	800433c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800430c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004310:	f003 0320 	and.w	r3, r3, #32
 8004314:	2b00      	cmp	r3, #0
 8004316:	d105      	bne.n	8004324 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800431c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00b      	beq.n	800433c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2208      	movs	r2, #8
 800432a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004332:	f043 0208 	orr.w	r2, r3, #8
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800433c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004340:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004344:	2b00      	cmp	r3, #0
 8004346:	d012      	beq.n	800436e <HAL_UART_IRQHandler+0x18a>
 8004348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800434c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00c      	beq.n	800436e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800435c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004364:	f043 0220 	orr.w	r2, r3, #32
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 8211 	beq.w	800479c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800437a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800437e:	f003 0320 	and.w	r3, r3, #32
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00d      	beq.n	80043a2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800438a:	f003 0320 	and.w	r3, r3, #32
 800438e:	2b00      	cmp	r3, #0
 8004390:	d007      	beq.n	80043a2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043b6:	2b40      	cmp	r3, #64	@ 0x40
 80043b8:	d005      	beq.n	80043c6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80043ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043be:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d04f      	beq.n	8004466 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fdc0 	bl	8004f4c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d6:	2b40      	cmp	r3, #64	@ 0x40
 80043d8:	d141      	bne.n	800445e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	3308      	adds	r3, #8
 80043e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043e8:	e853 3f00 	ldrex	r3, [r3]
 80043ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80043f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	3308      	adds	r3, #8
 8004402:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004406:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800440a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004412:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004416:	e841 2300 	strex	r3, r2, [r1]
 800441a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800441e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1d9      	bne.n	80043da <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800442a:	2b00      	cmp	r3, #0
 800442c:	d013      	beq.n	8004456 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004432:	4a13      	ldr	r2, [pc, #76]	@ (8004480 <HAL_UART_IRQHandler+0x29c>)
 8004434:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800443a:	4618      	mov	r0, r3
 800443c:	f7fc ffe8 	bl	8001410 <HAL_DMA_Abort_IT>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d017      	beq.n	8004476 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800444a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004450:	4610      	mov	r0, r2
 8004452:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004454:	e00f      	b.n	8004476 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f9b4 	bl	80047c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800445c:	e00b      	b.n	8004476 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f9b0 	bl	80047c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004464:	e007      	b.n	8004476 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f9ac 	bl	80047c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004474:	e192      	b.n	800479c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004476:	bf00      	nop
    return;
 8004478:	e190      	b.n	800479c <HAL_UART_IRQHandler+0x5b8>
 800447a:	bf00      	nop
 800447c:	04000120 	.word	0x04000120
 8004480:	08005015 	.word	0x08005015

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004488:	2b01      	cmp	r3, #1
 800448a:	f040 814b 	bne.w	8004724 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800448e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004492:	f003 0310 	and.w	r3, r3, #16
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 8144 	beq.w	8004724 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800449c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044a0:	f003 0310 	and.w	r3, r3, #16
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 813d 	beq.w	8004724 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2210      	movs	r2, #16
 80044b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044bc:	2b40      	cmp	r3, #64	@ 0x40
 80044be:	f040 80b5 	bne.w	800462c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 8164 	beq.w	80047a0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80044de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044e2:	429a      	cmp	r2, r3
 80044e4:	f080 815c 	bcs.w	80047a0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	2b20      	cmp	r3, #32
 80044fa:	f000 8086 	beq.w	800460a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004506:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800450a:	e853 3f00 	ldrex	r3, [r3]
 800450e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004512:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004516:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800451a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004528:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800452c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004530:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004534:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004538:	e841 2300 	strex	r3, r2, [r1]
 800453c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004540:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1da      	bne.n	80044fe <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3308      	adds	r3, #8
 800454e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004550:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004552:	e853 3f00 	ldrex	r3, [r3]
 8004556:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004558:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800455a:	f023 0301 	bic.w	r3, r3, #1
 800455e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	3308      	adds	r3, #8
 8004568:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800456c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004570:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004572:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004574:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004578:	e841 2300 	strex	r3, r2, [r1]
 800457c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800457e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1e1      	bne.n	8004548 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3308      	adds	r3, #8
 800458a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800458e:	e853 3f00 	ldrex	r3, [r3]
 8004592:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004594:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004596:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800459a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3308      	adds	r3, #8
 80045a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80045a8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80045aa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ac:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80045ae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80045b0:	e841 2300 	strex	r3, r2, [r1]
 80045b4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80045b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1e3      	bne.n	8004584 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2220      	movs	r2, #32
 80045c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045d2:	e853 3f00 	ldrex	r3, [r3]
 80045d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80045d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045da:	f023 0310 	bic.w	r3, r3, #16
 80045de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	461a      	mov	r2, r3
 80045e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80045ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045ee:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80045f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045f4:	e841 2300 	strex	r3, r2, [r1]
 80045f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80045fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1e4      	bne.n	80045ca <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004604:	4618      	mov	r0, r3
 8004606:	f7fc feca 	bl	800139e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2202      	movs	r2, #2
 800460e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800461c:	b29b      	uxth	r3, r3
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	b29b      	uxth	r3, r3
 8004622:	4619      	mov	r1, r3
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f8d7 	bl	80047d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800462a:	e0b9      	b.n	80047a0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004638:	b29b      	uxth	r3, r3
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004646:	b29b      	uxth	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 80ab 	beq.w	80047a4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800464e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 80a6 	beq.w	80047a4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004660:	e853 3f00 	ldrex	r3, [r3]
 8004664:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004668:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800466c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	461a      	mov	r2, r3
 8004676:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800467a:	647b      	str	r3, [r7, #68]	@ 0x44
 800467c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004680:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004682:	e841 2300 	strex	r3, r2, [r1]
 8004686:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1e4      	bne.n	8004658 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3308      	adds	r3, #8
 8004694:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004698:	e853 3f00 	ldrex	r3, [r3]
 800469c:	623b      	str	r3, [r7, #32]
   return(result);
 800469e:	6a3b      	ldr	r3, [r7, #32]
 80046a0:	f023 0301 	bic.w	r3, r3, #1
 80046a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3308      	adds	r3, #8
 80046ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80046b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80046b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046ba:	e841 2300 	strex	r3, r2, [r1]
 80046be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1e3      	bne.n	800468e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2220      	movs	r2, #32
 80046ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	e853 3f00 	ldrex	r3, [r3]
 80046e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f023 0310 	bic.w	r3, r3, #16
 80046ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	461a      	mov	r2, r3
 80046f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80046fc:	61fb      	str	r3, [r7, #28]
 80046fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004700:	69b9      	ldr	r1, [r7, #24]
 8004702:	69fa      	ldr	r2, [r7, #28]
 8004704:	e841 2300 	strex	r3, r2, [r1]
 8004708:	617b      	str	r3, [r7, #20]
   return(result);
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1e4      	bne.n	80046da <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004716:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800471a:	4619      	mov	r1, r3
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 f85b 	bl	80047d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004722:	e03f      	b.n	80047a4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004728:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00e      	beq.n	800474e <HAL_UART_IRQHandler+0x56a>
 8004730:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004734:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d008      	beq.n	800474e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004744:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 fe4c 	bl	80053e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800474c:	e02d      	b.n	80047aa <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800474e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00e      	beq.n	8004778 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800475a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800475e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004762:	2b00      	cmp	r3, #0
 8004764:	d008      	beq.n	8004778 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800476a:	2b00      	cmp	r3, #0
 800476c:	d01c      	beq.n	80047a8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	4798      	blx	r3
    }
    return;
 8004776:	e017      	b.n	80047a8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800477c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004780:	2b00      	cmp	r3, #0
 8004782:	d012      	beq.n	80047aa <HAL_UART_IRQHandler+0x5c6>
 8004784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00c      	beq.n	80047aa <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 fc55 	bl	8005040 <UART_EndTransmit_IT>
    return;
 8004796:	e008      	b.n	80047aa <HAL_UART_IRQHandler+0x5c6>
      return;
 8004798:	bf00      	nop
 800479a:	e006      	b.n	80047aa <HAL_UART_IRQHandler+0x5c6>
    return;
 800479c:	bf00      	nop
 800479e:	e004      	b.n	80047aa <HAL_UART_IRQHandler+0x5c6>
      return;
 80047a0:	bf00      	nop
 80047a2:	e002      	b.n	80047aa <HAL_UART_IRQHandler+0x5c6>
      return;
 80047a4:	bf00      	nop
 80047a6:	e000      	b.n	80047aa <HAL_UART_IRQHandler+0x5c6>
    return;
 80047a8:	bf00      	nop
  }

}
 80047aa:	37e8      	adds	r7, #232	@ 0xe8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	460b      	mov	r3, r1
 80047e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047f8:	2300      	movs	r3, #0
 80047fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	431a      	orrs	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	69db      	ldr	r3, [r3, #28]
 8004810:	4313      	orrs	r3, r2
 8004812:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	4b8a      	ldr	r3, [pc, #552]	@ (8004a44 <UART_SetConfig+0x254>)
 800481c:	4013      	ands	r3, r2
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6812      	ldr	r2, [r2, #0]
 8004822:	6979      	ldr	r1, [r7, #20]
 8004824:	430b      	orrs	r3, r1
 8004826:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	4313      	orrs	r3, r2
 800484c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	430a      	orrs	r2, r1
 8004860:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a78      	ldr	r2, [pc, #480]	@ (8004a48 <UART_SetConfig+0x258>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d120      	bne.n	80048ae <UART_SetConfig+0xbe>
 800486c:	4b77      	ldr	r3, [pc, #476]	@ (8004a4c <UART_SetConfig+0x25c>)
 800486e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004870:	f003 0303 	and.w	r3, r3, #3
 8004874:	2b03      	cmp	r3, #3
 8004876:	d817      	bhi.n	80048a8 <UART_SetConfig+0xb8>
 8004878:	a201      	add	r2, pc, #4	@ (adr r2, 8004880 <UART_SetConfig+0x90>)
 800487a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487e:	bf00      	nop
 8004880:	08004891 	.word	0x08004891
 8004884:	0800489d 	.word	0x0800489d
 8004888:	080048a3 	.word	0x080048a3
 800488c:	08004897 	.word	0x08004897
 8004890:	2300      	movs	r3, #0
 8004892:	77fb      	strb	r3, [r7, #31]
 8004894:	e01d      	b.n	80048d2 <UART_SetConfig+0xe2>
 8004896:	2302      	movs	r3, #2
 8004898:	77fb      	strb	r3, [r7, #31]
 800489a:	e01a      	b.n	80048d2 <UART_SetConfig+0xe2>
 800489c:	2304      	movs	r3, #4
 800489e:	77fb      	strb	r3, [r7, #31]
 80048a0:	e017      	b.n	80048d2 <UART_SetConfig+0xe2>
 80048a2:	2308      	movs	r3, #8
 80048a4:	77fb      	strb	r3, [r7, #31]
 80048a6:	e014      	b.n	80048d2 <UART_SetConfig+0xe2>
 80048a8:	2310      	movs	r3, #16
 80048aa:	77fb      	strb	r3, [r7, #31]
 80048ac:	e011      	b.n	80048d2 <UART_SetConfig+0xe2>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a67      	ldr	r2, [pc, #412]	@ (8004a50 <UART_SetConfig+0x260>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d102      	bne.n	80048be <UART_SetConfig+0xce>
 80048b8:	2300      	movs	r3, #0
 80048ba:	77fb      	strb	r3, [r7, #31]
 80048bc:	e009      	b.n	80048d2 <UART_SetConfig+0xe2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a64      	ldr	r2, [pc, #400]	@ (8004a54 <UART_SetConfig+0x264>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d102      	bne.n	80048ce <UART_SetConfig+0xde>
 80048c8:	2300      	movs	r3, #0
 80048ca:	77fb      	strb	r3, [r7, #31]
 80048cc:	e001      	b.n	80048d2 <UART_SetConfig+0xe2>
 80048ce:	2310      	movs	r3, #16
 80048d0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048da:	d15a      	bne.n	8004992 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80048dc:	7ffb      	ldrb	r3, [r7, #31]
 80048de:	2b08      	cmp	r3, #8
 80048e0:	d827      	bhi.n	8004932 <UART_SetConfig+0x142>
 80048e2:	a201      	add	r2, pc, #4	@ (adr r2, 80048e8 <UART_SetConfig+0xf8>)
 80048e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e8:	0800490d 	.word	0x0800490d
 80048ec:	08004915 	.word	0x08004915
 80048f0:	0800491d 	.word	0x0800491d
 80048f4:	08004933 	.word	0x08004933
 80048f8:	08004923 	.word	0x08004923
 80048fc:	08004933 	.word	0x08004933
 8004900:	08004933 	.word	0x08004933
 8004904:	08004933 	.word	0x08004933
 8004908:	0800492b 	.word	0x0800492b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800490c:	f7fe f990 	bl	8002c30 <HAL_RCC_GetPCLK1Freq>
 8004910:	61b8      	str	r0, [r7, #24]
        break;
 8004912:	e013      	b.n	800493c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004914:	f7fe f9ae 	bl	8002c74 <HAL_RCC_GetPCLK2Freq>
 8004918:	61b8      	str	r0, [r7, #24]
        break;
 800491a:	e00f      	b.n	800493c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800491c:	4b4e      	ldr	r3, [pc, #312]	@ (8004a58 <UART_SetConfig+0x268>)
 800491e:	61bb      	str	r3, [r7, #24]
        break;
 8004920:	e00c      	b.n	800493c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004922:	f7fe f90f 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 8004926:	61b8      	str	r0, [r7, #24]
        break;
 8004928:	e008      	b.n	800493c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800492a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800492e:	61bb      	str	r3, [r7, #24]
        break;
 8004930:	e004      	b.n	800493c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	77bb      	strb	r3, [r7, #30]
        break;
 800493a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d074      	beq.n	8004a2c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	005a      	lsls	r2, r3, #1
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	085b      	lsrs	r3, r3, #1
 800494c:	441a      	add	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	fbb2 f3f3 	udiv	r3, r2, r3
 8004956:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	2b0f      	cmp	r3, #15
 800495c:	d916      	bls.n	800498c <UART_SetConfig+0x19c>
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004964:	d212      	bcs.n	800498c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	b29b      	uxth	r3, r3
 800496a:	f023 030f 	bic.w	r3, r3, #15
 800496e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	085b      	lsrs	r3, r3, #1
 8004974:	b29b      	uxth	r3, r3
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	b29a      	uxth	r2, r3
 800497c:	89fb      	ldrh	r3, [r7, #14]
 800497e:	4313      	orrs	r3, r2
 8004980:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	89fa      	ldrh	r2, [r7, #14]
 8004988:	60da      	str	r2, [r3, #12]
 800498a:	e04f      	b.n	8004a2c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	77bb      	strb	r3, [r7, #30]
 8004990:	e04c      	b.n	8004a2c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004992:	7ffb      	ldrb	r3, [r7, #31]
 8004994:	2b08      	cmp	r3, #8
 8004996:	d828      	bhi.n	80049ea <UART_SetConfig+0x1fa>
 8004998:	a201      	add	r2, pc, #4	@ (adr r2, 80049a0 <UART_SetConfig+0x1b0>)
 800499a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499e:	bf00      	nop
 80049a0:	080049c5 	.word	0x080049c5
 80049a4:	080049cd 	.word	0x080049cd
 80049a8:	080049d5 	.word	0x080049d5
 80049ac:	080049eb 	.word	0x080049eb
 80049b0:	080049db 	.word	0x080049db
 80049b4:	080049eb 	.word	0x080049eb
 80049b8:	080049eb 	.word	0x080049eb
 80049bc:	080049eb 	.word	0x080049eb
 80049c0:	080049e3 	.word	0x080049e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049c4:	f7fe f934 	bl	8002c30 <HAL_RCC_GetPCLK1Freq>
 80049c8:	61b8      	str	r0, [r7, #24]
        break;
 80049ca:	e013      	b.n	80049f4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049cc:	f7fe f952 	bl	8002c74 <HAL_RCC_GetPCLK2Freq>
 80049d0:	61b8      	str	r0, [r7, #24]
        break;
 80049d2:	e00f      	b.n	80049f4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049d4:	4b20      	ldr	r3, [pc, #128]	@ (8004a58 <UART_SetConfig+0x268>)
 80049d6:	61bb      	str	r3, [r7, #24]
        break;
 80049d8:	e00c      	b.n	80049f4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049da:	f7fe f8b3 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 80049de:	61b8      	str	r0, [r7, #24]
        break;
 80049e0:	e008      	b.n	80049f4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049e6:	61bb      	str	r3, [r7, #24]
        break;
 80049e8:	e004      	b.n	80049f4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	77bb      	strb	r3, [r7, #30]
        break;
 80049f2:	bf00      	nop
    }

    if (pclk != 0U)
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d018      	beq.n	8004a2c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	085a      	lsrs	r2, r3, #1
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	441a      	add	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a0c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	2b0f      	cmp	r3, #15
 8004a12:	d909      	bls.n	8004a28 <UART_SetConfig+0x238>
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a1a:	d205      	bcs.n	8004a28 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	60da      	str	r2, [r3, #12]
 8004a26:	e001      	b.n	8004a2c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004a38:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3720      	adds	r7, #32
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	efff69f3 	.word	0xefff69f3
 8004a48:	40013800 	.word	0x40013800
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	40004400 	.word	0x40004400
 8004a54:	40004800 	.word	0x40004800
 8004a58:	007a1200 	.word	0x007a1200

08004a5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00a      	beq.n	8004aa8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00a      	beq.n	8004aca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ace:	f003 0308 	and.w	r3, r3, #8
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af0:	f003 0310 	and.w	r3, r3, #16
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00a      	beq.n	8004b0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b12:	f003 0320 	and.w	r3, r3, #32
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d01a      	beq.n	8004b72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b5a:	d10a      	bne.n	8004b72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	605a      	str	r2, [r3, #4]
  }
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b098      	sub	sp, #96	@ 0x60
 8004ba4:	af02      	add	r7, sp, #8
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bb0:	f7fc fad8 	bl	8001164 <HAL_GetTick>
 8004bb4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0308 	and.w	r3, r3, #8
 8004bc0:	2b08      	cmp	r3, #8
 8004bc2:	d12e      	bne.n	8004c22 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bc4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bc8:	9300      	str	r3, [sp, #0]
 8004bca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f88c 	bl	8004cf0 <UART_WaitOnFlagUntilTimeout>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d021      	beq.n	8004c22 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be6:	e853 3f00 	ldrex	r3, [r3]
 8004bea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bf2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bfe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c04:	e841 2300 	strex	r3, r2, [r1]
 8004c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1e6      	bne.n	8004bde <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2220      	movs	r2, #32
 8004c14:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e062      	b.n	8004ce8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b04      	cmp	r3, #4
 8004c2e:	d149      	bne.n	8004cc4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f856 	bl	8004cf0 <UART_WaitOnFlagUntilTimeout>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d03c      	beq.n	8004cc4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c52:	e853 3f00 	ldrex	r3, [r3]
 8004c56:	623b      	str	r3, [r7, #32]
   return(result);
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	461a      	mov	r2, r3
 8004c66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c68:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c70:	e841 2300 	strex	r3, r2, [r1]
 8004c74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1e6      	bne.n	8004c4a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	3308      	adds	r3, #8
 8004c82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	e853 3f00 	ldrex	r3, [r3]
 8004c8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f023 0301 	bic.w	r3, r3, #1
 8004c92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3308      	adds	r3, #8
 8004c9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c9c:	61fa      	str	r2, [r7, #28]
 8004c9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca0:	69b9      	ldr	r1, [r7, #24]
 8004ca2:	69fa      	ldr	r2, [r7, #28]
 8004ca4:	e841 2300 	strex	r3, r2, [r1]
 8004ca8:	617b      	str	r3, [r7, #20]
   return(result);
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1e5      	bne.n	8004c7c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e011      	b.n	8004ce8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3758      	adds	r7, #88	@ 0x58
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	603b      	str	r3, [r7, #0]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d00:	e049      	b.n	8004d96 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d08:	d045      	beq.n	8004d96 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d0a:	f7fc fa2b 	bl	8001164 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d302      	bcc.n	8004d20 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e048      	b.n	8004db6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0304 	and.w	r3, r3, #4
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d031      	beq.n	8004d96 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d110      	bne.n	8004d62 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2208      	movs	r2, #8
 8004d46:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f000 f8ff 	bl	8004f4c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2208      	movs	r2, #8
 8004d52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e029      	b.n	8004db6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69db      	ldr	r3, [r3, #28]
 8004d68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d70:	d111      	bne.n	8004d96 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 f8e5 	bl	8004f4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e00f      	b.n	8004db6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69da      	ldr	r2, [r3, #28]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	4013      	ands	r3, r2
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	bf0c      	ite	eq
 8004da6:	2301      	moveq	r3, #1
 8004da8:	2300      	movne	r3, #0
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	461a      	mov	r2, r3
 8004dae:	79fb      	ldrb	r3, [r7, #7]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d0a6      	beq.n	8004d02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
	...

08004dc0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b097      	sub	sp, #92	@ 0x5c
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	88fa      	ldrh	r2, [r7, #6]
 8004dd8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	88fa      	ldrh	r2, [r7, #6]
 8004de0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004df2:	d10e      	bne.n	8004e12 <UART_Start_Receive_IT+0x52>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d105      	bne.n	8004e08 <UART_Start_Receive_IT+0x48>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004e02:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e06:	e02d      	b.n	8004e64 <UART_Start_Receive_IT+0xa4>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	22ff      	movs	r2, #255	@ 0xff
 8004e0c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e10:	e028      	b.n	8004e64 <UART_Start_Receive_IT+0xa4>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10d      	bne.n	8004e36 <UART_Start_Receive_IT+0x76>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d104      	bne.n	8004e2c <UART_Start_Receive_IT+0x6c>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	22ff      	movs	r2, #255	@ 0xff
 8004e26:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e2a:	e01b      	b.n	8004e64 <UART_Start_Receive_IT+0xa4>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	227f      	movs	r2, #127	@ 0x7f
 8004e30:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e34:	e016      	b.n	8004e64 <UART_Start_Receive_IT+0xa4>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e3e:	d10d      	bne.n	8004e5c <UART_Start_Receive_IT+0x9c>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d104      	bne.n	8004e52 <UART_Start_Receive_IT+0x92>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	227f      	movs	r2, #127	@ 0x7f
 8004e4c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e50:	e008      	b.n	8004e64 <UART_Start_Receive_IT+0xa4>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	223f      	movs	r2, #63	@ 0x3f
 8004e56:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e5a:	e003      	b.n	8004e64 <UART_Start_Receive_IT+0xa4>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2222      	movs	r2, #34	@ 0x22
 8004e70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	3308      	adds	r3, #8
 8004e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e7e:	e853 3f00 	ldrex	r3, [r3]
 8004e82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e86:	f043 0301 	orr.w	r3, r3, #1
 8004e8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	3308      	adds	r3, #8
 8004e92:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004e94:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004e96:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e98:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004e9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e9c:	e841 2300 	strex	r3, r2, [r1]
 8004ea0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004ea2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1e5      	bne.n	8004e74 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eb0:	d107      	bne.n	8004ec2 <UART_Start_Receive_IT+0x102>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d103      	bne.n	8004ec2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	4a21      	ldr	r2, [pc, #132]	@ (8004f44 <UART_Start_Receive_IT+0x184>)
 8004ebe:	669a      	str	r2, [r3, #104]	@ 0x68
 8004ec0:	e002      	b.n	8004ec8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	4a20      	ldr	r2, [pc, #128]	@ (8004f48 <UART_Start_Receive_IT+0x188>)
 8004ec6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d019      	beq.n	8004f04 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed8:	e853 3f00 	ldrex	r3, [r3]
 8004edc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004ee4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	461a      	mov	r2, r3
 8004eec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004eee:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ef0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004ef4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ef6:	e841 2300 	strex	r3, r2, [r1]
 8004efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1e6      	bne.n	8004ed0 <UART_Start_Receive_IT+0x110>
 8004f02:	e018      	b.n	8004f36 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	e853 3f00 	ldrex	r3, [r3]
 8004f10:	613b      	str	r3, [r7, #16]
   return(result);
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	f043 0320 	orr.w	r3, r3, #32
 8004f18:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f22:	623b      	str	r3, [r7, #32]
 8004f24:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f26:	69f9      	ldr	r1, [r7, #28]
 8004f28:	6a3a      	ldr	r2, [r7, #32]
 8004f2a:	e841 2300 	strex	r3, r2, [r1]
 8004f2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1e6      	bne.n	8004f04 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	375c      	adds	r7, #92	@ 0x5c
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr
 8004f44:	0800523d 	.word	0x0800523d
 8004f48:	08005095 	.word	0x08005095

08004f4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b095      	sub	sp, #84	@ 0x54
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f5c:	e853 3f00 	ldrex	r3, [r3]
 8004f60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f72:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f74:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f7a:	e841 2300 	strex	r3, r2, [r1]
 8004f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1e6      	bne.n	8004f54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	3308      	adds	r3, #8
 8004f8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	e853 3f00 	ldrex	r3, [r3]
 8004f94:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	f023 0301 	bic.w	r3, r3, #1
 8004f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3308      	adds	r3, #8
 8004fa4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fa6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004faa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fae:	e841 2300 	strex	r3, r2, [r1]
 8004fb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1e5      	bne.n	8004f86 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d118      	bne.n	8004ff4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	e853 3f00 	ldrex	r3, [r3]
 8004fce:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f023 0310 	bic.w	r3, r3, #16
 8004fd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	461a      	mov	r2, r3
 8004fde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fe0:	61bb      	str	r3, [r7, #24]
 8004fe2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe4:	6979      	ldr	r1, [r7, #20]
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	e841 2300 	strex	r3, r2, [r1]
 8004fec:	613b      	str	r3, [r7, #16]
   return(result);
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1e6      	bne.n	8004fc2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005008:	bf00      	nop
 800500a:	3754      	adds	r7, #84	@ 0x54
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005020:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f7ff fbc6 	bl	80047c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005038:	bf00      	nop
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b088      	sub	sp, #32
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	e853 3f00 	ldrex	r3, [r3]
 8005054:	60bb      	str	r3, [r7, #8]
   return(result);
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800505c:	61fb      	str	r3, [r7, #28]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	461a      	mov	r2, r3
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	61bb      	str	r3, [r7, #24]
 8005068:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506a:	6979      	ldr	r1, [r7, #20]
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	e841 2300 	strex	r3, r2, [r1]
 8005072:	613b      	str	r3, [r7, #16]
   return(result);
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1e6      	bne.n	8005048 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2220      	movs	r2, #32
 800507e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7ff fb92 	bl	80047b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800508c:	bf00      	nop
 800508e:	3720      	adds	r7, #32
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b09c      	sub	sp, #112	@ 0x70
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80050a2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050ac:	2b22      	cmp	r3, #34	@ 0x22
 80050ae:	f040 80b9 	bne.w	8005224 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80050b8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80050bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80050c0:	b2d9      	uxtb	r1, r3
 80050c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80050c6:	b2da      	uxtb	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050cc:	400a      	ands	r2, r1
 80050ce:	b2d2      	uxtb	r2, r2
 80050d0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d6:	1c5a      	adds	r2, r3, #1
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f040 809c 	bne.w	8005234 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005102:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005104:	e853 3f00 	ldrex	r3, [r3]
 8005108:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800510a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800510c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005110:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	461a      	mov	r2, r3
 8005118:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800511a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800511c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005120:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005122:	e841 2300 	strex	r3, r2, [r1]
 8005126:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005128:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1e6      	bne.n	80050fc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3308      	adds	r3, #8
 8005134:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005138:	e853 3f00 	ldrex	r3, [r3]
 800513c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800513e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005140:	f023 0301 	bic.w	r3, r3, #1
 8005144:	667b      	str	r3, [r7, #100]	@ 0x64
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	3308      	adds	r3, #8
 800514c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800514e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005150:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005152:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005154:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005156:	e841 2300 	strex	r3, r2, [r1]
 800515a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800515c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1e5      	bne.n	800512e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2220      	movs	r2, #32
 8005166:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d018      	beq.n	80051b6 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518c:	e853 3f00 	ldrex	r3, [r3]
 8005190:	623b      	str	r3, [r7, #32]
   return(result);
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005198:	663b      	str	r3, [r7, #96]	@ 0x60
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80051a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051aa:	e841 2300 	strex	r3, r2, [r1]
 80051ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e6      	bne.n	8005184 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d12e      	bne.n	800521c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	e853 3f00 	ldrex	r3, [r3]
 80051d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f023 0310 	bic.w	r3, r3, #16
 80051d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	461a      	mov	r2, r3
 80051e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051e2:	61fb      	str	r3, [r7, #28]
 80051e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e6:	69b9      	ldr	r1, [r7, #24]
 80051e8:	69fa      	ldr	r2, [r7, #28]
 80051ea:	e841 2300 	strex	r3, r2, [r1]
 80051ee:	617b      	str	r3, [r7, #20]
   return(result);
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1e6      	bne.n	80051c4 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	69db      	ldr	r3, [r3, #28]
 80051fc:	f003 0310 	and.w	r3, r3, #16
 8005200:	2b10      	cmp	r3, #16
 8005202:	d103      	bne.n	800520c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2210      	movs	r2, #16
 800520a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005212:	4619      	mov	r1, r3
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f7ff fadf 	bl	80047d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800521a:	e00b      	b.n	8005234 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7fb fc15 	bl	8000a4c <HAL_UART_RxCpltCallback>
}
 8005222:	e007      	b.n	8005234 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699a      	ldr	r2, [r3, #24]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0208 	orr.w	r2, r2, #8
 8005232:	619a      	str	r2, [r3, #24]
}
 8005234:	bf00      	nop
 8005236:	3770      	adds	r7, #112	@ 0x70
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b09c      	sub	sp, #112	@ 0x70
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800524a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005254:	2b22      	cmp	r3, #34	@ 0x22
 8005256:	f040 80b9 	bne.w	80053cc <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005260:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005268:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800526a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800526e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005272:	4013      	ands	r3, r2
 8005274:	b29a      	uxth	r2, r3
 8005276:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005278:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800527e:	1c9a      	adds	r2, r3, #2
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800528a:	b29b      	uxth	r3, r3
 800528c:	3b01      	subs	r3, #1
 800528e:	b29a      	uxth	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800529c:	b29b      	uxth	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f040 809c 	bne.w	80053dc <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052ac:	e853 3f00 	ldrex	r3, [r3]
 80052b0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80052b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	461a      	mov	r2, r3
 80052c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80052c4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80052c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80052ca:	e841 2300 	strex	r3, r2, [r1]
 80052ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80052d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1e6      	bne.n	80052a4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3308      	adds	r3, #8
 80052dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052e0:	e853 3f00 	ldrex	r3, [r3]
 80052e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e8:	f023 0301 	bic.w	r3, r3, #1
 80052ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	3308      	adds	r3, #8
 80052f4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80052f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80052f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052fe:	e841 2300 	strex	r3, r2, [r1]
 8005302:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1e5      	bne.n	80052d6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2220      	movs	r2, #32
 800530e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d018      	beq.n	800535e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005332:	6a3b      	ldr	r3, [r7, #32]
 8005334:	e853 3f00 	ldrex	r3, [r3]
 8005338:	61fb      	str	r3, [r7, #28]
   return(result);
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005340:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	461a      	mov	r2, r3
 8005348:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800534a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800534c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005350:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005352:	e841 2300 	strex	r3, r2, [r1]
 8005356:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1e6      	bne.n	800532c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005362:	2b01      	cmp	r3, #1
 8005364:	d12e      	bne.n	80053c4 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	e853 3f00 	ldrex	r3, [r3]
 8005378:	60bb      	str	r3, [r7, #8]
   return(result);
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	f023 0310 	bic.w	r3, r3, #16
 8005380:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	461a      	mov	r2, r3
 8005388:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800538a:	61bb      	str	r3, [r7, #24]
 800538c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538e:	6979      	ldr	r1, [r7, #20]
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	e841 2300 	strex	r3, r2, [r1]
 8005396:	613b      	str	r3, [r7, #16]
   return(result);
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1e6      	bne.n	800536c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	f003 0310 	and.w	r3, r3, #16
 80053a8:	2b10      	cmp	r3, #16
 80053aa:	d103      	bne.n	80053b4 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2210      	movs	r2, #16
 80053b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80053ba:	4619      	mov	r1, r3
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f7ff fa0b 	bl	80047d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053c2:	e00b      	b.n	80053dc <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f7fb fb41 	bl	8000a4c <HAL_UART_RxCpltCallback>
}
 80053ca:	e007      	b.n	80053dc <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699a      	ldr	r2, [r3, #24]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 0208 	orr.w	r2, r2, #8
 80053da:	619a      	str	r2, [r3, #24]
}
 80053dc:	bf00      	nop
 80053de:	3770      	adds	r7, #112	@ 0x70
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <srand>:
 80053f8:	b538      	push	{r3, r4, r5, lr}
 80053fa:	4b10      	ldr	r3, [pc, #64]	@ (800543c <srand+0x44>)
 80053fc:	681d      	ldr	r5, [r3, #0]
 80053fe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005400:	4604      	mov	r4, r0
 8005402:	b9b3      	cbnz	r3, 8005432 <srand+0x3a>
 8005404:	2018      	movs	r0, #24
 8005406:	f000 fa3d 	bl	8005884 <malloc>
 800540a:	4602      	mov	r2, r0
 800540c:	6328      	str	r0, [r5, #48]	@ 0x30
 800540e:	b920      	cbnz	r0, 800541a <srand+0x22>
 8005410:	4b0b      	ldr	r3, [pc, #44]	@ (8005440 <srand+0x48>)
 8005412:	480c      	ldr	r0, [pc, #48]	@ (8005444 <srand+0x4c>)
 8005414:	2146      	movs	r1, #70	@ 0x46
 8005416:	f000 f9cd 	bl	80057b4 <__assert_func>
 800541a:	490b      	ldr	r1, [pc, #44]	@ (8005448 <srand+0x50>)
 800541c:	4b0b      	ldr	r3, [pc, #44]	@ (800544c <srand+0x54>)
 800541e:	e9c0 1300 	strd	r1, r3, [r0]
 8005422:	4b0b      	ldr	r3, [pc, #44]	@ (8005450 <srand+0x58>)
 8005424:	6083      	str	r3, [r0, #8]
 8005426:	230b      	movs	r3, #11
 8005428:	8183      	strh	r3, [r0, #12]
 800542a:	2100      	movs	r1, #0
 800542c:	2001      	movs	r0, #1
 800542e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005432:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005434:	2200      	movs	r2, #0
 8005436:	611c      	str	r4, [r3, #16]
 8005438:	615a      	str	r2, [r3, #20]
 800543a:	bd38      	pop	{r3, r4, r5, pc}
 800543c:	20000018 	.word	0x20000018
 8005440:	08006450 	.word	0x08006450
 8005444:	08006467 	.word	0x08006467
 8005448:	abcd330e 	.word	0xabcd330e
 800544c:	e66d1234 	.word	0xe66d1234
 8005450:	0005deec 	.word	0x0005deec

08005454 <std>:
 8005454:	2300      	movs	r3, #0
 8005456:	b510      	push	{r4, lr}
 8005458:	4604      	mov	r4, r0
 800545a:	e9c0 3300 	strd	r3, r3, [r0]
 800545e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005462:	6083      	str	r3, [r0, #8]
 8005464:	8181      	strh	r1, [r0, #12]
 8005466:	6643      	str	r3, [r0, #100]	@ 0x64
 8005468:	81c2      	strh	r2, [r0, #14]
 800546a:	6183      	str	r3, [r0, #24]
 800546c:	4619      	mov	r1, r3
 800546e:	2208      	movs	r2, #8
 8005470:	305c      	adds	r0, #92	@ 0x5c
 8005472:	f000 f8f4 	bl	800565e <memset>
 8005476:	4b0d      	ldr	r3, [pc, #52]	@ (80054ac <std+0x58>)
 8005478:	6263      	str	r3, [r4, #36]	@ 0x24
 800547a:	4b0d      	ldr	r3, [pc, #52]	@ (80054b0 <std+0x5c>)
 800547c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800547e:	4b0d      	ldr	r3, [pc, #52]	@ (80054b4 <std+0x60>)
 8005480:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005482:	4b0d      	ldr	r3, [pc, #52]	@ (80054b8 <std+0x64>)
 8005484:	6323      	str	r3, [r4, #48]	@ 0x30
 8005486:	4b0d      	ldr	r3, [pc, #52]	@ (80054bc <std+0x68>)
 8005488:	6224      	str	r4, [r4, #32]
 800548a:	429c      	cmp	r4, r3
 800548c:	d006      	beq.n	800549c <std+0x48>
 800548e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005492:	4294      	cmp	r4, r2
 8005494:	d002      	beq.n	800549c <std+0x48>
 8005496:	33d0      	adds	r3, #208	@ 0xd0
 8005498:	429c      	cmp	r4, r3
 800549a:	d105      	bne.n	80054a8 <std+0x54>
 800549c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80054a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054a4:	f000 b982 	b.w	80057ac <__retarget_lock_init_recursive>
 80054a8:	bd10      	pop	{r4, pc}
 80054aa:	bf00      	nop
 80054ac:	080055d9 	.word	0x080055d9
 80054b0:	080055fb 	.word	0x080055fb
 80054b4:	08005633 	.word	0x08005633
 80054b8:	08005657 	.word	0x08005657
 80054bc:	20000290 	.word	0x20000290

080054c0 <stdio_exit_handler>:
 80054c0:	4a02      	ldr	r2, [pc, #8]	@ (80054cc <stdio_exit_handler+0xc>)
 80054c2:	4903      	ldr	r1, [pc, #12]	@ (80054d0 <stdio_exit_handler+0x10>)
 80054c4:	4803      	ldr	r0, [pc, #12]	@ (80054d4 <stdio_exit_handler+0x14>)
 80054c6:	f000 b869 	b.w	800559c <_fwalk_sglue>
 80054ca:	bf00      	nop
 80054cc:	2000000c 	.word	0x2000000c
 80054d0:	08005af9 	.word	0x08005af9
 80054d4:	2000001c 	.word	0x2000001c

080054d8 <cleanup_stdio>:
 80054d8:	6841      	ldr	r1, [r0, #4]
 80054da:	4b0c      	ldr	r3, [pc, #48]	@ (800550c <cleanup_stdio+0x34>)
 80054dc:	4299      	cmp	r1, r3
 80054de:	b510      	push	{r4, lr}
 80054e0:	4604      	mov	r4, r0
 80054e2:	d001      	beq.n	80054e8 <cleanup_stdio+0x10>
 80054e4:	f000 fb08 	bl	8005af8 <_fflush_r>
 80054e8:	68a1      	ldr	r1, [r4, #8]
 80054ea:	4b09      	ldr	r3, [pc, #36]	@ (8005510 <cleanup_stdio+0x38>)
 80054ec:	4299      	cmp	r1, r3
 80054ee:	d002      	beq.n	80054f6 <cleanup_stdio+0x1e>
 80054f0:	4620      	mov	r0, r4
 80054f2:	f000 fb01 	bl	8005af8 <_fflush_r>
 80054f6:	68e1      	ldr	r1, [r4, #12]
 80054f8:	4b06      	ldr	r3, [pc, #24]	@ (8005514 <cleanup_stdio+0x3c>)
 80054fa:	4299      	cmp	r1, r3
 80054fc:	d004      	beq.n	8005508 <cleanup_stdio+0x30>
 80054fe:	4620      	mov	r0, r4
 8005500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005504:	f000 baf8 	b.w	8005af8 <_fflush_r>
 8005508:	bd10      	pop	{r4, pc}
 800550a:	bf00      	nop
 800550c:	20000290 	.word	0x20000290
 8005510:	200002f8 	.word	0x200002f8
 8005514:	20000360 	.word	0x20000360

08005518 <global_stdio_init.part.0>:
 8005518:	b510      	push	{r4, lr}
 800551a:	4b0b      	ldr	r3, [pc, #44]	@ (8005548 <global_stdio_init.part.0+0x30>)
 800551c:	4c0b      	ldr	r4, [pc, #44]	@ (800554c <global_stdio_init.part.0+0x34>)
 800551e:	4a0c      	ldr	r2, [pc, #48]	@ (8005550 <global_stdio_init.part.0+0x38>)
 8005520:	601a      	str	r2, [r3, #0]
 8005522:	4620      	mov	r0, r4
 8005524:	2200      	movs	r2, #0
 8005526:	2104      	movs	r1, #4
 8005528:	f7ff ff94 	bl	8005454 <std>
 800552c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005530:	2201      	movs	r2, #1
 8005532:	2109      	movs	r1, #9
 8005534:	f7ff ff8e 	bl	8005454 <std>
 8005538:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800553c:	2202      	movs	r2, #2
 800553e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005542:	2112      	movs	r1, #18
 8005544:	f7ff bf86 	b.w	8005454 <std>
 8005548:	200003c8 	.word	0x200003c8
 800554c:	20000290 	.word	0x20000290
 8005550:	080054c1 	.word	0x080054c1

08005554 <__sfp_lock_acquire>:
 8005554:	4801      	ldr	r0, [pc, #4]	@ (800555c <__sfp_lock_acquire+0x8>)
 8005556:	f000 b92a 	b.w	80057ae <__retarget_lock_acquire_recursive>
 800555a:	bf00      	nop
 800555c:	200003d1 	.word	0x200003d1

08005560 <__sfp_lock_release>:
 8005560:	4801      	ldr	r0, [pc, #4]	@ (8005568 <__sfp_lock_release+0x8>)
 8005562:	f000 b925 	b.w	80057b0 <__retarget_lock_release_recursive>
 8005566:	bf00      	nop
 8005568:	200003d1 	.word	0x200003d1

0800556c <__sinit>:
 800556c:	b510      	push	{r4, lr}
 800556e:	4604      	mov	r4, r0
 8005570:	f7ff fff0 	bl	8005554 <__sfp_lock_acquire>
 8005574:	6a23      	ldr	r3, [r4, #32]
 8005576:	b11b      	cbz	r3, 8005580 <__sinit+0x14>
 8005578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800557c:	f7ff bff0 	b.w	8005560 <__sfp_lock_release>
 8005580:	4b04      	ldr	r3, [pc, #16]	@ (8005594 <__sinit+0x28>)
 8005582:	6223      	str	r3, [r4, #32]
 8005584:	4b04      	ldr	r3, [pc, #16]	@ (8005598 <__sinit+0x2c>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1f5      	bne.n	8005578 <__sinit+0xc>
 800558c:	f7ff ffc4 	bl	8005518 <global_stdio_init.part.0>
 8005590:	e7f2      	b.n	8005578 <__sinit+0xc>
 8005592:	bf00      	nop
 8005594:	080054d9 	.word	0x080054d9
 8005598:	200003c8 	.word	0x200003c8

0800559c <_fwalk_sglue>:
 800559c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055a0:	4607      	mov	r7, r0
 80055a2:	4688      	mov	r8, r1
 80055a4:	4614      	mov	r4, r2
 80055a6:	2600      	movs	r6, #0
 80055a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80055ac:	f1b9 0901 	subs.w	r9, r9, #1
 80055b0:	d505      	bpl.n	80055be <_fwalk_sglue+0x22>
 80055b2:	6824      	ldr	r4, [r4, #0]
 80055b4:	2c00      	cmp	r4, #0
 80055b6:	d1f7      	bne.n	80055a8 <_fwalk_sglue+0xc>
 80055b8:	4630      	mov	r0, r6
 80055ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055be:	89ab      	ldrh	r3, [r5, #12]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d907      	bls.n	80055d4 <_fwalk_sglue+0x38>
 80055c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055c8:	3301      	adds	r3, #1
 80055ca:	d003      	beq.n	80055d4 <_fwalk_sglue+0x38>
 80055cc:	4629      	mov	r1, r5
 80055ce:	4638      	mov	r0, r7
 80055d0:	47c0      	blx	r8
 80055d2:	4306      	orrs	r6, r0
 80055d4:	3568      	adds	r5, #104	@ 0x68
 80055d6:	e7e9      	b.n	80055ac <_fwalk_sglue+0x10>

080055d8 <__sread>:
 80055d8:	b510      	push	{r4, lr}
 80055da:	460c      	mov	r4, r1
 80055dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055e0:	f000 f896 	bl	8005710 <_read_r>
 80055e4:	2800      	cmp	r0, #0
 80055e6:	bfab      	itete	ge
 80055e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80055ea:	89a3      	ldrhlt	r3, [r4, #12]
 80055ec:	181b      	addge	r3, r3, r0
 80055ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80055f2:	bfac      	ite	ge
 80055f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80055f6:	81a3      	strhlt	r3, [r4, #12]
 80055f8:	bd10      	pop	{r4, pc}

080055fa <__swrite>:
 80055fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055fe:	461f      	mov	r7, r3
 8005600:	898b      	ldrh	r3, [r1, #12]
 8005602:	05db      	lsls	r3, r3, #23
 8005604:	4605      	mov	r5, r0
 8005606:	460c      	mov	r4, r1
 8005608:	4616      	mov	r6, r2
 800560a:	d505      	bpl.n	8005618 <__swrite+0x1e>
 800560c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005610:	2302      	movs	r3, #2
 8005612:	2200      	movs	r2, #0
 8005614:	f000 f86a 	bl	80056ec <_lseek_r>
 8005618:	89a3      	ldrh	r3, [r4, #12]
 800561a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800561e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005622:	81a3      	strh	r3, [r4, #12]
 8005624:	4632      	mov	r2, r6
 8005626:	463b      	mov	r3, r7
 8005628:	4628      	mov	r0, r5
 800562a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800562e:	f000 b881 	b.w	8005734 <_write_r>

08005632 <__sseek>:
 8005632:	b510      	push	{r4, lr}
 8005634:	460c      	mov	r4, r1
 8005636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800563a:	f000 f857 	bl	80056ec <_lseek_r>
 800563e:	1c43      	adds	r3, r0, #1
 8005640:	89a3      	ldrh	r3, [r4, #12]
 8005642:	bf15      	itete	ne
 8005644:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005646:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800564a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800564e:	81a3      	strheq	r3, [r4, #12]
 8005650:	bf18      	it	ne
 8005652:	81a3      	strhne	r3, [r4, #12]
 8005654:	bd10      	pop	{r4, pc}

08005656 <__sclose>:
 8005656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800565a:	f000 b825 	b.w	80056a8 <_close_r>

0800565e <memset>:
 800565e:	4402      	add	r2, r0
 8005660:	4603      	mov	r3, r0
 8005662:	4293      	cmp	r3, r2
 8005664:	d100      	bne.n	8005668 <memset+0xa>
 8005666:	4770      	bx	lr
 8005668:	f803 1b01 	strb.w	r1, [r3], #1
 800566c:	e7f9      	b.n	8005662 <memset+0x4>
	...

08005670 <time>:
 8005670:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8005672:	4b0c      	ldr	r3, [pc, #48]	@ (80056a4 <time+0x34>)
 8005674:	f04f 36ff 	mov.w	r6, #4294967295
 8005678:	f04f 37ff 	mov.w	r7, #4294967295
 800567c:	4669      	mov	r1, sp
 800567e:	4604      	mov	r4, r0
 8005680:	2200      	movs	r2, #0
 8005682:	6818      	ldr	r0, [r3, #0]
 8005684:	e9cd 6700 	strd	r6, r7, [sp]
 8005688:	f000 f81e 	bl	80056c8 <_gettimeofday_r>
 800568c:	2800      	cmp	r0, #0
 800568e:	bfb8      	it	lt
 8005690:	e9cd 6700 	strdlt	r6, r7, [sp]
 8005694:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005698:	b10c      	cbz	r4, 800569e <time+0x2e>
 800569a:	e9c4 0100 	strd	r0, r1, [r4]
 800569e:	b004      	add	sp, #16
 80056a0:	bdd0      	pop	{r4, r6, r7, pc}
 80056a2:	bf00      	nop
 80056a4:	20000018 	.word	0x20000018

080056a8 <_close_r>:
 80056a8:	b538      	push	{r3, r4, r5, lr}
 80056aa:	4d06      	ldr	r5, [pc, #24]	@ (80056c4 <_close_r+0x1c>)
 80056ac:	2300      	movs	r3, #0
 80056ae:	4604      	mov	r4, r0
 80056b0:	4608      	mov	r0, r1
 80056b2:	602b      	str	r3, [r5, #0]
 80056b4:	f7fb fc56 	bl	8000f64 <_close>
 80056b8:	1c43      	adds	r3, r0, #1
 80056ba:	d102      	bne.n	80056c2 <_close_r+0x1a>
 80056bc:	682b      	ldr	r3, [r5, #0]
 80056be:	b103      	cbz	r3, 80056c2 <_close_r+0x1a>
 80056c0:	6023      	str	r3, [r4, #0]
 80056c2:	bd38      	pop	{r3, r4, r5, pc}
 80056c4:	200003cc 	.word	0x200003cc

080056c8 <_gettimeofday_r>:
 80056c8:	b538      	push	{r3, r4, r5, lr}
 80056ca:	4d07      	ldr	r5, [pc, #28]	@ (80056e8 <_gettimeofday_r+0x20>)
 80056cc:	2300      	movs	r3, #0
 80056ce:	4604      	mov	r4, r0
 80056d0:	4608      	mov	r0, r1
 80056d2:	4611      	mov	r1, r2
 80056d4:	602b      	str	r3, [r5, #0]
 80056d6:	f000 fe8b 	bl	80063f0 <_gettimeofday>
 80056da:	1c43      	adds	r3, r0, #1
 80056dc:	d102      	bne.n	80056e4 <_gettimeofday_r+0x1c>
 80056de:	682b      	ldr	r3, [r5, #0]
 80056e0:	b103      	cbz	r3, 80056e4 <_gettimeofday_r+0x1c>
 80056e2:	6023      	str	r3, [r4, #0]
 80056e4:	bd38      	pop	{r3, r4, r5, pc}
 80056e6:	bf00      	nop
 80056e8:	200003cc 	.word	0x200003cc

080056ec <_lseek_r>:
 80056ec:	b538      	push	{r3, r4, r5, lr}
 80056ee:	4d07      	ldr	r5, [pc, #28]	@ (800570c <_lseek_r+0x20>)
 80056f0:	4604      	mov	r4, r0
 80056f2:	4608      	mov	r0, r1
 80056f4:	4611      	mov	r1, r2
 80056f6:	2200      	movs	r2, #0
 80056f8:	602a      	str	r2, [r5, #0]
 80056fa:	461a      	mov	r2, r3
 80056fc:	f7fb fc59 	bl	8000fb2 <_lseek>
 8005700:	1c43      	adds	r3, r0, #1
 8005702:	d102      	bne.n	800570a <_lseek_r+0x1e>
 8005704:	682b      	ldr	r3, [r5, #0]
 8005706:	b103      	cbz	r3, 800570a <_lseek_r+0x1e>
 8005708:	6023      	str	r3, [r4, #0]
 800570a:	bd38      	pop	{r3, r4, r5, pc}
 800570c:	200003cc 	.word	0x200003cc

08005710 <_read_r>:
 8005710:	b538      	push	{r3, r4, r5, lr}
 8005712:	4d07      	ldr	r5, [pc, #28]	@ (8005730 <_read_r+0x20>)
 8005714:	4604      	mov	r4, r0
 8005716:	4608      	mov	r0, r1
 8005718:	4611      	mov	r1, r2
 800571a:	2200      	movs	r2, #0
 800571c:	602a      	str	r2, [r5, #0]
 800571e:	461a      	mov	r2, r3
 8005720:	f7fb fbe7 	bl	8000ef2 <_read>
 8005724:	1c43      	adds	r3, r0, #1
 8005726:	d102      	bne.n	800572e <_read_r+0x1e>
 8005728:	682b      	ldr	r3, [r5, #0]
 800572a:	b103      	cbz	r3, 800572e <_read_r+0x1e>
 800572c:	6023      	str	r3, [r4, #0]
 800572e:	bd38      	pop	{r3, r4, r5, pc}
 8005730:	200003cc 	.word	0x200003cc

08005734 <_write_r>:
 8005734:	b538      	push	{r3, r4, r5, lr}
 8005736:	4d07      	ldr	r5, [pc, #28]	@ (8005754 <_write_r+0x20>)
 8005738:	4604      	mov	r4, r0
 800573a:	4608      	mov	r0, r1
 800573c:	4611      	mov	r1, r2
 800573e:	2200      	movs	r2, #0
 8005740:	602a      	str	r2, [r5, #0]
 8005742:	461a      	mov	r2, r3
 8005744:	f7fb fbf2 	bl	8000f2c <_write>
 8005748:	1c43      	adds	r3, r0, #1
 800574a:	d102      	bne.n	8005752 <_write_r+0x1e>
 800574c:	682b      	ldr	r3, [r5, #0]
 800574e:	b103      	cbz	r3, 8005752 <_write_r+0x1e>
 8005750:	6023      	str	r3, [r4, #0]
 8005752:	bd38      	pop	{r3, r4, r5, pc}
 8005754:	200003cc 	.word	0x200003cc

08005758 <__errno>:
 8005758:	4b01      	ldr	r3, [pc, #4]	@ (8005760 <__errno+0x8>)
 800575a:	6818      	ldr	r0, [r3, #0]
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	20000018 	.word	0x20000018

08005764 <__libc_init_array>:
 8005764:	b570      	push	{r4, r5, r6, lr}
 8005766:	4d0d      	ldr	r5, [pc, #52]	@ (800579c <__libc_init_array+0x38>)
 8005768:	4c0d      	ldr	r4, [pc, #52]	@ (80057a0 <__libc_init_array+0x3c>)
 800576a:	1b64      	subs	r4, r4, r5
 800576c:	10a4      	asrs	r4, r4, #2
 800576e:	2600      	movs	r6, #0
 8005770:	42a6      	cmp	r6, r4
 8005772:	d109      	bne.n	8005788 <__libc_init_array+0x24>
 8005774:	4d0b      	ldr	r5, [pc, #44]	@ (80057a4 <__libc_init_array+0x40>)
 8005776:	4c0c      	ldr	r4, [pc, #48]	@ (80057a8 <__libc_init_array+0x44>)
 8005778:	f000 fe42 	bl	8006400 <_init>
 800577c:	1b64      	subs	r4, r4, r5
 800577e:	10a4      	asrs	r4, r4, #2
 8005780:	2600      	movs	r6, #0
 8005782:	42a6      	cmp	r6, r4
 8005784:	d105      	bne.n	8005792 <__libc_init_array+0x2e>
 8005786:	bd70      	pop	{r4, r5, r6, pc}
 8005788:	f855 3b04 	ldr.w	r3, [r5], #4
 800578c:	4798      	blx	r3
 800578e:	3601      	adds	r6, #1
 8005790:	e7ee      	b.n	8005770 <__libc_init_array+0xc>
 8005792:	f855 3b04 	ldr.w	r3, [r5], #4
 8005796:	4798      	blx	r3
 8005798:	3601      	adds	r6, #1
 800579a:	e7f2      	b.n	8005782 <__libc_init_array+0x1e>
 800579c:	08006538 	.word	0x08006538
 80057a0:	08006538 	.word	0x08006538
 80057a4:	08006538 	.word	0x08006538
 80057a8:	0800653c 	.word	0x0800653c

080057ac <__retarget_lock_init_recursive>:
 80057ac:	4770      	bx	lr

080057ae <__retarget_lock_acquire_recursive>:
 80057ae:	4770      	bx	lr

080057b0 <__retarget_lock_release_recursive>:
 80057b0:	4770      	bx	lr
	...

080057b4 <__assert_func>:
 80057b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80057b6:	4614      	mov	r4, r2
 80057b8:	461a      	mov	r2, r3
 80057ba:	4b09      	ldr	r3, [pc, #36]	@ (80057e0 <__assert_func+0x2c>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4605      	mov	r5, r0
 80057c0:	68d8      	ldr	r0, [r3, #12]
 80057c2:	b954      	cbnz	r4, 80057da <__assert_func+0x26>
 80057c4:	4b07      	ldr	r3, [pc, #28]	@ (80057e4 <__assert_func+0x30>)
 80057c6:	461c      	mov	r4, r3
 80057c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80057cc:	9100      	str	r1, [sp, #0]
 80057ce:	462b      	mov	r3, r5
 80057d0:	4905      	ldr	r1, [pc, #20]	@ (80057e8 <__assert_func+0x34>)
 80057d2:	f000 f9b9 	bl	8005b48 <fiprintf>
 80057d6:	f000 f9d9 	bl	8005b8c <abort>
 80057da:	4b04      	ldr	r3, [pc, #16]	@ (80057ec <__assert_func+0x38>)
 80057dc:	e7f4      	b.n	80057c8 <__assert_func+0x14>
 80057de:	bf00      	nop
 80057e0:	20000018 	.word	0x20000018
 80057e4:	080064fa 	.word	0x080064fa
 80057e8:	080064cc 	.word	0x080064cc
 80057ec:	080064bf 	.word	0x080064bf

080057f0 <_free_r>:
 80057f0:	b538      	push	{r3, r4, r5, lr}
 80057f2:	4605      	mov	r5, r0
 80057f4:	2900      	cmp	r1, #0
 80057f6:	d041      	beq.n	800587c <_free_r+0x8c>
 80057f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057fc:	1f0c      	subs	r4, r1, #4
 80057fe:	2b00      	cmp	r3, #0
 8005800:	bfb8      	it	lt
 8005802:	18e4      	addlt	r4, r4, r3
 8005804:	f000 f8e8 	bl	80059d8 <__malloc_lock>
 8005808:	4a1d      	ldr	r2, [pc, #116]	@ (8005880 <_free_r+0x90>)
 800580a:	6813      	ldr	r3, [r2, #0]
 800580c:	b933      	cbnz	r3, 800581c <_free_r+0x2c>
 800580e:	6063      	str	r3, [r4, #4]
 8005810:	6014      	str	r4, [r2, #0]
 8005812:	4628      	mov	r0, r5
 8005814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005818:	f000 b8e4 	b.w	80059e4 <__malloc_unlock>
 800581c:	42a3      	cmp	r3, r4
 800581e:	d908      	bls.n	8005832 <_free_r+0x42>
 8005820:	6820      	ldr	r0, [r4, #0]
 8005822:	1821      	adds	r1, r4, r0
 8005824:	428b      	cmp	r3, r1
 8005826:	bf01      	itttt	eq
 8005828:	6819      	ldreq	r1, [r3, #0]
 800582a:	685b      	ldreq	r3, [r3, #4]
 800582c:	1809      	addeq	r1, r1, r0
 800582e:	6021      	streq	r1, [r4, #0]
 8005830:	e7ed      	b.n	800580e <_free_r+0x1e>
 8005832:	461a      	mov	r2, r3
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	b10b      	cbz	r3, 800583c <_free_r+0x4c>
 8005838:	42a3      	cmp	r3, r4
 800583a:	d9fa      	bls.n	8005832 <_free_r+0x42>
 800583c:	6811      	ldr	r1, [r2, #0]
 800583e:	1850      	adds	r0, r2, r1
 8005840:	42a0      	cmp	r0, r4
 8005842:	d10b      	bne.n	800585c <_free_r+0x6c>
 8005844:	6820      	ldr	r0, [r4, #0]
 8005846:	4401      	add	r1, r0
 8005848:	1850      	adds	r0, r2, r1
 800584a:	4283      	cmp	r3, r0
 800584c:	6011      	str	r1, [r2, #0]
 800584e:	d1e0      	bne.n	8005812 <_free_r+0x22>
 8005850:	6818      	ldr	r0, [r3, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	6053      	str	r3, [r2, #4]
 8005856:	4408      	add	r0, r1
 8005858:	6010      	str	r0, [r2, #0]
 800585a:	e7da      	b.n	8005812 <_free_r+0x22>
 800585c:	d902      	bls.n	8005864 <_free_r+0x74>
 800585e:	230c      	movs	r3, #12
 8005860:	602b      	str	r3, [r5, #0]
 8005862:	e7d6      	b.n	8005812 <_free_r+0x22>
 8005864:	6820      	ldr	r0, [r4, #0]
 8005866:	1821      	adds	r1, r4, r0
 8005868:	428b      	cmp	r3, r1
 800586a:	bf04      	itt	eq
 800586c:	6819      	ldreq	r1, [r3, #0]
 800586e:	685b      	ldreq	r3, [r3, #4]
 8005870:	6063      	str	r3, [r4, #4]
 8005872:	bf04      	itt	eq
 8005874:	1809      	addeq	r1, r1, r0
 8005876:	6021      	streq	r1, [r4, #0]
 8005878:	6054      	str	r4, [r2, #4]
 800587a:	e7ca      	b.n	8005812 <_free_r+0x22>
 800587c:	bd38      	pop	{r3, r4, r5, pc}
 800587e:	bf00      	nop
 8005880:	200003d8 	.word	0x200003d8

08005884 <malloc>:
 8005884:	4b02      	ldr	r3, [pc, #8]	@ (8005890 <malloc+0xc>)
 8005886:	4601      	mov	r1, r0
 8005888:	6818      	ldr	r0, [r3, #0]
 800588a:	f000 b825 	b.w	80058d8 <_malloc_r>
 800588e:	bf00      	nop
 8005890:	20000018 	.word	0x20000018

08005894 <sbrk_aligned>:
 8005894:	b570      	push	{r4, r5, r6, lr}
 8005896:	4e0f      	ldr	r6, [pc, #60]	@ (80058d4 <sbrk_aligned+0x40>)
 8005898:	460c      	mov	r4, r1
 800589a:	6831      	ldr	r1, [r6, #0]
 800589c:	4605      	mov	r5, r0
 800589e:	b911      	cbnz	r1, 80058a6 <sbrk_aligned+0x12>
 80058a0:	f000 f964 	bl	8005b6c <_sbrk_r>
 80058a4:	6030      	str	r0, [r6, #0]
 80058a6:	4621      	mov	r1, r4
 80058a8:	4628      	mov	r0, r5
 80058aa:	f000 f95f 	bl	8005b6c <_sbrk_r>
 80058ae:	1c43      	adds	r3, r0, #1
 80058b0:	d103      	bne.n	80058ba <sbrk_aligned+0x26>
 80058b2:	f04f 34ff 	mov.w	r4, #4294967295
 80058b6:	4620      	mov	r0, r4
 80058b8:	bd70      	pop	{r4, r5, r6, pc}
 80058ba:	1cc4      	adds	r4, r0, #3
 80058bc:	f024 0403 	bic.w	r4, r4, #3
 80058c0:	42a0      	cmp	r0, r4
 80058c2:	d0f8      	beq.n	80058b6 <sbrk_aligned+0x22>
 80058c4:	1a21      	subs	r1, r4, r0
 80058c6:	4628      	mov	r0, r5
 80058c8:	f000 f950 	bl	8005b6c <_sbrk_r>
 80058cc:	3001      	adds	r0, #1
 80058ce:	d1f2      	bne.n	80058b6 <sbrk_aligned+0x22>
 80058d0:	e7ef      	b.n	80058b2 <sbrk_aligned+0x1e>
 80058d2:	bf00      	nop
 80058d4:	200003d4 	.word	0x200003d4

080058d8 <_malloc_r>:
 80058d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058dc:	1ccd      	adds	r5, r1, #3
 80058de:	f025 0503 	bic.w	r5, r5, #3
 80058e2:	3508      	adds	r5, #8
 80058e4:	2d0c      	cmp	r5, #12
 80058e6:	bf38      	it	cc
 80058e8:	250c      	movcc	r5, #12
 80058ea:	2d00      	cmp	r5, #0
 80058ec:	4606      	mov	r6, r0
 80058ee:	db01      	blt.n	80058f4 <_malloc_r+0x1c>
 80058f0:	42a9      	cmp	r1, r5
 80058f2:	d904      	bls.n	80058fe <_malloc_r+0x26>
 80058f4:	230c      	movs	r3, #12
 80058f6:	6033      	str	r3, [r6, #0]
 80058f8:	2000      	movs	r0, #0
 80058fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80059d4 <_malloc_r+0xfc>
 8005902:	f000 f869 	bl	80059d8 <__malloc_lock>
 8005906:	f8d8 3000 	ldr.w	r3, [r8]
 800590a:	461c      	mov	r4, r3
 800590c:	bb44      	cbnz	r4, 8005960 <_malloc_r+0x88>
 800590e:	4629      	mov	r1, r5
 8005910:	4630      	mov	r0, r6
 8005912:	f7ff ffbf 	bl	8005894 <sbrk_aligned>
 8005916:	1c43      	adds	r3, r0, #1
 8005918:	4604      	mov	r4, r0
 800591a:	d158      	bne.n	80059ce <_malloc_r+0xf6>
 800591c:	f8d8 4000 	ldr.w	r4, [r8]
 8005920:	4627      	mov	r7, r4
 8005922:	2f00      	cmp	r7, #0
 8005924:	d143      	bne.n	80059ae <_malloc_r+0xd6>
 8005926:	2c00      	cmp	r4, #0
 8005928:	d04b      	beq.n	80059c2 <_malloc_r+0xea>
 800592a:	6823      	ldr	r3, [r4, #0]
 800592c:	4639      	mov	r1, r7
 800592e:	4630      	mov	r0, r6
 8005930:	eb04 0903 	add.w	r9, r4, r3
 8005934:	f000 f91a 	bl	8005b6c <_sbrk_r>
 8005938:	4581      	cmp	r9, r0
 800593a:	d142      	bne.n	80059c2 <_malloc_r+0xea>
 800593c:	6821      	ldr	r1, [r4, #0]
 800593e:	1a6d      	subs	r5, r5, r1
 8005940:	4629      	mov	r1, r5
 8005942:	4630      	mov	r0, r6
 8005944:	f7ff ffa6 	bl	8005894 <sbrk_aligned>
 8005948:	3001      	adds	r0, #1
 800594a:	d03a      	beq.n	80059c2 <_malloc_r+0xea>
 800594c:	6823      	ldr	r3, [r4, #0]
 800594e:	442b      	add	r3, r5
 8005950:	6023      	str	r3, [r4, #0]
 8005952:	f8d8 3000 	ldr.w	r3, [r8]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	bb62      	cbnz	r2, 80059b4 <_malloc_r+0xdc>
 800595a:	f8c8 7000 	str.w	r7, [r8]
 800595e:	e00f      	b.n	8005980 <_malloc_r+0xa8>
 8005960:	6822      	ldr	r2, [r4, #0]
 8005962:	1b52      	subs	r2, r2, r5
 8005964:	d420      	bmi.n	80059a8 <_malloc_r+0xd0>
 8005966:	2a0b      	cmp	r2, #11
 8005968:	d917      	bls.n	800599a <_malloc_r+0xc2>
 800596a:	1961      	adds	r1, r4, r5
 800596c:	42a3      	cmp	r3, r4
 800596e:	6025      	str	r5, [r4, #0]
 8005970:	bf18      	it	ne
 8005972:	6059      	strne	r1, [r3, #4]
 8005974:	6863      	ldr	r3, [r4, #4]
 8005976:	bf08      	it	eq
 8005978:	f8c8 1000 	streq.w	r1, [r8]
 800597c:	5162      	str	r2, [r4, r5]
 800597e:	604b      	str	r3, [r1, #4]
 8005980:	4630      	mov	r0, r6
 8005982:	f000 f82f 	bl	80059e4 <__malloc_unlock>
 8005986:	f104 000b 	add.w	r0, r4, #11
 800598a:	1d23      	adds	r3, r4, #4
 800598c:	f020 0007 	bic.w	r0, r0, #7
 8005990:	1ac2      	subs	r2, r0, r3
 8005992:	bf1c      	itt	ne
 8005994:	1a1b      	subne	r3, r3, r0
 8005996:	50a3      	strne	r3, [r4, r2]
 8005998:	e7af      	b.n	80058fa <_malloc_r+0x22>
 800599a:	6862      	ldr	r2, [r4, #4]
 800599c:	42a3      	cmp	r3, r4
 800599e:	bf0c      	ite	eq
 80059a0:	f8c8 2000 	streq.w	r2, [r8]
 80059a4:	605a      	strne	r2, [r3, #4]
 80059a6:	e7eb      	b.n	8005980 <_malloc_r+0xa8>
 80059a8:	4623      	mov	r3, r4
 80059aa:	6864      	ldr	r4, [r4, #4]
 80059ac:	e7ae      	b.n	800590c <_malloc_r+0x34>
 80059ae:	463c      	mov	r4, r7
 80059b0:	687f      	ldr	r7, [r7, #4]
 80059b2:	e7b6      	b.n	8005922 <_malloc_r+0x4a>
 80059b4:	461a      	mov	r2, r3
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	42a3      	cmp	r3, r4
 80059ba:	d1fb      	bne.n	80059b4 <_malloc_r+0xdc>
 80059bc:	2300      	movs	r3, #0
 80059be:	6053      	str	r3, [r2, #4]
 80059c0:	e7de      	b.n	8005980 <_malloc_r+0xa8>
 80059c2:	230c      	movs	r3, #12
 80059c4:	6033      	str	r3, [r6, #0]
 80059c6:	4630      	mov	r0, r6
 80059c8:	f000 f80c 	bl	80059e4 <__malloc_unlock>
 80059cc:	e794      	b.n	80058f8 <_malloc_r+0x20>
 80059ce:	6005      	str	r5, [r0, #0]
 80059d0:	e7d6      	b.n	8005980 <_malloc_r+0xa8>
 80059d2:	bf00      	nop
 80059d4:	200003d8 	.word	0x200003d8

080059d8 <__malloc_lock>:
 80059d8:	4801      	ldr	r0, [pc, #4]	@ (80059e0 <__malloc_lock+0x8>)
 80059da:	f7ff bee8 	b.w	80057ae <__retarget_lock_acquire_recursive>
 80059de:	bf00      	nop
 80059e0:	200003d0 	.word	0x200003d0

080059e4 <__malloc_unlock>:
 80059e4:	4801      	ldr	r0, [pc, #4]	@ (80059ec <__malloc_unlock+0x8>)
 80059e6:	f7ff bee3 	b.w	80057b0 <__retarget_lock_release_recursive>
 80059ea:	bf00      	nop
 80059ec:	200003d0 	.word	0x200003d0

080059f0 <__sflush_r>:
 80059f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80059f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059f8:	0716      	lsls	r6, r2, #28
 80059fa:	4605      	mov	r5, r0
 80059fc:	460c      	mov	r4, r1
 80059fe:	d454      	bmi.n	8005aaa <__sflush_r+0xba>
 8005a00:	684b      	ldr	r3, [r1, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	dc02      	bgt.n	8005a0c <__sflush_r+0x1c>
 8005a06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	dd48      	ble.n	8005a9e <__sflush_r+0xae>
 8005a0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005a0e:	2e00      	cmp	r6, #0
 8005a10:	d045      	beq.n	8005a9e <__sflush_r+0xae>
 8005a12:	2300      	movs	r3, #0
 8005a14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005a18:	682f      	ldr	r7, [r5, #0]
 8005a1a:	6a21      	ldr	r1, [r4, #32]
 8005a1c:	602b      	str	r3, [r5, #0]
 8005a1e:	d030      	beq.n	8005a82 <__sflush_r+0x92>
 8005a20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005a22:	89a3      	ldrh	r3, [r4, #12]
 8005a24:	0759      	lsls	r1, r3, #29
 8005a26:	d505      	bpl.n	8005a34 <__sflush_r+0x44>
 8005a28:	6863      	ldr	r3, [r4, #4]
 8005a2a:	1ad2      	subs	r2, r2, r3
 8005a2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005a2e:	b10b      	cbz	r3, 8005a34 <__sflush_r+0x44>
 8005a30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005a32:	1ad2      	subs	r2, r2, r3
 8005a34:	2300      	movs	r3, #0
 8005a36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005a38:	6a21      	ldr	r1, [r4, #32]
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	47b0      	blx	r6
 8005a3e:	1c43      	adds	r3, r0, #1
 8005a40:	89a3      	ldrh	r3, [r4, #12]
 8005a42:	d106      	bne.n	8005a52 <__sflush_r+0x62>
 8005a44:	6829      	ldr	r1, [r5, #0]
 8005a46:	291d      	cmp	r1, #29
 8005a48:	d82b      	bhi.n	8005aa2 <__sflush_r+0xb2>
 8005a4a:	4a2a      	ldr	r2, [pc, #168]	@ (8005af4 <__sflush_r+0x104>)
 8005a4c:	410a      	asrs	r2, r1
 8005a4e:	07d6      	lsls	r6, r2, #31
 8005a50:	d427      	bmi.n	8005aa2 <__sflush_r+0xb2>
 8005a52:	2200      	movs	r2, #0
 8005a54:	6062      	str	r2, [r4, #4]
 8005a56:	04d9      	lsls	r1, r3, #19
 8005a58:	6922      	ldr	r2, [r4, #16]
 8005a5a:	6022      	str	r2, [r4, #0]
 8005a5c:	d504      	bpl.n	8005a68 <__sflush_r+0x78>
 8005a5e:	1c42      	adds	r2, r0, #1
 8005a60:	d101      	bne.n	8005a66 <__sflush_r+0x76>
 8005a62:	682b      	ldr	r3, [r5, #0]
 8005a64:	b903      	cbnz	r3, 8005a68 <__sflush_r+0x78>
 8005a66:	6560      	str	r0, [r4, #84]	@ 0x54
 8005a68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a6a:	602f      	str	r7, [r5, #0]
 8005a6c:	b1b9      	cbz	r1, 8005a9e <__sflush_r+0xae>
 8005a6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a72:	4299      	cmp	r1, r3
 8005a74:	d002      	beq.n	8005a7c <__sflush_r+0x8c>
 8005a76:	4628      	mov	r0, r5
 8005a78:	f7ff feba 	bl	80057f0 <_free_r>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a80:	e00d      	b.n	8005a9e <__sflush_r+0xae>
 8005a82:	2301      	movs	r3, #1
 8005a84:	4628      	mov	r0, r5
 8005a86:	47b0      	blx	r6
 8005a88:	4602      	mov	r2, r0
 8005a8a:	1c50      	adds	r0, r2, #1
 8005a8c:	d1c9      	bne.n	8005a22 <__sflush_r+0x32>
 8005a8e:	682b      	ldr	r3, [r5, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d0c6      	beq.n	8005a22 <__sflush_r+0x32>
 8005a94:	2b1d      	cmp	r3, #29
 8005a96:	d001      	beq.n	8005a9c <__sflush_r+0xac>
 8005a98:	2b16      	cmp	r3, #22
 8005a9a:	d11e      	bne.n	8005ada <__sflush_r+0xea>
 8005a9c:	602f      	str	r7, [r5, #0]
 8005a9e:	2000      	movs	r0, #0
 8005aa0:	e022      	b.n	8005ae8 <__sflush_r+0xf8>
 8005aa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005aa6:	b21b      	sxth	r3, r3
 8005aa8:	e01b      	b.n	8005ae2 <__sflush_r+0xf2>
 8005aaa:	690f      	ldr	r7, [r1, #16]
 8005aac:	2f00      	cmp	r7, #0
 8005aae:	d0f6      	beq.n	8005a9e <__sflush_r+0xae>
 8005ab0:	0793      	lsls	r3, r2, #30
 8005ab2:	680e      	ldr	r6, [r1, #0]
 8005ab4:	bf08      	it	eq
 8005ab6:	694b      	ldreq	r3, [r1, #20]
 8005ab8:	600f      	str	r7, [r1, #0]
 8005aba:	bf18      	it	ne
 8005abc:	2300      	movne	r3, #0
 8005abe:	eba6 0807 	sub.w	r8, r6, r7
 8005ac2:	608b      	str	r3, [r1, #8]
 8005ac4:	f1b8 0f00 	cmp.w	r8, #0
 8005ac8:	dde9      	ble.n	8005a9e <__sflush_r+0xae>
 8005aca:	6a21      	ldr	r1, [r4, #32]
 8005acc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005ace:	4643      	mov	r3, r8
 8005ad0:	463a      	mov	r2, r7
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	47b0      	blx	r6
 8005ad6:	2800      	cmp	r0, #0
 8005ad8:	dc08      	bgt.n	8005aec <__sflush_r+0xfc>
 8005ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ade:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ae2:	81a3      	strh	r3, [r4, #12]
 8005ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005aec:	4407      	add	r7, r0
 8005aee:	eba8 0800 	sub.w	r8, r8, r0
 8005af2:	e7e7      	b.n	8005ac4 <__sflush_r+0xd4>
 8005af4:	dfbffffe 	.word	0xdfbffffe

08005af8 <_fflush_r>:
 8005af8:	b538      	push	{r3, r4, r5, lr}
 8005afa:	690b      	ldr	r3, [r1, #16]
 8005afc:	4605      	mov	r5, r0
 8005afe:	460c      	mov	r4, r1
 8005b00:	b913      	cbnz	r3, 8005b08 <_fflush_r+0x10>
 8005b02:	2500      	movs	r5, #0
 8005b04:	4628      	mov	r0, r5
 8005b06:	bd38      	pop	{r3, r4, r5, pc}
 8005b08:	b118      	cbz	r0, 8005b12 <_fflush_r+0x1a>
 8005b0a:	6a03      	ldr	r3, [r0, #32]
 8005b0c:	b90b      	cbnz	r3, 8005b12 <_fflush_r+0x1a>
 8005b0e:	f7ff fd2d 	bl	800556c <__sinit>
 8005b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0f3      	beq.n	8005b02 <_fflush_r+0xa>
 8005b1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005b1c:	07d0      	lsls	r0, r2, #31
 8005b1e:	d404      	bmi.n	8005b2a <_fflush_r+0x32>
 8005b20:	0599      	lsls	r1, r3, #22
 8005b22:	d402      	bmi.n	8005b2a <_fflush_r+0x32>
 8005b24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b26:	f7ff fe42 	bl	80057ae <__retarget_lock_acquire_recursive>
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	f7ff ff5f 	bl	80059f0 <__sflush_r>
 8005b32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b34:	07da      	lsls	r2, r3, #31
 8005b36:	4605      	mov	r5, r0
 8005b38:	d4e4      	bmi.n	8005b04 <_fflush_r+0xc>
 8005b3a:	89a3      	ldrh	r3, [r4, #12]
 8005b3c:	059b      	lsls	r3, r3, #22
 8005b3e:	d4e1      	bmi.n	8005b04 <_fflush_r+0xc>
 8005b40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b42:	f7ff fe35 	bl	80057b0 <__retarget_lock_release_recursive>
 8005b46:	e7dd      	b.n	8005b04 <_fflush_r+0xc>

08005b48 <fiprintf>:
 8005b48:	b40e      	push	{r1, r2, r3}
 8005b4a:	b503      	push	{r0, r1, lr}
 8005b4c:	4601      	mov	r1, r0
 8005b4e:	ab03      	add	r3, sp, #12
 8005b50:	4805      	ldr	r0, [pc, #20]	@ (8005b68 <fiprintf+0x20>)
 8005b52:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b56:	6800      	ldr	r0, [r0, #0]
 8005b58:	9301      	str	r3, [sp, #4]
 8005b5a:	f000 f847 	bl	8005bec <_vfiprintf_r>
 8005b5e:	b002      	add	sp, #8
 8005b60:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b64:	b003      	add	sp, #12
 8005b66:	4770      	bx	lr
 8005b68:	20000018 	.word	0x20000018

08005b6c <_sbrk_r>:
 8005b6c:	b538      	push	{r3, r4, r5, lr}
 8005b6e:	4d06      	ldr	r5, [pc, #24]	@ (8005b88 <_sbrk_r+0x1c>)
 8005b70:	2300      	movs	r3, #0
 8005b72:	4604      	mov	r4, r0
 8005b74:	4608      	mov	r0, r1
 8005b76:	602b      	str	r3, [r5, #0]
 8005b78:	f7fb fa28 	bl	8000fcc <_sbrk>
 8005b7c:	1c43      	adds	r3, r0, #1
 8005b7e:	d102      	bne.n	8005b86 <_sbrk_r+0x1a>
 8005b80:	682b      	ldr	r3, [r5, #0]
 8005b82:	b103      	cbz	r3, 8005b86 <_sbrk_r+0x1a>
 8005b84:	6023      	str	r3, [r4, #0]
 8005b86:	bd38      	pop	{r3, r4, r5, pc}
 8005b88:	200003cc 	.word	0x200003cc

08005b8c <abort>:
 8005b8c:	b508      	push	{r3, lr}
 8005b8e:	2006      	movs	r0, #6
 8005b90:	f000 fb8e 	bl	80062b0 <raise>
 8005b94:	2001      	movs	r0, #1
 8005b96:	f7fb f9a1 	bl	8000edc <_exit>

08005b9a <__sfputc_r>:
 8005b9a:	6893      	ldr	r3, [r2, #8]
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	b410      	push	{r4}
 8005ba2:	6093      	str	r3, [r2, #8]
 8005ba4:	da08      	bge.n	8005bb8 <__sfputc_r+0x1e>
 8005ba6:	6994      	ldr	r4, [r2, #24]
 8005ba8:	42a3      	cmp	r3, r4
 8005baa:	db01      	blt.n	8005bb0 <__sfputc_r+0x16>
 8005bac:	290a      	cmp	r1, #10
 8005bae:	d103      	bne.n	8005bb8 <__sfputc_r+0x1e>
 8005bb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bb4:	f000 bac0 	b.w	8006138 <__swbuf_r>
 8005bb8:	6813      	ldr	r3, [r2, #0]
 8005bba:	1c58      	adds	r0, r3, #1
 8005bbc:	6010      	str	r0, [r2, #0]
 8005bbe:	7019      	strb	r1, [r3, #0]
 8005bc0:	4608      	mov	r0, r1
 8005bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <__sfputs_r>:
 8005bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bca:	4606      	mov	r6, r0
 8005bcc:	460f      	mov	r7, r1
 8005bce:	4614      	mov	r4, r2
 8005bd0:	18d5      	adds	r5, r2, r3
 8005bd2:	42ac      	cmp	r4, r5
 8005bd4:	d101      	bne.n	8005bda <__sfputs_r+0x12>
 8005bd6:	2000      	movs	r0, #0
 8005bd8:	e007      	b.n	8005bea <__sfputs_r+0x22>
 8005bda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bde:	463a      	mov	r2, r7
 8005be0:	4630      	mov	r0, r6
 8005be2:	f7ff ffda 	bl	8005b9a <__sfputc_r>
 8005be6:	1c43      	adds	r3, r0, #1
 8005be8:	d1f3      	bne.n	8005bd2 <__sfputs_r+0xa>
 8005bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005bec <_vfiprintf_r>:
 8005bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf0:	460d      	mov	r5, r1
 8005bf2:	b09d      	sub	sp, #116	@ 0x74
 8005bf4:	4614      	mov	r4, r2
 8005bf6:	4698      	mov	r8, r3
 8005bf8:	4606      	mov	r6, r0
 8005bfa:	b118      	cbz	r0, 8005c04 <_vfiprintf_r+0x18>
 8005bfc:	6a03      	ldr	r3, [r0, #32]
 8005bfe:	b90b      	cbnz	r3, 8005c04 <_vfiprintf_r+0x18>
 8005c00:	f7ff fcb4 	bl	800556c <__sinit>
 8005c04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c06:	07d9      	lsls	r1, r3, #31
 8005c08:	d405      	bmi.n	8005c16 <_vfiprintf_r+0x2a>
 8005c0a:	89ab      	ldrh	r3, [r5, #12]
 8005c0c:	059a      	lsls	r2, r3, #22
 8005c0e:	d402      	bmi.n	8005c16 <_vfiprintf_r+0x2a>
 8005c10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c12:	f7ff fdcc 	bl	80057ae <__retarget_lock_acquire_recursive>
 8005c16:	89ab      	ldrh	r3, [r5, #12]
 8005c18:	071b      	lsls	r3, r3, #28
 8005c1a:	d501      	bpl.n	8005c20 <_vfiprintf_r+0x34>
 8005c1c:	692b      	ldr	r3, [r5, #16]
 8005c1e:	b99b      	cbnz	r3, 8005c48 <_vfiprintf_r+0x5c>
 8005c20:	4629      	mov	r1, r5
 8005c22:	4630      	mov	r0, r6
 8005c24:	f000 fac6 	bl	80061b4 <__swsetup_r>
 8005c28:	b170      	cbz	r0, 8005c48 <_vfiprintf_r+0x5c>
 8005c2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c2c:	07dc      	lsls	r4, r3, #31
 8005c2e:	d504      	bpl.n	8005c3a <_vfiprintf_r+0x4e>
 8005c30:	f04f 30ff 	mov.w	r0, #4294967295
 8005c34:	b01d      	add	sp, #116	@ 0x74
 8005c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c3a:	89ab      	ldrh	r3, [r5, #12]
 8005c3c:	0598      	lsls	r0, r3, #22
 8005c3e:	d4f7      	bmi.n	8005c30 <_vfiprintf_r+0x44>
 8005c40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c42:	f7ff fdb5 	bl	80057b0 <__retarget_lock_release_recursive>
 8005c46:	e7f3      	b.n	8005c30 <_vfiprintf_r+0x44>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c4c:	2320      	movs	r3, #32
 8005c4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c52:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c56:	2330      	movs	r3, #48	@ 0x30
 8005c58:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005e08 <_vfiprintf_r+0x21c>
 8005c5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c60:	f04f 0901 	mov.w	r9, #1
 8005c64:	4623      	mov	r3, r4
 8005c66:	469a      	mov	sl, r3
 8005c68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c6c:	b10a      	cbz	r2, 8005c72 <_vfiprintf_r+0x86>
 8005c6e:	2a25      	cmp	r2, #37	@ 0x25
 8005c70:	d1f9      	bne.n	8005c66 <_vfiprintf_r+0x7a>
 8005c72:	ebba 0b04 	subs.w	fp, sl, r4
 8005c76:	d00b      	beq.n	8005c90 <_vfiprintf_r+0xa4>
 8005c78:	465b      	mov	r3, fp
 8005c7a:	4622      	mov	r2, r4
 8005c7c:	4629      	mov	r1, r5
 8005c7e:	4630      	mov	r0, r6
 8005c80:	f7ff ffa2 	bl	8005bc8 <__sfputs_r>
 8005c84:	3001      	adds	r0, #1
 8005c86:	f000 80a7 	beq.w	8005dd8 <_vfiprintf_r+0x1ec>
 8005c8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c8c:	445a      	add	r2, fp
 8005c8e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c90:	f89a 3000 	ldrb.w	r3, [sl]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f000 809f 	beq.w	8005dd8 <_vfiprintf_r+0x1ec>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005ca0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ca4:	f10a 0a01 	add.w	sl, sl, #1
 8005ca8:	9304      	str	r3, [sp, #16]
 8005caa:	9307      	str	r3, [sp, #28]
 8005cac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005cb0:	931a      	str	r3, [sp, #104]	@ 0x68
 8005cb2:	4654      	mov	r4, sl
 8005cb4:	2205      	movs	r2, #5
 8005cb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cba:	4853      	ldr	r0, [pc, #332]	@ (8005e08 <_vfiprintf_r+0x21c>)
 8005cbc:	f7fa fa88 	bl	80001d0 <memchr>
 8005cc0:	9a04      	ldr	r2, [sp, #16]
 8005cc2:	b9d8      	cbnz	r0, 8005cfc <_vfiprintf_r+0x110>
 8005cc4:	06d1      	lsls	r1, r2, #27
 8005cc6:	bf44      	itt	mi
 8005cc8:	2320      	movmi	r3, #32
 8005cca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005cce:	0713      	lsls	r3, r2, #28
 8005cd0:	bf44      	itt	mi
 8005cd2:	232b      	movmi	r3, #43	@ 0x2b
 8005cd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005cd8:	f89a 3000 	ldrb.w	r3, [sl]
 8005cdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cde:	d015      	beq.n	8005d0c <_vfiprintf_r+0x120>
 8005ce0:	9a07      	ldr	r2, [sp, #28]
 8005ce2:	4654      	mov	r4, sl
 8005ce4:	2000      	movs	r0, #0
 8005ce6:	f04f 0c0a 	mov.w	ip, #10
 8005cea:	4621      	mov	r1, r4
 8005cec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cf0:	3b30      	subs	r3, #48	@ 0x30
 8005cf2:	2b09      	cmp	r3, #9
 8005cf4:	d94b      	bls.n	8005d8e <_vfiprintf_r+0x1a2>
 8005cf6:	b1b0      	cbz	r0, 8005d26 <_vfiprintf_r+0x13a>
 8005cf8:	9207      	str	r2, [sp, #28]
 8005cfa:	e014      	b.n	8005d26 <_vfiprintf_r+0x13a>
 8005cfc:	eba0 0308 	sub.w	r3, r0, r8
 8005d00:	fa09 f303 	lsl.w	r3, r9, r3
 8005d04:	4313      	orrs	r3, r2
 8005d06:	9304      	str	r3, [sp, #16]
 8005d08:	46a2      	mov	sl, r4
 8005d0a:	e7d2      	b.n	8005cb2 <_vfiprintf_r+0xc6>
 8005d0c:	9b03      	ldr	r3, [sp, #12]
 8005d0e:	1d19      	adds	r1, r3, #4
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	9103      	str	r1, [sp, #12]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	bfbb      	ittet	lt
 8005d18:	425b      	neglt	r3, r3
 8005d1a:	f042 0202 	orrlt.w	r2, r2, #2
 8005d1e:	9307      	strge	r3, [sp, #28]
 8005d20:	9307      	strlt	r3, [sp, #28]
 8005d22:	bfb8      	it	lt
 8005d24:	9204      	strlt	r2, [sp, #16]
 8005d26:	7823      	ldrb	r3, [r4, #0]
 8005d28:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d2a:	d10a      	bne.n	8005d42 <_vfiprintf_r+0x156>
 8005d2c:	7863      	ldrb	r3, [r4, #1]
 8005d2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d30:	d132      	bne.n	8005d98 <_vfiprintf_r+0x1ac>
 8005d32:	9b03      	ldr	r3, [sp, #12]
 8005d34:	1d1a      	adds	r2, r3, #4
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	9203      	str	r2, [sp, #12]
 8005d3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d3e:	3402      	adds	r4, #2
 8005d40:	9305      	str	r3, [sp, #20]
 8005d42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005e18 <_vfiprintf_r+0x22c>
 8005d46:	7821      	ldrb	r1, [r4, #0]
 8005d48:	2203      	movs	r2, #3
 8005d4a:	4650      	mov	r0, sl
 8005d4c:	f7fa fa40 	bl	80001d0 <memchr>
 8005d50:	b138      	cbz	r0, 8005d62 <_vfiprintf_r+0x176>
 8005d52:	9b04      	ldr	r3, [sp, #16]
 8005d54:	eba0 000a 	sub.w	r0, r0, sl
 8005d58:	2240      	movs	r2, #64	@ 0x40
 8005d5a:	4082      	lsls	r2, r0
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	3401      	adds	r4, #1
 8005d60:	9304      	str	r3, [sp, #16]
 8005d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d66:	4829      	ldr	r0, [pc, #164]	@ (8005e0c <_vfiprintf_r+0x220>)
 8005d68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d6c:	2206      	movs	r2, #6
 8005d6e:	f7fa fa2f 	bl	80001d0 <memchr>
 8005d72:	2800      	cmp	r0, #0
 8005d74:	d03f      	beq.n	8005df6 <_vfiprintf_r+0x20a>
 8005d76:	4b26      	ldr	r3, [pc, #152]	@ (8005e10 <_vfiprintf_r+0x224>)
 8005d78:	bb1b      	cbnz	r3, 8005dc2 <_vfiprintf_r+0x1d6>
 8005d7a:	9b03      	ldr	r3, [sp, #12]
 8005d7c:	3307      	adds	r3, #7
 8005d7e:	f023 0307 	bic.w	r3, r3, #7
 8005d82:	3308      	adds	r3, #8
 8005d84:	9303      	str	r3, [sp, #12]
 8005d86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d88:	443b      	add	r3, r7
 8005d8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d8c:	e76a      	b.n	8005c64 <_vfiprintf_r+0x78>
 8005d8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d92:	460c      	mov	r4, r1
 8005d94:	2001      	movs	r0, #1
 8005d96:	e7a8      	b.n	8005cea <_vfiprintf_r+0xfe>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	3401      	adds	r4, #1
 8005d9c:	9305      	str	r3, [sp, #20]
 8005d9e:	4619      	mov	r1, r3
 8005da0:	f04f 0c0a 	mov.w	ip, #10
 8005da4:	4620      	mov	r0, r4
 8005da6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005daa:	3a30      	subs	r2, #48	@ 0x30
 8005dac:	2a09      	cmp	r2, #9
 8005dae:	d903      	bls.n	8005db8 <_vfiprintf_r+0x1cc>
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d0c6      	beq.n	8005d42 <_vfiprintf_r+0x156>
 8005db4:	9105      	str	r1, [sp, #20]
 8005db6:	e7c4      	b.n	8005d42 <_vfiprintf_r+0x156>
 8005db8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dbc:	4604      	mov	r4, r0
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e7f0      	b.n	8005da4 <_vfiprintf_r+0x1b8>
 8005dc2:	ab03      	add	r3, sp, #12
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	462a      	mov	r2, r5
 8005dc8:	4b12      	ldr	r3, [pc, #72]	@ (8005e14 <_vfiprintf_r+0x228>)
 8005dca:	a904      	add	r1, sp, #16
 8005dcc:	4630      	mov	r0, r6
 8005dce:	f3af 8000 	nop.w
 8005dd2:	4607      	mov	r7, r0
 8005dd4:	1c78      	adds	r0, r7, #1
 8005dd6:	d1d6      	bne.n	8005d86 <_vfiprintf_r+0x19a>
 8005dd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005dda:	07d9      	lsls	r1, r3, #31
 8005ddc:	d405      	bmi.n	8005dea <_vfiprintf_r+0x1fe>
 8005dde:	89ab      	ldrh	r3, [r5, #12]
 8005de0:	059a      	lsls	r2, r3, #22
 8005de2:	d402      	bmi.n	8005dea <_vfiprintf_r+0x1fe>
 8005de4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005de6:	f7ff fce3 	bl	80057b0 <__retarget_lock_release_recursive>
 8005dea:	89ab      	ldrh	r3, [r5, #12]
 8005dec:	065b      	lsls	r3, r3, #25
 8005dee:	f53f af1f 	bmi.w	8005c30 <_vfiprintf_r+0x44>
 8005df2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005df4:	e71e      	b.n	8005c34 <_vfiprintf_r+0x48>
 8005df6:	ab03      	add	r3, sp, #12
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	462a      	mov	r2, r5
 8005dfc:	4b05      	ldr	r3, [pc, #20]	@ (8005e14 <_vfiprintf_r+0x228>)
 8005dfe:	a904      	add	r1, sp, #16
 8005e00:	4630      	mov	r0, r6
 8005e02:	f000 f879 	bl	8005ef8 <_printf_i>
 8005e06:	e7e4      	b.n	8005dd2 <_vfiprintf_r+0x1e6>
 8005e08:	080064fb 	.word	0x080064fb
 8005e0c:	08006505 	.word	0x08006505
 8005e10:	00000000 	.word	0x00000000
 8005e14:	08005bc9 	.word	0x08005bc9
 8005e18:	08006501 	.word	0x08006501

08005e1c <_printf_common>:
 8005e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e20:	4616      	mov	r6, r2
 8005e22:	4698      	mov	r8, r3
 8005e24:	688a      	ldr	r2, [r1, #8]
 8005e26:	690b      	ldr	r3, [r1, #16]
 8005e28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	bfb8      	it	lt
 8005e30:	4613      	movlt	r3, r2
 8005e32:	6033      	str	r3, [r6, #0]
 8005e34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e38:	4607      	mov	r7, r0
 8005e3a:	460c      	mov	r4, r1
 8005e3c:	b10a      	cbz	r2, 8005e42 <_printf_common+0x26>
 8005e3e:	3301      	adds	r3, #1
 8005e40:	6033      	str	r3, [r6, #0]
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	0699      	lsls	r1, r3, #26
 8005e46:	bf42      	ittt	mi
 8005e48:	6833      	ldrmi	r3, [r6, #0]
 8005e4a:	3302      	addmi	r3, #2
 8005e4c:	6033      	strmi	r3, [r6, #0]
 8005e4e:	6825      	ldr	r5, [r4, #0]
 8005e50:	f015 0506 	ands.w	r5, r5, #6
 8005e54:	d106      	bne.n	8005e64 <_printf_common+0x48>
 8005e56:	f104 0a19 	add.w	sl, r4, #25
 8005e5a:	68e3      	ldr	r3, [r4, #12]
 8005e5c:	6832      	ldr	r2, [r6, #0]
 8005e5e:	1a9b      	subs	r3, r3, r2
 8005e60:	42ab      	cmp	r3, r5
 8005e62:	dc26      	bgt.n	8005eb2 <_printf_common+0x96>
 8005e64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e68:	6822      	ldr	r2, [r4, #0]
 8005e6a:	3b00      	subs	r3, #0
 8005e6c:	bf18      	it	ne
 8005e6e:	2301      	movne	r3, #1
 8005e70:	0692      	lsls	r2, r2, #26
 8005e72:	d42b      	bmi.n	8005ecc <_printf_common+0xb0>
 8005e74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e78:	4641      	mov	r1, r8
 8005e7a:	4638      	mov	r0, r7
 8005e7c:	47c8      	blx	r9
 8005e7e:	3001      	adds	r0, #1
 8005e80:	d01e      	beq.n	8005ec0 <_printf_common+0xa4>
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	6922      	ldr	r2, [r4, #16]
 8005e86:	f003 0306 	and.w	r3, r3, #6
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	bf02      	ittt	eq
 8005e8e:	68e5      	ldreq	r5, [r4, #12]
 8005e90:	6833      	ldreq	r3, [r6, #0]
 8005e92:	1aed      	subeq	r5, r5, r3
 8005e94:	68a3      	ldr	r3, [r4, #8]
 8005e96:	bf0c      	ite	eq
 8005e98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e9c:	2500      	movne	r5, #0
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	bfc4      	itt	gt
 8005ea2:	1a9b      	subgt	r3, r3, r2
 8005ea4:	18ed      	addgt	r5, r5, r3
 8005ea6:	2600      	movs	r6, #0
 8005ea8:	341a      	adds	r4, #26
 8005eaa:	42b5      	cmp	r5, r6
 8005eac:	d11a      	bne.n	8005ee4 <_printf_common+0xc8>
 8005eae:	2000      	movs	r0, #0
 8005eb0:	e008      	b.n	8005ec4 <_printf_common+0xa8>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	4652      	mov	r2, sl
 8005eb6:	4641      	mov	r1, r8
 8005eb8:	4638      	mov	r0, r7
 8005eba:	47c8      	blx	r9
 8005ebc:	3001      	adds	r0, #1
 8005ebe:	d103      	bne.n	8005ec8 <_printf_common+0xac>
 8005ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ec8:	3501      	adds	r5, #1
 8005eca:	e7c6      	b.n	8005e5a <_printf_common+0x3e>
 8005ecc:	18e1      	adds	r1, r4, r3
 8005ece:	1c5a      	adds	r2, r3, #1
 8005ed0:	2030      	movs	r0, #48	@ 0x30
 8005ed2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ed6:	4422      	add	r2, r4
 8005ed8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005edc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ee0:	3302      	adds	r3, #2
 8005ee2:	e7c7      	b.n	8005e74 <_printf_common+0x58>
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	4622      	mov	r2, r4
 8005ee8:	4641      	mov	r1, r8
 8005eea:	4638      	mov	r0, r7
 8005eec:	47c8      	blx	r9
 8005eee:	3001      	adds	r0, #1
 8005ef0:	d0e6      	beq.n	8005ec0 <_printf_common+0xa4>
 8005ef2:	3601      	adds	r6, #1
 8005ef4:	e7d9      	b.n	8005eaa <_printf_common+0x8e>
	...

08005ef8 <_printf_i>:
 8005ef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005efc:	7e0f      	ldrb	r7, [r1, #24]
 8005efe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f00:	2f78      	cmp	r7, #120	@ 0x78
 8005f02:	4691      	mov	r9, r2
 8005f04:	4680      	mov	r8, r0
 8005f06:	460c      	mov	r4, r1
 8005f08:	469a      	mov	sl, r3
 8005f0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f0e:	d807      	bhi.n	8005f20 <_printf_i+0x28>
 8005f10:	2f62      	cmp	r7, #98	@ 0x62
 8005f12:	d80a      	bhi.n	8005f2a <_printf_i+0x32>
 8005f14:	2f00      	cmp	r7, #0
 8005f16:	f000 80d2 	beq.w	80060be <_printf_i+0x1c6>
 8005f1a:	2f58      	cmp	r7, #88	@ 0x58
 8005f1c:	f000 80b9 	beq.w	8006092 <_printf_i+0x19a>
 8005f20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f28:	e03a      	b.n	8005fa0 <_printf_i+0xa8>
 8005f2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f2e:	2b15      	cmp	r3, #21
 8005f30:	d8f6      	bhi.n	8005f20 <_printf_i+0x28>
 8005f32:	a101      	add	r1, pc, #4	@ (adr r1, 8005f38 <_printf_i+0x40>)
 8005f34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f38:	08005f91 	.word	0x08005f91
 8005f3c:	08005fa5 	.word	0x08005fa5
 8005f40:	08005f21 	.word	0x08005f21
 8005f44:	08005f21 	.word	0x08005f21
 8005f48:	08005f21 	.word	0x08005f21
 8005f4c:	08005f21 	.word	0x08005f21
 8005f50:	08005fa5 	.word	0x08005fa5
 8005f54:	08005f21 	.word	0x08005f21
 8005f58:	08005f21 	.word	0x08005f21
 8005f5c:	08005f21 	.word	0x08005f21
 8005f60:	08005f21 	.word	0x08005f21
 8005f64:	080060a5 	.word	0x080060a5
 8005f68:	08005fcf 	.word	0x08005fcf
 8005f6c:	0800605f 	.word	0x0800605f
 8005f70:	08005f21 	.word	0x08005f21
 8005f74:	08005f21 	.word	0x08005f21
 8005f78:	080060c7 	.word	0x080060c7
 8005f7c:	08005f21 	.word	0x08005f21
 8005f80:	08005fcf 	.word	0x08005fcf
 8005f84:	08005f21 	.word	0x08005f21
 8005f88:	08005f21 	.word	0x08005f21
 8005f8c:	08006067 	.word	0x08006067
 8005f90:	6833      	ldr	r3, [r6, #0]
 8005f92:	1d1a      	adds	r2, r3, #4
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6032      	str	r2, [r6, #0]
 8005f98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e09d      	b.n	80060e0 <_printf_i+0x1e8>
 8005fa4:	6833      	ldr	r3, [r6, #0]
 8005fa6:	6820      	ldr	r0, [r4, #0]
 8005fa8:	1d19      	adds	r1, r3, #4
 8005faa:	6031      	str	r1, [r6, #0]
 8005fac:	0606      	lsls	r6, r0, #24
 8005fae:	d501      	bpl.n	8005fb4 <_printf_i+0xbc>
 8005fb0:	681d      	ldr	r5, [r3, #0]
 8005fb2:	e003      	b.n	8005fbc <_printf_i+0xc4>
 8005fb4:	0645      	lsls	r5, r0, #25
 8005fb6:	d5fb      	bpl.n	8005fb0 <_printf_i+0xb8>
 8005fb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005fbc:	2d00      	cmp	r5, #0
 8005fbe:	da03      	bge.n	8005fc8 <_printf_i+0xd0>
 8005fc0:	232d      	movs	r3, #45	@ 0x2d
 8005fc2:	426d      	negs	r5, r5
 8005fc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fc8:	4859      	ldr	r0, [pc, #356]	@ (8006130 <_printf_i+0x238>)
 8005fca:	230a      	movs	r3, #10
 8005fcc:	e011      	b.n	8005ff2 <_printf_i+0xfa>
 8005fce:	6821      	ldr	r1, [r4, #0]
 8005fd0:	6833      	ldr	r3, [r6, #0]
 8005fd2:	0608      	lsls	r0, r1, #24
 8005fd4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005fd8:	d402      	bmi.n	8005fe0 <_printf_i+0xe8>
 8005fda:	0649      	lsls	r1, r1, #25
 8005fdc:	bf48      	it	mi
 8005fde:	b2ad      	uxthmi	r5, r5
 8005fe0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005fe2:	4853      	ldr	r0, [pc, #332]	@ (8006130 <_printf_i+0x238>)
 8005fe4:	6033      	str	r3, [r6, #0]
 8005fe6:	bf14      	ite	ne
 8005fe8:	230a      	movne	r3, #10
 8005fea:	2308      	moveq	r3, #8
 8005fec:	2100      	movs	r1, #0
 8005fee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ff2:	6866      	ldr	r6, [r4, #4]
 8005ff4:	60a6      	str	r6, [r4, #8]
 8005ff6:	2e00      	cmp	r6, #0
 8005ff8:	bfa2      	ittt	ge
 8005ffa:	6821      	ldrge	r1, [r4, #0]
 8005ffc:	f021 0104 	bicge.w	r1, r1, #4
 8006000:	6021      	strge	r1, [r4, #0]
 8006002:	b90d      	cbnz	r5, 8006008 <_printf_i+0x110>
 8006004:	2e00      	cmp	r6, #0
 8006006:	d04b      	beq.n	80060a0 <_printf_i+0x1a8>
 8006008:	4616      	mov	r6, r2
 800600a:	fbb5 f1f3 	udiv	r1, r5, r3
 800600e:	fb03 5711 	mls	r7, r3, r1, r5
 8006012:	5dc7      	ldrb	r7, [r0, r7]
 8006014:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006018:	462f      	mov	r7, r5
 800601a:	42bb      	cmp	r3, r7
 800601c:	460d      	mov	r5, r1
 800601e:	d9f4      	bls.n	800600a <_printf_i+0x112>
 8006020:	2b08      	cmp	r3, #8
 8006022:	d10b      	bne.n	800603c <_printf_i+0x144>
 8006024:	6823      	ldr	r3, [r4, #0]
 8006026:	07df      	lsls	r7, r3, #31
 8006028:	d508      	bpl.n	800603c <_printf_i+0x144>
 800602a:	6923      	ldr	r3, [r4, #16]
 800602c:	6861      	ldr	r1, [r4, #4]
 800602e:	4299      	cmp	r1, r3
 8006030:	bfde      	ittt	le
 8006032:	2330      	movle	r3, #48	@ 0x30
 8006034:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006038:	f106 36ff 	addle.w	r6, r6, #4294967295
 800603c:	1b92      	subs	r2, r2, r6
 800603e:	6122      	str	r2, [r4, #16]
 8006040:	f8cd a000 	str.w	sl, [sp]
 8006044:	464b      	mov	r3, r9
 8006046:	aa03      	add	r2, sp, #12
 8006048:	4621      	mov	r1, r4
 800604a:	4640      	mov	r0, r8
 800604c:	f7ff fee6 	bl	8005e1c <_printf_common>
 8006050:	3001      	adds	r0, #1
 8006052:	d14a      	bne.n	80060ea <_printf_i+0x1f2>
 8006054:	f04f 30ff 	mov.w	r0, #4294967295
 8006058:	b004      	add	sp, #16
 800605a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	f043 0320 	orr.w	r3, r3, #32
 8006064:	6023      	str	r3, [r4, #0]
 8006066:	4833      	ldr	r0, [pc, #204]	@ (8006134 <_printf_i+0x23c>)
 8006068:	2778      	movs	r7, #120	@ 0x78
 800606a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	6831      	ldr	r1, [r6, #0]
 8006072:	061f      	lsls	r7, r3, #24
 8006074:	f851 5b04 	ldr.w	r5, [r1], #4
 8006078:	d402      	bmi.n	8006080 <_printf_i+0x188>
 800607a:	065f      	lsls	r7, r3, #25
 800607c:	bf48      	it	mi
 800607e:	b2ad      	uxthmi	r5, r5
 8006080:	6031      	str	r1, [r6, #0]
 8006082:	07d9      	lsls	r1, r3, #31
 8006084:	bf44      	itt	mi
 8006086:	f043 0320 	orrmi.w	r3, r3, #32
 800608a:	6023      	strmi	r3, [r4, #0]
 800608c:	b11d      	cbz	r5, 8006096 <_printf_i+0x19e>
 800608e:	2310      	movs	r3, #16
 8006090:	e7ac      	b.n	8005fec <_printf_i+0xf4>
 8006092:	4827      	ldr	r0, [pc, #156]	@ (8006130 <_printf_i+0x238>)
 8006094:	e7e9      	b.n	800606a <_printf_i+0x172>
 8006096:	6823      	ldr	r3, [r4, #0]
 8006098:	f023 0320 	bic.w	r3, r3, #32
 800609c:	6023      	str	r3, [r4, #0]
 800609e:	e7f6      	b.n	800608e <_printf_i+0x196>
 80060a0:	4616      	mov	r6, r2
 80060a2:	e7bd      	b.n	8006020 <_printf_i+0x128>
 80060a4:	6833      	ldr	r3, [r6, #0]
 80060a6:	6825      	ldr	r5, [r4, #0]
 80060a8:	6961      	ldr	r1, [r4, #20]
 80060aa:	1d18      	adds	r0, r3, #4
 80060ac:	6030      	str	r0, [r6, #0]
 80060ae:	062e      	lsls	r6, r5, #24
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	d501      	bpl.n	80060b8 <_printf_i+0x1c0>
 80060b4:	6019      	str	r1, [r3, #0]
 80060b6:	e002      	b.n	80060be <_printf_i+0x1c6>
 80060b8:	0668      	lsls	r0, r5, #25
 80060ba:	d5fb      	bpl.n	80060b4 <_printf_i+0x1bc>
 80060bc:	8019      	strh	r1, [r3, #0]
 80060be:	2300      	movs	r3, #0
 80060c0:	6123      	str	r3, [r4, #16]
 80060c2:	4616      	mov	r6, r2
 80060c4:	e7bc      	b.n	8006040 <_printf_i+0x148>
 80060c6:	6833      	ldr	r3, [r6, #0]
 80060c8:	1d1a      	adds	r2, r3, #4
 80060ca:	6032      	str	r2, [r6, #0]
 80060cc:	681e      	ldr	r6, [r3, #0]
 80060ce:	6862      	ldr	r2, [r4, #4]
 80060d0:	2100      	movs	r1, #0
 80060d2:	4630      	mov	r0, r6
 80060d4:	f7fa f87c 	bl	80001d0 <memchr>
 80060d8:	b108      	cbz	r0, 80060de <_printf_i+0x1e6>
 80060da:	1b80      	subs	r0, r0, r6
 80060dc:	6060      	str	r0, [r4, #4]
 80060de:	6863      	ldr	r3, [r4, #4]
 80060e0:	6123      	str	r3, [r4, #16]
 80060e2:	2300      	movs	r3, #0
 80060e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060e8:	e7aa      	b.n	8006040 <_printf_i+0x148>
 80060ea:	6923      	ldr	r3, [r4, #16]
 80060ec:	4632      	mov	r2, r6
 80060ee:	4649      	mov	r1, r9
 80060f0:	4640      	mov	r0, r8
 80060f2:	47d0      	blx	sl
 80060f4:	3001      	adds	r0, #1
 80060f6:	d0ad      	beq.n	8006054 <_printf_i+0x15c>
 80060f8:	6823      	ldr	r3, [r4, #0]
 80060fa:	079b      	lsls	r3, r3, #30
 80060fc:	d413      	bmi.n	8006126 <_printf_i+0x22e>
 80060fe:	68e0      	ldr	r0, [r4, #12]
 8006100:	9b03      	ldr	r3, [sp, #12]
 8006102:	4298      	cmp	r0, r3
 8006104:	bfb8      	it	lt
 8006106:	4618      	movlt	r0, r3
 8006108:	e7a6      	b.n	8006058 <_printf_i+0x160>
 800610a:	2301      	movs	r3, #1
 800610c:	4632      	mov	r2, r6
 800610e:	4649      	mov	r1, r9
 8006110:	4640      	mov	r0, r8
 8006112:	47d0      	blx	sl
 8006114:	3001      	adds	r0, #1
 8006116:	d09d      	beq.n	8006054 <_printf_i+0x15c>
 8006118:	3501      	adds	r5, #1
 800611a:	68e3      	ldr	r3, [r4, #12]
 800611c:	9903      	ldr	r1, [sp, #12]
 800611e:	1a5b      	subs	r3, r3, r1
 8006120:	42ab      	cmp	r3, r5
 8006122:	dcf2      	bgt.n	800610a <_printf_i+0x212>
 8006124:	e7eb      	b.n	80060fe <_printf_i+0x206>
 8006126:	2500      	movs	r5, #0
 8006128:	f104 0619 	add.w	r6, r4, #25
 800612c:	e7f5      	b.n	800611a <_printf_i+0x222>
 800612e:	bf00      	nop
 8006130:	0800650c 	.word	0x0800650c
 8006134:	0800651d 	.word	0x0800651d

08006138 <__swbuf_r>:
 8006138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800613a:	460e      	mov	r6, r1
 800613c:	4614      	mov	r4, r2
 800613e:	4605      	mov	r5, r0
 8006140:	b118      	cbz	r0, 800614a <__swbuf_r+0x12>
 8006142:	6a03      	ldr	r3, [r0, #32]
 8006144:	b90b      	cbnz	r3, 800614a <__swbuf_r+0x12>
 8006146:	f7ff fa11 	bl	800556c <__sinit>
 800614a:	69a3      	ldr	r3, [r4, #24]
 800614c:	60a3      	str	r3, [r4, #8]
 800614e:	89a3      	ldrh	r3, [r4, #12]
 8006150:	071a      	lsls	r2, r3, #28
 8006152:	d501      	bpl.n	8006158 <__swbuf_r+0x20>
 8006154:	6923      	ldr	r3, [r4, #16]
 8006156:	b943      	cbnz	r3, 800616a <__swbuf_r+0x32>
 8006158:	4621      	mov	r1, r4
 800615a:	4628      	mov	r0, r5
 800615c:	f000 f82a 	bl	80061b4 <__swsetup_r>
 8006160:	b118      	cbz	r0, 800616a <__swbuf_r+0x32>
 8006162:	f04f 37ff 	mov.w	r7, #4294967295
 8006166:	4638      	mov	r0, r7
 8006168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	6922      	ldr	r2, [r4, #16]
 800616e:	1a98      	subs	r0, r3, r2
 8006170:	6963      	ldr	r3, [r4, #20]
 8006172:	b2f6      	uxtb	r6, r6
 8006174:	4283      	cmp	r3, r0
 8006176:	4637      	mov	r7, r6
 8006178:	dc05      	bgt.n	8006186 <__swbuf_r+0x4e>
 800617a:	4621      	mov	r1, r4
 800617c:	4628      	mov	r0, r5
 800617e:	f7ff fcbb 	bl	8005af8 <_fflush_r>
 8006182:	2800      	cmp	r0, #0
 8006184:	d1ed      	bne.n	8006162 <__swbuf_r+0x2a>
 8006186:	68a3      	ldr	r3, [r4, #8]
 8006188:	3b01      	subs	r3, #1
 800618a:	60a3      	str	r3, [r4, #8]
 800618c:	6823      	ldr	r3, [r4, #0]
 800618e:	1c5a      	adds	r2, r3, #1
 8006190:	6022      	str	r2, [r4, #0]
 8006192:	701e      	strb	r6, [r3, #0]
 8006194:	6962      	ldr	r2, [r4, #20]
 8006196:	1c43      	adds	r3, r0, #1
 8006198:	429a      	cmp	r2, r3
 800619a:	d004      	beq.n	80061a6 <__swbuf_r+0x6e>
 800619c:	89a3      	ldrh	r3, [r4, #12]
 800619e:	07db      	lsls	r3, r3, #31
 80061a0:	d5e1      	bpl.n	8006166 <__swbuf_r+0x2e>
 80061a2:	2e0a      	cmp	r6, #10
 80061a4:	d1df      	bne.n	8006166 <__swbuf_r+0x2e>
 80061a6:	4621      	mov	r1, r4
 80061a8:	4628      	mov	r0, r5
 80061aa:	f7ff fca5 	bl	8005af8 <_fflush_r>
 80061ae:	2800      	cmp	r0, #0
 80061b0:	d0d9      	beq.n	8006166 <__swbuf_r+0x2e>
 80061b2:	e7d6      	b.n	8006162 <__swbuf_r+0x2a>

080061b4 <__swsetup_r>:
 80061b4:	b538      	push	{r3, r4, r5, lr}
 80061b6:	4b29      	ldr	r3, [pc, #164]	@ (800625c <__swsetup_r+0xa8>)
 80061b8:	4605      	mov	r5, r0
 80061ba:	6818      	ldr	r0, [r3, #0]
 80061bc:	460c      	mov	r4, r1
 80061be:	b118      	cbz	r0, 80061c8 <__swsetup_r+0x14>
 80061c0:	6a03      	ldr	r3, [r0, #32]
 80061c2:	b90b      	cbnz	r3, 80061c8 <__swsetup_r+0x14>
 80061c4:	f7ff f9d2 	bl	800556c <__sinit>
 80061c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061cc:	0719      	lsls	r1, r3, #28
 80061ce:	d422      	bmi.n	8006216 <__swsetup_r+0x62>
 80061d0:	06da      	lsls	r2, r3, #27
 80061d2:	d407      	bmi.n	80061e4 <__swsetup_r+0x30>
 80061d4:	2209      	movs	r2, #9
 80061d6:	602a      	str	r2, [r5, #0]
 80061d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061dc:	81a3      	strh	r3, [r4, #12]
 80061de:	f04f 30ff 	mov.w	r0, #4294967295
 80061e2:	e033      	b.n	800624c <__swsetup_r+0x98>
 80061e4:	0758      	lsls	r0, r3, #29
 80061e6:	d512      	bpl.n	800620e <__swsetup_r+0x5a>
 80061e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061ea:	b141      	cbz	r1, 80061fe <__swsetup_r+0x4a>
 80061ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80061f0:	4299      	cmp	r1, r3
 80061f2:	d002      	beq.n	80061fa <__swsetup_r+0x46>
 80061f4:	4628      	mov	r0, r5
 80061f6:	f7ff fafb 	bl	80057f0 <_free_r>
 80061fa:	2300      	movs	r3, #0
 80061fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80061fe:	89a3      	ldrh	r3, [r4, #12]
 8006200:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006204:	81a3      	strh	r3, [r4, #12]
 8006206:	2300      	movs	r3, #0
 8006208:	6063      	str	r3, [r4, #4]
 800620a:	6923      	ldr	r3, [r4, #16]
 800620c:	6023      	str	r3, [r4, #0]
 800620e:	89a3      	ldrh	r3, [r4, #12]
 8006210:	f043 0308 	orr.w	r3, r3, #8
 8006214:	81a3      	strh	r3, [r4, #12]
 8006216:	6923      	ldr	r3, [r4, #16]
 8006218:	b94b      	cbnz	r3, 800622e <__swsetup_r+0x7a>
 800621a:	89a3      	ldrh	r3, [r4, #12]
 800621c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006224:	d003      	beq.n	800622e <__swsetup_r+0x7a>
 8006226:	4621      	mov	r1, r4
 8006228:	4628      	mov	r0, r5
 800622a:	f000 f883 	bl	8006334 <__smakebuf_r>
 800622e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006232:	f013 0201 	ands.w	r2, r3, #1
 8006236:	d00a      	beq.n	800624e <__swsetup_r+0x9a>
 8006238:	2200      	movs	r2, #0
 800623a:	60a2      	str	r2, [r4, #8]
 800623c:	6962      	ldr	r2, [r4, #20]
 800623e:	4252      	negs	r2, r2
 8006240:	61a2      	str	r2, [r4, #24]
 8006242:	6922      	ldr	r2, [r4, #16]
 8006244:	b942      	cbnz	r2, 8006258 <__swsetup_r+0xa4>
 8006246:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800624a:	d1c5      	bne.n	80061d8 <__swsetup_r+0x24>
 800624c:	bd38      	pop	{r3, r4, r5, pc}
 800624e:	0799      	lsls	r1, r3, #30
 8006250:	bf58      	it	pl
 8006252:	6962      	ldrpl	r2, [r4, #20]
 8006254:	60a2      	str	r2, [r4, #8]
 8006256:	e7f4      	b.n	8006242 <__swsetup_r+0x8e>
 8006258:	2000      	movs	r0, #0
 800625a:	e7f7      	b.n	800624c <__swsetup_r+0x98>
 800625c:	20000018 	.word	0x20000018

08006260 <_raise_r>:
 8006260:	291f      	cmp	r1, #31
 8006262:	b538      	push	{r3, r4, r5, lr}
 8006264:	4605      	mov	r5, r0
 8006266:	460c      	mov	r4, r1
 8006268:	d904      	bls.n	8006274 <_raise_r+0x14>
 800626a:	2316      	movs	r3, #22
 800626c:	6003      	str	r3, [r0, #0]
 800626e:	f04f 30ff 	mov.w	r0, #4294967295
 8006272:	bd38      	pop	{r3, r4, r5, pc}
 8006274:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006276:	b112      	cbz	r2, 800627e <_raise_r+0x1e>
 8006278:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800627c:	b94b      	cbnz	r3, 8006292 <_raise_r+0x32>
 800627e:	4628      	mov	r0, r5
 8006280:	f000 f830 	bl	80062e4 <_getpid_r>
 8006284:	4622      	mov	r2, r4
 8006286:	4601      	mov	r1, r0
 8006288:	4628      	mov	r0, r5
 800628a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800628e:	f000 b817 	b.w	80062c0 <_kill_r>
 8006292:	2b01      	cmp	r3, #1
 8006294:	d00a      	beq.n	80062ac <_raise_r+0x4c>
 8006296:	1c59      	adds	r1, r3, #1
 8006298:	d103      	bne.n	80062a2 <_raise_r+0x42>
 800629a:	2316      	movs	r3, #22
 800629c:	6003      	str	r3, [r0, #0]
 800629e:	2001      	movs	r0, #1
 80062a0:	e7e7      	b.n	8006272 <_raise_r+0x12>
 80062a2:	2100      	movs	r1, #0
 80062a4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80062a8:	4620      	mov	r0, r4
 80062aa:	4798      	blx	r3
 80062ac:	2000      	movs	r0, #0
 80062ae:	e7e0      	b.n	8006272 <_raise_r+0x12>

080062b0 <raise>:
 80062b0:	4b02      	ldr	r3, [pc, #8]	@ (80062bc <raise+0xc>)
 80062b2:	4601      	mov	r1, r0
 80062b4:	6818      	ldr	r0, [r3, #0]
 80062b6:	f7ff bfd3 	b.w	8006260 <_raise_r>
 80062ba:	bf00      	nop
 80062bc:	20000018 	.word	0x20000018

080062c0 <_kill_r>:
 80062c0:	b538      	push	{r3, r4, r5, lr}
 80062c2:	4d07      	ldr	r5, [pc, #28]	@ (80062e0 <_kill_r+0x20>)
 80062c4:	2300      	movs	r3, #0
 80062c6:	4604      	mov	r4, r0
 80062c8:	4608      	mov	r0, r1
 80062ca:	4611      	mov	r1, r2
 80062cc:	602b      	str	r3, [r5, #0]
 80062ce:	f7fa fdf5 	bl	8000ebc <_kill>
 80062d2:	1c43      	adds	r3, r0, #1
 80062d4:	d102      	bne.n	80062dc <_kill_r+0x1c>
 80062d6:	682b      	ldr	r3, [r5, #0]
 80062d8:	b103      	cbz	r3, 80062dc <_kill_r+0x1c>
 80062da:	6023      	str	r3, [r4, #0]
 80062dc:	bd38      	pop	{r3, r4, r5, pc}
 80062de:	bf00      	nop
 80062e0:	200003cc 	.word	0x200003cc

080062e4 <_getpid_r>:
 80062e4:	f7fa bde2 	b.w	8000eac <_getpid>

080062e8 <__swhatbuf_r>:
 80062e8:	b570      	push	{r4, r5, r6, lr}
 80062ea:	460c      	mov	r4, r1
 80062ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062f0:	2900      	cmp	r1, #0
 80062f2:	b096      	sub	sp, #88	@ 0x58
 80062f4:	4615      	mov	r5, r2
 80062f6:	461e      	mov	r6, r3
 80062f8:	da0d      	bge.n	8006316 <__swhatbuf_r+0x2e>
 80062fa:	89a3      	ldrh	r3, [r4, #12]
 80062fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006300:	f04f 0100 	mov.w	r1, #0
 8006304:	bf14      	ite	ne
 8006306:	2340      	movne	r3, #64	@ 0x40
 8006308:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800630c:	2000      	movs	r0, #0
 800630e:	6031      	str	r1, [r6, #0]
 8006310:	602b      	str	r3, [r5, #0]
 8006312:	b016      	add	sp, #88	@ 0x58
 8006314:	bd70      	pop	{r4, r5, r6, pc}
 8006316:	466a      	mov	r2, sp
 8006318:	f000 f848 	bl	80063ac <_fstat_r>
 800631c:	2800      	cmp	r0, #0
 800631e:	dbec      	blt.n	80062fa <__swhatbuf_r+0x12>
 8006320:	9901      	ldr	r1, [sp, #4]
 8006322:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006326:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800632a:	4259      	negs	r1, r3
 800632c:	4159      	adcs	r1, r3
 800632e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006332:	e7eb      	b.n	800630c <__swhatbuf_r+0x24>

08006334 <__smakebuf_r>:
 8006334:	898b      	ldrh	r3, [r1, #12]
 8006336:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006338:	079d      	lsls	r5, r3, #30
 800633a:	4606      	mov	r6, r0
 800633c:	460c      	mov	r4, r1
 800633e:	d507      	bpl.n	8006350 <__smakebuf_r+0x1c>
 8006340:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006344:	6023      	str	r3, [r4, #0]
 8006346:	6123      	str	r3, [r4, #16]
 8006348:	2301      	movs	r3, #1
 800634a:	6163      	str	r3, [r4, #20]
 800634c:	b003      	add	sp, #12
 800634e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006350:	ab01      	add	r3, sp, #4
 8006352:	466a      	mov	r2, sp
 8006354:	f7ff ffc8 	bl	80062e8 <__swhatbuf_r>
 8006358:	9f00      	ldr	r7, [sp, #0]
 800635a:	4605      	mov	r5, r0
 800635c:	4639      	mov	r1, r7
 800635e:	4630      	mov	r0, r6
 8006360:	f7ff faba 	bl	80058d8 <_malloc_r>
 8006364:	b948      	cbnz	r0, 800637a <__smakebuf_r+0x46>
 8006366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800636a:	059a      	lsls	r2, r3, #22
 800636c:	d4ee      	bmi.n	800634c <__smakebuf_r+0x18>
 800636e:	f023 0303 	bic.w	r3, r3, #3
 8006372:	f043 0302 	orr.w	r3, r3, #2
 8006376:	81a3      	strh	r3, [r4, #12]
 8006378:	e7e2      	b.n	8006340 <__smakebuf_r+0xc>
 800637a:	89a3      	ldrh	r3, [r4, #12]
 800637c:	6020      	str	r0, [r4, #0]
 800637e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006382:	81a3      	strh	r3, [r4, #12]
 8006384:	9b01      	ldr	r3, [sp, #4]
 8006386:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800638a:	b15b      	cbz	r3, 80063a4 <__smakebuf_r+0x70>
 800638c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006390:	4630      	mov	r0, r6
 8006392:	f000 f81d 	bl	80063d0 <_isatty_r>
 8006396:	b128      	cbz	r0, 80063a4 <__smakebuf_r+0x70>
 8006398:	89a3      	ldrh	r3, [r4, #12]
 800639a:	f023 0303 	bic.w	r3, r3, #3
 800639e:	f043 0301 	orr.w	r3, r3, #1
 80063a2:	81a3      	strh	r3, [r4, #12]
 80063a4:	89a3      	ldrh	r3, [r4, #12]
 80063a6:	431d      	orrs	r5, r3
 80063a8:	81a5      	strh	r5, [r4, #12]
 80063aa:	e7cf      	b.n	800634c <__smakebuf_r+0x18>

080063ac <_fstat_r>:
 80063ac:	b538      	push	{r3, r4, r5, lr}
 80063ae:	4d07      	ldr	r5, [pc, #28]	@ (80063cc <_fstat_r+0x20>)
 80063b0:	2300      	movs	r3, #0
 80063b2:	4604      	mov	r4, r0
 80063b4:	4608      	mov	r0, r1
 80063b6:	4611      	mov	r1, r2
 80063b8:	602b      	str	r3, [r5, #0]
 80063ba:	f7fa fddf 	bl	8000f7c <_fstat>
 80063be:	1c43      	adds	r3, r0, #1
 80063c0:	d102      	bne.n	80063c8 <_fstat_r+0x1c>
 80063c2:	682b      	ldr	r3, [r5, #0]
 80063c4:	b103      	cbz	r3, 80063c8 <_fstat_r+0x1c>
 80063c6:	6023      	str	r3, [r4, #0]
 80063c8:	bd38      	pop	{r3, r4, r5, pc}
 80063ca:	bf00      	nop
 80063cc:	200003cc 	.word	0x200003cc

080063d0 <_isatty_r>:
 80063d0:	b538      	push	{r3, r4, r5, lr}
 80063d2:	4d06      	ldr	r5, [pc, #24]	@ (80063ec <_isatty_r+0x1c>)
 80063d4:	2300      	movs	r3, #0
 80063d6:	4604      	mov	r4, r0
 80063d8:	4608      	mov	r0, r1
 80063da:	602b      	str	r3, [r5, #0]
 80063dc:	f7fa fdde 	bl	8000f9c <_isatty>
 80063e0:	1c43      	adds	r3, r0, #1
 80063e2:	d102      	bne.n	80063ea <_isatty_r+0x1a>
 80063e4:	682b      	ldr	r3, [r5, #0]
 80063e6:	b103      	cbz	r3, 80063ea <_isatty_r+0x1a>
 80063e8:	6023      	str	r3, [r4, #0]
 80063ea:	bd38      	pop	{r3, r4, r5, pc}
 80063ec:	200003cc 	.word	0x200003cc

080063f0 <_gettimeofday>:
 80063f0:	4b02      	ldr	r3, [pc, #8]	@ (80063fc <_gettimeofday+0xc>)
 80063f2:	2258      	movs	r2, #88	@ 0x58
 80063f4:	601a      	str	r2, [r3, #0]
 80063f6:	f04f 30ff 	mov.w	r0, #4294967295
 80063fa:	4770      	bx	lr
 80063fc:	200003cc 	.word	0x200003cc

08006400 <_init>:
 8006400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006402:	bf00      	nop
 8006404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006406:	bc08      	pop	{r3}
 8006408:	469e      	mov	lr, r3
 800640a:	4770      	bx	lr

0800640c <_fini>:
 800640c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800640e:	bf00      	nop
 8006410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006412:	bc08      	pop	{r3}
 8006414:	469e      	mov	lr, r3
 8006416:	4770      	bx	lr
