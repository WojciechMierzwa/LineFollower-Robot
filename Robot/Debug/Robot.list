
Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072d8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08007468  08007468  00008468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007580  08007580  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007580  08007580  00008580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007588  08007588  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007588  08007588  00008588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800758c  0800758c  0000858c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007590  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  2000006c  080075fc  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  080075fc  00009424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe73  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002358  00000000  00000000  00018f0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  0001b268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b3b  00000000  00000000  0001c0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ce84  00000000  00000000  0001cc03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011db1  00000000  00000000  00039a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a83a1  00000000  00000000  0004b838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f3bd9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004698  00000000  00000000  000f3c1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000f82b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007450 	.word	0x08007450

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08007450 	.word	0x08007450

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000882:	f001 fc91 	bl	80021a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000886:	f000 fb0f 	bl	8000ea8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088a:	f000 fd8b 	bl	80013a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800088e:	f000 fd59 	bl	8001344 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000892:	f000 fd27 	bl	80012e4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000896:	f000 fb69 	bl	8000f6c <MX_TIM1_Init>
  MX_TIM16_Init();
 800089a:	f000 fc83 	bl	80011a4 <MX_TIM16_Init>
  MX_TIM2_Init();
 800089e:	f000 fc1d 	bl	80010dc <MX_TIM2_Init>
  MX_TIM17_Init();
 80008a2:	f000 fcf9 	bl	8001298 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 80008a6:	48bb      	ldr	r0, [pc, #748]	@ (8000b94 <main+0x318>)
 80008a8:	f003 fc90 	bl	80041cc <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 80008ac:	2200      	movs	r2, #0
 80008ae:	2102      	movs	r1, #2
 80008b0:	48b9      	ldr	r0, [pc, #740]	@ (8000b98 <main+0x31c>)
 80008b2:	f002 f815 	bl	80028e0 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80008b6:	2100      	movs	r1, #0
 80008b8:	48b8      	ldr	r0, [pc, #736]	@ (8000b9c <main+0x320>)
 80008ba:	f003 fd2b 	bl	8004314 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80008be:	2100      	movs	r1, #0
 80008c0:	48b4      	ldr	r0, [pc, #720]	@ (8000b94 <main+0x318>)
 80008c2:	f003 fd27 	bl	8004314 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80008c6:	210c      	movs	r1, #12
 80008c8:	48b2      	ldr	r0, [pc, #712]	@ (8000b94 <main+0x318>)
 80008ca:	f003 fd23 	bl	8004314 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80008ce:	2100      	movs	r1, #0
 80008d0:	48b3      	ldr	r0, [pc, #716]	@ (8000ba0 <main+0x324>)
 80008d2:	f003 fd1f 	bl	8004314 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80008d6:	2108      	movs	r1, #8
 80008d8:	48b1      	ldr	r0, [pc, #708]	@ (8000ba0 <main+0x324>)
 80008da:	f003 fd1b 	bl	8004314 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //set_ang(0, 0);

  uint16_t counter=1;
 80008de:	2301      	movs	r3, #1
 80008e0:	80fb      	strh	r3, [r7, #6]
  uint16_t distance;
  set_ang(450, 0);
 80008e2:	2100      	movs	r1, #0
 80008e4:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 80008e8:	f000 fe74 	bl	80015d4 <set_ang>


  /**/

  srand(time(NULL));
 80008ec:	2000      	movs	r0, #0
 80008ee:	f005 fee7 	bl	80066c0 <time>
 80008f2:	4602      	mov	r2, r0
 80008f4:	460b      	mov	r3, r1
 80008f6:	4613      	mov	r3, r2
 80008f8:	4618      	mov	r0, r3
 80008fa:	f005 fda5 	bl	8006448 <srand>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(counter>6){
 80008fe:	88fb      	ldrh	r3, [r7, #6]
 8000900:	2b06      	cmp	r3, #6
 8000902:	d901      	bls.n	8000908 <main+0x8c>
	  	  	        	counter=1;
 8000904:	2301      	movs	r3, #1
 8000906:	80fb      	strh	r3, [r7, #6]
	  	  	        }
	  	  if (HAL_GPIO_ReadPin(ButtonExt_GPIO_Port, ButtonExt_Pin) == GPIO_PIN_SET)
 8000908:	2104      	movs	r1, #4
 800090a:	48a6      	ldr	r0, [pc, #664]	@ (8000ba4 <main+0x328>)
 800090c:	f001 ffd0 	bl	80028b0 <HAL_GPIO_ReadPin>
 8000910:	4603      	mov	r3, r0
 8000912:	2b01      	cmp	r3, #1
 8000914:	d106      	bne.n	8000924 <main+0xa8>
	  	      {
	  	        counter++;
 8000916:	88fb      	ldrh	r3, [r7, #6]
 8000918:	3301      	adds	r3, #1
 800091a:	80fb      	strh	r3, [r7, #6]
	  	        HAL_Delay(500);
 800091c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000920:	f001 fca8 	bl	8002274 <HAL_Delay>

	  	      }

	  	  	  display_reset();
 8000924:	f001 f82c 	bl	8001980 <display_reset>
	  	      switch (counter)
 8000928:	88fb      	ldrh	r3, [r7, #6]
 800092a:	3b01      	subs	r3, #1
 800092c:	2b05      	cmp	r3, #5
 800092e:	d8e6      	bhi.n	80008fe <main+0x82>
 8000930:	a201      	add	r2, pc, #4	@ (adr r2, 8000938 <main+0xbc>)
 8000932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000936:	bf00      	nop
 8000938:	08000951 	.word	0x08000951
 800093c:	08000a3b 	.word	0x08000a3b
 8000940:	08000bb9 	.word	0x08000bb9
 8000944:	08000ca3 	.word	0x08000ca3
 8000948:	08000d8b 	.word	0x08000d8b
 800094c:	08000db1 	.word	0x08000db1
	  	      {
	  	      case 1:
	  	        display_reset();
 8000950:	f001 f816 	bl	8001980 <display_reset>
	  	        display1();
 8000954:	f000 ff44 	bl	80017e0 <display1>
	  	        if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8000958:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800095c:	488e      	ldr	r0, [pc, #568]	@ (8000b98 <main+0x31c>)
 800095e:	f001 ffa7 	bl	80028b0 <HAL_GPIO_ReadPin>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	f040 8286 	bne.w	8000e76 <main+0x5fa>
	  	        {
	  	        	//linefollower niezmodyfikowany nie widzi lini jedzie do tyłu
	  	        	countdown();
 800096a:	f001 f83b 	bl	80019e4 <countdown>
	  	        	while(1){
	  	        		detect_states[0] = HAL_GPIO_ReadPin(DETECT1_GPIO_Port, DETECT1_Pin);
 800096e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000972:	4889      	ldr	r0, [pc, #548]	@ (8000b98 <main+0x31c>)
 8000974:	f001 ff9c 	bl	80028b0 <HAL_GPIO_ReadPin>
 8000978:	4603      	mov	r3, r0
 800097a:	461a      	mov	r2, r3
 800097c:	4b8a      	ldr	r3, [pc, #552]	@ (8000ba8 <main+0x32c>)
 800097e:	701a      	strb	r2, [r3, #0]
	  	        		detect_states[1] = HAL_GPIO_ReadPin(DETECT2_GPIO_Port, DETECT2_Pin);
 8000980:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000984:	4884      	ldr	r0, [pc, #528]	@ (8000b98 <main+0x31c>)
 8000986:	f001 ff93 	bl	80028b0 <HAL_GPIO_ReadPin>
 800098a:	4603      	mov	r3, r0
 800098c:	461a      	mov	r2, r3
 800098e:	4b86      	ldr	r3, [pc, #536]	@ (8000ba8 <main+0x32c>)
 8000990:	705a      	strb	r2, [r3, #1]
	  	        		detect_states[2] = HAL_GPIO_ReadPin(DETECT3_GPIO_Port, DETECT3_Pin);
 8000992:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000996:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800099a:	f001 ff89 	bl	80028b0 <HAL_GPIO_ReadPin>
 800099e:	4603      	mov	r3, r0
 80009a0:	461a      	mov	r2, r3
 80009a2:	4b81      	ldr	r3, [pc, #516]	@ (8000ba8 <main+0x32c>)
 80009a4:	709a      	strb	r2, [r3, #2]
	  	        		detect_states[3] = HAL_GPIO_ReadPin(DETECT4_GPIO_Port, DETECT4_Pin);
 80009a6:	2180      	movs	r1, #128	@ 0x80
 80009a8:	487e      	ldr	r0, [pc, #504]	@ (8000ba4 <main+0x328>)
 80009aa:	f001 ff81 	bl	80028b0 <HAL_GPIO_ReadPin>
 80009ae:	4603      	mov	r3, r0
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b7d      	ldr	r3, [pc, #500]	@ (8000ba8 <main+0x32c>)
 80009b4:	70da      	strb	r2, [r3, #3]
	  	        		detect_states[4] = HAL_GPIO_ReadPin(DETECT5_GPIO_Port, DETECT5_Pin);
 80009b6:	2104      	movs	r1, #4
 80009b8:	4877      	ldr	r0, [pc, #476]	@ (8000b98 <main+0x31c>)
 80009ba:	f001 ff79 	bl	80028b0 <HAL_GPIO_ReadPin>
 80009be:	4603      	mov	r3, r0
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b79      	ldr	r3, [pc, #484]	@ (8000ba8 <main+0x32c>)
 80009c4:	711a      	strb	r2, [r3, #4]


	  	        		if(detect_states[2]==0)
 80009c6:	4b78      	ldr	r3, [pc, #480]	@ (8000ba8 <main+0x32c>)
 80009c8:	789b      	ldrb	r3, [r3, #2]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d105      	bne.n	80009da <main+0x15e>
	  	        		{
	  	        			motor_forward(cycle);
 80009ce:	4b77      	ldr	r3, [pc, #476]	@ (8000bac <main+0x330>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 fe40 	bl	8001658 <motor_forward>
 80009d8:	e7c9      	b.n	800096e <main+0xf2>
	  	        		}
	  	        		else{
	  	        			if(detect_states[1]==0 || detect_states[0]==0)
 80009da:	4b73      	ldr	r3, [pc, #460]	@ (8000ba8 <main+0x32c>)
 80009dc:	785b      	ldrb	r3, [r3, #1]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d003      	beq.n	80009ea <main+0x16e>
 80009e2:	4b71      	ldr	r3, [pc, #452]	@ (8000ba8 <main+0x32c>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d10a      	bne.n	8000a00 <main+0x184>
	  	        			{
	  	        				motor_left(cycle);
 80009ea:	4b70      	ldr	r3, [pc, #448]	@ (8000bac <main+0x330>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 fe5a 	bl	80016a8 <motor_left>
	  	        				set_ang(900, 0);
 80009f4:	2100      	movs	r1, #0
 80009f6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80009fa:	f000 fdeb 	bl	80015d4 <set_ang>
 80009fe:	e01b      	b.n	8000a38 <main+0x1bc>
	  	        			}
	  	        			else if(detect_states[3]==0 || detect_states[4]==0){
 8000a00:	4b69      	ldr	r3, [pc, #420]	@ (8000ba8 <main+0x32c>)
 8000a02:	78db      	ldrb	r3, [r3, #3]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d003      	beq.n	8000a10 <main+0x194>
 8000a08:	4b67      	ldr	r3, [pc, #412]	@ (8000ba8 <main+0x32c>)
 8000a0a:	791b      	ldrb	r3, [r3, #4]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d109      	bne.n	8000a24 <main+0x1a8>
	  	        				motor_right(cycle);
 8000a10:	4b66      	ldr	r3, [pc, #408]	@ (8000bac <main+0x330>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f000 fe73 	bl	8001700 <motor_right>
	  	        				set_ang(0, 0);
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f000 fdd9 	bl	80015d4 <set_ang>
 8000a22:	e009      	b.n	8000a38 <main+0x1bc>
	  	        			}
	  	        			else{
	  	        				motor_backward(cycle);
 8000a24:	4b61      	ldr	r3, [pc, #388]	@ (8000bac <main+0x330>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 fe95 	bl	8001758 <motor_backward>
	  	        				set_ang(450, 0);
 8000a2e:	2100      	movs	r1, #0
 8000a30:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000a34:	f000 fdce 	bl	80015d4 <set_ang>
	  	        		detect_states[0] = HAL_GPIO_ReadPin(DETECT1_GPIO_Port, DETECT1_Pin);
 8000a38:	e799      	b.n	800096e <main+0xf2>
	  	        		}
	  	        	}
	  	        }
	  	        break;
	  	    case 2:
	  	   	  	        display_reset();
 8000a3a:	f000 ffa1 	bl	8001980 <display_reset>
	  	   	  	        display2();
 8000a3e:	f000 fedf 	bl	8001800 <display2>
	  	   	  	        if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8000a42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a46:	4854      	ldr	r0, [pc, #336]	@ (8000b98 <main+0x31c>)
 8000a48:	f001 ff32 	bl	80028b0 <HAL_GPIO_ReadPin>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	f040 8213 	bne.w	8000e7a <main+0x5fe>
	  	   	  	        {
	  	   	  	        	//linefollower
	  	   	  	        	countdown();
 8000a54:	f000 ffc6 	bl	80019e4 <countdown>
	  	   	  	        	while(1){
	  	   	  	        		detect_states[0] = HAL_GPIO_ReadPin(DETECT1_GPIO_Port, DETECT1_Pin);
 8000a58:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a5c:	484e      	ldr	r0, [pc, #312]	@ (8000b98 <main+0x31c>)
 8000a5e:	f001 ff27 	bl	80028b0 <HAL_GPIO_ReadPin>
 8000a62:	4603      	mov	r3, r0
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b50      	ldr	r3, [pc, #320]	@ (8000ba8 <main+0x32c>)
 8000a68:	701a      	strb	r2, [r3, #0]
	  	   	  	        		detect_states[1] = HAL_GPIO_ReadPin(DETECT2_GPIO_Port, DETECT2_Pin);
 8000a6a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a6e:	484a      	ldr	r0, [pc, #296]	@ (8000b98 <main+0x31c>)
 8000a70:	f001 ff1e 	bl	80028b0 <HAL_GPIO_ReadPin>
 8000a74:	4603      	mov	r3, r0
 8000a76:	461a      	mov	r2, r3
 8000a78:	4b4b      	ldr	r3, [pc, #300]	@ (8000ba8 <main+0x32c>)
 8000a7a:	705a      	strb	r2, [r3, #1]
	  	   	  	        		detect_states[2] = HAL_GPIO_ReadPin(DETECT3_GPIO_Port, DETECT3_Pin);
 8000a7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a84:	f001 ff14 	bl	80028b0 <HAL_GPIO_ReadPin>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4b46      	ldr	r3, [pc, #280]	@ (8000ba8 <main+0x32c>)
 8000a8e:	709a      	strb	r2, [r3, #2]
	  	   	  	        		detect_states[3] = HAL_GPIO_ReadPin(DETECT4_GPIO_Port, DETECT4_Pin);
 8000a90:	2180      	movs	r1, #128	@ 0x80
 8000a92:	4844      	ldr	r0, [pc, #272]	@ (8000ba4 <main+0x328>)
 8000a94:	f001 ff0c 	bl	80028b0 <HAL_GPIO_ReadPin>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	4b42      	ldr	r3, [pc, #264]	@ (8000ba8 <main+0x32c>)
 8000a9e:	70da      	strb	r2, [r3, #3]
	  	   	  	        		detect_states[4] = HAL_GPIO_ReadPin(DETECT5_GPIO_Port, DETECT5_Pin);
 8000aa0:	2104      	movs	r1, #4
 8000aa2:	483d      	ldr	r0, [pc, #244]	@ (8000b98 <main+0x31c>)
 8000aa4:	f001 ff04 	bl	80028b0 <HAL_GPIO_ReadPin>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	461a      	mov	r2, r3
 8000aac:	4b3e      	ldr	r3, [pc, #248]	@ (8000ba8 <main+0x32c>)
 8000aae:	711a      	strb	r2, [r3, #4]

	  	   	  	        		//pomoc dla lini nalezy dodac nowe if i dodac 2 funkcje slightleft slightright(funkjce zwiazane z motor)
	  	   	  	        		detect3L=HAL_GPIO_ReadPin(DETECT3L_GPIO_Port, DETECT3L_Pin);
 8000ab0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ab4:	483b      	ldr	r0, [pc, #236]	@ (8000ba4 <main+0x328>)
 8000ab6:	f001 fefb 	bl	80028b0 <HAL_GPIO_ReadPin>
 8000aba:	4603      	mov	r3, r0
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b3c      	ldr	r3, [pc, #240]	@ (8000bb0 <main+0x334>)
 8000ac0:	701a      	strb	r2, [r3, #0]
	  	   	  	        		detect3P=HAL_GPIO_ReadPin(DETECT3P_GPIO_Port, DETECT3P_Pin);
 8000ac2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ac6:	4837      	ldr	r0, [pc, #220]	@ (8000ba4 <main+0x328>)
 8000ac8:	f001 fef2 	bl	80028b0 <HAL_GPIO_ReadPin>
 8000acc:	4603      	mov	r3, r0
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4b38      	ldr	r3, [pc, #224]	@ (8000bb4 <main+0x338>)
 8000ad2:	701a      	strb	r2, [r3, #0]


	  	   	  	        		if(detect_states[2]==0)
 8000ad4:	4b34      	ldr	r3, [pc, #208]	@ (8000ba8 <main+0x32c>)
 8000ad6:	789b      	ldrb	r3, [r3, #2]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d105      	bne.n	8000ae8 <main+0x26c>
	  	   	  	        		{
	  	   	  	        			motor_forward(cycle);
 8000adc:	4b33      	ldr	r3, [pc, #204]	@ (8000bac <main+0x330>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f000 fdb9 	bl	8001658 <motor_forward>
 8000ae6:	e7b7      	b.n	8000a58 <main+0x1dc>
	  	   	  	        		}
	  	   	  	        		else{
	  	   	  	        			if(detect_states[1]==0 || detect_states[0]==0)
 8000ae8:	4b2f      	ldr	r3, [pc, #188]	@ (8000ba8 <main+0x32c>)
 8000aea:	785b      	ldrb	r3, [r3, #1]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d003      	beq.n	8000af8 <main+0x27c>
 8000af0:	4b2d      	ldr	r3, [pc, #180]	@ (8000ba8 <main+0x32c>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d10a      	bne.n	8000b0e <main+0x292>
	  	   	  	        			{
	  	   	  	        				motor_left(cycle);
 8000af8:	4b2c      	ldr	r3, [pc, #176]	@ (8000bac <main+0x330>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f000 fdd3 	bl	80016a8 <motor_left>
	  	   	  	        				set_ang(900, 0);
 8000b02:	2100      	movs	r1, #0
 8000b04:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8000b08:	f000 fd64 	bl	80015d4 <set_ang>
 8000b0c:	e041      	b.n	8000b92 <main+0x316>
	  	   	  	        			}
	  	   	  	        			else if(detect_states[3]==0 || detect_states[4]==0){
 8000b0e:	4b26      	ldr	r3, [pc, #152]	@ (8000ba8 <main+0x32c>)
 8000b10:	78db      	ldrb	r3, [r3, #3]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d003      	beq.n	8000b1e <main+0x2a2>
 8000b16:	4b24      	ldr	r3, [pc, #144]	@ (8000ba8 <main+0x32c>)
 8000b18:	791b      	ldrb	r3, [r3, #4]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d109      	bne.n	8000b32 <main+0x2b6>
	  	   	  	        				motor_right(cycle);
 8000b1e:	4b23      	ldr	r3, [pc, #140]	@ (8000bac <main+0x330>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 fdec 	bl	8001700 <motor_right>
	  	   	  	        				set_ang(0, 0);
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	f000 fd52 	bl	80015d4 <set_ang>
 8000b30:	e02f      	b.n	8000b92 <main+0x316>
	  	   	  	        			}
	  	   	  	        			else if(detect3L==0 && (detect_states[1]==1)){
 8000b32:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb0 <main+0x334>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d10e      	bne.n	8000b58 <main+0x2dc>
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba8 <main+0x32c>)
 8000b3c:	785b      	ldrb	r3, [r3, #1]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d10a      	bne.n	8000b58 <main+0x2dc>
	  	   	  	        				motor_slight_left(cycle);
 8000b42:	4b1a      	ldr	r3, [pc, #104]	@ (8000bac <main+0x330>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 ff6a 	bl	8001a20 <motor_slight_left>
	  	   	  	        				set_ang(350,0);
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8000b52:	f000 fd3f 	bl	80015d4 <set_ang>
	  	   	  	        			else if(detect3L==0 && (detect_states[1]==1)){
 8000b56:	e01c      	b.n	8000b92 <main+0x316>
	  	   	  	        			}
	  	   	  	        			else if(detect3P==0 && (detect_states[3]==1)){
 8000b58:	4b16      	ldr	r3, [pc, #88]	@ (8000bb4 <main+0x338>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d10e      	bne.n	8000b7e <main+0x302>
 8000b60:	4b11      	ldr	r3, [pc, #68]	@ (8000ba8 <main+0x32c>)
 8000b62:	78db      	ldrb	r3, [r3, #3]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d10a      	bne.n	8000b7e <main+0x302>
	  	   	  	        				motor_slight_right(cycle);
 8000b68:	4b10      	ldr	r3, [pc, #64]	@ (8000bac <main+0x330>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 ff97 	bl	8001aa0 <motor_slight_right>
	  	   	  	        				set_ang(550,0);
 8000b72:	2100      	movs	r1, #0
 8000b74:	f240 2026 	movw	r0, #550	@ 0x226
 8000b78:	f000 fd2c 	bl	80015d4 <set_ang>
	  	   	  	        			else if(detect3P==0 && (detect_states[3]==1)){
 8000b7c:	e009      	b.n	8000b92 <main+0x316>
	  	   	  	        			}
	  	   	  	        			else{
	  	   	  	        				motor_backward(cycle);
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bac <main+0x330>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 fde8 	bl	8001758 <motor_backward>
	  	   	  	        				set_ang(450, 0);
 8000b88:	2100      	movs	r1, #0
 8000b8a:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000b8e:	f000 fd21 	bl	80015d4 <set_ang>
	  	   	  	        		detect_states[0] = HAL_GPIO_ReadPin(DETECT1_GPIO_Port, DETECT1_Pin);
 8000b92:	e761      	b.n	8000a58 <main+0x1dc>
 8000b94:	20000088 	.word	0x20000088
 8000b98:	48000800 	.word	0x48000800
 8000b9c:	20000120 	.word	0x20000120
 8000ba0:	200000d4 	.word	0x200000d4
 8000ba4:	48000400 	.word	0x48000400
 8000ba8:	200002c8 	.word	0x200002c8
 8000bac:	20000000 	.word	0x20000000
 8000bb0:	200002cd 	.word	0x200002cd
 8000bb4:	200002ce 	.word	0x200002ce
	  	   	  	        		}
	  	   	  	        	}
	  	   	  	        }
	  	   	  	        break;
	  	  case 3:
	  	  	  	        display_reset();
 8000bb8:	f000 fee2 	bl	8001980 <display_reset>
	  	  	  	        display3();
 8000bbc:	f000 fe48 	bl	8001850 <display3>
	  	  	  	        if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8000bc0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bc4:	48b2      	ldr	r0, [pc, #712]	@ (8000e90 <main+0x614>)
 8000bc6:	f001 fe73 	bl	80028b0 <HAL_GPIO_ReadPin>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	f040 8156 	bne.w	8000e7e <main+0x602>
	  	  	  	        {
	  	  	  	        	//linefollower zmodyfikowany niewidzi linii jedzie w prawo
	  	  	  	        	countdown();
 8000bd2:	f000 ff07 	bl	80019e4 <countdown>
	  	  	  	        	while(1){
	  	  	  	        		detect_states[0] = HAL_GPIO_ReadPin(DETECT1_GPIO_Port, DETECT1_Pin);
 8000bd6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bda:	48ad      	ldr	r0, [pc, #692]	@ (8000e90 <main+0x614>)
 8000bdc:	f001 fe68 	bl	80028b0 <HAL_GPIO_ReadPin>
 8000be0:	4603      	mov	r3, r0
 8000be2:	461a      	mov	r2, r3
 8000be4:	4bab      	ldr	r3, [pc, #684]	@ (8000e94 <main+0x618>)
 8000be6:	701a      	strb	r2, [r3, #0]
	  	  	  	        		detect_states[1] = HAL_GPIO_ReadPin(DETECT2_GPIO_Port, DETECT2_Pin);
 8000be8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bec:	48a8      	ldr	r0, [pc, #672]	@ (8000e90 <main+0x614>)
 8000bee:	f001 fe5f 	bl	80028b0 <HAL_GPIO_ReadPin>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4ba7      	ldr	r3, [pc, #668]	@ (8000e94 <main+0x618>)
 8000bf8:	705a      	strb	r2, [r3, #1]
	  	  	  	        		detect_states[2] = HAL_GPIO_ReadPin(DETECT3_GPIO_Port, DETECT3_Pin);
 8000bfa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c02:	f001 fe55 	bl	80028b0 <HAL_GPIO_ReadPin>
 8000c06:	4603      	mov	r3, r0
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4ba2      	ldr	r3, [pc, #648]	@ (8000e94 <main+0x618>)
 8000c0c:	709a      	strb	r2, [r3, #2]
	  	  	  	        		detect_states[3] = HAL_GPIO_ReadPin(DETECT4_GPIO_Port, DETECT4_Pin);
 8000c0e:	2180      	movs	r1, #128	@ 0x80
 8000c10:	48a1      	ldr	r0, [pc, #644]	@ (8000e98 <main+0x61c>)
 8000c12:	f001 fe4d 	bl	80028b0 <HAL_GPIO_ReadPin>
 8000c16:	4603      	mov	r3, r0
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b9e      	ldr	r3, [pc, #632]	@ (8000e94 <main+0x618>)
 8000c1c:	70da      	strb	r2, [r3, #3]
	  	  	  	        		detect_states[4] = HAL_GPIO_ReadPin(DETECT5_GPIO_Port, DETECT5_Pin);
 8000c1e:	2104      	movs	r1, #4
 8000c20:	489b      	ldr	r0, [pc, #620]	@ (8000e90 <main+0x614>)
 8000c22:	f001 fe45 	bl	80028b0 <HAL_GPIO_ReadPin>
 8000c26:	4603      	mov	r3, r0
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b9a      	ldr	r3, [pc, #616]	@ (8000e94 <main+0x618>)
 8000c2c:	711a      	strb	r2, [r3, #4]

	  	  	  	        		if(detect_states[2]==0)
 8000c2e:	4b99      	ldr	r3, [pc, #612]	@ (8000e94 <main+0x618>)
 8000c30:	789b      	ldrb	r3, [r3, #2]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d105      	bne.n	8000c42 <main+0x3c6>
	  	  	  	        		{
	  	  	  	        			motor_forward(cycle);
 8000c36:	4b99      	ldr	r3, [pc, #612]	@ (8000e9c <main+0x620>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 fd0c 	bl	8001658 <motor_forward>
 8000c40:	e7c9      	b.n	8000bd6 <main+0x35a>
	  	  	  	        		}
	  	  	  	        		else{
	  	  	  	        			if(detect_states[1]==0 || detect_states[0]==0)
 8000c42:	4b94      	ldr	r3, [pc, #592]	@ (8000e94 <main+0x618>)
 8000c44:	785b      	ldrb	r3, [r3, #1]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d003      	beq.n	8000c52 <main+0x3d6>
 8000c4a:	4b92      	ldr	r3, [pc, #584]	@ (8000e94 <main+0x618>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d10a      	bne.n	8000c68 <main+0x3ec>
	  	  	  	        			{
	  	  	  	        				motor_left(cycle);
 8000c52:	4b92      	ldr	r3, [pc, #584]	@ (8000e9c <main+0x620>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 fd26 	bl	80016a8 <motor_left>
	  	  	  	        				set_ang(900, 0);
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8000c62:	f000 fcb7 	bl	80015d4 <set_ang>
 8000c66:	e01b      	b.n	8000ca0 <main+0x424>
	  	  	  	        			}
	  	  	  	        			else if(detect_states[3]==0 || detect_states[4]==0){
 8000c68:	4b8a      	ldr	r3, [pc, #552]	@ (8000e94 <main+0x618>)
 8000c6a:	78db      	ldrb	r3, [r3, #3]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d003      	beq.n	8000c78 <main+0x3fc>
 8000c70:	4b88      	ldr	r3, [pc, #544]	@ (8000e94 <main+0x618>)
 8000c72:	791b      	ldrb	r3, [r3, #4]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d109      	bne.n	8000c8c <main+0x410>
	  	  	  	        				motor_right(cycle);
 8000c78:	4b88      	ldr	r3, [pc, #544]	@ (8000e9c <main+0x620>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 fd3f 	bl	8001700 <motor_right>
	  	  	  	        				set_ang(0, 0);
 8000c82:	2100      	movs	r1, #0
 8000c84:	2000      	movs	r0, #0
 8000c86:	f000 fca5 	bl	80015d4 <set_ang>
 8000c8a:	e009      	b.n	8000ca0 <main+0x424>
	  	  	  	        			}
	  	  	  	        			else{
	  	  	  	        			motor_left(cycle);
 8000c8c:	4b83      	ldr	r3, [pc, #524]	@ (8000e9c <main+0x620>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 fd09 	bl	80016a8 <motor_left>
	  	  	  	        			set_ang(900, 0);
 8000c96:	2100      	movs	r1, #0
 8000c98:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8000c9c:	f000 fc9a 	bl	80015d4 <set_ang>
	  	  	  	        		detect_states[0] = HAL_GPIO_ReadPin(DETECT1_GPIO_Port, DETECT1_Pin);
 8000ca0:	e799      	b.n	8000bd6 <main+0x35a>
	  	  	  	        		}
	  	  	  	        	}
	  	  	  	        }
	  	  	  	        break;
	  	  	  	  	  case 4:
	  		  	        display_reset();
 8000ca2:	f000 fe6d 	bl	8001980 <display_reset>
	  		  	        display4();
 8000ca6:	f000 fdf9 	bl	800189c <display4>
	  		  	        if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8000caa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cae:	4878      	ldr	r0, [pc, #480]	@ (8000e90 <main+0x614>)
 8000cb0:	f001 fdfe 	bl	80028b0 <HAL_GPIO_ReadPin>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f040 80e3 	bne.w	8000e82 <main+0x606>
	  		  	        {
	  		  	        //linefollower zmodyfikowany niewidzi linii jedzie w lewo
	  		  	        	countdown();
 8000cbc:	f000 fe92 	bl	80019e4 <countdown>
	  		  	        	while(1){
	  		  	        		detect_states[0] = HAL_GPIO_ReadPin(DETECT1_GPIO_Port, DETECT1_Pin);
 8000cc0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cc4:	4872      	ldr	r0, [pc, #456]	@ (8000e90 <main+0x614>)
 8000cc6:	f001 fdf3 	bl	80028b0 <HAL_GPIO_ReadPin>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b71      	ldr	r3, [pc, #452]	@ (8000e94 <main+0x618>)
 8000cd0:	701a      	strb	r2, [r3, #0]
	  		  	        		detect_states[1] = HAL_GPIO_ReadPin(DETECT2_GPIO_Port, DETECT2_Pin);
 8000cd2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cd6:	486e      	ldr	r0, [pc, #440]	@ (8000e90 <main+0x614>)
 8000cd8:	f001 fdea 	bl	80028b0 <HAL_GPIO_ReadPin>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4b6c      	ldr	r3, [pc, #432]	@ (8000e94 <main+0x618>)
 8000ce2:	705a      	strb	r2, [r3, #1]
	  		  	        		detect_states[2] = HAL_GPIO_ReadPin(DETECT3_GPIO_Port, DETECT3_Pin);
 8000ce4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ce8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cec:	f001 fde0 	bl	80028b0 <HAL_GPIO_ReadPin>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4b67      	ldr	r3, [pc, #412]	@ (8000e94 <main+0x618>)
 8000cf6:	709a      	strb	r2, [r3, #2]
	  		  	        		detect_states[3] = HAL_GPIO_ReadPin(DETECT4_GPIO_Port, DETECT4_Pin);
 8000cf8:	2180      	movs	r1, #128	@ 0x80
 8000cfa:	4867      	ldr	r0, [pc, #412]	@ (8000e98 <main+0x61c>)
 8000cfc:	f001 fdd8 	bl	80028b0 <HAL_GPIO_ReadPin>
 8000d00:	4603      	mov	r3, r0
 8000d02:	461a      	mov	r2, r3
 8000d04:	4b63      	ldr	r3, [pc, #396]	@ (8000e94 <main+0x618>)
 8000d06:	70da      	strb	r2, [r3, #3]
	  		  	        		detect_states[4] = HAL_GPIO_ReadPin(DETECT5_GPIO_Port, DETECT5_Pin);
 8000d08:	2104      	movs	r1, #4
 8000d0a:	4861      	ldr	r0, [pc, #388]	@ (8000e90 <main+0x614>)
 8000d0c:	f001 fdd0 	bl	80028b0 <HAL_GPIO_ReadPin>
 8000d10:	4603      	mov	r3, r0
 8000d12:	461a      	mov	r2, r3
 8000d14:	4b5f      	ldr	r3, [pc, #380]	@ (8000e94 <main+0x618>)
 8000d16:	711a      	strb	r2, [r3, #4]

	  		  	        		if(detect_states[2]==0)
 8000d18:	4b5e      	ldr	r3, [pc, #376]	@ (8000e94 <main+0x618>)
 8000d1a:	789b      	ldrb	r3, [r3, #2]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d105      	bne.n	8000d2c <main+0x4b0>
	  		  	        		{
	  		  	        			motor_forward(cycle);
 8000d20:	4b5e      	ldr	r3, [pc, #376]	@ (8000e9c <main+0x620>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 fc97 	bl	8001658 <motor_forward>
 8000d2a:	e7c9      	b.n	8000cc0 <main+0x444>
	  		  	        		}
	  		  	        		else{
	  		  	        			if(detect_states[1]==0 || detect_states[0]==0)
 8000d2c:	4b59      	ldr	r3, [pc, #356]	@ (8000e94 <main+0x618>)
 8000d2e:	785b      	ldrb	r3, [r3, #1]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d003      	beq.n	8000d3c <main+0x4c0>
 8000d34:	4b57      	ldr	r3, [pc, #348]	@ (8000e94 <main+0x618>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d10a      	bne.n	8000d52 <main+0x4d6>
	  		  	        			{
	  		  	        				motor_left(cycle);
 8000d3c:	4b57      	ldr	r3, [pc, #348]	@ (8000e9c <main+0x620>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f000 fcb1 	bl	80016a8 <motor_left>
	  		  	        				set_ang(900, 0);
 8000d46:	2100      	movs	r1, #0
 8000d48:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8000d4c:	f000 fc42 	bl	80015d4 <set_ang>
 8000d50:	e01a      	b.n	8000d88 <main+0x50c>
	  		  	        			}
	  		  	        			else if(detect_states[3]==0 || detect_states[4]==0){
 8000d52:	4b50      	ldr	r3, [pc, #320]	@ (8000e94 <main+0x618>)
 8000d54:	78db      	ldrb	r3, [r3, #3]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d003      	beq.n	8000d62 <main+0x4e6>
 8000d5a:	4b4e      	ldr	r3, [pc, #312]	@ (8000e94 <main+0x618>)
 8000d5c:	791b      	ldrb	r3, [r3, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d109      	bne.n	8000d76 <main+0x4fa>
	  		  	        				motor_right(cycle);
 8000d62:	4b4e      	ldr	r3, [pc, #312]	@ (8000e9c <main+0x620>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 fcca 	bl	8001700 <motor_right>
	  		  	        				set_ang(0, 0);
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f000 fc30 	bl	80015d4 <set_ang>
 8000d74:	e008      	b.n	8000d88 <main+0x50c>
	  		  	        			}
	  		  	        			else{
	  		  	        				motor_right(cycle);
 8000d76:	4b49      	ldr	r3, [pc, #292]	@ (8000e9c <main+0x620>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 fcc0 	bl	8001700 <motor_right>
	  		  	        				set_ang(0, 0);
 8000d80:	2100      	movs	r1, #0
 8000d82:	2000      	movs	r0, #0
 8000d84:	f000 fc26 	bl	80015d4 <set_ang>
	  		  	        		detect_states[0] = HAL_GPIO_ReadPin(DETECT1_GPIO_Port, DETECT1_Pin);
 8000d88:	e79a      	b.n	8000cc0 <main+0x444>
	  		  	        	}
	  		  	        }
	  		  	        break;
	  	      case 5:
	  	    	  //sterowanie bluetoothem
	  	    	display_reset();
 8000d8a:	f000 fdf9 	bl	8001980 <display_reset>
	  	    	display5();
 8000d8e:	f000 fda3 	bl	80018d8 <display5>
	  	    	if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET){
 8000d92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d96:	483e      	ldr	r0, [pc, #248]	@ (8000e90 <main+0x614>)
 8000d98:	f001 fd8a 	bl	80028b0 <HAL_GPIO_ReadPin>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d171      	bne.n	8000e86 <main+0x60a>
	  	    		countdown();
 8000da2:	f000 fe1f 	bl	80019e4 <countdown>
	  	    		display_reset();
 8000da6:	f000 fdeb 	bl	8001980 <display_reset>
	  	    		while(1){
	  	    			bluetooth();
 8000daa:	f000 fbb7 	bl	800151c <bluetooth>
 8000dae:	e7fc      	b.n	8000daa <main+0x52e>
	  	    		}
	  	    	}
	  	        break;
	  	      case 6:
	  	    	//sterowanie po kablu
	  	    	display_reset();
 8000db0:	f000 fde6 	bl	8001980 <display_reset>
	  	    	display6();
 8000db4:	f000 fdb6 	bl	8001924 <display6>
	  	    	if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET){
 8000db8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dbc:	4834      	ldr	r0, [pc, #208]	@ (8000e90 <main+0x614>)
 8000dbe:	f001 fd77 	bl	80028b0 <HAL_GPIO_ReadPin>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d160      	bne.n	8000e8a <main+0x60e>
	  	    		countdown();
 8000dc8:	f000 fe0c 	bl	80019e4 <countdown>
	  	    		display_reset();
 8000dcc:	f000 fdd8 	bl	8001980 <display_reset>
	  	    		while(1){
	  	    			if(HAL_UART_Receive(&huart2, &receivedChar, 1, 0) == HAL_OK) {
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	4932      	ldr	r1, [pc, #200]	@ (8000ea0 <main+0x624>)
 8000dd6:	4833      	ldr	r0, [pc, #204]	@ (8000ea4 <main+0x628>)
 8000dd8:	f004 fbd0 	bl	800557c <HAL_UART_Receive>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d1f6      	bne.n	8000dd0 <main+0x554>
	  	    				if (receivedChar == 's') {
 8000de2:	4b2f      	ldr	r3, [pc, #188]	@ (8000ea0 <main+0x624>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b73      	cmp	r3, #115	@ 0x73
 8000de8:	d10a      	bne.n	8000e00 <main+0x584>
	  	    					set_ang(450, 0);
 8000dea:	2100      	movs	r1, #0
 8000dec:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000df0:	f000 fbf0 	bl	80015d4 <set_ang>
	  	    					motor_backward(cycle);
 8000df4:	4b29      	ldr	r3, [pc, #164]	@ (8000e9c <main+0x620>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 fcad 	bl	8001758 <motor_backward>
 8000dfe:	e036      	b.n	8000e6e <main+0x5f2>
	  	    				} else if (receivedChar == 'w') {
 8000e00:	4b27      	ldr	r3, [pc, #156]	@ (8000ea0 <main+0x624>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b77      	cmp	r3, #119	@ 0x77
 8000e06:	d10a      	bne.n	8000e1e <main+0x5a2>
	  	    					set_ang(450, 0);
 8000e08:	2100      	movs	r1, #0
 8000e0a:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000e0e:	f000 fbe1 	bl	80015d4 <set_ang>
	  	    					motor_forward(cycle);
 8000e12:	4b22      	ldr	r3, [pc, #136]	@ (8000e9c <main+0x620>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 fc1e 	bl	8001658 <motor_forward>
 8000e1c:	e027      	b.n	8000e6e <main+0x5f2>
	  	    				} else if (receivedChar == 'a') {
 8000e1e:	4b20      	ldr	r3, [pc, #128]	@ (8000ea0 <main+0x624>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b61      	cmp	r3, #97	@ 0x61
 8000e24:	d10a      	bne.n	8000e3c <main+0x5c0>
	  	    					set_ang(900, 0);
 8000e26:	2100      	movs	r1, #0
 8000e28:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8000e2c:	f000 fbd2 	bl	80015d4 <set_ang>
	  	    					motor_left(cycle);
 8000e30:	4b1a      	ldr	r3, [pc, #104]	@ (8000e9c <main+0x620>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 fc37 	bl	80016a8 <motor_left>
 8000e3a:	e018      	b.n	8000e6e <main+0x5f2>
	  	    				} else if (receivedChar == 'd') {
 8000e3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ea0 <main+0x624>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b64      	cmp	r3, #100	@ 0x64
 8000e42:	d109      	bne.n	8000e58 <main+0x5dc>
	  	    					set_ang(0, 0);
 8000e44:	2100      	movs	r1, #0
 8000e46:	2000      	movs	r0, #0
 8000e48:	f000 fbc4 	bl	80015d4 <set_ang>
	  	    					motor_right(cycle);
 8000e4c:	4b13      	ldr	r3, [pc, #76]	@ (8000e9c <main+0x620>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f000 fc55 	bl	8001700 <motor_right>
 8000e56:	e00a      	b.n	8000e6e <main+0x5f2>
	  	    				} else if (receivedChar == 'q') {
 8000e58:	4b11      	ldr	r3, [pc, #68]	@ (8000ea0 <main+0x624>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b71      	cmp	r3, #113	@ 0x71
 8000e5e:	d106      	bne.n	8000e6e <main+0x5f2>
	  	    					set_ang(450, 0);
 8000e60:	2100      	movs	r1, #0
 8000e62:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000e66:	f000 fbb5 	bl	80015d4 <set_ang>
	  	    					motor_stop();
 8000e6a:	f000 fc9d 	bl	80017a8 <motor_stop>
	  	    				}
	  	    				HAL_Delay(100);
 8000e6e:	2064      	movs	r0, #100	@ 0x64
 8000e70:	f001 fa00 	bl	8002274 <HAL_Delay>
	  	    			if(HAL_UART_Receive(&huart2, &receivedChar, 1, 0) == HAL_OK) {
 8000e74:	e7ac      	b.n	8000dd0 <main+0x554>
	  	        break;
 8000e76:	bf00      	nop
 8000e78:	e541      	b.n	80008fe <main+0x82>
	  	   	  	        break;
 8000e7a:	bf00      	nop
 8000e7c:	e53f      	b.n	80008fe <main+0x82>
	  	  	  	        break;
 8000e7e:	bf00      	nop
 8000e80:	e53d      	b.n	80008fe <main+0x82>
	  		  	        break;
 8000e82:	bf00      	nop
 8000e84:	e53b      	b.n	80008fe <main+0x82>
	  	        break;
 8000e86:	bf00      	nop
 8000e88:	e539      	b.n	80008fe <main+0x82>
	  	    			}
	  	    		}
	  	    	}
	  	        break;
 8000e8a:	bf00      	nop
 8000e8c:	e537      	b.n	80008fe <main+0x82>
 8000e8e:	bf00      	nop
 8000e90:	48000800 	.word	0x48000800
 8000e94:	200002c8 	.word	0x200002c8
 8000e98:	48000400 	.word	0x48000400
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	200002cf 	.word	0x200002cf
 8000ea4:	20000240 	.word	0x20000240

08000ea8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b09c      	sub	sp, #112	@ 0x70
 8000eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eae:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000eb2:	2228      	movs	r2, #40	@ 0x28
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f005 fbf9 	bl	80066ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ebc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ecc:	463b      	mov	r3, r7
 8000ece:	2234      	movs	r2, #52	@ 0x34
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f005 fbeb 	bl	80066ae <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000edc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ee0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eea:	2302      	movs	r3, #2
 8000eec:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ef2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ef4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000ef8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000efa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000efe:	4618      	mov	r0, r3
 8000f00:	f001 fd06 	bl	8002910 <HAL_RCC_OscConfig>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f0a:	f000 fe09 	bl	8001b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f0e:	230f      	movs	r3, #15
 8000f10:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f12:	2302      	movs	r3, #2
 8000f14:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f16:	2300      	movs	r3, #0
 8000f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f1e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f20:	2300      	movs	r3, #0
 8000f22:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f24:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000f28:	2102      	movs	r1, #2
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f002 fd2e 	bl	800398c <HAL_RCC_ClockConfig>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f36:	f000 fdf3 	bl	8001b20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f68 <SystemClock_Config+0xc0>)
 8000f3c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM17;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000f42:	2300      	movs	r3, #0
 8000f44:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f4e:	463b      	mov	r3, r7
 8000f50:	4618      	mov	r0, r3
 8000f52:	f002 ff51 	bl	8003df8 <HAL_RCCEx_PeriphCLKConfig>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000f5c:	f000 fde0 	bl	8001b20 <Error_Handler>
  }
}
 8000f60:	bf00      	nop
 8000f62:	3770      	adds	r7, #112	@ 0x70
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	00181001 	.word	0x00181001

08000f6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b09a      	sub	sp, #104	@ 0x68
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f72:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f80:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f8c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
 8000f9c:	615a      	str	r2, [r3, #20]
 8000f9e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	222c      	movs	r2, #44	@ 0x2c
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f005 fb81 	bl	80066ae <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fac:	4b49      	ldr	r3, [pc, #292]	@ (80010d4 <MX_TIM1_Init+0x168>)
 8000fae:	4a4a      	ldr	r2, [pc, #296]	@ (80010d8 <MX_TIM1_Init+0x16c>)
 8000fb0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000fb2:	4b48      	ldr	r3, [pc, #288]	@ (80010d4 <MX_TIM1_Init+0x168>)
 8000fb4:	2247      	movs	r2, #71	@ 0x47
 8000fb6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb8:	4b46      	ldr	r3, [pc, #280]	@ (80010d4 <MX_TIM1_Init+0x168>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fbe:	4b45      	ldr	r3, [pc, #276]	@ (80010d4 <MX_TIM1_Init+0x168>)
 8000fc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fc4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc6:	4b43      	ldr	r3, [pc, #268]	@ (80010d4 <MX_TIM1_Init+0x168>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fcc:	4b41      	ldr	r3, [pc, #260]	@ (80010d4 <MX_TIM1_Init+0x168>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd2:	4b40      	ldr	r3, [pc, #256]	@ (80010d4 <MX_TIM1_Init+0x168>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fd8:	483e      	ldr	r0, [pc, #248]	@ (80010d4 <MX_TIM1_Init+0x168>)
 8000fda:	f003 f89f 	bl	800411c <HAL_TIM_Base_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000fe4:	f000 fd9c 	bl	8001b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fec:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fee:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4837      	ldr	r0, [pc, #220]	@ (80010d4 <MX_TIM1_Init+0x168>)
 8000ff6:	f003 fca7 	bl	8004948 <HAL_TIM_ConfigClockSource>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001000:	f000 fd8e 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001004:	4833      	ldr	r0, [pc, #204]	@ (80010d4 <MX_TIM1_Init+0x168>)
 8001006:	f003 f92d 	bl	8004264 <HAL_TIM_PWM_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001010:	f000 fd86 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001014:	2300      	movs	r3, #0
 8001016:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001018:	2300      	movs	r3, #0
 800101a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101c:	2300      	movs	r3, #0
 800101e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001020:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001024:	4619      	mov	r1, r3
 8001026:	482b      	ldr	r0, [pc, #172]	@ (80010d4 <MX_TIM1_Init+0x168>)
 8001028:	f004 f95e 	bl	80052e8 <HAL_TIMEx_MasterConfigSynchronization>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001032:	f000 fd75 	bl	8001b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001036:	2360      	movs	r3, #96	@ 0x60
 8001038:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800103e:	2300      	movs	r3, #0
 8001040:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001042:	2300      	movs	r3, #0
 8001044:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001046:	2300      	movs	r3, #0
 8001048:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800104a:	2300      	movs	r3, #0
 800104c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800104e:	2300      	movs	r3, #0
 8001050:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001052:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001056:	2200      	movs	r2, #0
 8001058:	4619      	mov	r1, r3
 800105a:	481e      	ldr	r0, [pc, #120]	@ (80010d4 <MX_TIM1_Init+0x168>)
 800105c:	f003 fb60 	bl	8004720 <HAL_TIM_PWM_ConfigChannel>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001066:	f000 fd5b 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800106a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800106e:	220c      	movs	r2, #12
 8001070:	4619      	mov	r1, r3
 8001072:	4818      	ldr	r0, [pc, #96]	@ (80010d4 <MX_TIM1_Init+0x168>)
 8001074:	f003 fb54 	bl	8004720 <HAL_TIM_PWM_ConfigChannel>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800107e:	f000 fd4f 	bl	8001b20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001096:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800109a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010a8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	4619      	mov	r1, r3
 80010b6:	4807      	ldr	r0, [pc, #28]	@ (80010d4 <MX_TIM1_Init+0x168>)
 80010b8:	f004 f97c 	bl	80053b4 <HAL_TIMEx_ConfigBreakDeadTime>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80010c2:	f000 fd2d 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010c6:	4803      	ldr	r0, [pc, #12]	@ (80010d4 <MX_TIM1_Init+0x168>)
 80010c8:	f000 fdd0 	bl	8001c6c <HAL_TIM_MspPostInit>

}
 80010cc:	bf00      	nop
 80010ce:	3768      	adds	r7, #104	@ 0x68
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000088 	.word	0x20000088
 80010d8:	40012c00 	.word	0x40012c00

080010dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	@ 0x28
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e2:	f107 031c 	add.w	r3, r7, #28
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ee:	463b      	mov	r3, r7
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
 80010fc:	615a      	str	r2, [r3, #20]
 80010fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001100:	4b27      	ldr	r3, [pc, #156]	@ (80011a0 <MX_TIM2_Init+0xc4>)
 8001102:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001106:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001108:	4b25      	ldr	r3, [pc, #148]	@ (80011a0 <MX_TIM2_Init+0xc4>)
 800110a:	2247      	movs	r2, #71	@ 0x47
 800110c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110e:	4b24      	ldr	r3, [pc, #144]	@ (80011a0 <MX_TIM2_Init+0xc4>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001114:	4b22      	ldr	r3, [pc, #136]	@ (80011a0 <MX_TIM2_Init+0xc4>)
 8001116:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800111a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111c:	4b20      	ldr	r3, [pc, #128]	@ (80011a0 <MX_TIM2_Init+0xc4>)
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001122:	4b1f      	ldr	r3, [pc, #124]	@ (80011a0 <MX_TIM2_Init+0xc4>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001128:	481d      	ldr	r0, [pc, #116]	@ (80011a0 <MX_TIM2_Init+0xc4>)
 800112a:	f003 f89b 	bl	8004264 <HAL_TIM_PWM_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001134:	f000 fcf4 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800113c:	2300      	movs	r3, #0
 800113e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	4619      	mov	r1, r3
 8001146:	4816      	ldr	r0, [pc, #88]	@ (80011a0 <MX_TIM2_Init+0xc4>)
 8001148:	f004 f8ce 	bl	80052e8 <HAL_TIMEx_MasterConfigSynchronization>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001152:	f000 fce5 	bl	8001b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001156:	2360      	movs	r3, #96	@ 0x60
 8001158:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001166:	463b      	mov	r3, r7
 8001168:	2200      	movs	r2, #0
 800116a:	4619      	mov	r1, r3
 800116c:	480c      	ldr	r0, [pc, #48]	@ (80011a0 <MX_TIM2_Init+0xc4>)
 800116e:	f003 fad7 	bl	8004720 <HAL_TIM_PWM_ConfigChannel>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001178:	f000 fcd2 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	2208      	movs	r2, #8
 8001180:	4619      	mov	r1, r3
 8001182:	4807      	ldr	r0, [pc, #28]	@ (80011a0 <MX_TIM2_Init+0xc4>)
 8001184:	f003 facc 	bl	8004720 <HAL_TIM_PWM_ConfigChannel>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800118e:	f000 fcc7 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001192:	4803      	ldr	r0, [pc, #12]	@ (80011a0 <MX_TIM2_Init+0xc4>)
 8001194:	f000 fd6a 	bl	8001c6c <HAL_TIM_MspPostInit>

}
 8001198:	bf00      	nop
 800119a:	3728      	adds	r7, #40	@ 0x28
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	200000d4 	.word	0x200000d4

080011a4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b092      	sub	sp, #72	@ 0x48
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80011aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	611a      	str	r2, [r3, #16]
 80011ba:	615a      	str	r2, [r3, #20]
 80011bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011be:	463b      	mov	r3, r7
 80011c0:	222c      	movs	r2, #44	@ 0x2c
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f005 fa72 	bl	80066ae <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80011ca:	4b31      	ldr	r3, [pc, #196]	@ (8001290 <MX_TIM16_Init+0xec>)
 80011cc:	4a31      	ldr	r2, [pc, #196]	@ (8001294 <MX_TIM16_Init+0xf0>)
 80011ce:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 71;
 80011d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001290 <MX_TIM16_Init+0xec>)
 80011d2:	2247      	movs	r2, #71	@ 0x47
 80011d4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001290 <MX_TIM16_Init+0xec>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 19999;
 80011dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001290 <MX_TIM16_Init+0xec>)
 80011de:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80011e2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001290 <MX_TIM16_Init+0xec>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80011ea:	4b29      	ldr	r3, [pc, #164]	@ (8001290 <MX_TIM16_Init+0xec>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011f0:	4b27      	ldr	r3, [pc, #156]	@ (8001290 <MX_TIM16_Init+0xec>)
 80011f2:	2280      	movs	r2, #128	@ 0x80
 80011f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80011f6:	4826      	ldr	r0, [pc, #152]	@ (8001290 <MX_TIM16_Init+0xec>)
 80011f8:	f002 ff90 	bl	800411c <HAL_TIM_Base_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001202:	f000 fc8d 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001206:	4822      	ldr	r0, [pc, #136]	@ (8001290 <MX_TIM16_Init+0xec>)
 8001208:	f003 f82c 	bl	8004264 <HAL_TIM_PWM_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001212:	f000 fc85 	bl	8001b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001216:	2360      	movs	r3, #96	@ 0x60
 8001218:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800121e:	2300      	movs	r3, #0
 8001220:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001222:	2300      	movs	r3, #0
 8001224:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800122a:	2300      	movs	r3, #0
 800122c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800122e:	2300      	movs	r3, #0
 8001230:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001232:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001236:	2200      	movs	r2, #0
 8001238:	4619      	mov	r1, r3
 800123a:	4815      	ldr	r0, [pc, #84]	@ (8001290 <MX_TIM16_Init+0xec>)
 800123c:	f003 fa70 	bl	8004720 <HAL_TIM_PWM_ConfigChannel>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001246:	f000 fc6b 	bl	8001b20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800125e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001262:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001268:	2300      	movs	r3, #0
 800126a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800126c:	463b      	mov	r3, r7
 800126e:	4619      	mov	r1, r3
 8001270:	4807      	ldr	r0, [pc, #28]	@ (8001290 <MX_TIM16_Init+0xec>)
 8001272:	f004 f89f 	bl	80053b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 800127c:	f000 fc50 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001280:	4803      	ldr	r0, [pc, #12]	@ (8001290 <MX_TIM16_Init+0xec>)
 8001282:	f000 fcf3 	bl	8001c6c <HAL_TIM_MspPostInit>

}
 8001286:	bf00      	nop
 8001288:	3748      	adds	r7, #72	@ 0x48
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000120 	.word	0x20000120
 8001294:	40014400 	.word	0x40014400

08001298 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800129c:	4b0f      	ldr	r3, [pc, #60]	@ (80012dc <MX_TIM17_Init+0x44>)
 800129e:	4a10      	ldr	r2, [pc, #64]	@ (80012e0 <MX_TIM17_Init+0x48>)
 80012a0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 71;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	@ (80012dc <MX_TIM17_Init+0x44>)
 80012a4:	2247      	movs	r2, #71	@ 0x47
 80012a6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <MX_TIM17_Init+0x44>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80012ae:	4b0b      	ldr	r3, [pc, #44]	@ (80012dc <MX_TIM17_Init+0x44>)
 80012b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012b4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b6:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <MX_TIM17_Init+0x44>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80012bc:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <MX_TIM17_Init+0x44>)
 80012be:	2200      	movs	r2, #0
 80012c0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c2:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <MX_TIM17_Init+0x44>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80012c8:	4804      	ldr	r0, [pc, #16]	@ (80012dc <MX_TIM17_Init+0x44>)
 80012ca:	f002 ff27 	bl	800411c <HAL_TIM_Base_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80012d4:	f000 fc24 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	2000016c 	.word	0x2000016c
 80012e0:	40014800 	.word	0x40014800

080012e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012e8:	4b14      	ldr	r3, [pc, #80]	@ (800133c <MX_USART1_UART_Init+0x58>)
 80012ea:	4a15      	ldr	r2, [pc, #84]	@ (8001340 <MX_USART1_UART_Init+0x5c>)
 80012ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80012ee:	4b13      	ldr	r3, [pc, #76]	@ (800133c <MX_USART1_UART_Init+0x58>)
 80012f0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80012f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012f6:	4b11      	ldr	r3, [pc, #68]	@ (800133c <MX_USART1_UART_Init+0x58>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <MX_USART1_UART_Init+0x58>)
 80012fe:	2200      	movs	r2, #0
 8001300:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001302:	4b0e      	ldr	r3, [pc, #56]	@ (800133c <MX_USART1_UART_Init+0x58>)
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001308:	4b0c      	ldr	r3, [pc, #48]	@ (800133c <MX_USART1_UART_Init+0x58>)
 800130a:	220c      	movs	r2, #12
 800130c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800130e:	4b0b      	ldr	r3, [pc, #44]	@ (800133c <MX_USART1_UART_Init+0x58>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001314:	4b09      	ldr	r3, [pc, #36]	@ (800133c <MX_USART1_UART_Init+0x58>)
 8001316:	2200      	movs	r2, #0
 8001318:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800131a:	4b08      	ldr	r3, [pc, #32]	@ (800133c <MX_USART1_UART_Init+0x58>)
 800131c:	2200      	movs	r2, #0
 800131e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001320:	4b06      	ldr	r3, [pc, #24]	@ (800133c <MX_USART1_UART_Init+0x58>)
 8001322:	2200      	movs	r2, #0
 8001324:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001326:	4805      	ldr	r0, [pc, #20]	@ (800133c <MX_USART1_UART_Init+0x58>)
 8001328:	f004 f8da 	bl	80054e0 <HAL_UART_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001332:	f000 fbf5 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200001b8 	.word	0x200001b8
 8001340:	40013800 	.word	0x40013800

08001344 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001348:	4b14      	ldr	r3, [pc, #80]	@ (800139c <MX_USART2_UART_Init+0x58>)
 800134a:	4a15      	ldr	r2, [pc, #84]	@ (80013a0 <MX_USART2_UART_Init+0x5c>)
 800134c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800134e:	4b13      	ldr	r3, [pc, #76]	@ (800139c <MX_USART2_UART_Init+0x58>)
 8001350:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001354:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001356:	4b11      	ldr	r3, [pc, #68]	@ (800139c <MX_USART2_UART_Init+0x58>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800135c:	4b0f      	ldr	r3, [pc, #60]	@ (800139c <MX_USART2_UART_Init+0x58>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001362:	4b0e      	ldr	r3, [pc, #56]	@ (800139c <MX_USART2_UART_Init+0x58>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001368:	4b0c      	ldr	r3, [pc, #48]	@ (800139c <MX_USART2_UART_Init+0x58>)
 800136a:	220c      	movs	r2, #12
 800136c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136e:	4b0b      	ldr	r3, [pc, #44]	@ (800139c <MX_USART2_UART_Init+0x58>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001374:	4b09      	ldr	r3, [pc, #36]	@ (800139c <MX_USART2_UART_Init+0x58>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800137a:	4b08      	ldr	r3, [pc, #32]	@ (800139c <MX_USART2_UART_Init+0x58>)
 800137c:	2200      	movs	r2, #0
 800137e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001380:	4b06      	ldr	r3, [pc, #24]	@ (800139c <MX_USART2_UART_Init+0x58>)
 8001382:	2200      	movs	r2, #0
 8001384:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001386:	4805      	ldr	r0, [pc, #20]	@ (800139c <MX_USART2_UART_Init+0x58>)
 8001388:	f004 f8aa 	bl	80054e0 <HAL_UART_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001392:	f000 fbc5 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000240 	.word	0x20000240
 80013a0:	40004400 	.word	0x40004400

080013a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	@ 0x28
 80013a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ba:	4b55      	ldr	r3, [pc, #340]	@ (8001510 <MX_GPIO_Init+0x16c>)
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	4a54      	ldr	r2, [pc, #336]	@ (8001510 <MX_GPIO_Init+0x16c>)
 80013c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80013c4:	6153      	str	r3, [r2, #20]
 80013c6:	4b52      	ldr	r3, [pc, #328]	@ (8001510 <MX_GPIO_Init+0x16c>)
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013d2:	4b4f      	ldr	r3, [pc, #316]	@ (8001510 <MX_GPIO_Init+0x16c>)
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	4a4e      	ldr	r2, [pc, #312]	@ (8001510 <MX_GPIO_Init+0x16c>)
 80013d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80013dc:	6153      	str	r3, [r2, #20]
 80013de:	4b4c      	ldr	r3, [pc, #304]	@ (8001510 <MX_GPIO_Init+0x16c>)
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	4b49      	ldr	r3, [pc, #292]	@ (8001510 <MX_GPIO_Init+0x16c>)
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	4a48      	ldr	r2, [pc, #288]	@ (8001510 <MX_GPIO_Init+0x16c>)
 80013f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013f4:	6153      	str	r3, [r2, #20]
 80013f6:	4b46      	ldr	r3, [pc, #280]	@ (8001510 <MX_GPIO_Init+0x16c>)
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001402:	4b43      	ldr	r3, [pc, #268]	@ (8001510 <MX_GPIO_Init+0x16c>)
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	4a42      	ldr	r2, [pc, #264]	@ (8001510 <MX_GPIO_Init+0x16c>)
 8001408:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800140c:	6153      	str	r3, [r2, #20]
 800140e:	4b40      	ldr	r3, [pc, #256]	@ (8001510 <MX_GPIO_Init+0x16c>)
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TRIGGER_Pin|C_Pin|B_Pin|A_Pin, GPIO_PIN_RESET);
 800141a:	2200      	movs	r2, #0
 800141c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8001420:	483c      	ldr	r0, [pc, #240]	@ (8001514 <MX_GPIO_Init+0x170>)
 8001422:	f001 fa5d 	bl	80028e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|E_Pin|D_Pin, GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	f641 0103 	movw	r1, #6147	@ 0x1803
 800142c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001430:	f001 fa56 	bl	80028e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, G_Pin|F_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001434:	2200      	movs	r2, #0
 8001436:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 800143a:	4837      	ldr	r0, [pc, #220]	@ (8001518 <MX_GPIO_Init+0x174>)
 800143c:	f001 fa50 	bl	80028e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001440:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001446:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800144a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4619      	mov	r1, r3
 8001456:	482f      	ldr	r0, [pc, #188]	@ (8001514 <MX_GPIO_Init+0x170>)
 8001458:	f001 f8b8 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pins : ECHO_Pin DETECT5_Pin DETECT1_Pin DETECT2_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin|DETECT5_Pin|DETECT1_Pin|DETECT2_Pin;
 800145c:	f241 4305 	movw	r3, #5125	@ 0x1405
 8001460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001462:	2300      	movs	r3, #0
 8001464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	4828      	ldr	r0, [pc, #160]	@ (8001514 <MX_GPIO_Init+0x170>)
 8001472:	f001 f8ab 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIGGER_Pin C_Pin B_Pin A_Pin */
  GPIO_InitStruct.Pin = TRIGGER_Pin|C_Pin|B_Pin|A_Pin;
 8001476:	f44f 73b1 	mov.w	r3, #354	@ 0x162
 800147a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147c:	2301      	movs	r3, #1
 800147e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001484:	2300      	movs	r3, #0
 8001486:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4619      	mov	r1, r3
 800148e:	4821      	ldr	r0, [pc, #132]	@ (8001514 <MX_GPIO_Init+0x170>)
 8001490:	f001 f89c 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin E_Pin D_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|E_Pin|D_Pin;
 8001494:	f641 0303 	movw	r3, #6147	@ 0x1803
 8001498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149a:	2301      	movs	r3, #1
 800149c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	4619      	mov	r1, r3
 80014ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014b0:	f001 f88c 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pins : ButtonExt_Pin DETECT4_Pin DETECT3L_Pin DETECT3P_Pin */
  GPIO_InitStruct.Pin = ButtonExt_Pin|DETECT4_Pin|DETECT3L_Pin|DETECT3P_Pin;
 80014b4:	f44f 7361 	mov.w	r3, #900	@ 0x384
 80014b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	4619      	mov	r1, r3
 80014c8:	4813      	ldr	r0, [pc, #76]	@ (8001518 <MX_GPIO_Init+0x174>)
 80014ca:	f001 f87f 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pins : G_Pin F_Pin LD2_Pin */
  GPIO_InitStruct.Pin = G_Pin|F_Pin|LD2_Pin;
 80014ce:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80014d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d4:	2301      	movs	r3, #1
 80014d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	4619      	mov	r1, r3
 80014e6:	480c      	ldr	r0, [pc, #48]	@ (8001518 <MX_GPIO_Init+0x174>)
 80014e8:	f001 f870 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pin : DETECT3_Pin */
  GPIO_InitStruct.Pin = DETECT3_Pin;
 80014ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DETECT3_GPIO_Port, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001504:	f001 f862 	bl	80025cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001508:	bf00      	nop
 800150a:	3728      	adds	r7, #40	@ 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40021000 	.word	0x40021000
 8001514:	48000800 	.word	0x48000800
 8001518:	48000400 	.word	0x48000400

0800151c <bluetooth>:

}



void bluetooth(void) { // obsługa sterowania poprzez moduł bluetooth zs-040/hc-06
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	while(1){

		if(HAL_UART_Receive(&huart1, &receivedChar, 1, 100) == HAL_OK) {
 8001520:	2364      	movs	r3, #100	@ 0x64
 8001522:	2201      	movs	r2, #1
 8001524:	4928      	ldr	r1, [pc, #160]	@ (80015c8 <bluetooth+0xac>)
 8001526:	4829      	ldr	r0, [pc, #164]	@ (80015cc <bluetooth+0xb0>)
 8001528:	f004 f828 	bl	800557c <HAL_UART_Receive>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f6      	bne.n	8001520 <bluetooth+0x4>
		        if (receivedChar == 's') {
 8001532:	4b25      	ldr	r3, [pc, #148]	@ (80015c8 <bluetooth+0xac>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b73      	cmp	r3, #115	@ 0x73
 8001538:	d10c      	bne.n	8001554 <bluetooth+0x38>
		        	display1();
 800153a:	f000 f951 	bl	80017e0 <display1>
		        	set_ang(450, 0);
 800153e:	2100      	movs	r1, #0
 8001540:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8001544:	f000 f846 	bl	80015d4 <set_ang>
		            motor_backward(cycle);
 8001548:	4b21      	ldr	r3, [pc, #132]	@ (80015d0 <bluetooth+0xb4>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f000 f903 	bl	8001758 <motor_backward>
 8001552:	e7e5      	b.n	8001520 <bluetooth+0x4>
		        } else if (receivedChar == 'w') {
 8001554:	4b1c      	ldr	r3, [pc, #112]	@ (80015c8 <bluetooth+0xac>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b77      	cmp	r3, #119	@ 0x77
 800155a:	d10c      	bne.n	8001576 <bluetooth+0x5a>
		        	display2();
 800155c:	f000 f950 	bl	8001800 <display2>
		        	set_ang(450, 0);
 8001560:	2100      	movs	r1, #0
 8001562:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8001566:	f000 f835 	bl	80015d4 <set_ang>
		            motor_forward(cycle);
 800156a:	4b19      	ldr	r3, [pc, #100]	@ (80015d0 <bluetooth+0xb4>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f000 f872 	bl	8001658 <motor_forward>
 8001574:	e7d4      	b.n	8001520 <bluetooth+0x4>
		        } else if (receivedChar == 'a') {
 8001576:	4b14      	ldr	r3, [pc, #80]	@ (80015c8 <bluetooth+0xac>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b61      	cmp	r3, #97	@ 0x61
 800157c:	d10a      	bne.n	8001594 <bluetooth+0x78>
		        	set_ang(900, 0);
 800157e:	2100      	movs	r1, #0
 8001580:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8001584:	f000 f826 	bl	80015d4 <set_ang>
		            motor_left(cycle);
 8001588:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <bluetooth+0xb4>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f000 f88b 	bl	80016a8 <motor_left>
 8001592:	e7c5      	b.n	8001520 <bluetooth+0x4>
		        } else if (receivedChar == 'd') {
 8001594:	4b0c      	ldr	r3, [pc, #48]	@ (80015c8 <bluetooth+0xac>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b64      	cmp	r3, #100	@ 0x64
 800159a:	d109      	bne.n	80015b0 <bluetooth+0x94>
		        	set_ang(0, 0);
 800159c:	2100      	movs	r1, #0
 800159e:	2000      	movs	r0, #0
 80015a0:	f000 f818 	bl	80015d4 <set_ang>
		            motor_right(cycle);
 80015a4:	4b0a      	ldr	r3, [pc, #40]	@ (80015d0 <bluetooth+0xb4>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f000 f8a9 	bl	8001700 <motor_right>
 80015ae:	e7b7      	b.n	8001520 <bluetooth+0x4>
		        } else if (receivedChar == 'q') {
 80015b0:	4b05      	ldr	r3, [pc, #20]	@ (80015c8 <bluetooth+0xac>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b71      	cmp	r3, #113	@ 0x71
 80015b6:	d1b3      	bne.n	8001520 <bluetooth+0x4>
		        	set_ang(450, 0);
 80015b8:	2100      	movs	r1, #0
 80015ba:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 80015be:	f000 f809 	bl	80015d4 <set_ang>
		            motor_stop();
 80015c2:	f000 f8f1 	bl	80017a8 <motor_stop>
		if(HAL_UART_Receive(&huart1, &receivedChar, 1, 100) == HAL_OK) {
 80015c6:	e7ab      	b.n	8001520 <bluetooth+0x4>
 80015c8:	200002cf 	.word	0x200002cf
 80015cc:	200001b8 	.word	0x200001b8
 80015d0:	20000000 	.word	0x20000000

080015d4 <set_ang>:

}


void set_ang(uint16_t ang, uint8_t mode)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	460a      	mov	r2, r1
 80015de:	80fb      	strh	r3, [r7, #6]
 80015e0:	4613      	mov	r3, r2
 80015e2:	717b      	strb	r3, [r7, #5]
	uint16_t val;

	if(ang > ANGLE_MAX)
 80015e4:	88fb      	ldrh	r3, [r7, #6]
 80015e6:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 80015ea:	d902      	bls.n	80015f2 <set_ang+0x1e>
	{
		ang = ANGLE_MAX;
 80015ec:	f44f 7361 	mov.w	r3, #900	@ 0x384
 80015f0:	80fb      	strh	r3, [r7, #6]
	else if (ang < ANGLE_MIN)
	{
		ang = ANGLE_MIN;
	}

	if(mode)
 80015f2:	797b      	ldrb	r3, [r7, #5]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d010      	beq.n	800161a <set_ang+0x46>
	{
		val = PWM_MIN + ((ang - ANGLE_MIN) * STEP) / 1000;
 80015f8:	88fa      	ldrh	r2, [r7, #6]
 80015fa:	4613      	mov	r3, r2
 80015fc:	015b      	lsls	r3, r3, #5
 80015fe:	4413      	add	r3, r2
 8001600:	015b      	lsls	r3, r3, #5
 8001602:	1a9b      	subs	r3, r3, r2
 8001604:	4a12      	ldr	r2, [pc, #72]	@ (8001650 <set_ang+0x7c>)
 8001606:	fb82 1203 	smull	r1, r2, r2, r3
 800160a:	1192      	asrs	r2, r2, #6
 800160c:	17db      	asrs	r3, r3, #31
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	b29b      	uxth	r3, r3
 8001612:	f203 434c 	addw	r3, r3, #1100	@ 0x44c
 8001616:	81fb      	strh	r3, [r7, #14]
 8001618:	e00f      	b.n	800163a <set_ang+0x66>
	}
	else
	{
		val = PWM_MAX - ((ang - ANGLE_MIN) * STEP) / 1000;
 800161a:	88fa      	ldrh	r2, [r7, #6]
 800161c:	4613      	mov	r3, r2
 800161e:	015b      	lsls	r3, r3, #5
 8001620:	4413      	add	r3, r2
 8001622:	015b      	lsls	r3, r3, #5
 8001624:	1a9b      	subs	r3, r3, r2
 8001626:	4a0a      	ldr	r2, [pc, #40]	@ (8001650 <set_ang+0x7c>)
 8001628:	fb82 1203 	smull	r1, r2, r2, r3
 800162c:	1192      	asrs	r2, r2, #6
 800162e:	17db      	asrs	r3, r3, #31
 8001630:	1a9b      	subs	r3, r3, r2
 8001632:	b29b      	uxth	r3, r3
 8001634:	f603 0302 	addw	r3, r3, #2050	@ 0x802
 8001638:	81fb      	strh	r3, [r7, #14]
	}

	__HAL_TIM_SET_COMPARE(&TIM_NO, TIM_CH_NO, val);
 800163a:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <set_ang+0x80>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	89fa      	ldrh	r2, [r7, #14]
 8001640:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001642:	bf00      	nop
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	10624dd3 	.word	0x10624dd3
 8001654:	20000120 	.word	0x20000120

08001658 <motor_forward>:
    (detect_states[0] != 0 && detect_states[1] != 0) ? turnover(&axle, 'a') :
    (detect_states[2] != 0 && detect_states[3] != 0 && detect_states[4] != 0) ? turnover(&axle, 'd') : 0;
}

void motor_forward(uint32_t duty_cycle)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001660:	4b0d      	ldr	r3, [pc, #52]	@ (8001698 <motor_forward+0x40>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2200      	movs	r2, #0
 8001666:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, cycle);
 8001668:	4b0b      	ldr	r3, [pc, #44]	@ (8001698 <motor_forward+0x40>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0b      	ldr	r2, [pc, #44]	@ (800169c <motor_forward+0x44>)
 800166e:	6812      	ldr	r2, [r2, #0]
 8001670:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001672:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <motor_forward+0x48>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2200      	movs	r2, #0
 8001678:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, cycle/3);
 800167a:	4b08      	ldr	r3, [pc, #32]	@ (800169c <motor_forward+0x44>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	4b08      	ldr	r3, [pc, #32]	@ (80016a0 <motor_forward+0x48>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4908      	ldr	r1, [pc, #32]	@ (80016a4 <motor_forward+0x4c>)
 8001684:	fba1 1202 	umull	r1, r2, r1, r2
 8001688:	0852      	lsrs	r2, r2, #1
 800168a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	20000088 	.word	0x20000088
 800169c:	20000000 	.word	0x20000000
 80016a0:	200000d4 	.word	0x200000d4
 80016a4:	aaaaaaab 	.word	0xaaaaaaab

080016a8 <motor_left>:
void motor_left(uint32_t duty_cycle)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80016b0:	4b0f      	ldr	r3, [pc, #60]	@ (80016f0 <motor_left+0x48>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2200      	movs	r2, #0
 80016b6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, duty_cycle);
 80016b8:	4b0d      	ldr	r3, [pc, #52]	@ (80016f0 <motor_left+0x48>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle*2/3);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	005a      	lsls	r2, r3, #1
 80016c4:	4b0b      	ldr	r3, [pc, #44]	@ (80016f4 <motor_left+0x4c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	490b      	ldr	r1, [pc, #44]	@ (80016f8 <motor_left+0x50>)
 80016ca:	fba1 1202 	umull	r1, r2, r1, r2
 80016ce:	0852      	lsrs	r2, r2, #1
 80016d0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80016d2:	4b08      	ldr	r3, [pc, #32]	@ (80016f4 <motor_left+0x4c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2200      	movs	r2, #0
 80016d8:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 80016da:	2201      	movs	r2, #1
 80016dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016e0:	4806      	ldr	r0, [pc, #24]	@ (80016fc <motor_left+0x54>)
 80016e2:	f001 f8fd 	bl	80028e0 <HAL_GPIO_WritePin>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000088 	.word	0x20000088
 80016f4:	200000d4 	.word	0x200000d4
 80016f8:	aaaaaaab 	.word	0xaaaaaaab
 80016fc:	48000400 	.word	0x48000400

08001700 <motor_right>:
void motor_right(uint32_t duty_cycle)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle*2/3);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	005a      	lsls	r2, r3, #1
 800170c:	4b0e      	ldr	r3, [pc, #56]	@ (8001748 <motor_right+0x48>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	490e      	ldr	r1, [pc, #56]	@ (800174c <motor_right+0x4c>)
 8001712:	fba1 1202 	umull	r1, r2, r1, r2
 8001716:	0852      	lsrs	r2, r2, #1
 8001718:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800171a:	4b0b      	ldr	r3, [pc, #44]	@ (8001748 <motor_right+0x48>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2200      	movs	r2, #0
 8001720:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001722:	4b0b      	ldr	r3, [pc, #44]	@ (8001750 <motor_right+0x50>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2200      	movs	r2, #0
 8001728:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle);
 800172a:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <motor_right+0x50>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8001732:	2201      	movs	r2, #1
 8001734:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001738:	4806      	ldr	r0, [pc, #24]	@ (8001754 <motor_right+0x54>)
 800173a:	f001 f8d1 	bl	80028e0 <HAL_GPIO_WritePin>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000088 	.word	0x20000088
 800174c:	aaaaaaab 	.word	0xaaaaaaab
 8001750:	200000d4 	.word	0x200000d4
 8001754:	48000400 	.word	0x48000400

08001758 <motor_backward>:

// Function to move motors backward
void motor_backward(uint32_t duty_cycle)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, cycle);
 8001760:	4b0d      	ldr	r3, [pc, #52]	@ (8001798 <motor_backward+0x40>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a0d      	ldr	r2, [pc, #52]	@ (800179c <motor_backward+0x44>)
 8001766:	6812      	ldr	r2, [r2, #0]
 8001768:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800176a:	4b0b      	ldr	r3, [pc, #44]	@ (8001798 <motor_backward+0x40>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2200      	movs	r2, #0
 8001770:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, cycle/3);
 8001772:	4b0a      	ldr	r3, [pc, #40]	@ (800179c <motor_backward+0x44>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	4b0a      	ldr	r3, [pc, #40]	@ (80017a0 <motor_backward+0x48>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	490a      	ldr	r1, [pc, #40]	@ (80017a4 <motor_backward+0x4c>)
 800177c:	fba1 1202 	umull	r1, r2, r1, r2
 8001780:	0852      	lsrs	r2, r2, #1
 8001782:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8001784:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <motor_backward+0x48>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2200      	movs	r2, #0
 800178a:	63da      	str	r2, [r3, #60]	@ 0x3c

}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	20000088 	.word	0x20000088
 800179c:	20000000 	.word	0x20000000
 80017a0:	200000d4 	.word	0x200000d4
 80017a4:	aaaaaaab 	.word	0xaaaaaaab

080017a8 <motor_stop>:

// Function to stop motors
void motor_stop(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80017ac:	4b0a      	ldr	r3, [pc, #40]	@ (80017d8 <motor_stop+0x30>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2200      	movs	r2, #0
 80017b2:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80017b4:	4b08      	ldr	r3, [pc, #32]	@ (80017d8 <motor_stop+0x30>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2200      	movs	r2, #0
 80017ba:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80017bc:	4b07      	ldr	r3, [pc, #28]	@ (80017dc <motor_stop+0x34>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2200      	movs	r2, #0
 80017c2:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80017c4:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <motor_stop+0x34>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2200      	movs	r2, #0
 80017ca:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	20000088 	.word	0x20000088
 80017dc:	200000d4 	.word	0x200000d4

080017e0 <display1>:
void display1(void){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 80017e4:	2201      	movs	r2, #1
 80017e6:	2140      	movs	r1, #64	@ 0x40
 80017e8:	4804      	ldr	r0, [pc, #16]	@ (80017fc <display1+0x1c>)
 80017ea:	f001 f879 	bl	80028e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 80017ee:	2201      	movs	r2, #1
 80017f0:	2120      	movs	r1, #32
 80017f2:	4802      	ldr	r0, [pc, #8]	@ (80017fc <display1+0x1c>)
 80017f4:	f001 f874 	bl	80028e0 <HAL_GPIO_WritePin>
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	48000800 	.word	0x48000800

08001800 <display2>:
void display2(void){
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	//2
		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8001804:	2201      	movs	r2, #1
 8001806:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800180a:	480f      	ldr	r0, [pc, #60]	@ (8001848 <display2+0x48>)
 800180c:	f001 f868 	bl	80028e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8001810:	2201      	movs	r2, #1
 8001812:	2140      	movs	r1, #64	@ 0x40
 8001814:	480c      	ldr	r0, [pc, #48]	@ (8001848 <display2+0x48>)
 8001816:	f001 f863 	bl	80028e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 800181a:	2201      	movs	r2, #1
 800181c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001820:	480a      	ldr	r0, [pc, #40]	@ (800184c <display2+0x4c>)
 8001822:	f001 f85d 	bl	80028e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8001826:	2201      	movs	r2, #1
 8001828:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800182c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001830:	f001 f856 	bl	80028e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8001834:	2201      	movs	r2, #1
 8001836:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800183a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800183e:	f001 f84f 	bl	80028e0 <HAL_GPIO_WritePin>

}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	48000800 	.word	0x48000800
 800184c:	48000400 	.word	0x48000400

08001850 <display3>:
void display3(void){
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	//3
		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8001854:	2201      	movs	r2, #1
 8001856:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800185a:	480e      	ldr	r0, [pc, #56]	@ (8001894 <display3+0x44>)
 800185c:	f001 f840 	bl	80028e0 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8001860:	2201      	movs	r2, #1
 8001862:	2140      	movs	r1, #64	@ 0x40
 8001864:	480b      	ldr	r0, [pc, #44]	@ (8001894 <display3+0x44>)
 8001866:	f001 f83b 	bl	80028e0 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 800186a:	2201      	movs	r2, #1
 800186c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001870:	4809      	ldr	r0, [pc, #36]	@ (8001898 <display3+0x48>)
 8001872:	f001 f835 	bl	80028e0 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8001876:	2201      	movs	r2, #1
 8001878:	2120      	movs	r1, #32
 800187a:	4806      	ldr	r0, [pc, #24]	@ (8001894 <display3+0x44>)
 800187c:	f001 f830 	bl	80028e0 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8001880:	2201      	movs	r2, #1
 8001882:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001886:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800188a:	f001 f829 	bl	80028e0 <HAL_GPIO_WritePin>
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	48000800 	.word	0x48000800
 8001898:	48000400 	.word	0x48000400

0800189c <display4>:
void display4(void){
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
	//4
		  	HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 80018a0:	2201      	movs	r2, #1
 80018a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018a6:	480a      	ldr	r0, [pc, #40]	@ (80018d0 <display4+0x34>)
 80018a8:	f001 f81a 	bl	80028e0 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 80018ac:	2201      	movs	r2, #1
 80018ae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018b2:	4807      	ldr	r0, [pc, #28]	@ (80018d0 <display4+0x34>)
 80018b4:	f001 f814 	bl	80028e0 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 80018b8:	2201      	movs	r2, #1
 80018ba:	2140      	movs	r1, #64	@ 0x40
 80018bc:	4805      	ldr	r0, [pc, #20]	@ (80018d4 <display4+0x38>)
 80018be:	f001 f80f 	bl	80028e0 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 80018c2:	2201      	movs	r2, #1
 80018c4:	2120      	movs	r1, #32
 80018c6:	4803      	ldr	r0, [pc, #12]	@ (80018d4 <display4+0x38>)
 80018c8:	f001 f80a 	bl	80028e0 <HAL_GPIO_WritePin>
}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	48000400 	.word	0x48000400
 80018d4:	48000800 	.word	0x48000800

080018d8 <display5>:
void display5(void){
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 80018dc:	2201      	movs	r2, #1
 80018de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018e2:	480e      	ldr	r0, [pc, #56]	@ (800191c <display5+0x44>)
 80018e4:	f000 fffc 	bl	80028e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 80018e8:	2201      	movs	r2, #1
 80018ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018ee:	480c      	ldr	r0, [pc, #48]	@ (8001920 <display5+0x48>)
 80018f0:	f000 fff6 	bl	80028e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 80018f4:	2201      	movs	r2, #1
 80018f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018fa:	4809      	ldr	r0, [pc, #36]	@ (8001920 <display5+0x48>)
 80018fc:	f000 fff0 	bl	80028e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8001900:	2201      	movs	r2, #1
 8001902:	2120      	movs	r1, #32
 8001904:	4805      	ldr	r0, [pc, #20]	@ (800191c <display5+0x44>)
 8001906:	f000 ffeb 	bl	80028e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 800190a:	2201      	movs	r2, #1
 800190c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001910:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001914:	f000 ffe4 	bl	80028e0 <HAL_GPIO_WritePin>
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	48000800 	.word	0x48000800
 8001920:	48000400 	.word	0x48000400

08001924 <display6>:
void display6(void){
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8001928:	2201      	movs	r2, #1
 800192a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800192e:	4812      	ldr	r0, [pc, #72]	@ (8001978 <display6+0x54>)
 8001930:	f000 ffd6 	bl	80028e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8001934:	2201      	movs	r2, #1
 8001936:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800193a:	4810      	ldr	r0, [pc, #64]	@ (800197c <display6+0x58>)
 800193c:	f000 ffd0 	bl	80028e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8001940:	2201      	movs	r2, #1
 8001942:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001946:	480d      	ldr	r0, [pc, #52]	@ (800197c <display6+0x58>)
 8001948:	f000 ffca 	bl	80028e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 800194c:	2201      	movs	r2, #1
 800194e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001952:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001956:	f000 ffc3 	bl	80028e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 800195a:	2201      	movs	r2, #1
 800195c:	2120      	movs	r1, #32
 800195e:	4806      	ldr	r0, [pc, #24]	@ (8001978 <display6+0x54>)
 8001960:	f000 ffbe 	bl	80028e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8001964:	2201      	movs	r2, #1
 8001966:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800196a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800196e:	f000 ffb7 	bl	80028e0 <HAL_GPIO_WritePin>
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	48000800 	.word	0x48000800
 800197c:	48000400 	.word	0x48000400

08001980 <display_reset>:
void display_reset(void){
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8001984:	2200      	movs	r2, #0
 8001986:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800198a:	4814      	ldr	r0, [pc, #80]	@ (80019dc <display_reset+0x5c>)
 800198c:	f000 ffa8 	bl	80028e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8001990:	2200      	movs	r2, #0
 8001992:	2140      	movs	r1, #64	@ 0x40
 8001994:	4811      	ldr	r0, [pc, #68]	@ (80019dc <display_reset+0x5c>)
 8001996:	f000 ffa3 	bl	80028e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 800199a:	2200      	movs	r2, #0
 800199c:	2120      	movs	r1, #32
 800199e:	480f      	ldr	r0, [pc, #60]	@ (80019dc <display_reset+0x5c>)
 80019a0:	f000 ff9e 	bl	80028e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 80019a4:	2200      	movs	r2, #0
 80019a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019ae:	f000 ff97 	bl	80028e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 80019b2:	2200      	movs	r2, #0
 80019b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019bc:	f000 ff90 	bl	80028e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 80019c0:	2200      	movs	r2, #0
 80019c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019c6:	4806      	ldr	r0, [pc, #24]	@ (80019e0 <display_reset+0x60>)
 80019c8:	f000 ff8a 	bl	80028e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 80019cc:	2200      	movs	r2, #0
 80019ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019d2:	4803      	ldr	r0, [pc, #12]	@ (80019e0 <display_reset+0x60>)
 80019d4:	f000 ff84 	bl	80028e0 <HAL_GPIO_WritePin>

}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	48000800 	.word	0x48000800
 80019e0:	48000400 	.word	0x48000400

080019e4 <countdown>:

void countdown(void){
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
	display_reset();
 80019e8:	f7ff ffca 	bl	8001980 <display_reset>
	display3();
 80019ec:	f7ff ff30 	bl	8001850 <display3>
	HAL_Delay(1000);
 80019f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019f4:	f000 fc3e 	bl	8002274 <HAL_Delay>
	display_reset();
 80019f8:	f7ff ffc2 	bl	8001980 <display_reset>
	display2();
 80019fc:	f7ff ff00 	bl	8001800 <display2>
	HAL_Delay(1000);
 8001a00:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a04:	f000 fc36 	bl	8002274 <HAL_Delay>
	display_reset();
 8001a08:	f7ff ffba 	bl	8001980 <display_reset>
	display1();
 8001a0c:	f7ff fee8 	bl	80017e0 <display1>
	HAL_Delay(1000);
 8001a10:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a14:	f000 fc2e 	bl	8002274 <HAL_Delay>
	display_reset();
 8001a18:	f7ff ffb2 	bl	8001980 <display_reset>
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <motor_slight_left>:
void motor_slight_left(uint32_t duty_cycle){
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001a28:	4b19      	ldr	r3, [pc, #100]	@ (8001a90 <motor_slight_left+0x70>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, duty_cycle);
 8001a30:	4b17      	ldr	r3, [pc, #92]	@ (8001a90 <motor_slight_left+0x70>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, (0.65*(duty_cycle*2/3)));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	4a15      	ldr	r2, [pc, #84]	@ (8001a94 <motor_slight_left+0x74>)
 8001a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a42:	085b      	lsrs	r3, r3, #1
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe fe7f 	bl	8000748 <__aeabi_ui2d>
 8001a4a:	a30f      	add	r3, pc, #60	@ (adr r3, 8001a88 <motor_slight_left+0x68>)
 8001a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a50:	f7fe fc0e 	bl	8000270 <__aeabi_dmul>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	490f      	ldr	r1, [pc, #60]	@ (8001a98 <motor_slight_left+0x78>)
 8001a5a:	680c      	ldr	r4, [r1, #0]
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f7fe feec 	bl	800083c <__aeabi_d2uiz>
 8001a64:	4603      	mov	r3, r0
 8001a66:	6363      	str	r3, [r4, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8001a68:	4b0b      	ldr	r3, [pc, #44]	@ (8001a98 <motor_slight_left+0x78>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8001a70:	2201      	movs	r2, #1
 8001a72:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a76:	4809      	ldr	r0, [pc, #36]	@ (8001a9c <motor_slight_left+0x7c>)
 8001a78:	f000 ff32 	bl	80028e0 <HAL_GPIO_WritePin>

}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd90      	pop	{r4, r7, pc}
 8001a84:	f3af 8000 	nop.w
 8001a88:	cccccccd 	.word	0xcccccccd
 8001a8c:	3fe4cccc 	.word	0x3fe4cccc
 8001a90:	20000088 	.word	0x20000088
 8001a94:	aaaaaaab 	.word	0xaaaaaaab
 8001a98:	200000d4 	.word	0x200000d4
 8001a9c:	48000400 	.word	0x48000400

08001aa0 <motor_slight_right>:

void motor_slight_right(uint32_t duty_cycle){
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (0.65*(duty_cycle*2/3)));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	4a18      	ldr	r2, [pc, #96]	@ (8001b10 <motor_slight_right+0x70>)
 8001aae:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab2:	085b      	lsrs	r3, r3, #1
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fe47 	bl	8000748 <__aeabi_ui2d>
 8001aba:	a313      	add	r3, pc, #76	@ (adr r3, 8001b08 <motor_slight_right+0x68>)
 8001abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac0:	f7fe fbd6 	bl	8000270 <__aeabi_dmul>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4912      	ldr	r1, [pc, #72]	@ (8001b14 <motor_slight_right+0x74>)
 8001aca:	680c      	ldr	r4, [r1, #0]
 8001acc:	4610      	mov	r0, r2
 8001ace:	4619      	mov	r1, r3
 8001ad0:	f7fe feb4 	bl	800083c <__aeabi_d2uiz>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	6363      	str	r3, [r4, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b14 <motor_slight_right+0x74>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2200      	movs	r2, #0
 8001ade:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8001b18 <motor_slight_right+0x78>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle);
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b18 <motor_slight_right+0x78>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8001af0:	2201      	movs	r2, #1
 8001af2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001af6:	4809      	ldr	r0, [pc, #36]	@ (8001b1c <motor_slight_right+0x7c>)
 8001af8:	f000 fef2 	bl	80028e0 <HAL_GPIO_WritePin>
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd90      	pop	{r4, r7, pc}
 8001b04:	f3af 8000 	nop.w
 8001b08:	cccccccd 	.word	0xcccccccd
 8001b0c:	3fe4cccc 	.word	0x3fe4cccc
 8001b10:	aaaaaaab 	.word	0xaaaaaaab
 8001b14:	20000088 	.word	0x20000088
 8001b18:	200000d4 	.word	0x200000d4
 8001b1c:	48000400 	.word	0x48000400

08001b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b24:	b672      	cpsid	i
}
 8001b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <Error_Handler+0x8>

08001b2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b32:	4b0f      	ldr	r3, [pc, #60]	@ (8001b70 <HAL_MspInit+0x44>)
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	4a0e      	ldr	r2, [pc, #56]	@ (8001b70 <HAL_MspInit+0x44>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	6193      	str	r3, [r2, #24]
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b70 <HAL_MspInit+0x44>)
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	607b      	str	r3, [r7, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b4a:	4b09      	ldr	r3, [pc, #36]	@ (8001b70 <HAL_MspInit+0x44>)
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	4a08      	ldr	r2, [pc, #32]	@ (8001b70 <HAL_MspInit+0x44>)
 8001b50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b54:	61d3      	str	r3, [r2, #28]
 8001b56:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <HAL_MspInit+0x44>)
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b62:	2007      	movs	r0, #7
 8001b64:	f000 fc7a 	bl	800245c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b68:	bf00      	nop
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40021000 	.word	0x40021000

08001b74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a27      	ldr	r2, [pc, #156]	@ (8001c20 <HAL_TIM_Base_MspInit+0xac>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d11c      	bne.n	8001bc0 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b86:	4b27      	ldr	r3, [pc, #156]	@ (8001c24 <HAL_TIM_Base_MspInit+0xb0>)
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	4a26      	ldr	r2, [pc, #152]	@ (8001c24 <HAL_TIM_Base_MspInit+0xb0>)
 8001b8c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b90:	6193      	str	r3, [r2, #24]
 8001b92:	4b24      	ldr	r3, [pc, #144]	@ (8001c24 <HAL_TIM_Base_MspInit+0xb0>)
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	2018      	movs	r0, #24
 8001ba4:	f000 fc65 	bl	8002472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001ba8:	2018      	movs	r0, #24
 8001baa:	f000 fc7e 	bl	80024aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	201a      	movs	r0, #26
 8001bb4:	f000 fc5d 	bl	8002472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001bb8:	201a      	movs	r0, #26
 8001bba:	f000 fc76 	bl	80024aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001bbe:	e02a      	b.n	8001c16 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a18      	ldr	r2, [pc, #96]	@ (8001c28 <HAL_TIM_Base_MspInit+0xb4>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d10c      	bne.n	8001be4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001bca:	4b16      	ldr	r3, [pc, #88]	@ (8001c24 <HAL_TIM_Base_MspInit+0xb0>)
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	4a15      	ldr	r2, [pc, #84]	@ (8001c24 <HAL_TIM_Base_MspInit+0xb0>)
 8001bd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bd4:	6193      	str	r3, [r2, #24]
 8001bd6:	4b13      	ldr	r3, [pc, #76]	@ (8001c24 <HAL_TIM_Base_MspInit+0xb0>)
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	693b      	ldr	r3, [r7, #16]
}
 8001be2:	e018      	b.n	8001c16 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM17)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a10      	ldr	r2, [pc, #64]	@ (8001c2c <HAL_TIM_Base_MspInit+0xb8>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d113      	bne.n	8001c16 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001bee:	4b0d      	ldr	r3, [pc, #52]	@ (8001c24 <HAL_TIM_Base_MspInit+0xb0>)
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	4a0c      	ldr	r2, [pc, #48]	@ (8001c24 <HAL_TIM_Base_MspInit+0xb0>)
 8001bf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bf8:	6193      	str	r3, [r2, #24]
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001c24 <HAL_TIM_Base_MspInit+0xb0>)
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2100      	movs	r1, #0
 8001c0a:	201a      	movs	r0, #26
 8001c0c:	f000 fc31 	bl	8002472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001c10:	201a      	movs	r0, #26
 8001c12:	f000 fc4a 	bl	80024aa <HAL_NVIC_EnableIRQ>
}
 8001c16:	bf00      	nop
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40012c00 	.word	0x40012c00
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40014400 	.word	0x40014400
 8001c2c:	40014800 	.word	0x40014800

08001c30 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c40:	d10b      	bne.n	8001c5a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c42:	4b09      	ldr	r3, [pc, #36]	@ (8001c68 <HAL_TIM_PWM_MspInit+0x38>)
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	4a08      	ldr	r2, [pc, #32]	@ (8001c68 <HAL_TIM_PWM_MspInit+0x38>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	61d3      	str	r3, [r2, #28]
 8001c4e:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <HAL_TIM_PWM_MspInit+0x38>)
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c5a:	bf00      	nop
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40021000 	.word	0x40021000

08001c6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08c      	sub	sp, #48	@ 0x30
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 031c 	add.w	r3, r7, #28
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a51      	ldr	r2, [pc, #324]	@ (8001dd0 <HAL_TIM_MspPostInit+0x164>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d13a      	bne.n	8001d04 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c8e:	4b51      	ldr	r3, [pc, #324]	@ (8001dd4 <HAL_TIM_MspPostInit+0x168>)
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	4a50      	ldr	r2, [pc, #320]	@ (8001dd4 <HAL_TIM_MspPostInit+0x168>)
 8001c94:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001c98:	6153      	str	r3, [r2, #20]
 8001c9a:	4b4e      	ldr	r3, [pc, #312]	@ (8001dd4 <HAL_TIM_MspPostInit+0x168>)
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ca2:	61bb      	str	r3, [r7, #24]
 8001ca4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca6:	4b4b      	ldr	r3, [pc, #300]	@ (8001dd4 <HAL_TIM_MspPostInit+0x168>)
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	4a4a      	ldr	r2, [pc, #296]	@ (8001dd4 <HAL_TIM_MspPostInit+0x168>)
 8001cac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cb0:	6153      	str	r3, [r2, #20]
 8001cb2:	4b48      	ldr	r3, [pc, #288]	@ (8001dd4 <HAL_TIM_MspPostInit+0x168>)
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = L2_Pin;
 8001cbe:	2308      	movs	r3, #8
 8001cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(L2_GPIO_Port, &GPIO_InitStruct);
 8001cd2:	f107 031c 	add.w	r3, r7, #28
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	483f      	ldr	r0, [pc, #252]	@ (8001dd8 <HAL_TIM_MspPostInit+0x16c>)
 8001cda:	f000 fc77 	bl	80025cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = L1_Pin;
 8001cde:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cec:	2300      	movs	r3, #0
 8001cee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001cf0:	2306      	movs	r3, #6
 8001cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(L1_GPIO_Port, &GPIO_InitStruct);
 8001cf4:	f107 031c 	add.w	r3, r7, #28
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cfe:	f000 fc65 	bl	80025cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001d02:	e061      	b.n	8001dc8 <HAL_TIM_MspPostInit+0x15c>
  else if(htim->Instance==TIM2)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d0c:	d13a      	bne.n	8001d84 <HAL_TIM_MspPostInit+0x118>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0e:	4b31      	ldr	r3, [pc, #196]	@ (8001dd4 <HAL_TIM_MspPostInit+0x168>)
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	4a30      	ldr	r2, [pc, #192]	@ (8001dd4 <HAL_TIM_MspPostInit+0x168>)
 8001d14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d18:	6153      	str	r3, [r2, #20]
 8001d1a:	4b2e      	ldr	r3, [pc, #184]	@ (8001dd4 <HAL_TIM_MspPostInit+0x168>)
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d26:	4b2b      	ldr	r3, [pc, #172]	@ (8001dd4 <HAL_TIM_MspPostInit+0x168>)
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	4a2a      	ldr	r2, [pc, #168]	@ (8001dd4 <HAL_TIM_MspPostInit+0x168>)
 8001d2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d30:	6153      	str	r3, [r2, #20]
 8001d32:	4b28      	ldr	r3, [pc, #160]	@ (8001dd4 <HAL_TIM_MspPostInit+0x168>)
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = P1_Pin;
 8001d3e:	2320      	movs	r3, #32
 8001d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(P1_GPIO_Port, &GPIO_InitStruct);
 8001d52:	f107 031c 	add.w	r3, r7, #28
 8001d56:	4619      	mov	r1, r3
 8001d58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d5c:	f000 fc36 	bl	80025cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = P2_Pin;
 8001d60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d66:	2302      	movs	r3, #2
 8001d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d72:	2301      	movs	r3, #1
 8001d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(P2_GPIO_Port, &GPIO_InitStruct);
 8001d76:	f107 031c 	add.w	r3, r7, #28
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4817      	ldr	r0, [pc, #92]	@ (8001ddc <HAL_TIM_MspPostInit+0x170>)
 8001d7e:	f000 fc25 	bl	80025cc <HAL_GPIO_Init>
}
 8001d82:	e021      	b.n	8001dc8 <HAL_TIM_MspPostInit+0x15c>
  else if(htim->Instance==TIM16)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a15      	ldr	r2, [pc, #84]	@ (8001de0 <HAL_TIM_MspPostInit+0x174>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d11c      	bne.n	8001dc8 <HAL_TIM_MspPostInit+0x15c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8e:	4b11      	ldr	r3, [pc, #68]	@ (8001dd4 <HAL_TIM_MspPostInit+0x168>)
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	4a10      	ldr	r2, [pc, #64]	@ (8001dd4 <HAL_TIM_MspPostInit+0x168>)
 8001d94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d98:	6153      	str	r3, [r2, #20]
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd4 <HAL_TIM_MspPostInit+0x168>)
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001da6:	2340      	movs	r3, #64	@ 0x40
 8001da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db2:	2300      	movs	r3, #0
 8001db4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001db6:	2301      	movs	r3, #1
 8001db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dba:	f107 031c 	add.w	r3, r7, #28
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dc4:	f000 fc02 	bl	80025cc <HAL_GPIO_Init>
}
 8001dc8:	bf00      	nop
 8001dca:	3730      	adds	r7, #48	@ 0x30
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40012c00 	.word	0x40012c00
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	48000800 	.word	0x48000800
 8001ddc:	48000400 	.word	0x48000400
 8001de0:	40014400 	.word	0x40014400

08001de4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08c      	sub	sp, #48	@ 0x30
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 031c 	add.w	r3, r7, #28
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a37      	ldr	r2, [pc, #220]	@ (8001ee0 <HAL_UART_MspInit+0xfc>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d132      	bne.n	8001e6c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e06:	4b37      	ldr	r3, [pc, #220]	@ (8001ee4 <HAL_UART_MspInit+0x100>)
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	4a36      	ldr	r2, [pc, #216]	@ (8001ee4 <HAL_UART_MspInit+0x100>)
 8001e0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e10:	6193      	str	r3, [r2, #24]
 8001e12:	4b34      	ldr	r3, [pc, #208]	@ (8001ee4 <HAL_UART_MspInit+0x100>)
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e1a:	61bb      	str	r3, [r7, #24]
 8001e1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1e:	4b31      	ldr	r3, [pc, #196]	@ (8001ee4 <HAL_UART_MspInit+0x100>)
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	4a30      	ldr	r2, [pc, #192]	@ (8001ee4 <HAL_UART_MspInit+0x100>)
 8001e24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e28:	6153      	str	r3, [r2, #20]
 8001e2a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ee4 <HAL_UART_MspInit+0x100>)
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e36:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e44:	2303      	movs	r3, #3
 8001e46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e48:	2307      	movs	r3, #7
 8001e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4c:	f107 031c 	add.w	r3, r7, #28
 8001e50:	4619      	mov	r1, r3
 8001e52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e56:	f000 fbb9 	bl	80025cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	2025      	movs	r0, #37	@ 0x25
 8001e60:	f000 fb07 	bl	8002472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e64:	2025      	movs	r0, #37	@ 0x25
 8001e66:	f000 fb20 	bl	80024aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e6a:	e035      	b.n	8001ed8 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART2)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a1d      	ldr	r2, [pc, #116]	@ (8001ee8 <HAL_UART_MspInit+0x104>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d130      	bne.n	8001ed8 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e76:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee4 <HAL_UART_MspInit+0x100>)
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	4a1a      	ldr	r2, [pc, #104]	@ (8001ee4 <HAL_UART_MspInit+0x100>)
 8001e7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e80:	61d3      	str	r3, [r2, #28]
 8001e82:	4b18      	ldr	r3, [pc, #96]	@ (8001ee4 <HAL_UART_MspInit+0x100>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ee4 <HAL_UART_MspInit+0x100>)
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	4a14      	ldr	r2, [pc, #80]	@ (8001ee4 <HAL_UART_MspInit+0x100>)
 8001e94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e98:	6153      	str	r3, [r2, #20]
 8001e9a:	4b12      	ldr	r3, [pc, #72]	@ (8001ee4 <HAL_UART_MspInit+0x100>)
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ea6:	230c      	movs	r3, #12
 8001ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eb6:	2307      	movs	r3, #7
 8001eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eba:	f107 031c 	add.w	r3, r7, #28
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ec4:	f000 fb82 	bl	80025cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2100      	movs	r1, #0
 8001ecc:	2026      	movs	r0, #38	@ 0x26
 8001ece:	f000 fad0 	bl	8002472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ed2:	2026      	movs	r0, #38	@ 0x26
 8001ed4:	f000 fae9 	bl	80024aa <HAL_NVIC_EnableIRQ>
}
 8001ed8:	bf00      	nop
 8001eda:	3730      	adds	r7, #48	@ 0x30
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40013800 	.word	0x40013800
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40004400 	.word	0x40004400

08001eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ef0:	bf00      	nop
 8001ef2:	e7fd      	b.n	8001ef0 <NMI_Handler+0x4>

08001ef4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef8:	bf00      	nop
 8001efa:	e7fd      	b.n	8001ef8 <HardFault_Handler+0x4>

08001efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f00:	bf00      	nop
 8001f02:	e7fd      	b.n	8001f00 <MemManage_Handler+0x4>

08001f04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f08:	bf00      	nop
 8001f0a:	e7fd      	b.n	8001f08 <BusFault_Handler+0x4>

08001f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f10:	bf00      	nop
 8001f12:	e7fd      	b.n	8001f10 <UsageFault_Handler+0x4>

08001f14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f42:	f000 f977 	bl	8002234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f50:	4802      	ldr	r0, [pc, #8]	@ (8001f5c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001f52:	f002 fac5 	bl	80044e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000088 	.word	0x20000088

08001f60 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f64:	4803      	ldr	r0, [pc, #12]	@ (8001f74 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8001f66:	f002 fabb 	bl	80044e0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8001f6a:	4803      	ldr	r0, [pc, #12]	@ (8001f78 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8001f6c:	f002 fab8 	bl	80044e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000088 	.word	0x20000088
 8001f78:	2000016c 	.word	0x2000016c

08001f7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f80:	4802      	ldr	r0, [pc, #8]	@ (8001f8c <USART1_IRQHandler+0x10>)
 8001f82:	f003 fbc5 	bl	8005710 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	200001b8 	.word	0x200001b8

08001f90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f94:	4802      	ldr	r0, [pc, #8]	@ (8001fa0 <USART2_IRQHandler+0x10>)
 8001f96:	f003 fbbb 	bl	8005710 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000240 	.word	0x20000240

08001fa4 <_getpid>:
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	2301      	movs	r3, #1
 8001faa:	4618      	mov	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <_kill>:
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
 8001fbe:	f004 fbf3 	bl	80067a8 <__errno>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2216      	movs	r2, #22
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <_exit>:
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff ffe7 	bl	8001fb4 <_kill>
 8001fe6:	bf00      	nop
 8001fe8:	e7fd      	b.n	8001fe6 <_exit+0x12>

08001fea <_read>:
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b086      	sub	sp, #24
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	60f8      	str	r0, [r7, #12]
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	e00a      	b.n	8002012 <_read+0x28>
 8001ffc:	f3af 8000 	nop.w
 8002000:	4601      	mov	r1, r0
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	1c5a      	adds	r2, r3, #1
 8002006:	60ba      	str	r2, [r7, #8]
 8002008:	b2ca      	uxtb	r2, r1
 800200a:	701a      	strb	r2, [r3, #0]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	3301      	adds	r3, #1
 8002010:	617b      	str	r3, [r7, #20]
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	429a      	cmp	r2, r3
 8002018:	dbf0      	blt.n	8001ffc <_read+0x12>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4618      	mov	r0, r3
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <_write>:
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
 8002034:	e009      	b.n	800204a <_write+0x26>
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	1c5a      	adds	r2, r3, #1
 800203a:	60ba      	str	r2, [r7, #8]
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f3af 8000 	nop.w
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	3301      	adds	r3, #1
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	429a      	cmp	r2, r3
 8002050:	dbf1      	blt.n	8002036 <_write+0x12>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <_close>:
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	f04f 33ff 	mov.w	r3, #4294967295
 8002068:	4618      	mov	r0, r3
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <_fstat>:
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	2300      	movs	r3, #0
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <_isatty>:
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	2301      	movs	r3, #1
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <_lseek>:
 80020aa:	b480      	push	{r7}
 80020ac:	b085      	sub	sp, #20
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	2300      	movs	r3, #0
 80020b8:	4618      	mov	r0, r3
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <_sbrk>:
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	4a14      	ldr	r2, [pc, #80]	@ (8002120 <_sbrk+0x5c>)
 80020ce:	4b15      	ldr	r3, [pc, #84]	@ (8002124 <_sbrk+0x60>)
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	4b13      	ldr	r3, [pc, #76]	@ (8002128 <_sbrk+0x64>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d102      	bne.n	80020e6 <_sbrk+0x22>
 80020e0:	4b11      	ldr	r3, [pc, #68]	@ (8002128 <_sbrk+0x64>)
 80020e2:	4a12      	ldr	r2, [pc, #72]	@ (800212c <_sbrk+0x68>)
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	4b10      	ldr	r3, [pc, #64]	@ (8002128 <_sbrk+0x64>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4413      	add	r3, r2
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d207      	bcs.n	8002104 <_sbrk+0x40>
 80020f4:	f004 fb58 	bl	80067a8 <__errno>
 80020f8:	4603      	mov	r3, r0
 80020fa:	220c      	movs	r2, #12
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002102:	e009      	b.n	8002118 <_sbrk+0x54>
 8002104:	4b08      	ldr	r3, [pc, #32]	@ (8002128 <_sbrk+0x64>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	4b07      	ldr	r3, [pc, #28]	@ (8002128 <_sbrk+0x64>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4413      	add	r3, r2
 8002112:	4a05      	ldr	r2, [pc, #20]	@ (8002128 <_sbrk+0x64>)
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4618      	mov	r0, r3
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20004000 	.word	0x20004000
 8002124:	00000400 	.word	0x00000400
 8002128:	200002d0 	.word	0x200002d0
 800212c:	20000428 	.word	0x20000428

08002130 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002134:	4b06      	ldr	r3, [pc, #24]	@ (8002150 <SystemInit+0x20>)
 8002136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800213a:	4a05      	ldr	r2, [pc, #20]	@ (8002150 <SystemInit+0x20>)
 800213c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002140:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <Reset_Handler>:
 8002154:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800218c <LoopForever+0x2>
 8002158:	f7ff ffea 	bl	8002130 <SystemInit>
 800215c:	480c      	ldr	r0, [pc, #48]	@ (8002190 <LoopForever+0x6>)
 800215e:	490d      	ldr	r1, [pc, #52]	@ (8002194 <LoopForever+0xa>)
 8002160:	4a0d      	ldr	r2, [pc, #52]	@ (8002198 <LoopForever+0xe>)
 8002162:	2300      	movs	r3, #0
 8002164:	e002      	b.n	800216c <LoopCopyDataInit>

08002166 <CopyDataInit>:
 8002166:	58d4      	ldr	r4, [r2, r3]
 8002168:	50c4      	str	r4, [r0, r3]
 800216a:	3304      	adds	r3, #4

0800216c <LoopCopyDataInit>:
 800216c:	18c4      	adds	r4, r0, r3
 800216e:	428c      	cmp	r4, r1
 8002170:	d3f9      	bcc.n	8002166 <CopyDataInit>
 8002172:	4a0a      	ldr	r2, [pc, #40]	@ (800219c <LoopForever+0x12>)
 8002174:	4c0a      	ldr	r4, [pc, #40]	@ (80021a0 <LoopForever+0x16>)
 8002176:	2300      	movs	r3, #0
 8002178:	e001      	b.n	800217e <LoopFillZerobss>

0800217a <FillZerobss>:
 800217a:	6013      	str	r3, [r2, #0]
 800217c:	3204      	adds	r2, #4

0800217e <LoopFillZerobss>:
 800217e:	42a2      	cmp	r2, r4
 8002180:	d3fb      	bcc.n	800217a <FillZerobss>
 8002182:	f004 fb17 	bl	80067b4 <__libc_init_array>
 8002186:	f7fe fb79 	bl	800087c <main>

0800218a <LoopForever>:
 800218a:	e7fe      	b.n	800218a <LoopForever>
 800218c:	20004000 	.word	0x20004000
 8002190:	20000000 	.word	0x20000000
 8002194:	2000006c 	.word	0x2000006c
 8002198:	08007590 	.word	0x08007590
 800219c:	2000006c 	.word	0x2000006c
 80021a0:	20000424 	.word	0x20000424

080021a4 <ADC1_IRQHandler>:
 80021a4:	e7fe      	b.n	80021a4 <ADC1_IRQHandler>
	...

080021a8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021ac:	4b08      	ldr	r3, [pc, #32]	@ (80021d0 <HAL_Init+0x28>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a07      	ldr	r2, [pc, #28]	@ (80021d0 <HAL_Init+0x28>)
 80021b2:	f043 0310 	orr.w	r3, r3, #16
 80021b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b8:	2003      	movs	r0, #3
 80021ba:	f000 f94f 	bl	800245c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021be:	2000      	movs	r0, #0
 80021c0:	f000 f808 	bl	80021d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021c4:	f7ff fcb2 	bl	8001b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40022000 	.word	0x40022000

080021d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021dc:	4b12      	ldr	r3, [pc, #72]	@ (8002228 <HAL_InitTick+0x54>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b12      	ldr	r3, [pc, #72]	@ (800222c <HAL_InitTick+0x58>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	4619      	mov	r1, r3
 80021e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 f967 	bl	80024c6 <HAL_SYSTICK_Config>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e00e      	b.n	8002220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b0f      	cmp	r3, #15
 8002206:	d80a      	bhi.n	800221e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002208:	2200      	movs	r2, #0
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	f04f 30ff 	mov.w	r0, #4294967295
 8002210:	f000 f92f 	bl	8002472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002214:	4a06      	ldr	r2, [pc, #24]	@ (8002230 <HAL_InitTick+0x5c>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	e000      	b.n	8002220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000004 	.word	0x20000004
 800222c:	2000000c 	.word	0x2000000c
 8002230:	20000008 	.word	0x20000008

08002234 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002238:	4b06      	ldr	r3, [pc, #24]	@ (8002254 <HAL_IncTick+0x20>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	4b06      	ldr	r3, [pc, #24]	@ (8002258 <HAL_IncTick+0x24>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4413      	add	r3, r2
 8002244:	4a04      	ldr	r2, [pc, #16]	@ (8002258 <HAL_IncTick+0x24>)
 8002246:	6013      	str	r3, [r2, #0]
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	2000000c 	.word	0x2000000c
 8002258:	200002d4 	.word	0x200002d4

0800225c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002260:	4b03      	ldr	r3, [pc, #12]	@ (8002270 <HAL_GetTick+0x14>)
 8002262:	681b      	ldr	r3, [r3, #0]
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	200002d4 	.word	0x200002d4

08002274 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800227c:	f7ff ffee 	bl	800225c <HAL_GetTick>
 8002280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800228c:	d005      	beq.n	800229a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800228e:	4b0a      	ldr	r3, [pc, #40]	@ (80022b8 <HAL_Delay+0x44>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	461a      	mov	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4413      	add	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800229a:	bf00      	nop
 800229c:	f7ff ffde 	bl	800225c <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d8f7      	bhi.n	800229c <HAL_Delay+0x28>
  {
  }
}
 80022ac:	bf00      	nop
 80022ae:	bf00      	nop
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	2000000c 	.word	0x2000000c

080022bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002300 <__NVIC_SetPriorityGrouping+0x44>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022d8:	4013      	ands	r3, r2
 80022da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ee:	4a04      	ldr	r2, [pc, #16]	@ (8002300 <__NVIC_SetPriorityGrouping+0x44>)
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	60d3      	str	r3, [r2, #12]
}
 80022f4:	bf00      	nop
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002308:	4b04      	ldr	r3, [pc, #16]	@ (800231c <__NVIC_GetPriorityGrouping+0x18>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	0a1b      	lsrs	r3, r3, #8
 800230e:	f003 0307 	and.w	r3, r3, #7
}
 8002312:	4618      	mov	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800232a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232e:	2b00      	cmp	r3, #0
 8002330:	db0b      	blt.n	800234a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	f003 021f 	and.w	r2, r3, #31
 8002338:	4907      	ldr	r1, [pc, #28]	@ (8002358 <__NVIC_EnableIRQ+0x38>)
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	095b      	lsrs	r3, r3, #5
 8002340:	2001      	movs	r0, #1
 8002342:	fa00 f202 	lsl.w	r2, r0, r2
 8002346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	e000e100 	.word	0xe000e100

0800235c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	6039      	str	r1, [r7, #0]
 8002366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236c:	2b00      	cmp	r3, #0
 800236e:	db0a      	blt.n	8002386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	b2da      	uxtb	r2, r3
 8002374:	490c      	ldr	r1, [pc, #48]	@ (80023a8 <__NVIC_SetPriority+0x4c>)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	0112      	lsls	r2, r2, #4
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	440b      	add	r3, r1
 8002380:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002384:	e00a      	b.n	800239c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	b2da      	uxtb	r2, r3
 800238a:	4908      	ldr	r1, [pc, #32]	@ (80023ac <__NVIC_SetPriority+0x50>)
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	3b04      	subs	r3, #4
 8002394:	0112      	lsls	r2, r2, #4
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	440b      	add	r3, r1
 800239a:	761a      	strb	r2, [r3, #24]
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000e100 	.word	0xe000e100
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b089      	sub	sp, #36	@ 0x24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f1c3 0307 	rsb	r3, r3, #7
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	bf28      	it	cs
 80023ce:	2304      	movcs	r3, #4
 80023d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3304      	adds	r3, #4
 80023d6:	2b06      	cmp	r3, #6
 80023d8:	d902      	bls.n	80023e0 <NVIC_EncodePriority+0x30>
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3b03      	subs	r3, #3
 80023de:	e000      	b.n	80023e2 <NVIC_EncodePriority+0x32>
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e4:	f04f 32ff 	mov.w	r2, #4294967295
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43da      	mvns	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	401a      	ands	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f8:	f04f 31ff 	mov.w	r1, #4294967295
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002402:	43d9      	mvns	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002408:	4313      	orrs	r3, r2
         );
}
 800240a:	4618      	mov	r0, r3
 800240c:	3724      	adds	r7, #36	@ 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
	...

08002418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3b01      	subs	r3, #1
 8002424:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002428:	d301      	bcc.n	800242e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800242a:	2301      	movs	r3, #1
 800242c:	e00f      	b.n	800244e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800242e:	4a0a      	ldr	r2, [pc, #40]	@ (8002458 <SysTick_Config+0x40>)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002436:	210f      	movs	r1, #15
 8002438:	f04f 30ff 	mov.w	r0, #4294967295
 800243c:	f7ff ff8e 	bl	800235c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002440:	4b05      	ldr	r3, [pc, #20]	@ (8002458 <SysTick_Config+0x40>)
 8002442:	2200      	movs	r2, #0
 8002444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002446:	4b04      	ldr	r3, [pc, #16]	@ (8002458 <SysTick_Config+0x40>)
 8002448:	2207      	movs	r2, #7
 800244a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	e000e010 	.word	0xe000e010

0800245c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff ff29 	bl	80022bc <__NVIC_SetPriorityGrouping>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af00      	add	r7, sp, #0
 8002478:	4603      	mov	r3, r0
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
 800247e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002484:	f7ff ff3e 	bl	8002304 <__NVIC_GetPriorityGrouping>
 8002488:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68b9      	ldr	r1, [r7, #8]
 800248e:	6978      	ldr	r0, [r7, #20]
 8002490:	f7ff ff8e 	bl	80023b0 <NVIC_EncodePriority>
 8002494:	4602      	mov	r2, r0
 8002496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800249a:	4611      	mov	r1, r2
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ff5d 	bl	800235c <__NVIC_SetPriority>
}
 80024a2:	bf00      	nop
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	4603      	mov	r3, r0
 80024b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ff31 	bl	8002320 <__NVIC_EnableIRQ>
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7ff ffa2 	bl	8002418 <SysTick_Config>
 80024d4:	4603      	mov	r3, r0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d008      	beq.n	8002502 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2204      	movs	r2, #4
 80024f4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e020      	b.n	8002544 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 020e 	bic.w	r2, r2, #14
 8002510:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0201 	bic.w	r2, r2, #1
 8002520:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800252a:	2101      	movs	r1, #1
 800252c:	fa01 f202 	lsl.w	r2, r1, r2
 8002530:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002562:	2b02      	cmp	r3, #2
 8002564:	d005      	beq.n	8002572 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2204      	movs	r2, #4
 800256a:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	73fb      	strb	r3, [r7, #15]
 8002570:	e027      	b.n	80025c2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 020e 	bic.w	r2, r2, #14
 8002580:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0201 	bic.w	r2, r2, #1
 8002590:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800259a:	2101      	movs	r1, #1
 800259c:	fa01 f202 	lsl.w	r2, r1, r2
 80025a0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	4798      	blx	r3
    } 
  }
  return status;
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025da:	e14e      	b.n	800287a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	2101      	movs	r1, #1
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	fa01 f303 	lsl.w	r3, r1, r3
 80025e8:	4013      	ands	r3, r2
 80025ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 8140 	beq.w	8002874 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d005      	beq.n	800260c <HAL_GPIO_Init+0x40>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d130      	bne.n	800266e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	2203      	movs	r2, #3
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4013      	ands	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4313      	orrs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002642:	2201      	movs	r2, #1
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	4013      	ands	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	091b      	lsrs	r3, r3, #4
 8002658:	f003 0201 	and.w	r2, r3, #1
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	2b03      	cmp	r3, #3
 8002678:	d017      	beq.n	80026aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	2203      	movs	r2, #3
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	4013      	ands	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d123      	bne.n	80026fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	08da      	lsrs	r2, r3, #3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3208      	adds	r2, #8
 80026be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	220f      	movs	r2, #15
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43db      	mvns	r3, r3
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	4013      	ands	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	08da      	lsrs	r2, r3, #3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3208      	adds	r2, #8
 80026f8:	6939      	ldr	r1, [r7, #16]
 80026fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	2203      	movs	r2, #3
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	4013      	ands	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f003 0203 	and.w	r2, r3, #3
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 809a 	beq.w	8002874 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002740:	4b55      	ldr	r3, [pc, #340]	@ (8002898 <HAL_GPIO_Init+0x2cc>)
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	4a54      	ldr	r2, [pc, #336]	@ (8002898 <HAL_GPIO_Init+0x2cc>)
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	6193      	str	r3, [r2, #24]
 800274c:	4b52      	ldr	r3, [pc, #328]	@ (8002898 <HAL_GPIO_Init+0x2cc>)
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002758:	4a50      	ldr	r2, [pc, #320]	@ (800289c <HAL_GPIO_Init+0x2d0>)
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	089b      	lsrs	r3, r3, #2
 800275e:	3302      	adds	r3, #2
 8002760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002764:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	220f      	movs	r2, #15
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	4013      	ands	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002782:	d013      	beq.n	80027ac <HAL_GPIO_Init+0x1e0>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a46      	ldr	r2, [pc, #280]	@ (80028a0 <HAL_GPIO_Init+0x2d4>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d00d      	beq.n	80027a8 <HAL_GPIO_Init+0x1dc>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a45      	ldr	r2, [pc, #276]	@ (80028a4 <HAL_GPIO_Init+0x2d8>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d007      	beq.n	80027a4 <HAL_GPIO_Init+0x1d8>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a44      	ldr	r2, [pc, #272]	@ (80028a8 <HAL_GPIO_Init+0x2dc>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d101      	bne.n	80027a0 <HAL_GPIO_Init+0x1d4>
 800279c:	2303      	movs	r3, #3
 800279e:	e006      	b.n	80027ae <HAL_GPIO_Init+0x1e2>
 80027a0:	2305      	movs	r3, #5
 80027a2:	e004      	b.n	80027ae <HAL_GPIO_Init+0x1e2>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e002      	b.n	80027ae <HAL_GPIO_Init+0x1e2>
 80027a8:	2301      	movs	r3, #1
 80027aa:	e000      	b.n	80027ae <HAL_GPIO_Init+0x1e2>
 80027ac:	2300      	movs	r3, #0
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	f002 0203 	and.w	r2, r2, #3
 80027b4:	0092      	lsls	r2, r2, #2
 80027b6:	4093      	lsls	r3, r2
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027be:	4937      	ldr	r1, [pc, #220]	@ (800289c <HAL_GPIO_Init+0x2d0>)
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	089b      	lsrs	r3, r3, #2
 80027c4:	3302      	adds	r3, #2
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027cc:	4b37      	ldr	r3, [pc, #220]	@ (80028ac <HAL_GPIO_Init+0x2e0>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	43db      	mvns	r3, r3
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4013      	ands	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80027f0:	4a2e      	ldr	r2, [pc, #184]	@ (80028ac <HAL_GPIO_Init+0x2e0>)
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027f6:	4b2d      	ldr	r3, [pc, #180]	@ (80028ac <HAL_GPIO_Init+0x2e0>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	43db      	mvns	r3, r3
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	4013      	ands	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4313      	orrs	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800281a:	4a24      	ldr	r2, [pc, #144]	@ (80028ac <HAL_GPIO_Init+0x2e0>)
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002820:	4b22      	ldr	r3, [pc, #136]	@ (80028ac <HAL_GPIO_Init+0x2e0>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	43db      	mvns	r3, r3
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	4013      	ands	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	4313      	orrs	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002844:	4a19      	ldr	r2, [pc, #100]	@ (80028ac <HAL_GPIO_Init+0x2e0>)
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800284a:	4b18      	ldr	r3, [pc, #96]	@ (80028ac <HAL_GPIO_Init+0x2e0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	43db      	mvns	r3, r3
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	4013      	ands	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4313      	orrs	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800286e:	4a0f      	ldr	r2, [pc, #60]	@ (80028ac <HAL_GPIO_Init+0x2e0>)
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	3301      	adds	r3, #1
 8002878:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	fa22 f303 	lsr.w	r3, r2, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	f47f aea9 	bne.w	80025dc <HAL_GPIO_Init+0x10>
  }
}
 800288a:	bf00      	nop
 800288c:	bf00      	nop
 800288e:	371c      	adds	r7, #28
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	40021000 	.word	0x40021000
 800289c:	40010000 	.word	0x40010000
 80028a0:	48000400 	.word	0x48000400
 80028a4:	48000800 	.word	0x48000800
 80028a8:	48000c00 	.word	0x48000c00
 80028ac:	40010400 	.word	0x40010400

080028b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	887b      	ldrh	r3, [r7, #2]
 80028c2:	4013      	ands	r3, r2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d002      	beq.n	80028ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028c8:	2301      	movs	r3, #1
 80028ca:	73fb      	strb	r3, [r7, #15]
 80028cc:	e001      	b.n	80028d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028ce:	2300      	movs	r3, #0
 80028d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	807b      	strh	r3, [r7, #2]
 80028ec:	4613      	mov	r3, r2
 80028ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028f0:	787b      	ldrb	r3, [r7, #1]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028f6:	887a      	ldrh	r2, [r7, #2]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028fc:	e002      	b.n	8002904 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028fe:	887a      	ldrh	r2, [r7, #2]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002916:	af00      	add	r7, sp, #0
 8002918:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002920:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002922:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002926:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d102      	bne.n	8002936 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	f001 b823 	b.w	800397c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002936:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 817d 	beq.w	8002c46 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800294c:	4bbc      	ldr	r3, [pc, #752]	@ (8002c40 <HAL_RCC_OscConfig+0x330>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 030c 	and.w	r3, r3, #12
 8002954:	2b04      	cmp	r3, #4
 8002956:	d00c      	beq.n	8002972 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002958:	4bb9      	ldr	r3, [pc, #740]	@ (8002c40 <HAL_RCC_OscConfig+0x330>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 030c 	and.w	r3, r3, #12
 8002960:	2b08      	cmp	r3, #8
 8002962:	d15c      	bne.n	8002a1e <HAL_RCC_OscConfig+0x10e>
 8002964:	4bb6      	ldr	r3, [pc, #728]	@ (8002c40 <HAL_RCC_OscConfig+0x330>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800296c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002970:	d155      	bne.n	8002a1e <HAL_RCC_OscConfig+0x10e>
 8002972:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002976:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002986:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800298a:	fab3 f383 	clz	r3, r3
 800298e:	b2db      	uxtb	r3, r3
 8002990:	095b      	lsrs	r3, r3, #5
 8002992:	b2db      	uxtb	r3, r3
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b01      	cmp	r3, #1
 800299c:	d102      	bne.n	80029a4 <HAL_RCC_OscConfig+0x94>
 800299e:	4ba8      	ldr	r3, [pc, #672]	@ (8002c40 <HAL_RCC_OscConfig+0x330>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	e015      	b.n	80029d0 <HAL_RCC_OscConfig+0xc0>
 80029a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029a8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ac:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80029b0:	fa93 f3a3 	rbit	r3, r3
 80029b4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80029b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029bc:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80029c0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80029c4:	fa93 f3a3 	rbit	r3, r3
 80029c8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80029cc:	4b9c      	ldr	r3, [pc, #624]	@ (8002c40 <HAL_RCC_OscConfig+0x330>)
 80029ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80029d4:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80029d8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80029dc:	fa92 f2a2 	rbit	r2, r2
 80029e0:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80029e4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80029e8:	fab2 f282 	clz	r2, r2
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	f042 0220 	orr.w	r2, r2, #32
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	f002 021f 	and.w	r2, r2, #31
 80029f8:	2101      	movs	r1, #1
 80029fa:	fa01 f202 	lsl.w	r2, r1, r2
 80029fe:	4013      	ands	r3, r2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 811f 	beq.w	8002c44 <HAL_RCC_OscConfig+0x334>
 8002a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f040 8116 	bne.w	8002c44 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	f000 bfaf 	b.w	800397c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a2e:	d106      	bne.n	8002a3e <HAL_RCC_OscConfig+0x12e>
 8002a30:	4b83      	ldr	r3, [pc, #524]	@ (8002c40 <HAL_RCC_OscConfig+0x330>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a82      	ldr	r2, [pc, #520]	@ (8002c40 <HAL_RCC_OscConfig+0x330>)
 8002a36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a3a:	6013      	str	r3, [r2, #0]
 8002a3c:	e036      	b.n	8002aac <HAL_RCC_OscConfig+0x19c>
 8002a3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10c      	bne.n	8002a68 <HAL_RCC_OscConfig+0x158>
 8002a4e:	4b7c      	ldr	r3, [pc, #496]	@ (8002c40 <HAL_RCC_OscConfig+0x330>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a7b      	ldr	r2, [pc, #492]	@ (8002c40 <HAL_RCC_OscConfig+0x330>)
 8002a54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	4b79      	ldr	r3, [pc, #484]	@ (8002c40 <HAL_RCC_OscConfig+0x330>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a78      	ldr	r2, [pc, #480]	@ (8002c40 <HAL_RCC_OscConfig+0x330>)
 8002a60:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	e021      	b.n	8002aac <HAL_RCC_OscConfig+0x19c>
 8002a68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a6c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a78:	d10c      	bne.n	8002a94 <HAL_RCC_OscConfig+0x184>
 8002a7a:	4b71      	ldr	r3, [pc, #452]	@ (8002c40 <HAL_RCC_OscConfig+0x330>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a70      	ldr	r2, [pc, #448]	@ (8002c40 <HAL_RCC_OscConfig+0x330>)
 8002a80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	4b6e      	ldr	r3, [pc, #440]	@ (8002c40 <HAL_RCC_OscConfig+0x330>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a6d      	ldr	r2, [pc, #436]	@ (8002c40 <HAL_RCC_OscConfig+0x330>)
 8002a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	e00b      	b.n	8002aac <HAL_RCC_OscConfig+0x19c>
 8002a94:	4b6a      	ldr	r3, [pc, #424]	@ (8002c40 <HAL_RCC_OscConfig+0x330>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a69      	ldr	r2, [pc, #420]	@ (8002c40 <HAL_RCC_OscConfig+0x330>)
 8002a9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a9e:	6013      	str	r3, [r2, #0]
 8002aa0:	4b67      	ldr	r3, [pc, #412]	@ (8002c40 <HAL_RCC_OscConfig+0x330>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a66      	ldr	r2, [pc, #408]	@ (8002c40 <HAL_RCC_OscConfig+0x330>)
 8002aa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002aaa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002aac:	4b64      	ldr	r3, [pc, #400]	@ (8002c40 <HAL_RCC_OscConfig+0x330>)
 8002aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab0:	f023 020f 	bic.w	r2, r3, #15
 8002ab4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	495f      	ldr	r1, [pc, #380]	@ (8002c40 <HAL_RCC_OscConfig+0x330>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ac6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d059      	beq.n	8002b8a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad6:	f7ff fbc1 	bl	800225c <HAL_GetTick>
 8002ada:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ade:	e00a      	b.n	8002af6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ae0:	f7ff fbbc 	bl	800225c <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b64      	cmp	r3, #100	@ 0x64
 8002aee:	d902      	bls.n	8002af6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	f000 bf43 	b.w	800397c <HAL_RCC_OscConfig+0x106c>
 8002af6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002afa:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afe:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002b02:	fa93 f3a3 	rbit	r3, r3
 8002b06:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002b0a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0e:	fab3 f383 	clz	r3, r3
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	095b      	lsrs	r3, r3, #5
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d102      	bne.n	8002b28 <HAL_RCC_OscConfig+0x218>
 8002b22:	4b47      	ldr	r3, [pc, #284]	@ (8002c40 <HAL_RCC_OscConfig+0x330>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	e015      	b.n	8002b54 <HAL_RCC_OscConfig+0x244>
 8002b28:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b2c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b30:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002b34:	fa93 f3a3 	rbit	r3, r3
 8002b38:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002b3c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b40:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002b44:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002b48:	fa93 f3a3 	rbit	r3, r3
 8002b4c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002b50:	4b3b      	ldr	r3, [pc, #236]	@ (8002c40 <HAL_RCC_OscConfig+0x330>)
 8002b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b54:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b58:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002b5c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002b60:	fa92 f2a2 	rbit	r2, r2
 8002b64:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002b68:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002b6c:	fab2 f282 	clz	r2, r2
 8002b70:	b2d2      	uxtb	r2, r2
 8002b72:	f042 0220 	orr.w	r2, r2, #32
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	f002 021f 	and.w	r2, r2, #31
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d0ab      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x1d0>
 8002b88:	e05d      	b.n	8002c46 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8a:	f7ff fb67 	bl	800225c <HAL_GetTick>
 8002b8e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b92:	e00a      	b.n	8002baa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b94:	f7ff fb62 	bl	800225c <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b64      	cmp	r3, #100	@ 0x64
 8002ba2:	d902      	bls.n	8002baa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	f000 bee9 	b.w	800397c <HAL_RCC_OscConfig+0x106c>
 8002baa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bae:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002bbe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc2:	fab3 f383 	clz	r3, r3
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	095b      	lsrs	r3, r3, #5
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d102      	bne.n	8002bdc <HAL_RCC_OscConfig+0x2cc>
 8002bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c40 <HAL_RCC_OscConfig+0x330>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	e015      	b.n	8002c08 <HAL_RCC_OscConfig+0x2f8>
 8002bdc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002be0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002be8:	fa93 f3a3 	rbit	r3, r3
 8002bec:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002bf0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bf4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002bf8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002bfc:	fa93 f3a3 	rbit	r3, r3
 8002c00:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002c04:	4b0e      	ldr	r3, [pc, #56]	@ (8002c40 <HAL_RCC_OscConfig+0x330>)
 8002c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c08:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c0c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002c10:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002c14:	fa92 f2a2 	rbit	r2, r2
 8002c18:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002c1c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002c20:	fab2 f282 	clz	r2, r2
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	f042 0220 	orr.w	r2, r2, #32
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	f002 021f 	and.w	r2, r2, #31
 8002c30:	2101      	movs	r1, #1
 8002c32:	fa01 f202 	lsl.w	r2, r1, r2
 8002c36:	4013      	ands	r3, r2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1ab      	bne.n	8002b94 <HAL_RCC_OscConfig+0x284>
 8002c3c:	e003      	b.n	8002c46 <HAL_RCC_OscConfig+0x336>
 8002c3e:	bf00      	nop
 8002c40:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 817d 	beq.w	8002f56 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c5c:	4ba6      	ldr	r3, [pc, #664]	@ (8002ef8 <HAL_RCC_OscConfig+0x5e8>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 030c 	and.w	r3, r3, #12
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00b      	beq.n	8002c80 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c68:	4ba3      	ldr	r3, [pc, #652]	@ (8002ef8 <HAL_RCC_OscConfig+0x5e8>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 030c 	and.w	r3, r3, #12
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d172      	bne.n	8002d5a <HAL_RCC_OscConfig+0x44a>
 8002c74:	4ba0      	ldr	r3, [pc, #640]	@ (8002ef8 <HAL_RCC_OscConfig+0x5e8>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d16c      	bne.n	8002d5a <HAL_RCC_OscConfig+0x44a>
 8002c80:	2302      	movs	r3, #2
 8002c82:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c86:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002c8a:	fa93 f3a3 	rbit	r3, r3
 8002c8e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002c92:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c96:	fab3 f383 	clz	r3, r3
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	095b      	lsrs	r3, r3, #5
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d102      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x3a0>
 8002caa:	4b93      	ldr	r3, [pc, #588]	@ (8002ef8 <HAL_RCC_OscConfig+0x5e8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	e013      	b.n	8002cd8 <HAL_RCC_OscConfig+0x3c8>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb6:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002cba:	fa93 f3a3 	rbit	r3, r3
 8002cbe:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002cc8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002ccc:	fa93 f3a3 	rbit	r3, r3
 8002cd0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002cd4:	4b88      	ldr	r3, [pc, #544]	@ (8002ef8 <HAL_RCC_OscConfig+0x5e8>)
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd8:	2202      	movs	r2, #2
 8002cda:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002cde:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002ce2:	fa92 f2a2 	rbit	r2, r2
 8002ce6:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002cea:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002cee:	fab2 f282 	clz	r2, r2
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	f042 0220 	orr.w	r2, r2, #32
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	f002 021f 	and.w	r2, r2, #31
 8002cfe:	2101      	movs	r1, #1
 8002d00:	fa01 f202 	lsl.w	r2, r1, r2
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00a      	beq.n	8002d20 <HAL_RCC_OscConfig+0x410>
 8002d0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d002      	beq.n	8002d20 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	f000 be2e 	b.w	800397c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d20:	4b75      	ldr	r3, [pc, #468]	@ (8002ef8 <HAL_RCC_OscConfig+0x5e8>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d2c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	21f8      	movs	r1, #248	@ 0xf8
 8002d36:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002d3e:	fa91 f1a1 	rbit	r1, r1
 8002d42:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002d46:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002d4a:	fab1 f181 	clz	r1, r1
 8002d4e:	b2c9      	uxtb	r1, r1
 8002d50:	408b      	lsls	r3, r1
 8002d52:	4969      	ldr	r1, [pc, #420]	@ (8002ef8 <HAL_RCC_OscConfig+0x5e8>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d58:	e0fd      	b.n	8002f56 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 8088 	beq.w	8002e7c <HAL_RCC_OscConfig+0x56c>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002d7e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d82:	fab3 f383 	clz	r3, r3
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d8c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	461a      	mov	r2, r3
 8002d94:	2301      	movs	r3, #1
 8002d96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d98:	f7ff fa60 	bl	800225c <HAL_GetTick>
 8002d9c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da0:	e00a      	b.n	8002db8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002da2:	f7ff fa5b 	bl	800225c <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d902      	bls.n	8002db8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	f000 bde2 	b.w	800397c <HAL_RCC_OscConfig+0x106c>
 8002db8:	2302      	movs	r3, #2
 8002dba:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbe:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002dc2:	fa93 f3a3 	rbit	r3, r3
 8002dc6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002dca:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dce:	fab3 f383 	clz	r3, r3
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	095b      	lsrs	r3, r3, #5
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d102      	bne.n	8002de8 <HAL_RCC_OscConfig+0x4d8>
 8002de2:	4b45      	ldr	r3, [pc, #276]	@ (8002ef8 <HAL_RCC_OscConfig+0x5e8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	e013      	b.n	8002e10 <HAL_RCC_OscConfig+0x500>
 8002de8:	2302      	movs	r3, #2
 8002dea:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dee:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002df2:	fa93 f3a3 	rbit	r3, r3
 8002df6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002e00:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002e04:	fa93 f3a3 	rbit	r3, r3
 8002e08:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002e0c:	4b3a      	ldr	r3, [pc, #232]	@ (8002ef8 <HAL_RCC_OscConfig+0x5e8>)
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e10:	2202      	movs	r2, #2
 8002e12:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002e16:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002e1a:	fa92 f2a2 	rbit	r2, r2
 8002e1e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002e22:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002e26:	fab2 f282 	clz	r2, r2
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	f042 0220 	orr.w	r2, r2, #32
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	f002 021f 	and.w	r2, r2, #31
 8002e36:	2101      	movs	r1, #1
 8002e38:	fa01 f202 	lsl.w	r2, r1, r2
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0af      	beq.n	8002da2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e42:	4b2d      	ldr	r3, [pc, #180]	@ (8002ef8 <HAL_RCC_OscConfig+0x5e8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	21f8      	movs	r1, #248	@ 0xf8
 8002e58:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002e60:	fa91 f1a1 	rbit	r1, r1
 8002e64:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002e68:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002e6c:	fab1 f181 	clz	r1, r1
 8002e70:	b2c9      	uxtb	r1, r1
 8002e72:	408b      	lsls	r3, r1
 8002e74:	4920      	ldr	r1, [pc, #128]	@ (8002ef8 <HAL_RCC_OscConfig+0x5e8>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	600b      	str	r3, [r1, #0]
 8002e7a:	e06c      	b.n	8002f56 <HAL_RCC_OscConfig+0x646>
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e82:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002e86:	fa93 f3a3 	rbit	r3, r3
 8002e8a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002e8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e92:	fab3 f383 	clz	r3, r3
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e9c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea8:	f7ff f9d8 	bl	800225c <HAL_GetTick>
 8002eac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eb0:	e00a      	b.n	8002ec8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eb2:	f7ff f9d3 	bl	800225c <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d902      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	f000 bd5a 	b.w	800397c <HAL_RCC_OscConfig+0x106c>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ece:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002ed2:	fa93 f3a3 	rbit	r3, r3
 8002ed6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002eda:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ede:	fab3 f383 	clz	r3, r3
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	095b      	lsrs	r3, r3, #5
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d104      	bne.n	8002efc <HAL_RCC_OscConfig+0x5ec>
 8002ef2:	4b01      	ldr	r3, [pc, #4]	@ (8002ef8 <HAL_RCC_OscConfig+0x5e8>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	e015      	b.n	8002f24 <HAL_RCC_OscConfig+0x614>
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	2302      	movs	r3, #2
 8002efe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f02:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f06:	fa93 f3a3 	rbit	r3, r3
 8002f0a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002f0e:	2302      	movs	r3, #2
 8002f10:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002f14:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002f18:	fa93 f3a3 	rbit	r3, r3
 8002f1c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002f20:	4bc8      	ldr	r3, [pc, #800]	@ (8003244 <HAL_RCC_OscConfig+0x934>)
 8002f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f24:	2202      	movs	r2, #2
 8002f26:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002f2a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002f2e:	fa92 f2a2 	rbit	r2, r2
 8002f32:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002f36:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002f3a:	fab2 f282 	clz	r2, r2
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	f042 0220 	orr.w	r2, r2, #32
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	f002 021f 	and.w	r2, r2, #31
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1ad      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 8110 	beq.w	800318c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d079      	beq.n	8003070 <HAL_RCC_OscConfig+0x760>
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002f86:	fa93 f3a3 	rbit	r3, r3
 8002f8a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002f8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f92:	fab3 f383 	clz	r3, r3
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	461a      	mov	r2, r3
 8002f9a:	4bab      	ldr	r3, [pc, #684]	@ (8003248 <HAL_RCC_OscConfig+0x938>)
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa6:	f7ff f959 	bl	800225c <HAL_GetTick>
 8002faa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fae:	e00a      	b.n	8002fc6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fb0:	f7ff f954 	bl	800225c <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d902      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	f000 bcdb 	b.w	800397c <HAL_RCC_OscConfig+0x106c>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fcc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002fd0:	fa93 f3a3 	rbit	r3, r3
 8002fd4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002fd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fdc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	fa93 f2a3 	rbit	r2, r3
 8002ff2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003000:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003004:	2202      	movs	r2, #2
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800300c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	fa93 f2a3 	rbit	r2, r3
 8003016:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800301a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800301e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003020:	4b88      	ldr	r3, [pc, #544]	@ (8003244 <HAL_RCC_OscConfig+0x934>)
 8003022:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003024:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003028:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800302c:	2102      	movs	r1, #2
 800302e:	6019      	str	r1, [r3, #0]
 8003030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003034:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	fa93 f1a3 	rbit	r1, r3
 800303e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003042:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003046:	6019      	str	r1, [r3, #0]
  return result;
 8003048:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800304c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	fab3 f383 	clz	r3, r3
 8003056:	b2db      	uxtb	r3, r3
 8003058:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800305c:	b2db      	uxtb	r3, r3
 800305e:	f003 031f 	and.w	r3, r3, #31
 8003062:	2101      	movs	r1, #1
 8003064:	fa01 f303 	lsl.w	r3, r1, r3
 8003068:	4013      	ands	r3, r2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0a0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x6a0>
 800306e:	e08d      	b.n	800318c <HAL_RCC_OscConfig+0x87c>
 8003070:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003074:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003078:	2201      	movs	r2, #1
 800307a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003080:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	fa93 f2a3 	rbit	r2, r3
 800308a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800308e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003092:	601a      	str	r2, [r3, #0]
  return result;
 8003094:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003098:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800309c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800309e:	fab3 f383 	clz	r3, r3
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	461a      	mov	r2, r3
 80030a6:	4b68      	ldr	r3, [pc, #416]	@ (8003248 <HAL_RCC_OscConfig+0x938>)
 80030a8:	4413      	add	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	461a      	mov	r2, r3
 80030ae:	2300      	movs	r3, #0
 80030b0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b2:	f7ff f8d3 	bl	800225c <HAL_GetTick>
 80030b6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ba:	e00a      	b.n	80030d2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030bc:	f7ff f8ce 	bl	800225c <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d902      	bls.n	80030d2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	f000 bc55 	b.w	800397c <HAL_RCC_OscConfig+0x106c>
 80030d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030d6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80030da:	2202      	movs	r2, #2
 80030dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	fa93 f2a3 	rbit	r2, r3
 80030ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80030fe:	2202      	movs	r2, #2
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003106:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	fa93 f2a3 	rbit	r2, r3
 8003110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003114:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800311e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003122:	2202      	movs	r2, #2
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800312a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	fa93 f2a3 	rbit	r2, r3
 8003134:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003138:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800313c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800313e:	4b41      	ldr	r3, [pc, #260]	@ (8003244 <HAL_RCC_OscConfig+0x934>)
 8003140:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003146:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800314a:	2102      	movs	r1, #2
 800314c:	6019      	str	r1, [r3, #0]
 800314e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003152:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	fa93 f1a3 	rbit	r1, r3
 800315c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003160:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003164:	6019      	str	r1, [r3, #0]
  return result;
 8003166:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800316a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	fab3 f383 	clz	r3, r3
 8003174:	b2db      	uxtb	r3, r3
 8003176:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800317a:	b2db      	uxtb	r3, r3
 800317c:	f003 031f 	and.w	r3, r3, #31
 8003180:	2101      	movs	r1, #1
 8003182:	fa01 f303 	lsl.w	r3, r1, r3
 8003186:	4013      	ands	r3, r2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d197      	bne.n	80030bc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800318c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003190:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 81a1 	beq.w	80034e4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031a2:	2300      	movs	r3, #0
 80031a4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031a8:	4b26      	ldr	r3, [pc, #152]	@ (8003244 <HAL_RCC_OscConfig+0x934>)
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d116      	bne.n	80031e2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031b4:	4b23      	ldr	r3, [pc, #140]	@ (8003244 <HAL_RCC_OscConfig+0x934>)
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	4a22      	ldr	r2, [pc, #136]	@ (8003244 <HAL_RCC_OscConfig+0x934>)
 80031ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031be:	61d3      	str	r3, [r2, #28]
 80031c0:	4b20      	ldr	r3, [pc, #128]	@ (8003244 <HAL_RCC_OscConfig+0x934>)
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80031c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031cc:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80031da:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80031dc:	2301      	movs	r3, #1
 80031de:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e2:	4b1a      	ldr	r3, [pc, #104]	@ (800324c <HAL_RCC_OscConfig+0x93c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d11a      	bne.n	8003224 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ee:	4b17      	ldr	r3, [pc, #92]	@ (800324c <HAL_RCC_OscConfig+0x93c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a16      	ldr	r2, [pc, #88]	@ (800324c <HAL_RCC_OscConfig+0x93c>)
 80031f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031f8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031fa:	f7ff f82f 	bl	800225c <HAL_GetTick>
 80031fe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003202:	e009      	b.n	8003218 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003204:	f7ff f82a 	bl	800225c <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b64      	cmp	r3, #100	@ 0x64
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e3b1      	b.n	800397c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003218:	4b0c      	ldr	r3, [pc, #48]	@ (800324c <HAL_RCC_OscConfig+0x93c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0ef      	beq.n	8003204 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003224:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003228:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d10d      	bne.n	8003250 <HAL_RCC_OscConfig+0x940>
 8003234:	4b03      	ldr	r3, [pc, #12]	@ (8003244 <HAL_RCC_OscConfig+0x934>)
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	4a02      	ldr	r2, [pc, #8]	@ (8003244 <HAL_RCC_OscConfig+0x934>)
 800323a:	f043 0301 	orr.w	r3, r3, #1
 800323e:	6213      	str	r3, [r2, #32]
 8003240:	e03c      	b.n	80032bc <HAL_RCC_OscConfig+0x9ac>
 8003242:	bf00      	nop
 8003244:	40021000 	.word	0x40021000
 8003248:	10908120 	.word	0x10908120
 800324c:	40007000 	.word	0x40007000
 8003250:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003254:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10c      	bne.n	800327a <HAL_RCC_OscConfig+0x96a>
 8003260:	4bc1      	ldr	r3, [pc, #772]	@ (8003568 <HAL_RCC_OscConfig+0xc58>)
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	4ac0      	ldr	r2, [pc, #768]	@ (8003568 <HAL_RCC_OscConfig+0xc58>)
 8003266:	f023 0301 	bic.w	r3, r3, #1
 800326a:	6213      	str	r3, [r2, #32]
 800326c:	4bbe      	ldr	r3, [pc, #760]	@ (8003568 <HAL_RCC_OscConfig+0xc58>)
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	4abd      	ldr	r2, [pc, #756]	@ (8003568 <HAL_RCC_OscConfig+0xc58>)
 8003272:	f023 0304 	bic.w	r3, r3, #4
 8003276:	6213      	str	r3, [r2, #32]
 8003278:	e020      	b.n	80032bc <HAL_RCC_OscConfig+0x9ac>
 800327a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800327e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	2b05      	cmp	r3, #5
 8003288:	d10c      	bne.n	80032a4 <HAL_RCC_OscConfig+0x994>
 800328a:	4bb7      	ldr	r3, [pc, #732]	@ (8003568 <HAL_RCC_OscConfig+0xc58>)
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	4ab6      	ldr	r2, [pc, #728]	@ (8003568 <HAL_RCC_OscConfig+0xc58>)
 8003290:	f043 0304 	orr.w	r3, r3, #4
 8003294:	6213      	str	r3, [r2, #32]
 8003296:	4bb4      	ldr	r3, [pc, #720]	@ (8003568 <HAL_RCC_OscConfig+0xc58>)
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	4ab3      	ldr	r2, [pc, #716]	@ (8003568 <HAL_RCC_OscConfig+0xc58>)
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	6213      	str	r3, [r2, #32]
 80032a2:	e00b      	b.n	80032bc <HAL_RCC_OscConfig+0x9ac>
 80032a4:	4bb0      	ldr	r3, [pc, #704]	@ (8003568 <HAL_RCC_OscConfig+0xc58>)
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	4aaf      	ldr	r2, [pc, #700]	@ (8003568 <HAL_RCC_OscConfig+0xc58>)
 80032aa:	f023 0301 	bic.w	r3, r3, #1
 80032ae:	6213      	str	r3, [r2, #32]
 80032b0:	4bad      	ldr	r3, [pc, #692]	@ (8003568 <HAL_RCC_OscConfig+0xc58>)
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	4aac      	ldr	r2, [pc, #688]	@ (8003568 <HAL_RCC_OscConfig+0xc58>)
 80032b6:	f023 0304 	bic.w	r3, r3, #4
 80032ba:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 8081 	beq.w	80033d0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ce:	f7fe ffc5 	bl	800225c <HAL_GetTick>
 80032d2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d6:	e00b      	b.n	80032f0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032d8:	f7fe ffc0 	bl	800225c <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e345      	b.n	800397c <HAL_RCC_OscConfig+0x106c>
 80032f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80032f8:	2202      	movs	r2, #2
 80032fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003300:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	fa93 f2a3 	rbit	r2, r3
 800330a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800330e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003318:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800331c:	2202      	movs	r2, #2
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003324:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	fa93 f2a3 	rbit	r2, r3
 800332e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003332:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003336:	601a      	str	r2, [r3, #0]
  return result;
 8003338:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800333c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003340:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003342:	fab3 f383 	clz	r3, r3
 8003346:	b2db      	uxtb	r3, r3
 8003348:	095b      	lsrs	r3, r3, #5
 800334a:	b2db      	uxtb	r3, r3
 800334c:	f043 0302 	orr.w	r3, r3, #2
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d102      	bne.n	800335c <HAL_RCC_OscConfig+0xa4c>
 8003356:	4b84      	ldr	r3, [pc, #528]	@ (8003568 <HAL_RCC_OscConfig+0xc58>)
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	e013      	b.n	8003384 <HAL_RCC_OscConfig+0xa74>
 800335c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003360:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003364:	2202      	movs	r2, #2
 8003366:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003368:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800336c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	fa93 f2a3 	rbit	r2, r3
 8003376:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800337a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	4b79      	ldr	r3, [pc, #484]	@ (8003568 <HAL_RCC_OscConfig+0xc58>)
 8003382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003384:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003388:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800338c:	2102      	movs	r1, #2
 800338e:	6011      	str	r1, [r2, #0]
 8003390:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003394:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003398:	6812      	ldr	r2, [r2, #0]
 800339a:	fa92 f1a2 	rbit	r1, r2
 800339e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033a2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80033a6:	6011      	str	r1, [r2, #0]
  return result;
 80033a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033ac:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80033b0:	6812      	ldr	r2, [r2, #0]
 80033b2:	fab2 f282 	clz	r2, r2
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	f002 021f 	and.w	r2, r2, #31
 80033c2:	2101      	movs	r1, #1
 80033c4:	fa01 f202 	lsl.w	r2, r1, r2
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d084      	beq.n	80032d8 <HAL_RCC_OscConfig+0x9c8>
 80033ce:	e07f      	b.n	80034d0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033d0:	f7fe ff44 	bl	800225c <HAL_GetTick>
 80033d4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033d8:	e00b      	b.n	80033f2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033da:	f7fe ff3f 	bl	800225c <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e2c4      	b.n	800397c <HAL_RCC_OscConfig+0x106c>
 80033f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80033fa:	2202      	movs	r2, #2
 80033fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003402:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	fa93 f2a3 	rbit	r2, r3
 800340c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003410:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800341a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800341e:	2202      	movs	r2, #2
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003426:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	fa93 f2a3 	rbit	r2, r3
 8003430:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003434:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003438:	601a      	str	r2, [r3, #0]
  return result;
 800343a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800343e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003442:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003444:	fab3 f383 	clz	r3, r3
 8003448:	b2db      	uxtb	r3, r3
 800344a:	095b      	lsrs	r3, r3, #5
 800344c:	b2db      	uxtb	r3, r3
 800344e:	f043 0302 	orr.w	r3, r3, #2
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d102      	bne.n	800345e <HAL_RCC_OscConfig+0xb4e>
 8003458:	4b43      	ldr	r3, [pc, #268]	@ (8003568 <HAL_RCC_OscConfig+0xc58>)
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	e013      	b.n	8003486 <HAL_RCC_OscConfig+0xb76>
 800345e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003462:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003466:	2202      	movs	r2, #2
 8003468:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800346e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	fa93 f2a3 	rbit	r2, r3
 8003478:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800347c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	4b39      	ldr	r3, [pc, #228]	@ (8003568 <HAL_RCC_OscConfig+0xc58>)
 8003484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003486:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800348a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800348e:	2102      	movs	r1, #2
 8003490:	6011      	str	r1, [r2, #0]
 8003492:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003496:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800349a:	6812      	ldr	r2, [r2, #0]
 800349c:	fa92 f1a2 	rbit	r1, r2
 80034a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034a4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80034a8:	6011      	str	r1, [r2, #0]
  return result;
 80034aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034ae:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80034b2:	6812      	ldr	r2, [r2, #0]
 80034b4:	fab2 f282 	clz	r2, r2
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034be:	b2d2      	uxtb	r2, r2
 80034c0:	f002 021f 	and.w	r2, r2, #31
 80034c4:	2101      	movs	r1, #1
 80034c6:	fa01 f202 	lsl.w	r2, r1, r2
 80034ca:	4013      	ands	r3, r2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d184      	bne.n	80033da <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034d0:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d105      	bne.n	80034e4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d8:	4b23      	ldr	r3, [pc, #140]	@ (8003568 <HAL_RCC_OscConfig+0xc58>)
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	4a22      	ldr	r2, [pc, #136]	@ (8003568 <HAL_RCC_OscConfig+0xc58>)
 80034de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034e2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 8242 	beq.w	800397a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003568 <HAL_RCC_OscConfig+0xc58>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f003 030c 	and.w	r3, r3, #12
 80034fe:	2b08      	cmp	r3, #8
 8003500:	f000 8213 	beq.w	800392a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003504:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003508:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	2b02      	cmp	r3, #2
 8003512:	f040 8162 	bne.w	80037da <HAL_RCC_OscConfig+0xeca>
 8003516:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800351a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800351e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003522:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003524:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003528:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	fa93 f2a3 	rbit	r2, r3
 8003532:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003536:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800353a:	601a      	str	r2, [r3, #0]
  return result;
 800353c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003540:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003544:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003546:	fab3 f383 	clz	r3, r3
 800354a:	b2db      	uxtb	r3, r3
 800354c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003550:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	461a      	mov	r2, r3
 8003558:	2300      	movs	r3, #0
 800355a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355c:	f7fe fe7e 	bl	800225c <HAL_GetTick>
 8003560:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003564:	e00c      	b.n	8003580 <HAL_RCC_OscConfig+0xc70>
 8003566:	bf00      	nop
 8003568:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800356c:	f7fe fe76 	bl	800225c <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e1fd      	b.n	800397c <HAL_RCC_OscConfig+0x106c>
 8003580:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003584:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003588:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800358c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003592:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	fa93 f2a3 	rbit	r2, r3
 800359c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035a0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80035a4:	601a      	str	r2, [r3, #0]
  return result;
 80035a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035aa:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80035ae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035b0:	fab3 f383 	clz	r3, r3
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	095b      	lsrs	r3, r3, #5
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	f043 0301 	orr.w	r3, r3, #1
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d102      	bne.n	80035ca <HAL_RCC_OscConfig+0xcba>
 80035c4:	4bb0      	ldr	r3, [pc, #704]	@ (8003888 <HAL_RCC_OscConfig+0xf78>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	e027      	b.n	800361a <HAL_RCC_OscConfig+0xd0a>
 80035ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ce:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80035d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035dc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	fa93 f2a3 	rbit	r2, r3
 80035e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ea:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035f4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80035f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003602:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	fa93 f2a3 	rbit	r2, r3
 800360c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003610:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	4b9c      	ldr	r3, [pc, #624]	@ (8003888 <HAL_RCC_OscConfig+0xf78>)
 8003618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800361e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003622:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003626:	6011      	str	r1, [r2, #0]
 8003628:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800362c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003630:	6812      	ldr	r2, [r2, #0]
 8003632:	fa92 f1a2 	rbit	r1, r2
 8003636:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800363a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800363e:	6011      	str	r1, [r2, #0]
  return result;
 8003640:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003644:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003648:	6812      	ldr	r2, [r2, #0]
 800364a:	fab2 f282 	clz	r2, r2
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	f042 0220 	orr.w	r2, r2, #32
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	f002 021f 	and.w	r2, r2, #31
 800365a:	2101      	movs	r1, #1
 800365c:	fa01 f202 	lsl.w	r2, r1, r2
 8003660:	4013      	ands	r3, r2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d182      	bne.n	800356c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003666:	4b88      	ldr	r3, [pc, #544]	@ (8003888 <HAL_RCC_OscConfig+0xf78>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800366e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003672:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800367a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800367e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	430b      	orrs	r3, r1
 8003688:	497f      	ldr	r1, [pc, #508]	@ (8003888 <HAL_RCC_OscConfig+0xf78>)
 800368a:	4313      	orrs	r3, r2
 800368c:	604b      	str	r3, [r1, #4]
 800368e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003692:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003696:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800369a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036a0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	fa93 f2a3 	rbit	r2, r3
 80036aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036ae:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80036b2:	601a      	str	r2, [r3, #0]
  return result;
 80036b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036b8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80036bc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036be:	fab3 f383 	clz	r3, r3
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80036c8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	461a      	mov	r2, r3
 80036d0:	2301      	movs	r3, #1
 80036d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d4:	f7fe fdc2 	bl	800225c <HAL_GetTick>
 80036d8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036dc:	e009      	b.n	80036f2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036de:	f7fe fdbd 	bl	800225c <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e144      	b.n	800397c <HAL_RCC_OscConfig+0x106c>
 80036f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036f6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80036fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003700:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003704:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	fa93 f2a3 	rbit	r2, r3
 800370e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003712:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003716:	601a      	str	r2, [r3, #0]
  return result;
 8003718:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800371c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003720:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003722:	fab3 f383 	clz	r3, r3
 8003726:	b2db      	uxtb	r3, r3
 8003728:	095b      	lsrs	r3, r3, #5
 800372a:	b2db      	uxtb	r3, r3
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b01      	cmp	r3, #1
 8003734:	d102      	bne.n	800373c <HAL_RCC_OscConfig+0xe2c>
 8003736:	4b54      	ldr	r3, [pc, #336]	@ (8003888 <HAL_RCC_OscConfig+0xf78>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	e027      	b.n	800378c <HAL_RCC_OscConfig+0xe7c>
 800373c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003740:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003744:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003748:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800374e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	fa93 f2a3 	rbit	r2, r3
 8003758:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800375c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003766:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800376a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003774:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	fa93 f2a3 	rbit	r2, r3
 800377e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003782:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	4b3f      	ldr	r3, [pc, #252]	@ (8003888 <HAL_RCC_OscConfig+0xf78>)
 800378a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003790:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003794:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003798:	6011      	str	r1, [r2, #0]
 800379a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800379e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80037a2:	6812      	ldr	r2, [r2, #0]
 80037a4:	fa92 f1a2 	rbit	r1, r2
 80037a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037ac:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80037b0:	6011      	str	r1, [r2, #0]
  return result;
 80037b2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037b6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80037ba:	6812      	ldr	r2, [r2, #0]
 80037bc:	fab2 f282 	clz	r2, r2
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	f042 0220 	orr.w	r2, r2, #32
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	f002 021f 	and.w	r2, r2, #31
 80037cc:	2101      	movs	r1, #1
 80037ce:	fa01 f202 	lsl.w	r2, r1, r2
 80037d2:	4013      	ands	r3, r2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d082      	beq.n	80036de <HAL_RCC_OscConfig+0xdce>
 80037d8:	e0cf      	b.n	800397a <HAL_RCC_OscConfig+0x106a>
 80037da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037de:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80037e2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80037e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ec:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	fa93 f2a3 	rbit	r2, r3
 80037f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037fa:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80037fe:	601a      	str	r2, [r3, #0]
  return result;
 8003800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003804:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003808:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800380a:	fab3 f383 	clz	r3, r3
 800380e:	b2db      	uxtb	r3, r3
 8003810:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003814:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	461a      	mov	r2, r3
 800381c:	2300      	movs	r3, #0
 800381e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003820:	f7fe fd1c 	bl	800225c <HAL_GetTick>
 8003824:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003828:	e009      	b.n	800383e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800382a:	f7fe fd17 	bl	800225c <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e09e      	b.n	800397c <HAL_RCC_OscConfig+0x106c>
 800383e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003842:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003846:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800384a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003850:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	fa93 f2a3 	rbit	r2, r3
 800385a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800385e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003862:	601a      	str	r2, [r3, #0]
  return result;
 8003864:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003868:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800386c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800386e:	fab3 f383 	clz	r3, r3
 8003872:	b2db      	uxtb	r3, r3
 8003874:	095b      	lsrs	r3, r3, #5
 8003876:	b2db      	uxtb	r3, r3
 8003878:	f043 0301 	orr.w	r3, r3, #1
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b01      	cmp	r3, #1
 8003880:	d104      	bne.n	800388c <HAL_RCC_OscConfig+0xf7c>
 8003882:	4b01      	ldr	r3, [pc, #4]	@ (8003888 <HAL_RCC_OscConfig+0xf78>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	e029      	b.n	80038dc <HAL_RCC_OscConfig+0xfcc>
 8003888:	40021000 	.word	0x40021000
 800388c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003890:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003894:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003898:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800389e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	fa93 f2a3 	rbit	r2, r3
 80038a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ac:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038b6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80038ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038c4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	fa93 f2a3 	rbit	r2, r3
 80038ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038d2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003988 <HAL_RCC_OscConfig+0x1078>)
 80038da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038e0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80038e4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80038e8:	6011      	str	r1, [r2, #0]
 80038ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038ee:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80038f2:	6812      	ldr	r2, [r2, #0]
 80038f4:	fa92 f1a2 	rbit	r1, r2
 80038f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038fc:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003900:	6011      	str	r1, [r2, #0]
  return result;
 8003902:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003906:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800390a:	6812      	ldr	r2, [r2, #0]
 800390c:	fab2 f282 	clz	r2, r2
 8003910:	b2d2      	uxtb	r2, r2
 8003912:	f042 0220 	orr.w	r2, r2, #32
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	f002 021f 	and.w	r2, r2, #31
 800391c:	2101      	movs	r1, #1
 800391e:	fa01 f202 	lsl.w	r2, r1, r2
 8003922:	4013      	ands	r3, r2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d180      	bne.n	800382a <HAL_RCC_OscConfig+0xf1a>
 8003928:	e027      	b.n	800397a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800392a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800392e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e01e      	b.n	800397c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800393e:	4b12      	ldr	r3, [pc, #72]	@ (8003988 <HAL_RCC_OscConfig+0x1078>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003946:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800394a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800394e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003952:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	429a      	cmp	r2, r3
 800395c:	d10b      	bne.n	8003976 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800395e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003962:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003966:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800396a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003972:	429a      	cmp	r2, r3
 8003974:	d001      	beq.n	800397a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e000      	b.n	800397c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	40021000 	.word	0x40021000

0800398c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b09e      	sub	sp, #120	@ 0x78
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e162      	b.n	8003c6a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039a4:	4b90      	ldr	r3, [pc, #576]	@ (8003be8 <HAL_RCC_ClockConfig+0x25c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d910      	bls.n	80039d4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b2:	4b8d      	ldr	r3, [pc, #564]	@ (8003be8 <HAL_RCC_ClockConfig+0x25c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f023 0207 	bic.w	r2, r3, #7
 80039ba:	498b      	ldr	r1, [pc, #556]	@ (8003be8 <HAL_RCC_ClockConfig+0x25c>)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	4313      	orrs	r3, r2
 80039c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c2:	4b89      	ldr	r3, [pc, #548]	@ (8003be8 <HAL_RCC_ClockConfig+0x25c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d001      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e14a      	b.n	8003c6a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d008      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039e0:	4b82      	ldr	r3, [pc, #520]	@ (8003bec <HAL_RCC_ClockConfig+0x260>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	497f      	ldr	r1, [pc, #508]	@ (8003bec <HAL_RCC_ClockConfig+0x260>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 80dc 	beq.w	8003bb8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d13c      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xf6>
 8003a08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a0c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a10:	fa93 f3a3 	rbit	r3, r3
 8003a14:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003a16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a18:	fab3 f383 	clz	r3, r3
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	f043 0301 	orr.w	r3, r3, #1
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d102      	bne.n	8003a32 <HAL_RCC_ClockConfig+0xa6>
 8003a2c:	4b6f      	ldr	r3, [pc, #444]	@ (8003bec <HAL_RCC_ClockConfig+0x260>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	e00f      	b.n	8003a52 <HAL_RCC_ClockConfig+0xc6>
 8003a32:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a36:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a3a:	fa93 f3a3 	rbit	r3, r3
 8003a3e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a40:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a44:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a48:	fa93 f3a3 	rbit	r3, r3
 8003a4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a4e:	4b67      	ldr	r3, [pc, #412]	@ (8003bec <HAL_RCC_ClockConfig+0x260>)
 8003a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a52:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a56:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a5a:	fa92 f2a2 	rbit	r2, r2
 8003a5e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003a60:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003a62:	fab2 f282 	clz	r2, r2
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	f042 0220 	orr.w	r2, r2, #32
 8003a6c:	b2d2      	uxtb	r2, r2
 8003a6e:	f002 021f 	and.w	r2, r2, #31
 8003a72:	2101      	movs	r1, #1
 8003a74:	fa01 f202 	lsl.w	r2, r1, r2
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d17b      	bne.n	8003b76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e0f3      	b.n	8003c6a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d13c      	bne.n	8003b04 <HAL_RCC_ClockConfig+0x178>
 8003a8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a8e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a92:	fa93 f3a3 	rbit	r3, r3
 8003a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003a98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9a:	fab3 f383 	clz	r3, r3
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	095b      	lsrs	r3, r3, #5
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	f043 0301 	orr.w	r3, r3, #1
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d102      	bne.n	8003ab4 <HAL_RCC_ClockConfig+0x128>
 8003aae:	4b4f      	ldr	r3, [pc, #316]	@ (8003bec <HAL_RCC_ClockConfig+0x260>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	e00f      	b.n	8003ad4 <HAL_RCC_ClockConfig+0x148>
 8003ab4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003abc:	fa93 f3a3 	rbit	r3, r3
 8003ac0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ac2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ac6:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ac8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003aca:	fa93 f3a3 	rbit	r3, r3
 8003ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ad0:	4b46      	ldr	r3, [pc, #280]	@ (8003bec <HAL_RCC_ClockConfig+0x260>)
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ad8:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003ada:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003adc:	fa92 f2a2 	rbit	r2, r2
 8003ae0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003ae2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ae4:	fab2 f282 	clz	r2, r2
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	f042 0220 	orr.w	r2, r2, #32
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	f002 021f 	and.w	r2, r2, #31
 8003af4:	2101      	movs	r1, #1
 8003af6:	fa01 f202 	lsl.w	r2, r1, r2
 8003afa:	4013      	ands	r3, r2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d13a      	bne.n	8003b76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e0b2      	b.n	8003c6a <HAL_RCC_ClockConfig+0x2de>
 8003b04:	2302      	movs	r3, #2
 8003b06:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0a:	fa93 f3a3 	rbit	r3, r3
 8003b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b12:	fab3 f383 	clz	r3, r3
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	095b      	lsrs	r3, r3, #5
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	f043 0301 	orr.w	r3, r3, #1
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d102      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x1a0>
 8003b26:	4b31      	ldr	r3, [pc, #196]	@ (8003bec <HAL_RCC_ClockConfig+0x260>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	e00d      	b.n	8003b48 <HAL_RCC_ClockConfig+0x1bc>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b32:	fa93 f3a3 	rbit	r3, r3
 8003b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b38:	2302      	movs	r3, #2
 8003b3a:	623b      	str	r3, [r7, #32]
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	fa93 f3a3 	rbit	r3, r3
 8003b42:	61fb      	str	r3, [r7, #28]
 8003b44:	4b29      	ldr	r3, [pc, #164]	@ (8003bec <HAL_RCC_ClockConfig+0x260>)
 8003b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b48:	2202      	movs	r2, #2
 8003b4a:	61ba      	str	r2, [r7, #24]
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	fa92 f2a2 	rbit	r2, r2
 8003b52:	617a      	str	r2, [r7, #20]
  return result;
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	fab2 f282 	clz	r2, r2
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	f042 0220 	orr.w	r2, r2, #32
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	f002 021f 	and.w	r2, r2, #31
 8003b66:	2101      	movs	r1, #1
 8003b68:	fa01 f202 	lsl.w	r2, r1, r2
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e079      	b.n	8003c6a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b76:	4b1d      	ldr	r3, [pc, #116]	@ (8003bec <HAL_RCC_ClockConfig+0x260>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f023 0203 	bic.w	r2, r3, #3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	491a      	ldr	r1, [pc, #104]	@ (8003bec <HAL_RCC_ClockConfig+0x260>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b88:	f7fe fb68 	bl	800225c <HAL_GetTick>
 8003b8c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8e:	e00a      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b90:	f7fe fb64 	bl	800225c <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e061      	b.n	8003c6a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba6:	4b11      	ldr	r3, [pc, #68]	@ (8003bec <HAL_RCC_ClockConfig+0x260>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f003 020c 	and.w	r2, r3, #12
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d1eb      	bne.n	8003b90 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003be8 <HAL_RCC_ClockConfig+0x25c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d214      	bcs.n	8003bf0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc6:	4b08      	ldr	r3, [pc, #32]	@ (8003be8 <HAL_RCC_ClockConfig+0x25c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f023 0207 	bic.w	r2, r3, #7
 8003bce:	4906      	ldr	r1, [pc, #24]	@ (8003be8 <HAL_RCC_ClockConfig+0x25c>)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd6:	4b04      	ldr	r3, [pc, #16]	@ (8003be8 <HAL_RCC_ClockConfig+0x25c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d005      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e040      	b.n	8003c6a <HAL_RCC_ClockConfig+0x2de>
 8003be8:	40022000 	.word	0x40022000
 8003bec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d008      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8003c74 <HAL_RCC_ClockConfig+0x2e8>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	491a      	ldr	r1, [pc, #104]	@ (8003c74 <HAL_RCC_ClockConfig+0x2e8>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d009      	beq.n	8003c2e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c1a:	4b16      	ldr	r3, [pc, #88]	@ (8003c74 <HAL_RCC_ClockConfig+0x2e8>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	4912      	ldr	r1, [pc, #72]	@ (8003c74 <HAL_RCC_ClockConfig+0x2e8>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c2e:	f000 f829 	bl	8003c84 <HAL_RCC_GetSysClockFreq>
 8003c32:	4601      	mov	r1, r0
 8003c34:	4b0f      	ldr	r3, [pc, #60]	@ (8003c74 <HAL_RCC_ClockConfig+0x2e8>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c3c:	22f0      	movs	r2, #240	@ 0xf0
 8003c3e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	fa92 f2a2 	rbit	r2, r2
 8003c46:	60fa      	str	r2, [r7, #12]
  return result;
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	fab2 f282 	clz	r2, r2
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	40d3      	lsrs	r3, r2
 8003c52:	4a09      	ldr	r2, [pc, #36]	@ (8003c78 <HAL_RCC_ClockConfig+0x2ec>)
 8003c54:	5cd3      	ldrb	r3, [r2, r3]
 8003c56:	fa21 f303 	lsr.w	r3, r1, r3
 8003c5a:	4a08      	ldr	r2, [pc, #32]	@ (8003c7c <HAL_RCC_ClockConfig+0x2f0>)
 8003c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003c5e:	4b08      	ldr	r3, [pc, #32]	@ (8003c80 <HAL_RCC_ClockConfig+0x2f4>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fe fab6 	bl	80021d4 <HAL_InitTick>
  
  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3778      	adds	r7, #120	@ 0x78
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40021000 	.word	0x40021000
 8003c78:	08007468 	.word	0x08007468
 8003c7c:	20000004 	.word	0x20000004
 8003c80:	20000008 	.word	0x20000008

08003c84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b08b      	sub	sp, #44	@ 0x2c
 8003c88:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61fb      	str	r3, [r7, #28]
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61bb      	str	r3, [r7, #24]
 8003c92:	2300      	movs	r3, #0
 8003c94:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003c9e:	4b29      	ldr	r3, [pc, #164]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	f003 030c 	and.w	r3, r3, #12
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d002      	beq.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x30>
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d003      	beq.n	8003cba <HAL_RCC_GetSysClockFreq+0x36>
 8003cb2:	e03c      	b.n	8003d2e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cb4:	4b24      	ldr	r3, [pc, #144]	@ (8003d48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003cb6:	623b      	str	r3, [r7, #32]
      break;
 8003cb8:	e03c      	b.n	8003d34 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003cc0:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8003cc4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	fa92 f2a2 	rbit	r2, r2
 8003ccc:	607a      	str	r2, [r7, #4]
  return result;
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	fab2 f282 	clz	r2, r2
 8003cd4:	b2d2      	uxtb	r2, r2
 8003cd6:	40d3      	lsrs	r3, r2
 8003cd8:	4a1c      	ldr	r2, [pc, #112]	@ (8003d4c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003cda:	5cd3      	ldrb	r3, [r2, r3]
 8003cdc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003cde:	4b19      	ldr	r3, [pc, #100]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	220f      	movs	r2, #15
 8003ce8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	fa92 f2a2 	rbit	r2, r2
 8003cf0:	60fa      	str	r2, [r7, #12]
  return result;
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	fab2 f282 	clz	r2, r2
 8003cf8:	b2d2      	uxtb	r2, r2
 8003cfa:	40d3      	lsrs	r3, r2
 8003cfc:	4a14      	ldr	r2, [pc, #80]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003cfe:	5cd3      	ldrb	r3, [r2, r3]
 8003d00:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d008      	beq.n	8003d1e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d0c:	4a0e      	ldr	r2, [pc, #56]	@ (8003d48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	fb02 f303 	mul.w	r3, r2, r3
 8003d1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d1c:	e004      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	4a0c      	ldr	r2, [pc, #48]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d22:	fb02 f303 	mul.w	r3, r2, r3
 8003d26:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2a:	623b      	str	r3, [r7, #32]
      break;
 8003d2c:	e002      	b.n	8003d34 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d2e:	4b06      	ldr	r3, [pc, #24]	@ (8003d48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d30:	623b      	str	r3, [r7, #32]
      break;
 8003d32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d34:	6a3b      	ldr	r3, [r7, #32]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	372c      	adds	r7, #44	@ 0x2c
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	40021000 	.word	0x40021000
 8003d48:	007a1200 	.word	0x007a1200
 8003d4c:	08007480 	.word	0x08007480
 8003d50:	08007490 	.word	0x08007490
 8003d54:	003d0900 	.word	0x003d0900

08003d58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d5c:	4b03      	ldr	r3, [pc, #12]	@ (8003d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	20000004 	.word	0x20000004

08003d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003d76:	f7ff ffef 	bl	8003d58 <HAL_RCC_GetHCLKFreq>
 8003d7a:	4601      	mov	r1, r0
 8003d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003dac <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003d84:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003d88:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	fa92 f2a2 	rbit	r2, r2
 8003d90:	603a      	str	r2, [r7, #0]
  return result;
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	fab2 f282 	clz	r2, r2
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	40d3      	lsrs	r3, r2
 8003d9c:	4a04      	ldr	r2, [pc, #16]	@ (8003db0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003d9e:	5cd3      	ldrb	r3, [r2, r3]
 8003da0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003da4:	4618      	mov	r0, r3
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40021000 	.word	0x40021000
 8003db0:	08007478 	.word	0x08007478

08003db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003dba:	f7ff ffcd 	bl	8003d58 <HAL_RCC_GetHCLKFreq>
 8003dbe:	4601      	mov	r1, r0
 8003dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003df0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003dc8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003dcc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	fa92 f2a2 	rbit	r2, r2
 8003dd4:	603a      	str	r2, [r7, #0]
  return result;
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	fab2 f282 	clz	r2, r2
 8003ddc:	b2d2      	uxtb	r2, r2
 8003dde:	40d3      	lsrs	r3, r2
 8003de0:	4a04      	ldr	r2, [pc, #16]	@ (8003df4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003de2:	5cd3      	ldrb	r3, [r2, r3]
 8003de4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003de8:	4618      	mov	r0, r3
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40021000 	.word	0x40021000
 8003df4:	08007478 	.word	0x08007478

08003df8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b092      	sub	sp, #72	@ 0x48
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 80d4 	beq.w	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e1c:	4b4e      	ldr	r3, [pc, #312]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10e      	bne.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e28:	4b4b      	ldr	r3, [pc, #300]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e2a:	69db      	ldr	r3, [r3, #28]
 8003e2c:	4a4a      	ldr	r2, [pc, #296]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e32:	61d3      	str	r3, [r2, #28]
 8003e34:	4b48      	ldr	r3, [pc, #288]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e3c:	60bb      	str	r3, [r7, #8]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e40:	2301      	movs	r3, #1
 8003e42:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e46:	4b45      	ldr	r3, [pc, #276]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d118      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e52:	4b42      	ldr	r3, [pc, #264]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a41      	ldr	r2, [pc, #260]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e5c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e5e:	f7fe f9fd 	bl	800225c <HAL_GetTick>
 8003e62:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e64:	e008      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e66:	f7fe f9f9 	bl	800225c <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b64      	cmp	r3, #100	@ 0x64
 8003e72:	d901      	bls.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e14b      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e78:	4b38      	ldr	r3, [pc, #224]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0f0      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e84:	4b34      	ldr	r3, [pc, #208]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 8084 	beq.w	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e9e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d07c      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ea4:	4b2c      	ldr	r3, [pc, #176]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003eae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003eb2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb6:	fa93 f3a3 	rbit	r3, r3
 8003eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ebe:	fab3 f383 	clz	r3, r3
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	4b26      	ldr	r3, [pc, #152]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ec8:	4413      	add	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	461a      	mov	r2, r3
 8003ece:	2301      	movs	r3, #1
 8003ed0:	6013      	str	r3, [r2, #0]
 8003ed2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eda:	fa93 f3a3 	rbit	r3, r3
 8003ede:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ee2:	fab3 f383 	clz	r3, r3
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	461a      	mov	r2, r3
 8003eea:	4b1d      	ldr	r3, [pc, #116]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ef6:	4a18      	ldr	r2, [pc, #96]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003efa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003efc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d04b      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f06:	f7fe f9a9 	bl	800225c <HAL_GetTick>
 8003f0a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0c:	e00a      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f0e:	f7fe f9a5 	bl	800225c <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e0f5      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003f24:	2302      	movs	r3, #2
 8003f26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f2a:	fa93 f3a3 	rbit	r3, r3
 8003f2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f30:	2302      	movs	r3, #2
 8003f32:	623b      	str	r3, [r7, #32]
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	fa93 f3a3 	rbit	r3, r3
 8003f3a:	61fb      	str	r3, [r7, #28]
  return result;
 8003f3c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f3e:	fab3 f383 	clz	r3, r3
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	095b      	lsrs	r3, r3, #5
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	f043 0302 	orr.w	r3, r3, #2
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d108      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003f52:	4b01      	ldr	r3, [pc, #4]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	e00d      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	40007000 	.word	0x40007000
 8003f60:	10908100 	.word	0x10908100
 8003f64:	2302      	movs	r3, #2
 8003f66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	fa93 f3a3 	rbit	r3, r3
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	4b69      	ldr	r3, [pc, #420]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f74:	2202      	movs	r2, #2
 8003f76:	613a      	str	r2, [r7, #16]
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	fa92 f2a2 	rbit	r2, r2
 8003f7e:	60fa      	str	r2, [r7, #12]
  return result;
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	fab2 f282 	clz	r2, r2
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f8c:	b2d2      	uxtb	r2, r2
 8003f8e:	f002 021f 	and.w	r2, r2, #31
 8003f92:	2101      	movs	r1, #1
 8003f94:	fa01 f202 	lsl.w	r2, r1, r2
 8003f98:	4013      	ands	r3, r2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0b7      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003f9e:	4b5e      	ldr	r3, [pc, #376]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	495b      	ldr	r1, [pc, #364]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003fb0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d105      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb8:	4b57      	ldr	r3, [pc, #348]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	4a56      	ldr	r2, [pc, #344]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fc2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d008      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fd0:	4b51      	ldr	r3, [pc, #324]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd4:	f023 0203 	bic.w	r2, r3, #3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	494e      	ldr	r1, [pc, #312]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0320 	and.w	r3, r3, #32
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d008      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fee:	4b4a      	ldr	r3, [pc, #296]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff2:	f023 0210 	bic.w	r2, r3, #16
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	4947      	ldr	r1, [pc, #284]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d008      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800400c:	4b42      	ldr	r3, [pc, #264]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004018:	493f      	ldr	r1, [pc, #252]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800401a:	4313      	orrs	r3, r2
 800401c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004026:	2b00      	cmp	r3, #0
 8004028:	d008      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800402a:	4b3b      	ldr	r3, [pc, #236]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800402c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402e:	f023 0220 	bic.w	r2, r3, #32
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	4938      	ldr	r1, [pc, #224]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004038:	4313      	orrs	r3, r2
 800403a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d008      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004048:	4b33      	ldr	r3, [pc, #204]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800404a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	4930      	ldr	r1, [pc, #192]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004056:	4313      	orrs	r3, r2
 8004058:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004062:	2b00      	cmp	r3, #0
 8004064:	d008      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004066:	4b2c      	ldr	r3, [pc, #176]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	4929      	ldr	r1, [pc, #164]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004074:	4313      	orrs	r3, r2
 8004076:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004080:	2b00      	cmp	r3, #0
 8004082:	d008      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004084:	4b24      	ldr	r3, [pc, #144]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004088:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	4921      	ldr	r1, [pc, #132]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004092:	4313      	orrs	r3, r2
 8004094:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d008      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80040a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	491a      	ldr	r1, [pc, #104]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d008      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80040c0:	4b15      	ldr	r3, [pc, #84]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040cc:	4912      	ldr	r1, [pc, #72]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d008      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80040de:	4b0e      	ldr	r3, [pc, #56]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ea:	490b      	ldr	r1, [pc, #44]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d008      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80040fc:	4b06      	ldr	r3, [pc, #24]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004100:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004108:	4903      	ldr	r1, [pc, #12]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800410a:	4313      	orrs	r3, r2
 800410c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3748      	adds	r7, #72	@ 0x48
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40021000 	.word	0x40021000

0800411c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e049      	b.n	80041c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d106      	bne.n	8004148 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7fd fd16 	bl	8001b74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	3304      	adds	r3, #4
 8004158:	4619      	mov	r1, r3
 800415a:	4610      	mov	r0, r2
 800415c:	f000 fcf0 	bl	8004b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
	...

080041cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d001      	beq.n	80041e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e033      	b.n	800424c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2202      	movs	r2, #2
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a19      	ldr	r2, [pc, #100]	@ (8004258 <HAL_TIM_Base_Start+0x8c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d009      	beq.n	800420a <HAL_TIM_Base_Start+0x3e>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041fe:	d004      	beq.n	800420a <HAL_TIM_Base_Start+0x3e>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a15      	ldr	r2, [pc, #84]	@ (800425c <HAL_TIM_Base_Start+0x90>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d115      	bne.n	8004236 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	4b13      	ldr	r3, [pc, #76]	@ (8004260 <HAL_TIM_Base_Start+0x94>)
 8004212:	4013      	ands	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2b06      	cmp	r3, #6
 800421a:	d015      	beq.n	8004248 <HAL_TIM_Base_Start+0x7c>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004222:	d011      	beq.n	8004248 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0201 	orr.w	r2, r2, #1
 8004232:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004234:	e008      	b.n	8004248 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f042 0201 	orr.w	r2, r2, #1
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	e000      	b.n	800424a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004248:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	40012c00 	.word	0x40012c00
 800425c:	40014000 	.word	0x40014000
 8004260:	00010007 	.word	0x00010007

08004264 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e049      	b.n	800430a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d106      	bne.n	8004290 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7fd fcd0 	bl	8001c30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3304      	adds	r3, #4
 80042a0:	4619      	mov	r1, r3
 80042a2:	4610      	mov	r0, r2
 80042a4:	f000 fc4c 	bl	8004b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d109      	bne.n	8004338 <HAL_TIM_PWM_Start+0x24>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b01      	cmp	r3, #1
 800432e:	bf14      	ite	ne
 8004330:	2301      	movne	r3, #1
 8004332:	2300      	moveq	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	e03c      	b.n	80043b2 <HAL_TIM_PWM_Start+0x9e>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	2b04      	cmp	r3, #4
 800433c:	d109      	bne.n	8004352 <HAL_TIM_PWM_Start+0x3e>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b01      	cmp	r3, #1
 8004348:	bf14      	ite	ne
 800434a:	2301      	movne	r3, #1
 800434c:	2300      	moveq	r3, #0
 800434e:	b2db      	uxtb	r3, r3
 8004350:	e02f      	b.n	80043b2 <HAL_TIM_PWM_Start+0x9e>
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b08      	cmp	r3, #8
 8004356:	d109      	bne.n	800436c <HAL_TIM_PWM_Start+0x58>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b01      	cmp	r3, #1
 8004362:	bf14      	ite	ne
 8004364:	2301      	movne	r3, #1
 8004366:	2300      	moveq	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	e022      	b.n	80043b2 <HAL_TIM_PWM_Start+0x9e>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	2b0c      	cmp	r3, #12
 8004370:	d109      	bne.n	8004386 <HAL_TIM_PWM_Start+0x72>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b01      	cmp	r3, #1
 800437c:	bf14      	ite	ne
 800437e:	2301      	movne	r3, #1
 8004380:	2300      	moveq	r3, #0
 8004382:	b2db      	uxtb	r3, r3
 8004384:	e015      	b.n	80043b2 <HAL_TIM_PWM_Start+0x9e>
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b10      	cmp	r3, #16
 800438a:	d109      	bne.n	80043a0 <HAL_TIM_PWM_Start+0x8c>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b01      	cmp	r3, #1
 8004396:	bf14      	ite	ne
 8004398:	2301      	movne	r3, #1
 800439a:	2300      	moveq	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	e008      	b.n	80043b2 <HAL_TIM_PWM_Start+0x9e>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	bf14      	ite	ne
 80043ac:	2301      	movne	r3, #1
 80043ae:	2300      	moveq	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e083      	b.n	80044c2 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d104      	bne.n	80043ca <HAL_TIM_PWM_Start+0xb6>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043c8:	e023      	b.n	8004412 <HAL_TIM_PWM_Start+0xfe>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	d104      	bne.n	80043da <HAL_TIM_PWM_Start+0xc6>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043d8:	e01b      	b.n	8004412 <HAL_TIM_PWM_Start+0xfe>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d104      	bne.n	80043ea <HAL_TIM_PWM_Start+0xd6>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043e8:	e013      	b.n	8004412 <HAL_TIM_PWM_Start+0xfe>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b0c      	cmp	r3, #12
 80043ee:	d104      	bne.n	80043fa <HAL_TIM_PWM_Start+0xe6>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2202      	movs	r2, #2
 80043f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043f8:	e00b      	b.n	8004412 <HAL_TIM_PWM_Start+0xfe>
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2b10      	cmp	r3, #16
 80043fe:	d104      	bne.n	800440a <HAL_TIM_PWM_Start+0xf6>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004408:	e003      	b.n	8004412 <HAL_TIM_PWM_Start+0xfe>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2202      	movs	r2, #2
 800440e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2201      	movs	r2, #1
 8004418:	6839      	ldr	r1, [r7, #0]
 800441a:	4618      	mov	r0, r3
 800441c:	f000 ff3e 	bl	800529c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a29      	ldr	r2, [pc, #164]	@ (80044cc <HAL_TIM_PWM_Start+0x1b8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d00e      	beq.n	8004448 <HAL_TIM_PWM_Start+0x134>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a28      	ldr	r2, [pc, #160]	@ (80044d0 <HAL_TIM_PWM_Start+0x1bc>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d009      	beq.n	8004448 <HAL_TIM_PWM_Start+0x134>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a26      	ldr	r2, [pc, #152]	@ (80044d4 <HAL_TIM_PWM_Start+0x1c0>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d004      	beq.n	8004448 <HAL_TIM_PWM_Start+0x134>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a25      	ldr	r2, [pc, #148]	@ (80044d8 <HAL_TIM_PWM_Start+0x1c4>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d101      	bne.n	800444c <HAL_TIM_PWM_Start+0x138>
 8004448:	2301      	movs	r3, #1
 800444a:	e000      	b.n	800444e <HAL_TIM_PWM_Start+0x13a>
 800444c:	2300      	movs	r3, #0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d007      	beq.n	8004462 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004460:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a19      	ldr	r2, [pc, #100]	@ (80044cc <HAL_TIM_PWM_Start+0x1b8>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d009      	beq.n	8004480 <HAL_TIM_PWM_Start+0x16c>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004474:	d004      	beq.n	8004480 <HAL_TIM_PWM_Start+0x16c>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a15      	ldr	r2, [pc, #84]	@ (80044d0 <HAL_TIM_PWM_Start+0x1bc>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d115      	bne.n	80044ac <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	4b15      	ldr	r3, [pc, #84]	@ (80044dc <HAL_TIM_PWM_Start+0x1c8>)
 8004488:	4013      	ands	r3, r2
 800448a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2b06      	cmp	r3, #6
 8004490:	d015      	beq.n	80044be <HAL_TIM_PWM_Start+0x1aa>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004498:	d011      	beq.n	80044be <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f042 0201 	orr.w	r2, r2, #1
 80044a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044aa:	e008      	b.n	80044be <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0201 	orr.w	r2, r2, #1
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	e000      	b.n	80044c0 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	40012c00 	.word	0x40012c00
 80044d0:	40014000 	.word	0x40014000
 80044d4:	40014400 	.word	0x40014400
 80044d8:	40014800 	.word	0x40014800
 80044dc:	00010007 	.word	0x00010007

080044e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d122      	bne.n	800453c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b02      	cmp	r3, #2
 8004502:	d11b      	bne.n	800453c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f06f 0202 	mvn.w	r2, #2
 800450c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 faed 	bl	8004b02 <HAL_TIM_IC_CaptureCallback>
 8004528:	e005      	b.n	8004536 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fadf 	bl	8004aee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 faf0 	bl	8004b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f003 0304 	and.w	r3, r3, #4
 8004546:	2b04      	cmp	r3, #4
 8004548:	d122      	bne.n	8004590 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b04      	cmp	r3, #4
 8004556:	d11b      	bne.n	8004590 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f06f 0204 	mvn.w	r2, #4
 8004560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2202      	movs	r2, #2
 8004566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 fac3 	bl	8004b02 <HAL_TIM_IC_CaptureCallback>
 800457c:	e005      	b.n	800458a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fab5 	bl	8004aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 fac6 	bl	8004b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0308 	and.w	r3, r3, #8
 800459a:	2b08      	cmp	r3, #8
 800459c:	d122      	bne.n	80045e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f003 0308 	and.w	r3, r3, #8
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d11b      	bne.n	80045e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f06f 0208 	mvn.w	r2, #8
 80045b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2204      	movs	r2, #4
 80045ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 fa99 	bl	8004b02 <HAL_TIM_IC_CaptureCallback>
 80045d0:	e005      	b.n	80045de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 fa8b 	bl	8004aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 fa9c 	bl	8004b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0310 	and.w	r3, r3, #16
 80045ee:	2b10      	cmp	r3, #16
 80045f0:	d122      	bne.n	8004638 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f003 0310 	and.w	r3, r3, #16
 80045fc:	2b10      	cmp	r3, #16
 80045fe:	d11b      	bne.n	8004638 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0210 	mvn.w	r2, #16
 8004608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2208      	movs	r2, #8
 800460e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fa6f 	bl	8004b02 <HAL_TIM_IC_CaptureCallback>
 8004624:	e005      	b.n	8004632 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 fa61 	bl	8004aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fa72 	bl	8004b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b01      	cmp	r3, #1
 8004644:	d10e      	bne.n	8004664 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b01      	cmp	r3, #1
 8004652:	d107      	bne.n	8004664 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f06f 0201 	mvn.w	r2, #1
 800465c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 fa3b 	bl	8004ada <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800466e:	2b80      	cmp	r3, #128	@ 0x80
 8004670:	d10e      	bne.n	8004690 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800467c:	2b80      	cmp	r3, #128	@ 0x80
 800467e:	d107      	bne.n	8004690 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 ff14 	bl	80054b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800469a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800469e:	d10e      	bne.n	80046be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046aa:	2b80      	cmp	r3, #128	@ 0x80
 80046ac:	d107      	bne.n	80046be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80046b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 ff07 	bl	80054cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046c8:	2b40      	cmp	r3, #64	@ 0x40
 80046ca:	d10e      	bne.n	80046ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046d6:	2b40      	cmp	r3, #64	@ 0x40
 80046d8:	d107      	bne.n	80046ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80046e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 fa20 	bl	8004b2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	f003 0320 	and.w	r3, r3, #32
 80046f4:	2b20      	cmp	r3, #32
 80046f6:	d10e      	bne.n	8004716 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f003 0320 	and.w	r3, r3, #32
 8004702:	2b20      	cmp	r3, #32
 8004704:	d107      	bne.n	8004716 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f06f 0220 	mvn.w	r2, #32
 800470e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 fec7 	bl	80054a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004716:	bf00      	nop
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800472c:	2300      	movs	r3, #0
 800472e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004736:	2b01      	cmp	r3, #1
 8004738:	d101      	bne.n	800473e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800473a:	2302      	movs	r3, #2
 800473c:	e0ff      	b.n	800493e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b14      	cmp	r3, #20
 800474a:	f200 80f0 	bhi.w	800492e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800474e:	a201      	add	r2, pc, #4	@ (adr r2, 8004754 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004754:	080047a9 	.word	0x080047a9
 8004758:	0800492f 	.word	0x0800492f
 800475c:	0800492f 	.word	0x0800492f
 8004760:	0800492f 	.word	0x0800492f
 8004764:	080047e9 	.word	0x080047e9
 8004768:	0800492f 	.word	0x0800492f
 800476c:	0800492f 	.word	0x0800492f
 8004770:	0800492f 	.word	0x0800492f
 8004774:	0800482b 	.word	0x0800482b
 8004778:	0800492f 	.word	0x0800492f
 800477c:	0800492f 	.word	0x0800492f
 8004780:	0800492f 	.word	0x0800492f
 8004784:	0800486b 	.word	0x0800486b
 8004788:	0800492f 	.word	0x0800492f
 800478c:	0800492f 	.word	0x0800492f
 8004790:	0800492f 	.word	0x0800492f
 8004794:	080048ad 	.word	0x080048ad
 8004798:	0800492f 	.word	0x0800492f
 800479c:	0800492f 	.word	0x0800492f
 80047a0:	0800492f 	.word	0x0800492f
 80047a4:	080048ed 	.word	0x080048ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68b9      	ldr	r1, [r7, #8]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 fa34 	bl	8004c1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699a      	ldr	r2, [r3, #24]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0208 	orr.w	r2, r2, #8
 80047c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	699a      	ldr	r2, [r3, #24]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0204 	bic.w	r2, r2, #4
 80047d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6999      	ldr	r1, [r3, #24]
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	691a      	ldr	r2, [r3, #16]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	619a      	str	r2, [r3, #24]
      break;
 80047e6:	e0a5      	b.n	8004934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68b9      	ldr	r1, [r7, #8]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fa9a 	bl	8004d28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	699a      	ldr	r2, [r3, #24]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004802:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	699a      	ldr	r2, [r3, #24]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004812:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6999      	ldr	r1, [r3, #24]
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	021a      	lsls	r2, r3, #8
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	619a      	str	r2, [r3, #24]
      break;
 8004828:	e084      	b.n	8004934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68b9      	ldr	r1, [r7, #8]
 8004830:	4618      	mov	r0, r3
 8004832:	f000 faf9 	bl	8004e28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	69da      	ldr	r2, [r3, #28]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f042 0208 	orr.w	r2, r2, #8
 8004844:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	69da      	ldr	r2, [r3, #28]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0204 	bic.w	r2, r2, #4
 8004854:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	69d9      	ldr	r1, [r3, #28]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	691a      	ldr	r2, [r3, #16]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	61da      	str	r2, [r3, #28]
      break;
 8004868:	e064      	b.n	8004934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68b9      	ldr	r1, [r7, #8]
 8004870:	4618      	mov	r0, r3
 8004872:	f000 fb57 	bl	8004f24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	69da      	ldr	r2, [r3, #28]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004884:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	69da      	ldr	r2, [r3, #28]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004894:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	69d9      	ldr	r1, [r3, #28]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	021a      	lsls	r2, r3, #8
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	61da      	str	r2, [r3, #28]
      break;
 80048aa:	e043      	b.n	8004934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68b9      	ldr	r1, [r7, #8]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 fb9a 	bl	8004fec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0208 	orr.w	r2, r2, #8
 80048c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0204 	bic.w	r2, r2, #4
 80048d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	691a      	ldr	r2, [r3, #16]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80048ea:	e023      	b.n	8004934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68b9      	ldr	r1, [r7, #8]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 fbd8 	bl	80050a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004906:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004916:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	021a      	lsls	r2, r3, #8
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	430a      	orrs	r2, r1
 800492a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800492c:	e002      	b.n	8004934 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	75fb      	strb	r3, [r7, #23]
      break;
 8004932:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800493c:	7dfb      	ldrb	r3, [r7, #23]
}
 800493e:	4618      	mov	r0, r3
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop

08004948 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004952:	2300      	movs	r3, #0
 8004954:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800495c:	2b01      	cmp	r3, #1
 800495e:	d101      	bne.n	8004964 <HAL_TIM_ConfigClockSource+0x1c>
 8004960:	2302      	movs	r3, #2
 8004962:	e0b6      	b.n	8004ad2 <HAL_TIM_ConfigClockSource+0x18a>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004982:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004986:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800498e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049a0:	d03e      	beq.n	8004a20 <HAL_TIM_ConfigClockSource+0xd8>
 80049a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049a6:	f200 8087 	bhi.w	8004ab8 <HAL_TIM_ConfigClockSource+0x170>
 80049aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049ae:	f000 8086 	beq.w	8004abe <HAL_TIM_ConfigClockSource+0x176>
 80049b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049b6:	d87f      	bhi.n	8004ab8 <HAL_TIM_ConfigClockSource+0x170>
 80049b8:	2b70      	cmp	r3, #112	@ 0x70
 80049ba:	d01a      	beq.n	80049f2 <HAL_TIM_ConfigClockSource+0xaa>
 80049bc:	2b70      	cmp	r3, #112	@ 0x70
 80049be:	d87b      	bhi.n	8004ab8 <HAL_TIM_ConfigClockSource+0x170>
 80049c0:	2b60      	cmp	r3, #96	@ 0x60
 80049c2:	d050      	beq.n	8004a66 <HAL_TIM_ConfigClockSource+0x11e>
 80049c4:	2b60      	cmp	r3, #96	@ 0x60
 80049c6:	d877      	bhi.n	8004ab8 <HAL_TIM_ConfigClockSource+0x170>
 80049c8:	2b50      	cmp	r3, #80	@ 0x50
 80049ca:	d03c      	beq.n	8004a46 <HAL_TIM_ConfigClockSource+0xfe>
 80049cc:	2b50      	cmp	r3, #80	@ 0x50
 80049ce:	d873      	bhi.n	8004ab8 <HAL_TIM_ConfigClockSource+0x170>
 80049d0:	2b40      	cmp	r3, #64	@ 0x40
 80049d2:	d058      	beq.n	8004a86 <HAL_TIM_ConfigClockSource+0x13e>
 80049d4:	2b40      	cmp	r3, #64	@ 0x40
 80049d6:	d86f      	bhi.n	8004ab8 <HAL_TIM_ConfigClockSource+0x170>
 80049d8:	2b30      	cmp	r3, #48	@ 0x30
 80049da:	d064      	beq.n	8004aa6 <HAL_TIM_ConfigClockSource+0x15e>
 80049dc:	2b30      	cmp	r3, #48	@ 0x30
 80049de:	d86b      	bhi.n	8004ab8 <HAL_TIM_ConfigClockSource+0x170>
 80049e0:	2b20      	cmp	r3, #32
 80049e2:	d060      	beq.n	8004aa6 <HAL_TIM_ConfigClockSource+0x15e>
 80049e4:	2b20      	cmp	r3, #32
 80049e6:	d867      	bhi.n	8004ab8 <HAL_TIM_ConfigClockSource+0x170>
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d05c      	beq.n	8004aa6 <HAL_TIM_ConfigClockSource+0x15e>
 80049ec:	2b10      	cmp	r3, #16
 80049ee:	d05a      	beq.n	8004aa6 <HAL_TIM_ConfigClockSource+0x15e>
 80049f0:	e062      	b.n	8004ab8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a02:	f000 fc2b 	bl	800525c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	609a      	str	r2, [r3, #8]
      break;
 8004a1e:	e04f      	b.n	8004ac0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a30:	f000 fc14 	bl	800525c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689a      	ldr	r2, [r3, #8]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a42:	609a      	str	r2, [r3, #8]
      break;
 8004a44:	e03c      	b.n	8004ac0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a52:	461a      	mov	r2, r3
 8004a54:	f000 fb88 	bl	8005168 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2150      	movs	r1, #80	@ 0x50
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 fbe1 	bl	8005226 <TIM_ITRx_SetConfig>
      break;
 8004a64:	e02c      	b.n	8004ac0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a72:	461a      	mov	r2, r3
 8004a74:	f000 fba7 	bl	80051c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2160      	movs	r1, #96	@ 0x60
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 fbd1 	bl	8005226 <TIM_ITRx_SetConfig>
      break;
 8004a84:	e01c      	b.n	8004ac0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a92:	461a      	mov	r2, r3
 8004a94:	f000 fb68 	bl	8005168 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2140      	movs	r1, #64	@ 0x40
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 fbc1 	bl	8005226 <TIM_ITRx_SetConfig>
      break;
 8004aa4:	e00c      	b.n	8004ac0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	f000 fbb8 	bl	8005226 <TIM_ITRx_SetConfig>
      break;
 8004ab6:	e003      	b.n	8004ac0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	73fb      	strb	r3, [r7, #15]
      break;
 8004abc:	e000      	b.n	8004ac0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004abe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
	...

08004b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a2e      	ldr	r2, [pc, #184]	@ (8004c0c <TIM_Base_SetConfig+0xcc>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d003      	beq.n	8004b60 <TIM_Base_SetConfig+0x20>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b5e:	d108      	bne.n	8004b72 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a25      	ldr	r2, [pc, #148]	@ (8004c0c <TIM_Base_SetConfig+0xcc>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d00f      	beq.n	8004b9a <TIM_Base_SetConfig+0x5a>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b80:	d00b      	beq.n	8004b9a <TIM_Base_SetConfig+0x5a>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a22      	ldr	r2, [pc, #136]	@ (8004c10 <TIM_Base_SetConfig+0xd0>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d007      	beq.n	8004b9a <TIM_Base_SetConfig+0x5a>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a21      	ldr	r2, [pc, #132]	@ (8004c14 <TIM_Base_SetConfig+0xd4>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d003      	beq.n	8004b9a <TIM_Base_SetConfig+0x5a>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a20      	ldr	r2, [pc, #128]	@ (8004c18 <TIM_Base_SetConfig+0xd8>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d108      	bne.n	8004bac <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a0e      	ldr	r2, [pc, #56]	@ (8004c0c <TIM_Base_SetConfig+0xcc>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d00b      	beq.n	8004bf0 <TIM_Base_SetConfig+0xb0>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a0d      	ldr	r2, [pc, #52]	@ (8004c10 <TIM_Base_SetConfig+0xd0>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d007      	beq.n	8004bf0 <TIM_Base_SetConfig+0xb0>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a0c      	ldr	r2, [pc, #48]	@ (8004c14 <TIM_Base_SetConfig+0xd4>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d003      	beq.n	8004bf0 <TIM_Base_SetConfig+0xb0>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a0b      	ldr	r2, [pc, #44]	@ (8004c18 <TIM_Base_SetConfig+0xd8>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d103      	bne.n	8004bf8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	691a      	ldr	r2, [r3, #16]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	615a      	str	r2, [r3, #20]
}
 8004bfe:	bf00      	nop
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	40012c00 	.word	0x40012c00
 8004c10:	40014000 	.word	0x40014000
 8004c14:	40014400 	.word	0x40014400
 8004c18:	40014800 	.word	0x40014800

08004c1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b087      	sub	sp, #28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	f023 0201 	bic.w	r2, r3, #1
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 0303 	bic.w	r3, r3, #3
 8004c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f023 0302 	bic.w	r3, r3, #2
 8004c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a28      	ldr	r2, [pc, #160]	@ (8004d18 <TIM_OC1_SetConfig+0xfc>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d00b      	beq.n	8004c94 <TIM_OC1_SetConfig+0x78>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a27      	ldr	r2, [pc, #156]	@ (8004d1c <TIM_OC1_SetConfig+0x100>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d007      	beq.n	8004c94 <TIM_OC1_SetConfig+0x78>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a26      	ldr	r2, [pc, #152]	@ (8004d20 <TIM_OC1_SetConfig+0x104>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d003      	beq.n	8004c94 <TIM_OC1_SetConfig+0x78>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a25      	ldr	r2, [pc, #148]	@ (8004d24 <TIM_OC1_SetConfig+0x108>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d10c      	bne.n	8004cae <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	f023 0308 	bic.w	r3, r3, #8
 8004c9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f023 0304 	bic.w	r3, r3, #4
 8004cac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a19      	ldr	r2, [pc, #100]	@ (8004d18 <TIM_OC1_SetConfig+0xfc>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d00b      	beq.n	8004cce <TIM_OC1_SetConfig+0xb2>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a18      	ldr	r2, [pc, #96]	@ (8004d1c <TIM_OC1_SetConfig+0x100>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d007      	beq.n	8004cce <TIM_OC1_SetConfig+0xb2>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a17      	ldr	r2, [pc, #92]	@ (8004d20 <TIM_OC1_SetConfig+0x104>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d003      	beq.n	8004cce <TIM_OC1_SetConfig+0xb2>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a16      	ldr	r2, [pc, #88]	@ (8004d24 <TIM_OC1_SetConfig+0x108>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d111      	bne.n	8004cf2 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	621a      	str	r2, [r3, #32]
}
 8004d0c:	bf00      	nop
 8004d0e:	371c      	adds	r7, #28
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	40012c00 	.word	0x40012c00
 8004d1c:	40014000 	.word	0x40014000
 8004d20:	40014400 	.word	0x40014400
 8004d24:	40014800 	.word	0x40014800

08004d28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b087      	sub	sp, #28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	f023 0210 	bic.w	r2, r3, #16
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	021b      	lsls	r3, r3, #8
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f023 0320 	bic.w	r3, r3, #32
 8004d76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	011b      	lsls	r3, r3, #4
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a24      	ldr	r2, [pc, #144]	@ (8004e18 <TIM_OC2_SetConfig+0xf0>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d10d      	bne.n	8004da8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	011b      	lsls	r3, r3, #4
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004da6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a1b      	ldr	r2, [pc, #108]	@ (8004e18 <TIM_OC2_SetConfig+0xf0>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d00b      	beq.n	8004dc8 <TIM_OC2_SetConfig+0xa0>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a1a      	ldr	r2, [pc, #104]	@ (8004e1c <TIM_OC2_SetConfig+0xf4>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d007      	beq.n	8004dc8 <TIM_OC2_SetConfig+0xa0>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a19      	ldr	r2, [pc, #100]	@ (8004e20 <TIM_OC2_SetConfig+0xf8>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d003      	beq.n	8004dc8 <TIM_OC2_SetConfig+0xa0>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a18      	ldr	r2, [pc, #96]	@ (8004e24 <TIM_OC2_SetConfig+0xfc>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d113      	bne.n	8004df0 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004dce:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004dd6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	621a      	str	r2, [r3, #32]
}
 8004e0a:	bf00      	nop
 8004e0c:	371c      	adds	r7, #28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	40012c00 	.word	0x40012c00
 8004e1c:	40014000 	.word	0x40014000
 8004e20:	40014400 	.word	0x40014400
 8004e24:	40014800 	.word	0x40014800

08004e28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0303 	bic.w	r3, r3, #3
 8004e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	021b      	lsls	r3, r3, #8
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a23      	ldr	r2, [pc, #140]	@ (8004f14 <TIM_OC3_SetConfig+0xec>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d10d      	bne.n	8004ea6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	021b      	lsls	r3, r3, #8
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ea4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a1a      	ldr	r2, [pc, #104]	@ (8004f14 <TIM_OC3_SetConfig+0xec>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00b      	beq.n	8004ec6 <TIM_OC3_SetConfig+0x9e>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a19      	ldr	r2, [pc, #100]	@ (8004f18 <TIM_OC3_SetConfig+0xf0>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d007      	beq.n	8004ec6 <TIM_OC3_SetConfig+0x9e>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a18      	ldr	r2, [pc, #96]	@ (8004f1c <TIM_OC3_SetConfig+0xf4>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d003      	beq.n	8004ec6 <TIM_OC3_SetConfig+0x9e>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a17      	ldr	r2, [pc, #92]	@ (8004f20 <TIM_OC3_SetConfig+0xf8>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d113      	bne.n	8004eee <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	011b      	lsls	r3, r3, #4
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	621a      	str	r2, [r3, #32]
}
 8004f08:	bf00      	nop
 8004f0a:	371c      	adds	r7, #28
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr
 8004f14:	40012c00 	.word	0x40012c00
 8004f18:	40014000 	.word	0x40014000
 8004f1c:	40014400 	.word	0x40014400
 8004f20:	40014800 	.word	0x40014800

08004f24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	021b      	lsls	r3, r3, #8
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	031b      	lsls	r3, r3, #12
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a16      	ldr	r2, [pc, #88]	@ (8004fdc <TIM_OC4_SetConfig+0xb8>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d00b      	beq.n	8004fa0 <TIM_OC4_SetConfig+0x7c>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a15      	ldr	r2, [pc, #84]	@ (8004fe0 <TIM_OC4_SetConfig+0xbc>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d007      	beq.n	8004fa0 <TIM_OC4_SetConfig+0x7c>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a14      	ldr	r2, [pc, #80]	@ (8004fe4 <TIM_OC4_SetConfig+0xc0>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d003      	beq.n	8004fa0 <TIM_OC4_SetConfig+0x7c>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a13      	ldr	r2, [pc, #76]	@ (8004fe8 <TIM_OC4_SetConfig+0xc4>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d109      	bne.n	8004fb4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	019b      	lsls	r3, r3, #6
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	621a      	str	r2, [r3, #32]
}
 8004fce:	bf00      	nop
 8004fd0:	371c      	adds	r7, #28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	40012c00 	.word	0x40012c00
 8004fe0:	40014000 	.word	0x40014000
 8004fe4:	40014400 	.word	0x40014400
 8004fe8:	40014800 	.word	0x40014800

08004fec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800501a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800501e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	4313      	orrs	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005030:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	041b      	lsls	r3, r3, #16
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a15      	ldr	r2, [pc, #84]	@ (8005098 <TIM_OC5_SetConfig+0xac>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d00b      	beq.n	800505e <TIM_OC5_SetConfig+0x72>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a14      	ldr	r2, [pc, #80]	@ (800509c <TIM_OC5_SetConfig+0xb0>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d007      	beq.n	800505e <TIM_OC5_SetConfig+0x72>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a13      	ldr	r2, [pc, #76]	@ (80050a0 <TIM_OC5_SetConfig+0xb4>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d003      	beq.n	800505e <TIM_OC5_SetConfig+0x72>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a12      	ldr	r2, [pc, #72]	@ (80050a4 <TIM_OC5_SetConfig+0xb8>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d109      	bne.n	8005072 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005064:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	021b      	lsls	r3, r3, #8
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	4313      	orrs	r3, r2
 8005070:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	621a      	str	r2, [r3, #32]
}
 800508c:	bf00      	nop
 800508e:	371c      	adds	r7, #28
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr
 8005098:	40012c00 	.word	0x40012c00
 800509c:	40014000 	.word	0x40014000
 80050a0:	40014400 	.word	0x40014400
 80050a4:	40014800 	.word	0x40014800

080050a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	021b      	lsls	r3, r3, #8
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80050ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	051b      	lsls	r3, r3, #20
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a16      	ldr	r2, [pc, #88]	@ (8005158 <TIM_OC6_SetConfig+0xb0>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d00b      	beq.n	800511c <TIM_OC6_SetConfig+0x74>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a15      	ldr	r2, [pc, #84]	@ (800515c <TIM_OC6_SetConfig+0xb4>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d007      	beq.n	800511c <TIM_OC6_SetConfig+0x74>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a14      	ldr	r2, [pc, #80]	@ (8005160 <TIM_OC6_SetConfig+0xb8>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d003      	beq.n	800511c <TIM_OC6_SetConfig+0x74>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a13      	ldr	r2, [pc, #76]	@ (8005164 <TIM_OC6_SetConfig+0xbc>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d109      	bne.n	8005130 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005122:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	029b      	lsls	r3, r3, #10
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	4313      	orrs	r3, r2
 800512e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	621a      	str	r2, [r3, #32]
}
 800514a:	bf00      	nop
 800514c:	371c      	adds	r7, #28
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	40012c00 	.word	0x40012c00
 800515c:	40014000 	.word	0x40014000
 8005160:	40014400 	.word	0x40014400
 8005164:	40014800 	.word	0x40014800

08005168 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005168:	b480      	push	{r7}
 800516a:	b087      	sub	sp, #28
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	f023 0201 	bic.w	r2, r3, #1
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005192:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	011b      	lsls	r3, r3, #4
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	4313      	orrs	r3, r2
 800519c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f023 030a 	bic.w	r3, r3, #10
 80051a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	621a      	str	r2, [r3, #32]
}
 80051ba:	bf00      	nop
 80051bc:	371c      	adds	r7, #28
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b087      	sub	sp, #28
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	60f8      	str	r0, [r7, #12]
 80051ce:	60b9      	str	r1, [r7, #8]
 80051d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	f023 0210 	bic.w	r2, r3, #16
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	031b      	lsls	r3, r3, #12
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005202:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	011b      	lsls	r3, r3, #4
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	4313      	orrs	r3, r2
 800520c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	621a      	str	r2, [r3, #32]
}
 800521a:	bf00      	nop
 800521c:	371c      	adds	r7, #28
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005226:	b480      	push	{r7}
 8005228:	b085      	sub	sp, #20
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
 800522e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800523c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800523e:	683a      	ldr	r2, [r7, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4313      	orrs	r3, r2
 8005244:	f043 0307 	orr.w	r3, r3, #7
 8005248:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	609a      	str	r2, [r3, #8]
}
 8005250:	bf00      	nop
 8005252:	3714      	adds	r7, #20
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800525c:	b480      	push	{r7}
 800525e:	b087      	sub	sp, #28
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
 8005268:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005276:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	021a      	lsls	r2, r3, #8
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	431a      	orrs	r2, r3
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	4313      	orrs	r3, r2
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	4313      	orrs	r3, r2
 8005288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	609a      	str	r2, [r3, #8]
}
 8005290:	bf00      	nop
 8005292:	371c      	adds	r7, #28
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800529c:	b480      	push	{r7}
 800529e:	b087      	sub	sp, #28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	f003 031f 	and.w	r3, r3, #31
 80052ae:	2201      	movs	r2, #1
 80052b0:	fa02 f303 	lsl.w	r3, r2, r3
 80052b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6a1a      	ldr	r2, [r3, #32]
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	43db      	mvns	r3, r3
 80052be:	401a      	ands	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6a1a      	ldr	r2, [r3, #32]
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	f003 031f 	and.w	r3, r3, #31
 80052ce:	6879      	ldr	r1, [r7, #4]
 80052d0:	fa01 f303 	lsl.w	r3, r1, r3
 80052d4:	431a      	orrs	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	621a      	str	r2, [r3, #32]
}
 80052da:	bf00      	nop
 80052dc:	371c      	adds	r7, #28
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
	...

080052e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d101      	bne.n	8005300 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052fc:	2302      	movs	r3, #2
 80052fe:	e04f      	b.n	80053a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a21      	ldr	r2, [pc, #132]	@ (80053ac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d108      	bne.n	800533c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005330:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	4313      	orrs	r3, r2
 800533a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005342:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a14      	ldr	r2, [pc, #80]	@ (80053ac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d009      	beq.n	8005374 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005368:	d004      	beq.n	8005374 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a10      	ldr	r2, [pc, #64]	@ (80053b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d10c      	bne.n	800538e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800537a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	4313      	orrs	r3, r2
 8005384:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr
 80053ac:	40012c00 	.word	0x40012c00
 80053b0:	40014000 	.word	0x40014000

080053b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d101      	bne.n	80053d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80053cc:	2302      	movs	r3, #2
 80053ce:	e060      	b.n	8005492 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	4313      	orrs	r3, r2
 8005400:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4313      	orrs	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	4313      	orrs	r3, r2
 800542a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005436:	4313      	orrs	r3, r2
 8005438:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	041b      	lsls	r3, r3, #16
 8005446:	4313      	orrs	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a14      	ldr	r2, [pc, #80]	@ (80054a0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d115      	bne.n	8005480 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800545e:	051b      	lsls	r3, r3, #20
 8005460:	4313      	orrs	r3, r2
 8005462:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	69db      	ldr	r3, [r3, #28]
 800546e:	4313      	orrs	r3, r2
 8005470:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	6a1b      	ldr	r3, [r3, #32]
 800547c:	4313      	orrs	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	40012c00 	.word	0x40012c00

080054a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e040      	b.n	8005574 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d106      	bne.n	8005508 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7fc fc6e 	bl	8001de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2224      	movs	r2, #36	@ 0x24
 800550c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 0201 	bic.w	r2, r2, #1
 800551c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fbfc 	bl	8005d1c <UART_SetConfig>
 8005524:	4603      	mov	r3, r0
 8005526:	2b01      	cmp	r3, #1
 8005528:	d101      	bne.n	800552e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e022      	b.n	8005574 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005532:	2b00      	cmp	r3, #0
 8005534:	d002      	beq.n	800553c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 fd26 	bl	8005f88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800554a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689a      	ldr	r2, [r3, #8]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800555a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f042 0201 	orr.w	r2, r2, #1
 800556a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 fdad 	bl	80060cc <UART_CheckIdleState>
 8005572:	4603      	mov	r3, r0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3708      	adds	r7, #8
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b08a      	sub	sp, #40	@ 0x28
 8005580:	af02      	add	r7, sp, #8
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	603b      	str	r3, [r7, #0]
 8005588:	4613      	mov	r3, r2
 800558a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005592:	2b20      	cmp	r3, #32
 8005594:	f040 80b6 	bne.w	8005704 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d002      	beq.n	80055a4 <HAL_UART_Receive+0x28>
 800559e:	88fb      	ldrh	r3, [r7, #6]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e0ae      	b.n	8005706 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2222      	movs	r2, #34	@ 0x22
 80055b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055be:	f7fc fe4d 	bl	800225c <HAL_GetTick>
 80055c2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	88fa      	ldrh	r2, [r7, #6]
 80055c8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	88fa      	ldrh	r2, [r7, #6]
 80055d0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055dc:	d10e      	bne.n	80055fc <HAL_UART_Receive+0x80>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d105      	bne.n	80055f2 <HAL_UART_Receive+0x76>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80055ec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80055f0:	e02d      	b.n	800564e <HAL_UART_Receive+0xd2>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	22ff      	movs	r2, #255	@ 0xff
 80055f6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80055fa:	e028      	b.n	800564e <HAL_UART_Receive+0xd2>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10d      	bne.n	8005620 <HAL_UART_Receive+0xa4>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d104      	bne.n	8005616 <HAL_UART_Receive+0x9a>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	22ff      	movs	r2, #255	@ 0xff
 8005610:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005614:	e01b      	b.n	800564e <HAL_UART_Receive+0xd2>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	227f      	movs	r2, #127	@ 0x7f
 800561a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800561e:	e016      	b.n	800564e <HAL_UART_Receive+0xd2>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005628:	d10d      	bne.n	8005646 <HAL_UART_Receive+0xca>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d104      	bne.n	800563c <HAL_UART_Receive+0xc0>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	227f      	movs	r2, #127	@ 0x7f
 8005636:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800563a:	e008      	b.n	800564e <HAL_UART_Receive+0xd2>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	223f      	movs	r2, #63	@ 0x3f
 8005640:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005644:	e003      	b.n	800564e <HAL_UART_Receive+0xd2>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005654:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800565e:	d108      	bne.n	8005672 <HAL_UART_Receive+0xf6>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d104      	bne.n	8005672 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005668:	2300      	movs	r3, #0
 800566a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	61bb      	str	r3, [r7, #24]
 8005670:	e003      	b.n	800567a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005676:	2300      	movs	r3, #0
 8005678:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800567a:	e037      	b.n	80056ec <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	2200      	movs	r2, #0
 8005684:	2120      	movs	r1, #32
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f000 fdc8 	bl	800621c <UART_WaitOnFlagUntilTimeout>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d005      	beq.n	800569e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2220      	movs	r2, #32
 8005696:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e033      	b.n	8005706 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10c      	bne.n	80056be <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	8a7b      	ldrh	r3, [r7, #18]
 80056ae:	4013      	ands	r3, r2
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	3302      	adds	r3, #2
 80056ba:	61bb      	str	r3, [r7, #24]
 80056bc:	e00d      	b.n	80056da <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	8a7b      	ldrh	r3, [r7, #18]
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	4013      	ands	r3, r2
 80056ce:	b2da      	uxtb	r2, r3
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	3301      	adds	r3, #1
 80056d8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	3b01      	subs	r3, #1
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1c1      	bne.n	800567c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8005700:	2300      	movs	r3, #0
 8005702:	e000      	b.n	8005706 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8005704:	2302      	movs	r3, #2
  }
}
 8005706:	4618      	mov	r0, r3
 8005708:	3720      	adds	r7, #32
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
	...

08005710 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b0ba      	sub	sp, #232	@ 0xe8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005736:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800573a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800573e:	4013      	ands	r3, r2
 8005740:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005744:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005748:	2b00      	cmp	r3, #0
 800574a:	d115      	bne.n	8005778 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800574c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005750:	f003 0320 	and.w	r3, r3, #32
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00f      	beq.n	8005778 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800575c:	f003 0320 	and.w	r3, r3, #32
 8005760:	2b00      	cmp	r3, #0
 8005762:	d009      	beq.n	8005778 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005768:	2b00      	cmp	r3, #0
 800576a:	f000 82ab 	beq.w	8005cc4 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	4798      	blx	r3
      }
      return;
 8005776:	e2a5      	b.n	8005cc4 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005778:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 8117 	beq.w	80059b0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b00      	cmp	r3, #0
 800578c:	d106      	bne.n	800579c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800578e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005792:	4b85      	ldr	r3, [pc, #532]	@ (80059a8 <HAL_UART_IRQHandler+0x298>)
 8005794:	4013      	ands	r3, r2
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 810a 	beq.w	80059b0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800579c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d011      	beq.n	80057cc <HAL_UART_IRQHandler+0xbc>
 80057a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00b      	beq.n	80057cc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2201      	movs	r2, #1
 80057ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057c2:	f043 0201 	orr.w	r2, r3, #1
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d011      	beq.n	80057fc <HAL_UART_IRQHandler+0xec>
 80057d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00b      	beq.n	80057fc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2202      	movs	r2, #2
 80057ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057f2:	f043 0204 	orr.w	r2, r3, #4
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005800:	f003 0304 	and.w	r3, r3, #4
 8005804:	2b00      	cmp	r3, #0
 8005806:	d011      	beq.n	800582c <HAL_UART_IRQHandler+0x11c>
 8005808:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800580c:	f003 0301 	and.w	r3, r3, #1
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00b      	beq.n	800582c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2204      	movs	r2, #4
 800581a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005822:	f043 0202 	orr.w	r2, r3, #2
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800582c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005830:	f003 0308 	and.w	r3, r3, #8
 8005834:	2b00      	cmp	r3, #0
 8005836:	d017      	beq.n	8005868 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800583c:	f003 0320 	and.w	r3, r3, #32
 8005840:	2b00      	cmp	r3, #0
 8005842:	d105      	bne.n	8005850 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005844:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005848:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00b      	beq.n	8005868 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2208      	movs	r2, #8
 8005856:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800585e:	f043 0208 	orr.w	r2, r3, #8
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800586c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005870:	2b00      	cmp	r3, #0
 8005872:	d012      	beq.n	800589a <HAL_UART_IRQHandler+0x18a>
 8005874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005878:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00c      	beq.n	800589a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005888:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005890:	f043 0220 	orr.w	r2, r3, #32
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 8211 	beq.w	8005cc8 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80058a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058aa:	f003 0320 	and.w	r3, r3, #32
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00d      	beq.n	80058ce <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058b6:	f003 0320 	and.w	r3, r3, #32
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d007      	beq.n	80058ce <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e2:	2b40      	cmp	r3, #64	@ 0x40
 80058e4:	d005      	beq.n	80058f2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80058e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d04f      	beq.n	8005992 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 fcf9 	bl	80062ea <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005902:	2b40      	cmp	r3, #64	@ 0x40
 8005904:	d141      	bne.n	800598a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3308      	adds	r3, #8
 800590c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005910:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005914:	e853 3f00 	ldrex	r3, [r3]
 8005918:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800591c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005920:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005924:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	3308      	adds	r3, #8
 800592e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005932:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005936:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800593e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005942:	e841 2300 	strex	r3, r2, [r1]
 8005946:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800594a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1d9      	bne.n	8005906 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005956:	2b00      	cmp	r3, #0
 8005958:	d013      	beq.n	8005982 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800595e:	4a13      	ldr	r2, [pc, #76]	@ (80059ac <HAL_UART_IRQHandler+0x29c>)
 8005960:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005966:	4618      	mov	r0, r3
 8005968:	f7fc fdf2 	bl	8002550 <HAL_DMA_Abort_IT>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d017      	beq.n	80059a2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800597c:	4610      	mov	r0, r2
 800597e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005980:	e00f      	b.n	80059a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f9b4 	bl	8005cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005988:	e00b      	b.n	80059a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f9b0 	bl	8005cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005990:	e007      	b.n	80059a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f9ac 	bl	8005cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80059a0:	e192      	b.n	8005cc8 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a2:	bf00      	nop
    return;
 80059a4:	e190      	b.n	8005cc8 <HAL_UART_IRQHandler+0x5b8>
 80059a6:	bf00      	nop
 80059a8:	04000120 	.word	0x04000120
 80059ac:	080063b3 	.word	0x080063b3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	f040 814b 	bne.w	8005c50 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80059ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059be:	f003 0310 	and.w	r3, r3, #16
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f000 8144 	beq.w	8005c50 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80059c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059cc:	f003 0310 	and.w	r3, r3, #16
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f000 813d 	beq.w	8005c50 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2210      	movs	r2, #16
 80059dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e8:	2b40      	cmp	r3, #64	@ 0x40
 80059ea:	f040 80b5 	bne.w	8005b58 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f000 8164 	beq.w	8005ccc <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005a0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	f080 815c 	bcs.w	8005ccc <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a1a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	2b20      	cmp	r3, #32
 8005a26:	f000 8086 	beq.w	8005b36 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a32:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a36:	e853 3f00 	ldrex	r3, [r3]
 8005a3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005a3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a42:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a46:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005a54:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005a58:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005a60:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005a64:	e841 2300 	strex	r3, r2, [r1]
 8005a68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005a6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1da      	bne.n	8005a2a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	3308      	adds	r3, #8
 8005a7a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a7e:	e853 3f00 	ldrex	r3, [r3]
 8005a82:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a86:	f023 0301 	bic.w	r3, r3, #1
 8005a8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	3308      	adds	r3, #8
 8005a94:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005a98:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005a9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005aa0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005aa4:	e841 2300 	strex	r3, r2, [r1]
 8005aa8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005aaa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1e1      	bne.n	8005a74 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3308      	adds	r3, #8
 8005ab6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005aba:	e853 3f00 	ldrex	r3, [r3]
 8005abe:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005ac0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ac2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ac6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	3308      	adds	r3, #8
 8005ad0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005ad4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005ad6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005ada:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005adc:	e841 2300 	strex	r3, r2, [r1]
 8005ae0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ae2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1e3      	bne.n	8005ab0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2220      	movs	r2, #32
 8005aec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005afe:	e853 3f00 	ldrex	r3, [r3]
 8005b02:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b06:	f023 0310 	bic.w	r3, r3, #16
 8005b0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	461a      	mov	r2, r3
 8005b14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b1a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b1e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b20:	e841 2300 	strex	r3, r2, [r1]
 8005b24:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1e4      	bne.n	8005af6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7fc fcd4 	bl	80024de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2202      	movs	r2, #2
 8005b3a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	4619      	mov	r1, r3
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f8d7 	bl	8005d04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b56:	e0b9      	b.n	8005ccc <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 80ab 	beq.w	8005cd0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005b7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f000 80a6 	beq.w	8005cd0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b8c:	e853 3f00 	ldrex	r3, [r3]
 8005b90:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005ba6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ba8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005baa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bae:	e841 2300 	strex	r3, r2, [r1]
 8005bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1e4      	bne.n	8005b84 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	3308      	adds	r3, #8
 8005bc0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc4:	e853 3f00 	ldrex	r3, [r3]
 8005bc8:	623b      	str	r3, [r7, #32]
   return(result);
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	f023 0301 	bic.w	r3, r3, #1
 8005bd0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3308      	adds	r3, #8
 8005bda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005bde:	633a      	str	r2, [r7, #48]	@ 0x30
 8005be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005be4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005be6:	e841 2300 	strex	r3, r2, [r1]
 8005bea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1e3      	bne.n	8005bba <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	e853 3f00 	ldrex	r3, [r3]
 8005c12:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f023 0310 	bic.w	r3, r3, #16
 8005c1a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	461a      	mov	r2, r3
 8005c24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005c28:	61fb      	str	r3, [r7, #28]
 8005c2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2c:	69b9      	ldr	r1, [r7, #24]
 8005c2e:	69fa      	ldr	r2, [r7, #28]
 8005c30:	e841 2300 	strex	r3, r2, [r1]
 8005c34:	617b      	str	r3, [r7, #20]
   return(result);
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1e4      	bne.n	8005c06 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c46:	4619      	mov	r1, r3
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 f85b 	bl	8005d04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c4e:	e03f      	b.n	8005cd0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00e      	beq.n	8005c7a <HAL_UART_IRQHandler+0x56a>
 8005c5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d008      	beq.n	8005c7a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005c70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 fbdd 	bl	8006432 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c78:	e02d      	b.n	8005cd6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00e      	beq.n	8005ca4 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005c86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d008      	beq.n	8005ca4 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d01c      	beq.n	8005cd4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	4798      	blx	r3
    }
    return;
 8005ca2:	e017      	b.n	8005cd4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d012      	beq.n	8005cd6 <HAL_UART_IRQHandler+0x5c6>
 8005cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00c      	beq.n	8005cd6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 fb8e 	bl	80063de <UART_EndTransmit_IT>
    return;
 8005cc2:	e008      	b.n	8005cd6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005cc4:	bf00      	nop
 8005cc6:	e006      	b.n	8005cd6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005cc8:	bf00      	nop
 8005cca:	e004      	b.n	8005cd6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005ccc:	bf00      	nop
 8005cce:	e002      	b.n	8005cd6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005cd0:	bf00      	nop
 8005cd2:	e000      	b.n	8005cd6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005cd4:	bf00      	nop
  }

}
 8005cd6:	37e8      	adds	r7, #232	@ 0xe8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b088      	sub	sp, #32
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d24:	2300      	movs	r3, #0
 8005d26:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689a      	ldr	r2, [r3, #8]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	431a      	orrs	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	431a      	orrs	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	69db      	ldr	r3, [r3, #28]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	4b8a      	ldr	r3, [pc, #552]	@ (8005f70 <UART_SetConfig+0x254>)
 8005d48:	4013      	ands	r3, r2
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	6812      	ldr	r2, [r2, #0]
 8005d4e:	6979      	ldr	r1, [r7, #20]
 8005d50:	430b      	orrs	r3, r1
 8005d52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68da      	ldr	r2, [r3, #12]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	430a      	orrs	r2, r1
 8005d68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a78      	ldr	r2, [pc, #480]	@ (8005f74 <UART_SetConfig+0x258>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d120      	bne.n	8005dda <UART_SetConfig+0xbe>
 8005d98:	4b77      	ldr	r3, [pc, #476]	@ (8005f78 <UART_SetConfig+0x25c>)
 8005d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d9c:	f003 0303 	and.w	r3, r3, #3
 8005da0:	2b03      	cmp	r3, #3
 8005da2:	d817      	bhi.n	8005dd4 <UART_SetConfig+0xb8>
 8005da4:	a201      	add	r2, pc, #4	@ (adr r2, 8005dac <UART_SetConfig+0x90>)
 8005da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005daa:	bf00      	nop
 8005dac:	08005dbd 	.word	0x08005dbd
 8005db0:	08005dc9 	.word	0x08005dc9
 8005db4:	08005dcf 	.word	0x08005dcf
 8005db8:	08005dc3 	.word	0x08005dc3
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	77fb      	strb	r3, [r7, #31]
 8005dc0:	e01d      	b.n	8005dfe <UART_SetConfig+0xe2>
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	77fb      	strb	r3, [r7, #31]
 8005dc6:	e01a      	b.n	8005dfe <UART_SetConfig+0xe2>
 8005dc8:	2304      	movs	r3, #4
 8005dca:	77fb      	strb	r3, [r7, #31]
 8005dcc:	e017      	b.n	8005dfe <UART_SetConfig+0xe2>
 8005dce:	2308      	movs	r3, #8
 8005dd0:	77fb      	strb	r3, [r7, #31]
 8005dd2:	e014      	b.n	8005dfe <UART_SetConfig+0xe2>
 8005dd4:	2310      	movs	r3, #16
 8005dd6:	77fb      	strb	r3, [r7, #31]
 8005dd8:	e011      	b.n	8005dfe <UART_SetConfig+0xe2>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a67      	ldr	r2, [pc, #412]	@ (8005f7c <UART_SetConfig+0x260>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d102      	bne.n	8005dea <UART_SetConfig+0xce>
 8005de4:	2300      	movs	r3, #0
 8005de6:	77fb      	strb	r3, [r7, #31]
 8005de8:	e009      	b.n	8005dfe <UART_SetConfig+0xe2>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a64      	ldr	r2, [pc, #400]	@ (8005f80 <UART_SetConfig+0x264>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d102      	bne.n	8005dfa <UART_SetConfig+0xde>
 8005df4:	2300      	movs	r3, #0
 8005df6:	77fb      	strb	r3, [r7, #31]
 8005df8:	e001      	b.n	8005dfe <UART_SetConfig+0xe2>
 8005dfa:	2310      	movs	r3, #16
 8005dfc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	69db      	ldr	r3, [r3, #28]
 8005e02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e06:	d15a      	bne.n	8005ebe <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005e08:	7ffb      	ldrb	r3, [r7, #31]
 8005e0a:	2b08      	cmp	r3, #8
 8005e0c:	d827      	bhi.n	8005e5e <UART_SetConfig+0x142>
 8005e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e14 <UART_SetConfig+0xf8>)
 8005e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e14:	08005e39 	.word	0x08005e39
 8005e18:	08005e41 	.word	0x08005e41
 8005e1c:	08005e49 	.word	0x08005e49
 8005e20:	08005e5f 	.word	0x08005e5f
 8005e24:	08005e4f 	.word	0x08005e4f
 8005e28:	08005e5f 	.word	0x08005e5f
 8005e2c:	08005e5f 	.word	0x08005e5f
 8005e30:	08005e5f 	.word	0x08005e5f
 8005e34:	08005e57 	.word	0x08005e57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e38:	f7fd ff9a 	bl	8003d70 <HAL_RCC_GetPCLK1Freq>
 8005e3c:	61b8      	str	r0, [r7, #24]
        break;
 8005e3e:	e013      	b.n	8005e68 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e40:	f7fd ffb8 	bl	8003db4 <HAL_RCC_GetPCLK2Freq>
 8005e44:	61b8      	str	r0, [r7, #24]
        break;
 8005e46:	e00f      	b.n	8005e68 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e48:	4b4e      	ldr	r3, [pc, #312]	@ (8005f84 <UART_SetConfig+0x268>)
 8005e4a:	61bb      	str	r3, [r7, #24]
        break;
 8005e4c:	e00c      	b.n	8005e68 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e4e:	f7fd ff19 	bl	8003c84 <HAL_RCC_GetSysClockFreq>
 8005e52:	61b8      	str	r0, [r7, #24]
        break;
 8005e54:	e008      	b.n	8005e68 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e5a:	61bb      	str	r3, [r7, #24]
        break;
 8005e5c:	e004      	b.n	8005e68 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	77bb      	strb	r3, [r7, #30]
        break;
 8005e66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d074      	beq.n	8005f58 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	005a      	lsls	r2, r3, #1
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	085b      	lsrs	r3, r3, #1
 8005e78:	441a      	add	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e82:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	2b0f      	cmp	r3, #15
 8005e88:	d916      	bls.n	8005eb8 <UART_SetConfig+0x19c>
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e90:	d212      	bcs.n	8005eb8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	f023 030f 	bic.w	r3, r3, #15
 8005e9a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	085b      	lsrs	r3, r3, #1
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	f003 0307 	and.w	r3, r3, #7
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	89fb      	ldrh	r3, [r7, #14]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	89fa      	ldrh	r2, [r7, #14]
 8005eb4:	60da      	str	r2, [r3, #12]
 8005eb6:	e04f      	b.n	8005f58 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	77bb      	strb	r3, [r7, #30]
 8005ebc:	e04c      	b.n	8005f58 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ebe:	7ffb      	ldrb	r3, [r7, #31]
 8005ec0:	2b08      	cmp	r3, #8
 8005ec2:	d828      	bhi.n	8005f16 <UART_SetConfig+0x1fa>
 8005ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8005ecc <UART_SetConfig+0x1b0>)
 8005ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eca:	bf00      	nop
 8005ecc:	08005ef1 	.word	0x08005ef1
 8005ed0:	08005ef9 	.word	0x08005ef9
 8005ed4:	08005f01 	.word	0x08005f01
 8005ed8:	08005f17 	.word	0x08005f17
 8005edc:	08005f07 	.word	0x08005f07
 8005ee0:	08005f17 	.word	0x08005f17
 8005ee4:	08005f17 	.word	0x08005f17
 8005ee8:	08005f17 	.word	0x08005f17
 8005eec:	08005f0f 	.word	0x08005f0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ef0:	f7fd ff3e 	bl	8003d70 <HAL_RCC_GetPCLK1Freq>
 8005ef4:	61b8      	str	r0, [r7, #24]
        break;
 8005ef6:	e013      	b.n	8005f20 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ef8:	f7fd ff5c 	bl	8003db4 <HAL_RCC_GetPCLK2Freq>
 8005efc:	61b8      	str	r0, [r7, #24]
        break;
 8005efe:	e00f      	b.n	8005f20 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f00:	4b20      	ldr	r3, [pc, #128]	@ (8005f84 <UART_SetConfig+0x268>)
 8005f02:	61bb      	str	r3, [r7, #24]
        break;
 8005f04:	e00c      	b.n	8005f20 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f06:	f7fd febd 	bl	8003c84 <HAL_RCC_GetSysClockFreq>
 8005f0a:	61b8      	str	r0, [r7, #24]
        break;
 8005f0c:	e008      	b.n	8005f20 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f12:	61bb      	str	r3, [r7, #24]
        break;
 8005f14:	e004      	b.n	8005f20 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005f16:	2300      	movs	r3, #0
 8005f18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	77bb      	strb	r3, [r7, #30]
        break;
 8005f1e:	bf00      	nop
    }

    if (pclk != 0U)
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d018      	beq.n	8005f58 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	085a      	lsrs	r2, r3, #1
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	441a      	add	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	2b0f      	cmp	r3, #15
 8005f3e:	d909      	bls.n	8005f54 <UART_SetConfig+0x238>
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f46:	d205      	bcs.n	8005f54 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	60da      	str	r2, [r3, #12]
 8005f52:	e001      	b.n	8005f58 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005f64:	7fbb      	ldrb	r3, [r7, #30]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3720      	adds	r7, #32
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	efff69f3 	.word	0xefff69f3
 8005f74:	40013800 	.word	0x40013800
 8005f78:	40021000 	.word	0x40021000
 8005f7c:	40004400 	.word	0x40004400
 8005f80:	40004800 	.word	0x40004800
 8005f84:	007a1200 	.word	0x007a1200

08005f88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00a      	beq.n	8005fb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00a      	beq.n	8005fd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd8:	f003 0304 	and.w	r3, r3, #4
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00a      	beq.n	8005ff6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ffa:	f003 0308 	and.w	r3, r3, #8
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00a      	beq.n	8006018 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	430a      	orrs	r2, r1
 8006016:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601c:	f003 0310 	and.w	r3, r3, #16
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00a      	beq.n	800603a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	430a      	orrs	r2, r1
 8006038:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800603e:	f003 0320 	and.w	r3, r3, #32
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00a      	beq.n	800605c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	430a      	orrs	r2, r1
 800605a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006064:	2b00      	cmp	r3, #0
 8006066:	d01a      	beq.n	800609e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	430a      	orrs	r2, r1
 800607c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006082:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006086:	d10a      	bne.n	800609e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	430a      	orrs	r2, r1
 800609c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00a      	beq.n	80060c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	430a      	orrs	r2, r1
 80060be:	605a      	str	r2, [r3, #4]
  }
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b098      	sub	sp, #96	@ 0x60
 80060d0:	af02      	add	r7, sp, #8
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060dc:	f7fc f8be 	bl	800225c <HAL_GetTick>
 80060e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0308 	and.w	r3, r3, #8
 80060ec:	2b08      	cmp	r3, #8
 80060ee:	d12e      	bne.n	800614e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80060f4:	9300      	str	r3, [sp, #0]
 80060f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060f8:	2200      	movs	r2, #0
 80060fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f88c 	bl	800621c <UART_WaitOnFlagUntilTimeout>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d021      	beq.n	800614e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006112:	e853 3f00 	ldrex	r3, [r3]
 8006116:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800611a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800611e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	461a      	mov	r2, r3
 8006126:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006128:	647b      	str	r3, [r7, #68]	@ 0x44
 800612a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800612e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006130:	e841 2300 	strex	r3, r2, [r1]
 8006134:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1e6      	bne.n	800610a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2220      	movs	r2, #32
 8006140:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e062      	b.n	8006214 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0304 	and.w	r3, r3, #4
 8006158:	2b04      	cmp	r3, #4
 800615a:	d149      	bne.n	80061f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800615c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006164:	2200      	movs	r2, #0
 8006166:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f856 	bl	800621c <UART_WaitOnFlagUntilTimeout>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d03c      	beq.n	80061f0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617e:	e853 3f00 	ldrex	r3, [r3]
 8006182:	623b      	str	r3, [r7, #32]
   return(result);
 8006184:	6a3b      	ldr	r3, [r7, #32]
 8006186:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800618a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	461a      	mov	r2, r3
 8006192:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006194:	633b      	str	r3, [r7, #48]	@ 0x30
 8006196:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006198:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800619a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800619c:	e841 2300 	strex	r3, r2, [r1]
 80061a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80061a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1e6      	bne.n	8006176 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	3308      	adds	r3, #8
 80061ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	e853 3f00 	ldrex	r3, [r3]
 80061b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f023 0301 	bic.w	r3, r3, #1
 80061be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3308      	adds	r3, #8
 80061c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061c8:	61fa      	str	r2, [r7, #28]
 80061ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061cc:	69b9      	ldr	r1, [r7, #24]
 80061ce:	69fa      	ldr	r2, [r7, #28]
 80061d0:	e841 2300 	strex	r3, r2, [r1]
 80061d4:	617b      	str	r3, [r7, #20]
   return(result);
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1e5      	bne.n	80061a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2220      	movs	r2, #32
 80061e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e011      	b.n	8006214 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2220      	movs	r2, #32
 80061f4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2220      	movs	r2, #32
 80061fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3758      	adds	r7, #88	@ 0x58
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	603b      	str	r3, [r7, #0]
 8006228:	4613      	mov	r3, r2
 800622a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800622c:	e049      	b.n	80062c2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006234:	d045      	beq.n	80062c2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006236:	f7fc f811 	bl	800225c <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	69ba      	ldr	r2, [r7, #24]
 8006242:	429a      	cmp	r2, r3
 8006244:	d302      	bcc.n	800624c <UART_WaitOnFlagUntilTimeout+0x30>
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d101      	bne.n	8006250 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	e048      	b.n	80062e2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0304 	and.w	r3, r3, #4
 800625a:	2b00      	cmp	r3, #0
 800625c:	d031      	beq.n	80062c2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	69db      	ldr	r3, [r3, #28]
 8006264:	f003 0308 	and.w	r3, r3, #8
 8006268:	2b08      	cmp	r3, #8
 800626a:	d110      	bne.n	800628e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2208      	movs	r2, #8
 8006272:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f000 f838 	bl	80062ea <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2208      	movs	r2, #8
 800627e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e029      	b.n	80062e2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	69db      	ldr	r3, [r3, #28]
 8006294:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006298:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800629c:	d111      	bne.n	80062c2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80062a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f000 f81e 	bl	80062ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2220      	movs	r2, #32
 80062b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e00f      	b.n	80062e2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	69da      	ldr	r2, [r3, #28]
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	4013      	ands	r3, r2
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	bf0c      	ite	eq
 80062d2:	2301      	moveq	r3, #1
 80062d4:	2300      	movne	r3, #0
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	461a      	mov	r2, r3
 80062da:	79fb      	ldrb	r3, [r7, #7]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d0a6      	beq.n	800622e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b095      	sub	sp, #84	@ 0x54
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062fa:	e853 3f00 	ldrex	r3, [r3]
 80062fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006302:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006306:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	461a      	mov	r2, r3
 800630e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006310:	643b      	str	r3, [r7, #64]	@ 0x40
 8006312:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006314:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006316:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006318:	e841 2300 	strex	r3, r2, [r1]
 800631c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800631e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1e6      	bne.n	80062f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	3308      	adds	r3, #8
 800632a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632c:	6a3b      	ldr	r3, [r7, #32]
 800632e:	e853 3f00 	ldrex	r3, [r3]
 8006332:	61fb      	str	r3, [r7, #28]
   return(result);
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	f023 0301 	bic.w	r3, r3, #1
 800633a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3308      	adds	r3, #8
 8006342:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006344:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006346:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006348:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800634a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800634c:	e841 2300 	strex	r3, r2, [r1]
 8006350:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1e5      	bne.n	8006324 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800635c:	2b01      	cmp	r3, #1
 800635e:	d118      	bne.n	8006392 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	e853 3f00 	ldrex	r3, [r3]
 800636c:	60bb      	str	r3, [r7, #8]
   return(result);
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	f023 0310 	bic.w	r3, r3, #16
 8006374:	647b      	str	r3, [r7, #68]	@ 0x44
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	461a      	mov	r2, r3
 800637c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800637e:	61bb      	str	r3, [r7, #24]
 8006380:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006382:	6979      	ldr	r1, [r7, #20]
 8006384:	69ba      	ldr	r2, [r7, #24]
 8006386:	e841 2300 	strex	r3, r2, [r1]
 800638a:	613b      	str	r3, [r7, #16]
   return(result);
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1e6      	bne.n	8006360 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2220      	movs	r2, #32
 8006396:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80063a6:	bf00      	nop
 80063a8:	3754      	adds	r7, #84	@ 0x54
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b084      	sub	sp, #16
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f7ff fc8d 	bl	8005cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063d6:	bf00      	nop
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b088      	sub	sp, #32
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	e853 3f00 	ldrex	r3, [r3]
 80063f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063fa:	61fb      	str	r3, [r7, #28]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	461a      	mov	r2, r3
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	61bb      	str	r3, [r7, #24]
 8006406:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006408:	6979      	ldr	r1, [r7, #20]
 800640a:	69ba      	ldr	r2, [r7, #24]
 800640c:	e841 2300 	strex	r3, r2, [r1]
 8006410:	613b      	str	r3, [r7, #16]
   return(result);
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1e6      	bne.n	80063e6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2220      	movs	r2, #32
 800641c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7ff fc59 	bl	8005cdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800642a:	bf00      	nop
 800642c:	3720      	adds	r7, #32
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006432:	b480      	push	{r7}
 8006434:	b083      	sub	sp, #12
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800643a:	bf00      	nop
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
	...

08006448 <srand>:
 8006448:	b538      	push	{r3, r4, r5, lr}
 800644a:	4b10      	ldr	r3, [pc, #64]	@ (800648c <srand+0x44>)
 800644c:	681d      	ldr	r5, [r3, #0]
 800644e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006450:	4604      	mov	r4, r0
 8006452:	b9b3      	cbnz	r3, 8006482 <srand+0x3a>
 8006454:	2018      	movs	r0, #24
 8006456:	f000 fa3d 	bl	80068d4 <malloc>
 800645a:	4602      	mov	r2, r0
 800645c:	6328      	str	r0, [r5, #48]	@ 0x30
 800645e:	b920      	cbnz	r0, 800646a <srand+0x22>
 8006460:	4b0b      	ldr	r3, [pc, #44]	@ (8006490 <srand+0x48>)
 8006462:	480c      	ldr	r0, [pc, #48]	@ (8006494 <srand+0x4c>)
 8006464:	2146      	movs	r1, #70	@ 0x46
 8006466:	f000 f9cd 	bl	8006804 <__assert_func>
 800646a:	490b      	ldr	r1, [pc, #44]	@ (8006498 <srand+0x50>)
 800646c:	4b0b      	ldr	r3, [pc, #44]	@ (800649c <srand+0x54>)
 800646e:	e9c0 1300 	strd	r1, r3, [r0]
 8006472:	4b0b      	ldr	r3, [pc, #44]	@ (80064a0 <srand+0x58>)
 8006474:	6083      	str	r3, [r0, #8]
 8006476:	230b      	movs	r3, #11
 8006478:	8183      	strh	r3, [r0, #12]
 800647a:	2100      	movs	r1, #0
 800647c:	2001      	movs	r0, #1
 800647e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006482:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006484:	2200      	movs	r2, #0
 8006486:	611c      	str	r4, [r3, #16]
 8006488:	615a      	str	r2, [r3, #20]
 800648a:	bd38      	pop	{r3, r4, r5, pc}
 800648c:	2000001c 	.word	0x2000001c
 8006490:	080074a0 	.word	0x080074a0
 8006494:	080074b7 	.word	0x080074b7
 8006498:	abcd330e 	.word	0xabcd330e
 800649c:	e66d1234 	.word	0xe66d1234
 80064a0:	0005deec 	.word	0x0005deec

080064a4 <std>:
 80064a4:	2300      	movs	r3, #0
 80064a6:	b510      	push	{r4, lr}
 80064a8:	4604      	mov	r4, r0
 80064aa:	e9c0 3300 	strd	r3, r3, [r0]
 80064ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064b2:	6083      	str	r3, [r0, #8]
 80064b4:	8181      	strh	r1, [r0, #12]
 80064b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80064b8:	81c2      	strh	r2, [r0, #14]
 80064ba:	6183      	str	r3, [r0, #24]
 80064bc:	4619      	mov	r1, r3
 80064be:	2208      	movs	r2, #8
 80064c0:	305c      	adds	r0, #92	@ 0x5c
 80064c2:	f000 f8f4 	bl	80066ae <memset>
 80064c6:	4b0d      	ldr	r3, [pc, #52]	@ (80064fc <std+0x58>)
 80064c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80064ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006500 <std+0x5c>)
 80064cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80064ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006504 <std+0x60>)
 80064d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80064d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006508 <std+0x64>)
 80064d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80064d6:	4b0d      	ldr	r3, [pc, #52]	@ (800650c <std+0x68>)
 80064d8:	6224      	str	r4, [r4, #32]
 80064da:	429c      	cmp	r4, r3
 80064dc:	d006      	beq.n	80064ec <std+0x48>
 80064de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80064e2:	4294      	cmp	r4, r2
 80064e4:	d002      	beq.n	80064ec <std+0x48>
 80064e6:	33d0      	adds	r3, #208	@ 0xd0
 80064e8:	429c      	cmp	r4, r3
 80064ea:	d105      	bne.n	80064f8 <std+0x54>
 80064ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80064f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064f4:	f000 b982 	b.w	80067fc <__retarget_lock_init_recursive>
 80064f8:	bd10      	pop	{r4, pc}
 80064fa:	bf00      	nop
 80064fc:	08006629 	.word	0x08006629
 8006500:	0800664b 	.word	0x0800664b
 8006504:	08006683 	.word	0x08006683
 8006508:	080066a7 	.word	0x080066a7
 800650c:	200002d8 	.word	0x200002d8

08006510 <stdio_exit_handler>:
 8006510:	4a02      	ldr	r2, [pc, #8]	@ (800651c <stdio_exit_handler+0xc>)
 8006512:	4903      	ldr	r1, [pc, #12]	@ (8006520 <stdio_exit_handler+0x10>)
 8006514:	4803      	ldr	r0, [pc, #12]	@ (8006524 <stdio_exit_handler+0x14>)
 8006516:	f000 b869 	b.w	80065ec <_fwalk_sglue>
 800651a:	bf00      	nop
 800651c:	20000010 	.word	0x20000010
 8006520:	08006b49 	.word	0x08006b49
 8006524:	20000020 	.word	0x20000020

08006528 <cleanup_stdio>:
 8006528:	6841      	ldr	r1, [r0, #4]
 800652a:	4b0c      	ldr	r3, [pc, #48]	@ (800655c <cleanup_stdio+0x34>)
 800652c:	4299      	cmp	r1, r3
 800652e:	b510      	push	{r4, lr}
 8006530:	4604      	mov	r4, r0
 8006532:	d001      	beq.n	8006538 <cleanup_stdio+0x10>
 8006534:	f000 fb08 	bl	8006b48 <_fflush_r>
 8006538:	68a1      	ldr	r1, [r4, #8]
 800653a:	4b09      	ldr	r3, [pc, #36]	@ (8006560 <cleanup_stdio+0x38>)
 800653c:	4299      	cmp	r1, r3
 800653e:	d002      	beq.n	8006546 <cleanup_stdio+0x1e>
 8006540:	4620      	mov	r0, r4
 8006542:	f000 fb01 	bl	8006b48 <_fflush_r>
 8006546:	68e1      	ldr	r1, [r4, #12]
 8006548:	4b06      	ldr	r3, [pc, #24]	@ (8006564 <cleanup_stdio+0x3c>)
 800654a:	4299      	cmp	r1, r3
 800654c:	d004      	beq.n	8006558 <cleanup_stdio+0x30>
 800654e:	4620      	mov	r0, r4
 8006550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006554:	f000 baf8 	b.w	8006b48 <_fflush_r>
 8006558:	bd10      	pop	{r4, pc}
 800655a:	bf00      	nop
 800655c:	200002d8 	.word	0x200002d8
 8006560:	20000340 	.word	0x20000340
 8006564:	200003a8 	.word	0x200003a8

08006568 <global_stdio_init.part.0>:
 8006568:	b510      	push	{r4, lr}
 800656a:	4b0b      	ldr	r3, [pc, #44]	@ (8006598 <global_stdio_init.part.0+0x30>)
 800656c:	4c0b      	ldr	r4, [pc, #44]	@ (800659c <global_stdio_init.part.0+0x34>)
 800656e:	4a0c      	ldr	r2, [pc, #48]	@ (80065a0 <global_stdio_init.part.0+0x38>)
 8006570:	601a      	str	r2, [r3, #0]
 8006572:	4620      	mov	r0, r4
 8006574:	2200      	movs	r2, #0
 8006576:	2104      	movs	r1, #4
 8006578:	f7ff ff94 	bl	80064a4 <std>
 800657c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006580:	2201      	movs	r2, #1
 8006582:	2109      	movs	r1, #9
 8006584:	f7ff ff8e 	bl	80064a4 <std>
 8006588:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800658c:	2202      	movs	r2, #2
 800658e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006592:	2112      	movs	r1, #18
 8006594:	f7ff bf86 	b.w	80064a4 <std>
 8006598:	20000410 	.word	0x20000410
 800659c:	200002d8 	.word	0x200002d8
 80065a0:	08006511 	.word	0x08006511

080065a4 <__sfp_lock_acquire>:
 80065a4:	4801      	ldr	r0, [pc, #4]	@ (80065ac <__sfp_lock_acquire+0x8>)
 80065a6:	f000 b92a 	b.w	80067fe <__retarget_lock_acquire_recursive>
 80065aa:	bf00      	nop
 80065ac:	20000419 	.word	0x20000419

080065b0 <__sfp_lock_release>:
 80065b0:	4801      	ldr	r0, [pc, #4]	@ (80065b8 <__sfp_lock_release+0x8>)
 80065b2:	f000 b925 	b.w	8006800 <__retarget_lock_release_recursive>
 80065b6:	bf00      	nop
 80065b8:	20000419 	.word	0x20000419

080065bc <__sinit>:
 80065bc:	b510      	push	{r4, lr}
 80065be:	4604      	mov	r4, r0
 80065c0:	f7ff fff0 	bl	80065a4 <__sfp_lock_acquire>
 80065c4:	6a23      	ldr	r3, [r4, #32]
 80065c6:	b11b      	cbz	r3, 80065d0 <__sinit+0x14>
 80065c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065cc:	f7ff bff0 	b.w	80065b0 <__sfp_lock_release>
 80065d0:	4b04      	ldr	r3, [pc, #16]	@ (80065e4 <__sinit+0x28>)
 80065d2:	6223      	str	r3, [r4, #32]
 80065d4:	4b04      	ldr	r3, [pc, #16]	@ (80065e8 <__sinit+0x2c>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1f5      	bne.n	80065c8 <__sinit+0xc>
 80065dc:	f7ff ffc4 	bl	8006568 <global_stdio_init.part.0>
 80065e0:	e7f2      	b.n	80065c8 <__sinit+0xc>
 80065e2:	bf00      	nop
 80065e4:	08006529 	.word	0x08006529
 80065e8:	20000410 	.word	0x20000410

080065ec <_fwalk_sglue>:
 80065ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065f0:	4607      	mov	r7, r0
 80065f2:	4688      	mov	r8, r1
 80065f4:	4614      	mov	r4, r2
 80065f6:	2600      	movs	r6, #0
 80065f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80065fc:	f1b9 0901 	subs.w	r9, r9, #1
 8006600:	d505      	bpl.n	800660e <_fwalk_sglue+0x22>
 8006602:	6824      	ldr	r4, [r4, #0]
 8006604:	2c00      	cmp	r4, #0
 8006606:	d1f7      	bne.n	80065f8 <_fwalk_sglue+0xc>
 8006608:	4630      	mov	r0, r6
 800660a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800660e:	89ab      	ldrh	r3, [r5, #12]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d907      	bls.n	8006624 <_fwalk_sglue+0x38>
 8006614:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006618:	3301      	adds	r3, #1
 800661a:	d003      	beq.n	8006624 <_fwalk_sglue+0x38>
 800661c:	4629      	mov	r1, r5
 800661e:	4638      	mov	r0, r7
 8006620:	47c0      	blx	r8
 8006622:	4306      	orrs	r6, r0
 8006624:	3568      	adds	r5, #104	@ 0x68
 8006626:	e7e9      	b.n	80065fc <_fwalk_sglue+0x10>

08006628 <__sread>:
 8006628:	b510      	push	{r4, lr}
 800662a:	460c      	mov	r4, r1
 800662c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006630:	f000 f896 	bl	8006760 <_read_r>
 8006634:	2800      	cmp	r0, #0
 8006636:	bfab      	itete	ge
 8006638:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800663a:	89a3      	ldrhlt	r3, [r4, #12]
 800663c:	181b      	addge	r3, r3, r0
 800663e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006642:	bfac      	ite	ge
 8006644:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006646:	81a3      	strhlt	r3, [r4, #12]
 8006648:	bd10      	pop	{r4, pc}

0800664a <__swrite>:
 800664a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800664e:	461f      	mov	r7, r3
 8006650:	898b      	ldrh	r3, [r1, #12]
 8006652:	05db      	lsls	r3, r3, #23
 8006654:	4605      	mov	r5, r0
 8006656:	460c      	mov	r4, r1
 8006658:	4616      	mov	r6, r2
 800665a:	d505      	bpl.n	8006668 <__swrite+0x1e>
 800665c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006660:	2302      	movs	r3, #2
 8006662:	2200      	movs	r2, #0
 8006664:	f000 f86a 	bl	800673c <_lseek_r>
 8006668:	89a3      	ldrh	r3, [r4, #12]
 800666a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800666e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006672:	81a3      	strh	r3, [r4, #12]
 8006674:	4632      	mov	r2, r6
 8006676:	463b      	mov	r3, r7
 8006678:	4628      	mov	r0, r5
 800667a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800667e:	f000 b881 	b.w	8006784 <_write_r>

08006682 <__sseek>:
 8006682:	b510      	push	{r4, lr}
 8006684:	460c      	mov	r4, r1
 8006686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800668a:	f000 f857 	bl	800673c <_lseek_r>
 800668e:	1c43      	adds	r3, r0, #1
 8006690:	89a3      	ldrh	r3, [r4, #12]
 8006692:	bf15      	itete	ne
 8006694:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006696:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800669a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800669e:	81a3      	strheq	r3, [r4, #12]
 80066a0:	bf18      	it	ne
 80066a2:	81a3      	strhne	r3, [r4, #12]
 80066a4:	bd10      	pop	{r4, pc}

080066a6 <__sclose>:
 80066a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066aa:	f000 b825 	b.w	80066f8 <_close_r>

080066ae <memset>:
 80066ae:	4402      	add	r2, r0
 80066b0:	4603      	mov	r3, r0
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d100      	bne.n	80066b8 <memset+0xa>
 80066b6:	4770      	bx	lr
 80066b8:	f803 1b01 	strb.w	r1, [r3], #1
 80066bc:	e7f9      	b.n	80066b2 <memset+0x4>
	...

080066c0 <time>:
 80066c0:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 80066c2:	4b0c      	ldr	r3, [pc, #48]	@ (80066f4 <time+0x34>)
 80066c4:	f04f 36ff 	mov.w	r6, #4294967295
 80066c8:	f04f 37ff 	mov.w	r7, #4294967295
 80066cc:	4669      	mov	r1, sp
 80066ce:	4604      	mov	r4, r0
 80066d0:	2200      	movs	r2, #0
 80066d2:	6818      	ldr	r0, [r3, #0]
 80066d4:	e9cd 6700 	strd	r6, r7, [sp]
 80066d8:	f000 f81e 	bl	8006718 <_gettimeofday_r>
 80066dc:	2800      	cmp	r0, #0
 80066de:	bfb8      	it	lt
 80066e0:	e9cd 6700 	strdlt	r6, r7, [sp]
 80066e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066e8:	b10c      	cbz	r4, 80066ee <time+0x2e>
 80066ea:	e9c4 0100 	strd	r0, r1, [r4]
 80066ee:	b004      	add	sp, #16
 80066f0:	bdd0      	pop	{r4, r6, r7, pc}
 80066f2:	bf00      	nop
 80066f4:	2000001c 	.word	0x2000001c

080066f8 <_close_r>:
 80066f8:	b538      	push	{r3, r4, r5, lr}
 80066fa:	4d06      	ldr	r5, [pc, #24]	@ (8006714 <_close_r+0x1c>)
 80066fc:	2300      	movs	r3, #0
 80066fe:	4604      	mov	r4, r0
 8006700:	4608      	mov	r0, r1
 8006702:	602b      	str	r3, [r5, #0]
 8006704:	f7fb fcaa 	bl	800205c <_close>
 8006708:	1c43      	adds	r3, r0, #1
 800670a:	d102      	bne.n	8006712 <_close_r+0x1a>
 800670c:	682b      	ldr	r3, [r5, #0]
 800670e:	b103      	cbz	r3, 8006712 <_close_r+0x1a>
 8006710:	6023      	str	r3, [r4, #0]
 8006712:	bd38      	pop	{r3, r4, r5, pc}
 8006714:	20000414 	.word	0x20000414

08006718 <_gettimeofday_r>:
 8006718:	b538      	push	{r3, r4, r5, lr}
 800671a:	4d07      	ldr	r5, [pc, #28]	@ (8006738 <_gettimeofday_r+0x20>)
 800671c:	2300      	movs	r3, #0
 800671e:	4604      	mov	r4, r0
 8006720:	4608      	mov	r0, r1
 8006722:	4611      	mov	r1, r2
 8006724:	602b      	str	r3, [r5, #0]
 8006726:	f000 fe8b 	bl	8007440 <_gettimeofday>
 800672a:	1c43      	adds	r3, r0, #1
 800672c:	d102      	bne.n	8006734 <_gettimeofday_r+0x1c>
 800672e:	682b      	ldr	r3, [r5, #0]
 8006730:	b103      	cbz	r3, 8006734 <_gettimeofday_r+0x1c>
 8006732:	6023      	str	r3, [r4, #0]
 8006734:	bd38      	pop	{r3, r4, r5, pc}
 8006736:	bf00      	nop
 8006738:	20000414 	.word	0x20000414

0800673c <_lseek_r>:
 800673c:	b538      	push	{r3, r4, r5, lr}
 800673e:	4d07      	ldr	r5, [pc, #28]	@ (800675c <_lseek_r+0x20>)
 8006740:	4604      	mov	r4, r0
 8006742:	4608      	mov	r0, r1
 8006744:	4611      	mov	r1, r2
 8006746:	2200      	movs	r2, #0
 8006748:	602a      	str	r2, [r5, #0]
 800674a:	461a      	mov	r2, r3
 800674c:	f7fb fcad 	bl	80020aa <_lseek>
 8006750:	1c43      	adds	r3, r0, #1
 8006752:	d102      	bne.n	800675a <_lseek_r+0x1e>
 8006754:	682b      	ldr	r3, [r5, #0]
 8006756:	b103      	cbz	r3, 800675a <_lseek_r+0x1e>
 8006758:	6023      	str	r3, [r4, #0]
 800675a:	bd38      	pop	{r3, r4, r5, pc}
 800675c:	20000414 	.word	0x20000414

08006760 <_read_r>:
 8006760:	b538      	push	{r3, r4, r5, lr}
 8006762:	4d07      	ldr	r5, [pc, #28]	@ (8006780 <_read_r+0x20>)
 8006764:	4604      	mov	r4, r0
 8006766:	4608      	mov	r0, r1
 8006768:	4611      	mov	r1, r2
 800676a:	2200      	movs	r2, #0
 800676c:	602a      	str	r2, [r5, #0]
 800676e:	461a      	mov	r2, r3
 8006770:	f7fb fc3b 	bl	8001fea <_read>
 8006774:	1c43      	adds	r3, r0, #1
 8006776:	d102      	bne.n	800677e <_read_r+0x1e>
 8006778:	682b      	ldr	r3, [r5, #0]
 800677a:	b103      	cbz	r3, 800677e <_read_r+0x1e>
 800677c:	6023      	str	r3, [r4, #0]
 800677e:	bd38      	pop	{r3, r4, r5, pc}
 8006780:	20000414 	.word	0x20000414

08006784 <_write_r>:
 8006784:	b538      	push	{r3, r4, r5, lr}
 8006786:	4d07      	ldr	r5, [pc, #28]	@ (80067a4 <_write_r+0x20>)
 8006788:	4604      	mov	r4, r0
 800678a:	4608      	mov	r0, r1
 800678c:	4611      	mov	r1, r2
 800678e:	2200      	movs	r2, #0
 8006790:	602a      	str	r2, [r5, #0]
 8006792:	461a      	mov	r2, r3
 8006794:	f7fb fc46 	bl	8002024 <_write>
 8006798:	1c43      	adds	r3, r0, #1
 800679a:	d102      	bne.n	80067a2 <_write_r+0x1e>
 800679c:	682b      	ldr	r3, [r5, #0]
 800679e:	b103      	cbz	r3, 80067a2 <_write_r+0x1e>
 80067a0:	6023      	str	r3, [r4, #0]
 80067a2:	bd38      	pop	{r3, r4, r5, pc}
 80067a4:	20000414 	.word	0x20000414

080067a8 <__errno>:
 80067a8:	4b01      	ldr	r3, [pc, #4]	@ (80067b0 <__errno+0x8>)
 80067aa:	6818      	ldr	r0, [r3, #0]
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	2000001c 	.word	0x2000001c

080067b4 <__libc_init_array>:
 80067b4:	b570      	push	{r4, r5, r6, lr}
 80067b6:	4d0d      	ldr	r5, [pc, #52]	@ (80067ec <__libc_init_array+0x38>)
 80067b8:	4c0d      	ldr	r4, [pc, #52]	@ (80067f0 <__libc_init_array+0x3c>)
 80067ba:	1b64      	subs	r4, r4, r5
 80067bc:	10a4      	asrs	r4, r4, #2
 80067be:	2600      	movs	r6, #0
 80067c0:	42a6      	cmp	r6, r4
 80067c2:	d109      	bne.n	80067d8 <__libc_init_array+0x24>
 80067c4:	4d0b      	ldr	r5, [pc, #44]	@ (80067f4 <__libc_init_array+0x40>)
 80067c6:	4c0c      	ldr	r4, [pc, #48]	@ (80067f8 <__libc_init_array+0x44>)
 80067c8:	f000 fe42 	bl	8007450 <_init>
 80067cc:	1b64      	subs	r4, r4, r5
 80067ce:	10a4      	asrs	r4, r4, #2
 80067d0:	2600      	movs	r6, #0
 80067d2:	42a6      	cmp	r6, r4
 80067d4:	d105      	bne.n	80067e2 <__libc_init_array+0x2e>
 80067d6:	bd70      	pop	{r4, r5, r6, pc}
 80067d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80067dc:	4798      	blx	r3
 80067de:	3601      	adds	r6, #1
 80067e0:	e7ee      	b.n	80067c0 <__libc_init_array+0xc>
 80067e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80067e6:	4798      	blx	r3
 80067e8:	3601      	adds	r6, #1
 80067ea:	e7f2      	b.n	80067d2 <__libc_init_array+0x1e>
 80067ec:	08007588 	.word	0x08007588
 80067f0:	08007588 	.word	0x08007588
 80067f4:	08007588 	.word	0x08007588
 80067f8:	0800758c 	.word	0x0800758c

080067fc <__retarget_lock_init_recursive>:
 80067fc:	4770      	bx	lr

080067fe <__retarget_lock_acquire_recursive>:
 80067fe:	4770      	bx	lr

08006800 <__retarget_lock_release_recursive>:
 8006800:	4770      	bx	lr
	...

08006804 <__assert_func>:
 8006804:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006806:	4614      	mov	r4, r2
 8006808:	461a      	mov	r2, r3
 800680a:	4b09      	ldr	r3, [pc, #36]	@ (8006830 <__assert_func+0x2c>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4605      	mov	r5, r0
 8006810:	68d8      	ldr	r0, [r3, #12]
 8006812:	b954      	cbnz	r4, 800682a <__assert_func+0x26>
 8006814:	4b07      	ldr	r3, [pc, #28]	@ (8006834 <__assert_func+0x30>)
 8006816:	461c      	mov	r4, r3
 8006818:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800681c:	9100      	str	r1, [sp, #0]
 800681e:	462b      	mov	r3, r5
 8006820:	4905      	ldr	r1, [pc, #20]	@ (8006838 <__assert_func+0x34>)
 8006822:	f000 f9b9 	bl	8006b98 <fiprintf>
 8006826:	f000 f9d9 	bl	8006bdc <abort>
 800682a:	4b04      	ldr	r3, [pc, #16]	@ (800683c <__assert_func+0x38>)
 800682c:	e7f4      	b.n	8006818 <__assert_func+0x14>
 800682e:	bf00      	nop
 8006830:	2000001c 	.word	0x2000001c
 8006834:	0800754a 	.word	0x0800754a
 8006838:	0800751c 	.word	0x0800751c
 800683c:	0800750f 	.word	0x0800750f

08006840 <_free_r>:
 8006840:	b538      	push	{r3, r4, r5, lr}
 8006842:	4605      	mov	r5, r0
 8006844:	2900      	cmp	r1, #0
 8006846:	d041      	beq.n	80068cc <_free_r+0x8c>
 8006848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800684c:	1f0c      	subs	r4, r1, #4
 800684e:	2b00      	cmp	r3, #0
 8006850:	bfb8      	it	lt
 8006852:	18e4      	addlt	r4, r4, r3
 8006854:	f000 f8e8 	bl	8006a28 <__malloc_lock>
 8006858:	4a1d      	ldr	r2, [pc, #116]	@ (80068d0 <_free_r+0x90>)
 800685a:	6813      	ldr	r3, [r2, #0]
 800685c:	b933      	cbnz	r3, 800686c <_free_r+0x2c>
 800685e:	6063      	str	r3, [r4, #4]
 8006860:	6014      	str	r4, [r2, #0]
 8006862:	4628      	mov	r0, r5
 8006864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006868:	f000 b8e4 	b.w	8006a34 <__malloc_unlock>
 800686c:	42a3      	cmp	r3, r4
 800686e:	d908      	bls.n	8006882 <_free_r+0x42>
 8006870:	6820      	ldr	r0, [r4, #0]
 8006872:	1821      	adds	r1, r4, r0
 8006874:	428b      	cmp	r3, r1
 8006876:	bf01      	itttt	eq
 8006878:	6819      	ldreq	r1, [r3, #0]
 800687a:	685b      	ldreq	r3, [r3, #4]
 800687c:	1809      	addeq	r1, r1, r0
 800687e:	6021      	streq	r1, [r4, #0]
 8006880:	e7ed      	b.n	800685e <_free_r+0x1e>
 8006882:	461a      	mov	r2, r3
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	b10b      	cbz	r3, 800688c <_free_r+0x4c>
 8006888:	42a3      	cmp	r3, r4
 800688a:	d9fa      	bls.n	8006882 <_free_r+0x42>
 800688c:	6811      	ldr	r1, [r2, #0]
 800688e:	1850      	adds	r0, r2, r1
 8006890:	42a0      	cmp	r0, r4
 8006892:	d10b      	bne.n	80068ac <_free_r+0x6c>
 8006894:	6820      	ldr	r0, [r4, #0]
 8006896:	4401      	add	r1, r0
 8006898:	1850      	adds	r0, r2, r1
 800689a:	4283      	cmp	r3, r0
 800689c:	6011      	str	r1, [r2, #0]
 800689e:	d1e0      	bne.n	8006862 <_free_r+0x22>
 80068a0:	6818      	ldr	r0, [r3, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	6053      	str	r3, [r2, #4]
 80068a6:	4408      	add	r0, r1
 80068a8:	6010      	str	r0, [r2, #0]
 80068aa:	e7da      	b.n	8006862 <_free_r+0x22>
 80068ac:	d902      	bls.n	80068b4 <_free_r+0x74>
 80068ae:	230c      	movs	r3, #12
 80068b0:	602b      	str	r3, [r5, #0]
 80068b2:	e7d6      	b.n	8006862 <_free_r+0x22>
 80068b4:	6820      	ldr	r0, [r4, #0]
 80068b6:	1821      	adds	r1, r4, r0
 80068b8:	428b      	cmp	r3, r1
 80068ba:	bf04      	itt	eq
 80068bc:	6819      	ldreq	r1, [r3, #0]
 80068be:	685b      	ldreq	r3, [r3, #4]
 80068c0:	6063      	str	r3, [r4, #4]
 80068c2:	bf04      	itt	eq
 80068c4:	1809      	addeq	r1, r1, r0
 80068c6:	6021      	streq	r1, [r4, #0]
 80068c8:	6054      	str	r4, [r2, #4]
 80068ca:	e7ca      	b.n	8006862 <_free_r+0x22>
 80068cc:	bd38      	pop	{r3, r4, r5, pc}
 80068ce:	bf00      	nop
 80068d0:	20000420 	.word	0x20000420

080068d4 <malloc>:
 80068d4:	4b02      	ldr	r3, [pc, #8]	@ (80068e0 <malloc+0xc>)
 80068d6:	4601      	mov	r1, r0
 80068d8:	6818      	ldr	r0, [r3, #0]
 80068da:	f000 b825 	b.w	8006928 <_malloc_r>
 80068de:	bf00      	nop
 80068e0:	2000001c 	.word	0x2000001c

080068e4 <sbrk_aligned>:
 80068e4:	b570      	push	{r4, r5, r6, lr}
 80068e6:	4e0f      	ldr	r6, [pc, #60]	@ (8006924 <sbrk_aligned+0x40>)
 80068e8:	460c      	mov	r4, r1
 80068ea:	6831      	ldr	r1, [r6, #0]
 80068ec:	4605      	mov	r5, r0
 80068ee:	b911      	cbnz	r1, 80068f6 <sbrk_aligned+0x12>
 80068f0:	f000 f964 	bl	8006bbc <_sbrk_r>
 80068f4:	6030      	str	r0, [r6, #0]
 80068f6:	4621      	mov	r1, r4
 80068f8:	4628      	mov	r0, r5
 80068fa:	f000 f95f 	bl	8006bbc <_sbrk_r>
 80068fe:	1c43      	adds	r3, r0, #1
 8006900:	d103      	bne.n	800690a <sbrk_aligned+0x26>
 8006902:	f04f 34ff 	mov.w	r4, #4294967295
 8006906:	4620      	mov	r0, r4
 8006908:	bd70      	pop	{r4, r5, r6, pc}
 800690a:	1cc4      	adds	r4, r0, #3
 800690c:	f024 0403 	bic.w	r4, r4, #3
 8006910:	42a0      	cmp	r0, r4
 8006912:	d0f8      	beq.n	8006906 <sbrk_aligned+0x22>
 8006914:	1a21      	subs	r1, r4, r0
 8006916:	4628      	mov	r0, r5
 8006918:	f000 f950 	bl	8006bbc <_sbrk_r>
 800691c:	3001      	adds	r0, #1
 800691e:	d1f2      	bne.n	8006906 <sbrk_aligned+0x22>
 8006920:	e7ef      	b.n	8006902 <sbrk_aligned+0x1e>
 8006922:	bf00      	nop
 8006924:	2000041c 	.word	0x2000041c

08006928 <_malloc_r>:
 8006928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800692c:	1ccd      	adds	r5, r1, #3
 800692e:	f025 0503 	bic.w	r5, r5, #3
 8006932:	3508      	adds	r5, #8
 8006934:	2d0c      	cmp	r5, #12
 8006936:	bf38      	it	cc
 8006938:	250c      	movcc	r5, #12
 800693a:	2d00      	cmp	r5, #0
 800693c:	4606      	mov	r6, r0
 800693e:	db01      	blt.n	8006944 <_malloc_r+0x1c>
 8006940:	42a9      	cmp	r1, r5
 8006942:	d904      	bls.n	800694e <_malloc_r+0x26>
 8006944:	230c      	movs	r3, #12
 8006946:	6033      	str	r3, [r6, #0]
 8006948:	2000      	movs	r0, #0
 800694a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800694e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a24 <_malloc_r+0xfc>
 8006952:	f000 f869 	bl	8006a28 <__malloc_lock>
 8006956:	f8d8 3000 	ldr.w	r3, [r8]
 800695a:	461c      	mov	r4, r3
 800695c:	bb44      	cbnz	r4, 80069b0 <_malloc_r+0x88>
 800695e:	4629      	mov	r1, r5
 8006960:	4630      	mov	r0, r6
 8006962:	f7ff ffbf 	bl	80068e4 <sbrk_aligned>
 8006966:	1c43      	adds	r3, r0, #1
 8006968:	4604      	mov	r4, r0
 800696a:	d158      	bne.n	8006a1e <_malloc_r+0xf6>
 800696c:	f8d8 4000 	ldr.w	r4, [r8]
 8006970:	4627      	mov	r7, r4
 8006972:	2f00      	cmp	r7, #0
 8006974:	d143      	bne.n	80069fe <_malloc_r+0xd6>
 8006976:	2c00      	cmp	r4, #0
 8006978:	d04b      	beq.n	8006a12 <_malloc_r+0xea>
 800697a:	6823      	ldr	r3, [r4, #0]
 800697c:	4639      	mov	r1, r7
 800697e:	4630      	mov	r0, r6
 8006980:	eb04 0903 	add.w	r9, r4, r3
 8006984:	f000 f91a 	bl	8006bbc <_sbrk_r>
 8006988:	4581      	cmp	r9, r0
 800698a:	d142      	bne.n	8006a12 <_malloc_r+0xea>
 800698c:	6821      	ldr	r1, [r4, #0]
 800698e:	1a6d      	subs	r5, r5, r1
 8006990:	4629      	mov	r1, r5
 8006992:	4630      	mov	r0, r6
 8006994:	f7ff ffa6 	bl	80068e4 <sbrk_aligned>
 8006998:	3001      	adds	r0, #1
 800699a:	d03a      	beq.n	8006a12 <_malloc_r+0xea>
 800699c:	6823      	ldr	r3, [r4, #0]
 800699e:	442b      	add	r3, r5
 80069a0:	6023      	str	r3, [r4, #0]
 80069a2:	f8d8 3000 	ldr.w	r3, [r8]
 80069a6:	685a      	ldr	r2, [r3, #4]
 80069a8:	bb62      	cbnz	r2, 8006a04 <_malloc_r+0xdc>
 80069aa:	f8c8 7000 	str.w	r7, [r8]
 80069ae:	e00f      	b.n	80069d0 <_malloc_r+0xa8>
 80069b0:	6822      	ldr	r2, [r4, #0]
 80069b2:	1b52      	subs	r2, r2, r5
 80069b4:	d420      	bmi.n	80069f8 <_malloc_r+0xd0>
 80069b6:	2a0b      	cmp	r2, #11
 80069b8:	d917      	bls.n	80069ea <_malloc_r+0xc2>
 80069ba:	1961      	adds	r1, r4, r5
 80069bc:	42a3      	cmp	r3, r4
 80069be:	6025      	str	r5, [r4, #0]
 80069c0:	bf18      	it	ne
 80069c2:	6059      	strne	r1, [r3, #4]
 80069c4:	6863      	ldr	r3, [r4, #4]
 80069c6:	bf08      	it	eq
 80069c8:	f8c8 1000 	streq.w	r1, [r8]
 80069cc:	5162      	str	r2, [r4, r5]
 80069ce:	604b      	str	r3, [r1, #4]
 80069d0:	4630      	mov	r0, r6
 80069d2:	f000 f82f 	bl	8006a34 <__malloc_unlock>
 80069d6:	f104 000b 	add.w	r0, r4, #11
 80069da:	1d23      	adds	r3, r4, #4
 80069dc:	f020 0007 	bic.w	r0, r0, #7
 80069e0:	1ac2      	subs	r2, r0, r3
 80069e2:	bf1c      	itt	ne
 80069e4:	1a1b      	subne	r3, r3, r0
 80069e6:	50a3      	strne	r3, [r4, r2]
 80069e8:	e7af      	b.n	800694a <_malloc_r+0x22>
 80069ea:	6862      	ldr	r2, [r4, #4]
 80069ec:	42a3      	cmp	r3, r4
 80069ee:	bf0c      	ite	eq
 80069f0:	f8c8 2000 	streq.w	r2, [r8]
 80069f4:	605a      	strne	r2, [r3, #4]
 80069f6:	e7eb      	b.n	80069d0 <_malloc_r+0xa8>
 80069f8:	4623      	mov	r3, r4
 80069fa:	6864      	ldr	r4, [r4, #4]
 80069fc:	e7ae      	b.n	800695c <_malloc_r+0x34>
 80069fe:	463c      	mov	r4, r7
 8006a00:	687f      	ldr	r7, [r7, #4]
 8006a02:	e7b6      	b.n	8006972 <_malloc_r+0x4a>
 8006a04:	461a      	mov	r2, r3
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	42a3      	cmp	r3, r4
 8006a0a:	d1fb      	bne.n	8006a04 <_malloc_r+0xdc>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	6053      	str	r3, [r2, #4]
 8006a10:	e7de      	b.n	80069d0 <_malloc_r+0xa8>
 8006a12:	230c      	movs	r3, #12
 8006a14:	6033      	str	r3, [r6, #0]
 8006a16:	4630      	mov	r0, r6
 8006a18:	f000 f80c 	bl	8006a34 <__malloc_unlock>
 8006a1c:	e794      	b.n	8006948 <_malloc_r+0x20>
 8006a1e:	6005      	str	r5, [r0, #0]
 8006a20:	e7d6      	b.n	80069d0 <_malloc_r+0xa8>
 8006a22:	bf00      	nop
 8006a24:	20000420 	.word	0x20000420

08006a28 <__malloc_lock>:
 8006a28:	4801      	ldr	r0, [pc, #4]	@ (8006a30 <__malloc_lock+0x8>)
 8006a2a:	f7ff bee8 	b.w	80067fe <__retarget_lock_acquire_recursive>
 8006a2e:	bf00      	nop
 8006a30:	20000418 	.word	0x20000418

08006a34 <__malloc_unlock>:
 8006a34:	4801      	ldr	r0, [pc, #4]	@ (8006a3c <__malloc_unlock+0x8>)
 8006a36:	f7ff bee3 	b.w	8006800 <__retarget_lock_release_recursive>
 8006a3a:	bf00      	nop
 8006a3c:	20000418 	.word	0x20000418

08006a40 <__sflush_r>:
 8006a40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a48:	0716      	lsls	r6, r2, #28
 8006a4a:	4605      	mov	r5, r0
 8006a4c:	460c      	mov	r4, r1
 8006a4e:	d454      	bmi.n	8006afa <__sflush_r+0xba>
 8006a50:	684b      	ldr	r3, [r1, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	dc02      	bgt.n	8006a5c <__sflush_r+0x1c>
 8006a56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	dd48      	ble.n	8006aee <__sflush_r+0xae>
 8006a5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a5e:	2e00      	cmp	r6, #0
 8006a60:	d045      	beq.n	8006aee <__sflush_r+0xae>
 8006a62:	2300      	movs	r3, #0
 8006a64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006a68:	682f      	ldr	r7, [r5, #0]
 8006a6a:	6a21      	ldr	r1, [r4, #32]
 8006a6c:	602b      	str	r3, [r5, #0]
 8006a6e:	d030      	beq.n	8006ad2 <__sflush_r+0x92>
 8006a70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006a72:	89a3      	ldrh	r3, [r4, #12]
 8006a74:	0759      	lsls	r1, r3, #29
 8006a76:	d505      	bpl.n	8006a84 <__sflush_r+0x44>
 8006a78:	6863      	ldr	r3, [r4, #4]
 8006a7a:	1ad2      	subs	r2, r2, r3
 8006a7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006a7e:	b10b      	cbz	r3, 8006a84 <__sflush_r+0x44>
 8006a80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006a82:	1ad2      	subs	r2, r2, r3
 8006a84:	2300      	movs	r3, #0
 8006a86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a88:	6a21      	ldr	r1, [r4, #32]
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	47b0      	blx	r6
 8006a8e:	1c43      	adds	r3, r0, #1
 8006a90:	89a3      	ldrh	r3, [r4, #12]
 8006a92:	d106      	bne.n	8006aa2 <__sflush_r+0x62>
 8006a94:	6829      	ldr	r1, [r5, #0]
 8006a96:	291d      	cmp	r1, #29
 8006a98:	d82b      	bhi.n	8006af2 <__sflush_r+0xb2>
 8006a9a:	4a2a      	ldr	r2, [pc, #168]	@ (8006b44 <__sflush_r+0x104>)
 8006a9c:	410a      	asrs	r2, r1
 8006a9e:	07d6      	lsls	r6, r2, #31
 8006aa0:	d427      	bmi.n	8006af2 <__sflush_r+0xb2>
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	6062      	str	r2, [r4, #4]
 8006aa6:	04d9      	lsls	r1, r3, #19
 8006aa8:	6922      	ldr	r2, [r4, #16]
 8006aaa:	6022      	str	r2, [r4, #0]
 8006aac:	d504      	bpl.n	8006ab8 <__sflush_r+0x78>
 8006aae:	1c42      	adds	r2, r0, #1
 8006ab0:	d101      	bne.n	8006ab6 <__sflush_r+0x76>
 8006ab2:	682b      	ldr	r3, [r5, #0]
 8006ab4:	b903      	cbnz	r3, 8006ab8 <__sflush_r+0x78>
 8006ab6:	6560      	str	r0, [r4, #84]	@ 0x54
 8006ab8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006aba:	602f      	str	r7, [r5, #0]
 8006abc:	b1b9      	cbz	r1, 8006aee <__sflush_r+0xae>
 8006abe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ac2:	4299      	cmp	r1, r3
 8006ac4:	d002      	beq.n	8006acc <__sflush_r+0x8c>
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	f7ff feba 	bl	8006840 <_free_r>
 8006acc:	2300      	movs	r3, #0
 8006ace:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ad0:	e00d      	b.n	8006aee <__sflush_r+0xae>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	4628      	mov	r0, r5
 8006ad6:	47b0      	blx	r6
 8006ad8:	4602      	mov	r2, r0
 8006ada:	1c50      	adds	r0, r2, #1
 8006adc:	d1c9      	bne.n	8006a72 <__sflush_r+0x32>
 8006ade:	682b      	ldr	r3, [r5, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d0c6      	beq.n	8006a72 <__sflush_r+0x32>
 8006ae4:	2b1d      	cmp	r3, #29
 8006ae6:	d001      	beq.n	8006aec <__sflush_r+0xac>
 8006ae8:	2b16      	cmp	r3, #22
 8006aea:	d11e      	bne.n	8006b2a <__sflush_r+0xea>
 8006aec:	602f      	str	r7, [r5, #0]
 8006aee:	2000      	movs	r0, #0
 8006af0:	e022      	b.n	8006b38 <__sflush_r+0xf8>
 8006af2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006af6:	b21b      	sxth	r3, r3
 8006af8:	e01b      	b.n	8006b32 <__sflush_r+0xf2>
 8006afa:	690f      	ldr	r7, [r1, #16]
 8006afc:	2f00      	cmp	r7, #0
 8006afe:	d0f6      	beq.n	8006aee <__sflush_r+0xae>
 8006b00:	0793      	lsls	r3, r2, #30
 8006b02:	680e      	ldr	r6, [r1, #0]
 8006b04:	bf08      	it	eq
 8006b06:	694b      	ldreq	r3, [r1, #20]
 8006b08:	600f      	str	r7, [r1, #0]
 8006b0a:	bf18      	it	ne
 8006b0c:	2300      	movne	r3, #0
 8006b0e:	eba6 0807 	sub.w	r8, r6, r7
 8006b12:	608b      	str	r3, [r1, #8]
 8006b14:	f1b8 0f00 	cmp.w	r8, #0
 8006b18:	dde9      	ble.n	8006aee <__sflush_r+0xae>
 8006b1a:	6a21      	ldr	r1, [r4, #32]
 8006b1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006b1e:	4643      	mov	r3, r8
 8006b20:	463a      	mov	r2, r7
 8006b22:	4628      	mov	r0, r5
 8006b24:	47b0      	blx	r6
 8006b26:	2800      	cmp	r0, #0
 8006b28:	dc08      	bgt.n	8006b3c <__sflush_r+0xfc>
 8006b2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b32:	81a3      	strh	r3, [r4, #12]
 8006b34:	f04f 30ff 	mov.w	r0, #4294967295
 8006b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b3c:	4407      	add	r7, r0
 8006b3e:	eba8 0800 	sub.w	r8, r8, r0
 8006b42:	e7e7      	b.n	8006b14 <__sflush_r+0xd4>
 8006b44:	dfbffffe 	.word	0xdfbffffe

08006b48 <_fflush_r>:
 8006b48:	b538      	push	{r3, r4, r5, lr}
 8006b4a:	690b      	ldr	r3, [r1, #16]
 8006b4c:	4605      	mov	r5, r0
 8006b4e:	460c      	mov	r4, r1
 8006b50:	b913      	cbnz	r3, 8006b58 <_fflush_r+0x10>
 8006b52:	2500      	movs	r5, #0
 8006b54:	4628      	mov	r0, r5
 8006b56:	bd38      	pop	{r3, r4, r5, pc}
 8006b58:	b118      	cbz	r0, 8006b62 <_fflush_r+0x1a>
 8006b5a:	6a03      	ldr	r3, [r0, #32]
 8006b5c:	b90b      	cbnz	r3, 8006b62 <_fflush_r+0x1a>
 8006b5e:	f7ff fd2d 	bl	80065bc <__sinit>
 8006b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d0f3      	beq.n	8006b52 <_fflush_r+0xa>
 8006b6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006b6c:	07d0      	lsls	r0, r2, #31
 8006b6e:	d404      	bmi.n	8006b7a <_fflush_r+0x32>
 8006b70:	0599      	lsls	r1, r3, #22
 8006b72:	d402      	bmi.n	8006b7a <_fflush_r+0x32>
 8006b74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b76:	f7ff fe42 	bl	80067fe <__retarget_lock_acquire_recursive>
 8006b7a:	4628      	mov	r0, r5
 8006b7c:	4621      	mov	r1, r4
 8006b7e:	f7ff ff5f 	bl	8006a40 <__sflush_r>
 8006b82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b84:	07da      	lsls	r2, r3, #31
 8006b86:	4605      	mov	r5, r0
 8006b88:	d4e4      	bmi.n	8006b54 <_fflush_r+0xc>
 8006b8a:	89a3      	ldrh	r3, [r4, #12]
 8006b8c:	059b      	lsls	r3, r3, #22
 8006b8e:	d4e1      	bmi.n	8006b54 <_fflush_r+0xc>
 8006b90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b92:	f7ff fe35 	bl	8006800 <__retarget_lock_release_recursive>
 8006b96:	e7dd      	b.n	8006b54 <_fflush_r+0xc>

08006b98 <fiprintf>:
 8006b98:	b40e      	push	{r1, r2, r3}
 8006b9a:	b503      	push	{r0, r1, lr}
 8006b9c:	4601      	mov	r1, r0
 8006b9e:	ab03      	add	r3, sp, #12
 8006ba0:	4805      	ldr	r0, [pc, #20]	@ (8006bb8 <fiprintf+0x20>)
 8006ba2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ba6:	6800      	ldr	r0, [r0, #0]
 8006ba8:	9301      	str	r3, [sp, #4]
 8006baa:	f000 f847 	bl	8006c3c <_vfiprintf_r>
 8006bae:	b002      	add	sp, #8
 8006bb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bb4:	b003      	add	sp, #12
 8006bb6:	4770      	bx	lr
 8006bb8:	2000001c 	.word	0x2000001c

08006bbc <_sbrk_r>:
 8006bbc:	b538      	push	{r3, r4, r5, lr}
 8006bbe:	4d06      	ldr	r5, [pc, #24]	@ (8006bd8 <_sbrk_r+0x1c>)
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	4608      	mov	r0, r1
 8006bc6:	602b      	str	r3, [r5, #0]
 8006bc8:	f7fb fa7c 	bl	80020c4 <_sbrk>
 8006bcc:	1c43      	adds	r3, r0, #1
 8006bce:	d102      	bne.n	8006bd6 <_sbrk_r+0x1a>
 8006bd0:	682b      	ldr	r3, [r5, #0]
 8006bd2:	b103      	cbz	r3, 8006bd6 <_sbrk_r+0x1a>
 8006bd4:	6023      	str	r3, [r4, #0]
 8006bd6:	bd38      	pop	{r3, r4, r5, pc}
 8006bd8:	20000414 	.word	0x20000414

08006bdc <abort>:
 8006bdc:	b508      	push	{r3, lr}
 8006bde:	2006      	movs	r0, #6
 8006be0:	f000 fb8e 	bl	8007300 <raise>
 8006be4:	2001      	movs	r0, #1
 8006be6:	f7fb f9f5 	bl	8001fd4 <_exit>

08006bea <__sfputc_r>:
 8006bea:	6893      	ldr	r3, [r2, #8]
 8006bec:	3b01      	subs	r3, #1
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	b410      	push	{r4}
 8006bf2:	6093      	str	r3, [r2, #8]
 8006bf4:	da08      	bge.n	8006c08 <__sfputc_r+0x1e>
 8006bf6:	6994      	ldr	r4, [r2, #24]
 8006bf8:	42a3      	cmp	r3, r4
 8006bfa:	db01      	blt.n	8006c00 <__sfputc_r+0x16>
 8006bfc:	290a      	cmp	r1, #10
 8006bfe:	d103      	bne.n	8006c08 <__sfputc_r+0x1e>
 8006c00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c04:	f000 bac0 	b.w	8007188 <__swbuf_r>
 8006c08:	6813      	ldr	r3, [r2, #0]
 8006c0a:	1c58      	adds	r0, r3, #1
 8006c0c:	6010      	str	r0, [r2, #0]
 8006c0e:	7019      	strb	r1, [r3, #0]
 8006c10:	4608      	mov	r0, r1
 8006c12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <__sfputs_r>:
 8006c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c1a:	4606      	mov	r6, r0
 8006c1c:	460f      	mov	r7, r1
 8006c1e:	4614      	mov	r4, r2
 8006c20:	18d5      	adds	r5, r2, r3
 8006c22:	42ac      	cmp	r4, r5
 8006c24:	d101      	bne.n	8006c2a <__sfputs_r+0x12>
 8006c26:	2000      	movs	r0, #0
 8006c28:	e007      	b.n	8006c3a <__sfputs_r+0x22>
 8006c2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c2e:	463a      	mov	r2, r7
 8006c30:	4630      	mov	r0, r6
 8006c32:	f7ff ffda 	bl	8006bea <__sfputc_r>
 8006c36:	1c43      	adds	r3, r0, #1
 8006c38:	d1f3      	bne.n	8006c22 <__sfputs_r+0xa>
 8006c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006c3c <_vfiprintf_r>:
 8006c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c40:	460d      	mov	r5, r1
 8006c42:	b09d      	sub	sp, #116	@ 0x74
 8006c44:	4614      	mov	r4, r2
 8006c46:	4698      	mov	r8, r3
 8006c48:	4606      	mov	r6, r0
 8006c4a:	b118      	cbz	r0, 8006c54 <_vfiprintf_r+0x18>
 8006c4c:	6a03      	ldr	r3, [r0, #32]
 8006c4e:	b90b      	cbnz	r3, 8006c54 <_vfiprintf_r+0x18>
 8006c50:	f7ff fcb4 	bl	80065bc <__sinit>
 8006c54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c56:	07d9      	lsls	r1, r3, #31
 8006c58:	d405      	bmi.n	8006c66 <_vfiprintf_r+0x2a>
 8006c5a:	89ab      	ldrh	r3, [r5, #12]
 8006c5c:	059a      	lsls	r2, r3, #22
 8006c5e:	d402      	bmi.n	8006c66 <_vfiprintf_r+0x2a>
 8006c60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c62:	f7ff fdcc 	bl	80067fe <__retarget_lock_acquire_recursive>
 8006c66:	89ab      	ldrh	r3, [r5, #12]
 8006c68:	071b      	lsls	r3, r3, #28
 8006c6a:	d501      	bpl.n	8006c70 <_vfiprintf_r+0x34>
 8006c6c:	692b      	ldr	r3, [r5, #16]
 8006c6e:	b99b      	cbnz	r3, 8006c98 <_vfiprintf_r+0x5c>
 8006c70:	4629      	mov	r1, r5
 8006c72:	4630      	mov	r0, r6
 8006c74:	f000 fac6 	bl	8007204 <__swsetup_r>
 8006c78:	b170      	cbz	r0, 8006c98 <_vfiprintf_r+0x5c>
 8006c7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c7c:	07dc      	lsls	r4, r3, #31
 8006c7e:	d504      	bpl.n	8006c8a <_vfiprintf_r+0x4e>
 8006c80:	f04f 30ff 	mov.w	r0, #4294967295
 8006c84:	b01d      	add	sp, #116	@ 0x74
 8006c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c8a:	89ab      	ldrh	r3, [r5, #12]
 8006c8c:	0598      	lsls	r0, r3, #22
 8006c8e:	d4f7      	bmi.n	8006c80 <_vfiprintf_r+0x44>
 8006c90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c92:	f7ff fdb5 	bl	8006800 <__retarget_lock_release_recursive>
 8006c96:	e7f3      	b.n	8006c80 <_vfiprintf_r+0x44>
 8006c98:	2300      	movs	r3, #0
 8006c9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c9c:	2320      	movs	r3, #32
 8006c9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006ca2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ca6:	2330      	movs	r3, #48	@ 0x30
 8006ca8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006e58 <_vfiprintf_r+0x21c>
 8006cac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006cb0:	f04f 0901 	mov.w	r9, #1
 8006cb4:	4623      	mov	r3, r4
 8006cb6:	469a      	mov	sl, r3
 8006cb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cbc:	b10a      	cbz	r2, 8006cc2 <_vfiprintf_r+0x86>
 8006cbe:	2a25      	cmp	r2, #37	@ 0x25
 8006cc0:	d1f9      	bne.n	8006cb6 <_vfiprintf_r+0x7a>
 8006cc2:	ebba 0b04 	subs.w	fp, sl, r4
 8006cc6:	d00b      	beq.n	8006ce0 <_vfiprintf_r+0xa4>
 8006cc8:	465b      	mov	r3, fp
 8006cca:	4622      	mov	r2, r4
 8006ccc:	4629      	mov	r1, r5
 8006cce:	4630      	mov	r0, r6
 8006cd0:	f7ff ffa2 	bl	8006c18 <__sfputs_r>
 8006cd4:	3001      	adds	r0, #1
 8006cd6:	f000 80a7 	beq.w	8006e28 <_vfiprintf_r+0x1ec>
 8006cda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cdc:	445a      	add	r2, fp
 8006cde:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ce0:	f89a 3000 	ldrb.w	r3, [sl]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 809f 	beq.w	8006e28 <_vfiprintf_r+0x1ec>
 8006cea:	2300      	movs	r3, #0
 8006cec:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cf4:	f10a 0a01 	add.w	sl, sl, #1
 8006cf8:	9304      	str	r3, [sp, #16]
 8006cfa:	9307      	str	r3, [sp, #28]
 8006cfc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d00:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d02:	4654      	mov	r4, sl
 8006d04:	2205      	movs	r2, #5
 8006d06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d0a:	4853      	ldr	r0, [pc, #332]	@ (8006e58 <_vfiprintf_r+0x21c>)
 8006d0c:	f7f9 fa60 	bl	80001d0 <memchr>
 8006d10:	9a04      	ldr	r2, [sp, #16]
 8006d12:	b9d8      	cbnz	r0, 8006d4c <_vfiprintf_r+0x110>
 8006d14:	06d1      	lsls	r1, r2, #27
 8006d16:	bf44      	itt	mi
 8006d18:	2320      	movmi	r3, #32
 8006d1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d1e:	0713      	lsls	r3, r2, #28
 8006d20:	bf44      	itt	mi
 8006d22:	232b      	movmi	r3, #43	@ 0x2b
 8006d24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d28:	f89a 3000 	ldrb.w	r3, [sl]
 8006d2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d2e:	d015      	beq.n	8006d5c <_vfiprintf_r+0x120>
 8006d30:	9a07      	ldr	r2, [sp, #28]
 8006d32:	4654      	mov	r4, sl
 8006d34:	2000      	movs	r0, #0
 8006d36:	f04f 0c0a 	mov.w	ip, #10
 8006d3a:	4621      	mov	r1, r4
 8006d3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d40:	3b30      	subs	r3, #48	@ 0x30
 8006d42:	2b09      	cmp	r3, #9
 8006d44:	d94b      	bls.n	8006dde <_vfiprintf_r+0x1a2>
 8006d46:	b1b0      	cbz	r0, 8006d76 <_vfiprintf_r+0x13a>
 8006d48:	9207      	str	r2, [sp, #28]
 8006d4a:	e014      	b.n	8006d76 <_vfiprintf_r+0x13a>
 8006d4c:	eba0 0308 	sub.w	r3, r0, r8
 8006d50:	fa09 f303 	lsl.w	r3, r9, r3
 8006d54:	4313      	orrs	r3, r2
 8006d56:	9304      	str	r3, [sp, #16]
 8006d58:	46a2      	mov	sl, r4
 8006d5a:	e7d2      	b.n	8006d02 <_vfiprintf_r+0xc6>
 8006d5c:	9b03      	ldr	r3, [sp, #12]
 8006d5e:	1d19      	adds	r1, r3, #4
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	9103      	str	r1, [sp, #12]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	bfbb      	ittet	lt
 8006d68:	425b      	neglt	r3, r3
 8006d6a:	f042 0202 	orrlt.w	r2, r2, #2
 8006d6e:	9307      	strge	r3, [sp, #28]
 8006d70:	9307      	strlt	r3, [sp, #28]
 8006d72:	bfb8      	it	lt
 8006d74:	9204      	strlt	r2, [sp, #16]
 8006d76:	7823      	ldrb	r3, [r4, #0]
 8006d78:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d7a:	d10a      	bne.n	8006d92 <_vfiprintf_r+0x156>
 8006d7c:	7863      	ldrb	r3, [r4, #1]
 8006d7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d80:	d132      	bne.n	8006de8 <_vfiprintf_r+0x1ac>
 8006d82:	9b03      	ldr	r3, [sp, #12]
 8006d84:	1d1a      	adds	r2, r3, #4
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	9203      	str	r2, [sp, #12]
 8006d8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d8e:	3402      	adds	r4, #2
 8006d90:	9305      	str	r3, [sp, #20]
 8006d92:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006e68 <_vfiprintf_r+0x22c>
 8006d96:	7821      	ldrb	r1, [r4, #0]
 8006d98:	2203      	movs	r2, #3
 8006d9a:	4650      	mov	r0, sl
 8006d9c:	f7f9 fa18 	bl	80001d0 <memchr>
 8006da0:	b138      	cbz	r0, 8006db2 <_vfiprintf_r+0x176>
 8006da2:	9b04      	ldr	r3, [sp, #16]
 8006da4:	eba0 000a 	sub.w	r0, r0, sl
 8006da8:	2240      	movs	r2, #64	@ 0x40
 8006daa:	4082      	lsls	r2, r0
 8006dac:	4313      	orrs	r3, r2
 8006dae:	3401      	adds	r4, #1
 8006db0:	9304      	str	r3, [sp, #16]
 8006db2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006db6:	4829      	ldr	r0, [pc, #164]	@ (8006e5c <_vfiprintf_r+0x220>)
 8006db8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006dbc:	2206      	movs	r2, #6
 8006dbe:	f7f9 fa07 	bl	80001d0 <memchr>
 8006dc2:	2800      	cmp	r0, #0
 8006dc4:	d03f      	beq.n	8006e46 <_vfiprintf_r+0x20a>
 8006dc6:	4b26      	ldr	r3, [pc, #152]	@ (8006e60 <_vfiprintf_r+0x224>)
 8006dc8:	bb1b      	cbnz	r3, 8006e12 <_vfiprintf_r+0x1d6>
 8006dca:	9b03      	ldr	r3, [sp, #12]
 8006dcc:	3307      	adds	r3, #7
 8006dce:	f023 0307 	bic.w	r3, r3, #7
 8006dd2:	3308      	adds	r3, #8
 8006dd4:	9303      	str	r3, [sp, #12]
 8006dd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dd8:	443b      	add	r3, r7
 8006dda:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ddc:	e76a      	b.n	8006cb4 <_vfiprintf_r+0x78>
 8006dde:	fb0c 3202 	mla	r2, ip, r2, r3
 8006de2:	460c      	mov	r4, r1
 8006de4:	2001      	movs	r0, #1
 8006de6:	e7a8      	b.n	8006d3a <_vfiprintf_r+0xfe>
 8006de8:	2300      	movs	r3, #0
 8006dea:	3401      	adds	r4, #1
 8006dec:	9305      	str	r3, [sp, #20]
 8006dee:	4619      	mov	r1, r3
 8006df0:	f04f 0c0a 	mov.w	ip, #10
 8006df4:	4620      	mov	r0, r4
 8006df6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dfa:	3a30      	subs	r2, #48	@ 0x30
 8006dfc:	2a09      	cmp	r2, #9
 8006dfe:	d903      	bls.n	8006e08 <_vfiprintf_r+0x1cc>
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d0c6      	beq.n	8006d92 <_vfiprintf_r+0x156>
 8006e04:	9105      	str	r1, [sp, #20]
 8006e06:	e7c4      	b.n	8006d92 <_vfiprintf_r+0x156>
 8006e08:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e0c:	4604      	mov	r4, r0
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e7f0      	b.n	8006df4 <_vfiprintf_r+0x1b8>
 8006e12:	ab03      	add	r3, sp, #12
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	462a      	mov	r2, r5
 8006e18:	4b12      	ldr	r3, [pc, #72]	@ (8006e64 <_vfiprintf_r+0x228>)
 8006e1a:	a904      	add	r1, sp, #16
 8006e1c:	4630      	mov	r0, r6
 8006e1e:	f3af 8000 	nop.w
 8006e22:	4607      	mov	r7, r0
 8006e24:	1c78      	adds	r0, r7, #1
 8006e26:	d1d6      	bne.n	8006dd6 <_vfiprintf_r+0x19a>
 8006e28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e2a:	07d9      	lsls	r1, r3, #31
 8006e2c:	d405      	bmi.n	8006e3a <_vfiprintf_r+0x1fe>
 8006e2e:	89ab      	ldrh	r3, [r5, #12]
 8006e30:	059a      	lsls	r2, r3, #22
 8006e32:	d402      	bmi.n	8006e3a <_vfiprintf_r+0x1fe>
 8006e34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e36:	f7ff fce3 	bl	8006800 <__retarget_lock_release_recursive>
 8006e3a:	89ab      	ldrh	r3, [r5, #12]
 8006e3c:	065b      	lsls	r3, r3, #25
 8006e3e:	f53f af1f 	bmi.w	8006c80 <_vfiprintf_r+0x44>
 8006e42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e44:	e71e      	b.n	8006c84 <_vfiprintf_r+0x48>
 8006e46:	ab03      	add	r3, sp, #12
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	462a      	mov	r2, r5
 8006e4c:	4b05      	ldr	r3, [pc, #20]	@ (8006e64 <_vfiprintf_r+0x228>)
 8006e4e:	a904      	add	r1, sp, #16
 8006e50:	4630      	mov	r0, r6
 8006e52:	f000 f879 	bl	8006f48 <_printf_i>
 8006e56:	e7e4      	b.n	8006e22 <_vfiprintf_r+0x1e6>
 8006e58:	0800754b 	.word	0x0800754b
 8006e5c:	08007555 	.word	0x08007555
 8006e60:	00000000 	.word	0x00000000
 8006e64:	08006c19 	.word	0x08006c19
 8006e68:	08007551 	.word	0x08007551

08006e6c <_printf_common>:
 8006e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e70:	4616      	mov	r6, r2
 8006e72:	4698      	mov	r8, r3
 8006e74:	688a      	ldr	r2, [r1, #8]
 8006e76:	690b      	ldr	r3, [r1, #16]
 8006e78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	bfb8      	it	lt
 8006e80:	4613      	movlt	r3, r2
 8006e82:	6033      	str	r3, [r6, #0]
 8006e84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e88:	4607      	mov	r7, r0
 8006e8a:	460c      	mov	r4, r1
 8006e8c:	b10a      	cbz	r2, 8006e92 <_printf_common+0x26>
 8006e8e:	3301      	adds	r3, #1
 8006e90:	6033      	str	r3, [r6, #0]
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	0699      	lsls	r1, r3, #26
 8006e96:	bf42      	ittt	mi
 8006e98:	6833      	ldrmi	r3, [r6, #0]
 8006e9a:	3302      	addmi	r3, #2
 8006e9c:	6033      	strmi	r3, [r6, #0]
 8006e9e:	6825      	ldr	r5, [r4, #0]
 8006ea0:	f015 0506 	ands.w	r5, r5, #6
 8006ea4:	d106      	bne.n	8006eb4 <_printf_common+0x48>
 8006ea6:	f104 0a19 	add.w	sl, r4, #25
 8006eaa:	68e3      	ldr	r3, [r4, #12]
 8006eac:	6832      	ldr	r2, [r6, #0]
 8006eae:	1a9b      	subs	r3, r3, r2
 8006eb0:	42ab      	cmp	r3, r5
 8006eb2:	dc26      	bgt.n	8006f02 <_printf_common+0x96>
 8006eb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006eb8:	6822      	ldr	r2, [r4, #0]
 8006eba:	3b00      	subs	r3, #0
 8006ebc:	bf18      	it	ne
 8006ebe:	2301      	movne	r3, #1
 8006ec0:	0692      	lsls	r2, r2, #26
 8006ec2:	d42b      	bmi.n	8006f1c <_printf_common+0xb0>
 8006ec4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ec8:	4641      	mov	r1, r8
 8006eca:	4638      	mov	r0, r7
 8006ecc:	47c8      	blx	r9
 8006ece:	3001      	adds	r0, #1
 8006ed0:	d01e      	beq.n	8006f10 <_printf_common+0xa4>
 8006ed2:	6823      	ldr	r3, [r4, #0]
 8006ed4:	6922      	ldr	r2, [r4, #16]
 8006ed6:	f003 0306 	and.w	r3, r3, #6
 8006eda:	2b04      	cmp	r3, #4
 8006edc:	bf02      	ittt	eq
 8006ede:	68e5      	ldreq	r5, [r4, #12]
 8006ee0:	6833      	ldreq	r3, [r6, #0]
 8006ee2:	1aed      	subeq	r5, r5, r3
 8006ee4:	68a3      	ldr	r3, [r4, #8]
 8006ee6:	bf0c      	ite	eq
 8006ee8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006eec:	2500      	movne	r5, #0
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	bfc4      	itt	gt
 8006ef2:	1a9b      	subgt	r3, r3, r2
 8006ef4:	18ed      	addgt	r5, r5, r3
 8006ef6:	2600      	movs	r6, #0
 8006ef8:	341a      	adds	r4, #26
 8006efa:	42b5      	cmp	r5, r6
 8006efc:	d11a      	bne.n	8006f34 <_printf_common+0xc8>
 8006efe:	2000      	movs	r0, #0
 8006f00:	e008      	b.n	8006f14 <_printf_common+0xa8>
 8006f02:	2301      	movs	r3, #1
 8006f04:	4652      	mov	r2, sl
 8006f06:	4641      	mov	r1, r8
 8006f08:	4638      	mov	r0, r7
 8006f0a:	47c8      	blx	r9
 8006f0c:	3001      	adds	r0, #1
 8006f0e:	d103      	bne.n	8006f18 <_printf_common+0xac>
 8006f10:	f04f 30ff 	mov.w	r0, #4294967295
 8006f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f18:	3501      	adds	r5, #1
 8006f1a:	e7c6      	b.n	8006eaa <_printf_common+0x3e>
 8006f1c:	18e1      	adds	r1, r4, r3
 8006f1e:	1c5a      	adds	r2, r3, #1
 8006f20:	2030      	movs	r0, #48	@ 0x30
 8006f22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f26:	4422      	add	r2, r4
 8006f28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f30:	3302      	adds	r3, #2
 8006f32:	e7c7      	b.n	8006ec4 <_printf_common+0x58>
 8006f34:	2301      	movs	r3, #1
 8006f36:	4622      	mov	r2, r4
 8006f38:	4641      	mov	r1, r8
 8006f3a:	4638      	mov	r0, r7
 8006f3c:	47c8      	blx	r9
 8006f3e:	3001      	adds	r0, #1
 8006f40:	d0e6      	beq.n	8006f10 <_printf_common+0xa4>
 8006f42:	3601      	adds	r6, #1
 8006f44:	e7d9      	b.n	8006efa <_printf_common+0x8e>
	...

08006f48 <_printf_i>:
 8006f48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f4c:	7e0f      	ldrb	r7, [r1, #24]
 8006f4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f50:	2f78      	cmp	r7, #120	@ 0x78
 8006f52:	4691      	mov	r9, r2
 8006f54:	4680      	mov	r8, r0
 8006f56:	460c      	mov	r4, r1
 8006f58:	469a      	mov	sl, r3
 8006f5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f5e:	d807      	bhi.n	8006f70 <_printf_i+0x28>
 8006f60:	2f62      	cmp	r7, #98	@ 0x62
 8006f62:	d80a      	bhi.n	8006f7a <_printf_i+0x32>
 8006f64:	2f00      	cmp	r7, #0
 8006f66:	f000 80d2 	beq.w	800710e <_printf_i+0x1c6>
 8006f6a:	2f58      	cmp	r7, #88	@ 0x58
 8006f6c:	f000 80b9 	beq.w	80070e2 <_printf_i+0x19a>
 8006f70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f78:	e03a      	b.n	8006ff0 <_printf_i+0xa8>
 8006f7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f7e:	2b15      	cmp	r3, #21
 8006f80:	d8f6      	bhi.n	8006f70 <_printf_i+0x28>
 8006f82:	a101      	add	r1, pc, #4	@ (adr r1, 8006f88 <_printf_i+0x40>)
 8006f84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f88:	08006fe1 	.word	0x08006fe1
 8006f8c:	08006ff5 	.word	0x08006ff5
 8006f90:	08006f71 	.word	0x08006f71
 8006f94:	08006f71 	.word	0x08006f71
 8006f98:	08006f71 	.word	0x08006f71
 8006f9c:	08006f71 	.word	0x08006f71
 8006fa0:	08006ff5 	.word	0x08006ff5
 8006fa4:	08006f71 	.word	0x08006f71
 8006fa8:	08006f71 	.word	0x08006f71
 8006fac:	08006f71 	.word	0x08006f71
 8006fb0:	08006f71 	.word	0x08006f71
 8006fb4:	080070f5 	.word	0x080070f5
 8006fb8:	0800701f 	.word	0x0800701f
 8006fbc:	080070af 	.word	0x080070af
 8006fc0:	08006f71 	.word	0x08006f71
 8006fc4:	08006f71 	.word	0x08006f71
 8006fc8:	08007117 	.word	0x08007117
 8006fcc:	08006f71 	.word	0x08006f71
 8006fd0:	0800701f 	.word	0x0800701f
 8006fd4:	08006f71 	.word	0x08006f71
 8006fd8:	08006f71 	.word	0x08006f71
 8006fdc:	080070b7 	.word	0x080070b7
 8006fe0:	6833      	ldr	r3, [r6, #0]
 8006fe2:	1d1a      	adds	r2, r3, #4
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	6032      	str	r2, [r6, #0]
 8006fe8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e09d      	b.n	8007130 <_printf_i+0x1e8>
 8006ff4:	6833      	ldr	r3, [r6, #0]
 8006ff6:	6820      	ldr	r0, [r4, #0]
 8006ff8:	1d19      	adds	r1, r3, #4
 8006ffa:	6031      	str	r1, [r6, #0]
 8006ffc:	0606      	lsls	r6, r0, #24
 8006ffe:	d501      	bpl.n	8007004 <_printf_i+0xbc>
 8007000:	681d      	ldr	r5, [r3, #0]
 8007002:	e003      	b.n	800700c <_printf_i+0xc4>
 8007004:	0645      	lsls	r5, r0, #25
 8007006:	d5fb      	bpl.n	8007000 <_printf_i+0xb8>
 8007008:	f9b3 5000 	ldrsh.w	r5, [r3]
 800700c:	2d00      	cmp	r5, #0
 800700e:	da03      	bge.n	8007018 <_printf_i+0xd0>
 8007010:	232d      	movs	r3, #45	@ 0x2d
 8007012:	426d      	negs	r5, r5
 8007014:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007018:	4859      	ldr	r0, [pc, #356]	@ (8007180 <_printf_i+0x238>)
 800701a:	230a      	movs	r3, #10
 800701c:	e011      	b.n	8007042 <_printf_i+0xfa>
 800701e:	6821      	ldr	r1, [r4, #0]
 8007020:	6833      	ldr	r3, [r6, #0]
 8007022:	0608      	lsls	r0, r1, #24
 8007024:	f853 5b04 	ldr.w	r5, [r3], #4
 8007028:	d402      	bmi.n	8007030 <_printf_i+0xe8>
 800702a:	0649      	lsls	r1, r1, #25
 800702c:	bf48      	it	mi
 800702e:	b2ad      	uxthmi	r5, r5
 8007030:	2f6f      	cmp	r7, #111	@ 0x6f
 8007032:	4853      	ldr	r0, [pc, #332]	@ (8007180 <_printf_i+0x238>)
 8007034:	6033      	str	r3, [r6, #0]
 8007036:	bf14      	ite	ne
 8007038:	230a      	movne	r3, #10
 800703a:	2308      	moveq	r3, #8
 800703c:	2100      	movs	r1, #0
 800703e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007042:	6866      	ldr	r6, [r4, #4]
 8007044:	60a6      	str	r6, [r4, #8]
 8007046:	2e00      	cmp	r6, #0
 8007048:	bfa2      	ittt	ge
 800704a:	6821      	ldrge	r1, [r4, #0]
 800704c:	f021 0104 	bicge.w	r1, r1, #4
 8007050:	6021      	strge	r1, [r4, #0]
 8007052:	b90d      	cbnz	r5, 8007058 <_printf_i+0x110>
 8007054:	2e00      	cmp	r6, #0
 8007056:	d04b      	beq.n	80070f0 <_printf_i+0x1a8>
 8007058:	4616      	mov	r6, r2
 800705a:	fbb5 f1f3 	udiv	r1, r5, r3
 800705e:	fb03 5711 	mls	r7, r3, r1, r5
 8007062:	5dc7      	ldrb	r7, [r0, r7]
 8007064:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007068:	462f      	mov	r7, r5
 800706a:	42bb      	cmp	r3, r7
 800706c:	460d      	mov	r5, r1
 800706e:	d9f4      	bls.n	800705a <_printf_i+0x112>
 8007070:	2b08      	cmp	r3, #8
 8007072:	d10b      	bne.n	800708c <_printf_i+0x144>
 8007074:	6823      	ldr	r3, [r4, #0]
 8007076:	07df      	lsls	r7, r3, #31
 8007078:	d508      	bpl.n	800708c <_printf_i+0x144>
 800707a:	6923      	ldr	r3, [r4, #16]
 800707c:	6861      	ldr	r1, [r4, #4]
 800707e:	4299      	cmp	r1, r3
 8007080:	bfde      	ittt	le
 8007082:	2330      	movle	r3, #48	@ 0x30
 8007084:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007088:	f106 36ff 	addle.w	r6, r6, #4294967295
 800708c:	1b92      	subs	r2, r2, r6
 800708e:	6122      	str	r2, [r4, #16]
 8007090:	f8cd a000 	str.w	sl, [sp]
 8007094:	464b      	mov	r3, r9
 8007096:	aa03      	add	r2, sp, #12
 8007098:	4621      	mov	r1, r4
 800709a:	4640      	mov	r0, r8
 800709c:	f7ff fee6 	bl	8006e6c <_printf_common>
 80070a0:	3001      	adds	r0, #1
 80070a2:	d14a      	bne.n	800713a <_printf_i+0x1f2>
 80070a4:	f04f 30ff 	mov.w	r0, #4294967295
 80070a8:	b004      	add	sp, #16
 80070aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ae:	6823      	ldr	r3, [r4, #0]
 80070b0:	f043 0320 	orr.w	r3, r3, #32
 80070b4:	6023      	str	r3, [r4, #0]
 80070b6:	4833      	ldr	r0, [pc, #204]	@ (8007184 <_printf_i+0x23c>)
 80070b8:	2778      	movs	r7, #120	@ 0x78
 80070ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	6831      	ldr	r1, [r6, #0]
 80070c2:	061f      	lsls	r7, r3, #24
 80070c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80070c8:	d402      	bmi.n	80070d0 <_printf_i+0x188>
 80070ca:	065f      	lsls	r7, r3, #25
 80070cc:	bf48      	it	mi
 80070ce:	b2ad      	uxthmi	r5, r5
 80070d0:	6031      	str	r1, [r6, #0]
 80070d2:	07d9      	lsls	r1, r3, #31
 80070d4:	bf44      	itt	mi
 80070d6:	f043 0320 	orrmi.w	r3, r3, #32
 80070da:	6023      	strmi	r3, [r4, #0]
 80070dc:	b11d      	cbz	r5, 80070e6 <_printf_i+0x19e>
 80070de:	2310      	movs	r3, #16
 80070e0:	e7ac      	b.n	800703c <_printf_i+0xf4>
 80070e2:	4827      	ldr	r0, [pc, #156]	@ (8007180 <_printf_i+0x238>)
 80070e4:	e7e9      	b.n	80070ba <_printf_i+0x172>
 80070e6:	6823      	ldr	r3, [r4, #0]
 80070e8:	f023 0320 	bic.w	r3, r3, #32
 80070ec:	6023      	str	r3, [r4, #0]
 80070ee:	e7f6      	b.n	80070de <_printf_i+0x196>
 80070f0:	4616      	mov	r6, r2
 80070f2:	e7bd      	b.n	8007070 <_printf_i+0x128>
 80070f4:	6833      	ldr	r3, [r6, #0]
 80070f6:	6825      	ldr	r5, [r4, #0]
 80070f8:	6961      	ldr	r1, [r4, #20]
 80070fa:	1d18      	adds	r0, r3, #4
 80070fc:	6030      	str	r0, [r6, #0]
 80070fe:	062e      	lsls	r6, r5, #24
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	d501      	bpl.n	8007108 <_printf_i+0x1c0>
 8007104:	6019      	str	r1, [r3, #0]
 8007106:	e002      	b.n	800710e <_printf_i+0x1c6>
 8007108:	0668      	lsls	r0, r5, #25
 800710a:	d5fb      	bpl.n	8007104 <_printf_i+0x1bc>
 800710c:	8019      	strh	r1, [r3, #0]
 800710e:	2300      	movs	r3, #0
 8007110:	6123      	str	r3, [r4, #16]
 8007112:	4616      	mov	r6, r2
 8007114:	e7bc      	b.n	8007090 <_printf_i+0x148>
 8007116:	6833      	ldr	r3, [r6, #0]
 8007118:	1d1a      	adds	r2, r3, #4
 800711a:	6032      	str	r2, [r6, #0]
 800711c:	681e      	ldr	r6, [r3, #0]
 800711e:	6862      	ldr	r2, [r4, #4]
 8007120:	2100      	movs	r1, #0
 8007122:	4630      	mov	r0, r6
 8007124:	f7f9 f854 	bl	80001d0 <memchr>
 8007128:	b108      	cbz	r0, 800712e <_printf_i+0x1e6>
 800712a:	1b80      	subs	r0, r0, r6
 800712c:	6060      	str	r0, [r4, #4]
 800712e:	6863      	ldr	r3, [r4, #4]
 8007130:	6123      	str	r3, [r4, #16]
 8007132:	2300      	movs	r3, #0
 8007134:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007138:	e7aa      	b.n	8007090 <_printf_i+0x148>
 800713a:	6923      	ldr	r3, [r4, #16]
 800713c:	4632      	mov	r2, r6
 800713e:	4649      	mov	r1, r9
 8007140:	4640      	mov	r0, r8
 8007142:	47d0      	blx	sl
 8007144:	3001      	adds	r0, #1
 8007146:	d0ad      	beq.n	80070a4 <_printf_i+0x15c>
 8007148:	6823      	ldr	r3, [r4, #0]
 800714a:	079b      	lsls	r3, r3, #30
 800714c:	d413      	bmi.n	8007176 <_printf_i+0x22e>
 800714e:	68e0      	ldr	r0, [r4, #12]
 8007150:	9b03      	ldr	r3, [sp, #12]
 8007152:	4298      	cmp	r0, r3
 8007154:	bfb8      	it	lt
 8007156:	4618      	movlt	r0, r3
 8007158:	e7a6      	b.n	80070a8 <_printf_i+0x160>
 800715a:	2301      	movs	r3, #1
 800715c:	4632      	mov	r2, r6
 800715e:	4649      	mov	r1, r9
 8007160:	4640      	mov	r0, r8
 8007162:	47d0      	blx	sl
 8007164:	3001      	adds	r0, #1
 8007166:	d09d      	beq.n	80070a4 <_printf_i+0x15c>
 8007168:	3501      	adds	r5, #1
 800716a:	68e3      	ldr	r3, [r4, #12]
 800716c:	9903      	ldr	r1, [sp, #12]
 800716e:	1a5b      	subs	r3, r3, r1
 8007170:	42ab      	cmp	r3, r5
 8007172:	dcf2      	bgt.n	800715a <_printf_i+0x212>
 8007174:	e7eb      	b.n	800714e <_printf_i+0x206>
 8007176:	2500      	movs	r5, #0
 8007178:	f104 0619 	add.w	r6, r4, #25
 800717c:	e7f5      	b.n	800716a <_printf_i+0x222>
 800717e:	bf00      	nop
 8007180:	0800755c 	.word	0x0800755c
 8007184:	0800756d 	.word	0x0800756d

08007188 <__swbuf_r>:
 8007188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800718a:	460e      	mov	r6, r1
 800718c:	4614      	mov	r4, r2
 800718e:	4605      	mov	r5, r0
 8007190:	b118      	cbz	r0, 800719a <__swbuf_r+0x12>
 8007192:	6a03      	ldr	r3, [r0, #32]
 8007194:	b90b      	cbnz	r3, 800719a <__swbuf_r+0x12>
 8007196:	f7ff fa11 	bl	80065bc <__sinit>
 800719a:	69a3      	ldr	r3, [r4, #24]
 800719c:	60a3      	str	r3, [r4, #8]
 800719e:	89a3      	ldrh	r3, [r4, #12]
 80071a0:	071a      	lsls	r2, r3, #28
 80071a2:	d501      	bpl.n	80071a8 <__swbuf_r+0x20>
 80071a4:	6923      	ldr	r3, [r4, #16]
 80071a6:	b943      	cbnz	r3, 80071ba <__swbuf_r+0x32>
 80071a8:	4621      	mov	r1, r4
 80071aa:	4628      	mov	r0, r5
 80071ac:	f000 f82a 	bl	8007204 <__swsetup_r>
 80071b0:	b118      	cbz	r0, 80071ba <__swbuf_r+0x32>
 80071b2:	f04f 37ff 	mov.w	r7, #4294967295
 80071b6:	4638      	mov	r0, r7
 80071b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071ba:	6823      	ldr	r3, [r4, #0]
 80071bc:	6922      	ldr	r2, [r4, #16]
 80071be:	1a98      	subs	r0, r3, r2
 80071c0:	6963      	ldr	r3, [r4, #20]
 80071c2:	b2f6      	uxtb	r6, r6
 80071c4:	4283      	cmp	r3, r0
 80071c6:	4637      	mov	r7, r6
 80071c8:	dc05      	bgt.n	80071d6 <__swbuf_r+0x4e>
 80071ca:	4621      	mov	r1, r4
 80071cc:	4628      	mov	r0, r5
 80071ce:	f7ff fcbb 	bl	8006b48 <_fflush_r>
 80071d2:	2800      	cmp	r0, #0
 80071d4:	d1ed      	bne.n	80071b2 <__swbuf_r+0x2a>
 80071d6:	68a3      	ldr	r3, [r4, #8]
 80071d8:	3b01      	subs	r3, #1
 80071da:	60a3      	str	r3, [r4, #8]
 80071dc:	6823      	ldr	r3, [r4, #0]
 80071de:	1c5a      	adds	r2, r3, #1
 80071e0:	6022      	str	r2, [r4, #0]
 80071e2:	701e      	strb	r6, [r3, #0]
 80071e4:	6962      	ldr	r2, [r4, #20]
 80071e6:	1c43      	adds	r3, r0, #1
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d004      	beq.n	80071f6 <__swbuf_r+0x6e>
 80071ec:	89a3      	ldrh	r3, [r4, #12]
 80071ee:	07db      	lsls	r3, r3, #31
 80071f0:	d5e1      	bpl.n	80071b6 <__swbuf_r+0x2e>
 80071f2:	2e0a      	cmp	r6, #10
 80071f4:	d1df      	bne.n	80071b6 <__swbuf_r+0x2e>
 80071f6:	4621      	mov	r1, r4
 80071f8:	4628      	mov	r0, r5
 80071fa:	f7ff fca5 	bl	8006b48 <_fflush_r>
 80071fe:	2800      	cmp	r0, #0
 8007200:	d0d9      	beq.n	80071b6 <__swbuf_r+0x2e>
 8007202:	e7d6      	b.n	80071b2 <__swbuf_r+0x2a>

08007204 <__swsetup_r>:
 8007204:	b538      	push	{r3, r4, r5, lr}
 8007206:	4b29      	ldr	r3, [pc, #164]	@ (80072ac <__swsetup_r+0xa8>)
 8007208:	4605      	mov	r5, r0
 800720a:	6818      	ldr	r0, [r3, #0]
 800720c:	460c      	mov	r4, r1
 800720e:	b118      	cbz	r0, 8007218 <__swsetup_r+0x14>
 8007210:	6a03      	ldr	r3, [r0, #32]
 8007212:	b90b      	cbnz	r3, 8007218 <__swsetup_r+0x14>
 8007214:	f7ff f9d2 	bl	80065bc <__sinit>
 8007218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800721c:	0719      	lsls	r1, r3, #28
 800721e:	d422      	bmi.n	8007266 <__swsetup_r+0x62>
 8007220:	06da      	lsls	r2, r3, #27
 8007222:	d407      	bmi.n	8007234 <__swsetup_r+0x30>
 8007224:	2209      	movs	r2, #9
 8007226:	602a      	str	r2, [r5, #0]
 8007228:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800722c:	81a3      	strh	r3, [r4, #12]
 800722e:	f04f 30ff 	mov.w	r0, #4294967295
 8007232:	e033      	b.n	800729c <__swsetup_r+0x98>
 8007234:	0758      	lsls	r0, r3, #29
 8007236:	d512      	bpl.n	800725e <__swsetup_r+0x5a>
 8007238:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800723a:	b141      	cbz	r1, 800724e <__swsetup_r+0x4a>
 800723c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007240:	4299      	cmp	r1, r3
 8007242:	d002      	beq.n	800724a <__swsetup_r+0x46>
 8007244:	4628      	mov	r0, r5
 8007246:	f7ff fafb 	bl	8006840 <_free_r>
 800724a:	2300      	movs	r3, #0
 800724c:	6363      	str	r3, [r4, #52]	@ 0x34
 800724e:	89a3      	ldrh	r3, [r4, #12]
 8007250:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007254:	81a3      	strh	r3, [r4, #12]
 8007256:	2300      	movs	r3, #0
 8007258:	6063      	str	r3, [r4, #4]
 800725a:	6923      	ldr	r3, [r4, #16]
 800725c:	6023      	str	r3, [r4, #0]
 800725e:	89a3      	ldrh	r3, [r4, #12]
 8007260:	f043 0308 	orr.w	r3, r3, #8
 8007264:	81a3      	strh	r3, [r4, #12]
 8007266:	6923      	ldr	r3, [r4, #16]
 8007268:	b94b      	cbnz	r3, 800727e <__swsetup_r+0x7a>
 800726a:	89a3      	ldrh	r3, [r4, #12]
 800726c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007270:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007274:	d003      	beq.n	800727e <__swsetup_r+0x7a>
 8007276:	4621      	mov	r1, r4
 8007278:	4628      	mov	r0, r5
 800727a:	f000 f883 	bl	8007384 <__smakebuf_r>
 800727e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007282:	f013 0201 	ands.w	r2, r3, #1
 8007286:	d00a      	beq.n	800729e <__swsetup_r+0x9a>
 8007288:	2200      	movs	r2, #0
 800728a:	60a2      	str	r2, [r4, #8]
 800728c:	6962      	ldr	r2, [r4, #20]
 800728e:	4252      	negs	r2, r2
 8007290:	61a2      	str	r2, [r4, #24]
 8007292:	6922      	ldr	r2, [r4, #16]
 8007294:	b942      	cbnz	r2, 80072a8 <__swsetup_r+0xa4>
 8007296:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800729a:	d1c5      	bne.n	8007228 <__swsetup_r+0x24>
 800729c:	bd38      	pop	{r3, r4, r5, pc}
 800729e:	0799      	lsls	r1, r3, #30
 80072a0:	bf58      	it	pl
 80072a2:	6962      	ldrpl	r2, [r4, #20]
 80072a4:	60a2      	str	r2, [r4, #8]
 80072a6:	e7f4      	b.n	8007292 <__swsetup_r+0x8e>
 80072a8:	2000      	movs	r0, #0
 80072aa:	e7f7      	b.n	800729c <__swsetup_r+0x98>
 80072ac:	2000001c 	.word	0x2000001c

080072b0 <_raise_r>:
 80072b0:	291f      	cmp	r1, #31
 80072b2:	b538      	push	{r3, r4, r5, lr}
 80072b4:	4605      	mov	r5, r0
 80072b6:	460c      	mov	r4, r1
 80072b8:	d904      	bls.n	80072c4 <_raise_r+0x14>
 80072ba:	2316      	movs	r3, #22
 80072bc:	6003      	str	r3, [r0, #0]
 80072be:	f04f 30ff 	mov.w	r0, #4294967295
 80072c2:	bd38      	pop	{r3, r4, r5, pc}
 80072c4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80072c6:	b112      	cbz	r2, 80072ce <_raise_r+0x1e>
 80072c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80072cc:	b94b      	cbnz	r3, 80072e2 <_raise_r+0x32>
 80072ce:	4628      	mov	r0, r5
 80072d0:	f000 f830 	bl	8007334 <_getpid_r>
 80072d4:	4622      	mov	r2, r4
 80072d6:	4601      	mov	r1, r0
 80072d8:	4628      	mov	r0, r5
 80072da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072de:	f000 b817 	b.w	8007310 <_kill_r>
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d00a      	beq.n	80072fc <_raise_r+0x4c>
 80072e6:	1c59      	adds	r1, r3, #1
 80072e8:	d103      	bne.n	80072f2 <_raise_r+0x42>
 80072ea:	2316      	movs	r3, #22
 80072ec:	6003      	str	r3, [r0, #0]
 80072ee:	2001      	movs	r0, #1
 80072f0:	e7e7      	b.n	80072c2 <_raise_r+0x12>
 80072f2:	2100      	movs	r1, #0
 80072f4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80072f8:	4620      	mov	r0, r4
 80072fa:	4798      	blx	r3
 80072fc:	2000      	movs	r0, #0
 80072fe:	e7e0      	b.n	80072c2 <_raise_r+0x12>

08007300 <raise>:
 8007300:	4b02      	ldr	r3, [pc, #8]	@ (800730c <raise+0xc>)
 8007302:	4601      	mov	r1, r0
 8007304:	6818      	ldr	r0, [r3, #0]
 8007306:	f7ff bfd3 	b.w	80072b0 <_raise_r>
 800730a:	bf00      	nop
 800730c:	2000001c 	.word	0x2000001c

08007310 <_kill_r>:
 8007310:	b538      	push	{r3, r4, r5, lr}
 8007312:	4d07      	ldr	r5, [pc, #28]	@ (8007330 <_kill_r+0x20>)
 8007314:	2300      	movs	r3, #0
 8007316:	4604      	mov	r4, r0
 8007318:	4608      	mov	r0, r1
 800731a:	4611      	mov	r1, r2
 800731c:	602b      	str	r3, [r5, #0]
 800731e:	f7fa fe49 	bl	8001fb4 <_kill>
 8007322:	1c43      	adds	r3, r0, #1
 8007324:	d102      	bne.n	800732c <_kill_r+0x1c>
 8007326:	682b      	ldr	r3, [r5, #0]
 8007328:	b103      	cbz	r3, 800732c <_kill_r+0x1c>
 800732a:	6023      	str	r3, [r4, #0]
 800732c:	bd38      	pop	{r3, r4, r5, pc}
 800732e:	bf00      	nop
 8007330:	20000414 	.word	0x20000414

08007334 <_getpid_r>:
 8007334:	f7fa be36 	b.w	8001fa4 <_getpid>

08007338 <__swhatbuf_r>:
 8007338:	b570      	push	{r4, r5, r6, lr}
 800733a:	460c      	mov	r4, r1
 800733c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007340:	2900      	cmp	r1, #0
 8007342:	b096      	sub	sp, #88	@ 0x58
 8007344:	4615      	mov	r5, r2
 8007346:	461e      	mov	r6, r3
 8007348:	da0d      	bge.n	8007366 <__swhatbuf_r+0x2e>
 800734a:	89a3      	ldrh	r3, [r4, #12]
 800734c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007350:	f04f 0100 	mov.w	r1, #0
 8007354:	bf14      	ite	ne
 8007356:	2340      	movne	r3, #64	@ 0x40
 8007358:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800735c:	2000      	movs	r0, #0
 800735e:	6031      	str	r1, [r6, #0]
 8007360:	602b      	str	r3, [r5, #0]
 8007362:	b016      	add	sp, #88	@ 0x58
 8007364:	bd70      	pop	{r4, r5, r6, pc}
 8007366:	466a      	mov	r2, sp
 8007368:	f000 f848 	bl	80073fc <_fstat_r>
 800736c:	2800      	cmp	r0, #0
 800736e:	dbec      	blt.n	800734a <__swhatbuf_r+0x12>
 8007370:	9901      	ldr	r1, [sp, #4]
 8007372:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007376:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800737a:	4259      	negs	r1, r3
 800737c:	4159      	adcs	r1, r3
 800737e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007382:	e7eb      	b.n	800735c <__swhatbuf_r+0x24>

08007384 <__smakebuf_r>:
 8007384:	898b      	ldrh	r3, [r1, #12]
 8007386:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007388:	079d      	lsls	r5, r3, #30
 800738a:	4606      	mov	r6, r0
 800738c:	460c      	mov	r4, r1
 800738e:	d507      	bpl.n	80073a0 <__smakebuf_r+0x1c>
 8007390:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007394:	6023      	str	r3, [r4, #0]
 8007396:	6123      	str	r3, [r4, #16]
 8007398:	2301      	movs	r3, #1
 800739a:	6163      	str	r3, [r4, #20]
 800739c:	b003      	add	sp, #12
 800739e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073a0:	ab01      	add	r3, sp, #4
 80073a2:	466a      	mov	r2, sp
 80073a4:	f7ff ffc8 	bl	8007338 <__swhatbuf_r>
 80073a8:	9f00      	ldr	r7, [sp, #0]
 80073aa:	4605      	mov	r5, r0
 80073ac:	4639      	mov	r1, r7
 80073ae:	4630      	mov	r0, r6
 80073b0:	f7ff faba 	bl	8006928 <_malloc_r>
 80073b4:	b948      	cbnz	r0, 80073ca <__smakebuf_r+0x46>
 80073b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073ba:	059a      	lsls	r2, r3, #22
 80073bc:	d4ee      	bmi.n	800739c <__smakebuf_r+0x18>
 80073be:	f023 0303 	bic.w	r3, r3, #3
 80073c2:	f043 0302 	orr.w	r3, r3, #2
 80073c6:	81a3      	strh	r3, [r4, #12]
 80073c8:	e7e2      	b.n	8007390 <__smakebuf_r+0xc>
 80073ca:	89a3      	ldrh	r3, [r4, #12]
 80073cc:	6020      	str	r0, [r4, #0]
 80073ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073d2:	81a3      	strh	r3, [r4, #12]
 80073d4:	9b01      	ldr	r3, [sp, #4]
 80073d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80073da:	b15b      	cbz	r3, 80073f4 <__smakebuf_r+0x70>
 80073dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073e0:	4630      	mov	r0, r6
 80073e2:	f000 f81d 	bl	8007420 <_isatty_r>
 80073e6:	b128      	cbz	r0, 80073f4 <__smakebuf_r+0x70>
 80073e8:	89a3      	ldrh	r3, [r4, #12]
 80073ea:	f023 0303 	bic.w	r3, r3, #3
 80073ee:	f043 0301 	orr.w	r3, r3, #1
 80073f2:	81a3      	strh	r3, [r4, #12]
 80073f4:	89a3      	ldrh	r3, [r4, #12]
 80073f6:	431d      	orrs	r5, r3
 80073f8:	81a5      	strh	r5, [r4, #12]
 80073fa:	e7cf      	b.n	800739c <__smakebuf_r+0x18>

080073fc <_fstat_r>:
 80073fc:	b538      	push	{r3, r4, r5, lr}
 80073fe:	4d07      	ldr	r5, [pc, #28]	@ (800741c <_fstat_r+0x20>)
 8007400:	2300      	movs	r3, #0
 8007402:	4604      	mov	r4, r0
 8007404:	4608      	mov	r0, r1
 8007406:	4611      	mov	r1, r2
 8007408:	602b      	str	r3, [r5, #0]
 800740a:	f7fa fe33 	bl	8002074 <_fstat>
 800740e:	1c43      	adds	r3, r0, #1
 8007410:	d102      	bne.n	8007418 <_fstat_r+0x1c>
 8007412:	682b      	ldr	r3, [r5, #0]
 8007414:	b103      	cbz	r3, 8007418 <_fstat_r+0x1c>
 8007416:	6023      	str	r3, [r4, #0]
 8007418:	bd38      	pop	{r3, r4, r5, pc}
 800741a:	bf00      	nop
 800741c:	20000414 	.word	0x20000414

08007420 <_isatty_r>:
 8007420:	b538      	push	{r3, r4, r5, lr}
 8007422:	4d06      	ldr	r5, [pc, #24]	@ (800743c <_isatty_r+0x1c>)
 8007424:	2300      	movs	r3, #0
 8007426:	4604      	mov	r4, r0
 8007428:	4608      	mov	r0, r1
 800742a:	602b      	str	r3, [r5, #0]
 800742c:	f7fa fe32 	bl	8002094 <_isatty>
 8007430:	1c43      	adds	r3, r0, #1
 8007432:	d102      	bne.n	800743a <_isatty_r+0x1a>
 8007434:	682b      	ldr	r3, [r5, #0]
 8007436:	b103      	cbz	r3, 800743a <_isatty_r+0x1a>
 8007438:	6023      	str	r3, [r4, #0]
 800743a:	bd38      	pop	{r3, r4, r5, pc}
 800743c:	20000414 	.word	0x20000414

08007440 <_gettimeofday>:
 8007440:	4b02      	ldr	r3, [pc, #8]	@ (800744c <_gettimeofday+0xc>)
 8007442:	2258      	movs	r2, #88	@ 0x58
 8007444:	601a      	str	r2, [r3, #0]
 8007446:	f04f 30ff 	mov.w	r0, #4294967295
 800744a:	4770      	bx	lr
 800744c:	20000414 	.word	0x20000414

08007450 <_init>:
 8007450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007452:	bf00      	nop
 8007454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007456:	bc08      	pop	{r3}
 8007458:	469e      	mov	lr, r3
 800745a:	4770      	bx	lr

0800745c <_fini>:
 800745c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800745e:	bf00      	nop
 8007460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007462:	bc08      	pop	{r3}
 8007464:	469e      	mov	lr, r3
 8007466:	4770      	bx	lr
