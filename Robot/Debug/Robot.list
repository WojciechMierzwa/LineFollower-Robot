
Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055f4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800577c  0800577c  0000677c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057b4  080057b4  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  080057b4  080057b4  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057b4  080057b4  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057b4  080057b4  000067b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057b8  080057b8  000067b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080057bc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  2000000c  080057c8  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  080057c8  0000723c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f10b  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c0  00000000  00000000  00016147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00018208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a5e  00000000  00000000  00018f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bc53  00000000  00000000  00019996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b47  00000000  00000000  000355e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5fc6  00000000  00000000  00046130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ec0f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000375c  00000000  00000000  000ec13c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000ef898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005764 	.word	0x08005764

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005764 	.word	0x08005764

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f001 f80c 	bl	80011e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f87a 	bl	80002c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 face 	bl	8000774 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 fa9c 	bl	8000714 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80001dc:	f000 fa6a 	bl	80006b4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80001e0:	f000 f8d2 	bl	8000388 <MX_TIM1_Init>
  MX_TIM16_Init();
 80001e4:	f000 f9ec 	bl	80005c0 <MX_TIM16_Init>
  MX_TIM2_Init();
 80001e8:	f000 f986 	bl	80004f8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,&receivedChar,1); // uruchomienie obs≈Çugi uart dla bluetooth hc-06
 80001ec:	2201      	movs	r2, #1
 80001ee:	492d      	ldr	r1, [pc, #180]	@ (80002a4 <main+0xdc>)
 80001f0:	482d      	ldr	r0, [pc, #180]	@ (80002a8 <main+0xe0>)
 80001f2:	f004 f93c 	bl	800446e <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start(&htim1);
 80001f6:	482d      	ldr	r0, [pc, #180]	@ (80002ac <main+0xe4>)
 80001f8:	f003 f808 	bl	800320c <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 80001fc:	2200      	movs	r2, #0
 80001fe:	2102      	movs	r1, #2
 8000200:	482b      	ldr	r0, [pc, #172]	@ (80002b0 <main+0xe8>)
 8000202:	f001 fb8d 	bl	8001920 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000206:	2100      	movs	r1, #0
 8000208:	482a      	ldr	r0, [pc, #168]	@ (80002b4 <main+0xec>)
 800020a:	f003 f8a3 	bl	8003354 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800020e:	2100      	movs	r1, #0
 8000210:	4826      	ldr	r0, [pc, #152]	@ (80002ac <main+0xe4>)
 8000212:	f003 f89f 	bl	8003354 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000216:	210c      	movs	r1, #12
 8000218:	4824      	ldr	r0, [pc, #144]	@ (80002ac <main+0xe4>)
 800021a:	f003 f89b 	bl	8003354 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800021e:	2100      	movs	r1, #0
 8000220:	4825      	ldr	r0, [pc, #148]	@ (80002b8 <main+0xf0>)
 8000222:	f003 f897 	bl	8003354 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000226:	2108      	movs	r1, #8
 8000228:	4823      	ldr	r0, [pc, #140]	@ (80002b8 <main+0xf0>)
 800022a:	f003 f893 	bl	8003354 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  set_ang(0, 0);
 800022e:	2100      	movs	r1, #0
 8000230:	2000      	movs	r0, #0
 8000232:	f000 fccf 	bl	8000bd4 <set_ang>

  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Receive(&huart2, &receivedChar,1 ,HAL_MAX_DELAY);
 8000236:	f04f 33ff 	mov.w	r3, #4294967295
 800023a:	2201      	movs	r2, #1
 800023c:	4919      	ldr	r1, [pc, #100]	@ (80002a4 <main+0xdc>)
 800023e:	481f      	ldr	r0, [pc, #124]	@ (80002bc <main+0xf4>)
 8000240:	f004 f84c 	bl	80042dc <HAL_UART_Receive>


	  if(receivedChar == 's')
 8000244:	4b17      	ldr	r3, [pc, #92]	@ (80002a4 <main+0xdc>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	2b73      	cmp	r3, #115	@ 0x73
 800024a:	d10d      	bne.n	8000268 <main+0xa0>
	  	  	  	      {
	  	  	  	    		  motor_backward(32768);
 800024c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000250:	f000 fd4e 	bl	8000cf0 <motor_backward>
	  	  	  	    		 	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000254:	2200      	movs	r2, #0
 8000256:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800025a:	4819      	ldr	r0, [pc, #100]	@ (80002c0 <main+0xf8>)
 800025c:	f001 fb60 	bl	8001920 <HAL_GPIO_WritePin>
	  	  	  	    		 	        buttonPressed = 1;
 8000260:	4b18      	ldr	r3, [pc, #96]	@ (80002c4 <main+0xfc>)
 8000262:	2201      	movs	r2, #1
 8000264:	701a      	strb	r2, [r3, #0]
 8000266:	e017      	b.n	8000298 <main+0xd0>

	  	  	  	      }
	  	  	  	      else if (receivedChar == 'w')
 8000268:	4b0e      	ldr	r3, [pc, #56]	@ (80002a4 <main+0xdc>)
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	2b77      	cmp	r3, #119	@ 0x77
 800026e:	d10d      	bne.n	800028c <main+0xc4>
	  	  	  	      {

	  	  	  	        motor_forward(32768);
 8000270:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000274:	f000 fd18 	bl	8000ca8 <motor_forward>
	  	  	  	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000278:	2201      	movs	r2, #1
 800027a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800027e:	4810      	ldr	r0, [pc, #64]	@ (80002c0 <main+0xf8>)
 8000280:	f001 fb4e 	bl	8001920 <HAL_GPIO_WritePin>
	  	  	  	        buttonPressed = 1;
 8000284:	4b0f      	ldr	r3, [pc, #60]	@ (80002c4 <main+0xfc>)
 8000286:	2201      	movs	r2, #1
 8000288:	701a      	strb	r2, [r3, #0]
 800028a:	e005      	b.n	8000298 <main+0xd0>
	  	  	  	      }
	  	  	  	      else if(receivedChar == 'q'){
 800028c:	4b05      	ldr	r3, [pc, #20]	@ (80002a4 <main+0xdc>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	2b71      	cmp	r3, #113	@ 0x71
 8000292:	d101      	bne.n	8000298 <main+0xd0>
	  	  	  	    	  motor_stop();
 8000294:	f000 fd50 	bl	8000d38 <motor_stop>
	  	  	  	      }
    /* USER CODE BEGIN 3 */
	  detectObstacle();
 8000298:	f000 fb5c 	bl	8000954 <detectObstacle>
	  //turnover(&axle, receivedChar); - testy
	  detectMotor();
 800029c:	f000 fcdc 	bl	8000c58 <detectMotor>
	  HAL_UART_Receive(&huart2, &receivedChar,1 ,HAL_MAX_DELAY);
 80002a0:	e7c9      	b.n	8000236 <main+0x6e>
 80002a2:	bf00      	nop
 80002a4:	20000235 	.word	0x20000235
 80002a8:	2000010c 	.word	0x2000010c
 80002ac:	20000028 	.word	0x20000028
 80002b0:	48000800 	.word	0x48000800
 80002b4:	200000c0 	.word	0x200000c0
 80002b8:	20000074 	.word	0x20000074
 80002bc:	20000194 	.word	0x20000194
 80002c0:	48000400 	.word	0x48000400
 80002c4:	20000234 	.word	0x20000234

080002c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b09c      	sub	sp, #112	@ 0x70
 80002cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ce:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80002d2:	2228      	movs	r2, #40	@ 0x28
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f005 fa18 	bl	800570c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002dc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	605a      	str	r2, [r3, #4]
 80002e6:	609a      	str	r2, [r3, #8]
 80002e8:	60da      	str	r2, [r3, #12]
 80002ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ec:	463b      	mov	r3, r7
 80002ee:	2234      	movs	r2, #52	@ 0x34
 80002f0:	2100      	movs	r1, #0
 80002f2:	4618      	mov	r0, r3
 80002f4:	f005 fa0a 	bl	800570c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f8:	2301      	movs	r3, #1
 80002fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000300:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000306:	2301      	movs	r3, #1
 8000308:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030a:	2302      	movs	r3, #2
 800030c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800030e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000312:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000314:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000318:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800031e:	4618      	mov	r0, r3
 8000320:	f001 fb16 	bl	8001950 <HAL_RCC_OscConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800032a:	f000 fd21 	bl	8000d70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032e:	230f      	movs	r3, #15
 8000330:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000332:	2302      	movs	r3, #2
 8000334:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000336:	2300      	movs	r3, #0
 8000338:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800033a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800033e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000344:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000348:	2102      	movs	r1, #2
 800034a:	4618      	mov	r0, r3
 800034c:	f002 fb3e 	bl	80029cc <HAL_RCC_ClockConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000356:	f000 fd0b 	bl	8000d70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 800035a:	4b0a      	ldr	r3, [pc, #40]	@ (8000384 <SystemClock_Config+0xbc>)
 800035c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM16;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800035e:	2300      	movs	r3, #0
 8000360:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000362:	2300      	movs	r3, #0
 8000364:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8000366:	2300      	movs	r3, #0
 8000368:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800036a:	463b      	mov	r3, r7
 800036c:	4618      	mov	r0, r3
 800036e:	f002 fd63 	bl	8002e38 <HAL_RCCEx_PeriphCLKConfig>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000378:	f000 fcfa 	bl	8000d70 <Error_Handler>
  }
}
 800037c:	bf00      	nop
 800037e:	3770      	adds	r7, #112	@ 0x70
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	00081001 	.word	0x00081001

08000388 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b09a      	sub	sp, #104	@ 0x68
 800038c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800038e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800039c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	605a      	str	r2, [r3, #4]
 80003a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003a8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	605a      	str	r2, [r3, #4]
 80003b2:	609a      	str	r2, [r3, #8]
 80003b4:	60da      	str	r2, [r3, #12]
 80003b6:	611a      	str	r2, [r3, #16]
 80003b8:	615a      	str	r2, [r3, #20]
 80003ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	222c      	movs	r2, #44	@ 0x2c
 80003c0:	2100      	movs	r1, #0
 80003c2:	4618      	mov	r0, r3
 80003c4:	f005 f9a2 	bl	800570c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003c8:	4b49      	ldr	r3, [pc, #292]	@ (80004f0 <MX_TIM1_Init+0x168>)
 80003ca:	4a4a      	ldr	r2, [pc, #296]	@ (80004f4 <MX_TIM1_Init+0x16c>)
 80003cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80003ce:	4b48      	ldr	r3, [pc, #288]	@ (80004f0 <MX_TIM1_Init+0x168>)
 80003d0:	2247      	movs	r2, #71	@ 0x47
 80003d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003d4:	4b46      	ldr	r3, [pc, #280]	@ (80004f0 <MX_TIM1_Init+0x168>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80003da:	4b45      	ldr	r3, [pc, #276]	@ (80004f0 <MX_TIM1_Init+0x168>)
 80003dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80003e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003e2:	4b43      	ldr	r3, [pc, #268]	@ (80004f0 <MX_TIM1_Init+0x168>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003e8:	4b41      	ldr	r3, [pc, #260]	@ (80004f0 <MX_TIM1_Init+0x168>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ee:	4b40      	ldr	r3, [pc, #256]	@ (80004f0 <MX_TIM1_Init+0x168>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003f4:	483e      	ldr	r0, [pc, #248]	@ (80004f0 <MX_TIM1_Init+0x168>)
 80003f6:	f002 feb1 	bl	800315c <HAL_TIM_Base_Init>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000400:	f000 fcb6 	bl	8000d70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000404:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000408:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800040a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800040e:	4619      	mov	r1, r3
 8000410:	4837      	ldr	r0, [pc, #220]	@ (80004f0 <MX_TIM1_Init+0x168>)
 8000412:	f003 f999 	bl	8003748 <HAL_TIM_ConfigClockSource>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800041c:	f000 fca8 	bl	8000d70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000420:	4833      	ldr	r0, [pc, #204]	@ (80004f0 <MX_TIM1_Init+0x168>)
 8000422:	f002 ff3f 	bl	80032a4 <HAL_TIM_PWM_Init>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800042c:	f000 fca0 	bl	8000d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000430:	2300      	movs	r3, #0
 8000432:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000434:	2300      	movs	r3, #0
 8000436:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000438:	2300      	movs	r3, #0
 800043a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800043c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000440:	4619      	mov	r1, r3
 8000442:	482b      	ldr	r0, [pc, #172]	@ (80004f0 <MX_TIM1_Init+0x168>)
 8000444:	f003 fe1e 	bl	8004084 <HAL_TIMEx_MasterConfigSynchronization>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800044e:	f000 fc8f 	bl	8000d70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000452:	2360      	movs	r3, #96	@ 0x60
 8000454:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000456:	2300      	movs	r3, #0
 8000458:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800045a:	2300      	movs	r3, #0
 800045c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800045e:	2300      	movs	r3, #0
 8000460:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000462:	2300      	movs	r3, #0
 8000464:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000466:	2300      	movs	r3, #0
 8000468:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800046a:	2300      	movs	r3, #0
 800046c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800046e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000472:	2200      	movs	r2, #0
 8000474:	4619      	mov	r1, r3
 8000476:	481e      	ldr	r0, [pc, #120]	@ (80004f0 <MX_TIM1_Init+0x168>)
 8000478:	f003 f852 	bl	8003520 <HAL_TIM_PWM_ConfigChannel>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000482:	f000 fc75 	bl	8000d70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000486:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800048a:	220c      	movs	r2, #12
 800048c:	4619      	mov	r1, r3
 800048e:	4818      	ldr	r0, [pc, #96]	@ (80004f0 <MX_TIM1_Init+0x168>)
 8000490:	f003 f846 	bl	8003520 <HAL_TIM_PWM_ConfigChannel>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800049a:	f000 fc69 	bl	8000d70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800049e:	2300      	movs	r3, #0
 80004a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004a2:	2300      	movs	r3, #0
 80004a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004a6:	2300      	movs	r3, #0
 80004a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004aa:	2300      	movs	r3, #0
 80004ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004ae:	2300      	movs	r3, #0
 80004b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80004bc:	2300      	movs	r3, #0
 80004be:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80004c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80004c4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004ca:	2300      	movs	r3, #0
 80004cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	4619      	mov	r1, r3
 80004d2:	4807      	ldr	r0, [pc, #28]	@ (80004f0 <MX_TIM1_Init+0x168>)
 80004d4:	f003 fe3c 	bl	8004150 <HAL_TIMEx_ConfigBreakDeadTime>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80004de:	f000 fc47 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004e2:	4803      	ldr	r0, [pc, #12]	@ (80004f0 <MX_TIM1_Init+0x168>)
 80004e4:	f000 fcc0 	bl	8000e68 <HAL_TIM_MspPostInit>

}
 80004e8:	bf00      	nop
 80004ea:	3768      	adds	r7, #104	@ 0x68
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000028 	.word	0x20000028
 80004f4:	40012c00 	.word	0x40012c00

080004f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b08a      	sub	sp, #40	@ 0x28
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004fe:	f107 031c 	add.w	r3, r7, #28
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800050a:	463b      	mov	r3, r7
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]
 8000518:	615a      	str	r2, [r3, #20]
 800051a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800051c:	4b27      	ldr	r3, [pc, #156]	@ (80005bc <MX_TIM2_Init+0xc4>)
 800051e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000522:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000524:	4b25      	ldr	r3, [pc, #148]	@ (80005bc <MX_TIM2_Init+0xc4>)
 8000526:	2247      	movs	r2, #71	@ 0x47
 8000528:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800052a:	4b24      	ldr	r3, [pc, #144]	@ (80005bc <MX_TIM2_Init+0xc4>)
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000530:	4b22      	ldr	r3, [pc, #136]	@ (80005bc <MX_TIM2_Init+0xc4>)
 8000532:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000536:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000538:	4b20      	ldr	r3, [pc, #128]	@ (80005bc <MX_TIM2_Init+0xc4>)
 800053a:	2200      	movs	r2, #0
 800053c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800053e:	4b1f      	ldr	r3, [pc, #124]	@ (80005bc <MX_TIM2_Init+0xc4>)
 8000540:	2200      	movs	r2, #0
 8000542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000544:	481d      	ldr	r0, [pc, #116]	@ (80005bc <MX_TIM2_Init+0xc4>)
 8000546:	f002 fead 	bl	80032a4 <HAL_TIM_PWM_Init>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000550:	f000 fc0e 	bl	8000d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000554:	2300      	movs	r3, #0
 8000556:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000558:	2300      	movs	r3, #0
 800055a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800055c:	f107 031c 	add.w	r3, r7, #28
 8000560:	4619      	mov	r1, r3
 8000562:	4816      	ldr	r0, [pc, #88]	@ (80005bc <MX_TIM2_Init+0xc4>)
 8000564:	f003 fd8e 	bl	8004084 <HAL_TIMEx_MasterConfigSynchronization>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800056e:	f000 fbff 	bl	8000d70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000572:	2360      	movs	r3, #96	@ 0x60
 8000574:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800057a:	2300      	movs	r3, #0
 800057c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800057e:	2300      	movs	r3, #0
 8000580:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000582:	463b      	mov	r3, r7
 8000584:	2200      	movs	r2, #0
 8000586:	4619      	mov	r1, r3
 8000588:	480c      	ldr	r0, [pc, #48]	@ (80005bc <MX_TIM2_Init+0xc4>)
 800058a:	f002 ffc9 	bl	8003520 <HAL_TIM_PWM_ConfigChannel>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000594:	f000 fbec 	bl	8000d70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000598:	463b      	mov	r3, r7
 800059a:	2208      	movs	r2, #8
 800059c:	4619      	mov	r1, r3
 800059e:	4807      	ldr	r0, [pc, #28]	@ (80005bc <MX_TIM2_Init+0xc4>)
 80005a0:	f002 ffbe 	bl	8003520 <HAL_TIM_PWM_ConfigChannel>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80005aa:	f000 fbe1 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80005ae:	4803      	ldr	r0, [pc, #12]	@ (80005bc <MX_TIM2_Init+0xc4>)
 80005b0:	f000 fc5a 	bl	8000e68 <HAL_TIM_MspPostInit>

}
 80005b4:	bf00      	nop
 80005b6:	3728      	adds	r7, #40	@ 0x28
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000074 	.word	0x20000074

080005c0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b092      	sub	sp, #72	@ 0x48
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80005c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]
 80005d6:	615a      	str	r2, [r3, #20]
 80005d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005da:	463b      	mov	r3, r7
 80005dc:	222c      	movs	r2, #44	@ 0x2c
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f005 f893 	bl	800570c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80005e6:	4b31      	ldr	r3, [pc, #196]	@ (80006ac <MX_TIM16_Init+0xec>)
 80005e8:	4a31      	ldr	r2, [pc, #196]	@ (80006b0 <MX_TIM16_Init+0xf0>)
 80005ea:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 71;
 80005ec:	4b2f      	ldr	r3, [pc, #188]	@ (80006ac <MX_TIM16_Init+0xec>)
 80005ee:	2247      	movs	r2, #71	@ 0x47
 80005f0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f2:	4b2e      	ldr	r3, [pc, #184]	@ (80006ac <MX_TIM16_Init+0xec>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 19999;
 80005f8:	4b2c      	ldr	r3, [pc, #176]	@ (80006ac <MX_TIM16_Init+0xec>)
 80005fa:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80005fe:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000600:	4b2a      	ldr	r3, [pc, #168]	@ (80006ac <MX_TIM16_Init+0xec>)
 8000602:	2200      	movs	r2, #0
 8000604:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000606:	4b29      	ldr	r3, [pc, #164]	@ (80006ac <MX_TIM16_Init+0xec>)
 8000608:	2200      	movs	r2, #0
 800060a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800060c:	4b27      	ldr	r3, [pc, #156]	@ (80006ac <MX_TIM16_Init+0xec>)
 800060e:	2280      	movs	r2, #128	@ 0x80
 8000610:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000612:	4826      	ldr	r0, [pc, #152]	@ (80006ac <MX_TIM16_Init+0xec>)
 8000614:	f002 fda2 	bl	800315c <HAL_TIM_Base_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800061e:	f000 fba7 	bl	8000d70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000622:	4822      	ldr	r0, [pc, #136]	@ (80006ac <MX_TIM16_Init+0xec>)
 8000624:	f002 fe3e 	bl	80032a4 <HAL_TIM_PWM_Init>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800062e:	f000 fb9f 	bl	8000d70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000632:	2360      	movs	r3, #96	@ 0x60
 8000634:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800063a:	2300      	movs	r3, #0
 800063c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800063e:	2300      	movs	r3, #0
 8000640:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000642:	2300      	movs	r3, #0
 8000644:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000646:	2300      	movs	r3, #0
 8000648:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800064a:	2300      	movs	r3, #0
 800064c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800064e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000652:	2200      	movs	r2, #0
 8000654:	4619      	mov	r1, r3
 8000656:	4815      	ldr	r0, [pc, #84]	@ (80006ac <MX_TIM16_Init+0xec>)
 8000658:	f002 ff62 	bl	8003520 <HAL_TIM_PWM_ConfigChannel>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000662:	f000 fb85 	bl	8000d70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000666:	2300      	movs	r3, #0
 8000668:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800066a:	2300      	movs	r3, #0
 800066c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800066e:	2300      	movs	r3, #0
 8000670:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800067a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800067e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000684:	2300      	movs	r3, #0
 8000686:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000688:	463b      	mov	r3, r7
 800068a:	4619      	mov	r1, r3
 800068c:	4807      	ldr	r0, [pc, #28]	@ (80006ac <MX_TIM16_Init+0xec>)
 800068e:	f003 fd5f 	bl	8004150 <HAL_TIMEx_ConfigBreakDeadTime>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000698:	f000 fb6a 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800069c:	4803      	ldr	r0, [pc, #12]	@ (80006ac <MX_TIM16_Init+0xec>)
 800069e:	f000 fbe3 	bl	8000e68 <HAL_TIM_MspPostInit>

}
 80006a2:	bf00      	nop
 80006a4:	3748      	adds	r7, #72	@ 0x48
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	200000c0 	.word	0x200000c0
 80006b0:	40014400 	.word	0x40014400

080006b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006b8:	4b14      	ldr	r3, [pc, #80]	@ (800070c <MX_USART1_UART_Init+0x58>)
 80006ba:	4a15      	ldr	r2, [pc, #84]	@ (8000710 <MX_USART1_UART_Init+0x5c>)
 80006bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006be:	4b13      	ldr	r3, [pc, #76]	@ (800070c <MX_USART1_UART_Init+0x58>)
 80006c0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80006c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006c6:	4b11      	ldr	r3, [pc, #68]	@ (800070c <MX_USART1_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	@ (800070c <MX_USART1_UART_Init+0x58>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	@ (800070c <MX_USART1_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <MX_USART1_UART_Init+0x58>)
 80006da:	220c      	movs	r2, #12
 80006dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006de:	4b0b      	ldr	r3, [pc, #44]	@ (800070c <MX_USART1_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e4:	4b09      	ldr	r3, [pc, #36]	@ (800070c <MX_USART1_UART_Init+0x58>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ea:	4b08      	ldr	r3, [pc, #32]	@ (800070c <MX_USART1_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f0:	4b06      	ldr	r3, [pc, #24]	@ (800070c <MX_USART1_UART_Init+0x58>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006f6:	4805      	ldr	r0, [pc, #20]	@ (800070c <MX_USART1_UART_Init+0x58>)
 80006f8:	f003 fda2 	bl	8004240 <HAL_UART_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000702:	f000 fb35 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	2000010c 	.word	0x2000010c
 8000710:	40013800 	.word	0x40013800

08000714 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000718:	4b14      	ldr	r3, [pc, #80]	@ (800076c <MX_USART2_UART_Init+0x58>)
 800071a:	4a15      	ldr	r2, [pc, #84]	@ (8000770 <MX_USART2_UART_Init+0x5c>)
 800071c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800071e:	4b13      	ldr	r3, [pc, #76]	@ (800076c <MX_USART2_UART_Init+0x58>)
 8000720:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000724:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b11      	ldr	r3, [pc, #68]	@ (800076c <MX_USART2_UART_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <MX_USART2_UART_Init+0x58>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <MX_USART2_UART_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000738:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <MX_USART2_UART_Init+0x58>)
 800073a:	220c      	movs	r2, #12
 800073c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <MX_USART2_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	4b09      	ldr	r3, [pc, #36]	@ (800076c <MX_USART2_UART_Init+0x58>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800074a:	4b08      	ldr	r3, [pc, #32]	@ (800076c <MX_USART2_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000750:	4b06      	ldr	r3, [pc, #24]	@ (800076c <MX_USART2_UART_Init+0x58>)
 8000752:	2200      	movs	r2, #0
 8000754:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	@ (800076c <MX_USART2_UART_Init+0x58>)
 8000758:	f003 fd72 	bl	8004240 <HAL_UART_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000762:	f000 fb05 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000194 	.word	0x20000194
 8000770:	40004400 	.word	0x40004400

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	@ 0x28
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	4b53      	ldr	r3, [pc, #332]	@ (80008d8 <MX_GPIO_Init+0x164>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	4a52      	ldr	r2, [pc, #328]	@ (80008d8 <MX_GPIO_Init+0x164>)
 8000790:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000794:	6153      	str	r3, [r2, #20]
 8000796:	4b50      	ldr	r3, [pc, #320]	@ (80008d8 <MX_GPIO_Init+0x164>)
 8000798:	695b      	ldr	r3, [r3, #20]
 800079a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007a2:	4b4d      	ldr	r3, [pc, #308]	@ (80008d8 <MX_GPIO_Init+0x164>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	4a4c      	ldr	r2, [pc, #304]	@ (80008d8 <MX_GPIO_Init+0x164>)
 80007a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007ac:	6153      	str	r3, [r2, #20]
 80007ae:	4b4a      	ldr	r3, [pc, #296]	@ (80008d8 <MX_GPIO_Init+0x164>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b47      	ldr	r3, [pc, #284]	@ (80008d8 <MX_GPIO_Init+0x164>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	4a46      	ldr	r2, [pc, #280]	@ (80008d8 <MX_GPIO_Init+0x164>)
 80007c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007c4:	6153      	str	r3, [r2, #20]
 80007c6:	4b44      	ldr	r3, [pc, #272]	@ (80008d8 <MX_GPIO_Init+0x164>)
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	4b41      	ldr	r3, [pc, #260]	@ (80008d8 <MX_GPIO_Init+0x164>)
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	4a40      	ldr	r2, [pc, #256]	@ (80008d8 <MX_GPIO_Init+0x164>)
 80007d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007dc:	6153      	str	r3, [r2, #20]
 80007de:	4b3e      	ldr	r3, [pc, #248]	@ (80008d8 <MX_GPIO_Init+0x164>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2102      	movs	r1, #2
 80007ee:	483b      	ldr	r0, [pc, #236]	@ (80008dc <MX_GPIO_Init+0x168>)
 80007f0:	f001 f896 	bl	8001920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2101      	movs	r1, #1
 80007f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007fc:	f001 f890 	bl	8001920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000800:	2200      	movs	r2, #0
 8000802:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000806:	4836      	ldr	r0, [pc, #216]	@ (80008e0 <MX_GPIO_Init+0x16c>)
 8000808:	f001 f88a 	bl	8001920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800080c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000812:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	482e      	ldr	r0, [pc, #184]	@ (80008dc <MX_GPIO_Init+0x168>)
 8000824:	f000 fef2 	bl	800160c <HAL_GPIO_Init>

  /*Configure GPIO pins : ECHO_Pin DETECT5_Pin DETECT1_Pin DETECT2_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin|DETECT5_Pin|DETECT1_Pin|DETECT2_Pin;
 8000828:	f241 4305 	movw	r3, #5125	@ 0x1405
 800082c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4619      	mov	r1, r3
 800083c:	4827      	ldr	r0, [pc, #156]	@ (80008dc <MX_GPIO_Init+0x168>)
 800083e:	f000 fee5 	bl	800160c <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIGGER_Pin */
  GPIO_InitStruct.Pin = TRIGGER_Pin;
 8000842:	2302      	movs	r3, #2
 8000844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4619      	mov	r1, r3
 8000858:	4820      	ldr	r0, [pc, #128]	@ (80008dc <MX_GPIO_Init+0x168>)
 800085a:	f000 fed7 	bl	800160c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800085e:	2301      	movs	r3, #1
 8000860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000862:	2301      	movs	r3, #1
 8000864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	4619      	mov	r1, r3
 8000874:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000878:	f000 fec8 	bl	800160c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800087c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4619      	mov	r1, r3
 8000894:	4812      	ldr	r0, [pc, #72]	@ (80008e0 <MX_GPIO_Init+0x16c>)
 8000896:	f000 feb9 	bl	800160c <HAL_GPIO_Init>

  /*Configure GPIO pin : DETECT3_Pin */
  GPIO_InitStruct.Pin = DETECT3_Pin;
 800089a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800089e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DETECT3_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b2:	f000 feab 	bl	800160c <HAL_GPIO_Init>

  /*Configure GPIO pin : DETECT4_Pin */
  GPIO_InitStruct.Pin = DETECT4_Pin;
 80008b6:	2380      	movs	r3, #128	@ 0x80
 80008b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DETECT4_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	4805      	ldr	r0, [pc, #20]	@ (80008e0 <MX_GPIO_Init+0x16c>)
 80008ca:	f000 fe9f 	bl	800160c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ce:	bf00      	nop
 80008d0:	3728      	adds	r7, #40	@ 0x28
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40021000 	.word	0x40021000
 80008dc:	48000800 	.word	0x48000800
 80008e0:	48000400 	.word	0x48000400

080008e4 <detect>:

/* USER CODE BEGIN 4 */
void detect(uint8_t *detect_states) { //wykrywanie linii
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
    detect_states[0] = HAL_GPIO_ReadPin(DETECT1_GPIO_Port, DETECT1_Pin);
 80008ec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008f0:	4816      	ldr	r0, [pc, #88]	@ (800094c <detect+0x68>)
 80008f2:	f000 fffd 	bl	80018f0 <HAL_GPIO_ReadPin>
 80008f6:	4603      	mov	r3, r0
 80008f8:	461a      	mov	r2, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	701a      	strb	r2, [r3, #0]
    detect_states[1] = HAL_GPIO_ReadPin(DETECT2_GPIO_Port, DETECT2_Pin);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	1c5c      	adds	r4, r3, #1
 8000902:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000906:	4811      	ldr	r0, [pc, #68]	@ (800094c <detect+0x68>)
 8000908:	f000 fff2 	bl	80018f0 <HAL_GPIO_ReadPin>
 800090c:	4603      	mov	r3, r0
 800090e:	7023      	strb	r3, [r4, #0]
    detect_states[2] = HAL_GPIO_ReadPin(DETECT3_GPIO_Port, DETECT3_Pin);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	1c9c      	adds	r4, r3, #2
 8000914:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000918:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800091c:	f000 ffe8 	bl	80018f0 <HAL_GPIO_ReadPin>
 8000920:	4603      	mov	r3, r0
 8000922:	7023      	strb	r3, [r4, #0]
    detect_states[3] = HAL_GPIO_ReadPin(DETECT4_GPIO_Port, DETECT4_Pin);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	1cdc      	adds	r4, r3, #3
 8000928:	2180      	movs	r1, #128	@ 0x80
 800092a:	4809      	ldr	r0, [pc, #36]	@ (8000950 <detect+0x6c>)
 800092c:	f000 ffe0 	bl	80018f0 <HAL_GPIO_ReadPin>
 8000930:	4603      	mov	r3, r0
 8000932:	7023      	strb	r3, [r4, #0]
    detect_states[4] = HAL_GPIO_ReadPin(DETECT5_GPIO_Port, DETECT5_Pin);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	1d1c      	adds	r4, r3, #4
 8000938:	2104      	movs	r1, #4
 800093a:	4804      	ldr	r0, [pc, #16]	@ (800094c <detect+0x68>)
 800093c:	f000 ffd8 	bl	80018f0 <HAL_GPIO_ReadPin>
 8000940:	4603      	mov	r3, r0
 8000942:	7023      	strb	r3, [r4, #0]
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	bd90      	pop	{r4, r7, pc}
 800094c:	48000800 	.word	0x48000800
 8000950:	48000400 	.word	0x48000400

08000954 <detectObstacle>:
void detectObstacle(void){
 8000954:	b598      	push	{r3, r4, r7, lr}
 8000956:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000958:	2201      	movs	r2, #1
 800095a:	2102      	movs	r1, #2
 800095c:	4834      	ldr	r0, [pc, #208]	@ (8000a30 <detectObstacle+0xdc>)
 800095e:	f000 ffdf 	bl	8001920 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000962:	4b34      	ldr	r3, [pc, #208]	@ (8000a34 <detectObstacle+0xe0>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2200      	movs	r2, #0
 8000968:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 800096a:	bf00      	nop
 800096c:	4b31      	ldr	r3, [pc, #196]	@ (8000a34 <detectObstacle+0xe0>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000972:	2b09      	cmp	r3, #9
 8000974:	d9fa      	bls.n	800096c <detectObstacle+0x18>
	HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);  // pull the TRIG p
 8000976:	2200      	movs	r2, #0
 8000978:	2102      	movs	r1, #2
 800097a:	482d      	ldr	r0, [pc, #180]	@ (8000a30 <detectObstacle+0xdc>)
 800097c:	f000 ffd0 	bl	8001920 <HAL_GPIO_WritePin>
	pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000980:	f000 fc8c 	bl	800129c <HAL_GetTick>
 8000984:	4603      	mov	r3, r0
 8000986:	4a2c      	ldr	r2, [pc, #176]	@ (8000a38 <detectObstacle+0xe4>)
 8000988:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (ECHO_GPIO_Port, ECHO_Pin)) && pMillis + 10 >  HAL_GetTick());
 800098a:	bf00      	nop
 800098c:	2101      	movs	r1, #1
 800098e:	4828      	ldr	r0, [pc, #160]	@ (8000a30 <detectObstacle+0xdc>)
 8000990:	f000 ffae 	bl	80018f0 <HAL_GPIO_ReadPin>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d108      	bne.n	80009ac <detectObstacle+0x58>
 800099a:	4b27      	ldr	r3, [pc, #156]	@ (8000a38 <detectObstacle+0xe4>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f103 040a 	add.w	r4, r3, #10
 80009a2:	f000 fc7b 	bl	800129c <HAL_GetTick>
 80009a6:	4603      	mov	r3, r0
 80009a8:	429c      	cmp	r4, r3
 80009aa:	d8ef      	bhi.n	800098c <detectObstacle+0x38>
	Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 80009ac:	4b21      	ldr	r3, [pc, #132]	@ (8000a34 <detectObstacle+0xe0>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009b2:	4a22      	ldr	r2, [pc, #136]	@ (8000a3c <detectObstacle+0xe8>)
 80009b4:	6013      	str	r3, [r2, #0]

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 80009b6:	f000 fc71 	bl	800129c <HAL_GetTick>
 80009ba:	4603      	mov	r3, r0
 80009bc:	4a1e      	ldr	r2, [pc, #120]	@ (8000a38 <detectObstacle+0xe4>)
 80009be:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (ECHO_GPIO_Port, ECHO_Pin)) && pMillis + 50 > HAL_GetTick());
 80009c0:	bf00      	nop
 80009c2:	2101      	movs	r1, #1
 80009c4:	481a      	ldr	r0, [pc, #104]	@ (8000a30 <detectObstacle+0xdc>)
 80009c6:	f000 ff93 	bl	80018f0 <HAL_GPIO_ReadPin>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d008      	beq.n	80009e2 <detectObstacle+0x8e>
 80009d0:	4b19      	ldr	r3, [pc, #100]	@ (8000a38 <detectObstacle+0xe4>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 80009d8:	f000 fc60 	bl	800129c <HAL_GetTick>
 80009dc:	4603      	mov	r3, r0
 80009de:	429c      	cmp	r4, r3
 80009e0:	d8ef      	bhi.n	80009c2 <detectObstacle+0x6e>
	Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 80009e2:	4b14      	ldr	r3, [pc, #80]	@ (8000a34 <detectObstacle+0xe0>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009e8:	4a15      	ldr	r2, [pc, #84]	@ (8000a40 <detectObstacle+0xec>)
 80009ea:	6013      	str	r3, [r2, #0]

	Distance = (Value2-Value1) /58;
 80009ec:	4b14      	ldr	r3, [pc, #80]	@ (8000a40 <detectObstacle+0xec>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <detectObstacle+0xe8>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	4a13      	ldr	r2, [pc, #76]	@ (8000a44 <detectObstacle+0xf0>)
 80009f8:	fba2 2303 	umull	r2, r3, r2, r3
 80009fc:	095b      	lsrs	r3, r3, #5
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	4b11      	ldr	r3, [pc, #68]	@ (8000a48 <detectObstacle+0xf4>)
 8000a02:	801a      	strh	r2, [r3, #0]
	HAL_Delay(50);
 8000a04:	2032      	movs	r0, #50	@ 0x32
 8000a06:	f000 fc55 	bl	80012b4 <HAL_Delay>
	if(Distance<5){ //led turns on when object is closer than 5 cm
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a48 <detectObstacle+0xf4>)
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	2b04      	cmp	r3, #4
 8000a10:	d806      	bhi.n	8000a20 <detectObstacle+0xcc>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000a12:	2201      	movs	r2, #1
 8000a14:	2101      	movs	r1, #1
 8000a16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a1a:	f000 ff81 	bl	8001920 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
	}
}
 8000a1e:	e005      	b.n	8000a2c <detectObstacle+0xd8>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2101      	movs	r1, #1
 8000a24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a28:	f000 ff7a 	bl	8001920 <HAL_GPIO_WritePin>
}
 8000a2c:	bf00      	nop
 8000a2e:	bd98      	pop	{r3, r4, r7, pc}
 8000a30:	48000800 	.word	0x48000800
 8000a34:	20000028 	.word	0x20000028
 8000a38:	2000021c 	.word	0x2000021c
 8000a3c:	20000220 	.word	0x20000220
 8000a40:	20000224 	.word	0x20000224
 8000a44:	8d3dcb09 	.word	0x8d3dcb09
 8000a48:	20000228 	.word	0x20000228

08000a4c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // funkcja do obs≈Çugi bt po uart na podstawie przerwania
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a10      	ldr	r2, [pc, #64]	@ (8000a9c <HAL_UART_RxCpltCallback+0x50>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d119      	bne.n	8000a92 <HAL_UART_RxCpltCallback+0x46>
  {
    if(receivedChar=='N')
 8000a5e:	4b10      	ldr	r3, [pc, #64]	@ (8000aa0 <HAL_UART_RxCpltCallback+0x54>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b4e      	cmp	r3, #78	@ 0x4e
 8000a64:	d106      	bne.n	8000a74 <HAL_UART_RxCpltCallback+0x28>
    {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a6c:	480d      	ldr	r0, [pc, #52]	@ (8000aa4 <HAL_UART_RxCpltCallback+0x58>)
 8000a6e:	f000 ff57 	bl	8001920 <HAL_GPIO_WritePin>
 8000a72:	e009      	b.n	8000a88 <HAL_UART_RxCpltCallback+0x3c>
    }
    else if (receivedChar=='Y')
 8000a74:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa0 <HAL_UART_RxCpltCallback+0x54>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b59      	cmp	r3, #89	@ 0x59
 8000a7a:	d105      	bne.n	8000a88 <HAL_UART_RxCpltCallback+0x3c>
    {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a82:	4808      	ldr	r0, [pc, #32]	@ (8000aa4 <HAL_UART_RxCpltCallback+0x58>)
 8000a84:	f000 ff4c 	bl	8001920 <HAL_GPIO_WritePin>
    }
    HAL_UART_Receive_IT(&huart1,&receivedChar,1);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	4905      	ldr	r1, [pc, #20]	@ (8000aa0 <HAL_UART_RxCpltCallback+0x54>)
 8000a8c:	4806      	ldr	r0, [pc, #24]	@ (8000aa8 <HAL_UART_RxCpltCallback+0x5c>)
 8000a8e:	f003 fcee 	bl	800446e <HAL_UART_Receive_IT>
    		  	  	    	  motor_stop();
    		  	  	      }
    }
    HAL_UART_Receive_IT(&huart2,&receivedChar,1);
*/
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40013800 	.word	0x40013800
 8000aa0:	20000235 	.word	0x20000235
 8000aa4:	48000400 	.word	0x48000400
 8000aa8:	2000010c 	.word	0x2000010c

08000aac <turnover>:
void turnover(uint16_t *axle, char receivedChar){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	70fb      	strb	r3, [r7, #3]
	while ((*axle)> 0)
 8000ab8:	e01d      	b.n	8000af6 <turnover+0x4a>
		  {
		      // Sprawdzenie dostƒôpno≈õci danych w strumieniu UART
		      if (HAL_UART_Receive(&huart2, &receivedChar, 1, 0) == HAL_OK)
 8000aba:	1cf9      	adds	r1, r7, #3
 8000abc:	2300      	movs	r3, #0
 8000abe:	2201      	movs	r2, #1
 8000ac0:	4843      	ldr	r0, [pc, #268]	@ (8000bd0 <turnover+0x124>)
 8000ac2:	f003 fc0b 	bl	80042dc <HAL_UART_Receive>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d105      	bne.n	8000ad8 <turnover+0x2c>
		      {
		          // Obs≈Çuga odebranego znaku
		          if (receivedChar == 'a')
 8000acc:	78fb      	ldrb	r3, [r7, #3]
 8000ace:	2b61      	cmp	r3, #97	@ 0x61
 8000ad0:	d016      	beq.n	8000b00 <turnover+0x54>
		          {
		              // Przerwanie pƒôtli i obs≈Çuga znaku 'a'
		              break;
		          }
		          if(receivedChar == 'd');
 8000ad2:	78fb      	ldrb	r3, [r7, #3]
 8000ad4:	2b64      	cmp	r3, #100	@ 0x64
 8000ad6:	d16a      	bne.n	8000bae <turnover+0x102>
		          else{
		        	  goto hell;
		          }
		      }
		      // Aktualizacja warto≈õci axle
		      (*axle)--;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	881b      	ldrh	r3, [r3, #0]
 8000adc:	3b01      	subs	r3, #1
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	801a      	strh	r2, [r3, #0]
		      set_ang(*axle, 0);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 f872 	bl	8000bd4 <set_ang>
		      HAL_Delay(0.1);
 8000af0:	2000      	movs	r0, #0
 8000af2:	f000 fbdf 	bl	80012b4 <HAL_Delay>
	while ((*axle)> 0)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d1dd      	bne.n	8000aba <turnover+0xe>
 8000afe:	e01f      	b.n	8000b40 <turnover+0x94>
		              break;
 8000b00:	bf00      	nop
		  }

		  // Pƒôtla zwiƒôkszajƒÖca warto≈õƒá axle
		  while ((*axle) < 900)
 8000b02:	e01d      	b.n	8000b40 <turnover+0x94>
		  {
		      // Sprawdzenie dostƒôpno≈õci danych w strumieniu UART
		      if (HAL_UART_Receive(&huart2, &receivedChar, 1, 0) == HAL_OK)
 8000b04:	1cf9      	adds	r1, r7, #3
 8000b06:	2300      	movs	r3, #0
 8000b08:	2201      	movs	r2, #1
 8000b0a:	4831      	ldr	r0, [pc, #196]	@ (8000bd0 <turnover+0x124>)
 8000b0c:	f003 fbe6 	bl	80042dc <HAL_UART_Receive>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d105      	bne.n	8000b22 <turnover+0x76>
		      {
		          // Obs≈Çuga odebranego znaku
		          if (receivedChar == 'd')
 8000b16:	78fb      	ldrb	r3, [r7, #3]
 8000b18:	2b64      	cmp	r3, #100	@ 0x64
 8000b1a:	d017      	beq.n	8000b4c <turnover+0xa0>
		          {
		              // Przerwanie pƒôtli i obs≈Çuga znaku 'd'
		              break;
		          }
		          if(receivedChar == 'a');
 8000b1c:	78fb      	ldrb	r3, [r7, #3]
 8000b1e:	2b61      	cmp	r3, #97	@ 0x61
 8000b20:	d147      	bne.n	8000bb2 <turnover+0x106>
		          else{
		        	  goto hell;
		          }
		      }
		      // Aktualizacja warto≈õci axle
		      (*axle)++;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	3301      	adds	r3, #1
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	801a      	strh	r2, [r3, #0]
		      set_ang(*axle, 0);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	881b      	ldrh	r3, [r3, #0]
 8000b32:	2100      	movs	r1, #0
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 f84d 	bl	8000bd4 <set_ang>
		      HAL_Delay(0.1);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f000 fbba 	bl	80012b4 <HAL_Delay>
		  while ((*axle) < 900)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	881b      	ldrh	r3, [r3, #0]
 8000b44:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8000b48:	d3dc      	bcc.n	8000b04 <turnover+0x58>
		  }

		  // Pƒôtla ustawiajƒÖca warto≈õƒá axle na 450
		  while ((*axle) != 450)
 8000b4a:	e038      	b.n	8000bbe <turnover+0x112>
		              break;
 8000b4c:	bf00      	nop
		  while ((*axle) != 450)
 8000b4e:	e036      	b.n	8000bbe <turnover+0x112>
		  {
		      // Sprawdzenie dostƒôpno≈õci danych w strumieniu UART
		      if (HAL_UART_Receive(&huart2, &receivedChar, 1, 0) == HAL_OK)
 8000b50:	1cf9      	adds	r1, r7, #3
 8000b52:	2300      	movs	r3, #0
 8000b54:	2201      	movs	r2, #1
 8000b56:	481e      	ldr	r0, [pc, #120]	@ (8000bd0 <turnover+0x124>)
 8000b58:	f003 fbc0 	bl	80042dc <HAL_UART_Receive>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d105      	bne.n	8000b6e <turnover+0xc2>
		      {
		          // Obs≈Çuga odebranego znaku
		          if (receivedChar == 'a' || receivedChar == 'd')
 8000b62:	78fb      	ldrb	r3, [r7, #3]
 8000b64:	2b61      	cmp	r3, #97	@ 0x61
 8000b66:	d02f      	beq.n	8000bc8 <turnover+0x11c>
 8000b68:	78fb      	ldrb	r3, [r7, #3]
 8000b6a:	2b64      	cmp	r3, #100	@ 0x64
 8000b6c:	d02c      	beq.n	8000bc8 <turnover+0x11c>
		              // Przerwanie pƒôtli i obs≈Çuga znaku 'a' lub 'd'
		              break;
		          }
		      }
		      // Aktualizacja warto≈õci axle
		      if ((*axle) < 450)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	881b      	ldrh	r3, [r3, #0]
 8000b72:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8000b76:	d205      	bcs.n	8000b84 <turnover+0xd8>
		      {
		          (*axle)++;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	b29a      	uxth	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	801a      	strh	r2, [r3, #0]
		      }
		      if ((*axle) > 450)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	881b      	ldrh	r3, [r3, #0]
 8000b88:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8000b8c:	d905      	bls.n	8000b9a <turnover+0xee>
		      {
		          (*axle)--;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	801a      	strh	r2, [r3, #0]
		      }
		      set_ang(*axle, 0);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 f817 	bl	8000bd4 <set_ang>
		      HAL_Delay(0.1);
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f000 fb84 	bl	80012b4 <HAL_Delay>
 8000bac:	e002      	b.n	8000bb4 <turnover+0x108>
		        	  goto hell;
 8000bae:	bf00      	nop
 8000bb0:	e000      	b.n	8000bb4 <turnover+0x108>
		        	  goto hell;
 8000bb2:	bf00      	nop

		      hell: set_ang(450, 0);
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000bba:	f000 f80b 	bl	8000bd4 <set_ang>
		  while ((*axle) != 450)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8000bc6:	d1c3      	bne.n	8000b50 <turnover+0xa4>
		  }
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000194 	.word	0x20000194

08000bd4 <set_ang>:
void set_ang(uint16_t ang, uint8_t mode)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	460a      	mov	r2, r1
 8000bde:	80fb      	strh	r3, [r7, #6]
 8000be0:	4613      	mov	r3, r2
 8000be2:	717b      	strb	r3, [r7, #5]
	uint16_t val;

	if(ang > ANGLE_MAX)
 8000be4:	88fb      	ldrh	r3, [r7, #6]
 8000be6:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8000bea:	d902      	bls.n	8000bf2 <set_ang+0x1e>
	{
		ang = ANGLE_MAX;
 8000bec:	f44f 7361 	mov.w	r3, #900	@ 0x384
 8000bf0:	80fb      	strh	r3, [r7, #6]
	else if (ang < ANGLE_MIN)
	{
		ang = ANGLE_MIN;
	}

	if(mode)
 8000bf2:	797b      	ldrb	r3, [r7, #5]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d010      	beq.n	8000c1a <set_ang+0x46>
	{
		val = PWM_MIN + ((ang - ANGLE_MIN) * STEP) / 1000;
 8000bf8:	88fa      	ldrh	r2, [r7, #6]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	015b      	lsls	r3, r3, #5
 8000bfe:	4413      	add	r3, r2
 8000c00:	015b      	lsls	r3, r3, #5
 8000c02:	1a9b      	subs	r3, r3, r2
 8000c04:	4a12      	ldr	r2, [pc, #72]	@ (8000c50 <set_ang+0x7c>)
 8000c06:	fb82 1203 	smull	r1, r2, r2, r3
 8000c0a:	1192      	asrs	r2, r2, #6
 8000c0c:	17db      	asrs	r3, r3, #31
 8000c0e:	1ad3      	subs	r3, r2, r3
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	f203 434c 	addw	r3, r3, #1100	@ 0x44c
 8000c16:	81fb      	strh	r3, [r7, #14]
 8000c18:	e00f      	b.n	8000c3a <set_ang+0x66>
	}
	else
	{
		val = PWM_MAX - ((ang - ANGLE_MIN) * STEP) / 1000;
 8000c1a:	88fa      	ldrh	r2, [r7, #6]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	015b      	lsls	r3, r3, #5
 8000c20:	4413      	add	r3, r2
 8000c22:	015b      	lsls	r3, r3, #5
 8000c24:	1a9b      	subs	r3, r3, r2
 8000c26:	4a0a      	ldr	r2, [pc, #40]	@ (8000c50 <set_ang+0x7c>)
 8000c28:	fb82 1203 	smull	r1, r2, r2, r3
 8000c2c:	1192      	asrs	r2, r2, #6
 8000c2e:	17db      	asrs	r3, r3, #31
 8000c30:	1a9b      	subs	r3, r3, r2
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	f603 0302 	addw	r3, r3, #2050	@ 0x802
 8000c38:	81fb      	strh	r3, [r7, #14]
	}

	__HAL_TIM_SET_COMPARE(&TIM_NO, TIM_CH_NO, val);
 8000c3a:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <set_ang+0x80>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	89fa      	ldrh	r2, [r7, #14]
 8000c40:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000c42:	bf00      	nop
 8000c44:	3714      	adds	r7, #20
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	10624dd3 	.word	0x10624dd3
 8000c54:	200000c0 	.word	0x200000c0

08000c58 <detectMotor>:

void detectMotor(void){ // obrot serva w zale≈ºno≈õci od detekcji
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
    detect(detect_states);
 8000c5c:	4810      	ldr	r0, [pc, #64]	@ (8000ca0 <detectMotor+0x48>)
 8000c5e:	f7ff fe41 	bl	80008e4 <detect>

    (detect_states[0] != 0 && detect_states[1] != 0) ? turnover(&axle, 'a') :
 8000c62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <detectMotor+0x48>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d008      	beq.n	8000c7c <detectMotor+0x24>
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca0 <detectMotor+0x48>)
 8000c6c:	785b      	ldrb	r3, [r3, #1]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d004      	beq.n	8000c7c <detectMotor+0x24>
 8000c72:	2161      	movs	r1, #97	@ 0x61
 8000c74:	480b      	ldr	r0, [pc, #44]	@ (8000ca4 <detectMotor+0x4c>)
 8000c76:	f7ff ff19 	bl	8000aac <turnover>
    (detect_states[2] != 0 && detect_states[3] != 0 && detect_states[4] != 0) ? turnover(&axle, 'd') : 0;
}
 8000c7a:	e00f      	b.n	8000c9c <detectMotor+0x44>
    (detect_states[2] != 0 && detect_states[3] != 0 && detect_states[4] != 0) ? turnover(&axle, 'd') : 0;
 8000c7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <detectMotor+0x48>)
 8000c7e:	789b      	ldrb	r3, [r3, #2]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d00b      	beq.n	8000c9c <detectMotor+0x44>
 8000c84:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <detectMotor+0x48>)
 8000c86:	78db      	ldrb	r3, [r3, #3]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d007      	beq.n	8000c9c <detectMotor+0x44>
 8000c8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ca0 <detectMotor+0x48>)
 8000c8e:	791b      	ldrb	r3, [r3, #4]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d003      	beq.n	8000c9c <detectMotor+0x44>
 8000c94:	2164      	movs	r1, #100	@ 0x64
 8000c96:	4803      	ldr	r0, [pc, #12]	@ (8000ca4 <detectMotor+0x4c>)
 8000c98:	f7ff ff08 	bl	8000aac <turnover>
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	2000022c 	.word	0x2000022c
 8000ca4:	20000232 	.word	0x20000232

08000ca8 <motor_forward>:

void motor_forward(uint32_t duty_cycle)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle);
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <motor_forward+0x3c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce4 <motor_forward+0x3c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle);
 8000cc0:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <motor_forward+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000cc8:	4b07      	ldr	r3, [pc, #28]	@ (8000ce8 <motor_forward+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cd6:	4805      	ldr	r0, [pc, #20]	@ (8000cec <motor_forward+0x44>)
 8000cd8:	f000 fe22 	bl	8001920 <HAL_GPIO_WritePin>
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000028 	.word	0x20000028
 8000ce8:	20000074 	.word	0x20000074
 8000cec:	48000400 	.word	0x48000400

08000cf0 <motor_backward>:

// Function to move motors backward
void motor_backward(uint32_t duty_cycle)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <motor_backward+0x3c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, duty_cycle);
 8000d00:	4b0a      	ldr	r3, [pc, #40]	@ (8000d2c <motor_backward+0x3c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000d08:	4b09      	ldr	r3, [pc, #36]	@ (8000d30 <motor_backward+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle);
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <motor_backward+0x40>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d1e:	4805      	ldr	r0, [pc, #20]	@ (8000d34 <motor_backward+0x44>)
 8000d20:	f000 fdfe 	bl	8001920 <HAL_GPIO_WritePin>
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000028 	.word	0x20000028
 8000d30:	20000074 	.word	0x20000074
 8000d34:	48000400 	.word	0x48000400

08000d38 <motor_stop>:

// Function to stop motors
void motor_stop(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d68 <motor_stop+0x30>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2200      	movs	r2, #0
 8000d42:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8000d44:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <motor_stop+0x30>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000d4c:	4b07      	ldr	r3, [pc, #28]	@ (8000d6c <motor_stop+0x34>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2200      	movs	r2, #0
 8000d52:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000d54:	4b05      	ldr	r3, [pc, #20]	@ (8000d6c <motor_stop+0x34>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20000028 	.word	0x20000028
 8000d6c:	20000074 	.word	0x20000074

08000d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d74:	b672      	cpsid	i
}
 8000d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <Error_Handler+0x8>

08000d7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d82:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc0 <HAL_MspInit+0x44>)
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	4a0e      	ldr	r2, [pc, #56]	@ (8000dc0 <HAL_MspInit+0x44>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6193      	str	r3, [r2, #24]
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <HAL_MspInit+0x44>)
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9a:	4b09      	ldr	r3, [pc, #36]	@ (8000dc0 <HAL_MspInit+0x44>)
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	4a08      	ldr	r2, [pc, #32]	@ (8000dc0 <HAL_MspInit+0x44>)
 8000da0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000da4:	61d3      	str	r3, [r2, #28]
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <HAL_MspInit+0x44>)
 8000da8:	69db      	ldr	r3, [r3, #28]
 8000daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dae:	603b      	str	r3, [r7, #0]
 8000db0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000db2:	2007      	movs	r0, #7
 8000db4:	f000 fb72 	bl	800149c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a13      	ldr	r2, [pc, #76]	@ (8000e20 <HAL_TIM_Base_MspInit+0x5c>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d10c      	bne.n	8000df0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dd6:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <HAL_TIM_Base_MspInit+0x60>)
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	4a12      	ldr	r2, [pc, #72]	@ (8000e24 <HAL_TIM_Base_MspInit+0x60>)
 8000ddc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000de0:	6193      	str	r3, [r2, #24]
 8000de2:	4b10      	ldr	r3, [pc, #64]	@ (8000e24 <HAL_TIM_Base_MspInit+0x60>)
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000dee:	e010      	b.n	8000e12 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0c      	ldr	r2, [pc, #48]	@ (8000e28 <HAL_TIM_Base_MspInit+0x64>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d10b      	bne.n	8000e12 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <HAL_TIM_Base_MspInit+0x60>)
 8000dfc:	699b      	ldr	r3, [r3, #24]
 8000dfe:	4a09      	ldr	r2, [pc, #36]	@ (8000e24 <HAL_TIM_Base_MspInit+0x60>)
 8000e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e04:	6193      	str	r3, [r2, #24]
 8000e06:	4b07      	ldr	r3, [pc, #28]	@ (8000e24 <HAL_TIM_Base_MspInit+0x60>)
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
}
 8000e12:	bf00      	nop
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	40012c00 	.word	0x40012c00
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40014400 	.word	0x40014400

08000e2c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e3c:	d10b      	bne.n	8000e56 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e3e:	4b09      	ldr	r3, [pc, #36]	@ (8000e64 <HAL_TIM_PWM_MspInit+0x38>)
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	4a08      	ldr	r2, [pc, #32]	@ (8000e64 <HAL_TIM_PWM_MspInit+0x38>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	61d3      	str	r3, [r2, #28]
 8000e4a:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <HAL_TIM_PWM_MspInit+0x38>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e56:	bf00      	nop
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	40021000 	.word	0x40021000

08000e68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08c      	sub	sp, #48	@ 0x30
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a51      	ldr	r2, [pc, #324]	@ (8000fcc <HAL_TIM_MspPostInit+0x164>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d13a      	bne.n	8000f00 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8a:	4b51      	ldr	r3, [pc, #324]	@ (8000fd0 <HAL_TIM_MspPostInit+0x168>)
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	4a50      	ldr	r2, [pc, #320]	@ (8000fd0 <HAL_TIM_MspPostInit+0x168>)
 8000e90:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e94:	6153      	str	r3, [r2, #20]
 8000e96:	4b4e      	ldr	r3, [pc, #312]	@ (8000fd0 <HAL_TIM_MspPostInit+0x168>)
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e9e:	61bb      	str	r3, [r7, #24]
 8000ea0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	4b4b      	ldr	r3, [pc, #300]	@ (8000fd0 <HAL_TIM_MspPostInit+0x168>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a4a      	ldr	r2, [pc, #296]	@ (8000fd0 <HAL_TIM_MspPostInit+0x168>)
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eac:	6153      	str	r3, [r2, #20]
 8000eae:	4b48      	ldr	r3, [pc, #288]	@ (8000fd0 <HAL_TIM_MspPostInit+0x168>)
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = L2_Pin;
 8000eba:	2308      	movs	r3, #8
 8000ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(L2_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	483f      	ldr	r0, [pc, #252]	@ (8000fd4 <HAL_TIM_MspPostInit+0x16c>)
 8000ed6:	f000 fb99 	bl	800160c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = L1_Pin;
 8000eda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000eec:	2306      	movs	r3, #6
 8000eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(L1_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	f107 031c 	add.w	r3, r7, #28
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000efa:	f000 fb87 	bl	800160c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000efe:	e061      	b.n	8000fc4 <HAL_TIM_MspPostInit+0x15c>
  else if(htim->Instance==TIM2)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f08:	d13a      	bne.n	8000f80 <HAL_TIM_MspPostInit+0x118>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	4b31      	ldr	r3, [pc, #196]	@ (8000fd0 <HAL_TIM_MspPostInit+0x168>)
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	4a30      	ldr	r2, [pc, #192]	@ (8000fd0 <HAL_TIM_MspPostInit+0x168>)
 8000f10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f14:	6153      	str	r3, [r2, #20]
 8000f16:	4b2e      	ldr	r3, [pc, #184]	@ (8000fd0 <HAL_TIM_MspPostInit+0x168>)
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f22:	4b2b      	ldr	r3, [pc, #172]	@ (8000fd0 <HAL_TIM_MspPostInit+0x168>)
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	4a2a      	ldr	r2, [pc, #168]	@ (8000fd0 <HAL_TIM_MspPostInit+0x168>)
 8000f28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f2c:	6153      	str	r3, [r2, #20]
 8000f2e:	4b28      	ldr	r3, [pc, #160]	@ (8000fd0 <HAL_TIM_MspPostInit+0x168>)
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = P1_Pin;
 8000f3a:	2320      	movs	r3, #32
 8000f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(P1_GPIO_Port, &GPIO_InitStruct);
 8000f4e:	f107 031c 	add.w	r3, r7, #28
 8000f52:	4619      	mov	r1, r3
 8000f54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f58:	f000 fb58 	bl	800160c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = P2_Pin;
 8000f5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(P2_GPIO_Port, &GPIO_InitStruct);
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	4619      	mov	r1, r3
 8000f78:	4817      	ldr	r0, [pc, #92]	@ (8000fd8 <HAL_TIM_MspPostInit+0x170>)
 8000f7a:	f000 fb47 	bl	800160c <HAL_GPIO_Init>
}
 8000f7e:	e021      	b.n	8000fc4 <HAL_TIM_MspPostInit+0x15c>
  else if(htim->Instance==TIM16)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a15      	ldr	r2, [pc, #84]	@ (8000fdc <HAL_TIM_MspPostInit+0x174>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d11c      	bne.n	8000fc4 <HAL_TIM_MspPostInit+0x15c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	4b11      	ldr	r3, [pc, #68]	@ (8000fd0 <HAL_TIM_MspPostInit+0x168>)
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	4a10      	ldr	r2, [pc, #64]	@ (8000fd0 <HAL_TIM_MspPostInit+0x168>)
 8000f90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f94:	6153      	str	r3, [r2, #20]
 8000f96:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd0 <HAL_TIM_MspPostInit+0x168>)
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fa2:	2340      	movs	r3, #64	@ 0x40
 8000fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fc0:	f000 fb24 	bl	800160c <HAL_GPIO_Init>
}
 8000fc4:	bf00      	nop
 8000fc6:	3730      	adds	r7, #48	@ 0x30
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40012c00 	.word	0x40012c00
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	48000800 	.word	0x48000800
 8000fd8:	48000400 	.word	0x48000400
 8000fdc:	40014400 	.word	0x40014400

08000fe0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08c      	sub	sp, #48	@ 0x30
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 031c 	add.w	r3, r7, #28
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a37      	ldr	r2, [pc, #220]	@ (80010dc <HAL_UART_MspInit+0xfc>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d132      	bne.n	8001068 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001002:	4b37      	ldr	r3, [pc, #220]	@ (80010e0 <HAL_UART_MspInit+0x100>)
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	4a36      	ldr	r2, [pc, #216]	@ (80010e0 <HAL_UART_MspInit+0x100>)
 8001008:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800100c:	6193      	str	r3, [r2, #24]
 800100e:	4b34      	ldr	r3, [pc, #208]	@ (80010e0 <HAL_UART_MspInit+0x100>)
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001016:	61bb      	str	r3, [r7, #24]
 8001018:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	4b31      	ldr	r3, [pc, #196]	@ (80010e0 <HAL_UART_MspInit+0x100>)
 800101c:	695b      	ldr	r3, [r3, #20]
 800101e:	4a30      	ldr	r2, [pc, #192]	@ (80010e0 <HAL_UART_MspInit+0x100>)
 8001020:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001024:	6153      	str	r3, [r2, #20]
 8001026:	4b2e      	ldr	r3, [pc, #184]	@ (80010e0 <HAL_UART_MspInit+0x100>)
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001032:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001044:	2307      	movs	r3, #7
 8001046:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	4619      	mov	r1, r3
 800104e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001052:	f000 fadb 	bl	800160c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2100      	movs	r1, #0
 800105a:	2025      	movs	r0, #37	@ 0x25
 800105c:	f000 fa29 	bl	80014b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001060:	2025      	movs	r0, #37	@ 0x25
 8001062:	f000 fa42 	bl	80014ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001066:	e035      	b.n	80010d4 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART2)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a1d      	ldr	r2, [pc, #116]	@ (80010e4 <HAL_UART_MspInit+0x104>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d130      	bne.n	80010d4 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001072:	4b1b      	ldr	r3, [pc, #108]	@ (80010e0 <HAL_UART_MspInit+0x100>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	4a1a      	ldr	r2, [pc, #104]	@ (80010e0 <HAL_UART_MspInit+0x100>)
 8001078:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800107c:	61d3      	str	r3, [r2, #28]
 800107e:	4b18      	ldr	r3, [pc, #96]	@ (80010e0 <HAL_UART_MspInit+0x100>)
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <HAL_UART_MspInit+0x100>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	4a14      	ldr	r2, [pc, #80]	@ (80010e0 <HAL_UART_MspInit+0x100>)
 8001090:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001094:	6153      	str	r3, [r2, #20]
 8001096:	4b12      	ldr	r3, [pc, #72]	@ (80010e0 <HAL_UART_MspInit+0x100>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010a2:	230c      	movs	r3, #12
 80010a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	2302      	movs	r3, #2
 80010a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010b2:	2307      	movs	r3, #7
 80010b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b6:	f107 031c 	add.w	r3, r7, #28
 80010ba:	4619      	mov	r1, r3
 80010bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010c0:	f000 faa4 	bl	800160c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2100      	movs	r1, #0
 80010c8:	2026      	movs	r0, #38	@ 0x26
 80010ca:	f000 f9f2 	bl	80014b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010ce:	2026      	movs	r0, #38	@ 0x26
 80010d0:	f000 fa0b 	bl	80014ea <HAL_NVIC_EnableIRQ>
}
 80010d4:	bf00      	nop
 80010d6:	3730      	adds	r7, #48	@ 0x30
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40013800 	.word	0x40013800
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40004400 	.word	0x40004400

080010e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <NMI_Handler+0x4>

080010f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <HardFault_Handler+0x4>

080010f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <MemManage_Handler+0x4>

08001100 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <BusFault_Handler+0x4>

08001108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <UsageFault_Handler+0x4>

08001110 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800113e:	f000 f899 	bl	8001274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800114c:	4802      	ldr	r0, [pc, #8]	@ (8001158 <USART1_IRQHandler+0x10>)
 800114e:	f003 f9d3 	bl	80044f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	2000010c 	.word	0x2000010c

0800115c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001160:	4802      	ldr	r0, [pc, #8]	@ (800116c <USART2_IRQHandler+0x10>)
 8001162:	f003 f9c9 	bl	80044f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000194 	.word	0x20000194

08001170 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001174:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <SystemInit+0x20>)
 8001176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800117a:	4a05      	ldr	r2, [pc, #20]	@ (8001190 <SystemInit+0x20>)
 800117c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001180:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <Reset_Handler>:
 8001194:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011cc <LoopForever+0x2>
 8001198:	f7ff ffea 	bl	8001170 <SystemInit>
 800119c:	480c      	ldr	r0, [pc, #48]	@ (80011d0 <LoopForever+0x6>)
 800119e:	490d      	ldr	r1, [pc, #52]	@ (80011d4 <LoopForever+0xa>)
 80011a0:	4a0d      	ldr	r2, [pc, #52]	@ (80011d8 <LoopForever+0xe>)
 80011a2:	2300      	movs	r3, #0
 80011a4:	e002      	b.n	80011ac <LoopCopyDataInit>

080011a6 <CopyDataInit>:
 80011a6:	58d4      	ldr	r4, [r2, r3]
 80011a8:	50c4      	str	r4, [r0, r3]
 80011aa:	3304      	adds	r3, #4

080011ac <LoopCopyDataInit>:
 80011ac:	18c4      	adds	r4, r0, r3
 80011ae:	428c      	cmp	r4, r1
 80011b0:	d3f9      	bcc.n	80011a6 <CopyDataInit>
 80011b2:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <LoopForever+0x12>)
 80011b4:	4c0a      	ldr	r4, [pc, #40]	@ (80011e0 <LoopForever+0x16>)
 80011b6:	2300      	movs	r3, #0
 80011b8:	e001      	b.n	80011be <LoopFillZerobss>

080011ba <FillZerobss>:
 80011ba:	6013      	str	r3, [r2, #0]
 80011bc:	3204      	adds	r2, #4

080011be <LoopFillZerobss>:
 80011be:	42a2      	cmp	r2, r4
 80011c0:	d3fb      	bcc.n	80011ba <FillZerobss>
 80011c2:	f004 faab 	bl	800571c <__libc_init_array>
 80011c6:	f7fe ffff 	bl	80001c8 <main>

080011ca <LoopForever>:
 80011ca:	e7fe      	b.n	80011ca <LoopForever>
 80011cc:	20004000 	.word	0x20004000
 80011d0:	20000000 	.word	0x20000000
 80011d4:	2000000c 	.word	0x2000000c
 80011d8:	080057bc 	.word	0x080057bc
 80011dc:	2000000c 	.word	0x2000000c
 80011e0:	2000023c 	.word	0x2000023c

080011e4 <ADC1_IRQHandler>:
 80011e4:	e7fe      	b.n	80011e4 <ADC1_IRQHandler>
	...

080011e8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ec:	4b08      	ldr	r3, [pc, #32]	@ (8001210 <HAL_Init+0x28>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a07      	ldr	r2, [pc, #28]	@ (8001210 <HAL_Init+0x28>)
 80011f2:	f043 0310 	orr.w	r3, r3, #16
 80011f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f8:	2003      	movs	r0, #3
 80011fa:	f000 f94f 	bl	800149c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011fe:	2000      	movs	r0, #0
 8001200:	f000 f808 	bl	8001214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001204:	f7ff fdba 	bl	8000d7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40022000 	.word	0x40022000

08001214 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800121c:	4b12      	ldr	r3, [pc, #72]	@ (8001268 <HAL_InitTick+0x54>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b12      	ldr	r3, [pc, #72]	@ (800126c <HAL_InitTick+0x58>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4619      	mov	r1, r3
 8001226:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800122a:	fbb3 f3f1 	udiv	r3, r3, r1
 800122e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001232:	4618      	mov	r0, r3
 8001234:	f000 f967 	bl	8001506 <HAL_SYSTICK_Config>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e00e      	b.n	8001260 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b0f      	cmp	r3, #15
 8001246:	d80a      	bhi.n	800125e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001248:	2200      	movs	r2, #0
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f000 f92f 	bl	80014b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001254:	4a06      	ldr	r2, [pc, #24]	@ (8001270 <HAL_InitTick+0x5c>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800125a:	2300      	movs	r3, #0
 800125c:	e000      	b.n	8001260 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000000 	.word	0x20000000
 800126c:	20000008 	.word	0x20000008
 8001270:	20000004 	.word	0x20000004

08001274 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <HAL_IncTick+0x20>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <HAL_IncTick+0x24>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4413      	add	r3, r2
 8001284:	4a04      	ldr	r2, [pc, #16]	@ (8001298 <HAL_IncTick+0x24>)
 8001286:	6013      	str	r3, [r2, #0]
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20000008 	.word	0x20000008
 8001298:	20000238 	.word	0x20000238

0800129c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return uwTick;  
 80012a0:	4b03      	ldr	r3, [pc, #12]	@ (80012b0 <HAL_GetTick+0x14>)
 80012a2:	681b      	ldr	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000238 	.word	0x20000238

080012b4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012bc:	f7ff ffee 	bl	800129c <HAL_GetTick>
 80012c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012cc:	d005      	beq.n	80012da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ce:	4b0a      	ldr	r3, [pc, #40]	@ (80012f8 <HAL_Delay+0x44>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	461a      	mov	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4413      	add	r3, r2
 80012d8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80012da:	bf00      	nop
 80012dc:	f7ff ffde 	bl	800129c <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d8f7      	bhi.n	80012dc <HAL_Delay+0x28>
  {
  }
}
 80012ec:	bf00      	nop
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000008 	.word	0x20000008

080012fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800130c:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <__NVIC_SetPriorityGrouping+0x44>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001318:	4013      	ands	r3, r2
 800131a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001324:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001328:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800132c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132e:	4a04      	ldr	r2, [pc, #16]	@ (8001340 <__NVIC_SetPriorityGrouping+0x44>)
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	60d3      	str	r3, [r2, #12]
}
 8001334:	bf00      	nop
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001348:	4b04      	ldr	r3, [pc, #16]	@ (800135c <__NVIC_GetPriorityGrouping+0x18>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	0a1b      	lsrs	r3, r3, #8
 800134e:	f003 0307 	and.w	r3, r3, #7
}
 8001352:	4618      	mov	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	2b00      	cmp	r3, #0
 8001370:	db0b      	blt.n	800138a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	f003 021f 	and.w	r2, r3, #31
 8001378:	4907      	ldr	r1, [pc, #28]	@ (8001398 <__NVIC_EnableIRQ+0x38>)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	095b      	lsrs	r3, r3, #5
 8001380:	2001      	movs	r0, #1
 8001382:	fa00 f202 	lsl.w	r2, r0, r2
 8001386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000e100 	.word	0xe000e100

0800139c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	6039      	str	r1, [r7, #0]
 80013a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	db0a      	blt.n	80013c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	490c      	ldr	r1, [pc, #48]	@ (80013e8 <__NVIC_SetPriority+0x4c>)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	0112      	lsls	r2, r2, #4
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	440b      	add	r3, r1
 80013c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c4:	e00a      	b.n	80013dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4908      	ldr	r1, [pc, #32]	@ (80013ec <__NVIC_SetPriority+0x50>)
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	3b04      	subs	r3, #4
 80013d4:	0112      	lsls	r2, r2, #4
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	440b      	add	r3, r1
 80013da:	761a      	strb	r2, [r3, #24]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000e100 	.word	0xe000e100
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b089      	sub	sp, #36	@ 0x24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f1c3 0307 	rsb	r3, r3, #7
 800140a:	2b04      	cmp	r3, #4
 800140c:	bf28      	it	cs
 800140e:	2304      	movcs	r3, #4
 8001410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3304      	adds	r3, #4
 8001416:	2b06      	cmp	r3, #6
 8001418:	d902      	bls.n	8001420 <NVIC_EncodePriority+0x30>
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3b03      	subs	r3, #3
 800141e:	e000      	b.n	8001422 <NVIC_EncodePriority+0x32>
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	f04f 32ff 	mov.w	r2, #4294967295
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43da      	mvns	r2, r3
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	401a      	ands	r2, r3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001438:	f04f 31ff 	mov.w	r1, #4294967295
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	fa01 f303 	lsl.w	r3, r1, r3
 8001442:	43d9      	mvns	r1, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	4313      	orrs	r3, r2
         );
}
 800144a:	4618      	mov	r0, r3
 800144c:	3724      	adds	r7, #36	@ 0x24
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
	...

08001458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001468:	d301      	bcc.n	800146e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800146a:	2301      	movs	r3, #1
 800146c:	e00f      	b.n	800148e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146e:	4a0a      	ldr	r2, [pc, #40]	@ (8001498 <SysTick_Config+0x40>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001476:	210f      	movs	r1, #15
 8001478:	f04f 30ff 	mov.w	r0, #4294967295
 800147c:	f7ff ff8e 	bl	800139c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001480:	4b05      	ldr	r3, [pc, #20]	@ (8001498 <SysTick_Config+0x40>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001486:	4b04      	ldr	r3, [pc, #16]	@ (8001498 <SysTick_Config+0x40>)
 8001488:	2207      	movs	r2, #7
 800148a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	e000e010 	.word	0xe000e010

0800149c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff ff29 	bl	80012fc <__NVIC_SetPriorityGrouping>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b086      	sub	sp, #24
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
 80014be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c4:	f7ff ff3e 	bl	8001344 <__NVIC_GetPriorityGrouping>
 80014c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	68b9      	ldr	r1, [r7, #8]
 80014ce:	6978      	ldr	r0, [r7, #20]
 80014d0:	f7ff ff8e 	bl	80013f0 <NVIC_EncodePriority>
 80014d4:	4602      	mov	r2, r0
 80014d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014da:	4611      	mov	r1, r2
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff5d 	bl	800139c <__NVIC_SetPriority>
}
 80014e2:	bf00      	nop
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff31 	bl	8001360 <__NVIC_EnableIRQ>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ffa2 	bl	8001458 <SysTick_Config>
 8001514:	4603      	mov	r3, r0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800152c:	2b02      	cmp	r3, #2
 800152e:	d008      	beq.n	8001542 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2204      	movs	r2, #4
 8001534:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e020      	b.n	8001584 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 020e 	bic.w	r2, r2, #14
 8001550:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 0201 	bic.w	r2, r2, #1
 8001560:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800156a:	2101      	movs	r1, #1
 800156c:	fa01 f202 	lsl.w	r2, r1, r2
 8001570:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2201      	movs	r2, #1
 8001576:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001598:	2300      	movs	r3, #0
 800159a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d005      	beq.n	80015b2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2204      	movs	r2, #4
 80015aa:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	73fb      	strb	r3, [r7, #15]
 80015b0:	e027      	b.n	8001602 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 020e 	bic.w	r2, r2, #14
 80015c0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 0201 	bic.w	r2, r2, #1
 80015d0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015da:	2101      	movs	r1, #1
 80015dc:	fa01 f202 	lsl.w	r2, r1, r2
 80015e0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	4798      	blx	r3
    } 
  }
  return status;
 8001602:	7bfb      	ldrb	r3, [r7, #15]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800160c:	b480      	push	{r7}
 800160e:	b087      	sub	sp, #28
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800161a:	e14e      	b.n	80018ba <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	2101      	movs	r1, #1
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	fa01 f303 	lsl.w	r3, r1, r3
 8001628:	4013      	ands	r3, r2
 800162a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 8140 	beq.w	80018b4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	2b01      	cmp	r3, #1
 800163e:	d005      	beq.n	800164c <HAL_GPIO_Init+0x40>
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d130      	bne.n	80016ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	2203      	movs	r2, #3
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	68da      	ldr	r2, [r3, #12]
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4313      	orrs	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001682:	2201      	movs	r2, #1
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4013      	ands	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	091b      	lsrs	r3, r3, #4
 8001698:	f003 0201 	and.w	r2, r3, #1
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d017      	beq.n	80016ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	2203      	movs	r2, #3
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	4013      	ands	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d123      	bne.n	800173e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	08da      	lsrs	r2, r3, #3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3208      	adds	r2, #8
 80016fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001702:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	220f      	movs	r2, #15
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	691a      	ldr	r2, [r3, #16]
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	08da      	lsrs	r2, r3, #3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3208      	adds	r2, #8
 8001738:	6939      	ldr	r1, [r7, #16]
 800173a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	2203      	movs	r2, #3
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	4013      	ands	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 0203 	and.w	r2, r3, #3
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 809a 	beq.w	80018b4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001780:	4b55      	ldr	r3, [pc, #340]	@ (80018d8 <HAL_GPIO_Init+0x2cc>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	4a54      	ldr	r2, [pc, #336]	@ (80018d8 <HAL_GPIO_Init+0x2cc>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	6193      	str	r3, [r2, #24]
 800178c:	4b52      	ldr	r3, [pc, #328]	@ (80018d8 <HAL_GPIO_Init+0x2cc>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001798:	4a50      	ldr	r2, [pc, #320]	@ (80018dc <HAL_GPIO_Init+0x2d0>)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	089b      	lsrs	r3, r3, #2
 800179e:	3302      	adds	r3, #2
 80017a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f003 0303 	and.w	r3, r3, #3
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	220f      	movs	r2, #15
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4013      	ands	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80017c2:	d013      	beq.n	80017ec <HAL_GPIO_Init+0x1e0>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a46      	ldr	r2, [pc, #280]	@ (80018e0 <HAL_GPIO_Init+0x2d4>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d00d      	beq.n	80017e8 <HAL_GPIO_Init+0x1dc>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a45      	ldr	r2, [pc, #276]	@ (80018e4 <HAL_GPIO_Init+0x2d8>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d007      	beq.n	80017e4 <HAL_GPIO_Init+0x1d8>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a44      	ldr	r2, [pc, #272]	@ (80018e8 <HAL_GPIO_Init+0x2dc>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d101      	bne.n	80017e0 <HAL_GPIO_Init+0x1d4>
 80017dc:	2303      	movs	r3, #3
 80017de:	e006      	b.n	80017ee <HAL_GPIO_Init+0x1e2>
 80017e0:	2305      	movs	r3, #5
 80017e2:	e004      	b.n	80017ee <HAL_GPIO_Init+0x1e2>
 80017e4:	2302      	movs	r3, #2
 80017e6:	e002      	b.n	80017ee <HAL_GPIO_Init+0x1e2>
 80017e8:	2301      	movs	r3, #1
 80017ea:	e000      	b.n	80017ee <HAL_GPIO_Init+0x1e2>
 80017ec:	2300      	movs	r3, #0
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	f002 0203 	and.w	r2, r2, #3
 80017f4:	0092      	lsls	r2, r2, #2
 80017f6:	4093      	lsls	r3, r2
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017fe:	4937      	ldr	r1, [pc, #220]	@ (80018dc <HAL_GPIO_Init+0x2d0>)
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	089b      	lsrs	r3, r3, #2
 8001804:	3302      	adds	r3, #2
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800180c:	4b37      	ldr	r3, [pc, #220]	@ (80018ec <HAL_GPIO_Init+0x2e0>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	43db      	mvns	r3, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001830:	4a2e      	ldr	r2, [pc, #184]	@ (80018ec <HAL_GPIO_Init+0x2e0>)
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001836:	4b2d      	ldr	r3, [pc, #180]	@ (80018ec <HAL_GPIO_Init+0x2e0>)
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	43db      	mvns	r3, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800185a:	4a24      	ldr	r2, [pc, #144]	@ (80018ec <HAL_GPIO_Init+0x2e0>)
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001860:	4b22      	ldr	r3, [pc, #136]	@ (80018ec <HAL_GPIO_Init+0x2e0>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	43db      	mvns	r3, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d003      	beq.n	8001884 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001884:	4a19      	ldr	r2, [pc, #100]	@ (80018ec <HAL_GPIO_Init+0x2e0>)
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800188a:	4b18      	ldr	r3, [pc, #96]	@ (80018ec <HAL_GPIO_Init+0x2e0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	43db      	mvns	r3, r3
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4013      	ands	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018ae:	4a0f      	ldr	r2, [pc, #60]	@ (80018ec <HAL_GPIO_Init+0x2e0>)
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	3301      	adds	r3, #1
 80018b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	fa22 f303 	lsr.w	r3, r2, r3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f47f aea9 	bne.w	800161c <HAL_GPIO_Init+0x10>
  }
}
 80018ca:	bf00      	nop
 80018cc:	bf00      	nop
 80018ce:	371c      	adds	r7, #28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40010000 	.word	0x40010000
 80018e0:	48000400 	.word	0x48000400
 80018e4:	48000800 	.word	0x48000800
 80018e8:	48000c00 	.word	0x48000c00
 80018ec:	40010400 	.word	0x40010400

080018f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	691a      	ldr	r2, [r3, #16]
 8001900:	887b      	ldrh	r3, [r7, #2]
 8001902:	4013      	ands	r3, r2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d002      	beq.n	800190e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001908:	2301      	movs	r3, #1
 800190a:	73fb      	strb	r3, [r7, #15]
 800190c:	e001      	b.n	8001912 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800190e:	2300      	movs	r3, #0
 8001910:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001912:	7bfb      	ldrb	r3, [r7, #15]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	460b      	mov	r3, r1
 800192a:	807b      	strh	r3, [r7, #2]
 800192c:	4613      	mov	r3, r2
 800192e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001930:	787b      	ldrb	r3, [r7, #1]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001936:	887a      	ldrh	r2, [r7, #2]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800193c:	e002      	b.n	8001944 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800193e:	887a      	ldrh	r2, [r7, #2]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001956:	af00      	add	r7, sp, #0
 8001958:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800195c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001960:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001966:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d102      	bne.n	8001976 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	f001 b823 	b.w	80029bc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001976:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800197a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 817d 	beq.w	8001c86 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800198c:	4bbc      	ldr	r3, [pc, #752]	@ (8001c80 <HAL_RCC_OscConfig+0x330>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 030c 	and.w	r3, r3, #12
 8001994:	2b04      	cmp	r3, #4
 8001996:	d00c      	beq.n	80019b2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001998:	4bb9      	ldr	r3, [pc, #740]	@ (8001c80 <HAL_RCC_OscConfig+0x330>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 030c 	and.w	r3, r3, #12
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	d15c      	bne.n	8001a5e <HAL_RCC_OscConfig+0x10e>
 80019a4:	4bb6      	ldr	r3, [pc, #728]	@ (8001c80 <HAL_RCC_OscConfig+0x330>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019b0:	d155      	bne.n	8001a5e <HAL_RCC_OscConfig+0x10e>
 80019b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019b6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ba:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80019be:	fa93 f3a3 	rbit	r3, r3
 80019c2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019c6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ca:	fab3 f383 	clz	r3, r3
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	095b      	lsrs	r3, r3, #5
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d102      	bne.n	80019e4 <HAL_RCC_OscConfig+0x94>
 80019de:	4ba8      	ldr	r3, [pc, #672]	@ (8001c80 <HAL_RCC_OscConfig+0x330>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	e015      	b.n	8001a10 <HAL_RCC_OscConfig+0xc0>
 80019e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019e8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ec:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80019f0:	fa93 f3a3 	rbit	r3, r3
 80019f4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80019f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019fc:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001a00:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001a04:	fa93 f3a3 	rbit	r3, r3
 8001a08:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001a0c:	4b9c      	ldr	r3, [pc, #624]	@ (8001c80 <HAL_RCC_OscConfig+0x330>)
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a10:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a14:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001a18:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001a1c:	fa92 f2a2 	rbit	r2, r2
 8001a20:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001a24:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001a28:	fab2 f282 	clz	r2, r2
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	f042 0220 	orr.w	r2, r2, #32
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	f002 021f 	and.w	r2, r2, #31
 8001a38:	2101      	movs	r1, #1
 8001a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 811f 	beq.w	8001c84 <HAL_RCC_OscConfig+0x334>
 8001a46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f040 8116 	bne.w	8001c84 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	f000 bfaf 	b.w	80029bc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a6e:	d106      	bne.n	8001a7e <HAL_RCC_OscConfig+0x12e>
 8001a70:	4b83      	ldr	r3, [pc, #524]	@ (8001c80 <HAL_RCC_OscConfig+0x330>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a82      	ldr	r2, [pc, #520]	@ (8001c80 <HAL_RCC_OscConfig+0x330>)
 8001a76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	e036      	b.n	8001aec <HAL_RCC_OscConfig+0x19c>
 8001a7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10c      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x158>
 8001a8e:	4b7c      	ldr	r3, [pc, #496]	@ (8001c80 <HAL_RCC_OscConfig+0x330>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a7b      	ldr	r2, [pc, #492]	@ (8001c80 <HAL_RCC_OscConfig+0x330>)
 8001a94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	4b79      	ldr	r3, [pc, #484]	@ (8001c80 <HAL_RCC_OscConfig+0x330>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a78      	ldr	r2, [pc, #480]	@ (8001c80 <HAL_RCC_OscConfig+0x330>)
 8001aa0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	e021      	b.n	8001aec <HAL_RCC_OscConfig+0x19c>
 8001aa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x184>
 8001aba:	4b71      	ldr	r3, [pc, #452]	@ (8001c80 <HAL_RCC_OscConfig+0x330>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a70      	ldr	r2, [pc, #448]	@ (8001c80 <HAL_RCC_OscConfig+0x330>)
 8001ac0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	4b6e      	ldr	r3, [pc, #440]	@ (8001c80 <HAL_RCC_OscConfig+0x330>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a6d      	ldr	r2, [pc, #436]	@ (8001c80 <HAL_RCC_OscConfig+0x330>)
 8001acc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e00b      	b.n	8001aec <HAL_RCC_OscConfig+0x19c>
 8001ad4:	4b6a      	ldr	r3, [pc, #424]	@ (8001c80 <HAL_RCC_OscConfig+0x330>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a69      	ldr	r2, [pc, #420]	@ (8001c80 <HAL_RCC_OscConfig+0x330>)
 8001ada:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	4b67      	ldr	r3, [pc, #412]	@ (8001c80 <HAL_RCC_OscConfig+0x330>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a66      	ldr	r2, [pc, #408]	@ (8001c80 <HAL_RCC_OscConfig+0x330>)
 8001ae6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aea:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001aec:	4b64      	ldr	r3, [pc, #400]	@ (8001c80 <HAL_RCC_OscConfig+0x330>)
 8001aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af0:	f023 020f 	bic.w	r2, r3, #15
 8001af4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	495f      	ldr	r1, [pc, #380]	@ (8001c80 <HAL_RCC_OscConfig+0x330>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d059      	beq.n	8001bca <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b16:	f7ff fbc1 	bl	800129c <HAL_GetTick>
 8001b1a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1e:	e00a      	b.n	8001b36 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b20:	f7ff fbbc 	bl	800129c <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b64      	cmp	r3, #100	@ 0x64
 8001b2e:	d902      	bls.n	8001b36 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	f000 bf43 	b.w	80029bc <HAL_RCC_OscConfig+0x106c>
 8001b36:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b3a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001b42:	fa93 f3a3 	rbit	r3, r3
 8001b46:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001b4a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4e:	fab3 f383 	clz	r3, r3
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	095b      	lsrs	r3, r3, #5
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d102      	bne.n	8001b68 <HAL_RCC_OscConfig+0x218>
 8001b62:	4b47      	ldr	r3, [pc, #284]	@ (8001c80 <HAL_RCC_OscConfig+0x330>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	e015      	b.n	8001b94 <HAL_RCC_OscConfig+0x244>
 8001b68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b6c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b70:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001b74:	fa93 f3a3 	rbit	r3, r3
 8001b78:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001b7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b80:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001b84:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001b88:	fa93 f3a3 	rbit	r3, r3
 8001b8c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001b90:	4b3b      	ldr	r3, [pc, #236]	@ (8001c80 <HAL_RCC_OscConfig+0x330>)
 8001b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b94:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b98:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001b9c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001ba0:	fa92 f2a2 	rbit	r2, r2
 8001ba4:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001ba8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001bac:	fab2 f282 	clz	r2, r2
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	f042 0220 	orr.w	r2, r2, #32
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	f002 021f 	and.w	r2, r2, #31
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0ab      	beq.n	8001b20 <HAL_RCC_OscConfig+0x1d0>
 8001bc8:	e05d      	b.n	8001c86 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bca:	f7ff fb67 	bl	800129c <HAL_GetTick>
 8001bce:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd2:	e00a      	b.n	8001bea <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bd4:	f7ff fb62 	bl	800129c <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b64      	cmp	r3, #100	@ 0x64
 8001be2:	d902      	bls.n	8001bea <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	f000 bee9 	b.w	80029bc <HAL_RCC_OscConfig+0x106c>
 8001bea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bee:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001bf6:	fa93 f3a3 	rbit	r3, r3
 8001bfa:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001bfe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c02:	fab3 f383 	clz	r3, r3
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	095b      	lsrs	r3, r3, #5
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d102      	bne.n	8001c1c <HAL_RCC_OscConfig+0x2cc>
 8001c16:	4b1a      	ldr	r3, [pc, #104]	@ (8001c80 <HAL_RCC_OscConfig+0x330>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	e015      	b.n	8001c48 <HAL_RCC_OscConfig+0x2f8>
 8001c1c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c20:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c24:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001c28:	fa93 f3a3 	rbit	r3, r3
 8001c2c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001c30:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c34:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001c38:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001c3c:	fa93 f3a3 	rbit	r3, r3
 8001c40:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001c44:	4b0e      	ldr	r3, [pc, #56]	@ (8001c80 <HAL_RCC_OscConfig+0x330>)
 8001c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c48:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c4c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001c50:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001c54:	fa92 f2a2 	rbit	r2, r2
 8001c58:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001c5c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001c60:	fab2 f282 	clz	r2, r2
 8001c64:	b2d2      	uxtb	r2, r2
 8001c66:	f042 0220 	orr.w	r2, r2, #32
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	f002 021f 	and.w	r2, r2, #31
 8001c70:	2101      	movs	r1, #1
 8001c72:	fa01 f202 	lsl.w	r2, r1, r2
 8001c76:	4013      	ands	r3, r2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1ab      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x284>
 8001c7c:	e003      	b.n	8001c86 <HAL_RCC_OscConfig+0x336>
 8001c7e:	bf00      	nop
 8001c80:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 817d 	beq.w	8001f96 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c9c:	4ba6      	ldr	r3, [pc, #664]	@ (8001f38 <HAL_RCC_OscConfig+0x5e8>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 030c 	and.w	r3, r3, #12
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00b      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ca8:	4ba3      	ldr	r3, [pc, #652]	@ (8001f38 <HAL_RCC_OscConfig+0x5e8>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 030c 	and.w	r3, r3, #12
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d172      	bne.n	8001d9a <HAL_RCC_OscConfig+0x44a>
 8001cb4:	4ba0      	ldr	r3, [pc, #640]	@ (8001f38 <HAL_RCC_OscConfig+0x5e8>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d16c      	bne.n	8001d9a <HAL_RCC_OscConfig+0x44a>
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001cca:	fa93 f3a3 	rbit	r3, r3
 8001cce:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001cd2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd6:	fab3 f383 	clz	r3, r3
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	095b      	lsrs	r3, r3, #5
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d102      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x3a0>
 8001cea:	4b93      	ldr	r3, [pc, #588]	@ (8001f38 <HAL_RCC_OscConfig+0x5e8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	e013      	b.n	8001d18 <HAL_RCC_OscConfig+0x3c8>
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf6:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001cfa:	fa93 f3a3 	rbit	r3, r3
 8001cfe:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001d02:	2302      	movs	r3, #2
 8001d04:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001d08:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001d0c:	fa93 f3a3 	rbit	r3, r3
 8001d10:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001d14:	4b88      	ldr	r3, [pc, #544]	@ (8001f38 <HAL_RCC_OscConfig+0x5e8>)
 8001d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d18:	2202      	movs	r2, #2
 8001d1a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001d1e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001d22:	fa92 f2a2 	rbit	r2, r2
 8001d26:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001d2a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001d2e:	fab2 f282 	clz	r2, r2
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	f042 0220 	orr.w	r2, r2, #32
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	f002 021f 	and.w	r2, r2, #31
 8001d3e:	2101      	movs	r1, #1
 8001d40:	fa01 f202 	lsl.w	r2, r1, r2
 8001d44:	4013      	ands	r3, r2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00a      	beq.n	8001d60 <HAL_RCC_OscConfig+0x410>
 8001d4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d002      	beq.n	8001d60 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	f000 be2e 	b.w	80029bc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d60:	4b75      	ldr	r3, [pc, #468]	@ (8001f38 <HAL_RCC_OscConfig+0x5e8>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d6c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	21f8      	movs	r1, #248	@ 0xf8
 8001d76:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001d7e:	fa91 f1a1 	rbit	r1, r1
 8001d82:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001d86:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001d8a:	fab1 f181 	clz	r1, r1
 8001d8e:	b2c9      	uxtb	r1, r1
 8001d90:	408b      	lsls	r3, r1
 8001d92:	4969      	ldr	r1, [pc, #420]	@ (8001f38 <HAL_RCC_OscConfig+0x5e8>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d98:	e0fd      	b.n	8001f96 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 8088 	beq.w	8001ebc <HAL_RCC_OscConfig+0x56c>
 8001dac:	2301      	movs	r3, #1
 8001dae:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001db6:	fa93 f3a3 	rbit	r3, r3
 8001dba:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001dbe:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc2:	fab3 f383 	clz	r3, r3
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001dcc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd8:	f7ff fa60 	bl	800129c <HAL_GetTick>
 8001ddc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de0:	e00a      	b.n	8001df8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001de2:	f7ff fa5b 	bl	800129c <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d902      	bls.n	8001df8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	f000 bde2 	b.w	80029bc <HAL_RCC_OscConfig+0x106c>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001e02:	fa93 f3a3 	rbit	r3, r3
 8001e06:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001e0a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0e:	fab3 f383 	clz	r3, r3
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	095b      	lsrs	r3, r3, #5
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d102      	bne.n	8001e28 <HAL_RCC_OscConfig+0x4d8>
 8001e22:	4b45      	ldr	r3, [pc, #276]	@ (8001f38 <HAL_RCC_OscConfig+0x5e8>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	e013      	b.n	8001e50 <HAL_RCC_OscConfig+0x500>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001e32:	fa93 f3a3 	rbit	r3, r3
 8001e36:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001e40:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001e44:	fa93 f3a3 	rbit	r3, r3
 8001e48:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001e4c:	4b3a      	ldr	r3, [pc, #232]	@ (8001f38 <HAL_RCC_OscConfig+0x5e8>)
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e50:	2202      	movs	r2, #2
 8001e52:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001e56:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001e5a:	fa92 f2a2 	rbit	r2, r2
 8001e5e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001e62:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001e66:	fab2 f282 	clz	r2, r2
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	f042 0220 	orr.w	r2, r2, #32
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	f002 021f 	and.w	r2, r2, #31
 8001e76:	2101      	movs	r1, #1
 8001e78:	fa01 f202 	lsl.w	r2, r1, r2
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0af      	beq.n	8001de2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e82:	4b2d      	ldr	r3, [pc, #180]	@ (8001f38 <HAL_RCC_OscConfig+0x5e8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	21f8      	movs	r1, #248	@ 0xf8
 8001e98:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001ea0:	fa91 f1a1 	rbit	r1, r1
 8001ea4:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001ea8:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001eac:	fab1 f181 	clz	r1, r1
 8001eb0:	b2c9      	uxtb	r1, r1
 8001eb2:	408b      	lsls	r3, r1
 8001eb4:	4920      	ldr	r1, [pc, #128]	@ (8001f38 <HAL_RCC_OscConfig+0x5e8>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]
 8001eba:	e06c      	b.n	8001f96 <HAL_RCC_OscConfig+0x646>
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001ec6:	fa93 f3a3 	rbit	r3, r3
 8001eca:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001ece:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ed2:	fab3 f383 	clz	r3, r3
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001edc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee8:	f7ff f9d8 	bl	800129c <HAL_GetTick>
 8001eec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef0:	e00a      	b.n	8001f08 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ef2:	f7ff f9d3 	bl	800129c <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d902      	bls.n	8001f08 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	f000 bd5a 	b.w	80029bc <HAL_RCC_OscConfig+0x106c>
 8001f08:	2302      	movs	r3, #2
 8001f0a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001f12:	fa93 f3a3 	rbit	r3, r3
 8001f16:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001f1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f1e:	fab3 f383 	clz	r3, r3
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	095b      	lsrs	r3, r3, #5
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d104      	bne.n	8001f3c <HAL_RCC_OscConfig+0x5ec>
 8001f32:	4b01      	ldr	r3, [pc, #4]	@ (8001f38 <HAL_RCC_OscConfig+0x5e8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	e015      	b.n	8001f64 <HAL_RCC_OscConfig+0x614>
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001f46:	fa93 f3a3 	rbit	r3, r3
 8001f4a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001f4e:	2302      	movs	r3, #2
 8001f50:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001f54:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001f58:	fa93 f3a3 	rbit	r3, r3
 8001f5c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001f60:	4bc8      	ldr	r3, [pc, #800]	@ (8002284 <HAL_RCC_OscConfig+0x934>)
 8001f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f64:	2202      	movs	r2, #2
 8001f66:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001f6a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001f6e:	fa92 f2a2 	rbit	r2, r2
 8001f72:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001f76:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001f7a:	fab2 f282 	clz	r2, r2
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	f042 0220 	orr.w	r2, r2, #32
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	f002 021f 	and.w	r2, r2, #31
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f90:	4013      	ands	r3, r2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1ad      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f9a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 8110 	beq.w	80021cc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d079      	beq.n	80020b0 <HAL_RCC_OscConfig+0x760>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001fc6:	fa93 f3a3 	rbit	r3, r3
 8001fca:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001fce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fd2:	fab3 f383 	clz	r3, r3
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4bab      	ldr	r3, [pc, #684]	@ (8002288 <HAL_RCC_OscConfig+0x938>)
 8001fdc:	4413      	add	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe6:	f7ff f959 	bl	800129c <HAL_GetTick>
 8001fea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fee:	e00a      	b.n	8002006 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ff0:	f7ff f954 	bl	800129c <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d902      	bls.n	8002006 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	f000 bcdb 	b.w	80029bc <HAL_RCC_OscConfig+0x106c>
 8002006:	2302      	movs	r3, #2
 8002008:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002010:	fa93 f3a3 	rbit	r3, r3
 8002014:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002018:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800201c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002020:	2202      	movs	r2, #2
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002028:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	fa93 f2a3 	rbit	r2, r3
 8002032:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002036:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002040:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002044:	2202      	movs	r2, #2
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800204c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	fa93 f2a3 	rbit	r2, r3
 8002056:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800205a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800205e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002060:	4b88      	ldr	r3, [pc, #544]	@ (8002284 <HAL_RCC_OscConfig+0x934>)
 8002062:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002064:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002068:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800206c:	2102      	movs	r1, #2
 800206e:	6019      	str	r1, [r3, #0]
 8002070:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002074:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	fa93 f1a3 	rbit	r1, r3
 800207e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002082:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002086:	6019      	str	r1, [r3, #0]
  return result;
 8002088:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800208c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	fab3 f383 	clz	r3, r3
 8002096:	b2db      	uxtb	r3, r3
 8002098:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800209c:	b2db      	uxtb	r3, r3
 800209e:	f003 031f 	and.w	r3, r3, #31
 80020a2:	2101      	movs	r1, #1
 80020a4:	fa01 f303 	lsl.w	r3, r1, r3
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0a0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x6a0>
 80020ae:	e08d      	b.n	80021cc <HAL_RCC_OscConfig+0x87c>
 80020b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80020b8:	2201      	movs	r2, #1
 80020ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	fa93 f2a3 	rbit	r2, r3
 80020ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ce:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80020d2:	601a      	str	r2, [r3, #0]
  return result;
 80020d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80020dc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020de:	fab3 f383 	clz	r3, r3
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	461a      	mov	r2, r3
 80020e6:	4b68      	ldr	r3, [pc, #416]	@ (8002288 <HAL_RCC_OscConfig+0x938>)
 80020e8:	4413      	add	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	461a      	mov	r2, r3
 80020ee:	2300      	movs	r3, #0
 80020f0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f2:	f7ff f8d3 	bl	800129c <HAL_GetTick>
 80020f6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020fa:	e00a      	b.n	8002112 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020fc:	f7ff f8ce 	bl	800129c <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d902      	bls.n	8002112 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	f000 bc55 	b.w	80029bc <HAL_RCC_OscConfig+0x106c>
 8002112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002116:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800211a:	2202      	movs	r2, #2
 800211c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002122:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	fa93 f2a3 	rbit	r2, r3
 800212c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002130:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800213a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800213e:	2202      	movs	r2, #2
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002146:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	fa93 f2a3 	rbit	r2, r3
 8002150:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002154:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800215e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002162:	2202      	movs	r2, #2
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800216a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	fa93 f2a3 	rbit	r2, r3
 8002174:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002178:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800217c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800217e:	4b41      	ldr	r3, [pc, #260]	@ (8002284 <HAL_RCC_OscConfig+0x934>)
 8002180:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002182:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002186:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800218a:	2102      	movs	r1, #2
 800218c:	6019      	str	r1, [r3, #0]
 800218e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002192:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	fa93 f1a3 	rbit	r1, r3
 800219c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80021a4:	6019      	str	r1, [r3, #0]
  return result;
 80021a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021aa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	fab3 f383 	clz	r3, r3
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	f003 031f 	and.w	r3, r3, #31
 80021c0:	2101      	movs	r1, #1
 80021c2:	fa01 f303 	lsl.w	r3, r1, r3
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d197      	bne.n	80020fc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 81a1 	beq.w	8002524 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021e2:	2300      	movs	r3, #0
 80021e4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021e8:	4b26      	ldr	r3, [pc, #152]	@ (8002284 <HAL_RCC_OscConfig+0x934>)
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d116      	bne.n	8002222 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f4:	4b23      	ldr	r3, [pc, #140]	@ (8002284 <HAL_RCC_OscConfig+0x934>)
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	4a22      	ldr	r2, [pc, #136]	@ (8002284 <HAL_RCC_OscConfig+0x934>)
 80021fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021fe:	61d3      	str	r3, [r2, #28]
 8002200:	4b20      	ldr	r3, [pc, #128]	@ (8002284 <HAL_RCC_OscConfig+0x934>)
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002208:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800220c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002216:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800221a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800221c:	2301      	movs	r3, #1
 800221e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002222:	4b1a      	ldr	r3, [pc, #104]	@ (800228c <HAL_RCC_OscConfig+0x93c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	d11a      	bne.n	8002264 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800222e:	4b17      	ldr	r3, [pc, #92]	@ (800228c <HAL_RCC_OscConfig+0x93c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a16      	ldr	r2, [pc, #88]	@ (800228c <HAL_RCC_OscConfig+0x93c>)
 8002234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002238:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800223a:	f7ff f82f 	bl	800129c <HAL_GetTick>
 800223e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002242:	e009      	b.n	8002258 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002244:	f7ff f82a 	bl	800129c <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b64      	cmp	r3, #100	@ 0x64
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e3b1      	b.n	80029bc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002258:	4b0c      	ldr	r3, [pc, #48]	@ (800228c <HAL_RCC_OscConfig+0x93c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0ef      	beq.n	8002244 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002264:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002268:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d10d      	bne.n	8002290 <HAL_RCC_OscConfig+0x940>
 8002274:	4b03      	ldr	r3, [pc, #12]	@ (8002284 <HAL_RCC_OscConfig+0x934>)
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	4a02      	ldr	r2, [pc, #8]	@ (8002284 <HAL_RCC_OscConfig+0x934>)
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	6213      	str	r3, [r2, #32]
 8002280:	e03c      	b.n	80022fc <HAL_RCC_OscConfig+0x9ac>
 8002282:	bf00      	nop
 8002284:	40021000 	.word	0x40021000
 8002288:	10908120 	.word	0x10908120
 800228c:	40007000 	.word	0x40007000
 8002290:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002294:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10c      	bne.n	80022ba <HAL_RCC_OscConfig+0x96a>
 80022a0:	4bc1      	ldr	r3, [pc, #772]	@ (80025a8 <HAL_RCC_OscConfig+0xc58>)
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	4ac0      	ldr	r2, [pc, #768]	@ (80025a8 <HAL_RCC_OscConfig+0xc58>)
 80022a6:	f023 0301 	bic.w	r3, r3, #1
 80022aa:	6213      	str	r3, [r2, #32]
 80022ac:	4bbe      	ldr	r3, [pc, #760]	@ (80025a8 <HAL_RCC_OscConfig+0xc58>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	4abd      	ldr	r2, [pc, #756]	@ (80025a8 <HAL_RCC_OscConfig+0xc58>)
 80022b2:	f023 0304 	bic.w	r3, r3, #4
 80022b6:	6213      	str	r3, [r2, #32]
 80022b8:	e020      	b.n	80022fc <HAL_RCC_OscConfig+0x9ac>
 80022ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	2b05      	cmp	r3, #5
 80022c8:	d10c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x994>
 80022ca:	4bb7      	ldr	r3, [pc, #732]	@ (80025a8 <HAL_RCC_OscConfig+0xc58>)
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	4ab6      	ldr	r2, [pc, #728]	@ (80025a8 <HAL_RCC_OscConfig+0xc58>)
 80022d0:	f043 0304 	orr.w	r3, r3, #4
 80022d4:	6213      	str	r3, [r2, #32]
 80022d6:	4bb4      	ldr	r3, [pc, #720]	@ (80025a8 <HAL_RCC_OscConfig+0xc58>)
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	4ab3      	ldr	r2, [pc, #716]	@ (80025a8 <HAL_RCC_OscConfig+0xc58>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6213      	str	r3, [r2, #32]
 80022e2:	e00b      	b.n	80022fc <HAL_RCC_OscConfig+0x9ac>
 80022e4:	4bb0      	ldr	r3, [pc, #704]	@ (80025a8 <HAL_RCC_OscConfig+0xc58>)
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	4aaf      	ldr	r2, [pc, #700]	@ (80025a8 <HAL_RCC_OscConfig+0xc58>)
 80022ea:	f023 0301 	bic.w	r3, r3, #1
 80022ee:	6213      	str	r3, [r2, #32]
 80022f0:	4bad      	ldr	r3, [pc, #692]	@ (80025a8 <HAL_RCC_OscConfig+0xc58>)
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	4aac      	ldr	r2, [pc, #688]	@ (80025a8 <HAL_RCC_OscConfig+0xc58>)
 80022f6:	f023 0304 	bic.w	r3, r3, #4
 80022fa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002300:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 8081 	beq.w	8002410 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230e:	f7fe ffc5 	bl	800129c <HAL_GetTick>
 8002312:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002316:	e00b      	b.n	8002330 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002318:	f7fe ffc0 	bl	800129c <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002328:	4293      	cmp	r3, r2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e345      	b.n	80029bc <HAL_RCC_OscConfig+0x106c>
 8002330:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002334:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002338:	2202      	movs	r2, #2
 800233a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002340:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	fa93 f2a3 	rbit	r2, r3
 800234a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800234e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002358:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800235c:	2202      	movs	r2, #2
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002364:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	fa93 f2a3 	rbit	r2, r3
 800236e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002372:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002376:	601a      	str	r2, [r3, #0]
  return result;
 8002378:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800237c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002380:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002382:	fab3 f383 	clz	r3, r3
 8002386:	b2db      	uxtb	r3, r3
 8002388:	095b      	lsrs	r3, r3, #5
 800238a:	b2db      	uxtb	r3, r3
 800238c:	f043 0302 	orr.w	r3, r3, #2
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d102      	bne.n	800239c <HAL_RCC_OscConfig+0xa4c>
 8002396:	4b84      	ldr	r3, [pc, #528]	@ (80025a8 <HAL_RCC_OscConfig+0xc58>)
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	e013      	b.n	80023c4 <HAL_RCC_OscConfig+0xa74>
 800239c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80023a4:	2202      	movs	r2, #2
 80023a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ac:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	fa93 f2a3 	rbit	r2, r3
 80023b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ba:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	4b79      	ldr	r3, [pc, #484]	@ (80025a8 <HAL_RCC_OscConfig+0xc58>)
 80023c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023c8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80023cc:	2102      	movs	r1, #2
 80023ce:	6011      	str	r1, [r2, #0]
 80023d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023d4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80023d8:	6812      	ldr	r2, [r2, #0]
 80023da:	fa92 f1a2 	rbit	r1, r2
 80023de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023e2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80023e6:	6011      	str	r1, [r2, #0]
  return result;
 80023e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023ec:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80023f0:	6812      	ldr	r2, [r2, #0]
 80023f2:	fab2 f282 	clz	r2, r2
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	f002 021f 	and.w	r2, r2, #31
 8002402:	2101      	movs	r1, #1
 8002404:	fa01 f202 	lsl.w	r2, r1, r2
 8002408:	4013      	ands	r3, r2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d084      	beq.n	8002318 <HAL_RCC_OscConfig+0x9c8>
 800240e:	e07f      	b.n	8002510 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002410:	f7fe ff44 	bl	800129c <HAL_GetTick>
 8002414:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002418:	e00b      	b.n	8002432 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800241a:	f7fe ff3f 	bl	800129c <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	f241 3288 	movw	r2, #5000	@ 0x1388
 800242a:	4293      	cmp	r3, r2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e2c4      	b.n	80029bc <HAL_RCC_OscConfig+0x106c>
 8002432:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002436:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800243a:	2202      	movs	r2, #2
 800243c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002442:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	fa93 f2a3 	rbit	r2, r3
 800244c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002450:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800245a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800245e:	2202      	movs	r2, #2
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002466:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	fa93 f2a3 	rbit	r2, r3
 8002470:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002474:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002478:	601a      	str	r2, [r3, #0]
  return result;
 800247a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800247e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002482:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002484:	fab3 f383 	clz	r3, r3
 8002488:	b2db      	uxtb	r3, r3
 800248a:	095b      	lsrs	r3, r3, #5
 800248c:	b2db      	uxtb	r3, r3
 800248e:	f043 0302 	orr.w	r3, r3, #2
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d102      	bne.n	800249e <HAL_RCC_OscConfig+0xb4e>
 8002498:	4b43      	ldr	r3, [pc, #268]	@ (80025a8 <HAL_RCC_OscConfig+0xc58>)
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	e013      	b.n	80024c6 <HAL_RCC_OscConfig+0xb76>
 800249e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80024a6:	2202      	movs	r2, #2
 80024a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ae:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	fa93 f2a3 	rbit	r2, r3
 80024b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024bc:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	4b39      	ldr	r3, [pc, #228]	@ (80025a8 <HAL_RCC_OscConfig+0xc58>)
 80024c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024ca:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80024ce:	2102      	movs	r1, #2
 80024d0:	6011      	str	r1, [r2, #0]
 80024d2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024d6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	fa92 f1a2 	rbit	r1, r2
 80024e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024e4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80024e8:	6011      	str	r1, [r2, #0]
  return result;
 80024ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024ee:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	fab2 f282 	clz	r2, r2
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	f002 021f 	and.w	r2, r2, #31
 8002504:	2101      	movs	r1, #1
 8002506:	fa01 f202 	lsl.w	r2, r1, r2
 800250a:	4013      	ands	r3, r2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d184      	bne.n	800241a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002510:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002514:	2b01      	cmp	r3, #1
 8002516:	d105      	bne.n	8002524 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002518:	4b23      	ldr	r3, [pc, #140]	@ (80025a8 <HAL_RCC_OscConfig+0xc58>)
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	4a22      	ldr	r2, [pc, #136]	@ (80025a8 <HAL_RCC_OscConfig+0xc58>)
 800251e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002522:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002524:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002528:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 8242 	beq.w	80029ba <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002536:	4b1c      	ldr	r3, [pc, #112]	@ (80025a8 <HAL_RCC_OscConfig+0xc58>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	2b08      	cmp	r3, #8
 8002540:	f000 8213 	beq.w	800296a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002544:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002548:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	2b02      	cmp	r3, #2
 8002552:	f040 8162 	bne.w	800281a <HAL_RCC_OscConfig+0xeca>
 8002556:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800255a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800255e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002562:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002564:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002568:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	fa93 f2a3 	rbit	r2, r3
 8002572:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002576:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800257a:	601a      	str	r2, [r3, #0]
  return result;
 800257c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002580:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002584:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002586:	fab3 f383 	clz	r3, r3
 800258a:	b2db      	uxtb	r3, r3
 800258c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002590:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	461a      	mov	r2, r3
 8002598:	2300      	movs	r3, #0
 800259a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259c:	f7fe fe7e 	bl	800129c <HAL_GetTick>
 80025a0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a4:	e00c      	b.n	80025c0 <HAL_RCC_OscConfig+0xc70>
 80025a6:	bf00      	nop
 80025a8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ac:	f7fe fe76 	bl	800129c <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e1fd      	b.n	80029bc <HAL_RCC_OscConfig+0x106c>
 80025c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80025c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	fa93 f2a3 	rbit	r2, r3
 80025dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80025e4:	601a      	str	r2, [r3, #0]
  return result;
 80025e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ea:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80025ee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f0:	fab3 f383 	clz	r3, r3
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	095b      	lsrs	r3, r3, #5
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b01      	cmp	r3, #1
 8002602:	d102      	bne.n	800260a <HAL_RCC_OscConfig+0xcba>
 8002604:	4bb0      	ldr	r3, [pc, #704]	@ (80028c8 <HAL_RCC_OscConfig+0xf78>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	e027      	b.n	800265a <HAL_RCC_OscConfig+0xd0a>
 800260a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800260e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002612:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002616:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002618:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800261c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	fa93 f2a3 	rbit	r2, r3
 8002626:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800262a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002634:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002638:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002642:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	fa93 f2a3 	rbit	r2, r3
 800264c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002650:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	4b9c      	ldr	r3, [pc, #624]	@ (80028c8 <HAL_RCC_OscConfig+0xf78>)
 8002658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800265e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002662:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002666:	6011      	str	r1, [r2, #0]
 8002668:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800266c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002670:	6812      	ldr	r2, [r2, #0]
 8002672:	fa92 f1a2 	rbit	r1, r2
 8002676:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800267a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800267e:	6011      	str	r1, [r2, #0]
  return result;
 8002680:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002684:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	fab2 f282 	clz	r2, r2
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	f042 0220 	orr.w	r2, r2, #32
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	f002 021f 	and.w	r2, r2, #31
 800269a:	2101      	movs	r1, #1
 800269c:	fa01 f202 	lsl.w	r2, r1, r2
 80026a0:	4013      	ands	r3, r2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d182      	bne.n	80025ac <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026a6:	4b88      	ldr	r3, [pc, #544]	@ (80028c8 <HAL_RCC_OscConfig+0xf78>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80026ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80026ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	430b      	orrs	r3, r1
 80026c8:	497f      	ldr	r1, [pc, #508]	@ (80028c8 <HAL_RCC_OscConfig+0xf78>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	604b      	str	r3, [r1, #4]
 80026ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80026d6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80026da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	fa93 f2a3 	rbit	r2, r3
 80026ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ee:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80026f2:	601a      	str	r2, [r3, #0]
  return result;
 80026f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80026fc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026fe:	fab3 f383 	clz	r3, r3
 8002702:	b2db      	uxtb	r3, r3
 8002704:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002708:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	461a      	mov	r2, r3
 8002710:	2301      	movs	r3, #1
 8002712:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002714:	f7fe fdc2 	bl	800129c <HAL_GetTick>
 8002718:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800271c:	e009      	b.n	8002732 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800271e:	f7fe fdbd 	bl	800129c <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e144      	b.n	80029bc <HAL_RCC_OscConfig+0x106c>
 8002732:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002736:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800273a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800273e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002740:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002744:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	fa93 f2a3 	rbit	r2, r3
 800274e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002752:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002756:	601a      	str	r2, [r3, #0]
  return result;
 8002758:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800275c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002760:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002762:	fab3 f383 	clz	r3, r3
 8002766:	b2db      	uxtb	r3, r3
 8002768:	095b      	lsrs	r3, r3, #5
 800276a:	b2db      	uxtb	r3, r3
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b01      	cmp	r3, #1
 8002774:	d102      	bne.n	800277c <HAL_RCC_OscConfig+0xe2c>
 8002776:	4b54      	ldr	r3, [pc, #336]	@ (80028c8 <HAL_RCC_OscConfig+0xf78>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	e027      	b.n	80027cc <HAL_RCC_OscConfig+0xe7c>
 800277c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002780:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002784:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002788:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800278e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	fa93 f2a3 	rbit	r2, r3
 8002798:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80027aa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	fa93 f2a3 	rbit	r2, r3
 80027be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	4b3f      	ldr	r3, [pc, #252]	@ (80028c8 <HAL_RCC_OscConfig+0xf78>)
 80027ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027d0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80027d4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80027d8:	6011      	str	r1, [r2, #0]
 80027da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027de:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	fa92 f1a2 	rbit	r1, r2
 80027e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027ec:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80027f0:	6011      	str	r1, [r2, #0]
  return result;
 80027f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027f6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	fab2 f282 	clz	r2, r2
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	f042 0220 	orr.w	r2, r2, #32
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	f002 021f 	and.w	r2, r2, #31
 800280c:	2101      	movs	r1, #1
 800280e:	fa01 f202 	lsl.w	r2, r1, r2
 8002812:	4013      	ands	r3, r2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d082      	beq.n	800271e <HAL_RCC_OscConfig+0xdce>
 8002818:	e0cf      	b.n	80029ba <HAL_RCC_OscConfig+0x106a>
 800281a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800281e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002822:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002826:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800282c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	fa93 f2a3 	rbit	r2, r3
 8002836:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800283a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800283e:	601a      	str	r2, [r3, #0]
  return result;
 8002840:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002844:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002848:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284a:	fab3 f383 	clz	r3, r3
 800284e:	b2db      	uxtb	r3, r3
 8002850:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002854:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	461a      	mov	r2, r3
 800285c:	2300      	movs	r3, #0
 800285e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002860:	f7fe fd1c 	bl	800129c <HAL_GetTick>
 8002864:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002868:	e009      	b.n	800287e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800286a:	f7fe fd17 	bl	800129c <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e09e      	b.n	80029bc <HAL_RCC_OscConfig+0x106c>
 800287e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002882:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002886:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800288a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002890:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	fa93 f2a3 	rbit	r2, r3
 800289a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800289e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80028a2:	601a      	str	r2, [r3, #0]
  return result;
 80028a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80028ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ae:	fab3 f383 	clz	r3, r3
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	095b      	lsrs	r3, r3, #5
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d104      	bne.n	80028cc <HAL_RCC_OscConfig+0xf7c>
 80028c2:	4b01      	ldr	r3, [pc, #4]	@ (80028c8 <HAL_RCC_OscConfig+0xf78>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	e029      	b.n	800291c <HAL_RCC_OscConfig+0xfcc>
 80028c8:	40021000 	.word	0x40021000
 80028cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80028d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028de:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	fa93 f2a3 	rbit	r2, r3
 80028e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ec:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80028fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002904:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	fa93 f2a3 	rbit	r2, r3
 800290e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002912:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	4b2b      	ldr	r3, [pc, #172]	@ (80029c8 <HAL_RCC_OscConfig+0x1078>)
 800291a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002920:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002924:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002928:	6011      	str	r1, [r2, #0]
 800292a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800292e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	fa92 f1a2 	rbit	r1, r2
 8002938:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800293c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002940:	6011      	str	r1, [r2, #0]
  return result;
 8002942:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002946:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800294a:	6812      	ldr	r2, [r2, #0]
 800294c:	fab2 f282 	clz	r2, r2
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	f042 0220 	orr.w	r2, r2, #32
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	f002 021f 	and.w	r2, r2, #31
 800295c:	2101      	movs	r1, #1
 800295e:	fa01 f202 	lsl.w	r2, r1, r2
 8002962:	4013      	ands	r3, r2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d180      	bne.n	800286a <HAL_RCC_OscConfig+0xf1a>
 8002968:	e027      	b.n	80029ba <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800296a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800296e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d101      	bne.n	800297e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e01e      	b.n	80029bc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800297e:	4b12      	ldr	r3, [pc, #72]	@ (80029c8 <HAL_RCC_OscConfig+0x1078>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002986:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800298a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800298e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002992:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	429a      	cmp	r2, r3
 800299c:	d10b      	bne.n	80029b6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800299e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80029a2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80029a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d001      	beq.n	80029ba <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40021000 	.word	0x40021000

080029cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b09e      	sub	sp, #120	@ 0x78
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e162      	b.n	8002caa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029e4:	4b90      	ldr	r3, [pc, #576]	@ (8002c28 <HAL_RCC_ClockConfig+0x25c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d910      	bls.n	8002a14 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f2:	4b8d      	ldr	r3, [pc, #564]	@ (8002c28 <HAL_RCC_ClockConfig+0x25c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 0207 	bic.w	r2, r3, #7
 80029fa:	498b      	ldr	r1, [pc, #556]	@ (8002c28 <HAL_RCC_ClockConfig+0x25c>)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a02:	4b89      	ldr	r3, [pc, #548]	@ (8002c28 <HAL_RCC_ClockConfig+0x25c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d001      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e14a      	b.n	8002caa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d008      	beq.n	8002a32 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a20:	4b82      	ldr	r3, [pc, #520]	@ (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	497f      	ldr	r1, [pc, #508]	@ (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 80dc 	beq.w	8002bf8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d13c      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xf6>
 8002a48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a4c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a50:	fa93 f3a3 	rbit	r3, r3
 8002a54:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002a56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a58:	fab3 f383 	clz	r3, r3
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d102      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xa6>
 8002a6c:	4b6f      	ldr	r3, [pc, #444]	@ (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	e00f      	b.n	8002a92 <HAL_RCC_ClockConfig+0xc6>
 8002a72:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a76:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a7a:	fa93 f3a3 	rbit	r3, r3
 8002a7e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a80:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a84:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a88:	fa93 f3a3 	rbit	r3, r3
 8002a8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a8e:	4b67      	ldr	r3, [pc, #412]	@ (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a92:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a96:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002a98:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a9a:	fa92 f2a2 	rbit	r2, r2
 8002a9e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002aa0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002aa2:	fab2 f282 	clz	r2, r2
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	f042 0220 	orr.w	r2, r2, #32
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	f002 021f 	and.w	r2, r2, #31
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d17b      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e0f3      	b.n	8002caa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d13c      	bne.n	8002b44 <HAL_RCC_ClockConfig+0x178>
 8002aca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ace:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ad2:	fa93 f3a3 	rbit	r3, r3
 8002ad6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002ad8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ada:	fab3 f383 	clz	r3, r3
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	095b      	lsrs	r3, r3, #5
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d102      	bne.n	8002af4 <HAL_RCC_ClockConfig+0x128>
 8002aee:	4b4f      	ldr	r3, [pc, #316]	@ (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	e00f      	b.n	8002b14 <HAL_RCC_ClockConfig+0x148>
 8002af4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002af8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002afc:	fa93 f3a3 	rbit	r3, r3
 8002b00:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b06:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b0a:	fa93 f3a3 	rbit	r3, r3
 8002b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b10:	4b46      	ldr	r3, [pc, #280]	@ (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b14:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b18:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002b1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002b1c:	fa92 f2a2 	rbit	r2, r2
 8002b20:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002b22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b24:	fab2 f282 	clz	r2, r2
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	f042 0220 	orr.w	r2, r2, #32
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	f002 021f 	and.w	r2, r2, #31
 8002b34:	2101      	movs	r1, #1
 8002b36:	fa01 f202 	lsl.w	r2, r1, r2
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d13a      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e0b2      	b.n	8002caa <HAL_RCC_ClockConfig+0x2de>
 8002b44:	2302      	movs	r3, #2
 8002b46:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b4a:	fa93 f3a3 	rbit	r3, r3
 8002b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b52:	fab3 f383 	clz	r3, r3
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	095b      	lsrs	r3, r3, #5
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	f043 0301 	orr.w	r3, r3, #1
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d102      	bne.n	8002b6c <HAL_RCC_ClockConfig+0x1a0>
 8002b66:	4b31      	ldr	r3, [pc, #196]	@ (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	e00d      	b.n	8002b88 <HAL_RCC_ClockConfig+0x1bc>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b72:	fa93 f3a3 	rbit	r3, r3
 8002b76:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b78:	2302      	movs	r3, #2
 8002b7a:	623b      	str	r3, [r7, #32]
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	fa93 f3a3 	rbit	r3, r3
 8002b82:	61fb      	str	r3, [r7, #28]
 8002b84:	4b29      	ldr	r3, [pc, #164]	@ (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b88:	2202      	movs	r2, #2
 8002b8a:	61ba      	str	r2, [r7, #24]
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	fa92 f2a2 	rbit	r2, r2
 8002b92:	617a      	str	r2, [r7, #20]
  return result;
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	fab2 f282 	clz	r2, r2
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	f042 0220 	orr.w	r2, r2, #32
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	f002 021f 	and.w	r2, r2, #31
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e079      	b.n	8002caa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f023 0203 	bic.w	r2, r3, #3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	491a      	ldr	r1, [pc, #104]	@ (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bc8:	f7fe fb68 	bl	800129c <HAL_GetTick>
 8002bcc:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bce:	e00a      	b.n	8002be6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd0:	f7fe fb64 	bl	800129c <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e061      	b.n	8002caa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be6:	4b11      	ldr	r3, [pc, #68]	@ (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 020c 	and.w	r2, r3, #12
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d1eb      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c28 <HAL_RCC_ClockConfig+0x25c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d214      	bcs.n	8002c30 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c06:	4b08      	ldr	r3, [pc, #32]	@ (8002c28 <HAL_RCC_ClockConfig+0x25c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f023 0207 	bic.w	r2, r3, #7
 8002c0e:	4906      	ldr	r1, [pc, #24]	@ (8002c28 <HAL_RCC_ClockConfig+0x25c>)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c16:	4b04      	ldr	r3, [pc, #16]	@ (8002c28 <HAL_RCC_ClockConfig+0x25c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d005      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e040      	b.n	8002caa <HAL_RCC_ClockConfig+0x2de>
 8002c28:	40022000 	.word	0x40022000
 8002c2c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d008      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb4 <HAL_RCC_ClockConfig+0x2e8>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	491a      	ldr	r1, [pc, #104]	@ (8002cb4 <HAL_RCC_ClockConfig+0x2e8>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c5a:	4b16      	ldr	r3, [pc, #88]	@ (8002cb4 <HAL_RCC_ClockConfig+0x2e8>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	4912      	ldr	r1, [pc, #72]	@ (8002cb4 <HAL_RCC_ClockConfig+0x2e8>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c6e:	f000 f829 	bl	8002cc4 <HAL_RCC_GetSysClockFreq>
 8002c72:	4601      	mov	r1, r0
 8002c74:	4b0f      	ldr	r3, [pc, #60]	@ (8002cb4 <HAL_RCC_ClockConfig+0x2e8>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c7c:	22f0      	movs	r2, #240	@ 0xf0
 8002c7e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	fa92 f2a2 	rbit	r2, r2
 8002c86:	60fa      	str	r2, [r7, #12]
  return result;
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	fab2 f282 	clz	r2, r2
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	40d3      	lsrs	r3, r2
 8002c92:	4a09      	ldr	r2, [pc, #36]	@ (8002cb8 <HAL_RCC_ClockConfig+0x2ec>)
 8002c94:	5cd3      	ldrb	r3, [r2, r3]
 8002c96:	fa21 f303 	lsr.w	r3, r1, r3
 8002c9a:	4a08      	ldr	r2, [pc, #32]	@ (8002cbc <HAL_RCC_ClockConfig+0x2f0>)
 8002c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c9e:	4b08      	ldr	r3, [pc, #32]	@ (8002cc0 <HAL_RCC_ClockConfig+0x2f4>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fe fab6 	bl	8001214 <HAL_InitTick>
  
  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3778      	adds	r7, #120	@ 0x78
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	0800577c 	.word	0x0800577c
 8002cbc:	20000000 	.word	0x20000000
 8002cc0:	20000004 	.word	0x20000004

08002cc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b08b      	sub	sp, #44	@ 0x2c
 8002cc8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61fb      	str	r3, [r7, #28]
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61bb      	str	r3, [r7, #24]
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002cde:	4b29      	ldr	r3, [pc, #164]	@ (8002d84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d002      	beq.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x30>
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d003      	beq.n	8002cfa <HAL_RCC_GetSysClockFreq+0x36>
 8002cf2:	e03c      	b.n	8002d6e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cf4:	4b24      	ldr	r3, [pc, #144]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cf6:	623b      	str	r3, [r7, #32]
      break;
 8002cf8:	e03c      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002d00:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002d04:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	fa92 f2a2 	rbit	r2, r2
 8002d0c:	607a      	str	r2, [r7, #4]
  return result;
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	fab2 f282 	clz	r2, r2
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	40d3      	lsrs	r3, r2
 8002d18:	4a1c      	ldr	r2, [pc, #112]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d1a:	5cd3      	ldrb	r3, [r2, r3]
 8002d1c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002d1e:	4b19      	ldr	r3, [pc, #100]	@ (8002d84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	220f      	movs	r2, #15
 8002d28:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	fa92 f2a2 	rbit	r2, r2
 8002d30:	60fa      	str	r2, [r7, #12]
  return result;
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	fab2 f282 	clz	r2, r2
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	40d3      	lsrs	r3, r2
 8002d3c:	4a14      	ldr	r2, [pc, #80]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d3e:	5cd3      	ldrb	r3, [r2, r3]
 8002d40:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d4c:	4a0e      	ldr	r2, [pc, #56]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	fb02 f303 	mul.w	r3, r2, r3
 8002d5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d5c:	e004      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	4a0c      	ldr	r2, [pc, #48]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d62:	fb02 f303 	mul.w	r3, r2, r3
 8002d66:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6a:	623b      	str	r3, [r7, #32]
      break;
 8002d6c:	e002      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d6e:	4b06      	ldr	r3, [pc, #24]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d70:	623b      	str	r3, [r7, #32]
      break;
 8002d72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d74:	6a3b      	ldr	r3, [r7, #32]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	372c      	adds	r7, #44	@ 0x2c
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40021000 	.word	0x40021000
 8002d88:	007a1200 	.word	0x007a1200
 8002d8c:	08005794 	.word	0x08005794
 8002d90:	080057a4 	.word	0x080057a4
 8002d94:	003d0900 	.word	0x003d0900

08002d98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d9c:	4b03      	ldr	r3, [pc, #12]	@ (8002dac <HAL_RCC_GetHCLKFreq+0x14>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	20000000 	.word	0x20000000

08002db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002db6:	f7ff ffef 	bl	8002d98 <HAL_RCC_GetHCLKFreq>
 8002dba:	4601      	mov	r1, r0
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002dec <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002dc4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002dc8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	fa92 f2a2 	rbit	r2, r2
 8002dd0:	603a      	str	r2, [r7, #0]
  return result;
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	fab2 f282 	clz	r2, r2
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	40d3      	lsrs	r3, r2
 8002ddc:	4a04      	ldr	r2, [pc, #16]	@ (8002df0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002dde:	5cd3      	ldrb	r3, [r2, r3]
 8002de0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40021000 	.word	0x40021000
 8002df0:	0800578c 	.word	0x0800578c

08002df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002dfa:	f7ff ffcd 	bl	8002d98 <HAL_RCC_GetHCLKFreq>
 8002dfe:	4601      	mov	r1, r0
 8002e00:	4b0b      	ldr	r3, [pc, #44]	@ (8002e30 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002e08:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002e0c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	fa92 f2a2 	rbit	r2, r2
 8002e14:	603a      	str	r2, [r7, #0]
  return result;
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	fab2 f282 	clz	r2, r2
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	40d3      	lsrs	r3, r2
 8002e20:	4a04      	ldr	r2, [pc, #16]	@ (8002e34 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002e22:	5cd3      	ldrb	r3, [r2, r3]
 8002e24:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40021000 	.word	0x40021000
 8002e34:	0800578c 	.word	0x0800578c

08002e38 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b092      	sub	sp, #72	@ 0x48
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 80d4 	beq.w	8003004 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e5c:	4b4e      	ldr	r3, [pc, #312]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10e      	bne.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e68:	4b4b      	ldr	r3, [pc, #300]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	4a4a      	ldr	r2, [pc, #296]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e72:	61d3      	str	r3, [r2, #28]
 8002e74:	4b48      	ldr	r3, [pc, #288]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e7c:	60bb      	str	r3, [r7, #8]
 8002e7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e80:	2301      	movs	r3, #1
 8002e82:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e86:	4b45      	ldr	r3, [pc, #276]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d118      	bne.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e92:	4b42      	ldr	r3, [pc, #264]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a41      	ldr	r2, [pc, #260]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e9c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e9e:	f7fe f9fd 	bl	800129c <HAL_GetTick>
 8002ea2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea6:	f7fe f9f9 	bl	800129c <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b64      	cmp	r3, #100	@ 0x64
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e14b      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb8:	4b38      	ldr	r3, [pc, #224]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0f0      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ec4:	4b34      	ldr	r3, [pc, #208]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 8084 	beq.w	8002fde <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ede:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d07c      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ee4:	4b2c      	ldr	r3, [pc, #176]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002eee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ef2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef6:	fa93 f3a3 	rbit	r3, r3
 8002efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002efe:	fab3 f383 	clz	r3, r3
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	461a      	mov	r2, r3
 8002f06:	4b26      	ldr	r3, [pc, #152]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f08:	4413      	add	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	2301      	movs	r3, #1
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002f16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f1a:	fa93 f3a3 	rbit	r3, r3
 8002f1e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f22:	fab3 f383 	clz	r3, r3
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	461a      	mov	r2, r3
 8002f32:	2300      	movs	r3, #0
 8002f34:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f36:	4a18      	ldr	r2, [pc, #96]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f3a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d04b      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f46:	f7fe f9a9 	bl	800129c <HAL_GetTick>
 8002f4a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4c:	e00a      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4e:	f7fe f9a5 	bl	800129c <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e0f5      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002f64:	2302      	movs	r3, #2
 8002f66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f6a:	fa93 f3a3 	rbit	r3, r3
 8002f6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f70:	2302      	movs	r3, #2
 8002f72:	623b      	str	r3, [r7, #32]
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	fa93 f3a3 	rbit	r3, r3
 8002f7a:	61fb      	str	r3, [r7, #28]
  return result;
 8002f7c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f7e:	fab3 f383 	clz	r3, r3
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	095b      	lsrs	r3, r3, #5
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	f043 0302 	orr.w	r3, r3, #2
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d108      	bne.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002f92:	4b01      	ldr	r3, [pc, #4]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	e00d      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	40007000 	.word	0x40007000
 8002fa0:	10908100 	.word	0x10908100
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	fa93 f3a3 	rbit	r3, r3
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	4b69      	ldr	r3, [pc, #420]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	613a      	str	r2, [r7, #16]
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	fa92 f2a2 	rbit	r2, r2
 8002fbe:	60fa      	str	r2, [r7, #12]
  return result;
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	fab2 f282 	clz	r2, r2
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	f002 021f 	and.w	r2, r2, #31
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd8:	4013      	ands	r3, r2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0b7      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002fde:	4b5e      	ldr	r3, [pc, #376]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	495b      	ldr	r1, [pc, #364]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ff0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d105      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff8:	4b57      	ldr	r3, [pc, #348]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	4a56      	ldr	r2, [pc, #344]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ffe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003002:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b00      	cmp	r3, #0
 800300e:	d008      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003010:	4b51      	ldr	r3, [pc, #324]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003014:	f023 0203 	bic.w	r2, r3, #3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	494e      	ldr	r1, [pc, #312]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800301e:	4313      	orrs	r3, r2
 8003020:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0320 	and.w	r3, r3, #32
 800302a:	2b00      	cmp	r3, #0
 800302c:	d008      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800302e:	4b4a      	ldr	r3, [pc, #296]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003032:	f023 0210 	bic.w	r2, r3, #16
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	4947      	ldr	r1, [pc, #284]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800303c:	4313      	orrs	r3, r2
 800303e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d008      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800304c:	4b42      	ldr	r3, [pc, #264]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003058:	493f      	ldr	r1, [pc, #252]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800305a:	4313      	orrs	r3, r2
 800305c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	d008      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800306a:	4b3b      	ldr	r3, [pc, #236]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306e:	f023 0220 	bic.w	r2, r3, #32
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	4938      	ldr	r1, [pc, #224]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003078:	4313      	orrs	r3, r2
 800307a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d008      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003088:	4b33      	ldr	r3, [pc, #204]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800308a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	4930      	ldr	r1, [pc, #192]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003096:	4313      	orrs	r3, r2
 8003098:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d008      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80030a6:	4b2c      	ldr	r3, [pc, #176]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	4929      	ldr	r1, [pc, #164]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80030c4:	4b24      	ldr	r3, [pc, #144]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c8:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	4921      	ldr	r1, [pc, #132]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d008      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80030e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	491a      	ldr	r1, [pc, #104]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d008      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003100:	4b15      	ldr	r3, [pc, #84]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003104:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310c:	4912      	ldr	r1, [pc, #72]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800310e:	4313      	orrs	r3, r2
 8003110:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d008      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800311e:	4b0e      	ldr	r3, [pc, #56]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003122:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800312a:	490b      	ldr	r1, [pc, #44]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800312c:	4313      	orrs	r3, r2
 800312e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d008      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800313c:	4b06      	ldr	r3, [pc, #24]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800313e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003140:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003148:	4903      	ldr	r1, [pc, #12]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800314a:	4313      	orrs	r3, r2
 800314c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3748      	adds	r7, #72	@ 0x48
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40021000 	.word	0x40021000

0800315c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e049      	b.n	8003202 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d106      	bne.n	8003188 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7fd fe1e 	bl	8000dc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2202      	movs	r2, #2
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3304      	adds	r3, #4
 8003198:	4619      	mov	r1, r3
 800319a:	4610      	mov	r0, r2
 800319c:	f000 fb9e 	bl	80038dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b01      	cmp	r3, #1
 800321e:	d001      	beq.n	8003224 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e033      	b.n	800328c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2202      	movs	r2, #2
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a19      	ldr	r2, [pc, #100]	@ (8003298 <HAL_TIM_Base_Start+0x8c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d009      	beq.n	800324a <HAL_TIM_Base_Start+0x3e>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800323e:	d004      	beq.n	800324a <HAL_TIM_Base_Start+0x3e>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a15      	ldr	r2, [pc, #84]	@ (800329c <HAL_TIM_Base_Start+0x90>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d115      	bne.n	8003276 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	4b13      	ldr	r3, [pc, #76]	@ (80032a0 <HAL_TIM_Base_Start+0x94>)
 8003252:	4013      	ands	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2b06      	cmp	r3, #6
 800325a:	d015      	beq.n	8003288 <HAL_TIM_Base_Start+0x7c>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003262:	d011      	beq.n	8003288 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003274:	e008      	b.n	8003288 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f042 0201 	orr.w	r2, r2, #1
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	e000      	b.n	800328a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003288:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	40012c00 	.word	0x40012c00
 800329c:	40014000 	.word	0x40014000
 80032a0:	00010007 	.word	0x00010007

080032a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e049      	b.n	800334a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d106      	bne.n	80032d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7fd fdae 	bl	8000e2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3304      	adds	r3, #4
 80032e0:	4619      	mov	r1, r3
 80032e2:	4610      	mov	r0, r2
 80032e4:	f000 fafa 	bl	80038dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d109      	bne.n	8003378 <HAL_TIM_PWM_Start+0x24>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b01      	cmp	r3, #1
 800336e:	bf14      	ite	ne
 8003370:	2301      	movne	r3, #1
 8003372:	2300      	moveq	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	e03c      	b.n	80033f2 <HAL_TIM_PWM_Start+0x9e>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	2b04      	cmp	r3, #4
 800337c:	d109      	bne.n	8003392 <HAL_TIM_PWM_Start+0x3e>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b01      	cmp	r3, #1
 8003388:	bf14      	ite	ne
 800338a:	2301      	movne	r3, #1
 800338c:	2300      	moveq	r3, #0
 800338e:	b2db      	uxtb	r3, r3
 8003390:	e02f      	b.n	80033f2 <HAL_TIM_PWM_Start+0x9e>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b08      	cmp	r3, #8
 8003396:	d109      	bne.n	80033ac <HAL_TIM_PWM_Start+0x58>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	bf14      	ite	ne
 80033a4:	2301      	movne	r3, #1
 80033a6:	2300      	moveq	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	e022      	b.n	80033f2 <HAL_TIM_PWM_Start+0x9e>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	2b0c      	cmp	r3, #12
 80033b0:	d109      	bne.n	80033c6 <HAL_TIM_PWM_Start+0x72>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	bf14      	ite	ne
 80033be:	2301      	movne	r3, #1
 80033c0:	2300      	moveq	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	e015      	b.n	80033f2 <HAL_TIM_PWM_Start+0x9e>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b10      	cmp	r3, #16
 80033ca:	d109      	bne.n	80033e0 <HAL_TIM_PWM_Start+0x8c>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	bf14      	ite	ne
 80033d8:	2301      	movne	r3, #1
 80033da:	2300      	moveq	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	e008      	b.n	80033f2 <HAL_TIM_PWM_Start+0x9e>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	bf14      	ite	ne
 80033ec:	2301      	movne	r3, #1
 80033ee:	2300      	moveq	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e083      	b.n	8003502 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d104      	bne.n	800340a <HAL_TIM_PWM_Start+0xb6>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003408:	e023      	b.n	8003452 <HAL_TIM_PWM_Start+0xfe>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b04      	cmp	r3, #4
 800340e:	d104      	bne.n	800341a <HAL_TIM_PWM_Start+0xc6>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003418:	e01b      	b.n	8003452 <HAL_TIM_PWM_Start+0xfe>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2b08      	cmp	r3, #8
 800341e:	d104      	bne.n	800342a <HAL_TIM_PWM_Start+0xd6>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003428:	e013      	b.n	8003452 <HAL_TIM_PWM_Start+0xfe>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	2b0c      	cmp	r3, #12
 800342e:	d104      	bne.n	800343a <HAL_TIM_PWM_Start+0xe6>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2202      	movs	r2, #2
 8003434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003438:	e00b      	b.n	8003452 <HAL_TIM_PWM_Start+0xfe>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2b10      	cmp	r3, #16
 800343e:	d104      	bne.n	800344a <HAL_TIM_PWM_Start+0xf6>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2202      	movs	r2, #2
 8003444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003448:	e003      	b.n	8003452 <HAL_TIM_PWM_Start+0xfe>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2202      	movs	r2, #2
 800344e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2201      	movs	r2, #1
 8003458:	6839      	ldr	r1, [r7, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f000 fdec 	bl	8004038 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a29      	ldr	r2, [pc, #164]	@ (800350c <HAL_TIM_PWM_Start+0x1b8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d00e      	beq.n	8003488 <HAL_TIM_PWM_Start+0x134>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a28      	ldr	r2, [pc, #160]	@ (8003510 <HAL_TIM_PWM_Start+0x1bc>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d009      	beq.n	8003488 <HAL_TIM_PWM_Start+0x134>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a26      	ldr	r2, [pc, #152]	@ (8003514 <HAL_TIM_PWM_Start+0x1c0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d004      	beq.n	8003488 <HAL_TIM_PWM_Start+0x134>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a25      	ldr	r2, [pc, #148]	@ (8003518 <HAL_TIM_PWM_Start+0x1c4>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d101      	bne.n	800348c <HAL_TIM_PWM_Start+0x138>
 8003488:	2301      	movs	r3, #1
 800348a:	e000      	b.n	800348e <HAL_TIM_PWM_Start+0x13a>
 800348c:	2300      	movs	r3, #0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d007      	beq.n	80034a2 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a19      	ldr	r2, [pc, #100]	@ (800350c <HAL_TIM_PWM_Start+0x1b8>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d009      	beq.n	80034c0 <HAL_TIM_PWM_Start+0x16c>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034b4:	d004      	beq.n	80034c0 <HAL_TIM_PWM_Start+0x16c>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a15      	ldr	r2, [pc, #84]	@ (8003510 <HAL_TIM_PWM_Start+0x1bc>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d115      	bne.n	80034ec <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	4b15      	ldr	r3, [pc, #84]	@ (800351c <HAL_TIM_PWM_Start+0x1c8>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2b06      	cmp	r3, #6
 80034d0:	d015      	beq.n	80034fe <HAL_TIM_PWM_Start+0x1aa>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034d8:	d011      	beq.n	80034fe <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f042 0201 	orr.w	r2, r2, #1
 80034e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ea:	e008      	b.n	80034fe <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0201 	orr.w	r2, r2, #1
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	e000      	b.n	8003500 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40012c00 	.word	0x40012c00
 8003510:	40014000 	.word	0x40014000
 8003514:	40014400 	.word	0x40014400
 8003518:	40014800 	.word	0x40014800
 800351c:	00010007 	.word	0x00010007

08003520 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800352c:	2300      	movs	r3, #0
 800352e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800353a:	2302      	movs	r3, #2
 800353c:	e0ff      	b.n	800373e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b14      	cmp	r3, #20
 800354a:	f200 80f0 	bhi.w	800372e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800354e:	a201      	add	r2, pc, #4	@ (adr r2, 8003554 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003554:	080035a9 	.word	0x080035a9
 8003558:	0800372f 	.word	0x0800372f
 800355c:	0800372f 	.word	0x0800372f
 8003560:	0800372f 	.word	0x0800372f
 8003564:	080035e9 	.word	0x080035e9
 8003568:	0800372f 	.word	0x0800372f
 800356c:	0800372f 	.word	0x0800372f
 8003570:	0800372f 	.word	0x0800372f
 8003574:	0800362b 	.word	0x0800362b
 8003578:	0800372f 	.word	0x0800372f
 800357c:	0800372f 	.word	0x0800372f
 8003580:	0800372f 	.word	0x0800372f
 8003584:	0800366b 	.word	0x0800366b
 8003588:	0800372f 	.word	0x0800372f
 800358c:	0800372f 	.word	0x0800372f
 8003590:	0800372f 	.word	0x0800372f
 8003594:	080036ad 	.word	0x080036ad
 8003598:	0800372f 	.word	0x0800372f
 800359c:	0800372f 	.word	0x0800372f
 80035a0:	0800372f 	.word	0x0800372f
 80035a4:	080036ed 	.word	0x080036ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 fa02 	bl	80039b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699a      	ldr	r2, [r3, #24]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0208 	orr.w	r2, r2, #8
 80035c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699a      	ldr	r2, [r3, #24]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0204 	bic.w	r2, r2, #4
 80035d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6999      	ldr	r1, [r3, #24]
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	691a      	ldr	r2, [r3, #16]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	619a      	str	r2, [r3, #24]
      break;
 80035e6:	e0a5      	b.n	8003734 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68b9      	ldr	r1, [r7, #8]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 fa68 	bl	8003ac4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699a      	ldr	r2, [r3, #24]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003602:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699a      	ldr	r2, [r3, #24]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003612:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6999      	ldr	r1, [r3, #24]
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	021a      	lsls	r2, r3, #8
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	619a      	str	r2, [r3, #24]
      break;
 8003628:	e084      	b.n	8003734 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68b9      	ldr	r1, [r7, #8]
 8003630:	4618      	mov	r0, r3
 8003632:	f000 fac7 	bl	8003bc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69da      	ldr	r2, [r3, #28]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f042 0208 	orr.w	r2, r2, #8
 8003644:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69da      	ldr	r2, [r3, #28]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0204 	bic.w	r2, r2, #4
 8003654:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	69d9      	ldr	r1, [r3, #28]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	691a      	ldr	r2, [r3, #16]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	61da      	str	r2, [r3, #28]
      break;
 8003668:	e064      	b.n	8003734 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68b9      	ldr	r1, [r7, #8]
 8003670:	4618      	mov	r0, r3
 8003672:	f000 fb25 	bl	8003cc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	69da      	ldr	r2, [r3, #28]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003684:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	69da      	ldr	r2, [r3, #28]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003694:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	69d9      	ldr	r1, [r3, #28]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	021a      	lsls	r2, r3, #8
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	61da      	str	r2, [r3, #28]
      break;
 80036aa:	e043      	b.n	8003734 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 fb68 	bl	8003d88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0208 	orr.w	r2, r2, #8
 80036c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0204 	bic.w	r2, r2, #4
 80036d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	691a      	ldr	r2, [r3, #16]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80036ea:	e023      	b.n	8003734 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68b9      	ldr	r1, [r7, #8]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fba6 	bl	8003e44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003706:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003716:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	021a      	lsls	r2, r3, #8
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800372c:	e002      	b.n	8003734 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	75fb      	strb	r3, [r7, #23]
      break;
 8003732:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800373c:	7dfb      	ldrb	r3, [r7, #23]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop

08003748 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_TIM_ConfigClockSource+0x1c>
 8003760:	2302      	movs	r3, #2
 8003762:	e0b6      	b.n	80038d2 <HAL_TIM_ConfigClockSource+0x18a>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003782:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003786:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800378e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037a0:	d03e      	beq.n	8003820 <HAL_TIM_ConfigClockSource+0xd8>
 80037a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037a6:	f200 8087 	bhi.w	80038b8 <HAL_TIM_ConfigClockSource+0x170>
 80037aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037ae:	f000 8086 	beq.w	80038be <HAL_TIM_ConfigClockSource+0x176>
 80037b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037b6:	d87f      	bhi.n	80038b8 <HAL_TIM_ConfigClockSource+0x170>
 80037b8:	2b70      	cmp	r3, #112	@ 0x70
 80037ba:	d01a      	beq.n	80037f2 <HAL_TIM_ConfigClockSource+0xaa>
 80037bc:	2b70      	cmp	r3, #112	@ 0x70
 80037be:	d87b      	bhi.n	80038b8 <HAL_TIM_ConfigClockSource+0x170>
 80037c0:	2b60      	cmp	r3, #96	@ 0x60
 80037c2:	d050      	beq.n	8003866 <HAL_TIM_ConfigClockSource+0x11e>
 80037c4:	2b60      	cmp	r3, #96	@ 0x60
 80037c6:	d877      	bhi.n	80038b8 <HAL_TIM_ConfigClockSource+0x170>
 80037c8:	2b50      	cmp	r3, #80	@ 0x50
 80037ca:	d03c      	beq.n	8003846 <HAL_TIM_ConfigClockSource+0xfe>
 80037cc:	2b50      	cmp	r3, #80	@ 0x50
 80037ce:	d873      	bhi.n	80038b8 <HAL_TIM_ConfigClockSource+0x170>
 80037d0:	2b40      	cmp	r3, #64	@ 0x40
 80037d2:	d058      	beq.n	8003886 <HAL_TIM_ConfigClockSource+0x13e>
 80037d4:	2b40      	cmp	r3, #64	@ 0x40
 80037d6:	d86f      	bhi.n	80038b8 <HAL_TIM_ConfigClockSource+0x170>
 80037d8:	2b30      	cmp	r3, #48	@ 0x30
 80037da:	d064      	beq.n	80038a6 <HAL_TIM_ConfigClockSource+0x15e>
 80037dc:	2b30      	cmp	r3, #48	@ 0x30
 80037de:	d86b      	bhi.n	80038b8 <HAL_TIM_ConfigClockSource+0x170>
 80037e0:	2b20      	cmp	r3, #32
 80037e2:	d060      	beq.n	80038a6 <HAL_TIM_ConfigClockSource+0x15e>
 80037e4:	2b20      	cmp	r3, #32
 80037e6:	d867      	bhi.n	80038b8 <HAL_TIM_ConfigClockSource+0x170>
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d05c      	beq.n	80038a6 <HAL_TIM_ConfigClockSource+0x15e>
 80037ec:	2b10      	cmp	r3, #16
 80037ee:	d05a      	beq.n	80038a6 <HAL_TIM_ConfigClockSource+0x15e>
 80037f0:	e062      	b.n	80038b8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003802:	f000 fbf9 	bl	8003ff8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003814:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	609a      	str	r2, [r3, #8]
      break;
 800381e:	e04f      	b.n	80038c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003830:	f000 fbe2 	bl	8003ff8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003842:	609a      	str	r2, [r3, #8]
      break;
 8003844:	e03c      	b.n	80038c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003852:	461a      	mov	r2, r3
 8003854:	f000 fb56 	bl	8003f04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2150      	movs	r1, #80	@ 0x50
 800385e:	4618      	mov	r0, r3
 8003860:	f000 fbaf 	bl	8003fc2 <TIM_ITRx_SetConfig>
      break;
 8003864:	e02c      	b.n	80038c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003872:	461a      	mov	r2, r3
 8003874:	f000 fb75 	bl	8003f62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2160      	movs	r1, #96	@ 0x60
 800387e:	4618      	mov	r0, r3
 8003880:	f000 fb9f 	bl	8003fc2 <TIM_ITRx_SetConfig>
      break;
 8003884:	e01c      	b.n	80038c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003892:	461a      	mov	r2, r3
 8003894:	f000 fb36 	bl	8003f04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2140      	movs	r1, #64	@ 0x40
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 fb8f 	bl	8003fc2 <TIM_ITRx_SetConfig>
      break;
 80038a4:	e00c      	b.n	80038c0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4619      	mov	r1, r3
 80038b0:	4610      	mov	r0, r2
 80038b2:	f000 fb86 	bl	8003fc2 <TIM_ITRx_SetConfig>
      break;
 80038b6:	e003      	b.n	80038c0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	73fb      	strb	r3, [r7, #15]
      break;
 80038bc:	e000      	b.n	80038c0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80038be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
	...

080038dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a2e      	ldr	r2, [pc, #184]	@ (80039a8 <TIM_Base_SetConfig+0xcc>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d003      	beq.n	80038fc <TIM_Base_SetConfig+0x20>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038fa:	d108      	bne.n	800390e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a25      	ldr	r2, [pc, #148]	@ (80039a8 <TIM_Base_SetConfig+0xcc>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d00f      	beq.n	8003936 <TIM_Base_SetConfig+0x5a>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800391c:	d00b      	beq.n	8003936 <TIM_Base_SetConfig+0x5a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a22      	ldr	r2, [pc, #136]	@ (80039ac <TIM_Base_SetConfig+0xd0>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d007      	beq.n	8003936 <TIM_Base_SetConfig+0x5a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a21      	ldr	r2, [pc, #132]	@ (80039b0 <TIM_Base_SetConfig+0xd4>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d003      	beq.n	8003936 <TIM_Base_SetConfig+0x5a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a20      	ldr	r2, [pc, #128]	@ (80039b4 <TIM_Base_SetConfig+0xd8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d108      	bne.n	8003948 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800393c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	4313      	orrs	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	4313      	orrs	r3, r2
 8003954:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a0e      	ldr	r2, [pc, #56]	@ (80039a8 <TIM_Base_SetConfig+0xcc>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d00b      	beq.n	800398c <TIM_Base_SetConfig+0xb0>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a0d      	ldr	r2, [pc, #52]	@ (80039ac <TIM_Base_SetConfig+0xd0>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d007      	beq.n	800398c <TIM_Base_SetConfig+0xb0>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a0c      	ldr	r2, [pc, #48]	@ (80039b0 <TIM_Base_SetConfig+0xd4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d003      	beq.n	800398c <TIM_Base_SetConfig+0xb0>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a0b      	ldr	r2, [pc, #44]	@ (80039b4 <TIM_Base_SetConfig+0xd8>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d103      	bne.n	8003994 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	615a      	str	r2, [r3, #20]
}
 800399a:	bf00      	nop
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40012c00 	.word	0x40012c00
 80039ac:	40014000 	.word	0x40014000
 80039b0:	40014400 	.word	0x40014400
 80039b4:	40014800 	.word	0x40014800

080039b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	f023 0201 	bic.w	r2, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 0303 	bic.w	r3, r3, #3
 80039f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f023 0302 	bic.w	r3, r3, #2
 8003a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a28      	ldr	r2, [pc, #160]	@ (8003ab4 <TIM_OC1_SetConfig+0xfc>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d00b      	beq.n	8003a30 <TIM_OC1_SetConfig+0x78>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a27      	ldr	r2, [pc, #156]	@ (8003ab8 <TIM_OC1_SetConfig+0x100>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d007      	beq.n	8003a30 <TIM_OC1_SetConfig+0x78>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a26      	ldr	r2, [pc, #152]	@ (8003abc <TIM_OC1_SetConfig+0x104>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d003      	beq.n	8003a30 <TIM_OC1_SetConfig+0x78>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a25      	ldr	r2, [pc, #148]	@ (8003ac0 <TIM_OC1_SetConfig+0x108>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d10c      	bne.n	8003a4a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	f023 0308 	bic.w	r3, r3, #8
 8003a36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f023 0304 	bic.w	r3, r3, #4
 8003a48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a19      	ldr	r2, [pc, #100]	@ (8003ab4 <TIM_OC1_SetConfig+0xfc>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d00b      	beq.n	8003a6a <TIM_OC1_SetConfig+0xb2>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a18      	ldr	r2, [pc, #96]	@ (8003ab8 <TIM_OC1_SetConfig+0x100>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d007      	beq.n	8003a6a <TIM_OC1_SetConfig+0xb2>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a17      	ldr	r2, [pc, #92]	@ (8003abc <TIM_OC1_SetConfig+0x104>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d003      	beq.n	8003a6a <TIM_OC1_SetConfig+0xb2>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a16      	ldr	r2, [pc, #88]	@ (8003ac0 <TIM_OC1_SetConfig+0x108>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d111      	bne.n	8003a8e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	621a      	str	r2, [r3, #32]
}
 8003aa8:	bf00      	nop
 8003aaa:	371c      	adds	r7, #28
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	40012c00 	.word	0x40012c00
 8003ab8:	40014000 	.word	0x40014000
 8003abc:	40014400 	.word	0x40014400
 8003ac0:	40014800 	.word	0x40014800

08003ac4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	f023 0210 	bic.w	r2, r3, #16
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003af2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	021b      	lsls	r3, r3, #8
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f023 0320 	bic.w	r3, r3, #32
 8003b12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a24      	ldr	r2, [pc, #144]	@ (8003bb4 <TIM_OC2_SetConfig+0xf0>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d10d      	bne.n	8003b44 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	011b      	lsls	r3, r3, #4
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a1b      	ldr	r2, [pc, #108]	@ (8003bb4 <TIM_OC2_SetConfig+0xf0>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d00b      	beq.n	8003b64 <TIM_OC2_SetConfig+0xa0>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a1a      	ldr	r2, [pc, #104]	@ (8003bb8 <TIM_OC2_SetConfig+0xf4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d007      	beq.n	8003b64 <TIM_OC2_SetConfig+0xa0>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a19      	ldr	r2, [pc, #100]	@ (8003bbc <TIM_OC2_SetConfig+0xf8>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d003      	beq.n	8003b64 <TIM_OC2_SetConfig+0xa0>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a18      	ldr	r2, [pc, #96]	@ (8003bc0 <TIM_OC2_SetConfig+0xfc>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d113      	bne.n	8003b8c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b6a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b72:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	621a      	str	r2, [r3, #32]
}
 8003ba6:	bf00      	nop
 8003ba8:	371c      	adds	r7, #28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40012c00 	.word	0x40012c00
 8003bb8:	40014000 	.word	0x40014000
 8003bbc:	40014400 	.word	0x40014400
 8003bc0:	40014800 	.word	0x40014800

08003bc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f023 0303 	bic.w	r3, r3, #3
 8003bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	021b      	lsls	r3, r3, #8
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a23      	ldr	r2, [pc, #140]	@ (8003cb0 <TIM_OC3_SetConfig+0xec>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d10d      	bne.n	8003c42 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	021b      	lsls	r3, r3, #8
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c40:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a1a      	ldr	r2, [pc, #104]	@ (8003cb0 <TIM_OC3_SetConfig+0xec>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d00b      	beq.n	8003c62 <TIM_OC3_SetConfig+0x9e>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a19      	ldr	r2, [pc, #100]	@ (8003cb4 <TIM_OC3_SetConfig+0xf0>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d007      	beq.n	8003c62 <TIM_OC3_SetConfig+0x9e>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a18      	ldr	r2, [pc, #96]	@ (8003cb8 <TIM_OC3_SetConfig+0xf4>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d003      	beq.n	8003c62 <TIM_OC3_SetConfig+0x9e>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a17      	ldr	r2, [pc, #92]	@ (8003cbc <TIM_OC3_SetConfig+0xf8>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d113      	bne.n	8003c8a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	621a      	str	r2, [r3, #32]
}
 8003ca4:	bf00      	nop
 8003ca6:	371c      	adds	r7, #28
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	40012c00 	.word	0x40012c00
 8003cb4:	40014000 	.word	0x40014000
 8003cb8:	40014400 	.word	0x40014400
 8003cbc:	40014800 	.word	0x40014800

08003cc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	021b      	lsls	r3, r3, #8
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	031b      	lsls	r3, r3, #12
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a16      	ldr	r2, [pc, #88]	@ (8003d78 <TIM_OC4_SetConfig+0xb8>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d00b      	beq.n	8003d3c <TIM_OC4_SetConfig+0x7c>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a15      	ldr	r2, [pc, #84]	@ (8003d7c <TIM_OC4_SetConfig+0xbc>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d007      	beq.n	8003d3c <TIM_OC4_SetConfig+0x7c>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a14      	ldr	r2, [pc, #80]	@ (8003d80 <TIM_OC4_SetConfig+0xc0>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d003      	beq.n	8003d3c <TIM_OC4_SetConfig+0x7c>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a13      	ldr	r2, [pc, #76]	@ (8003d84 <TIM_OC4_SetConfig+0xc4>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d109      	bne.n	8003d50 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	019b      	lsls	r3, r3, #6
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	621a      	str	r2, [r3, #32]
}
 8003d6a:	bf00      	nop
 8003d6c:	371c      	adds	r7, #28
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	40012c00 	.word	0x40012c00
 8003d7c:	40014000 	.word	0x40014000
 8003d80:	40014400 	.word	0x40014400
 8003d84:	40014800 	.word	0x40014800

08003d88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003dcc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	041b      	lsls	r3, r3, #16
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a15      	ldr	r2, [pc, #84]	@ (8003e34 <TIM_OC5_SetConfig+0xac>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d00b      	beq.n	8003dfa <TIM_OC5_SetConfig+0x72>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a14      	ldr	r2, [pc, #80]	@ (8003e38 <TIM_OC5_SetConfig+0xb0>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d007      	beq.n	8003dfa <TIM_OC5_SetConfig+0x72>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a13      	ldr	r2, [pc, #76]	@ (8003e3c <TIM_OC5_SetConfig+0xb4>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d003      	beq.n	8003dfa <TIM_OC5_SetConfig+0x72>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a12      	ldr	r2, [pc, #72]	@ (8003e40 <TIM_OC5_SetConfig+0xb8>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d109      	bne.n	8003e0e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	021b      	lsls	r3, r3, #8
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	621a      	str	r2, [r3, #32]
}
 8003e28:	bf00      	nop
 8003e2a:	371c      	adds	r7, #28
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	40012c00 	.word	0x40012c00
 8003e38:	40014000 	.word	0x40014000
 8003e3c:	40014400 	.word	0x40014400
 8003e40:	40014800 	.word	0x40014800

08003e44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b087      	sub	sp, #28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	021b      	lsls	r3, r3, #8
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003e8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	051b      	lsls	r3, r3, #20
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a16      	ldr	r2, [pc, #88]	@ (8003ef4 <TIM_OC6_SetConfig+0xb0>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d00b      	beq.n	8003eb8 <TIM_OC6_SetConfig+0x74>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a15      	ldr	r2, [pc, #84]	@ (8003ef8 <TIM_OC6_SetConfig+0xb4>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d007      	beq.n	8003eb8 <TIM_OC6_SetConfig+0x74>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a14      	ldr	r2, [pc, #80]	@ (8003efc <TIM_OC6_SetConfig+0xb8>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d003      	beq.n	8003eb8 <TIM_OC6_SetConfig+0x74>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a13      	ldr	r2, [pc, #76]	@ (8003f00 <TIM_OC6_SetConfig+0xbc>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d109      	bne.n	8003ecc <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	029b      	lsls	r3, r3, #10
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	621a      	str	r2, [r3, #32]
}
 8003ee6:	bf00      	nop
 8003ee8:	371c      	adds	r7, #28
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	40012c00 	.word	0x40012c00
 8003ef8:	40014000 	.word	0x40014000
 8003efc:	40014400 	.word	0x40014400
 8003f00:	40014800 	.word	0x40014800

08003f04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	f023 0201 	bic.w	r2, r3, #1
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	011b      	lsls	r3, r3, #4
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f023 030a 	bic.w	r3, r3, #10
 8003f40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	621a      	str	r2, [r3, #32]
}
 8003f56:	bf00      	nop
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b087      	sub	sp, #28
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	f023 0210 	bic.w	r2, r3, #16
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	031b      	lsls	r3, r3, #12
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	621a      	str	r2, [r3, #32]
}
 8003fb6:	bf00      	nop
 8003fb8:	371c      	adds	r7, #28
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b085      	sub	sp, #20
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f043 0307 	orr.w	r3, r3, #7
 8003fe4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	609a      	str	r2, [r3, #8]
}
 8003fec:	bf00      	nop
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004012:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	021a      	lsls	r2, r3, #8
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	431a      	orrs	r2, r3
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	4313      	orrs	r3, r2
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	4313      	orrs	r3, r2
 8004024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	609a      	str	r2, [r3, #8]
}
 800402c:	bf00      	nop
 800402e:	371c      	adds	r7, #28
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f003 031f 	and.w	r3, r3, #31
 800404a:	2201      	movs	r2, #1
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6a1a      	ldr	r2, [r3, #32]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	43db      	mvns	r3, r3
 800405a:	401a      	ands	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a1a      	ldr	r2, [r3, #32]
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f003 031f 	and.w	r3, r3, #31
 800406a:	6879      	ldr	r1, [r7, #4]
 800406c:	fa01 f303 	lsl.w	r3, r1, r3
 8004070:	431a      	orrs	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	621a      	str	r2, [r3, #32]
}
 8004076:	bf00      	nop
 8004078:	371c      	adds	r7, #28
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
	...

08004084 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004094:	2b01      	cmp	r3, #1
 8004096:	d101      	bne.n	800409c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004098:	2302      	movs	r3, #2
 800409a:	e04f      	b.n	800413c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a21      	ldr	r2, [pc, #132]	@ (8004148 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d108      	bne.n	80040d8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80040cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a14      	ldr	r2, [pc, #80]	@ (8004148 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d009      	beq.n	8004110 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004104:	d004      	beq.n	8004110 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a10      	ldr	r2, [pc, #64]	@ (800414c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d10c      	bne.n	800412a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004116:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	4313      	orrs	r3, r2
 8004120:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	40012c00 	.word	0x40012c00
 800414c:	40014000 	.word	0x40014000

08004150 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800415a:	2300      	movs	r3, #0
 800415c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004164:	2b01      	cmp	r3, #1
 8004166:	d101      	bne.n	800416c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004168:	2302      	movs	r3, #2
 800416a:	e060      	b.n	800422e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	4313      	orrs	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	4313      	orrs	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d2:	4313      	orrs	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	041b      	lsls	r3, r3, #16
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a14      	ldr	r2, [pc, #80]	@ (800423c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d115      	bne.n	800421c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fa:	051b      	lsls	r3, r3, #20
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	4313      	orrs	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	4313      	orrs	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	40012c00 	.word	0x40012c00

08004240 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e040      	b.n	80042d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7fc febc 	bl	8000fe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2224      	movs	r2, #36	@ 0x24
 800426c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0201 	bic.w	r2, r2, #1
 800427c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fc40 	bl	8004b04 <UART_SetConfig>
 8004284:	4603      	mov	r3, r0
 8004286:	2b01      	cmp	r3, #1
 8004288:	d101      	bne.n	800428e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e022      	b.n	80042d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004292:	2b00      	cmp	r3, #0
 8004294:	d002      	beq.n	800429c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 fd6a 	bl	8004d70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689a      	ldr	r2, [r3, #8]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0201 	orr.w	r2, r2, #1
 80042ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 fdf1 	bl	8004eb4 <UART_CheckIdleState>
 80042d2:	4603      	mov	r3, r0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08a      	sub	sp, #40	@ 0x28
 80042e0:	af02      	add	r7, sp, #8
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	603b      	str	r3, [r7, #0]
 80042e8:	4613      	mov	r3, r2
 80042ea:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042f2:	2b20      	cmp	r3, #32
 80042f4:	f040 80b6 	bne.w	8004464 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <HAL_UART_Receive+0x28>
 80042fe:	88fb      	ldrh	r3, [r7, #6]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e0ae      	b.n	8004466 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2222      	movs	r2, #34	@ 0x22
 8004314:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800431e:	f7fc ffbd 	bl	800129c <HAL_GetTick>
 8004322:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	88fa      	ldrh	r2, [r7, #6]
 8004328:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	88fa      	ldrh	r2, [r7, #6]
 8004330:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800433c:	d10e      	bne.n	800435c <HAL_UART_Receive+0x80>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d105      	bne.n	8004352 <HAL_UART_Receive+0x76>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800434c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004350:	e02d      	b.n	80043ae <HAL_UART_Receive+0xd2>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	22ff      	movs	r2, #255	@ 0xff
 8004356:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800435a:	e028      	b.n	80043ae <HAL_UART_Receive+0xd2>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10d      	bne.n	8004380 <HAL_UART_Receive+0xa4>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d104      	bne.n	8004376 <HAL_UART_Receive+0x9a>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	22ff      	movs	r2, #255	@ 0xff
 8004370:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004374:	e01b      	b.n	80043ae <HAL_UART_Receive+0xd2>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	227f      	movs	r2, #127	@ 0x7f
 800437a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800437e:	e016      	b.n	80043ae <HAL_UART_Receive+0xd2>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004388:	d10d      	bne.n	80043a6 <HAL_UART_Receive+0xca>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d104      	bne.n	800439c <HAL_UART_Receive+0xc0>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	227f      	movs	r2, #127	@ 0x7f
 8004396:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800439a:	e008      	b.n	80043ae <HAL_UART_Receive+0xd2>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	223f      	movs	r2, #63	@ 0x3f
 80043a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80043a4:	e003      	b.n	80043ae <HAL_UART_Receive+0xd2>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80043b4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043be:	d108      	bne.n	80043d2 <HAL_UART_Receive+0xf6>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d104      	bne.n	80043d2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80043c8:	2300      	movs	r3, #0
 80043ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	61bb      	str	r3, [r7, #24]
 80043d0:	e003      	b.n	80043da <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043d6:	2300      	movs	r3, #0
 80043d8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80043da:	e037      	b.n	800444c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	2200      	movs	r2, #0
 80043e4:	2120      	movs	r1, #32
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 fe0c 	bl	8005004 <UART_WaitOnFlagUntilTimeout>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d005      	beq.n	80043fe <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2220      	movs	r2, #32
 80043f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e033      	b.n	8004466 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10c      	bne.n	800441e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800440a:	b29a      	uxth	r2, r3
 800440c:	8a7b      	ldrh	r3, [r7, #18]
 800440e:	4013      	ands	r3, r2
 8004410:	b29a      	uxth	r2, r3
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	3302      	adds	r3, #2
 800441a:	61bb      	str	r3, [r7, #24]
 800441c:	e00d      	b.n	800443a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004424:	b29b      	uxth	r3, r3
 8004426:	b2da      	uxtb	r2, r3
 8004428:	8a7b      	ldrh	r3, [r7, #18]
 800442a:	b2db      	uxtb	r3, r3
 800442c:	4013      	ands	r3, r2
 800442e:	b2da      	uxtb	r2, r3
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	3301      	adds	r3, #1
 8004438:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004440:	b29b      	uxth	r3, r3
 8004442:	3b01      	subs	r3, #1
 8004444:	b29a      	uxth	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004452:	b29b      	uxth	r3, r3
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1c1      	bne.n	80043dc <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2220      	movs	r2, #32
 800445c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8004460:	2300      	movs	r3, #0
 8004462:	e000      	b.n	8004466 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004464:	2302      	movs	r3, #2
  }
}
 8004466:	4618      	mov	r0, r3
 8004468:	3720      	adds	r7, #32
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b08a      	sub	sp, #40	@ 0x28
 8004472:	af00      	add	r7, sp, #0
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	60b9      	str	r1, [r7, #8]
 8004478:	4613      	mov	r3, r2
 800447a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004482:	2b20      	cmp	r3, #32
 8004484:	d132      	bne.n	80044ec <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d002      	beq.n	8004492 <HAL_UART_Receive_IT+0x24>
 800448c:	88fb      	ldrh	r3, [r7, #6]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e02b      	b.n	80044ee <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d018      	beq.n	80044dc <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	e853 3f00 	ldrex	r3, [r3]
 80044b6:	613b      	str	r3, [r7, #16]
   return(result);
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80044be:	627b      	str	r3, [r7, #36]	@ 0x24
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	461a      	mov	r2, r3
 80044c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c8:	623b      	str	r3, [r7, #32]
 80044ca:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044cc:	69f9      	ldr	r1, [r7, #28]
 80044ce:	6a3a      	ldr	r2, [r7, #32]
 80044d0:	e841 2300 	strex	r3, r2, [r1]
 80044d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1e6      	bne.n	80044aa <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80044dc:	88fb      	ldrh	r3, [r7, #6]
 80044de:	461a      	mov	r2, r3
 80044e0:	68b9      	ldr	r1, [r7, #8]
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f000 fdf6 	bl	80050d4 <UART_Start_Receive_IT>
 80044e8:	4603      	mov	r3, r0
 80044ea:	e000      	b.n	80044ee <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80044ec:	2302      	movs	r3, #2
  }
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3728      	adds	r7, #40	@ 0x28
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
	...

080044f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b0ba      	sub	sp, #232	@ 0xe8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800451e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004522:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004526:	4013      	ands	r3, r2
 8004528:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800452c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004530:	2b00      	cmp	r3, #0
 8004532:	d115      	bne.n	8004560 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004538:	f003 0320 	and.w	r3, r3, #32
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00f      	beq.n	8004560 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004544:	f003 0320 	and.w	r3, r3, #32
 8004548:	2b00      	cmp	r3, #0
 800454a:	d009      	beq.n	8004560 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 82ab 	beq.w	8004aac <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	4798      	blx	r3
      }
      return;
 800455e:	e2a5      	b.n	8004aac <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004560:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 8117 	beq.w	8004798 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800456a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d106      	bne.n	8004584 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004576:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800457a:	4b85      	ldr	r3, [pc, #532]	@ (8004790 <HAL_UART_IRQHandler+0x298>)
 800457c:	4013      	ands	r3, r2
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 810a 	beq.w	8004798 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d011      	beq.n	80045b4 <HAL_UART_IRQHandler+0xbc>
 8004590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00b      	beq.n	80045b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2201      	movs	r2, #1
 80045a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045aa:	f043 0201 	orr.w	r2, r3, #1
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d011      	beq.n	80045e4 <HAL_UART_IRQHandler+0xec>
 80045c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00b      	beq.n	80045e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2202      	movs	r2, #2
 80045d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045da:	f043 0204 	orr.w	r2, r3, #4
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d011      	beq.n	8004614 <HAL_UART_IRQHandler+0x11c>
 80045f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00b      	beq.n	8004614 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2204      	movs	r2, #4
 8004602:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800460a:	f043 0202 	orr.w	r2, r3, #2
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b00      	cmp	r3, #0
 800461e:	d017      	beq.n	8004650 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004624:	f003 0320 	and.w	r3, r3, #32
 8004628:	2b00      	cmp	r3, #0
 800462a:	d105      	bne.n	8004638 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800462c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004630:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00b      	beq.n	8004650 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2208      	movs	r2, #8
 800463e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004646:	f043 0208 	orr.w	r2, r3, #8
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004654:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004658:	2b00      	cmp	r3, #0
 800465a:	d012      	beq.n	8004682 <HAL_UART_IRQHandler+0x18a>
 800465c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004660:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00c      	beq.n	8004682 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004670:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004678:	f043 0220 	orr.w	r2, r3, #32
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 8211 	beq.w	8004ab0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800468e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004692:	f003 0320 	and.w	r3, r3, #32
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00d      	beq.n	80046b6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800469a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800469e:	f003 0320 	and.w	r3, r3, #32
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d007      	beq.n	80046b6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ca:	2b40      	cmp	r3, #64	@ 0x40
 80046cc:	d005      	beq.n	80046da <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80046ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046d2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d04f      	beq.n	800477a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 fdc0 	bl	8005260 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ea:	2b40      	cmp	r3, #64	@ 0x40
 80046ec:	d141      	bne.n	8004772 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	3308      	adds	r3, #8
 80046f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80046fc:	e853 3f00 	ldrex	r3, [r3]
 8004700:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004704:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004708:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800470c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3308      	adds	r3, #8
 8004716:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800471a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800471e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004722:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004726:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800472a:	e841 2300 	strex	r3, r2, [r1]
 800472e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004732:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1d9      	bne.n	80046ee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800473e:	2b00      	cmp	r3, #0
 8004740:	d013      	beq.n	800476a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004746:	4a13      	ldr	r2, [pc, #76]	@ (8004794 <HAL_UART_IRQHandler+0x29c>)
 8004748:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800474e:	4618      	mov	r0, r3
 8004750:	f7fc ff1e 	bl	8001590 <HAL_DMA_Abort_IT>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d017      	beq.n	800478a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800475e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004764:	4610      	mov	r0, r2
 8004766:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004768:	e00f      	b.n	800478a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f9b4 	bl	8004ad8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004770:	e00b      	b.n	800478a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f9b0 	bl	8004ad8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004778:	e007      	b.n	800478a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f9ac 	bl	8004ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004788:	e192      	b.n	8004ab0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800478a:	bf00      	nop
    return;
 800478c:	e190      	b.n	8004ab0 <HAL_UART_IRQHandler+0x5b8>
 800478e:	bf00      	nop
 8004790:	04000120 	.word	0x04000120
 8004794:	08005329 	.word	0x08005329

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800479c:	2b01      	cmp	r3, #1
 800479e:	f040 814b 	bne.w	8004a38 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80047a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047a6:	f003 0310 	and.w	r3, r3, #16
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 8144 	beq.w	8004a38 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80047b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047b4:	f003 0310 	and.w	r3, r3, #16
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 813d 	beq.w	8004a38 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2210      	movs	r2, #16
 80047c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047d0:	2b40      	cmp	r3, #64	@ 0x40
 80047d2:	f040 80b5 	bne.w	8004940 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 8164 	beq.w	8004ab4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80047f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047f6:	429a      	cmp	r2, r3
 80047f8:	f080 815c 	bcs.w	8004ab4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004802:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	2b20      	cmp	r3, #32
 800480e:	f000 8086 	beq.w	800491e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800481e:	e853 3f00 	ldrex	r3, [r3]
 8004822:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004826:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800482a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800482e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	461a      	mov	r2, r3
 8004838:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800483c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004840:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004844:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004848:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800484c:	e841 2300 	strex	r3, r2, [r1]
 8004850:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004854:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1da      	bne.n	8004812 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3308      	adds	r3, #8
 8004862:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004864:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004866:	e853 3f00 	ldrex	r3, [r3]
 800486a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800486c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800486e:	f023 0301 	bic.w	r3, r3, #1
 8004872:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	3308      	adds	r3, #8
 800487c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004880:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004884:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004886:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004888:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800488c:	e841 2300 	strex	r3, r2, [r1]
 8004890:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004892:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e1      	bne.n	800485c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3308      	adds	r3, #8
 800489e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048a2:	e853 3f00 	ldrex	r3, [r3]
 80048a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80048a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3308      	adds	r3, #8
 80048b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80048bc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80048be:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80048c2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80048c4:	e841 2300 	strex	r3, r2, [r1]
 80048c8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80048ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1e3      	bne.n	8004898 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048e6:	e853 3f00 	ldrex	r3, [r3]
 80048ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80048ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048ee:	f023 0310 	bic.w	r3, r3, #16
 80048f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	461a      	mov	r2, r3
 80048fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004900:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004902:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004904:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004906:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004908:	e841 2300 	strex	r3, r2, [r1]
 800490c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800490e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1e4      	bne.n	80048de <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004918:	4618      	mov	r0, r3
 800491a:	f7fc fe00 	bl	800151e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2202      	movs	r2, #2
 8004922:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004930:	b29b      	uxth	r3, r3
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	b29b      	uxth	r3, r3
 8004936:	4619      	mov	r1, r3
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f8d7 	bl	8004aec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800493e:	e0b9      	b.n	8004ab4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800494c:	b29b      	uxth	r3, r3
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800495a:	b29b      	uxth	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 80ab 	beq.w	8004ab8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004962:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004966:	2b00      	cmp	r3, #0
 8004968:	f000 80a6 	beq.w	8004ab8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004974:	e853 3f00 	ldrex	r3, [r3]
 8004978:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800497a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800497c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004980:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	461a      	mov	r2, r3
 800498a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800498e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004990:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004992:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004994:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004996:	e841 2300 	strex	r3, r2, [r1]
 800499a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800499c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1e4      	bne.n	800496c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3308      	adds	r3, #8
 80049a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ac:	e853 3f00 	ldrex	r3, [r3]
 80049b0:	623b      	str	r3, [r7, #32]
   return(result);
 80049b2:	6a3b      	ldr	r3, [r7, #32]
 80049b4:	f023 0301 	bic.w	r3, r3, #1
 80049b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3308      	adds	r3, #8
 80049c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80049c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80049c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049ce:	e841 2300 	strex	r3, r2, [r1]
 80049d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1e3      	bne.n	80049a2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2220      	movs	r2, #32
 80049de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	e853 3f00 	ldrex	r3, [r3]
 80049fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0310 	bic.w	r3, r3, #16
 8004a02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004a10:	61fb      	str	r3, [r7, #28]
 8004a12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a14:	69b9      	ldr	r1, [r7, #24]
 8004a16:	69fa      	ldr	r2, [r7, #28]
 8004a18:	e841 2300 	strex	r3, r2, [r1]
 8004a1c:	617b      	str	r3, [r7, #20]
   return(result);
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1e4      	bne.n	80049ee <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a2e:	4619      	mov	r1, r3
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f85b 	bl	8004aec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a36:	e03f      	b.n	8004ab8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00e      	beq.n	8004a62 <HAL_UART_IRQHandler+0x56a>
 8004a44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d008      	beq.n	8004a62 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004a58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fe4c 	bl	80056f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a60:	e02d      	b.n	8004abe <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00e      	beq.n	8004a8c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d008      	beq.n	8004a8c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d01c      	beq.n	8004abc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	4798      	blx	r3
    }
    return;
 8004a8a:	e017      	b.n	8004abc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d012      	beq.n	8004abe <HAL_UART_IRQHandler+0x5c6>
 8004a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00c      	beq.n	8004abe <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 fc55 	bl	8005354 <UART_EndTransmit_IT>
    return;
 8004aaa:	e008      	b.n	8004abe <HAL_UART_IRQHandler+0x5c6>
      return;
 8004aac:	bf00      	nop
 8004aae:	e006      	b.n	8004abe <HAL_UART_IRQHandler+0x5c6>
    return;
 8004ab0:	bf00      	nop
 8004ab2:	e004      	b.n	8004abe <HAL_UART_IRQHandler+0x5c6>
      return;
 8004ab4:	bf00      	nop
 8004ab6:	e002      	b.n	8004abe <HAL_UART_IRQHandler+0x5c6>
      return;
 8004ab8:	bf00      	nop
 8004aba:	e000      	b.n	8004abe <HAL_UART_IRQHandler+0x5c6>
    return;
 8004abc:	bf00      	nop
  }

}
 8004abe:	37e8      	adds	r7, #232	@ 0xe8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	460b      	mov	r3, r1
 8004af6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b088      	sub	sp, #32
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	69db      	ldr	r3, [r3, #28]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	4b8a      	ldr	r3, [pc, #552]	@ (8004d58 <UART_SetConfig+0x254>)
 8004b30:	4013      	ands	r3, r2
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	6812      	ldr	r2, [r2, #0]
 8004b36:	6979      	ldr	r1, [r7, #20]
 8004b38:	430b      	orrs	r3, r1
 8004b3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68da      	ldr	r2, [r3, #12]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a78      	ldr	r2, [pc, #480]	@ (8004d5c <UART_SetConfig+0x258>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d120      	bne.n	8004bc2 <UART_SetConfig+0xbe>
 8004b80:	4b77      	ldr	r3, [pc, #476]	@ (8004d60 <UART_SetConfig+0x25c>)
 8004b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b84:	f003 0303 	and.w	r3, r3, #3
 8004b88:	2b03      	cmp	r3, #3
 8004b8a:	d817      	bhi.n	8004bbc <UART_SetConfig+0xb8>
 8004b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b94 <UART_SetConfig+0x90>)
 8004b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b92:	bf00      	nop
 8004b94:	08004ba5 	.word	0x08004ba5
 8004b98:	08004bb1 	.word	0x08004bb1
 8004b9c:	08004bb7 	.word	0x08004bb7
 8004ba0:	08004bab 	.word	0x08004bab
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	77fb      	strb	r3, [r7, #31]
 8004ba8:	e01d      	b.n	8004be6 <UART_SetConfig+0xe2>
 8004baa:	2302      	movs	r3, #2
 8004bac:	77fb      	strb	r3, [r7, #31]
 8004bae:	e01a      	b.n	8004be6 <UART_SetConfig+0xe2>
 8004bb0:	2304      	movs	r3, #4
 8004bb2:	77fb      	strb	r3, [r7, #31]
 8004bb4:	e017      	b.n	8004be6 <UART_SetConfig+0xe2>
 8004bb6:	2308      	movs	r3, #8
 8004bb8:	77fb      	strb	r3, [r7, #31]
 8004bba:	e014      	b.n	8004be6 <UART_SetConfig+0xe2>
 8004bbc:	2310      	movs	r3, #16
 8004bbe:	77fb      	strb	r3, [r7, #31]
 8004bc0:	e011      	b.n	8004be6 <UART_SetConfig+0xe2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a67      	ldr	r2, [pc, #412]	@ (8004d64 <UART_SetConfig+0x260>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d102      	bne.n	8004bd2 <UART_SetConfig+0xce>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	77fb      	strb	r3, [r7, #31]
 8004bd0:	e009      	b.n	8004be6 <UART_SetConfig+0xe2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a64      	ldr	r2, [pc, #400]	@ (8004d68 <UART_SetConfig+0x264>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d102      	bne.n	8004be2 <UART_SetConfig+0xde>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	77fb      	strb	r3, [r7, #31]
 8004be0:	e001      	b.n	8004be6 <UART_SetConfig+0xe2>
 8004be2:	2310      	movs	r3, #16
 8004be4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bee:	d15a      	bne.n	8004ca6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004bf0:	7ffb      	ldrb	r3, [r7, #31]
 8004bf2:	2b08      	cmp	r3, #8
 8004bf4:	d827      	bhi.n	8004c46 <UART_SetConfig+0x142>
 8004bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8004bfc <UART_SetConfig+0xf8>)
 8004bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfc:	08004c21 	.word	0x08004c21
 8004c00:	08004c29 	.word	0x08004c29
 8004c04:	08004c31 	.word	0x08004c31
 8004c08:	08004c47 	.word	0x08004c47
 8004c0c:	08004c37 	.word	0x08004c37
 8004c10:	08004c47 	.word	0x08004c47
 8004c14:	08004c47 	.word	0x08004c47
 8004c18:	08004c47 	.word	0x08004c47
 8004c1c:	08004c3f 	.word	0x08004c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c20:	f7fe f8c6 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 8004c24:	61b8      	str	r0, [r7, #24]
        break;
 8004c26:	e013      	b.n	8004c50 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c28:	f7fe f8e4 	bl	8002df4 <HAL_RCC_GetPCLK2Freq>
 8004c2c:	61b8      	str	r0, [r7, #24]
        break;
 8004c2e:	e00f      	b.n	8004c50 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c30:	4b4e      	ldr	r3, [pc, #312]	@ (8004d6c <UART_SetConfig+0x268>)
 8004c32:	61bb      	str	r3, [r7, #24]
        break;
 8004c34:	e00c      	b.n	8004c50 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c36:	f7fe f845 	bl	8002cc4 <HAL_RCC_GetSysClockFreq>
 8004c3a:	61b8      	str	r0, [r7, #24]
        break;
 8004c3c:	e008      	b.n	8004c50 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c42:	61bb      	str	r3, [r7, #24]
        break;
 8004c44:	e004      	b.n	8004c50 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	77bb      	strb	r3, [r7, #30]
        break;
 8004c4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d074      	beq.n	8004d40 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	005a      	lsls	r2, r3, #1
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	085b      	lsrs	r3, r3, #1
 8004c60:	441a      	add	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	2b0f      	cmp	r3, #15
 8004c70:	d916      	bls.n	8004ca0 <UART_SetConfig+0x19c>
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c78:	d212      	bcs.n	8004ca0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	f023 030f 	bic.w	r3, r3, #15
 8004c82:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	085b      	lsrs	r3, r3, #1
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	f003 0307 	and.w	r3, r3, #7
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	89fb      	ldrh	r3, [r7, #14]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	89fa      	ldrh	r2, [r7, #14]
 8004c9c:	60da      	str	r2, [r3, #12]
 8004c9e:	e04f      	b.n	8004d40 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	77bb      	strb	r3, [r7, #30]
 8004ca4:	e04c      	b.n	8004d40 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ca6:	7ffb      	ldrb	r3, [r7, #31]
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d828      	bhi.n	8004cfe <UART_SetConfig+0x1fa>
 8004cac:	a201      	add	r2, pc, #4	@ (adr r2, 8004cb4 <UART_SetConfig+0x1b0>)
 8004cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb2:	bf00      	nop
 8004cb4:	08004cd9 	.word	0x08004cd9
 8004cb8:	08004ce1 	.word	0x08004ce1
 8004cbc:	08004ce9 	.word	0x08004ce9
 8004cc0:	08004cff 	.word	0x08004cff
 8004cc4:	08004cef 	.word	0x08004cef
 8004cc8:	08004cff 	.word	0x08004cff
 8004ccc:	08004cff 	.word	0x08004cff
 8004cd0:	08004cff 	.word	0x08004cff
 8004cd4:	08004cf7 	.word	0x08004cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cd8:	f7fe f86a 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 8004cdc:	61b8      	str	r0, [r7, #24]
        break;
 8004cde:	e013      	b.n	8004d08 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ce0:	f7fe f888 	bl	8002df4 <HAL_RCC_GetPCLK2Freq>
 8004ce4:	61b8      	str	r0, [r7, #24]
        break;
 8004ce6:	e00f      	b.n	8004d08 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ce8:	4b20      	ldr	r3, [pc, #128]	@ (8004d6c <UART_SetConfig+0x268>)
 8004cea:	61bb      	str	r3, [r7, #24]
        break;
 8004cec:	e00c      	b.n	8004d08 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cee:	f7fd ffe9 	bl	8002cc4 <HAL_RCC_GetSysClockFreq>
 8004cf2:	61b8      	str	r0, [r7, #24]
        break;
 8004cf4:	e008      	b.n	8004d08 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cfa:	61bb      	str	r3, [r7, #24]
        break;
 8004cfc:	e004      	b.n	8004d08 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	77bb      	strb	r3, [r7, #30]
        break;
 8004d06:	bf00      	nop
    }

    if (pclk != 0U)
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d018      	beq.n	8004d40 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	085a      	lsrs	r2, r3, #1
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	441a      	add	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d20:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	2b0f      	cmp	r3, #15
 8004d26:	d909      	bls.n	8004d3c <UART_SetConfig+0x238>
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d2e:	d205      	bcs.n	8004d3c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	60da      	str	r2, [r3, #12]
 8004d3a:	e001      	b.n	8004d40 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004d4c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3720      	adds	r7, #32
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	efff69f3 	.word	0xefff69f3
 8004d5c:	40013800 	.word	0x40013800
 8004d60:	40021000 	.word	0x40021000
 8004d64:	40004400 	.word	0x40004400
 8004d68:	40004800 	.word	0x40004800
 8004d6c:	007a1200 	.word	0x007a1200

08004d70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00a      	beq.n	8004d9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00a      	beq.n	8004dbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00a      	beq.n	8004dde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de2:	f003 0308 	and.w	r3, r3, #8
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e04:	f003 0310 	and.w	r3, r3, #16
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00a      	beq.n	8004e22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e26:	f003 0320 	and.w	r3, r3, #32
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d01a      	beq.n	8004e86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e6e:	d10a      	bne.n	8004e86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00a      	beq.n	8004ea8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	605a      	str	r2, [r3, #4]
  }
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b098      	sub	sp, #96	@ 0x60
 8004eb8:	af02      	add	r7, sp, #8
 8004eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ec4:	f7fc f9ea 	bl	800129c <HAL_GetTick>
 8004ec8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0308 	and.w	r3, r3, #8
 8004ed4:	2b08      	cmp	r3, #8
 8004ed6:	d12e      	bne.n	8004f36 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ed8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f88c 	bl	8005004 <UART_WaitOnFlagUntilTimeout>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d021      	beq.n	8004f36 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004efa:	e853 3f00 	ldrex	r3, [r3]
 8004efe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f06:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f10:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f12:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f18:	e841 2300 	strex	r3, r2, [r1]
 8004f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1e6      	bne.n	8004ef2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2220      	movs	r2, #32
 8004f28:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e062      	b.n	8004ffc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b04      	cmp	r3, #4
 8004f42:	d149      	bne.n	8004fd8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f856 	bl	8005004 <UART_WaitOnFlagUntilTimeout>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d03c      	beq.n	8004fd8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f66:	e853 3f00 	ldrex	r3, [r3]
 8004f6a:	623b      	str	r3, [r7, #32]
   return(result);
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
 8004f6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f84:	e841 2300 	strex	r3, r2, [r1]
 8004f88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1e6      	bne.n	8004f5e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3308      	adds	r3, #8
 8004f96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	e853 3f00 	ldrex	r3, [r3]
 8004f9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 0301 	bic.w	r3, r3, #1
 8004fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3308      	adds	r3, #8
 8004fae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fb0:	61fa      	str	r2, [r7, #28]
 8004fb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb4:	69b9      	ldr	r1, [r7, #24]
 8004fb6:	69fa      	ldr	r2, [r7, #28]
 8004fb8:	e841 2300 	strex	r3, r2, [r1]
 8004fbc:	617b      	str	r3, [r7, #20]
   return(result);
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1e5      	bne.n	8004f90 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e011      	b.n	8004ffc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3758      	adds	r7, #88	@ 0x58
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	603b      	str	r3, [r7, #0]
 8005010:	4613      	mov	r3, r2
 8005012:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005014:	e049      	b.n	80050aa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501c:	d045      	beq.n	80050aa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800501e:	f7fc f93d 	bl	800129c <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	429a      	cmp	r2, r3
 800502c:	d302      	bcc.n	8005034 <UART_WaitOnFlagUntilTimeout+0x30>
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e048      	b.n	80050ca <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0304 	and.w	r3, r3, #4
 8005042:	2b00      	cmp	r3, #0
 8005044:	d031      	beq.n	80050aa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	69db      	ldr	r3, [r3, #28]
 800504c:	f003 0308 	and.w	r3, r3, #8
 8005050:	2b08      	cmp	r3, #8
 8005052:	d110      	bne.n	8005076 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2208      	movs	r2, #8
 800505a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f000 f8ff 	bl	8005260 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2208      	movs	r2, #8
 8005066:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e029      	b.n	80050ca <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005080:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005084:	d111      	bne.n	80050aa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800508e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 f8e5 	bl	8005260 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2220      	movs	r2, #32
 800509a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e00f      	b.n	80050ca <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	69da      	ldr	r2, [r3, #28]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4013      	ands	r3, r2
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	bf0c      	ite	eq
 80050ba:	2301      	moveq	r3, #1
 80050bc:	2300      	movne	r3, #0
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	461a      	mov	r2, r3
 80050c2:	79fb      	ldrb	r3, [r7, #7]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d0a6      	beq.n	8005016 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
	...

080050d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b097      	sub	sp, #92	@ 0x5c
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	4613      	mov	r3, r2
 80050e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	88fa      	ldrh	r2, [r7, #6]
 80050ec:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	88fa      	ldrh	r2, [r7, #6]
 80050f4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005106:	d10e      	bne.n	8005126 <UART_Start_Receive_IT+0x52>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d105      	bne.n	800511c <UART_Start_Receive_IT+0x48>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005116:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800511a:	e02d      	b.n	8005178 <UART_Start_Receive_IT+0xa4>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	22ff      	movs	r2, #255	@ 0xff
 8005120:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005124:	e028      	b.n	8005178 <UART_Start_Receive_IT+0xa4>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10d      	bne.n	800514a <UART_Start_Receive_IT+0x76>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d104      	bne.n	8005140 <UART_Start_Receive_IT+0x6c>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	22ff      	movs	r2, #255	@ 0xff
 800513a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800513e:	e01b      	b.n	8005178 <UART_Start_Receive_IT+0xa4>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	227f      	movs	r2, #127	@ 0x7f
 8005144:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005148:	e016      	b.n	8005178 <UART_Start_Receive_IT+0xa4>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005152:	d10d      	bne.n	8005170 <UART_Start_Receive_IT+0x9c>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d104      	bne.n	8005166 <UART_Start_Receive_IT+0x92>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	227f      	movs	r2, #127	@ 0x7f
 8005160:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005164:	e008      	b.n	8005178 <UART_Start_Receive_IT+0xa4>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	223f      	movs	r2, #63	@ 0x3f
 800516a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800516e:	e003      	b.n	8005178 <UART_Start_Receive_IT+0xa4>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2222      	movs	r2, #34	@ 0x22
 8005184:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	3308      	adds	r3, #8
 800518e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005192:	e853 3f00 	ldrex	r3, [r3]
 8005196:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800519a:	f043 0301 	orr.w	r3, r3, #1
 800519e:	657b      	str	r3, [r7, #84]	@ 0x54
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	3308      	adds	r3, #8
 80051a6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80051a8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80051aa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ac:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80051ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051b0:	e841 2300 	strex	r3, r2, [r1]
 80051b4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80051b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1e5      	bne.n	8005188 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051c4:	d107      	bne.n	80051d6 <UART_Start_Receive_IT+0x102>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d103      	bne.n	80051d6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	4a21      	ldr	r2, [pc, #132]	@ (8005258 <UART_Start_Receive_IT+0x184>)
 80051d2:	669a      	str	r2, [r3, #104]	@ 0x68
 80051d4:	e002      	b.n	80051dc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	4a20      	ldr	r2, [pc, #128]	@ (800525c <UART_Start_Receive_IT+0x188>)
 80051da:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d019      	beq.n	8005218 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ec:	e853 3f00 	ldrex	r3, [r3]
 80051f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80051f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	461a      	mov	r2, r3
 8005200:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005202:	637b      	str	r3, [r7, #52]	@ 0x34
 8005204:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005206:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005208:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800520a:	e841 2300 	strex	r3, r2, [r1]
 800520e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1e6      	bne.n	80051e4 <UART_Start_Receive_IT+0x110>
 8005216:	e018      	b.n	800524a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	e853 3f00 	ldrex	r3, [r3]
 8005224:	613b      	str	r3, [r7, #16]
   return(result);
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	f043 0320 	orr.w	r3, r3, #32
 800522c:	653b      	str	r3, [r7, #80]	@ 0x50
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	461a      	mov	r2, r3
 8005234:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005236:	623b      	str	r3, [r7, #32]
 8005238:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523a:	69f9      	ldr	r1, [r7, #28]
 800523c:	6a3a      	ldr	r2, [r7, #32]
 800523e:	e841 2300 	strex	r3, r2, [r1]
 8005242:	61bb      	str	r3, [r7, #24]
   return(result);
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1e6      	bne.n	8005218 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	375c      	adds	r7, #92	@ 0x5c
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	08005551 	.word	0x08005551
 800525c:	080053a9 	.word	0x080053a9

08005260 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005260:	b480      	push	{r7}
 8005262:	b095      	sub	sp, #84	@ 0x54
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005270:	e853 3f00 	ldrex	r3, [r3]
 8005274:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005278:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800527c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	461a      	mov	r2, r3
 8005284:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005286:	643b      	str	r3, [r7, #64]	@ 0x40
 8005288:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800528c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800528e:	e841 2300 	strex	r3, r2, [r1]
 8005292:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1e6      	bne.n	8005268 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	3308      	adds	r3, #8
 80052a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	e853 3f00 	ldrex	r3, [r3]
 80052a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	f023 0301 	bic.w	r3, r3, #1
 80052b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	3308      	adds	r3, #8
 80052b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052c2:	e841 2300 	strex	r3, r2, [r1]
 80052c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1e5      	bne.n	800529a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d118      	bne.n	8005308 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	e853 3f00 	ldrex	r3, [r3]
 80052e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f023 0310 	bic.w	r3, r3, #16
 80052ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	461a      	mov	r2, r3
 80052f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052f4:	61bb      	str	r3, [r7, #24]
 80052f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f8:	6979      	ldr	r1, [r7, #20]
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	e841 2300 	strex	r3, r2, [r1]
 8005300:	613b      	str	r3, [r7, #16]
   return(result);
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1e6      	bne.n	80052d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2220      	movs	r2, #32
 800530c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800531c:	bf00      	nop
 800531e:	3754      	adds	r7, #84	@ 0x54
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005334:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f7ff fbc6 	bl	8004ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800534c:	bf00      	nop
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b088      	sub	sp, #32
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	e853 3f00 	ldrex	r3, [r3]
 8005368:	60bb      	str	r3, [r7, #8]
   return(result);
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005370:	61fb      	str	r3, [r7, #28]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	461a      	mov	r2, r3
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	61bb      	str	r3, [r7, #24]
 800537c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537e:	6979      	ldr	r1, [r7, #20]
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	e841 2300 	strex	r3, r2, [r1]
 8005386:	613b      	str	r3, [r7, #16]
   return(result);
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1e6      	bne.n	800535c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2220      	movs	r2, #32
 8005392:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7ff fb92 	bl	8004ac4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053a0:	bf00      	nop
 80053a2:	3720      	adds	r7, #32
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b09c      	sub	sp, #112	@ 0x70
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80053b6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053c0:	2b22      	cmp	r3, #34	@ 0x22
 80053c2:	f040 80b9 	bne.w	8005538 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80053cc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80053d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80053d4:	b2d9      	uxtb	r1, r3
 80053d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053e0:	400a      	ands	r2, r1
 80053e2:	b2d2      	uxtb	r2, r2
 80053e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	3b01      	subs	r3, #1
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005408:	b29b      	uxth	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	f040 809c 	bne.w	8005548 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005416:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005418:	e853 3f00 	ldrex	r3, [r3]
 800541c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800541e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005420:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005424:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	461a      	mov	r2, r3
 800542c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800542e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005430:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005432:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005434:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005436:	e841 2300 	strex	r3, r2, [r1]
 800543a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800543c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1e6      	bne.n	8005410 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3308      	adds	r3, #8
 8005448:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800544c:	e853 3f00 	ldrex	r3, [r3]
 8005450:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005454:	f023 0301 	bic.w	r3, r3, #1
 8005458:	667b      	str	r3, [r7, #100]	@ 0x64
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	3308      	adds	r3, #8
 8005460:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005462:	647a      	str	r2, [r7, #68]	@ 0x44
 8005464:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005466:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005468:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800546a:	e841 2300 	strex	r3, r2, [r1]
 800546e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1e5      	bne.n	8005442 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2220      	movs	r2, #32
 800547a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d018      	beq.n	80054ca <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a0:	e853 3f00 	ldrex	r3, [r3]
 80054a4:	623b      	str	r3, [r7, #32]
   return(result);
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80054ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	461a      	mov	r2, r3
 80054b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80054b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80054b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054be:	e841 2300 	strex	r3, r2, [r1]
 80054c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1e6      	bne.n	8005498 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d12e      	bne.n	8005530 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	e853 3f00 	ldrex	r3, [r3]
 80054e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f023 0310 	bic.w	r3, r3, #16
 80054ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	461a      	mov	r2, r3
 80054f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054f6:	61fb      	str	r3, [r7, #28]
 80054f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fa:	69b9      	ldr	r1, [r7, #24]
 80054fc:	69fa      	ldr	r2, [r7, #28]
 80054fe:	e841 2300 	strex	r3, r2, [r1]
 8005502:	617b      	str	r3, [r7, #20]
   return(result);
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1e6      	bne.n	80054d8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	69db      	ldr	r3, [r3, #28]
 8005510:	f003 0310 	and.w	r3, r3, #16
 8005514:	2b10      	cmp	r3, #16
 8005516:	d103      	bne.n	8005520 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2210      	movs	r2, #16
 800551e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005526:	4619      	mov	r1, r3
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7ff fadf 	bl	8004aec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800552e:	e00b      	b.n	8005548 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7fb fa8b 	bl	8000a4c <HAL_UART_RxCpltCallback>
}
 8005536:	e007      	b.n	8005548 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699a      	ldr	r2, [r3, #24]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0208 	orr.w	r2, r2, #8
 8005546:	619a      	str	r2, [r3, #24]
}
 8005548:	bf00      	nop
 800554a:	3770      	adds	r7, #112	@ 0x70
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b09c      	sub	sp, #112	@ 0x70
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800555e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005568:	2b22      	cmp	r3, #34	@ 0x22
 800556a:	f040 80b9 	bne.w	80056e0 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005574:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800557c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800557e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005582:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005586:	4013      	ands	r3, r2
 8005588:	b29a      	uxth	r2, r3
 800558a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800558c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005592:	1c9a      	adds	r2, r3, #2
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800559e:	b29b      	uxth	r3, r3
 80055a0:	3b01      	subs	r3, #1
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f040 809c 	bne.w	80056f0 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055c0:	e853 3f00 	ldrex	r3, [r3]
 80055c4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80055c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	461a      	mov	r2, r3
 80055d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80055d8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055da:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80055dc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80055de:	e841 2300 	strex	r3, r2, [r1]
 80055e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80055e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1e6      	bne.n	80055b8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	3308      	adds	r3, #8
 80055f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055f4:	e853 3f00 	ldrex	r3, [r3]
 80055f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fc:	f023 0301 	bic.w	r3, r3, #1
 8005600:	663b      	str	r3, [r7, #96]	@ 0x60
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3308      	adds	r3, #8
 8005608:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800560a:	643a      	str	r2, [r7, #64]	@ 0x40
 800560c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005610:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005612:	e841 2300 	strex	r3, r2, [r1]
 8005616:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1e5      	bne.n	80055ea <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2220      	movs	r2, #32
 8005622:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d018      	beq.n	8005672 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005646:	6a3b      	ldr	r3, [r7, #32]
 8005648:	e853 3f00 	ldrex	r3, [r3]
 800564c:	61fb      	str	r3, [r7, #28]
   return(result);
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005654:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	461a      	mov	r2, r3
 800565c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800565e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005660:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005662:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005664:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005666:	e841 2300 	strex	r3, r2, [r1]
 800566a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800566c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1e6      	bne.n	8005640 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005676:	2b01      	cmp	r3, #1
 8005678:	d12e      	bne.n	80056d8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	e853 3f00 	ldrex	r3, [r3]
 800568c:	60bb      	str	r3, [r7, #8]
   return(result);
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f023 0310 	bic.w	r3, r3, #16
 8005694:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	461a      	mov	r2, r3
 800569c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800569e:	61bb      	str	r3, [r7, #24]
 80056a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a2:	6979      	ldr	r1, [r7, #20]
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	e841 2300 	strex	r3, r2, [r1]
 80056aa:	613b      	str	r3, [r7, #16]
   return(result);
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1e6      	bne.n	8005680 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	f003 0310 	and.w	r3, r3, #16
 80056bc:	2b10      	cmp	r3, #16
 80056be:	d103      	bne.n	80056c8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2210      	movs	r2, #16
 80056c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80056ce:	4619      	mov	r1, r3
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f7ff fa0b 	bl	8004aec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80056d6:	e00b      	b.n	80056f0 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f7fb f9b7 	bl	8000a4c <HAL_UART_RxCpltCallback>
}
 80056de:	e007      	b.n	80056f0 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699a      	ldr	r2, [r3, #24]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f042 0208 	orr.w	r2, r2, #8
 80056ee:	619a      	str	r2, [r3, #24]
}
 80056f0:	bf00      	nop
 80056f2:	3770      	adds	r7, #112	@ 0x70
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <memset>:
 800570c:	4402      	add	r2, r0
 800570e:	4603      	mov	r3, r0
 8005710:	4293      	cmp	r3, r2
 8005712:	d100      	bne.n	8005716 <memset+0xa>
 8005714:	4770      	bx	lr
 8005716:	f803 1b01 	strb.w	r1, [r3], #1
 800571a:	e7f9      	b.n	8005710 <memset+0x4>

0800571c <__libc_init_array>:
 800571c:	b570      	push	{r4, r5, r6, lr}
 800571e:	4d0d      	ldr	r5, [pc, #52]	@ (8005754 <__libc_init_array+0x38>)
 8005720:	4c0d      	ldr	r4, [pc, #52]	@ (8005758 <__libc_init_array+0x3c>)
 8005722:	1b64      	subs	r4, r4, r5
 8005724:	10a4      	asrs	r4, r4, #2
 8005726:	2600      	movs	r6, #0
 8005728:	42a6      	cmp	r6, r4
 800572a:	d109      	bne.n	8005740 <__libc_init_array+0x24>
 800572c:	4d0b      	ldr	r5, [pc, #44]	@ (800575c <__libc_init_array+0x40>)
 800572e:	4c0c      	ldr	r4, [pc, #48]	@ (8005760 <__libc_init_array+0x44>)
 8005730:	f000 f818 	bl	8005764 <_init>
 8005734:	1b64      	subs	r4, r4, r5
 8005736:	10a4      	asrs	r4, r4, #2
 8005738:	2600      	movs	r6, #0
 800573a:	42a6      	cmp	r6, r4
 800573c:	d105      	bne.n	800574a <__libc_init_array+0x2e>
 800573e:	bd70      	pop	{r4, r5, r6, pc}
 8005740:	f855 3b04 	ldr.w	r3, [r5], #4
 8005744:	4798      	blx	r3
 8005746:	3601      	adds	r6, #1
 8005748:	e7ee      	b.n	8005728 <__libc_init_array+0xc>
 800574a:	f855 3b04 	ldr.w	r3, [r5], #4
 800574e:	4798      	blx	r3
 8005750:	3601      	adds	r6, #1
 8005752:	e7f2      	b.n	800573a <__libc_init_array+0x1e>
 8005754:	080057b4 	.word	0x080057b4
 8005758:	080057b4 	.word	0x080057b4
 800575c:	080057b4 	.word	0x080057b4
 8005760:	080057b8 	.word	0x080057b8

08005764 <_init>:
 8005764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005766:	bf00      	nop
 8005768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800576a:	bc08      	pop	{r3}
 800576c:	469e      	mov	lr, r3
 800576e:	4770      	bx	lr

08005770 <_fini>:
 8005770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005772:	bf00      	nop
 8005774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005776:	bc08      	pop	{r3}
 8005778:	469e      	mov	lr, r3
 800577a:	4770      	bx	lr
