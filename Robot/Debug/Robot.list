
Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08003484  08003484  00013484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800351c  0800351c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800351c  0800351c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800351c  0800351c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800351c  0800351c  0001351c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003520  08003520  00013520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  2000005c  08003580  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08003580  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008324  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001342  00000000  00000000  000283f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000630  00000000  00000000  00029738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004ba  00000000  00000000  00029d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aac2  00000000  00000000  0002a222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008d6d  00000000  00000000  00044ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bebf  00000000  00000000  0004da51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001d18  00000000  00000000  000e9910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  000eb628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800346c 	.word	0x0800346c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	0800346c 	.word	0x0800346c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b090      	sub	sp, #64	; 0x40
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fa8f 	bl	80007a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f84b 	bl	8000324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 f8bb 	bl	8000408 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000292:	f000 f889 	bl	80003a8 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  detect(detect_states);
 8000296:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800029a:	4618      	mov	r0, r3
 800029c:	f000 f944 	bl	8000528 <detect>

	          /* Sprawdź każdą linię i wysyłaj odpowiednie wiadomości przez UART */
	          for (int i = 0; i < 5; i++)
 80002a0:	2300      	movs	r3, #0
 80002a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80002a4:	e030      	b.n	8000308 <main+0x88>
	          {
	              if (detect_states[i] == GPIO_PIN_SET)
 80002a6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80002aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80002ac:	4413      	add	r3, r2
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	2b01      	cmp	r3, #1
 80002b2:	d113      	bne.n	80002dc <main+0x5c>
	              {
	                  // Przygotuj wiadomość o wykryciu linii
	                  char message[50];
	                  snprintf(message, sizeof(message), "Wykryto linię %d\r\n", i + 1);
 80002b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80002b6:	3301      	adds	r3, #1
 80002b8:	4638      	mov	r0, r7
 80002ba:	4a17      	ldr	r2, [pc, #92]	; (8000318 <main+0x98>)
 80002bc:	2132      	movs	r1, #50	; 0x32
 80002be:	f002 fc1d 	bl	8002afc <sniprintf>

	                  // Wyślij wiadomość przez interfejs UART
	                  HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80002c2:	463b      	mov	r3, r7
 80002c4:	4618      	mov	r0, r3
 80002c6:	f7ff ff83 	bl	80001d0 <strlen>
 80002ca:	4603      	mov	r3, r0
 80002cc:	b29a      	uxth	r2, r3
 80002ce:	4639      	mov	r1, r7
 80002d0:	f04f 33ff 	mov.w	r3, #4294967295
 80002d4:	4811      	ldr	r0, [pc, #68]	; (800031c <main+0x9c>)
 80002d6:	f002 f83b 	bl	8002350 <HAL_UART_Transmit>
 80002da:	e012      	b.n	8000302 <main+0x82>
	              }
	              else
	              {
	                  // Przygotuj wiadomość o braku wykrycia linii
	                  char message[50];
	                  snprintf(message, sizeof(message), "Nie wykryto linii %d\r\n", i + 1);
 80002dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80002de:	3301      	adds	r3, #1
 80002e0:	4638      	mov	r0, r7
 80002e2:	4a0f      	ldr	r2, [pc, #60]	; (8000320 <main+0xa0>)
 80002e4:	2132      	movs	r1, #50	; 0x32
 80002e6:	f002 fc09 	bl	8002afc <sniprintf>

	                  // Wyślij wiadomość przez interfejs UART
	                  HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80002ea:	463b      	mov	r3, r7
 80002ec:	4618      	mov	r0, r3
 80002ee:	f7ff ff6f 	bl	80001d0 <strlen>
 80002f2:	4603      	mov	r3, r0
 80002f4:	b29a      	uxth	r2, r3
 80002f6:	4639      	mov	r1, r7
 80002f8:	f04f 33ff 	mov.w	r3, #4294967295
 80002fc:	4807      	ldr	r0, [pc, #28]	; (800031c <main+0x9c>)
 80002fe:	f002 f827 	bl	8002350 <HAL_UART_Transmit>
	          for (int i = 0; i < 5; i++)
 8000302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000304:	3301      	adds	r3, #1
 8000306:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800030a:	2b04      	cmp	r3, #4
 800030c:	ddcb      	ble.n	80002a6 <main+0x26>
	              }
	          }

	          /* Odczekaj przed kolejnym sprawdzeniem stanu pinów */
	          HAL_Delay(1000); // Opóźnienie 1 sekundy
 800030e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000312:	f000 faaf 	bl	8000874 <HAL_Delay>
	  detect(detect_states);
 8000316:	e7be      	b.n	8000296 <main+0x16>
 8000318:	08003484 	.word	0x08003484
 800031c:	20000078 	.word	0x20000078
 8000320:	08003498 	.word	0x08003498

08000324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b090      	sub	sp, #64	; 0x40
 8000328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032a:	f107 0318 	add.w	r3, r7, #24
 800032e:	2228      	movs	r2, #40	; 0x28
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f002 fc16 	bl	8002b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]
 8000340:	609a      	str	r2, [r3, #8]
 8000342:	60da      	str	r2, [r3, #12]
 8000344:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000346:	2302      	movs	r3, #2
 8000348:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034a:	2301      	movs	r3, #1
 800034c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800034e:	2310      	movs	r3, #16
 8000350:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000352:	2302      	movs	r3, #2
 8000354:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000356:	2300      	movs	r3, #0
 8000358:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800035a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800035e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000360:	f107 0318 	add.w	r3, r7, #24
 8000364:	4618      	mov	r0, r3
 8000366:	f000 fd31 	bl	8000dcc <HAL_RCC_OscConfig>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000370:	f000 f912 	bl	8000598 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000374:	230f      	movs	r3, #15
 8000376:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000378:	2302      	movs	r3, #2
 800037a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037c:	2300      	movs	r3, #0
 800037e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000380:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000384:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000386:	2300      	movs	r3, #0
 8000388:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2102      	movs	r1, #2
 800038e:	4618      	mov	r0, r3
 8000390:	f001 fd5a 	bl	8001e48 <HAL_RCC_ClockConfig>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800039a:	f000 f8fd 	bl	8000598 <Error_Handler>
  }
}
 800039e:	bf00      	nop
 80003a0:	3740      	adds	r7, #64	; 0x40
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
	...

080003a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003ac:	4b14      	ldr	r3, [pc, #80]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003ae:	4a15      	ldr	r2, [pc, #84]	; (8000404 <MX_USART2_UART_Init+0x5c>)
 80003b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003b4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80003b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ba:	4b11      	ldr	r3, [pc, #68]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003c0:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003ce:	220c      	movs	r2, #12
 80003d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d8:	4b09      	ldr	r3, [pc, #36]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003da:	2200      	movs	r2, #0
 80003dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003e4:	4b06      	ldr	r3, [pc, #24]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003ea:	4805      	ldr	r0, [pc, #20]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003ec:	f001 ff62 	bl	80022b4 <HAL_UART_Init>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003f6:	f000 f8cf 	bl	8000598 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	20000078 	.word	0x20000078
 8000404:	40004400 	.word	0x40004400

08000408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b08a      	sub	sp, #40	; 0x28
 800040c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040e:	f107 0314 	add.w	r3, r7, #20
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]
 800041c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800041e:	4b3f      	ldr	r3, [pc, #252]	; (800051c <MX_GPIO_Init+0x114>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	4a3e      	ldr	r2, [pc, #248]	; (800051c <MX_GPIO_Init+0x114>)
 8000424:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000428:	6153      	str	r3, [r2, #20]
 800042a:	4b3c      	ldr	r3, [pc, #240]	; (800051c <MX_GPIO_Init+0x114>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000432:	613b      	str	r3, [r7, #16]
 8000434:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000436:	4b39      	ldr	r3, [pc, #228]	; (800051c <MX_GPIO_Init+0x114>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a38      	ldr	r2, [pc, #224]	; (800051c <MX_GPIO_Init+0x114>)
 800043c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000440:	6153      	str	r3, [r2, #20]
 8000442:	4b36      	ldr	r3, [pc, #216]	; (800051c <MX_GPIO_Init+0x114>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800044e:	4b33      	ldr	r3, [pc, #204]	; (800051c <MX_GPIO_Init+0x114>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	4a32      	ldr	r2, [pc, #200]	; (800051c <MX_GPIO_Init+0x114>)
 8000454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000458:	6153      	str	r3, [r2, #20]
 800045a:	4b30      	ldr	r3, [pc, #192]	; (800051c <MX_GPIO_Init+0x114>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000462:	60bb      	str	r3, [r7, #8]
 8000464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000466:	4b2d      	ldr	r3, [pc, #180]	; (800051c <MX_GPIO_Init+0x114>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	4a2c      	ldr	r2, [pc, #176]	; (800051c <MX_GPIO_Init+0x114>)
 800046c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000470:	6153      	str	r3, [r2, #20]
 8000472:	4b2a      	ldr	r3, [pc, #168]	; (800051c <MX_GPIO_Init+0x114>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000484:	4826      	ldr	r0, [pc, #152]	; (8000520 <MX_GPIO_Init+0x118>)
 8000486:	f000 fc89 	bl	8000d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800048a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800048e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000490:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000496:	2300      	movs	r3, #0
 8000498:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800049a:	f107 0314 	add.w	r3, r7, #20
 800049e:	4619      	mov	r1, r3
 80004a0:	4820      	ldr	r0, [pc, #128]	; (8000524 <MX_GPIO_Init+0x11c>)
 80004a2:	f000 faf1 	bl	8000a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : DETECT5_Pin DETECT1_Pin DETECT2_Pin */
  GPIO_InitStruct.Pin = DETECT5_Pin|DETECT1_Pin|DETECT2_Pin;
 80004a6:	f241 4304 	movw	r3, #5124	; 0x1404
 80004aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ac:	2300      	movs	r3, #0
 80004ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b0:	2300      	movs	r3, #0
 80004b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004b4:	f107 0314 	add.w	r3, r7, #20
 80004b8:	4619      	mov	r1, r3
 80004ba:	481a      	ldr	r0, [pc, #104]	; (8000524 <MX_GPIO_Init+0x11c>)
 80004bc:	f000 fae4 	bl	8000a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c6:	2301      	movs	r3, #1
 80004c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ca:	2300      	movs	r3, #0
 80004cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ce:	2300      	movs	r3, #0
 80004d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004d2:	f107 0314 	add.w	r3, r7, #20
 80004d6:	4619      	mov	r1, r3
 80004d8:	4811      	ldr	r0, [pc, #68]	; (8000520 <MX_GPIO_Init+0x118>)
 80004da:	f000 fad5 	bl	8000a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : DETECT3_Pin */
  GPIO_InitStruct.Pin = DETECT3_Pin;
 80004de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e4:	2300      	movs	r3, #0
 80004e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e8:	2300      	movs	r3, #0
 80004ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DETECT3_GPIO_Port, &GPIO_InitStruct);
 80004ec:	f107 0314 	add.w	r3, r7, #20
 80004f0:	4619      	mov	r1, r3
 80004f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f6:	f000 fac7 	bl	8000a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : DETECT4_Pin */
  GPIO_InitStruct.Pin = DETECT4_Pin;
 80004fa:	2380      	movs	r3, #128	; 0x80
 80004fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004fe:	2300      	movs	r3, #0
 8000500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	2300      	movs	r3, #0
 8000504:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DETECT4_GPIO_Port, &GPIO_InitStruct);
 8000506:	f107 0314 	add.w	r3, r7, #20
 800050a:	4619      	mov	r1, r3
 800050c:	4804      	ldr	r0, [pc, #16]	; (8000520 <MX_GPIO_Init+0x118>)
 800050e:	f000 fabb 	bl	8000a88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000512:	bf00      	nop
 8000514:	3728      	adds	r7, #40	; 0x28
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40021000 	.word	0x40021000
 8000520:	48000400 	.word	0x48000400
 8000524:	48000800 	.word	0x48000800

08000528 <detect>:

/* USER CODE BEGIN 4 */

void detect(uint8_t *detect_states) { //wykrywanie linii
 8000528:	b590      	push	{r4, r7, lr}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
    detect_states[0] = HAL_GPIO_ReadPin(DETECT1_GPIO_Port, DETECT1_Pin);
 8000530:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000534:	4816      	ldr	r0, [pc, #88]	; (8000590 <detect+0x68>)
 8000536:	f000 fc19 	bl	8000d6c <HAL_GPIO_ReadPin>
 800053a:	4603      	mov	r3, r0
 800053c:	461a      	mov	r2, r3
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	701a      	strb	r2, [r3, #0]
    detect_states[1] = HAL_GPIO_ReadPin(DETECT2_GPIO_Port, DETECT2_Pin);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	1c5c      	adds	r4, r3, #1
 8000546:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800054a:	4811      	ldr	r0, [pc, #68]	; (8000590 <detect+0x68>)
 800054c:	f000 fc0e 	bl	8000d6c <HAL_GPIO_ReadPin>
 8000550:	4603      	mov	r3, r0
 8000552:	7023      	strb	r3, [r4, #0]
    detect_states[2] = HAL_GPIO_ReadPin(DETECT3_GPIO_Port, DETECT3_Pin);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	1c9c      	adds	r4, r3, #2
 8000558:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800055c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000560:	f000 fc04 	bl	8000d6c <HAL_GPIO_ReadPin>
 8000564:	4603      	mov	r3, r0
 8000566:	7023      	strb	r3, [r4, #0]
    detect_states[3] = HAL_GPIO_ReadPin(DETECT4_GPIO_Port, DETECT4_Pin);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	1cdc      	adds	r4, r3, #3
 800056c:	2180      	movs	r1, #128	; 0x80
 800056e:	4809      	ldr	r0, [pc, #36]	; (8000594 <detect+0x6c>)
 8000570:	f000 fbfc 	bl	8000d6c <HAL_GPIO_ReadPin>
 8000574:	4603      	mov	r3, r0
 8000576:	7023      	strb	r3, [r4, #0]
    detect_states[4] = HAL_GPIO_ReadPin(DETECT5_GPIO_Port, DETECT5_Pin);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	1d1c      	adds	r4, r3, #4
 800057c:	2104      	movs	r1, #4
 800057e:	4804      	ldr	r0, [pc, #16]	; (8000590 <detect+0x68>)
 8000580:	f000 fbf4 	bl	8000d6c <HAL_GPIO_ReadPin>
 8000584:	4603      	mov	r3, r0
 8000586:	7023      	strb	r3, [r4, #0]
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	bd90      	pop	{r4, r7, pc}
 8000590:	48000800 	.word	0x48000800
 8000594:	48000400 	.word	0x48000400

08000598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800059c:	b672      	cpsid	i
}
 800059e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <Error_Handler+0x8>
	...

080005a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005aa:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <HAL_MspInit+0x44>)
 80005ac:	699b      	ldr	r3, [r3, #24]
 80005ae:	4a0e      	ldr	r2, [pc, #56]	; (80005e8 <HAL_MspInit+0x44>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6193      	str	r3, [r2, #24]
 80005b6:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <HAL_MspInit+0x44>)
 80005b8:	699b      	ldr	r3, [r3, #24]
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c2:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <HAL_MspInit+0x44>)
 80005c4:	69db      	ldr	r3, [r3, #28]
 80005c6:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <HAL_MspInit+0x44>)
 80005c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005cc:	61d3      	str	r3, [r2, #28]
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_MspInit+0x44>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005da:	2007      	movs	r0, #7
 80005dc:	f000 fa20 	bl	8000a20 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40021000 	.word	0x40021000

080005ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	; 0x28
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f4:	f107 0314 	add.w	r3, r7, #20
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a17      	ldr	r2, [pc, #92]	; (8000668 <HAL_UART_MspInit+0x7c>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d128      	bne.n	8000660 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800060e:	4b17      	ldr	r3, [pc, #92]	; (800066c <HAL_UART_MspInit+0x80>)
 8000610:	69db      	ldr	r3, [r3, #28]
 8000612:	4a16      	ldr	r2, [pc, #88]	; (800066c <HAL_UART_MspInit+0x80>)
 8000614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000618:	61d3      	str	r3, [r2, #28]
 800061a:	4b14      	ldr	r3, [pc, #80]	; (800066c <HAL_UART_MspInit+0x80>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000622:	613b      	str	r3, [r7, #16]
 8000624:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <HAL_UART_MspInit+0x80>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	4a10      	ldr	r2, [pc, #64]	; (800066c <HAL_UART_MspInit+0x80>)
 800062c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000630:	6153      	str	r3, [r2, #20]
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <HAL_UART_MspInit+0x80>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800063e:	230c      	movs	r3, #12
 8000640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000642:	2302      	movs	r3, #2
 8000644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064a:	2300      	movs	r3, #0
 800064c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800064e:	2307      	movs	r3, #7
 8000650:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	4619      	mov	r1, r3
 8000658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065c:	f000 fa14 	bl	8000a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000660:	bf00      	nop
 8000662:	3728      	adds	r7, #40	; 0x28
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40004400 	.word	0x40004400
 800066c:	40021000 	.word	0x40021000

08000670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000674:	e7fe      	b.n	8000674 <NMI_Handler+0x4>

08000676 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800067a:	e7fe      	b.n	800067a <HardFault_Handler+0x4>

0800067c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000680:	e7fe      	b.n	8000680 <MemManage_Handler+0x4>

08000682 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000686:	e7fe      	b.n	8000686 <BusFault_Handler+0x4>

08000688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800068c:	e7fe      	b.n	800068c <UsageFault_Handler+0x4>

0800068e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr

080006aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006bc:	f000 f8ba 	bl	8000834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006cc:	4a14      	ldr	r2, [pc, #80]	; (8000720 <_sbrk+0x5c>)
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <_sbrk+0x60>)
 80006d0:	1ad3      	subs	r3, r2, r3
 80006d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006d8:	4b13      	ldr	r3, [pc, #76]	; (8000728 <_sbrk+0x64>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d102      	bne.n	80006e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <_sbrk+0x64>)
 80006e2:	4a12      	ldr	r2, [pc, #72]	; (800072c <_sbrk+0x68>)
 80006e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <_sbrk+0x64>)
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4413      	add	r3, r2
 80006ee:	693a      	ldr	r2, [r7, #16]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d207      	bcs.n	8000704 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006f4:	f002 fa3e 	bl	8002b74 <__errno>
 80006f8:	4603      	mov	r3, r0
 80006fa:	220c      	movs	r2, #12
 80006fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000702:	e009      	b.n	8000718 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000704:	4b08      	ldr	r3, [pc, #32]	; (8000728 <_sbrk+0x64>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800070a:	4b07      	ldr	r3, [pc, #28]	; (8000728 <_sbrk+0x64>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4413      	add	r3, r2
 8000712:	4a05      	ldr	r2, [pc, #20]	; (8000728 <_sbrk+0x64>)
 8000714:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000716:	68fb      	ldr	r3, [r7, #12]
}
 8000718:	4618      	mov	r0, r3
 800071a:	3718      	adds	r7, #24
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20004000 	.word	0x20004000
 8000724:	00000400 	.word	0x00000400
 8000728:	20000100 	.word	0x20000100
 800072c:	20000250 	.word	0x20000250

08000730 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <SystemInit+0x20>)
 8000736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800073a:	4a05      	ldr	r2, [pc, #20]	; (8000750 <SystemInit+0x20>)
 800073c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000ed00 	.word	0xe000ed00

08000754 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000754:	f8df d034 	ldr.w	sp, [pc, #52]	; 800078c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000758:	f7ff ffea 	bl	8000730 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800075c:	480c      	ldr	r0, [pc, #48]	; (8000790 <LoopForever+0x6>)
  ldr r1, =_edata
 800075e:	490d      	ldr	r1, [pc, #52]	; (8000794 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000760:	4a0d      	ldr	r2, [pc, #52]	; (8000798 <LoopForever+0xe>)
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000764:	e002      	b.n	800076c <LoopCopyDataInit>

08000766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076a:	3304      	adds	r3, #4

0800076c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800076c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800076e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000770:	d3f9      	bcc.n	8000766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000772:	4a0a      	ldr	r2, [pc, #40]	; (800079c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000774:	4c0a      	ldr	r4, [pc, #40]	; (80007a0 <LoopForever+0x16>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000778:	e001      	b.n	800077e <LoopFillZerobss>

0800077a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800077c:	3204      	adds	r2, #4

0800077e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800077e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000780:	d3fb      	bcc.n	800077a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000782:	f002 f9fd 	bl	8002b80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000786:	f7ff fd7b 	bl	8000280 <main>

0800078a <LoopForever>:

LoopForever:
    b LoopForever
 800078a:	e7fe      	b.n	800078a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800078c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000794:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000798:	08003524 	.word	0x08003524
  ldr r2, =_sbss
 800079c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80007a0:	20000250 	.word	0x20000250

080007a4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007a4:	e7fe      	b.n	80007a4 <ADC1_IRQHandler>
	...

080007a8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <HAL_Init+0x28>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a07      	ldr	r2, [pc, #28]	; (80007d0 <HAL_Init+0x28>)
 80007b2:	f043 0310 	orr.w	r3, r3, #16
 80007b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b8:	2003      	movs	r0, #3
 80007ba:	f000 f931 	bl	8000a20 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007be:	2000      	movs	r0, #0
 80007c0:	f000 f808 	bl	80007d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007c4:	f7ff feee 	bl	80005a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007c8:	2300      	movs	r3, #0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40022000 	.word	0x40022000

080007d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <HAL_InitTick+0x54>)
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <HAL_InitTick+0x58>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	4619      	mov	r1, r3
 80007e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 f93b 	bl	8000a6e <HAL_SYSTICK_Config>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
 8000800:	e00e      	b.n	8000820 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2b0f      	cmp	r3, #15
 8000806:	d80a      	bhi.n	800081e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000808:	2200      	movs	r2, #0
 800080a:	6879      	ldr	r1, [r7, #4]
 800080c:	f04f 30ff 	mov.w	r0, #4294967295
 8000810:	f000 f911 	bl	8000a36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000814:	4a06      	ldr	r2, [pc, #24]	; (8000830 <HAL_InitTick+0x5c>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800081a:	2300      	movs	r3, #0
 800081c:	e000      	b.n	8000820 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800081e:	2301      	movs	r3, #1
}
 8000820:	4618      	mov	r0, r3
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000000 	.word	0x20000000
 800082c:	20000008 	.word	0x20000008
 8000830:	20000004 	.word	0x20000004

08000834 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <HAL_IncTick+0x20>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	461a      	mov	r2, r3
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <HAL_IncTick+0x24>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4413      	add	r3, r2
 8000844:	4a04      	ldr	r2, [pc, #16]	; (8000858 <HAL_IncTick+0x24>)
 8000846:	6013      	str	r3, [r2, #0]
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	20000008 	.word	0x20000008
 8000858:	20000104 	.word	0x20000104

0800085c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000860:	4b03      	ldr	r3, [pc, #12]	; (8000870 <HAL_GetTick+0x14>)
 8000862:	681b      	ldr	r3, [r3, #0]
}
 8000864:	4618      	mov	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	20000104 	.word	0x20000104

08000874 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800087c:	f7ff ffee 	bl	800085c <HAL_GetTick>
 8000880:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800088c:	d005      	beq.n	800089a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800088e:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <HAL_Delay+0x44>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	461a      	mov	r2, r3
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	4413      	add	r3, r2
 8000898:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800089a:	bf00      	nop
 800089c:	f7ff ffde 	bl	800085c <HAL_GetTick>
 80008a0:	4602      	mov	r2, r0
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	68fa      	ldr	r2, [r7, #12]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d8f7      	bhi.n	800089c <HAL_Delay+0x28>
  {
  }
}
 80008ac:	bf00      	nop
 80008ae:	bf00      	nop
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000008 	.word	0x20000008

080008bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	f003 0307 	and.w	r3, r3, #7
 80008ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <__NVIC_SetPriorityGrouping+0x44>)
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008d8:	4013      	ands	r3, r2
 80008da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ee:	4a04      	ldr	r2, [pc, #16]	; (8000900 <__NVIC_SetPriorityGrouping+0x44>)
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	60d3      	str	r3, [r2, #12]
}
 80008f4:	bf00      	nop
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000908:	4b04      	ldr	r3, [pc, #16]	; (800091c <__NVIC_GetPriorityGrouping+0x18>)
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	0a1b      	lsrs	r3, r3, #8
 800090e:	f003 0307 	and.w	r3, r3, #7
}
 8000912:	4618      	mov	r0, r3
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	6039      	str	r1, [r7, #0]
 800092a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800092c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000930:	2b00      	cmp	r3, #0
 8000932:	db0a      	blt.n	800094a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	b2da      	uxtb	r2, r3
 8000938:	490c      	ldr	r1, [pc, #48]	; (800096c <__NVIC_SetPriority+0x4c>)
 800093a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093e:	0112      	lsls	r2, r2, #4
 8000940:	b2d2      	uxtb	r2, r2
 8000942:	440b      	add	r3, r1
 8000944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000948:	e00a      	b.n	8000960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	b2da      	uxtb	r2, r3
 800094e:	4908      	ldr	r1, [pc, #32]	; (8000970 <__NVIC_SetPriority+0x50>)
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	f003 030f 	and.w	r3, r3, #15
 8000956:	3b04      	subs	r3, #4
 8000958:	0112      	lsls	r2, r2, #4
 800095a:	b2d2      	uxtb	r2, r2
 800095c:	440b      	add	r3, r1
 800095e:	761a      	strb	r2, [r3, #24]
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	e000e100 	.word	0xe000e100
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000974:	b480      	push	{r7}
 8000976:	b089      	sub	sp, #36	; 0x24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	f1c3 0307 	rsb	r3, r3, #7
 800098e:	2b04      	cmp	r3, #4
 8000990:	bf28      	it	cs
 8000992:	2304      	movcs	r3, #4
 8000994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	3304      	adds	r3, #4
 800099a:	2b06      	cmp	r3, #6
 800099c:	d902      	bls.n	80009a4 <NVIC_EncodePriority+0x30>
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	3b03      	subs	r3, #3
 80009a2:	e000      	b.n	80009a6 <NVIC_EncodePriority+0x32>
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a8:	f04f 32ff 	mov.w	r2, #4294967295
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	43da      	mvns	r2, r3
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	401a      	ands	r2, r3
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009bc:	f04f 31ff 	mov.w	r1, #4294967295
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	fa01 f303 	lsl.w	r3, r1, r3
 80009c6:	43d9      	mvns	r1, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009cc:	4313      	orrs	r3, r2
         );
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3724      	adds	r7, #36	; 0x24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
	...

080009dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009ec:	d301      	bcc.n	80009f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ee:	2301      	movs	r3, #1
 80009f0:	e00f      	b.n	8000a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009f2:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <SysTick_Config+0x40>)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009fa:	210f      	movs	r1, #15
 80009fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000a00:	f7ff ff8e 	bl	8000920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a04:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <SysTick_Config+0x40>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a0a:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <SysTick_Config+0x40>)
 8000a0c:	2207      	movs	r2, #7
 8000a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	e000e010 	.word	0xe000e010

08000a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f7ff ff47 	bl	80008bc <__NVIC_SetPriorityGrouping>
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b086      	sub	sp, #24
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	60b9      	str	r1, [r7, #8]
 8000a40:	607a      	str	r2, [r7, #4]
 8000a42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a48:	f7ff ff5c 	bl	8000904 <__NVIC_GetPriorityGrouping>
 8000a4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	68b9      	ldr	r1, [r7, #8]
 8000a52:	6978      	ldr	r0, [r7, #20]
 8000a54:	f7ff ff8e 	bl	8000974 <NVIC_EncodePriority>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ff5d 	bl	8000920 <__NVIC_SetPriority>
}
 8000a66:	bf00      	nop
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f7ff ffb0 	bl	80009dc <SysTick_Config>
 8000a7c:	4603      	mov	r3, r0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b087      	sub	sp, #28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a96:	e14e      	b.n	8000d36 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	f000 8140 	beq.w	8000d30 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f003 0303 	and.w	r3, r3, #3
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d005      	beq.n	8000ac8 <HAL_GPIO_Init+0x40>
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f003 0303 	and.w	r3, r3, #3
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d130      	bne.n	8000b2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	2203      	movs	r2, #3
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	4013      	ands	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	68da      	ldr	r2, [r3, #12]
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000afe:	2201      	movs	r2, #1
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	43db      	mvns	r3, r3
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	091b      	lsrs	r3, r3, #4
 8000b14:	f003 0201 	and.w	r2, r3, #1
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f003 0303 	and.w	r3, r3, #3
 8000b32:	2b03      	cmp	r3, #3
 8000b34:	d017      	beq.n	8000b66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	2203      	movs	r2, #3
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	43db      	mvns	r3, r3
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	689a      	ldr	r2, [r3, #8]
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f003 0303 	and.w	r3, r3, #3
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	d123      	bne.n	8000bba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	08da      	lsrs	r2, r3, #3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	3208      	adds	r2, #8
 8000b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	220f      	movs	r2, #15
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	691a      	ldr	r2, [r3, #16]
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	f003 0307 	and.w	r3, r3, #7
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	08da      	lsrs	r2, r3, #3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3208      	adds	r2, #8
 8000bb4:	6939      	ldr	r1, [r7, #16]
 8000bb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f003 0203 	and.w	r2, r3, #3
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f000 809a 	beq.w	8000d30 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfc:	4b55      	ldr	r3, [pc, #340]	; (8000d54 <HAL_GPIO_Init+0x2cc>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	4a54      	ldr	r2, [pc, #336]	; (8000d54 <HAL_GPIO_Init+0x2cc>)
 8000c02:	f043 0301 	orr.w	r3, r3, #1
 8000c06:	6193      	str	r3, [r2, #24]
 8000c08:	4b52      	ldr	r3, [pc, #328]	; (8000d54 <HAL_GPIO_Init+0x2cc>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c14:	4a50      	ldr	r2, [pc, #320]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	089b      	lsrs	r3, r3, #2
 8000c1a:	3302      	adds	r3, #2
 8000c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	f003 0303 	and.w	r3, r3, #3
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	220f      	movs	r2, #15
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	43db      	mvns	r3, r3
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	4013      	ands	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c3e:	d013      	beq.n	8000c68 <HAL_GPIO_Init+0x1e0>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a46      	ldr	r2, [pc, #280]	; (8000d5c <HAL_GPIO_Init+0x2d4>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d00d      	beq.n	8000c64 <HAL_GPIO_Init+0x1dc>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a45      	ldr	r2, [pc, #276]	; (8000d60 <HAL_GPIO_Init+0x2d8>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d007      	beq.n	8000c60 <HAL_GPIO_Init+0x1d8>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a44      	ldr	r2, [pc, #272]	; (8000d64 <HAL_GPIO_Init+0x2dc>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d101      	bne.n	8000c5c <HAL_GPIO_Init+0x1d4>
 8000c58:	2303      	movs	r3, #3
 8000c5a:	e006      	b.n	8000c6a <HAL_GPIO_Init+0x1e2>
 8000c5c:	2305      	movs	r3, #5
 8000c5e:	e004      	b.n	8000c6a <HAL_GPIO_Init+0x1e2>
 8000c60:	2302      	movs	r3, #2
 8000c62:	e002      	b.n	8000c6a <HAL_GPIO_Init+0x1e2>
 8000c64:	2301      	movs	r3, #1
 8000c66:	e000      	b.n	8000c6a <HAL_GPIO_Init+0x1e2>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	697a      	ldr	r2, [r7, #20]
 8000c6c:	f002 0203 	and.w	r2, r2, #3
 8000c70:	0092      	lsls	r2, r2, #2
 8000c72:	4093      	lsls	r3, r2
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c7a:	4937      	ldr	r1, [pc, #220]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	089b      	lsrs	r3, r3, #2
 8000c80:	3302      	adds	r3, #2
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c88:	4b37      	ldr	r3, [pc, #220]	; (8000d68 <HAL_GPIO_Init+0x2e0>)
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	43db      	mvns	r3, r3
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4013      	ands	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d003      	beq.n	8000cac <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cac:	4a2e      	ldr	r2, [pc, #184]	; (8000d68 <HAL_GPIO_Init+0x2e0>)
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cb2:	4b2d      	ldr	r3, [pc, #180]	; (8000d68 <HAL_GPIO_Init+0x2e0>)
 8000cb4:	68db      	ldr	r3, [r3, #12]
 8000cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	43db      	mvns	r3, r3
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d003      	beq.n	8000cd6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cd6:	4a24      	ldr	r2, [pc, #144]	; (8000d68 <HAL_GPIO_Init+0x2e0>)
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000cdc:	4b22      	ldr	r3, [pc, #136]	; (8000d68 <HAL_GPIO_Init+0x2e0>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d003      	beq.n	8000d00 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d00:	4a19      	ldr	r2, [pc, #100]	; (8000d68 <HAL_GPIO_Init+0x2e0>)
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <HAL_GPIO_Init+0x2e0>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d003      	beq.n	8000d2a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d2a:	4a0f      	ldr	r2, [pc, #60]	; (8000d68 <HAL_GPIO_Init+0x2e0>)
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	3301      	adds	r3, #1
 8000d34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	f47f aea9 	bne.w	8000a98 <HAL_GPIO_Init+0x10>
  }
}
 8000d46:	bf00      	nop
 8000d48:	bf00      	nop
 8000d4a:	371c      	adds	r7, #28
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	40021000 	.word	0x40021000
 8000d58:	40010000 	.word	0x40010000
 8000d5c:	48000400 	.word	0x48000400
 8000d60:	48000800 	.word	0x48000800
 8000d64:	48000c00 	.word	0x48000c00
 8000d68:	40010400 	.word	0x40010400

08000d6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	460b      	mov	r3, r1
 8000d76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	691a      	ldr	r2, [r3, #16]
 8000d7c:	887b      	ldrh	r3, [r7, #2]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d002      	beq.n	8000d8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d84:	2301      	movs	r3, #1
 8000d86:	73fb      	strb	r3, [r7, #15]
 8000d88:	e001      	b.n	8000d8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	460b      	mov	r3, r1
 8000da6:	807b      	strh	r3, [r7, #2]
 8000da8:	4613      	mov	r3, r2
 8000daa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dac:	787b      	ldrb	r3, [r7, #1]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d003      	beq.n	8000dba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000db2:	887a      	ldrh	r2, [r7, #2]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000db8:	e002      	b.n	8000dc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dba:	887a      	ldrh	r2, [r7, #2]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ddc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000de2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d102      	bne.n	8000df2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	f001 b823 	b.w	8001e38 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000df6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f000 817d 	beq.w	8001102 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e08:	4bbc      	ldr	r3, [pc, #752]	; (80010fc <HAL_RCC_OscConfig+0x330>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 030c 	and.w	r3, r3, #12
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	d00c      	beq.n	8000e2e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e14:	4bb9      	ldr	r3, [pc, #740]	; (80010fc <HAL_RCC_OscConfig+0x330>)
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 030c 	and.w	r3, r3, #12
 8000e1c:	2b08      	cmp	r3, #8
 8000e1e:	d15c      	bne.n	8000eda <HAL_RCC_OscConfig+0x10e>
 8000e20:	4bb6      	ldr	r3, [pc, #728]	; (80010fc <HAL_RCC_OscConfig+0x330>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e2c:	d155      	bne.n	8000eda <HAL_RCC_OscConfig+0x10e>
 8000e2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e32:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e36:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000e3a:	fa93 f3a3 	rbit	r3, r3
 8000e3e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e42:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e46:	fab3 f383 	clz	r3, r3
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	095b      	lsrs	r3, r3, #5
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d102      	bne.n	8000e60 <HAL_RCC_OscConfig+0x94>
 8000e5a:	4ba8      	ldr	r3, [pc, #672]	; (80010fc <HAL_RCC_OscConfig+0x330>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	e015      	b.n	8000e8c <HAL_RCC_OscConfig+0xc0>
 8000e60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e64:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e68:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000e6c:	fa93 f3a3 	rbit	r3, r3
 8000e70:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e78:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e7c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000e80:	fa93 f3a3 	rbit	r3, r3
 8000e84:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000e88:	4b9c      	ldr	r3, [pc, #624]	; (80010fc <HAL_RCC_OscConfig+0x330>)
 8000e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e90:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000e94:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e98:	fa92 f2a2 	rbit	r2, r2
 8000e9c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000ea0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000ea4:	fab2 f282 	clz	r2, r2
 8000ea8:	b2d2      	uxtb	r2, r2
 8000eaa:	f042 0220 	orr.w	r2, r2, #32
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	f002 021f 	and.w	r2, r2, #31
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eba:	4013      	ands	r3, r2
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f000 811f 	beq.w	8001100 <HAL_RCC_OscConfig+0x334>
 8000ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ec6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	f040 8116 	bne.w	8001100 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	f000 bfaf 	b.w	8001e38 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ede:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eea:	d106      	bne.n	8000efa <HAL_RCC_OscConfig+0x12e>
 8000eec:	4b83      	ldr	r3, [pc, #524]	; (80010fc <HAL_RCC_OscConfig+0x330>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a82      	ldr	r2, [pc, #520]	; (80010fc <HAL_RCC_OscConfig+0x330>)
 8000ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	e036      	b.n	8000f68 <HAL_RCC_OscConfig+0x19c>
 8000efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000efe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d10c      	bne.n	8000f24 <HAL_RCC_OscConfig+0x158>
 8000f0a:	4b7c      	ldr	r3, [pc, #496]	; (80010fc <HAL_RCC_OscConfig+0x330>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a7b      	ldr	r2, [pc, #492]	; (80010fc <HAL_RCC_OscConfig+0x330>)
 8000f10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f14:	6013      	str	r3, [r2, #0]
 8000f16:	4b79      	ldr	r3, [pc, #484]	; (80010fc <HAL_RCC_OscConfig+0x330>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a78      	ldr	r2, [pc, #480]	; (80010fc <HAL_RCC_OscConfig+0x330>)
 8000f1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f20:	6013      	str	r3, [r2, #0]
 8000f22:	e021      	b.n	8000f68 <HAL_RCC_OscConfig+0x19c>
 8000f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f34:	d10c      	bne.n	8000f50 <HAL_RCC_OscConfig+0x184>
 8000f36:	4b71      	ldr	r3, [pc, #452]	; (80010fc <HAL_RCC_OscConfig+0x330>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a70      	ldr	r2, [pc, #448]	; (80010fc <HAL_RCC_OscConfig+0x330>)
 8000f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	4b6e      	ldr	r3, [pc, #440]	; (80010fc <HAL_RCC_OscConfig+0x330>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a6d      	ldr	r2, [pc, #436]	; (80010fc <HAL_RCC_OscConfig+0x330>)
 8000f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f4c:	6013      	str	r3, [r2, #0]
 8000f4e:	e00b      	b.n	8000f68 <HAL_RCC_OscConfig+0x19c>
 8000f50:	4b6a      	ldr	r3, [pc, #424]	; (80010fc <HAL_RCC_OscConfig+0x330>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a69      	ldr	r2, [pc, #420]	; (80010fc <HAL_RCC_OscConfig+0x330>)
 8000f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	4b67      	ldr	r3, [pc, #412]	; (80010fc <HAL_RCC_OscConfig+0x330>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a66      	ldr	r2, [pc, #408]	; (80010fc <HAL_RCC_OscConfig+0x330>)
 8000f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f66:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f68:	4b64      	ldr	r3, [pc, #400]	; (80010fc <HAL_RCC_OscConfig+0x330>)
 8000f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f6c:	f023 020f 	bic.w	r2, r3, #15
 8000f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	495f      	ldr	r1, [pc, #380]	; (80010fc <HAL_RCC_OscConfig+0x330>)
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d059      	beq.n	8001046 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f92:	f7ff fc63 	bl	800085c <HAL_GetTick>
 8000f96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f9a:	e00a      	b.n	8000fb2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f9c:	f7ff fc5e 	bl	800085c <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	2b64      	cmp	r3, #100	; 0x64
 8000faa:	d902      	bls.n	8000fb2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000fac:	2303      	movs	r3, #3
 8000fae:	f000 bf43 	b.w	8001e38 <HAL_RCC_OscConfig+0x106c>
 8000fb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fb6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fba:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000fbe:	fa93 f3a3 	rbit	r3, r3
 8000fc2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000fc6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fca:	fab3 f383 	clz	r3, r3
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	095b      	lsrs	r3, r3, #5
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d102      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x218>
 8000fde:	4b47      	ldr	r3, [pc, #284]	; (80010fc <HAL_RCC_OscConfig+0x330>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	e015      	b.n	8001010 <HAL_RCC_OscConfig+0x244>
 8000fe4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fe8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fec:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000ff0:	fa93 f3a3 	rbit	r3, r3
 8000ff4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000ff8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ffc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001000:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001004:	fa93 f3a3 	rbit	r3, r3
 8001008:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800100c:	4b3b      	ldr	r3, [pc, #236]	; (80010fc <HAL_RCC_OscConfig+0x330>)
 800100e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001010:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001014:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001018:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800101c:	fa92 f2a2 	rbit	r2, r2
 8001020:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001024:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001028:	fab2 f282 	clz	r2, r2
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	f042 0220 	orr.w	r2, r2, #32
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	f002 021f 	and.w	r2, r2, #31
 8001038:	2101      	movs	r1, #1
 800103a:	fa01 f202 	lsl.w	r2, r1, r2
 800103e:	4013      	ands	r3, r2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0ab      	beq.n	8000f9c <HAL_RCC_OscConfig+0x1d0>
 8001044:	e05d      	b.n	8001102 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001046:	f7ff fc09 	bl	800085c <HAL_GetTick>
 800104a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800104e:	e00a      	b.n	8001066 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001050:	f7ff fc04 	bl	800085c <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	2b64      	cmp	r3, #100	; 0x64
 800105e:	d902      	bls.n	8001066 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001060:	2303      	movs	r3, #3
 8001062:	f000 bee9 	b.w	8001e38 <HAL_RCC_OscConfig+0x106c>
 8001066:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800106a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001072:	fa93 f3a3 	rbit	r3, r3
 8001076:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800107a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800107e:	fab3 f383 	clz	r3, r3
 8001082:	b2db      	uxtb	r3, r3
 8001084:	095b      	lsrs	r3, r3, #5
 8001086:	b2db      	uxtb	r3, r3
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b01      	cmp	r3, #1
 8001090:	d102      	bne.n	8001098 <HAL_RCC_OscConfig+0x2cc>
 8001092:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <HAL_RCC_OscConfig+0x330>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	e015      	b.n	80010c4 <HAL_RCC_OscConfig+0x2f8>
 8001098:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800109c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80010a4:	fa93 f3a3 	rbit	r3, r3
 80010a8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80010ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010b0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80010b4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80010b8:	fa93 f3a3 	rbit	r3, r3
 80010bc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <HAL_RCC_OscConfig+0x330>)
 80010c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010c8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80010cc:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80010d0:	fa92 f2a2 	rbit	r2, r2
 80010d4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80010d8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80010dc:	fab2 f282 	clz	r2, r2
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	f042 0220 	orr.w	r2, r2, #32
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	f002 021f 	and.w	r2, r2, #31
 80010ec:	2101      	movs	r1, #1
 80010ee:	fa01 f202 	lsl.w	r2, r1, r2
 80010f2:	4013      	ands	r3, r2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1ab      	bne.n	8001050 <HAL_RCC_OscConfig+0x284>
 80010f8:	e003      	b.n	8001102 <HAL_RCC_OscConfig+0x336>
 80010fa:	bf00      	nop
 80010fc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001106:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	2b00      	cmp	r3, #0
 8001114:	f000 817d 	beq.w	8001412 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001118:	4ba6      	ldr	r3, [pc, #664]	; (80013b4 <HAL_RCC_OscConfig+0x5e8>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 030c 	and.w	r3, r3, #12
 8001120:	2b00      	cmp	r3, #0
 8001122:	d00b      	beq.n	800113c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001124:	4ba3      	ldr	r3, [pc, #652]	; (80013b4 <HAL_RCC_OscConfig+0x5e8>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f003 030c 	and.w	r3, r3, #12
 800112c:	2b08      	cmp	r3, #8
 800112e:	d172      	bne.n	8001216 <HAL_RCC_OscConfig+0x44a>
 8001130:	4ba0      	ldr	r3, [pc, #640]	; (80013b4 <HAL_RCC_OscConfig+0x5e8>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d16c      	bne.n	8001216 <HAL_RCC_OscConfig+0x44a>
 800113c:	2302      	movs	r3, #2
 800113e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001142:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001146:	fa93 f3a3 	rbit	r3, r3
 800114a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800114e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001152:	fab3 f383 	clz	r3, r3
 8001156:	b2db      	uxtb	r3, r3
 8001158:	095b      	lsrs	r3, r3, #5
 800115a:	b2db      	uxtb	r3, r3
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b01      	cmp	r3, #1
 8001164:	d102      	bne.n	800116c <HAL_RCC_OscConfig+0x3a0>
 8001166:	4b93      	ldr	r3, [pc, #588]	; (80013b4 <HAL_RCC_OscConfig+0x5e8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	e013      	b.n	8001194 <HAL_RCC_OscConfig+0x3c8>
 800116c:	2302      	movs	r3, #2
 800116e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001172:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001176:	fa93 f3a3 	rbit	r3, r3
 800117a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800117e:	2302      	movs	r3, #2
 8001180:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001184:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001188:	fa93 f3a3 	rbit	r3, r3
 800118c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001190:	4b88      	ldr	r3, [pc, #544]	; (80013b4 <HAL_RCC_OscConfig+0x5e8>)
 8001192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001194:	2202      	movs	r2, #2
 8001196:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800119a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800119e:	fa92 f2a2 	rbit	r2, r2
 80011a2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80011a6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80011aa:	fab2 f282 	clz	r2, r2
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	f042 0220 	orr.w	r2, r2, #32
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	f002 021f 	and.w	r2, r2, #31
 80011ba:	2101      	movs	r1, #1
 80011bc:	fa01 f202 	lsl.w	r2, r1, r2
 80011c0:	4013      	ands	r3, r2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00a      	beq.n	80011dc <HAL_RCC_OscConfig+0x410>
 80011c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d002      	beq.n	80011dc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	f000 be2e 	b.w	8001e38 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011dc:	4b75      	ldr	r3, [pc, #468]	; (80013b4 <HAL_RCC_OscConfig+0x5e8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	695b      	ldr	r3, [r3, #20]
 80011f0:	21f8      	movs	r1, #248	; 0xf8
 80011f2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80011fa:	fa91 f1a1 	rbit	r1, r1
 80011fe:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001202:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001206:	fab1 f181 	clz	r1, r1
 800120a:	b2c9      	uxtb	r1, r1
 800120c:	408b      	lsls	r3, r1
 800120e:	4969      	ldr	r1, [pc, #420]	; (80013b4 <HAL_RCC_OscConfig+0x5e8>)
 8001210:	4313      	orrs	r3, r2
 8001212:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001214:	e0fd      	b.n	8001412 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800121a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 8088 	beq.w	8001338 <HAL_RCC_OscConfig+0x56c>
 8001228:	2301      	movs	r3, #1
 800122a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800122e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001232:	fa93 f3a3 	rbit	r3, r3
 8001236:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800123a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800123e:	fab3 f383 	clz	r3, r3
 8001242:	b2db      	uxtb	r3, r3
 8001244:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001248:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	461a      	mov	r2, r3
 8001250:	2301      	movs	r3, #1
 8001252:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001254:	f7ff fb02 	bl	800085c <HAL_GetTick>
 8001258:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800125c:	e00a      	b.n	8001274 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800125e:	f7ff fafd 	bl	800085c <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d902      	bls.n	8001274 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	f000 bde2 	b.w	8001e38 <HAL_RCC_OscConfig+0x106c>
 8001274:	2302      	movs	r3, #2
 8001276:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800127e:	fa93 f3a3 	rbit	r3, r3
 8001282:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001286:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128a:	fab3 f383 	clz	r3, r3
 800128e:	b2db      	uxtb	r3, r3
 8001290:	095b      	lsrs	r3, r3, #5
 8001292:	b2db      	uxtb	r3, r3
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b01      	cmp	r3, #1
 800129c:	d102      	bne.n	80012a4 <HAL_RCC_OscConfig+0x4d8>
 800129e:	4b45      	ldr	r3, [pc, #276]	; (80013b4 <HAL_RCC_OscConfig+0x5e8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	e013      	b.n	80012cc <HAL_RCC_OscConfig+0x500>
 80012a4:	2302      	movs	r3, #2
 80012a6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012aa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80012ae:	fa93 f3a3 	rbit	r3, r3
 80012b2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80012b6:	2302      	movs	r3, #2
 80012b8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80012bc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80012c0:	fa93 f3a3 	rbit	r3, r3
 80012c4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80012c8:	4b3a      	ldr	r3, [pc, #232]	; (80013b4 <HAL_RCC_OscConfig+0x5e8>)
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	2202      	movs	r2, #2
 80012ce:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80012d2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80012d6:	fa92 f2a2 	rbit	r2, r2
 80012da:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80012de:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80012e2:	fab2 f282 	clz	r2, r2
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	f042 0220 	orr.w	r2, r2, #32
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	f002 021f 	and.w	r2, r2, #31
 80012f2:	2101      	movs	r1, #1
 80012f4:	fa01 f202 	lsl.w	r2, r1, r2
 80012f8:	4013      	ands	r3, r2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0af      	beq.n	800125e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fe:	4b2d      	ldr	r3, [pc, #180]	; (80013b4 <HAL_RCC_OscConfig+0x5e8>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800130a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	21f8      	movs	r1, #248	; 0xf8
 8001314:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001318:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800131c:	fa91 f1a1 	rbit	r1, r1
 8001320:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001324:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001328:	fab1 f181 	clz	r1, r1
 800132c:	b2c9      	uxtb	r1, r1
 800132e:	408b      	lsls	r3, r1
 8001330:	4920      	ldr	r1, [pc, #128]	; (80013b4 <HAL_RCC_OscConfig+0x5e8>)
 8001332:	4313      	orrs	r3, r2
 8001334:	600b      	str	r3, [r1, #0]
 8001336:	e06c      	b.n	8001412 <HAL_RCC_OscConfig+0x646>
 8001338:	2301      	movs	r3, #1
 800133a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001342:	fa93 f3a3 	rbit	r3, r3
 8001346:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800134a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800134e:	fab3 f383 	clz	r3, r3
 8001352:	b2db      	uxtb	r3, r3
 8001354:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001358:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	461a      	mov	r2, r3
 8001360:	2300      	movs	r3, #0
 8001362:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001364:	f7ff fa7a 	bl	800085c <HAL_GetTick>
 8001368:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136c:	e00a      	b.n	8001384 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800136e:	f7ff fa75 	bl	800085c <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d902      	bls.n	8001384 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	f000 bd5a 	b.w	8001e38 <HAL_RCC_OscConfig+0x106c>
 8001384:	2302      	movs	r3, #2
 8001386:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800138e:	fa93 f3a3 	rbit	r3, r3
 8001392:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001396:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139a:	fab3 f383 	clz	r3, r3
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	095b      	lsrs	r3, r3, #5
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d104      	bne.n	80013b8 <HAL_RCC_OscConfig+0x5ec>
 80013ae:	4b01      	ldr	r3, [pc, #4]	; (80013b4 <HAL_RCC_OscConfig+0x5e8>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	e015      	b.n	80013e0 <HAL_RCC_OscConfig+0x614>
 80013b4:	40021000 	.word	0x40021000
 80013b8:	2302      	movs	r3, #2
 80013ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80013c2:	fa93 f3a3 	rbit	r3, r3
 80013c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80013ca:	2302      	movs	r3, #2
 80013cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80013d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013d4:	fa93 f3a3 	rbit	r3, r3
 80013d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80013dc:	4bc8      	ldr	r3, [pc, #800]	; (8001700 <HAL_RCC_OscConfig+0x934>)
 80013de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e0:	2202      	movs	r2, #2
 80013e2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80013e6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80013ea:	fa92 f2a2 	rbit	r2, r2
 80013ee:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80013f2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80013f6:	fab2 f282 	clz	r2, r2
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	f042 0220 	orr.w	r2, r2, #32
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	f002 021f 	and.w	r2, r2, #31
 8001406:	2101      	movs	r1, #1
 8001408:	fa01 f202 	lsl.w	r2, r1, r2
 800140c:	4013      	ands	r3, r2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1ad      	bne.n	800136e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001416:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	2b00      	cmp	r3, #0
 8001424:	f000 8110 	beq.w	8001648 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800142c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d079      	beq.n	800152c <HAL_RCC_OscConfig+0x760>
 8001438:	2301      	movs	r3, #1
 800143a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001442:	fa93 f3a3 	rbit	r3, r3
 8001446:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800144a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800144e:	fab3 f383 	clz	r3, r3
 8001452:	b2db      	uxtb	r3, r3
 8001454:	461a      	mov	r2, r3
 8001456:	4bab      	ldr	r3, [pc, #684]	; (8001704 <HAL_RCC_OscConfig+0x938>)
 8001458:	4413      	add	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	461a      	mov	r2, r3
 800145e:	2301      	movs	r3, #1
 8001460:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001462:	f7ff f9fb 	bl	800085c <HAL_GetTick>
 8001466:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800146a:	e00a      	b.n	8001482 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800146c:	f7ff f9f6 	bl	800085c <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d902      	bls.n	8001482 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	f000 bcdb 	b.w	8001e38 <HAL_RCC_OscConfig+0x106c>
 8001482:	2302      	movs	r3, #2
 8001484:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001488:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800148c:	fa93 f3a3 	rbit	r3, r3
 8001490:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001498:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800149c:	2202      	movs	r2, #2
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	fa93 f2a3 	rbit	r2, r3
 80014ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80014c0:	2202      	movs	r2, #2
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	fa93 f2a3 	rbit	r2, r3
 80014d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014da:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014dc:	4b88      	ldr	r3, [pc, #544]	; (8001700 <HAL_RCC_OscConfig+0x934>)
 80014de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80014e8:	2102      	movs	r1, #2
 80014ea:	6019      	str	r1, [r3, #0]
 80014ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	fa93 f1a3 	rbit	r1, r3
 80014fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014fe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001502:	6019      	str	r1, [r3, #0]
  return result;
 8001504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001508:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	fab3 f383 	clz	r3, r3
 8001512:	b2db      	uxtb	r3, r3
 8001514:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001518:	b2db      	uxtb	r3, r3
 800151a:	f003 031f 	and.w	r3, r3, #31
 800151e:	2101      	movs	r1, #1
 8001520:	fa01 f303 	lsl.w	r3, r1, r3
 8001524:	4013      	ands	r3, r2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0a0      	beq.n	800146c <HAL_RCC_OscConfig+0x6a0>
 800152a:	e08d      	b.n	8001648 <HAL_RCC_OscConfig+0x87c>
 800152c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001530:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001534:	2201      	movs	r2, #1
 8001536:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800153c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	fa93 f2a3 	rbit	r2, r3
 8001546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800154a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800154e:	601a      	str	r2, [r3, #0]
  return result;
 8001550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001554:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001558:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800155a:	fab3 f383 	clz	r3, r3
 800155e:	b2db      	uxtb	r3, r3
 8001560:	461a      	mov	r2, r3
 8001562:	4b68      	ldr	r3, [pc, #416]	; (8001704 <HAL_RCC_OscConfig+0x938>)
 8001564:	4413      	add	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	461a      	mov	r2, r3
 800156a:	2300      	movs	r3, #0
 800156c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156e:	f7ff f975 	bl	800085c <HAL_GetTick>
 8001572:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001576:	e00a      	b.n	800158e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001578:	f7ff f970 	bl	800085c <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d902      	bls.n	800158e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	f000 bc55 	b.w	8001e38 <HAL_RCC_OscConfig+0x106c>
 800158e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001592:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001596:	2202      	movs	r2, #2
 8001598:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800159e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	fa93 f2a3 	rbit	r2, r3
 80015a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80015ba:	2202      	movs	r2, #2
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	fa93 f2a3 	rbit	r2, r3
 80015cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80015de:	2202      	movs	r2, #2
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	fa93 f2a3 	rbit	r2, r3
 80015f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80015f8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015fa:	4b41      	ldr	r3, [pc, #260]	; (8001700 <HAL_RCC_OscConfig+0x934>)
 80015fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001602:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001606:	2102      	movs	r1, #2
 8001608:	6019      	str	r1, [r3, #0]
 800160a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800160e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	fa93 f1a3 	rbit	r1, r3
 8001618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001620:	6019      	str	r1, [r3, #0]
  return result;
 8001622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001626:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	fab3 f383 	clz	r3, r3
 8001630:	b2db      	uxtb	r3, r3
 8001632:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001636:	b2db      	uxtb	r3, r3
 8001638:	f003 031f 	and.w	r3, r3, #31
 800163c:	2101      	movs	r1, #1
 800163e:	fa01 f303 	lsl.w	r3, r1, r3
 8001642:	4013      	ands	r3, r2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d197      	bne.n	8001578 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 81a1 	beq.w	80019a0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001664:	4b26      	ldr	r3, [pc, #152]	; (8001700 <HAL_RCC_OscConfig+0x934>)
 8001666:	69db      	ldr	r3, [r3, #28]
 8001668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d116      	bne.n	800169e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001670:	4b23      	ldr	r3, [pc, #140]	; (8001700 <HAL_RCC_OscConfig+0x934>)
 8001672:	69db      	ldr	r3, [r3, #28]
 8001674:	4a22      	ldr	r2, [pc, #136]	; (8001700 <HAL_RCC_OscConfig+0x934>)
 8001676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167a:	61d3      	str	r3, [r2, #28]
 800167c:	4b20      	ldr	r3, [pc, #128]	; (8001700 <HAL_RCC_OscConfig+0x934>)
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001688:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001692:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001696:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001698:	2301      	movs	r3, #1
 800169a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169e:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <HAL_RCC_OscConfig+0x93c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d11a      	bne.n	80016e0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016aa:	4b17      	ldr	r3, [pc, #92]	; (8001708 <HAL_RCC_OscConfig+0x93c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a16      	ldr	r2, [pc, #88]	; (8001708 <HAL_RCC_OscConfig+0x93c>)
 80016b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016b6:	f7ff f8d1 	bl	800085c <HAL_GetTick>
 80016ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016be:	e009      	b.n	80016d4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c0:	f7ff f8cc 	bl	800085c <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b64      	cmp	r3, #100	; 0x64
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e3b1      	b.n	8001e38 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <HAL_RCC_OscConfig+0x93c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0ef      	beq.n	80016c0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d10d      	bne.n	800170c <HAL_RCC_OscConfig+0x940>
 80016f0:	4b03      	ldr	r3, [pc, #12]	; (8001700 <HAL_RCC_OscConfig+0x934>)
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	4a02      	ldr	r2, [pc, #8]	; (8001700 <HAL_RCC_OscConfig+0x934>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	6213      	str	r3, [r2, #32]
 80016fc:	e03c      	b.n	8001778 <HAL_RCC_OscConfig+0x9ac>
 80016fe:	bf00      	nop
 8001700:	40021000 	.word	0x40021000
 8001704:	10908120 	.word	0x10908120
 8001708:	40007000 	.word	0x40007000
 800170c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001710:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d10c      	bne.n	8001736 <HAL_RCC_OscConfig+0x96a>
 800171c:	4bc1      	ldr	r3, [pc, #772]	; (8001a24 <HAL_RCC_OscConfig+0xc58>)
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	4ac0      	ldr	r2, [pc, #768]	; (8001a24 <HAL_RCC_OscConfig+0xc58>)
 8001722:	f023 0301 	bic.w	r3, r3, #1
 8001726:	6213      	str	r3, [r2, #32]
 8001728:	4bbe      	ldr	r3, [pc, #760]	; (8001a24 <HAL_RCC_OscConfig+0xc58>)
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	4abd      	ldr	r2, [pc, #756]	; (8001a24 <HAL_RCC_OscConfig+0xc58>)
 800172e:	f023 0304 	bic.w	r3, r3, #4
 8001732:	6213      	str	r3, [r2, #32]
 8001734:	e020      	b.n	8001778 <HAL_RCC_OscConfig+0x9ac>
 8001736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800173a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	2b05      	cmp	r3, #5
 8001744:	d10c      	bne.n	8001760 <HAL_RCC_OscConfig+0x994>
 8001746:	4bb7      	ldr	r3, [pc, #732]	; (8001a24 <HAL_RCC_OscConfig+0xc58>)
 8001748:	6a1b      	ldr	r3, [r3, #32]
 800174a:	4ab6      	ldr	r2, [pc, #728]	; (8001a24 <HAL_RCC_OscConfig+0xc58>)
 800174c:	f043 0304 	orr.w	r3, r3, #4
 8001750:	6213      	str	r3, [r2, #32]
 8001752:	4bb4      	ldr	r3, [pc, #720]	; (8001a24 <HAL_RCC_OscConfig+0xc58>)
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	4ab3      	ldr	r2, [pc, #716]	; (8001a24 <HAL_RCC_OscConfig+0xc58>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6213      	str	r3, [r2, #32]
 800175e:	e00b      	b.n	8001778 <HAL_RCC_OscConfig+0x9ac>
 8001760:	4bb0      	ldr	r3, [pc, #704]	; (8001a24 <HAL_RCC_OscConfig+0xc58>)
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	4aaf      	ldr	r2, [pc, #700]	; (8001a24 <HAL_RCC_OscConfig+0xc58>)
 8001766:	f023 0301 	bic.w	r3, r3, #1
 800176a:	6213      	str	r3, [r2, #32]
 800176c:	4bad      	ldr	r3, [pc, #692]	; (8001a24 <HAL_RCC_OscConfig+0xc58>)
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	4aac      	ldr	r2, [pc, #688]	; (8001a24 <HAL_RCC_OscConfig+0xc58>)
 8001772:	f023 0304 	bic.w	r3, r3, #4
 8001776:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	2b00      	cmp	r3, #0
 8001786:	f000 8081 	beq.w	800188c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178a:	f7ff f867 	bl	800085c <HAL_GetTick>
 800178e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001792:	e00b      	b.n	80017ac <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001794:	f7ff f862 	bl	800085c <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e345      	b.n	8001e38 <HAL_RCC_OscConfig+0x106c>
 80017ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80017b4:	2202      	movs	r2, #2
 80017b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017bc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	fa93 f2a3 	rbit	r2, r3
 80017c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ca:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80017d8:	2202      	movs	r2, #2
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	fa93 f2a3 	rbit	r2, r3
 80017ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ee:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80017f2:	601a      	str	r2, [r3, #0]
  return result;
 80017f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80017fc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fe:	fab3 f383 	clz	r3, r3
 8001802:	b2db      	uxtb	r3, r3
 8001804:	095b      	lsrs	r3, r3, #5
 8001806:	b2db      	uxtb	r3, r3
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d102      	bne.n	8001818 <HAL_RCC_OscConfig+0xa4c>
 8001812:	4b84      	ldr	r3, [pc, #528]	; (8001a24 <HAL_RCC_OscConfig+0xc58>)
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	e013      	b.n	8001840 <HAL_RCC_OscConfig+0xa74>
 8001818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800181c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001820:	2202      	movs	r2, #2
 8001822:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001828:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	fa93 f2a3 	rbit	r2, r3
 8001832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001836:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	4b79      	ldr	r3, [pc, #484]	; (8001a24 <HAL_RCC_OscConfig+0xc58>)
 800183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001840:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001844:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001848:	2102      	movs	r1, #2
 800184a:	6011      	str	r1, [r2, #0]
 800184c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001850:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001854:	6812      	ldr	r2, [r2, #0]
 8001856:	fa92 f1a2 	rbit	r1, r2
 800185a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800185e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001862:	6011      	str	r1, [r2, #0]
  return result;
 8001864:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001868:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800186c:	6812      	ldr	r2, [r2, #0]
 800186e:	fab2 f282 	clz	r2, r2
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	f002 021f 	and.w	r2, r2, #31
 800187e:	2101      	movs	r1, #1
 8001880:	fa01 f202 	lsl.w	r2, r1, r2
 8001884:	4013      	ands	r3, r2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d084      	beq.n	8001794 <HAL_RCC_OscConfig+0x9c8>
 800188a:	e07f      	b.n	800198c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800188c:	f7fe ffe6 	bl	800085c <HAL_GetTick>
 8001890:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001894:	e00b      	b.n	80018ae <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001896:	f7fe ffe1 	bl	800085c <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e2c4      	b.n	8001e38 <HAL_RCC_OscConfig+0x106c>
 80018ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80018b6:	2202      	movs	r2, #2
 80018b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018be:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	fa93 f2a3 	rbit	r2, r3
 80018c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018cc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80018da:	2202      	movs	r2, #2
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	fa93 f2a3 	rbit	r2, r3
 80018ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80018f4:	601a      	str	r2, [r3, #0]
  return result;
 80018f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fa:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80018fe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001900:	fab3 f383 	clz	r3, r3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	095b      	lsrs	r3, r3, #5
 8001908:	b2db      	uxtb	r3, r3
 800190a:	f043 0302 	orr.w	r3, r3, #2
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d102      	bne.n	800191a <HAL_RCC_OscConfig+0xb4e>
 8001914:	4b43      	ldr	r3, [pc, #268]	; (8001a24 <HAL_RCC_OscConfig+0xc58>)
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	e013      	b.n	8001942 <HAL_RCC_OscConfig+0xb76>
 800191a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800191e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001922:	2202      	movs	r2, #2
 8001924:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800192a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	fa93 f2a3 	rbit	r2, r3
 8001934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001938:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	4b39      	ldr	r3, [pc, #228]	; (8001a24 <HAL_RCC_OscConfig+0xc58>)
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001946:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800194a:	2102      	movs	r1, #2
 800194c:	6011      	str	r1, [r2, #0]
 800194e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001952:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	fa92 f1a2 	rbit	r1, r2
 800195c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001960:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001964:	6011      	str	r1, [r2, #0]
  return result;
 8001966:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800196a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800196e:	6812      	ldr	r2, [r2, #0]
 8001970:	fab2 f282 	clz	r2, r2
 8001974:	b2d2      	uxtb	r2, r2
 8001976:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	f002 021f 	and.w	r2, r2, #31
 8001980:	2101      	movs	r1, #1
 8001982:	fa01 f202 	lsl.w	r2, r1, r2
 8001986:	4013      	ands	r3, r2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d184      	bne.n	8001896 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800198c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001990:	2b01      	cmp	r3, #1
 8001992:	d105      	bne.n	80019a0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001994:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <HAL_RCC_OscConfig+0xc58>)
 8001996:	69db      	ldr	r3, [r3, #28]
 8001998:	4a22      	ldr	r2, [pc, #136]	; (8001a24 <HAL_RCC_OscConfig+0xc58>)
 800199a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800199e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 8242 	beq.w	8001e36 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019b2:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <HAL_RCC_OscConfig+0xc58>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	2b08      	cmp	r3, #8
 80019bc:	f000 8213 	beq.w	8001de6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	69db      	ldr	r3, [r3, #28]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	f040 8162 	bne.w	8001c96 <HAL_RCC_OscConfig+0xeca>
 80019d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80019da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	fa93 f2a3 	rbit	r2, r3
 80019ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80019f6:	601a      	str	r2, [r3, #0]
  return result;
 80019f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a00:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a02:	fab3 f383 	clz	r3, r3
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	461a      	mov	r2, r3
 8001a14:	2300      	movs	r3, #0
 8001a16:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a18:	f7fe ff20 	bl	800085c <HAL_GetTick>
 8001a1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a20:	e00c      	b.n	8001a3c <HAL_RCC_OscConfig+0xc70>
 8001a22:	bf00      	nop
 8001a24:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a28:	f7fe ff18 	bl	800085c <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e1fd      	b.n	8001e38 <HAL_RCC_OscConfig+0x106c>
 8001a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a40:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	fa93 f2a3 	rbit	r2, r3
 8001a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a60:	601a      	str	r2, [r3, #0]
  return result;
 8001a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a66:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a6a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a6c:	fab3 f383 	clz	r3, r3
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	095b      	lsrs	r3, r3, #5
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d102      	bne.n	8001a86 <HAL_RCC_OscConfig+0xcba>
 8001a80:	4bb0      	ldr	r3, [pc, #704]	; (8001d44 <HAL_RCC_OscConfig+0xf78>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	e027      	b.n	8001ad6 <HAL_RCC_OscConfig+0xd0a>
 8001a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a8a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a98:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	fa93 f2a3 	rbit	r2, r3
 8001aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001ab4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001abe:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	fa93 f2a3 	rbit	r2, r3
 8001ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001acc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	4b9c      	ldr	r3, [pc, #624]	; (8001d44 <HAL_RCC_OscConfig+0xf78>)
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ada:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001ade:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ae2:	6011      	str	r1, [r2, #0]
 8001ae4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ae8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001aec:	6812      	ldr	r2, [r2, #0]
 8001aee:	fa92 f1a2 	rbit	r1, r2
 8001af2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001af6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001afa:	6011      	str	r1, [r2, #0]
  return result;
 8001afc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b00:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b04:	6812      	ldr	r2, [r2, #0]
 8001b06:	fab2 f282 	clz	r2, r2
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	f042 0220 	orr.w	r2, r2, #32
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	f002 021f 	and.w	r2, r2, #31
 8001b16:	2101      	movs	r1, #1
 8001b18:	fa01 f202 	lsl.w	r2, r1, r2
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d182      	bne.n	8001a28 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b22:	4b88      	ldr	r3, [pc, #544]	; (8001d44 <HAL_RCC_OscConfig+0xf78>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6a1b      	ldr	r3, [r3, #32]
 8001b42:	430b      	orrs	r3, r1
 8001b44:	497f      	ldr	r1, [pc, #508]	; (8001d44 <HAL_RCC_OscConfig+0xf78>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	604b      	str	r3, [r1, #4]
 8001b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001b52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	fa93 f2a3 	rbit	r2, r3
 8001b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b6e:	601a      	str	r2, [r3, #0]
  return result;
 8001b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b74:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b78:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b7a:	fab3 f383 	clz	r3, r3
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b90:	f7fe fe64 	bl	800085c <HAL_GetTick>
 8001b94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b98:	e009      	b.n	8001bae <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b9a:	f7fe fe5f 	bl	800085c <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e144      	b.n	8001e38 <HAL_RCC_OscConfig+0x106c>
 8001bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001bb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	fa93 f2a3 	rbit	r2, r3
 8001bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bce:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001bd2:	601a      	str	r2, [r3, #0]
  return result;
 8001bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001bdc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bde:	fab3 f383 	clz	r3, r3
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	095b      	lsrs	r3, r3, #5
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d102      	bne.n	8001bf8 <HAL_RCC_OscConfig+0xe2c>
 8001bf2:	4b54      	ldr	r3, [pc, #336]	; (8001d44 <HAL_RCC_OscConfig+0xf78>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	e027      	b.n	8001c48 <HAL_RCC_OscConfig+0xe7c>
 8001bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	fa93 f2a3 	rbit	r2, r3
 8001c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c18:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c22:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c30:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	fa93 f2a3 	rbit	r2, r3
 8001c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	4b3f      	ldr	r3, [pc, #252]	; (8001d44 <HAL_RCC_OscConfig+0xf78>)
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c4c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001c50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c54:	6011      	str	r1, [r2, #0]
 8001c56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c5a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	fa92 f1a2 	rbit	r1, r2
 8001c64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c68:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c6c:	6011      	str	r1, [r2, #0]
  return result;
 8001c6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c72:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c76:	6812      	ldr	r2, [r2, #0]
 8001c78:	fab2 f282 	clz	r2, r2
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	f042 0220 	orr.w	r2, r2, #32
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	f002 021f 	and.w	r2, r2, #31
 8001c88:	2101      	movs	r1, #1
 8001c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d082      	beq.n	8001b9a <HAL_RCC_OscConfig+0xdce>
 8001c94:	e0cf      	b.n	8001e36 <HAL_RCC_OscConfig+0x106a>
 8001c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ca2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	fa93 f2a3 	rbit	r2, r3
 8001cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001cba:	601a      	str	r2, [r3, #0]
  return result;
 8001cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001cc4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc6:	fab3 f383 	clz	r3, r3
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cd0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	2300      	movs	r3, #0
 8001cda:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cdc:	f7fe fdbe 	bl	800085c <HAL_GetTick>
 8001ce0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce4:	e009      	b.n	8001cfa <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce6:	f7fe fdb9 	bl	800085c <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e09e      	b.n	8001e38 <HAL_RCC_OscConfig+0x106c>
 8001cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfe:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	fa93 f2a3 	rbit	r2, r3
 8001d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d1e:	601a      	str	r2, [r3, #0]
  return result;
 8001d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d24:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d28:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d2a:	fab3 f383 	clz	r3, r3
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	095b      	lsrs	r3, r3, #5
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d104      	bne.n	8001d48 <HAL_RCC_OscConfig+0xf7c>
 8001d3e:	4b01      	ldr	r3, [pc, #4]	; (8001d44 <HAL_RCC_OscConfig+0xf78>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	e029      	b.n	8001d98 <HAL_RCC_OscConfig+0xfcc>
 8001d44:	40021000 	.word	0x40021000
 8001d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	fa93 f2a3 	rbit	r2, r3
 8001d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d68:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d72:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d80:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	fa93 f2a3 	rbit	r2, r3
 8001d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d8e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	4b2b      	ldr	r3, [pc, #172]	; (8001e44 <HAL_RCC_OscConfig+0x1078>)
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d9c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001da0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001da4:	6011      	str	r1, [r2, #0]
 8001da6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001daa:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001dae:	6812      	ldr	r2, [r2, #0]
 8001db0:	fa92 f1a2 	rbit	r1, r2
 8001db4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001db8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001dbc:	6011      	str	r1, [r2, #0]
  return result;
 8001dbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dc2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001dc6:	6812      	ldr	r2, [r2, #0]
 8001dc8:	fab2 f282 	clz	r2, r2
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	f042 0220 	orr.w	r2, r2, #32
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	f002 021f 	and.w	r2, r2, #31
 8001dd8:	2101      	movs	r1, #1
 8001dda:	fa01 f202 	lsl.w	r2, r1, r2
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d180      	bne.n	8001ce6 <HAL_RCC_OscConfig+0xf1a>
 8001de4:	e027      	b.n	8001e36 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d101      	bne.n	8001dfa <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e01e      	b.n	8001e38 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dfa:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_RCC_OscConfig+0x1078>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e02:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e06:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d10b      	bne.n	8001e32 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001e1a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d001      	beq.n	8001e36 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40021000 	.word	0x40021000

08001e48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b09e      	sub	sp, #120	; 0x78
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e162      	b.n	8002126 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e60:	4b90      	ldr	r3, [pc, #576]	; (80020a4 <HAL_RCC_ClockConfig+0x25c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d910      	bls.n	8001e90 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6e:	4b8d      	ldr	r3, [pc, #564]	; (80020a4 <HAL_RCC_ClockConfig+0x25c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 0207 	bic.w	r2, r3, #7
 8001e76:	498b      	ldr	r1, [pc, #556]	; (80020a4 <HAL_RCC_ClockConfig+0x25c>)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7e:	4b89      	ldr	r3, [pc, #548]	; (80020a4 <HAL_RCC_ClockConfig+0x25c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d001      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e14a      	b.n	8002126 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d008      	beq.n	8001eae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e9c:	4b82      	ldr	r3, [pc, #520]	; (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	497f      	ldr	r1, [pc, #508]	; (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 80dc 	beq.w	8002074 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d13c      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xf6>
 8001ec4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ec8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ecc:	fa93 f3a3 	rbit	r3, r3
 8001ed0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed4:	fab3 f383 	clz	r3, r3
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	095b      	lsrs	r3, r3, #5
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d102      	bne.n	8001eee <HAL_RCC_ClockConfig+0xa6>
 8001ee8:	4b6f      	ldr	r3, [pc, #444]	; (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	e00f      	b.n	8001f0e <HAL_RCC_ClockConfig+0xc6>
 8001eee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ef2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	667b      	str	r3, [r7, #100]	; 0x64
 8001efc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f00:	663b      	str	r3, [r7, #96]	; 0x60
 8001f02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f04:	fa93 f3a3 	rbit	r3, r3
 8001f08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f0a:	4b67      	ldr	r3, [pc, #412]	; (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f12:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f16:	fa92 f2a2 	rbit	r2, r2
 8001f1a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001f1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f1e:	fab2 f282 	clz	r2, r2
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	f042 0220 	orr.w	r2, r2, #32
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	f002 021f 	and.w	r2, r2, #31
 8001f2e:	2101      	movs	r1, #1
 8001f30:	fa01 f202 	lsl.w	r2, r1, r2
 8001f34:	4013      	ands	r3, r2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d17b      	bne.n	8002032 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e0f3      	b.n	8002126 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d13c      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x178>
 8001f46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f4a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f4e:	fa93 f3a3 	rbit	r3, r3
 8001f52:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f56:	fab3 f383 	clz	r3, r3
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	095b      	lsrs	r3, r3, #5
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d102      	bne.n	8001f70 <HAL_RCC_ClockConfig+0x128>
 8001f6a:	4b4f      	ldr	r3, [pc, #316]	; (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	e00f      	b.n	8001f90 <HAL_RCC_ClockConfig+0x148>
 8001f70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f74:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f78:	fa93 f3a3 	rbit	r3, r3
 8001f7c:	647b      	str	r3, [r7, #68]	; 0x44
 8001f7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f82:	643b      	str	r3, [r7, #64]	; 0x40
 8001f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f86:	fa93 f3a3 	rbit	r3, r3
 8001f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f8c:	4b46      	ldr	r3, [pc, #280]	; (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f94:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f98:	fa92 f2a2 	rbit	r2, r2
 8001f9c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fa0:	fab2 f282 	clz	r2, r2
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	f042 0220 	orr.w	r2, r2, #32
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	f002 021f 	and.w	r2, r2, #31
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d13a      	bne.n	8002032 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e0b2      	b.n	8002126 <HAL_RCC_ClockConfig+0x2de>
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc6:	fa93 f3a3 	rbit	r3, r3
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fce:	fab3 f383 	clz	r3, r3
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	095b      	lsrs	r3, r3, #5
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d102      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x1a0>
 8001fe2:	4b31      	ldr	r3, [pc, #196]	; (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	e00d      	b.n	8002004 <HAL_RCC_ClockConfig+0x1bc>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fee:	fa93 f3a3 	rbit	r3, r3
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	623b      	str	r3, [r7, #32]
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
 8001ffa:	fa93 f3a3 	rbit	r3, r3
 8001ffe:	61fb      	str	r3, [r7, #28]
 8002000:	4b29      	ldr	r3, [pc, #164]	; (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	2202      	movs	r2, #2
 8002006:	61ba      	str	r2, [r7, #24]
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	fa92 f2a2 	rbit	r2, r2
 800200e:	617a      	str	r2, [r7, #20]
  return result;
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	fab2 f282 	clz	r2, r2
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	f042 0220 	orr.w	r2, r2, #32
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	f002 021f 	and.w	r2, r2, #31
 8002022:	2101      	movs	r1, #1
 8002024:	fa01 f202 	lsl.w	r2, r1, r2
 8002028:	4013      	ands	r3, r2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e079      	b.n	8002126 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002032:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f023 0203 	bic.w	r2, r3, #3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	491a      	ldr	r1, [pc, #104]	; (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8002040:	4313      	orrs	r3, r2
 8002042:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002044:	f7fe fc0a 	bl	800085c <HAL_GetTick>
 8002048:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204a:	e00a      	b.n	8002062 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800204c:	f7fe fc06 	bl	800085c <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	f241 3288 	movw	r2, #5000	; 0x1388
 800205a:	4293      	cmp	r3, r2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e061      	b.n	8002126 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002062:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f003 020c 	and.w	r2, r3, #12
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	429a      	cmp	r2, r3
 8002072:	d1eb      	bne.n	800204c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002074:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <HAL_RCC_ClockConfig+0x25c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d214      	bcs.n	80020ac <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002082:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <HAL_RCC_ClockConfig+0x25c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 0207 	bic.w	r2, r3, #7
 800208a:	4906      	ldr	r1, [pc, #24]	; (80020a4 <HAL_RCC_ClockConfig+0x25c>)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	4313      	orrs	r3, r2
 8002090:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002092:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <HAL_RCC_ClockConfig+0x25c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	429a      	cmp	r2, r3
 800209e:	d005      	beq.n	80020ac <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e040      	b.n	8002126 <HAL_RCC_ClockConfig+0x2de>
 80020a4:	40022000 	.word	0x40022000
 80020a8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b8:	4b1d      	ldr	r3, [pc, #116]	; (8002130 <HAL_RCC_ClockConfig+0x2e8>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	491a      	ldr	r1, [pc, #104]	; (8002130 <HAL_RCC_ClockConfig+0x2e8>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d009      	beq.n	80020ea <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020d6:	4b16      	ldr	r3, [pc, #88]	; (8002130 <HAL_RCC_ClockConfig+0x2e8>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4912      	ldr	r1, [pc, #72]	; (8002130 <HAL_RCC_ClockConfig+0x2e8>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020ea:	f000 f829 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 80020ee:	4601      	mov	r1, r0
 80020f0:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <HAL_RCC_ClockConfig+0x2e8>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020f8:	22f0      	movs	r2, #240	; 0xf0
 80020fa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	fa92 f2a2 	rbit	r2, r2
 8002102:	60fa      	str	r2, [r7, #12]
  return result;
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	fab2 f282 	clz	r2, r2
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	40d3      	lsrs	r3, r2
 800210e:	4a09      	ldr	r2, [pc, #36]	; (8002134 <HAL_RCC_ClockConfig+0x2ec>)
 8002110:	5cd3      	ldrb	r3, [r2, r3]
 8002112:	fa21 f303 	lsr.w	r3, r1, r3
 8002116:	4a08      	ldr	r2, [pc, #32]	; (8002138 <HAL_RCC_ClockConfig+0x2f0>)
 8002118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800211a:	4b08      	ldr	r3, [pc, #32]	; (800213c <HAL_RCC_ClockConfig+0x2f4>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe fb58 	bl	80007d4 <HAL_InitTick>
  
  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3778      	adds	r7, #120	; 0x78
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40021000 	.word	0x40021000
 8002134:	080034b0 	.word	0x080034b0
 8002138:	20000000 	.word	0x20000000
 800213c:	20000004 	.word	0x20000004

08002140 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002140:	b480      	push	{r7}
 8002142:	b08b      	sub	sp, #44	; 0x2c
 8002144:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
 800214a:	2300      	movs	r3, #0
 800214c:	61bb      	str	r3, [r7, #24]
 800214e:	2300      	movs	r3, #0
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800215a:	4b29      	ldr	r3, [pc, #164]	; (8002200 <HAL_RCC_GetSysClockFreq+0xc0>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f003 030c 	and.w	r3, r3, #12
 8002166:	2b04      	cmp	r3, #4
 8002168:	d002      	beq.n	8002170 <HAL_RCC_GetSysClockFreq+0x30>
 800216a:	2b08      	cmp	r3, #8
 800216c:	d003      	beq.n	8002176 <HAL_RCC_GetSysClockFreq+0x36>
 800216e:	e03c      	b.n	80021ea <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002170:	4b24      	ldr	r3, [pc, #144]	; (8002204 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002172:	623b      	str	r3, [r7, #32]
      break;
 8002174:	e03c      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800217c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002180:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	fa92 f2a2 	rbit	r2, r2
 8002188:	607a      	str	r2, [r7, #4]
  return result;
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	fab2 f282 	clz	r2, r2
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	40d3      	lsrs	r3, r2
 8002194:	4a1c      	ldr	r2, [pc, #112]	; (8002208 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002196:	5cd3      	ldrb	r3, [r2, r3]
 8002198:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800219a:	4b19      	ldr	r3, [pc, #100]	; (8002200 <HAL_RCC_GetSysClockFreq+0xc0>)
 800219c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	220f      	movs	r2, #15
 80021a4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	fa92 f2a2 	rbit	r2, r2
 80021ac:	60fa      	str	r2, [r7, #12]
  return result;
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	fab2 f282 	clz	r2, r2
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	40d3      	lsrs	r3, r2
 80021b8:	4a14      	ldr	r2, [pc, #80]	; (800220c <HAL_RCC_GetSysClockFreq+0xcc>)
 80021ba:	5cd3      	ldrb	r3, [r2, r3]
 80021bc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d008      	beq.n	80021da <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021c8:	4a0e      	ldr	r2, [pc, #56]	; (8002204 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	fb02 f303 	mul.w	r3, r2, r3
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
 80021d8:	e004      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	4a0c      	ldr	r2, [pc, #48]	; (8002210 <HAL_RCC_GetSysClockFreq+0xd0>)
 80021de:	fb02 f303 	mul.w	r3, r2, r3
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	623b      	str	r3, [r7, #32]
      break;
 80021e8:	e002      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021ec:	623b      	str	r3, [r7, #32]
      break;
 80021ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021f0:	6a3b      	ldr	r3, [r7, #32]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	372c      	adds	r7, #44	; 0x2c
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40021000 	.word	0x40021000
 8002204:	007a1200 	.word	0x007a1200
 8002208:	080034c8 	.word	0x080034c8
 800220c:	080034d8 	.word	0x080034d8
 8002210:	003d0900 	.word	0x003d0900

08002214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <HAL_RCC_GetHCLKFreq+0x14>)
 800221a:	681b      	ldr	r3, [r3, #0]
}
 800221c:	4618      	mov	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	20000000 	.word	0x20000000

0800222c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002232:	f7ff ffef 	bl	8002214 <HAL_RCC_GetHCLKFreq>
 8002236:	4601      	mov	r1, r0
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002240:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002244:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	fa92 f2a2 	rbit	r2, r2
 800224c:	603a      	str	r2, [r7, #0]
  return result;
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	fab2 f282 	clz	r2, r2
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	40d3      	lsrs	r3, r2
 8002258:	4a04      	ldr	r2, [pc, #16]	; (800226c <HAL_RCC_GetPCLK1Freq+0x40>)
 800225a:	5cd3      	ldrb	r3, [r2, r3]
 800225c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002260:	4618      	mov	r0, r3
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40021000 	.word	0x40021000
 800226c:	080034c0 	.word	0x080034c0

08002270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002276:	f7ff ffcd 	bl	8002214 <HAL_RCC_GetHCLKFreq>
 800227a:	4601      	mov	r1, r0
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_GetPCLK2Freq+0x3c>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002284:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002288:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	fa92 f2a2 	rbit	r2, r2
 8002290:	603a      	str	r2, [r7, #0]
  return result;
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	fab2 f282 	clz	r2, r2
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	40d3      	lsrs	r3, r2
 800229c:	4a04      	ldr	r2, [pc, #16]	; (80022b0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800229e:	5cd3      	ldrb	r3, [r2, r3]
 80022a0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80022a4:	4618      	mov	r0, r3
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40021000 	.word	0x40021000
 80022b0:	080034c0 	.word	0x080034c0

080022b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e040      	b.n	8002348 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d106      	bne.n	80022dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7fe f988 	bl	80005ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2224      	movs	r2, #36	; 0x24
 80022e0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 0201 	bic.w	r2, r2, #1
 80022f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f8b6 	bl	8002464 <UART_SetConfig>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d101      	bne.n	8002302 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e022      	b.n	8002348 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002306:	2b00      	cmp	r3, #0
 8002308:	d002      	beq.n	8002310 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f9e0 	bl	80026d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800231e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800232e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f042 0201 	orr.w	r2, r2, #1
 800233e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 fa67 	bl	8002814 <UART_CheckIdleState>
 8002346:	4603      	mov	r3, r0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08a      	sub	sp, #40	; 0x28
 8002354:	af02      	add	r7, sp, #8
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	603b      	str	r3, [r7, #0]
 800235c:	4613      	mov	r3, r2
 800235e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002364:	2b20      	cmp	r3, #32
 8002366:	d178      	bne.n	800245a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d002      	beq.n	8002374 <HAL_UART_Transmit+0x24>
 800236e:	88fb      	ldrh	r3, [r7, #6]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e071      	b.n	800245c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2221      	movs	r2, #33	; 0x21
 8002384:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002386:	f7fe fa69 	bl	800085c <HAL_GetTick>
 800238a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	88fa      	ldrh	r2, [r7, #6]
 8002390:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	88fa      	ldrh	r2, [r7, #6]
 8002398:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a4:	d108      	bne.n	80023b8 <HAL_UART_Transmit+0x68>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d104      	bne.n	80023b8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	61bb      	str	r3, [r7, #24]
 80023b6:	e003      	b.n	80023c0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023c0:	e030      	b.n	8002424 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2200      	movs	r2, #0
 80023ca:	2180      	movs	r1, #128	; 0x80
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 fac9 	bl	8002964 <UART_WaitOnFlagUntilTimeout>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d004      	beq.n	80023e2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2220      	movs	r2, #32
 80023dc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e03c      	b.n	800245c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10b      	bne.n	8002400 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	881a      	ldrh	r2, [r3, #0]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023f4:	b292      	uxth	r2, r2
 80023f6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	3302      	adds	r3, #2
 80023fc:	61bb      	str	r3, [r7, #24]
 80023fe:	e008      	b.n	8002412 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	781a      	ldrb	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	b292      	uxth	r2, r2
 800240a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	3301      	adds	r3, #1
 8002410:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002418:	b29b      	uxth	r3, r3
 800241a:	3b01      	subs	r3, #1
 800241c:	b29a      	uxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800242a:	b29b      	uxth	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1c8      	bne.n	80023c2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	2200      	movs	r2, #0
 8002438:	2140      	movs	r1, #64	; 0x40
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 fa92 	bl	8002964 <UART_WaitOnFlagUntilTimeout>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d004      	beq.n	8002450 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2220      	movs	r2, #32
 800244a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e005      	b.n	800245c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2220      	movs	r2, #32
 8002454:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002456:	2300      	movs	r3, #0
 8002458:	e000      	b.n	800245c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800245a:	2302      	movs	r3, #2
  }
}
 800245c:	4618      	mov	r0, r3
 800245e:	3720      	adds	r7, #32
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800246c:	2300      	movs	r3, #0
 800246e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	431a      	orrs	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	4313      	orrs	r3, r2
 8002486:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	4b8a      	ldr	r3, [pc, #552]	; (80026b8 <UART_SetConfig+0x254>)
 8002490:	4013      	ands	r3, r2
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6812      	ldr	r2, [r2, #0]
 8002496:	6979      	ldr	r1, [r7, #20]
 8002498:	430b      	orrs	r3, r1
 800249a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	4313      	orrs	r3, r2
 80024c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a78      	ldr	r2, [pc, #480]	; (80026bc <UART_SetConfig+0x258>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d120      	bne.n	8002522 <UART_SetConfig+0xbe>
 80024e0:	4b77      	ldr	r3, [pc, #476]	; (80026c0 <UART_SetConfig+0x25c>)
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	d817      	bhi.n	800251c <UART_SetConfig+0xb8>
 80024ec:	a201      	add	r2, pc, #4	; (adr r2, 80024f4 <UART_SetConfig+0x90>)
 80024ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f2:	bf00      	nop
 80024f4:	08002505 	.word	0x08002505
 80024f8:	08002511 	.word	0x08002511
 80024fc:	08002517 	.word	0x08002517
 8002500:	0800250b 	.word	0x0800250b
 8002504:	2300      	movs	r3, #0
 8002506:	77fb      	strb	r3, [r7, #31]
 8002508:	e01d      	b.n	8002546 <UART_SetConfig+0xe2>
 800250a:	2302      	movs	r3, #2
 800250c:	77fb      	strb	r3, [r7, #31]
 800250e:	e01a      	b.n	8002546 <UART_SetConfig+0xe2>
 8002510:	2304      	movs	r3, #4
 8002512:	77fb      	strb	r3, [r7, #31]
 8002514:	e017      	b.n	8002546 <UART_SetConfig+0xe2>
 8002516:	2308      	movs	r3, #8
 8002518:	77fb      	strb	r3, [r7, #31]
 800251a:	e014      	b.n	8002546 <UART_SetConfig+0xe2>
 800251c:	2310      	movs	r3, #16
 800251e:	77fb      	strb	r3, [r7, #31]
 8002520:	e011      	b.n	8002546 <UART_SetConfig+0xe2>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a67      	ldr	r2, [pc, #412]	; (80026c4 <UART_SetConfig+0x260>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d102      	bne.n	8002532 <UART_SetConfig+0xce>
 800252c:	2300      	movs	r3, #0
 800252e:	77fb      	strb	r3, [r7, #31]
 8002530:	e009      	b.n	8002546 <UART_SetConfig+0xe2>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a64      	ldr	r2, [pc, #400]	; (80026c8 <UART_SetConfig+0x264>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d102      	bne.n	8002542 <UART_SetConfig+0xde>
 800253c:	2300      	movs	r3, #0
 800253e:	77fb      	strb	r3, [r7, #31]
 8002540:	e001      	b.n	8002546 <UART_SetConfig+0xe2>
 8002542:	2310      	movs	r3, #16
 8002544:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800254e:	d15a      	bne.n	8002606 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002550:	7ffb      	ldrb	r3, [r7, #31]
 8002552:	2b08      	cmp	r3, #8
 8002554:	d827      	bhi.n	80025a6 <UART_SetConfig+0x142>
 8002556:	a201      	add	r2, pc, #4	; (adr r2, 800255c <UART_SetConfig+0xf8>)
 8002558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255c:	08002581 	.word	0x08002581
 8002560:	08002589 	.word	0x08002589
 8002564:	08002591 	.word	0x08002591
 8002568:	080025a7 	.word	0x080025a7
 800256c:	08002597 	.word	0x08002597
 8002570:	080025a7 	.word	0x080025a7
 8002574:	080025a7 	.word	0x080025a7
 8002578:	080025a7 	.word	0x080025a7
 800257c:	0800259f 	.word	0x0800259f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002580:	f7ff fe54 	bl	800222c <HAL_RCC_GetPCLK1Freq>
 8002584:	61b8      	str	r0, [r7, #24]
        break;
 8002586:	e013      	b.n	80025b0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002588:	f7ff fe72 	bl	8002270 <HAL_RCC_GetPCLK2Freq>
 800258c:	61b8      	str	r0, [r7, #24]
        break;
 800258e:	e00f      	b.n	80025b0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002590:	4b4e      	ldr	r3, [pc, #312]	; (80026cc <UART_SetConfig+0x268>)
 8002592:	61bb      	str	r3, [r7, #24]
        break;
 8002594:	e00c      	b.n	80025b0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002596:	f7ff fdd3 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 800259a:	61b8      	str	r0, [r7, #24]
        break;
 800259c:	e008      	b.n	80025b0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800259e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025a2:	61bb      	str	r3, [r7, #24]
        break;
 80025a4:	e004      	b.n	80025b0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	77bb      	strb	r3, [r7, #30]
        break;
 80025ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d074      	beq.n	80026a0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	005a      	lsls	r2, r3, #1
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	085b      	lsrs	r3, r3, #1
 80025c0:	441a      	add	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	2b0f      	cmp	r3, #15
 80025d0:	d916      	bls.n	8002600 <UART_SetConfig+0x19c>
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d8:	d212      	bcs.n	8002600 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	b29b      	uxth	r3, r3
 80025de:	f023 030f 	bic.w	r3, r3, #15
 80025e2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	085b      	lsrs	r3, r3, #1
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	89fb      	ldrh	r3, [r7, #14]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	89fa      	ldrh	r2, [r7, #14]
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	e04f      	b.n	80026a0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	77bb      	strb	r3, [r7, #30]
 8002604:	e04c      	b.n	80026a0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002606:	7ffb      	ldrb	r3, [r7, #31]
 8002608:	2b08      	cmp	r3, #8
 800260a:	d828      	bhi.n	800265e <UART_SetConfig+0x1fa>
 800260c:	a201      	add	r2, pc, #4	; (adr r2, 8002614 <UART_SetConfig+0x1b0>)
 800260e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002612:	bf00      	nop
 8002614:	08002639 	.word	0x08002639
 8002618:	08002641 	.word	0x08002641
 800261c:	08002649 	.word	0x08002649
 8002620:	0800265f 	.word	0x0800265f
 8002624:	0800264f 	.word	0x0800264f
 8002628:	0800265f 	.word	0x0800265f
 800262c:	0800265f 	.word	0x0800265f
 8002630:	0800265f 	.word	0x0800265f
 8002634:	08002657 	.word	0x08002657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002638:	f7ff fdf8 	bl	800222c <HAL_RCC_GetPCLK1Freq>
 800263c:	61b8      	str	r0, [r7, #24]
        break;
 800263e:	e013      	b.n	8002668 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002640:	f7ff fe16 	bl	8002270 <HAL_RCC_GetPCLK2Freq>
 8002644:	61b8      	str	r0, [r7, #24]
        break;
 8002646:	e00f      	b.n	8002668 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002648:	4b20      	ldr	r3, [pc, #128]	; (80026cc <UART_SetConfig+0x268>)
 800264a:	61bb      	str	r3, [r7, #24]
        break;
 800264c:	e00c      	b.n	8002668 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800264e:	f7ff fd77 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 8002652:	61b8      	str	r0, [r7, #24]
        break;
 8002654:	e008      	b.n	8002668 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800265a:	61bb      	str	r3, [r7, #24]
        break;
 800265c:	e004      	b.n	8002668 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800265e:	2300      	movs	r3, #0
 8002660:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	77bb      	strb	r3, [r7, #30]
        break;
 8002666:	bf00      	nop
    }

    if (pclk != 0U)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d018      	beq.n	80026a0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	085a      	lsrs	r2, r3, #1
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	441a      	add	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002680:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	2b0f      	cmp	r3, #15
 8002686:	d909      	bls.n	800269c <UART_SetConfig+0x238>
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800268e:	d205      	bcs.n	800269c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	b29a      	uxth	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	e001      	b.n	80026a0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80026ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3720      	adds	r7, #32
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	efff69f3 	.word	0xefff69f3
 80026bc:	40013800 	.word	0x40013800
 80026c0:	40021000 	.word	0x40021000
 80026c4:	40004400 	.word	0x40004400
 80026c8:	40004800 	.word	0x40004800
 80026cc:	007a1200 	.word	0x007a1200

080026d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00a      	beq.n	80026fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00a      	beq.n	800271c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00a      	beq.n	800273e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00a      	beq.n	8002760 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	f003 0310 	and.w	r3, r3, #16
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00a      	beq.n	8002782 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	f003 0320 	and.w	r3, r3, #32
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00a      	beq.n	80027a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d01a      	beq.n	80027e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027ce:	d10a      	bne.n	80027e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00a      	beq.n	8002808 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	605a      	str	r2, [r3, #4]
  }
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b098      	sub	sp, #96	; 0x60
 8002818:	af02      	add	r7, sp, #8
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002824:	f7fe f81a 	bl	800085c <HAL_GetTick>
 8002828:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0308 	and.w	r3, r3, #8
 8002834:	2b08      	cmp	r3, #8
 8002836:	d12e      	bne.n	8002896 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002838:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002840:	2200      	movs	r2, #0
 8002842:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f88c 	bl	8002964 <UART_WaitOnFlagUntilTimeout>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d021      	beq.n	8002896 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800285a:	e853 3f00 	ldrex	r3, [r3]
 800285e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002862:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002866:	653b      	str	r3, [r7, #80]	; 0x50
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	461a      	mov	r2, r3
 800286e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002870:	647b      	str	r3, [r7, #68]	; 0x44
 8002872:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002874:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002876:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002878:	e841 2300 	strex	r3, r2, [r1]
 800287c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800287e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1e6      	bne.n	8002852 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2220      	movs	r2, #32
 8002888:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e062      	b.n	800295c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d149      	bne.n	8002938 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ac:	2200      	movs	r2, #0
 80028ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f856 	bl	8002964 <UART_WaitOnFlagUntilTimeout>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d03c      	beq.n	8002938 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	e853 3f00 	ldrex	r3, [r3]
 80028ca:	623b      	str	r3, [r7, #32]
   return(result);
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	461a      	mov	r2, r3
 80028da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028dc:	633b      	str	r3, [r7, #48]	; 0x30
 80028de:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80028e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028e4:	e841 2300 	strex	r3, r2, [r1]
 80028e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80028ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1e6      	bne.n	80028be <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	3308      	adds	r3, #8
 80028f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	e853 3f00 	ldrex	r3, [r3]
 80028fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f023 0301 	bic.w	r3, r3, #1
 8002906:	64bb      	str	r3, [r7, #72]	; 0x48
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	3308      	adds	r3, #8
 800290e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002910:	61fa      	str	r2, [r7, #28]
 8002912:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002914:	69b9      	ldr	r1, [r7, #24]
 8002916:	69fa      	ldr	r2, [r7, #28]
 8002918:	e841 2300 	strex	r3, r2, [r1]
 800291c:	617b      	str	r3, [r7, #20]
   return(result);
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1e5      	bne.n	80028f0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2220      	movs	r2, #32
 8002928:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e011      	b.n	800295c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2220      	movs	r2, #32
 800293c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2220      	movs	r2, #32
 8002942:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3758      	adds	r7, #88	; 0x58
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	4613      	mov	r3, r2
 8002972:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002974:	e049      	b.n	8002a0a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297c:	d045      	beq.n	8002a0a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800297e:	f7fd ff6d 	bl	800085c <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	429a      	cmp	r2, r3
 800298c:	d302      	bcc.n	8002994 <UART_WaitOnFlagUntilTimeout+0x30>
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e048      	b.n	8002a2a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d031      	beq.n	8002a0a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d110      	bne.n	80029d6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2208      	movs	r2, #8
 80029ba:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 f838 	bl	8002a32 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2208      	movs	r2, #8
 80029c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e029      	b.n	8002a2a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029e4:	d111      	bne.n	8002a0a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 f81e 	bl	8002a32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2220      	movs	r2, #32
 80029fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e00f      	b.n	8002a2a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	69da      	ldr	r2, [r3, #28]
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	4013      	ands	r3, r2
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	bf0c      	ite	eq
 8002a1a:	2301      	moveq	r3, #1
 8002a1c:	2300      	movne	r3, #0
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	461a      	mov	r2, r3
 8002a22:	79fb      	ldrb	r3, [r7, #7]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d0a6      	beq.n	8002976 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b095      	sub	sp, #84	; 0x54
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a42:	e853 3f00 	ldrex	r3, [r3]
 8002a46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	461a      	mov	r2, r3
 8002a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a58:	643b      	str	r3, [r7, #64]	; 0x40
 8002a5a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002a5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a60:	e841 2300 	strex	r3, r2, [r1]
 8002a64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1e6      	bne.n	8002a3a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	3308      	adds	r3, #8
 8002a72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	e853 3f00 	ldrex	r3, [r3]
 8002a7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f023 0301 	bic.w	r3, r3, #1
 8002a82:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	3308      	adds	r3, #8
 8002a8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a94:	e841 2300 	strex	r3, r2, [r1]
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1e5      	bne.n	8002a6c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d118      	bne.n	8002ada <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	e853 3f00 	ldrex	r3, [r3]
 8002ab4:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f023 0310 	bic.w	r3, r3, #16
 8002abc:	647b      	str	r3, [r7, #68]	; 0x44
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ac6:	61bb      	str	r3, [r7, #24]
 8002ac8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aca:	6979      	ldr	r1, [r7, #20]
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	e841 2300 	strex	r3, r2, [r1]
 8002ad2:	613b      	str	r3, [r7, #16]
   return(result);
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1e6      	bne.n	8002aa8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2220      	movs	r2, #32
 8002ade:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002aee:	bf00      	nop
 8002af0:	3754      	adds	r7, #84	; 0x54
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
	...

08002afc <sniprintf>:
 8002afc:	b40c      	push	{r2, r3}
 8002afe:	b530      	push	{r4, r5, lr}
 8002b00:	4b17      	ldr	r3, [pc, #92]	; (8002b60 <sniprintf+0x64>)
 8002b02:	1e0c      	subs	r4, r1, #0
 8002b04:	681d      	ldr	r5, [r3, #0]
 8002b06:	b09d      	sub	sp, #116	; 0x74
 8002b08:	da08      	bge.n	8002b1c <sniprintf+0x20>
 8002b0a:	238b      	movs	r3, #139	; 0x8b
 8002b0c:	602b      	str	r3, [r5, #0]
 8002b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8002b12:	b01d      	add	sp, #116	; 0x74
 8002b14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002b18:	b002      	add	sp, #8
 8002b1a:	4770      	bx	lr
 8002b1c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002b20:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002b24:	bf14      	ite	ne
 8002b26:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002b2a:	4623      	moveq	r3, r4
 8002b2c:	9304      	str	r3, [sp, #16]
 8002b2e:	9307      	str	r3, [sp, #28]
 8002b30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b34:	9002      	str	r0, [sp, #8]
 8002b36:	9006      	str	r0, [sp, #24]
 8002b38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002b3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002b3e:	ab21      	add	r3, sp, #132	; 0x84
 8002b40:	a902      	add	r1, sp, #8
 8002b42:	4628      	mov	r0, r5
 8002b44:	9301      	str	r3, [sp, #4]
 8002b46:	f000 f993 	bl	8002e70 <_svfiprintf_r>
 8002b4a:	1c43      	adds	r3, r0, #1
 8002b4c:	bfbc      	itt	lt
 8002b4e:	238b      	movlt	r3, #139	; 0x8b
 8002b50:	602b      	strlt	r3, [r5, #0]
 8002b52:	2c00      	cmp	r4, #0
 8002b54:	d0dd      	beq.n	8002b12 <sniprintf+0x16>
 8002b56:	9b02      	ldr	r3, [sp, #8]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	701a      	strb	r2, [r3, #0]
 8002b5c:	e7d9      	b.n	8002b12 <sniprintf+0x16>
 8002b5e:	bf00      	nop
 8002b60:	20000058 	.word	0x20000058

08002b64 <memset>:
 8002b64:	4402      	add	r2, r0
 8002b66:	4603      	mov	r3, r0
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d100      	bne.n	8002b6e <memset+0xa>
 8002b6c:	4770      	bx	lr
 8002b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b72:	e7f9      	b.n	8002b68 <memset+0x4>

08002b74 <__errno>:
 8002b74:	4b01      	ldr	r3, [pc, #4]	; (8002b7c <__errno+0x8>)
 8002b76:	6818      	ldr	r0, [r3, #0]
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	20000058 	.word	0x20000058

08002b80 <__libc_init_array>:
 8002b80:	b570      	push	{r4, r5, r6, lr}
 8002b82:	4d0d      	ldr	r5, [pc, #52]	; (8002bb8 <__libc_init_array+0x38>)
 8002b84:	4c0d      	ldr	r4, [pc, #52]	; (8002bbc <__libc_init_array+0x3c>)
 8002b86:	1b64      	subs	r4, r4, r5
 8002b88:	10a4      	asrs	r4, r4, #2
 8002b8a:	2600      	movs	r6, #0
 8002b8c:	42a6      	cmp	r6, r4
 8002b8e:	d109      	bne.n	8002ba4 <__libc_init_array+0x24>
 8002b90:	4d0b      	ldr	r5, [pc, #44]	; (8002bc0 <__libc_init_array+0x40>)
 8002b92:	4c0c      	ldr	r4, [pc, #48]	; (8002bc4 <__libc_init_array+0x44>)
 8002b94:	f000 fc6a 	bl	800346c <_init>
 8002b98:	1b64      	subs	r4, r4, r5
 8002b9a:	10a4      	asrs	r4, r4, #2
 8002b9c:	2600      	movs	r6, #0
 8002b9e:	42a6      	cmp	r6, r4
 8002ba0:	d105      	bne.n	8002bae <__libc_init_array+0x2e>
 8002ba2:	bd70      	pop	{r4, r5, r6, pc}
 8002ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ba8:	4798      	blx	r3
 8002baa:	3601      	adds	r6, #1
 8002bac:	e7ee      	b.n	8002b8c <__libc_init_array+0xc>
 8002bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bb2:	4798      	blx	r3
 8002bb4:	3601      	adds	r6, #1
 8002bb6:	e7f2      	b.n	8002b9e <__libc_init_array+0x1e>
 8002bb8:	0800351c 	.word	0x0800351c
 8002bbc:	0800351c 	.word	0x0800351c
 8002bc0:	0800351c 	.word	0x0800351c
 8002bc4:	08003520 	.word	0x08003520

08002bc8 <__retarget_lock_acquire_recursive>:
 8002bc8:	4770      	bx	lr

08002bca <__retarget_lock_release_recursive>:
 8002bca:	4770      	bx	lr

08002bcc <_free_r>:
 8002bcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002bce:	2900      	cmp	r1, #0
 8002bd0:	d044      	beq.n	8002c5c <_free_r+0x90>
 8002bd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bd6:	9001      	str	r0, [sp, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f1a1 0404 	sub.w	r4, r1, #4
 8002bde:	bfb8      	it	lt
 8002be0:	18e4      	addlt	r4, r4, r3
 8002be2:	f000 f8df 	bl	8002da4 <__malloc_lock>
 8002be6:	4a1e      	ldr	r2, [pc, #120]	; (8002c60 <_free_r+0x94>)
 8002be8:	9801      	ldr	r0, [sp, #4]
 8002bea:	6813      	ldr	r3, [r2, #0]
 8002bec:	b933      	cbnz	r3, 8002bfc <_free_r+0x30>
 8002bee:	6063      	str	r3, [r4, #4]
 8002bf0:	6014      	str	r4, [r2, #0]
 8002bf2:	b003      	add	sp, #12
 8002bf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002bf8:	f000 b8da 	b.w	8002db0 <__malloc_unlock>
 8002bfc:	42a3      	cmp	r3, r4
 8002bfe:	d908      	bls.n	8002c12 <_free_r+0x46>
 8002c00:	6825      	ldr	r5, [r4, #0]
 8002c02:	1961      	adds	r1, r4, r5
 8002c04:	428b      	cmp	r3, r1
 8002c06:	bf01      	itttt	eq
 8002c08:	6819      	ldreq	r1, [r3, #0]
 8002c0a:	685b      	ldreq	r3, [r3, #4]
 8002c0c:	1949      	addeq	r1, r1, r5
 8002c0e:	6021      	streq	r1, [r4, #0]
 8002c10:	e7ed      	b.n	8002bee <_free_r+0x22>
 8002c12:	461a      	mov	r2, r3
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	b10b      	cbz	r3, 8002c1c <_free_r+0x50>
 8002c18:	42a3      	cmp	r3, r4
 8002c1a:	d9fa      	bls.n	8002c12 <_free_r+0x46>
 8002c1c:	6811      	ldr	r1, [r2, #0]
 8002c1e:	1855      	adds	r5, r2, r1
 8002c20:	42a5      	cmp	r5, r4
 8002c22:	d10b      	bne.n	8002c3c <_free_r+0x70>
 8002c24:	6824      	ldr	r4, [r4, #0]
 8002c26:	4421      	add	r1, r4
 8002c28:	1854      	adds	r4, r2, r1
 8002c2a:	42a3      	cmp	r3, r4
 8002c2c:	6011      	str	r1, [r2, #0]
 8002c2e:	d1e0      	bne.n	8002bf2 <_free_r+0x26>
 8002c30:	681c      	ldr	r4, [r3, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	6053      	str	r3, [r2, #4]
 8002c36:	440c      	add	r4, r1
 8002c38:	6014      	str	r4, [r2, #0]
 8002c3a:	e7da      	b.n	8002bf2 <_free_r+0x26>
 8002c3c:	d902      	bls.n	8002c44 <_free_r+0x78>
 8002c3e:	230c      	movs	r3, #12
 8002c40:	6003      	str	r3, [r0, #0]
 8002c42:	e7d6      	b.n	8002bf2 <_free_r+0x26>
 8002c44:	6825      	ldr	r5, [r4, #0]
 8002c46:	1961      	adds	r1, r4, r5
 8002c48:	428b      	cmp	r3, r1
 8002c4a:	bf04      	itt	eq
 8002c4c:	6819      	ldreq	r1, [r3, #0]
 8002c4e:	685b      	ldreq	r3, [r3, #4]
 8002c50:	6063      	str	r3, [r4, #4]
 8002c52:	bf04      	itt	eq
 8002c54:	1949      	addeq	r1, r1, r5
 8002c56:	6021      	streq	r1, [r4, #0]
 8002c58:	6054      	str	r4, [r2, #4]
 8002c5a:	e7ca      	b.n	8002bf2 <_free_r+0x26>
 8002c5c:	b003      	add	sp, #12
 8002c5e:	bd30      	pop	{r4, r5, pc}
 8002c60:	20000248 	.word	0x20000248

08002c64 <sbrk_aligned>:
 8002c64:	b570      	push	{r4, r5, r6, lr}
 8002c66:	4e0e      	ldr	r6, [pc, #56]	; (8002ca0 <sbrk_aligned+0x3c>)
 8002c68:	460c      	mov	r4, r1
 8002c6a:	6831      	ldr	r1, [r6, #0]
 8002c6c:	4605      	mov	r5, r0
 8002c6e:	b911      	cbnz	r1, 8002c76 <sbrk_aligned+0x12>
 8002c70:	f000 fba6 	bl	80033c0 <_sbrk_r>
 8002c74:	6030      	str	r0, [r6, #0]
 8002c76:	4621      	mov	r1, r4
 8002c78:	4628      	mov	r0, r5
 8002c7a:	f000 fba1 	bl	80033c0 <_sbrk_r>
 8002c7e:	1c43      	adds	r3, r0, #1
 8002c80:	d00a      	beq.n	8002c98 <sbrk_aligned+0x34>
 8002c82:	1cc4      	adds	r4, r0, #3
 8002c84:	f024 0403 	bic.w	r4, r4, #3
 8002c88:	42a0      	cmp	r0, r4
 8002c8a:	d007      	beq.n	8002c9c <sbrk_aligned+0x38>
 8002c8c:	1a21      	subs	r1, r4, r0
 8002c8e:	4628      	mov	r0, r5
 8002c90:	f000 fb96 	bl	80033c0 <_sbrk_r>
 8002c94:	3001      	adds	r0, #1
 8002c96:	d101      	bne.n	8002c9c <sbrk_aligned+0x38>
 8002c98:	f04f 34ff 	mov.w	r4, #4294967295
 8002c9c:	4620      	mov	r0, r4
 8002c9e:	bd70      	pop	{r4, r5, r6, pc}
 8002ca0:	2000024c 	.word	0x2000024c

08002ca4 <_malloc_r>:
 8002ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ca8:	1ccd      	adds	r5, r1, #3
 8002caa:	f025 0503 	bic.w	r5, r5, #3
 8002cae:	3508      	adds	r5, #8
 8002cb0:	2d0c      	cmp	r5, #12
 8002cb2:	bf38      	it	cc
 8002cb4:	250c      	movcc	r5, #12
 8002cb6:	2d00      	cmp	r5, #0
 8002cb8:	4607      	mov	r7, r0
 8002cba:	db01      	blt.n	8002cc0 <_malloc_r+0x1c>
 8002cbc:	42a9      	cmp	r1, r5
 8002cbe:	d905      	bls.n	8002ccc <_malloc_r+0x28>
 8002cc0:	230c      	movs	r3, #12
 8002cc2:	603b      	str	r3, [r7, #0]
 8002cc4:	2600      	movs	r6, #0
 8002cc6:	4630      	mov	r0, r6
 8002cc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ccc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002da0 <_malloc_r+0xfc>
 8002cd0:	f000 f868 	bl	8002da4 <__malloc_lock>
 8002cd4:	f8d8 3000 	ldr.w	r3, [r8]
 8002cd8:	461c      	mov	r4, r3
 8002cda:	bb5c      	cbnz	r4, 8002d34 <_malloc_r+0x90>
 8002cdc:	4629      	mov	r1, r5
 8002cde:	4638      	mov	r0, r7
 8002ce0:	f7ff ffc0 	bl	8002c64 <sbrk_aligned>
 8002ce4:	1c43      	adds	r3, r0, #1
 8002ce6:	4604      	mov	r4, r0
 8002ce8:	d155      	bne.n	8002d96 <_malloc_r+0xf2>
 8002cea:	f8d8 4000 	ldr.w	r4, [r8]
 8002cee:	4626      	mov	r6, r4
 8002cf0:	2e00      	cmp	r6, #0
 8002cf2:	d145      	bne.n	8002d80 <_malloc_r+0xdc>
 8002cf4:	2c00      	cmp	r4, #0
 8002cf6:	d048      	beq.n	8002d8a <_malloc_r+0xe6>
 8002cf8:	6823      	ldr	r3, [r4, #0]
 8002cfa:	4631      	mov	r1, r6
 8002cfc:	4638      	mov	r0, r7
 8002cfe:	eb04 0903 	add.w	r9, r4, r3
 8002d02:	f000 fb5d 	bl	80033c0 <_sbrk_r>
 8002d06:	4581      	cmp	r9, r0
 8002d08:	d13f      	bne.n	8002d8a <_malloc_r+0xe6>
 8002d0a:	6821      	ldr	r1, [r4, #0]
 8002d0c:	1a6d      	subs	r5, r5, r1
 8002d0e:	4629      	mov	r1, r5
 8002d10:	4638      	mov	r0, r7
 8002d12:	f7ff ffa7 	bl	8002c64 <sbrk_aligned>
 8002d16:	3001      	adds	r0, #1
 8002d18:	d037      	beq.n	8002d8a <_malloc_r+0xe6>
 8002d1a:	6823      	ldr	r3, [r4, #0]
 8002d1c:	442b      	add	r3, r5
 8002d1e:	6023      	str	r3, [r4, #0]
 8002d20:	f8d8 3000 	ldr.w	r3, [r8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d038      	beq.n	8002d9a <_malloc_r+0xf6>
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	42a2      	cmp	r2, r4
 8002d2c:	d12b      	bne.n	8002d86 <_malloc_r+0xe2>
 8002d2e:	2200      	movs	r2, #0
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	e00f      	b.n	8002d54 <_malloc_r+0xb0>
 8002d34:	6822      	ldr	r2, [r4, #0]
 8002d36:	1b52      	subs	r2, r2, r5
 8002d38:	d41f      	bmi.n	8002d7a <_malloc_r+0xd6>
 8002d3a:	2a0b      	cmp	r2, #11
 8002d3c:	d917      	bls.n	8002d6e <_malloc_r+0xca>
 8002d3e:	1961      	adds	r1, r4, r5
 8002d40:	42a3      	cmp	r3, r4
 8002d42:	6025      	str	r5, [r4, #0]
 8002d44:	bf18      	it	ne
 8002d46:	6059      	strne	r1, [r3, #4]
 8002d48:	6863      	ldr	r3, [r4, #4]
 8002d4a:	bf08      	it	eq
 8002d4c:	f8c8 1000 	streq.w	r1, [r8]
 8002d50:	5162      	str	r2, [r4, r5]
 8002d52:	604b      	str	r3, [r1, #4]
 8002d54:	4638      	mov	r0, r7
 8002d56:	f104 060b 	add.w	r6, r4, #11
 8002d5a:	f000 f829 	bl	8002db0 <__malloc_unlock>
 8002d5e:	f026 0607 	bic.w	r6, r6, #7
 8002d62:	1d23      	adds	r3, r4, #4
 8002d64:	1af2      	subs	r2, r6, r3
 8002d66:	d0ae      	beq.n	8002cc6 <_malloc_r+0x22>
 8002d68:	1b9b      	subs	r3, r3, r6
 8002d6a:	50a3      	str	r3, [r4, r2]
 8002d6c:	e7ab      	b.n	8002cc6 <_malloc_r+0x22>
 8002d6e:	42a3      	cmp	r3, r4
 8002d70:	6862      	ldr	r2, [r4, #4]
 8002d72:	d1dd      	bne.n	8002d30 <_malloc_r+0x8c>
 8002d74:	f8c8 2000 	str.w	r2, [r8]
 8002d78:	e7ec      	b.n	8002d54 <_malloc_r+0xb0>
 8002d7a:	4623      	mov	r3, r4
 8002d7c:	6864      	ldr	r4, [r4, #4]
 8002d7e:	e7ac      	b.n	8002cda <_malloc_r+0x36>
 8002d80:	4634      	mov	r4, r6
 8002d82:	6876      	ldr	r6, [r6, #4]
 8002d84:	e7b4      	b.n	8002cf0 <_malloc_r+0x4c>
 8002d86:	4613      	mov	r3, r2
 8002d88:	e7cc      	b.n	8002d24 <_malloc_r+0x80>
 8002d8a:	230c      	movs	r3, #12
 8002d8c:	603b      	str	r3, [r7, #0]
 8002d8e:	4638      	mov	r0, r7
 8002d90:	f000 f80e 	bl	8002db0 <__malloc_unlock>
 8002d94:	e797      	b.n	8002cc6 <_malloc_r+0x22>
 8002d96:	6025      	str	r5, [r4, #0]
 8002d98:	e7dc      	b.n	8002d54 <_malloc_r+0xb0>
 8002d9a:	605b      	str	r3, [r3, #4]
 8002d9c:	deff      	udf	#255	; 0xff
 8002d9e:	bf00      	nop
 8002da0:	20000248 	.word	0x20000248

08002da4 <__malloc_lock>:
 8002da4:	4801      	ldr	r0, [pc, #4]	; (8002dac <__malloc_lock+0x8>)
 8002da6:	f7ff bf0f 	b.w	8002bc8 <__retarget_lock_acquire_recursive>
 8002daa:	bf00      	nop
 8002dac:	20000244 	.word	0x20000244

08002db0 <__malloc_unlock>:
 8002db0:	4801      	ldr	r0, [pc, #4]	; (8002db8 <__malloc_unlock+0x8>)
 8002db2:	f7ff bf0a 	b.w	8002bca <__retarget_lock_release_recursive>
 8002db6:	bf00      	nop
 8002db8:	20000244 	.word	0x20000244

08002dbc <__ssputs_r>:
 8002dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dc0:	688e      	ldr	r6, [r1, #8]
 8002dc2:	461f      	mov	r7, r3
 8002dc4:	42be      	cmp	r6, r7
 8002dc6:	680b      	ldr	r3, [r1, #0]
 8002dc8:	4682      	mov	sl, r0
 8002dca:	460c      	mov	r4, r1
 8002dcc:	4690      	mov	r8, r2
 8002dce:	d82c      	bhi.n	8002e2a <__ssputs_r+0x6e>
 8002dd0:	898a      	ldrh	r2, [r1, #12]
 8002dd2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002dd6:	d026      	beq.n	8002e26 <__ssputs_r+0x6a>
 8002dd8:	6965      	ldr	r5, [r4, #20]
 8002dda:	6909      	ldr	r1, [r1, #16]
 8002ddc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002de0:	eba3 0901 	sub.w	r9, r3, r1
 8002de4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002de8:	1c7b      	adds	r3, r7, #1
 8002dea:	444b      	add	r3, r9
 8002dec:	106d      	asrs	r5, r5, #1
 8002dee:	429d      	cmp	r5, r3
 8002df0:	bf38      	it	cc
 8002df2:	461d      	movcc	r5, r3
 8002df4:	0553      	lsls	r3, r2, #21
 8002df6:	d527      	bpl.n	8002e48 <__ssputs_r+0x8c>
 8002df8:	4629      	mov	r1, r5
 8002dfa:	f7ff ff53 	bl	8002ca4 <_malloc_r>
 8002dfe:	4606      	mov	r6, r0
 8002e00:	b360      	cbz	r0, 8002e5c <__ssputs_r+0xa0>
 8002e02:	6921      	ldr	r1, [r4, #16]
 8002e04:	464a      	mov	r2, r9
 8002e06:	f000 faeb 	bl	80033e0 <memcpy>
 8002e0a:	89a3      	ldrh	r3, [r4, #12]
 8002e0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e14:	81a3      	strh	r3, [r4, #12]
 8002e16:	6126      	str	r6, [r4, #16]
 8002e18:	6165      	str	r5, [r4, #20]
 8002e1a:	444e      	add	r6, r9
 8002e1c:	eba5 0509 	sub.w	r5, r5, r9
 8002e20:	6026      	str	r6, [r4, #0]
 8002e22:	60a5      	str	r5, [r4, #8]
 8002e24:	463e      	mov	r6, r7
 8002e26:	42be      	cmp	r6, r7
 8002e28:	d900      	bls.n	8002e2c <__ssputs_r+0x70>
 8002e2a:	463e      	mov	r6, r7
 8002e2c:	6820      	ldr	r0, [r4, #0]
 8002e2e:	4632      	mov	r2, r6
 8002e30:	4641      	mov	r1, r8
 8002e32:	f000 faab 	bl	800338c <memmove>
 8002e36:	68a3      	ldr	r3, [r4, #8]
 8002e38:	1b9b      	subs	r3, r3, r6
 8002e3a:	60a3      	str	r3, [r4, #8]
 8002e3c:	6823      	ldr	r3, [r4, #0]
 8002e3e:	4433      	add	r3, r6
 8002e40:	6023      	str	r3, [r4, #0]
 8002e42:	2000      	movs	r0, #0
 8002e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e48:	462a      	mov	r2, r5
 8002e4a:	f000 fad7 	bl	80033fc <_realloc_r>
 8002e4e:	4606      	mov	r6, r0
 8002e50:	2800      	cmp	r0, #0
 8002e52:	d1e0      	bne.n	8002e16 <__ssputs_r+0x5a>
 8002e54:	6921      	ldr	r1, [r4, #16]
 8002e56:	4650      	mov	r0, sl
 8002e58:	f7ff feb8 	bl	8002bcc <_free_r>
 8002e5c:	230c      	movs	r3, #12
 8002e5e:	f8ca 3000 	str.w	r3, [sl]
 8002e62:	89a3      	ldrh	r3, [r4, #12]
 8002e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e68:	81a3      	strh	r3, [r4, #12]
 8002e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e6e:	e7e9      	b.n	8002e44 <__ssputs_r+0x88>

08002e70 <_svfiprintf_r>:
 8002e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e74:	4698      	mov	r8, r3
 8002e76:	898b      	ldrh	r3, [r1, #12]
 8002e78:	061b      	lsls	r3, r3, #24
 8002e7a:	b09d      	sub	sp, #116	; 0x74
 8002e7c:	4607      	mov	r7, r0
 8002e7e:	460d      	mov	r5, r1
 8002e80:	4614      	mov	r4, r2
 8002e82:	d50e      	bpl.n	8002ea2 <_svfiprintf_r+0x32>
 8002e84:	690b      	ldr	r3, [r1, #16]
 8002e86:	b963      	cbnz	r3, 8002ea2 <_svfiprintf_r+0x32>
 8002e88:	2140      	movs	r1, #64	; 0x40
 8002e8a:	f7ff ff0b 	bl	8002ca4 <_malloc_r>
 8002e8e:	6028      	str	r0, [r5, #0]
 8002e90:	6128      	str	r0, [r5, #16]
 8002e92:	b920      	cbnz	r0, 8002e9e <_svfiprintf_r+0x2e>
 8002e94:	230c      	movs	r3, #12
 8002e96:	603b      	str	r3, [r7, #0]
 8002e98:	f04f 30ff 	mov.w	r0, #4294967295
 8002e9c:	e0d0      	b.n	8003040 <_svfiprintf_r+0x1d0>
 8002e9e:	2340      	movs	r3, #64	; 0x40
 8002ea0:	616b      	str	r3, [r5, #20]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8002ea6:	2320      	movs	r3, #32
 8002ea8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002eac:	f8cd 800c 	str.w	r8, [sp, #12]
 8002eb0:	2330      	movs	r3, #48	; 0x30
 8002eb2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003058 <_svfiprintf_r+0x1e8>
 8002eb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002eba:	f04f 0901 	mov.w	r9, #1
 8002ebe:	4623      	mov	r3, r4
 8002ec0:	469a      	mov	sl, r3
 8002ec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ec6:	b10a      	cbz	r2, 8002ecc <_svfiprintf_r+0x5c>
 8002ec8:	2a25      	cmp	r2, #37	; 0x25
 8002eca:	d1f9      	bne.n	8002ec0 <_svfiprintf_r+0x50>
 8002ecc:	ebba 0b04 	subs.w	fp, sl, r4
 8002ed0:	d00b      	beq.n	8002eea <_svfiprintf_r+0x7a>
 8002ed2:	465b      	mov	r3, fp
 8002ed4:	4622      	mov	r2, r4
 8002ed6:	4629      	mov	r1, r5
 8002ed8:	4638      	mov	r0, r7
 8002eda:	f7ff ff6f 	bl	8002dbc <__ssputs_r>
 8002ede:	3001      	adds	r0, #1
 8002ee0:	f000 80a9 	beq.w	8003036 <_svfiprintf_r+0x1c6>
 8002ee4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ee6:	445a      	add	r2, fp
 8002ee8:	9209      	str	r2, [sp, #36]	; 0x24
 8002eea:	f89a 3000 	ldrb.w	r3, [sl]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 80a1 	beq.w	8003036 <_svfiprintf_r+0x1c6>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8002efa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002efe:	f10a 0a01 	add.w	sl, sl, #1
 8002f02:	9304      	str	r3, [sp, #16]
 8002f04:	9307      	str	r3, [sp, #28]
 8002f06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f0a:	931a      	str	r3, [sp, #104]	; 0x68
 8002f0c:	4654      	mov	r4, sl
 8002f0e:	2205      	movs	r2, #5
 8002f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f14:	4850      	ldr	r0, [pc, #320]	; (8003058 <_svfiprintf_r+0x1e8>)
 8002f16:	f7fd f963 	bl	80001e0 <memchr>
 8002f1a:	9a04      	ldr	r2, [sp, #16]
 8002f1c:	b9d8      	cbnz	r0, 8002f56 <_svfiprintf_r+0xe6>
 8002f1e:	06d0      	lsls	r0, r2, #27
 8002f20:	bf44      	itt	mi
 8002f22:	2320      	movmi	r3, #32
 8002f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f28:	0711      	lsls	r1, r2, #28
 8002f2a:	bf44      	itt	mi
 8002f2c:	232b      	movmi	r3, #43	; 0x2b
 8002f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f32:	f89a 3000 	ldrb.w	r3, [sl]
 8002f36:	2b2a      	cmp	r3, #42	; 0x2a
 8002f38:	d015      	beq.n	8002f66 <_svfiprintf_r+0xf6>
 8002f3a:	9a07      	ldr	r2, [sp, #28]
 8002f3c:	4654      	mov	r4, sl
 8002f3e:	2000      	movs	r0, #0
 8002f40:	f04f 0c0a 	mov.w	ip, #10
 8002f44:	4621      	mov	r1, r4
 8002f46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f4a:	3b30      	subs	r3, #48	; 0x30
 8002f4c:	2b09      	cmp	r3, #9
 8002f4e:	d94d      	bls.n	8002fec <_svfiprintf_r+0x17c>
 8002f50:	b1b0      	cbz	r0, 8002f80 <_svfiprintf_r+0x110>
 8002f52:	9207      	str	r2, [sp, #28]
 8002f54:	e014      	b.n	8002f80 <_svfiprintf_r+0x110>
 8002f56:	eba0 0308 	sub.w	r3, r0, r8
 8002f5a:	fa09 f303 	lsl.w	r3, r9, r3
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	9304      	str	r3, [sp, #16]
 8002f62:	46a2      	mov	sl, r4
 8002f64:	e7d2      	b.n	8002f0c <_svfiprintf_r+0x9c>
 8002f66:	9b03      	ldr	r3, [sp, #12]
 8002f68:	1d19      	adds	r1, r3, #4
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	9103      	str	r1, [sp, #12]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	bfbb      	ittet	lt
 8002f72:	425b      	neglt	r3, r3
 8002f74:	f042 0202 	orrlt.w	r2, r2, #2
 8002f78:	9307      	strge	r3, [sp, #28]
 8002f7a:	9307      	strlt	r3, [sp, #28]
 8002f7c:	bfb8      	it	lt
 8002f7e:	9204      	strlt	r2, [sp, #16]
 8002f80:	7823      	ldrb	r3, [r4, #0]
 8002f82:	2b2e      	cmp	r3, #46	; 0x2e
 8002f84:	d10c      	bne.n	8002fa0 <_svfiprintf_r+0x130>
 8002f86:	7863      	ldrb	r3, [r4, #1]
 8002f88:	2b2a      	cmp	r3, #42	; 0x2a
 8002f8a:	d134      	bne.n	8002ff6 <_svfiprintf_r+0x186>
 8002f8c:	9b03      	ldr	r3, [sp, #12]
 8002f8e:	1d1a      	adds	r2, r3, #4
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	9203      	str	r2, [sp, #12]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bfb8      	it	lt
 8002f98:	f04f 33ff 	movlt.w	r3, #4294967295
 8002f9c:	3402      	adds	r4, #2
 8002f9e:	9305      	str	r3, [sp, #20]
 8002fa0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003068 <_svfiprintf_r+0x1f8>
 8002fa4:	7821      	ldrb	r1, [r4, #0]
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	4650      	mov	r0, sl
 8002faa:	f7fd f919 	bl	80001e0 <memchr>
 8002fae:	b138      	cbz	r0, 8002fc0 <_svfiprintf_r+0x150>
 8002fb0:	9b04      	ldr	r3, [sp, #16]
 8002fb2:	eba0 000a 	sub.w	r0, r0, sl
 8002fb6:	2240      	movs	r2, #64	; 0x40
 8002fb8:	4082      	lsls	r2, r0
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	3401      	adds	r4, #1
 8002fbe:	9304      	str	r3, [sp, #16]
 8002fc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fc4:	4825      	ldr	r0, [pc, #148]	; (800305c <_svfiprintf_r+0x1ec>)
 8002fc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002fca:	2206      	movs	r2, #6
 8002fcc:	f7fd f908 	bl	80001e0 <memchr>
 8002fd0:	2800      	cmp	r0, #0
 8002fd2:	d038      	beq.n	8003046 <_svfiprintf_r+0x1d6>
 8002fd4:	4b22      	ldr	r3, [pc, #136]	; (8003060 <_svfiprintf_r+0x1f0>)
 8002fd6:	bb1b      	cbnz	r3, 8003020 <_svfiprintf_r+0x1b0>
 8002fd8:	9b03      	ldr	r3, [sp, #12]
 8002fda:	3307      	adds	r3, #7
 8002fdc:	f023 0307 	bic.w	r3, r3, #7
 8002fe0:	3308      	adds	r3, #8
 8002fe2:	9303      	str	r3, [sp, #12]
 8002fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fe6:	4433      	add	r3, r6
 8002fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8002fea:	e768      	b.n	8002ebe <_svfiprintf_r+0x4e>
 8002fec:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ff0:	460c      	mov	r4, r1
 8002ff2:	2001      	movs	r0, #1
 8002ff4:	e7a6      	b.n	8002f44 <_svfiprintf_r+0xd4>
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	3401      	adds	r4, #1
 8002ffa:	9305      	str	r3, [sp, #20]
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	f04f 0c0a 	mov.w	ip, #10
 8003002:	4620      	mov	r0, r4
 8003004:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003008:	3a30      	subs	r2, #48	; 0x30
 800300a:	2a09      	cmp	r2, #9
 800300c:	d903      	bls.n	8003016 <_svfiprintf_r+0x1a6>
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0c6      	beq.n	8002fa0 <_svfiprintf_r+0x130>
 8003012:	9105      	str	r1, [sp, #20]
 8003014:	e7c4      	b.n	8002fa0 <_svfiprintf_r+0x130>
 8003016:	fb0c 2101 	mla	r1, ip, r1, r2
 800301a:	4604      	mov	r4, r0
 800301c:	2301      	movs	r3, #1
 800301e:	e7f0      	b.n	8003002 <_svfiprintf_r+0x192>
 8003020:	ab03      	add	r3, sp, #12
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	462a      	mov	r2, r5
 8003026:	4b0f      	ldr	r3, [pc, #60]	; (8003064 <_svfiprintf_r+0x1f4>)
 8003028:	a904      	add	r1, sp, #16
 800302a:	4638      	mov	r0, r7
 800302c:	f3af 8000 	nop.w
 8003030:	1c42      	adds	r2, r0, #1
 8003032:	4606      	mov	r6, r0
 8003034:	d1d6      	bne.n	8002fe4 <_svfiprintf_r+0x174>
 8003036:	89ab      	ldrh	r3, [r5, #12]
 8003038:	065b      	lsls	r3, r3, #25
 800303a:	f53f af2d 	bmi.w	8002e98 <_svfiprintf_r+0x28>
 800303e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003040:	b01d      	add	sp, #116	; 0x74
 8003042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003046:	ab03      	add	r3, sp, #12
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	462a      	mov	r2, r5
 800304c:	4b05      	ldr	r3, [pc, #20]	; (8003064 <_svfiprintf_r+0x1f4>)
 800304e:	a904      	add	r1, sp, #16
 8003050:	4638      	mov	r0, r7
 8003052:	f000 f879 	bl	8003148 <_printf_i>
 8003056:	e7eb      	b.n	8003030 <_svfiprintf_r+0x1c0>
 8003058:	080034e8 	.word	0x080034e8
 800305c:	080034f2 	.word	0x080034f2
 8003060:	00000000 	.word	0x00000000
 8003064:	08002dbd 	.word	0x08002dbd
 8003068:	080034ee 	.word	0x080034ee

0800306c <_printf_common>:
 800306c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003070:	4616      	mov	r6, r2
 8003072:	4699      	mov	r9, r3
 8003074:	688a      	ldr	r2, [r1, #8]
 8003076:	690b      	ldr	r3, [r1, #16]
 8003078:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800307c:	4293      	cmp	r3, r2
 800307e:	bfb8      	it	lt
 8003080:	4613      	movlt	r3, r2
 8003082:	6033      	str	r3, [r6, #0]
 8003084:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003088:	4607      	mov	r7, r0
 800308a:	460c      	mov	r4, r1
 800308c:	b10a      	cbz	r2, 8003092 <_printf_common+0x26>
 800308e:	3301      	adds	r3, #1
 8003090:	6033      	str	r3, [r6, #0]
 8003092:	6823      	ldr	r3, [r4, #0]
 8003094:	0699      	lsls	r1, r3, #26
 8003096:	bf42      	ittt	mi
 8003098:	6833      	ldrmi	r3, [r6, #0]
 800309a:	3302      	addmi	r3, #2
 800309c:	6033      	strmi	r3, [r6, #0]
 800309e:	6825      	ldr	r5, [r4, #0]
 80030a0:	f015 0506 	ands.w	r5, r5, #6
 80030a4:	d106      	bne.n	80030b4 <_printf_common+0x48>
 80030a6:	f104 0a19 	add.w	sl, r4, #25
 80030aa:	68e3      	ldr	r3, [r4, #12]
 80030ac:	6832      	ldr	r2, [r6, #0]
 80030ae:	1a9b      	subs	r3, r3, r2
 80030b0:	42ab      	cmp	r3, r5
 80030b2:	dc26      	bgt.n	8003102 <_printf_common+0x96>
 80030b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80030b8:	1e13      	subs	r3, r2, #0
 80030ba:	6822      	ldr	r2, [r4, #0]
 80030bc:	bf18      	it	ne
 80030be:	2301      	movne	r3, #1
 80030c0:	0692      	lsls	r2, r2, #26
 80030c2:	d42b      	bmi.n	800311c <_printf_common+0xb0>
 80030c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030c8:	4649      	mov	r1, r9
 80030ca:	4638      	mov	r0, r7
 80030cc:	47c0      	blx	r8
 80030ce:	3001      	adds	r0, #1
 80030d0:	d01e      	beq.n	8003110 <_printf_common+0xa4>
 80030d2:	6823      	ldr	r3, [r4, #0]
 80030d4:	6922      	ldr	r2, [r4, #16]
 80030d6:	f003 0306 	and.w	r3, r3, #6
 80030da:	2b04      	cmp	r3, #4
 80030dc:	bf02      	ittt	eq
 80030de:	68e5      	ldreq	r5, [r4, #12]
 80030e0:	6833      	ldreq	r3, [r6, #0]
 80030e2:	1aed      	subeq	r5, r5, r3
 80030e4:	68a3      	ldr	r3, [r4, #8]
 80030e6:	bf0c      	ite	eq
 80030e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030ec:	2500      	movne	r5, #0
 80030ee:	4293      	cmp	r3, r2
 80030f0:	bfc4      	itt	gt
 80030f2:	1a9b      	subgt	r3, r3, r2
 80030f4:	18ed      	addgt	r5, r5, r3
 80030f6:	2600      	movs	r6, #0
 80030f8:	341a      	adds	r4, #26
 80030fa:	42b5      	cmp	r5, r6
 80030fc:	d11a      	bne.n	8003134 <_printf_common+0xc8>
 80030fe:	2000      	movs	r0, #0
 8003100:	e008      	b.n	8003114 <_printf_common+0xa8>
 8003102:	2301      	movs	r3, #1
 8003104:	4652      	mov	r2, sl
 8003106:	4649      	mov	r1, r9
 8003108:	4638      	mov	r0, r7
 800310a:	47c0      	blx	r8
 800310c:	3001      	adds	r0, #1
 800310e:	d103      	bne.n	8003118 <_printf_common+0xac>
 8003110:	f04f 30ff 	mov.w	r0, #4294967295
 8003114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003118:	3501      	adds	r5, #1
 800311a:	e7c6      	b.n	80030aa <_printf_common+0x3e>
 800311c:	18e1      	adds	r1, r4, r3
 800311e:	1c5a      	adds	r2, r3, #1
 8003120:	2030      	movs	r0, #48	; 0x30
 8003122:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003126:	4422      	add	r2, r4
 8003128:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800312c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003130:	3302      	adds	r3, #2
 8003132:	e7c7      	b.n	80030c4 <_printf_common+0x58>
 8003134:	2301      	movs	r3, #1
 8003136:	4622      	mov	r2, r4
 8003138:	4649      	mov	r1, r9
 800313a:	4638      	mov	r0, r7
 800313c:	47c0      	blx	r8
 800313e:	3001      	adds	r0, #1
 8003140:	d0e6      	beq.n	8003110 <_printf_common+0xa4>
 8003142:	3601      	adds	r6, #1
 8003144:	e7d9      	b.n	80030fa <_printf_common+0x8e>
	...

08003148 <_printf_i>:
 8003148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800314c:	7e0f      	ldrb	r7, [r1, #24]
 800314e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003150:	2f78      	cmp	r7, #120	; 0x78
 8003152:	4691      	mov	r9, r2
 8003154:	4680      	mov	r8, r0
 8003156:	460c      	mov	r4, r1
 8003158:	469a      	mov	sl, r3
 800315a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800315e:	d807      	bhi.n	8003170 <_printf_i+0x28>
 8003160:	2f62      	cmp	r7, #98	; 0x62
 8003162:	d80a      	bhi.n	800317a <_printf_i+0x32>
 8003164:	2f00      	cmp	r7, #0
 8003166:	f000 80d4 	beq.w	8003312 <_printf_i+0x1ca>
 800316a:	2f58      	cmp	r7, #88	; 0x58
 800316c:	f000 80c0 	beq.w	80032f0 <_printf_i+0x1a8>
 8003170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003174:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003178:	e03a      	b.n	80031f0 <_printf_i+0xa8>
 800317a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800317e:	2b15      	cmp	r3, #21
 8003180:	d8f6      	bhi.n	8003170 <_printf_i+0x28>
 8003182:	a101      	add	r1, pc, #4	; (adr r1, 8003188 <_printf_i+0x40>)
 8003184:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003188:	080031e1 	.word	0x080031e1
 800318c:	080031f5 	.word	0x080031f5
 8003190:	08003171 	.word	0x08003171
 8003194:	08003171 	.word	0x08003171
 8003198:	08003171 	.word	0x08003171
 800319c:	08003171 	.word	0x08003171
 80031a0:	080031f5 	.word	0x080031f5
 80031a4:	08003171 	.word	0x08003171
 80031a8:	08003171 	.word	0x08003171
 80031ac:	08003171 	.word	0x08003171
 80031b0:	08003171 	.word	0x08003171
 80031b4:	080032f9 	.word	0x080032f9
 80031b8:	08003221 	.word	0x08003221
 80031bc:	080032b3 	.word	0x080032b3
 80031c0:	08003171 	.word	0x08003171
 80031c4:	08003171 	.word	0x08003171
 80031c8:	0800331b 	.word	0x0800331b
 80031cc:	08003171 	.word	0x08003171
 80031d0:	08003221 	.word	0x08003221
 80031d4:	08003171 	.word	0x08003171
 80031d8:	08003171 	.word	0x08003171
 80031dc:	080032bb 	.word	0x080032bb
 80031e0:	682b      	ldr	r3, [r5, #0]
 80031e2:	1d1a      	adds	r2, r3, #4
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	602a      	str	r2, [r5, #0]
 80031e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031f0:	2301      	movs	r3, #1
 80031f2:	e09f      	b.n	8003334 <_printf_i+0x1ec>
 80031f4:	6820      	ldr	r0, [r4, #0]
 80031f6:	682b      	ldr	r3, [r5, #0]
 80031f8:	0607      	lsls	r7, r0, #24
 80031fa:	f103 0104 	add.w	r1, r3, #4
 80031fe:	6029      	str	r1, [r5, #0]
 8003200:	d501      	bpl.n	8003206 <_printf_i+0xbe>
 8003202:	681e      	ldr	r6, [r3, #0]
 8003204:	e003      	b.n	800320e <_printf_i+0xc6>
 8003206:	0646      	lsls	r6, r0, #25
 8003208:	d5fb      	bpl.n	8003202 <_printf_i+0xba>
 800320a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800320e:	2e00      	cmp	r6, #0
 8003210:	da03      	bge.n	800321a <_printf_i+0xd2>
 8003212:	232d      	movs	r3, #45	; 0x2d
 8003214:	4276      	negs	r6, r6
 8003216:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800321a:	485a      	ldr	r0, [pc, #360]	; (8003384 <_printf_i+0x23c>)
 800321c:	230a      	movs	r3, #10
 800321e:	e012      	b.n	8003246 <_printf_i+0xfe>
 8003220:	682b      	ldr	r3, [r5, #0]
 8003222:	6820      	ldr	r0, [r4, #0]
 8003224:	1d19      	adds	r1, r3, #4
 8003226:	6029      	str	r1, [r5, #0]
 8003228:	0605      	lsls	r5, r0, #24
 800322a:	d501      	bpl.n	8003230 <_printf_i+0xe8>
 800322c:	681e      	ldr	r6, [r3, #0]
 800322e:	e002      	b.n	8003236 <_printf_i+0xee>
 8003230:	0641      	lsls	r1, r0, #25
 8003232:	d5fb      	bpl.n	800322c <_printf_i+0xe4>
 8003234:	881e      	ldrh	r6, [r3, #0]
 8003236:	4853      	ldr	r0, [pc, #332]	; (8003384 <_printf_i+0x23c>)
 8003238:	2f6f      	cmp	r7, #111	; 0x6f
 800323a:	bf0c      	ite	eq
 800323c:	2308      	moveq	r3, #8
 800323e:	230a      	movne	r3, #10
 8003240:	2100      	movs	r1, #0
 8003242:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003246:	6865      	ldr	r5, [r4, #4]
 8003248:	60a5      	str	r5, [r4, #8]
 800324a:	2d00      	cmp	r5, #0
 800324c:	bfa2      	ittt	ge
 800324e:	6821      	ldrge	r1, [r4, #0]
 8003250:	f021 0104 	bicge.w	r1, r1, #4
 8003254:	6021      	strge	r1, [r4, #0]
 8003256:	b90e      	cbnz	r6, 800325c <_printf_i+0x114>
 8003258:	2d00      	cmp	r5, #0
 800325a:	d04b      	beq.n	80032f4 <_printf_i+0x1ac>
 800325c:	4615      	mov	r5, r2
 800325e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003262:	fb03 6711 	mls	r7, r3, r1, r6
 8003266:	5dc7      	ldrb	r7, [r0, r7]
 8003268:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800326c:	4637      	mov	r7, r6
 800326e:	42bb      	cmp	r3, r7
 8003270:	460e      	mov	r6, r1
 8003272:	d9f4      	bls.n	800325e <_printf_i+0x116>
 8003274:	2b08      	cmp	r3, #8
 8003276:	d10b      	bne.n	8003290 <_printf_i+0x148>
 8003278:	6823      	ldr	r3, [r4, #0]
 800327a:	07de      	lsls	r6, r3, #31
 800327c:	d508      	bpl.n	8003290 <_printf_i+0x148>
 800327e:	6923      	ldr	r3, [r4, #16]
 8003280:	6861      	ldr	r1, [r4, #4]
 8003282:	4299      	cmp	r1, r3
 8003284:	bfde      	ittt	le
 8003286:	2330      	movle	r3, #48	; 0x30
 8003288:	f805 3c01 	strble.w	r3, [r5, #-1]
 800328c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003290:	1b52      	subs	r2, r2, r5
 8003292:	6122      	str	r2, [r4, #16]
 8003294:	f8cd a000 	str.w	sl, [sp]
 8003298:	464b      	mov	r3, r9
 800329a:	aa03      	add	r2, sp, #12
 800329c:	4621      	mov	r1, r4
 800329e:	4640      	mov	r0, r8
 80032a0:	f7ff fee4 	bl	800306c <_printf_common>
 80032a4:	3001      	adds	r0, #1
 80032a6:	d14a      	bne.n	800333e <_printf_i+0x1f6>
 80032a8:	f04f 30ff 	mov.w	r0, #4294967295
 80032ac:	b004      	add	sp, #16
 80032ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032b2:	6823      	ldr	r3, [r4, #0]
 80032b4:	f043 0320 	orr.w	r3, r3, #32
 80032b8:	6023      	str	r3, [r4, #0]
 80032ba:	4833      	ldr	r0, [pc, #204]	; (8003388 <_printf_i+0x240>)
 80032bc:	2778      	movs	r7, #120	; 0x78
 80032be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80032c2:	6823      	ldr	r3, [r4, #0]
 80032c4:	6829      	ldr	r1, [r5, #0]
 80032c6:	061f      	lsls	r7, r3, #24
 80032c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80032cc:	d402      	bmi.n	80032d4 <_printf_i+0x18c>
 80032ce:	065f      	lsls	r7, r3, #25
 80032d0:	bf48      	it	mi
 80032d2:	b2b6      	uxthmi	r6, r6
 80032d4:	07df      	lsls	r7, r3, #31
 80032d6:	bf48      	it	mi
 80032d8:	f043 0320 	orrmi.w	r3, r3, #32
 80032dc:	6029      	str	r1, [r5, #0]
 80032de:	bf48      	it	mi
 80032e0:	6023      	strmi	r3, [r4, #0]
 80032e2:	b91e      	cbnz	r6, 80032ec <_printf_i+0x1a4>
 80032e4:	6823      	ldr	r3, [r4, #0]
 80032e6:	f023 0320 	bic.w	r3, r3, #32
 80032ea:	6023      	str	r3, [r4, #0]
 80032ec:	2310      	movs	r3, #16
 80032ee:	e7a7      	b.n	8003240 <_printf_i+0xf8>
 80032f0:	4824      	ldr	r0, [pc, #144]	; (8003384 <_printf_i+0x23c>)
 80032f2:	e7e4      	b.n	80032be <_printf_i+0x176>
 80032f4:	4615      	mov	r5, r2
 80032f6:	e7bd      	b.n	8003274 <_printf_i+0x12c>
 80032f8:	682b      	ldr	r3, [r5, #0]
 80032fa:	6826      	ldr	r6, [r4, #0]
 80032fc:	6961      	ldr	r1, [r4, #20]
 80032fe:	1d18      	adds	r0, r3, #4
 8003300:	6028      	str	r0, [r5, #0]
 8003302:	0635      	lsls	r5, r6, #24
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	d501      	bpl.n	800330c <_printf_i+0x1c4>
 8003308:	6019      	str	r1, [r3, #0]
 800330a:	e002      	b.n	8003312 <_printf_i+0x1ca>
 800330c:	0670      	lsls	r0, r6, #25
 800330e:	d5fb      	bpl.n	8003308 <_printf_i+0x1c0>
 8003310:	8019      	strh	r1, [r3, #0]
 8003312:	2300      	movs	r3, #0
 8003314:	6123      	str	r3, [r4, #16]
 8003316:	4615      	mov	r5, r2
 8003318:	e7bc      	b.n	8003294 <_printf_i+0x14c>
 800331a:	682b      	ldr	r3, [r5, #0]
 800331c:	1d1a      	adds	r2, r3, #4
 800331e:	602a      	str	r2, [r5, #0]
 8003320:	681d      	ldr	r5, [r3, #0]
 8003322:	6862      	ldr	r2, [r4, #4]
 8003324:	2100      	movs	r1, #0
 8003326:	4628      	mov	r0, r5
 8003328:	f7fc ff5a 	bl	80001e0 <memchr>
 800332c:	b108      	cbz	r0, 8003332 <_printf_i+0x1ea>
 800332e:	1b40      	subs	r0, r0, r5
 8003330:	6060      	str	r0, [r4, #4]
 8003332:	6863      	ldr	r3, [r4, #4]
 8003334:	6123      	str	r3, [r4, #16]
 8003336:	2300      	movs	r3, #0
 8003338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800333c:	e7aa      	b.n	8003294 <_printf_i+0x14c>
 800333e:	6923      	ldr	r3, [r4, #16]
 8003340:	462a      	mov	r2, r5
 8003342:	4649      	mov	r1, r9
 8003344:	4640      	mov	r0, r8
 8003346:	47d0      	blx	sl
 8003348:	3001      	adds	r0, #1
 800334a:	d0ad      	beq.n	80032a8 <_printf_i+0x160>
 800334c:	6823      	ldr	r3, [r4, #0]
 800334e:	079b      	lsls	r3, r3, #30
 8003350:	d413      	bmi.n	800337a <_printf_i+0x232>
 8003352:	68e0      	ldr	r0, [r4, #12]
 8003354:	9b03      	ldr	r3, [sp, #12]
 8003356:	4298      	cmp	r0, r3
 8003358:	bfb8      	it	lt
 800335a:	4618      	movlt	r0, r3
 800335c:	e7a6      	b.n	80032ac <_printf_i+0x164>
 800335e:	2301      	movs	r3, #1
 8003360:	4632      	mov	r2, r6
 8003362:	4649      	mov	r1, r9
 8003364:	4640      	mov	r0, r8
 8003366:	47d0      	blx	sl
 8003368:	3001      	adds	r0, #1
 800336a:	d09d      	beq.n	80032a8 <_printf_i+0x160>
 800336c:	3501      	adds	r5, #1
 800336e:	68e3      	ldr	r3, [r4, #12]
 8003370:	9903      	ldr	r1, [sp, #12]
 8003372:	1a5b      	subs	r3, r3, r1
 8003374:	42ab      	cmp	r3, r5
 8003376:	dcf2      	bgt.n	800335e <_printf_i+0x216>
 8003378:	e7eb      	b.n	8003352 <_printf_i+0x20a>
 800337a:	2500      	movs	r5, #0
 800337c:	f104 0619 	add.w	r6, r4, #25
 8003380:	e7f5      	b.n	800336e <_printf_i+0x226>
 8003382:	bf00      	nop
 8003384:	080034f9 	.word	0x080034f9
 8003388:	0800350a 	.word	0x0800350a

0800338c <memmove>:
 800338c:	4288      	cmp	r0, r1
 800338e:	b510      	push	{r4, lr}
 8003390:	eb01 0402 	add.w	r4, r1, r2
 8003394:	d902      	bls.n	800339c <memmove+0x10>
 8003396:	4284      	cmp	r4, r0
 8003398:	4623      	mov	r3, r4
 800339a:	d807      	bhi.n	80033ac <memmove+0x20>
 800339c:	1e43      	subs	r3, r0, #1
 800339e:	42a1      	cmp	r1, r4
 80033a0:	d008      	beq.n	80033b4 <memmove+0x28>
 80033a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80033a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80033aa:	e7f8      	b.n	800339e <memmove+0x12>
 80033ac:	4402      	add	r2, r0
 80033ae:	4601      	mov	r1, r0
 80033b0:	428a      	cmp	r2, r1
 80033b2:	d100      	bne.n	80033b6 <memmove+0x2a>
 80033b4:	bd10      	pop	{r4, pc}
 80033b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80033ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80033be:	e7f7      	b.n	80033b0 <memmove+0x24>

080033c0 <_sbrk_r>:
 80033c0:	b538      	push	{r3, r4, r5, lr}
 80033c2:	4d06      	ldr	r5, [pc, #24]	; (80033dc <_sbrk_r+0x1c>)
 80033c4:	2300      	movs	r3, #0
 80033c6:	4604      	mov	r4, r0
 80033c8:	4608      	mov	r0, r1
 80033ca:	602b      	str	r3, [r5, #0]
 80033cc:	f7fd f97a 	bl	80006c4 <_sbrk>
 80033d0:	1c43      	adds	r3, r0, #1
 80033d2:	d102      	bne.n	80033da <_sbrk_r+0x1a>
 80033d4:	682b      	ldr	r3, [r5, #0]
 80033d6:	b103      	cbz	r3, 80033da <_sbrk_r+0x1a>
 80033d8:	6023      	str	r3, [r4, #0]
 80033da:	bd38      	pop	{r3, r4, r5, pc}
 80033dc:	20000240 	.word	0x20000240

080033e0 <memcpy>:
 80033e0:	440a      	add	r2, r1
 80033e2:	4291      	cmp	r1, r2
 80033e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80033e8:	d100      	bne.n	80033ec <memcpy+0xc>
 80033ea:	4770      	bx	lr
 80033ec:	b510      	push	{r4, lr}
 80033ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033f6:	4291      	cmp	r1, r2
 80033f8:	d1f9      	bne.n	80033ee <memcpy+0xe>
 80033fa:	bd10      	pop	{r4, pc}

080033fc <_realloc_r>:
 80033fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003400:	4680      	mov	r8, r0
 8003402:	4614      	mov	r4, r2
 8003404:	460e      	mov	r6, r1
 8003406:	b921      	cbnz	r1, 8003412 <_realloc_r+0x16>
 8003408:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800340c:	4611      	mov	r1, r2
 800340e:	f7ff bc49 	b.w	8002ca4 <_malloc_r>
 8003412:	b92a      	cbnz	r2, 8003420 <_realloc_r+0x24>
 8003414:	f7ff fbda 	bl	8002bcc <_free_r>
 8003418:	4625      	mov	r5, r4
 800341a:	4628      	mov	r0, r5
 800341c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003420:	f000 f81b 	bl	800345a <_malloc_usable_size_r>
 8003424:	4284      	cmp	r4, r0
 8003426:	4607      	mov	r7, r0
 8003428:	d802      	bhi.n	8003430 <_realloc_r+0x34>
 800342a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800342e:	d812      	bhi.n	8003456 <_realloc_r+0x5a>
 8003430:	4621      	mov	r1, r4
 8003432:	4640      	mov	r0, r8
 8003434:	f7ff fc36 	bl	8002ca4 <_malloc_r>
 8003438:	4605      	mov	r5, r0
 800343a:	2800      	cmp	r0, #0
 800343c:	d0ed      	beq.n	800341a <_realloc_r+0x1e>
 800343e:	42bc      	cmp	r4, r7
 8003440:	4622      	mov	r2, r4
 8003442:	4631      	mov	r1, r6
 8003444:	bf28      	it	cs
 8003446:	463a      	movcs	r2, r7
 8003448:	f7ff ffca 	bl	80033e0 <memcpy>
 800344c:	4631      	mov	r1, r6
 800344e:	4640      	mov	r0, r8
 8003450:	f7ff fbbc 	bl	8002bcc <_free_r>
 8003454:	e7e1      	b.n	800341a <_realloc_r+0x1e>
 8003456:	4635      	mov	r5, r6
 8003458:	e7df      	b.n	800341a <_realloc_r+0x1e>

0800345a <_malloc_usable_size_r>:
 800345a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800345e:	1f18      	subs	r0, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	bfbc      	itt	lt
 8003464:	580b      	ldrlt	r3, [r1, r0]
 8003466:	18c0      	addlt	r0, r0, r3
 8003468:	4770      	bx	lr
	...

0800346c <_init>:
 800346c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800346e:	bf00      	nop
 8003470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003472:	bc08      	pop	{r3}
 8003474:	469e      	mov	lr, r3
 8003476:	4770      	bx	lr

08003478 <_fini>:
 8003478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347a:	bf00      	nop
 800347c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800347e:	bc08      	pop	{r3}
 8003480:	469e      	mov	lr, r3
 8003482:	4770      	bx	lr
