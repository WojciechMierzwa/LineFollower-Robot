
Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040c8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004250  08004250  00005250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004288  08004288  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004288  08004288  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004288  08004288  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004288  08004288  00005288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800428c  0800428c  0000528c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004290  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  2000000c  0800429c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  0800429c  00006198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec21  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002016  00000000  00000000  00014c5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  00016c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a10  00000000  00000000  00017948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bbf9  00000000  00000000  00018358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010672  00000000  00000000  00033f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5db6  00000000  00000000  000445c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ea379  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035b8  00000000  00000000  000ea3bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000ed974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004238 	.word	0x08004238

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004238 	.word	0x08004238

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fbd5 	bl	800097c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f821 	bl	8000218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f931 	bl	800043c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001da:	f000 f8ff 	bl	80003dc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80001de:	f000 f8cd 	bl	800037c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80001e2:	f000 f877 	bl	80002d4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,&rxData,1); // uruchomienie obs≈Çugi uart dla bluetooth hc-06
 80001e6:	2201      	movs	r2, #1
 80001e8:	4907      	ldr	r1, [pc, #28]	@ (8000208 <main+0x40>)
 80001ea:	4808      	ldr	r0, [pc, #32]	@ (800020c <main+0x44>)
 80001ec:	f002 feaa 	bl	8002f44 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start(&htim1);
 80001f0:	4807      	ldr	r0, [pc, #28]	@ (8000210 <main+0x48>)
 80001f2:	f002 fbd5 	bl	80029a0 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 80001f6:	2200      	movs	r2, #0
 80001f8:	2102      	movs	r1, #2
 80001fa:	4806      	ldr	r0, [pc, #24]	@ (8000214 <main+0x4c>)
 80001fc:	f000 ff5a 	bl	80010b4 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  detectObstacle();
 8000200:	f000 f9d4 	bl	80005ac <detectObstacle>
 8000204:	e7fc      	b.n	8000200 <main+0x38>
 8000206:	bf00      	nop
 8000208:	20000192 	.word	0x20000192
 800020c:	20000074 	.word	0x20000074
 8000210:	20000028 	.word	0x20000028
 8000214:	48000800 	.word	0x48000800

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b09c      	sub	sp, #112	@ 0x70
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000222:	2228      	movs	r2, #40	@ 0x28
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f003 ffda 	bl	80041e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	605a      	str	r2, [r3, #4]
 8000236:	609a      	str	r2, [r3, #8]
 8000238:	60da      	str	r2, [r3, #12]
 800023a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800023c:	463b      	mov	r3, r7
 800023e:	2234      	movs	r2, #52	@ 0x34
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f003 ffcc 	bl	80041e0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000248:	2301      	movs	r3, #1
 800024a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800024c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000250:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000256:	2301      	movs	r3, #1
 8000258:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025a:	2302      	movs	r3, #2
 800025c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800025e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000262:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000264:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000268:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800026e:	4618      	mov	r0, r3
 8000270:	f000 ff38 	bl	80010e4 <HAL_RCC_OscConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800027a:	f000 fa43 	bl	8000704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027e:	230f      	movs	r3, #15
 8000280:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000282:	2302      	movs	r3, #2
 8000284:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800028e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000294:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000298:	2102      	movs	r1, #2
 800029a:	4618      	mov	r0, r3
 800029c:	f001 ff60 	bl	8002160 <HAL_RCC_ClockConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002a6:	f000 fa2d 	bl	8000704 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 80002aa:	f241 0301 	movw	r3, #4097	@ 0x1001
 80002ae:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80002b4:	2300      	movs	r3, #0
 80002b6:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002b8:	463b      	mov	r3, r7
 80002ba:	4618      	mov	r0, r3
 80002bc:	f002 f986 	bl	80025cc <HAL_RCCEx_PeriphCLKConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80002c6:	f000 fa1d 	bl	8000704 <Error_Handler>
  }
}
 80002ca:	bf00      	nop
 80002cc:	3770      	adds	r7, #112	@ 0x70
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
	...

080002d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b088      	sub	sp, #32
 80002d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002da:	f107 0310 	add.w	r3, r7, #16
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002f2:	4b20      	ldr	r3, [pc, #128]	@ (8000374 <MX_TIM1_Init+0xa0>)
 80002f4:	4a20      	ldr	r2, [pc, #128]	@ (8000378 <MX_TIM1_Init+0xa4>)
 80002f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80002f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000374 <MX_TIM1_Init+0xa0>)
 80002fa:	2247      	movs	r2, #71	@ 0x47
 80002fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000374 <MX_TIM1_Init+0xa0>)
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000304:	4b1b      	ldr	r3, [pc, #108]	@ (8000374 <MX_TIM1_Init+0xa0>)
 8000306:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800030a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800030c:	4b19      	ldr	r3, [pc, #100]	@ (8000374 <MX_TIM1_Init+0xa0>)
 800030e:	2200      	movs	r2, #0
 8000310:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000312:	4b18      	ldr	r3, [pc, #96]	@ (8000374 <MX_TIM1_Init+0xa0>)
 8000314:	2200      	movs	r2, #0
 8000316:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000318:	4b16      	ldr	r3, [pc, #88]	@ (8000374 <MX_TIM1_Init+0xa0>)
 800031a:	2200      	movs	r2, #0
 800031c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800031e:	4815      	ldr	r0, [pc, #84]	@ (8000374 <MX_TIM1_Init+0xa0>)
 8000320:	f002 fae6 	bl	80028f0 <HAL_TIM_Base_Init>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800032a:	f000 f9eb 	bl	8000704 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800032e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000332:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000334:	f107 0310 	add.w	r3, r7, #16
 8000338:	4619      	mov	r1, r3
 800033a:	480e      	ldr	r0, [pc, #56]	@ (8000374 <MX_TIM1_Init+0xa0>)
 800033c:	f002 fb7c 	bl	8002a38 <HAL_TIM_ConfigClockSource>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000346:	f000 f9dd 	bl	8000704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800034a:	2300      	movs	r3, #0
 800034c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800034e:	2300      	movs	r3, #0
 8000350:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000352:	2300      	movs	r3, #0
 8000354:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	4619      	mov	r1, r3
 800035a:	4806      	ldr	r0, [pc, #24]	@ (8000374 <MX_TIM1_Init+0xa0>)
 800035c:	f002 fd3e 	bl	8002ddc <HAL_TIMEx_MasterConfigSynchronization>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000366:	f000 f9cd 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800036a:	bf00      	nop
 800036c:	3720      	adds	r7, #32
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	20000028 	.word	0x20000028
 8000378:	40012c00 	.word	0x40012c00

0800037c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000380:	4b14      	ldr	r3, [pc, #80]	@ (80003d4 <MX_USART1_UART_Init+0x58>)
 8000382:	4a15      	ldr	r2, [pc, #84]	@ (80003d8 <MX_USART1_UART_Init+0x5c>)
 8000384:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000386:	4b13      	ldr	r3, [pc, #76]	@ (80003d4 <MX_USART1_UART_Init+0x58>)
 8000388:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800038c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800038e:	4b11      	ldr	r3, [pc, #68]	@ (80003d4 <MX_USART1_UART_Init+0x58>)
 8000390:	2200      	movs	r2, #0
 8000392:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000394:	4b0f      	ldr	r3, [pc, #60]	@ (80003d4 <MX_USART1_UART_Init+0x58>)
 8000396:	2200      	movs	r2, #0
 8000398:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800039a:	4b0e      	ldr	r3, [pc, #56]	@ (80003d4 <MX_USART1_UART_Init+0x58>)
 800039c:	2200      	movs	r2, #0
 800039e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003a0:	4b0c      	ldr	r3, [pc, #48]	@ (80003d4 <MX_USART1_UART_Init+0x58>)
 80003a2:	220c      	movs	r2, #12
 80003a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003a6:	4b0b      	ldr	r3, [pc, #44]	@ (80003d4 <MX_USART1_UART_Init+0x58>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003ac:	4b09      	ldr	r3, [pc, #36]	@ (80003d4 <MX_USART1_UART_Init+0x58>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003b2:	4b08      	ldr	r3, [pc, #32]	@ (80003d4 <MX_USART1_UART_Init+0x58>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003b8:	4b06      	ldr	r3, [pc, #24]	@ (80003d4 <MX_USART1_UART_Init+0x58>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003be:	4805      	ldr	r0, [pc, #20]	@ (80003d4 <MX_USART1_UART_Init+0x58>)
 80003c0:	f002 fd72 	bl	8002ea8 <HAL_UART_Init>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80003ca:	f000 f99b 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003ce:	bf00      	nop
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	20000074 	.word	0x20000074
 80003d8:	40013800 	.word	0x40013800

080003dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003e0:	4b14      	ldr	r3, [pc, #80]	@ (8000434 <MX_USART2_UART_Init+0x58>)
 80003e2:	4a15      	ldr	r2, [pc, #84]	@ (8000438 <MX_USART2_UART_Init+0x5c>)
 80003e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80003e6:	4b13      	ldr	r3, [pc, #76]	@ (8000434 <MX_USART2_UART_Init+0x58>)
 80003e8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80003ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ee:	4b11      	ldr	r3, [pc, #68]	@ (8000434 <MX_USART2_UART_Init+0x58>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000434 <MX_USART2_UART_Init+0x58>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000434 <MX_USART2_UART_Init+0x58>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000400:	4b0c      	ldr	r3, [pc, #48]	@ (8000434 <MX_USART2_UART_Init+0x58>)
 8000402:	220c      	movs	r2, #12
 8000404:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000406:	4b0b      	ldr	r3, [pc, #44]	@ (8000434 <MX_USART2_UART_Init+0x58>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800040c:	4b09      	ldr	r3, [pc, #36]	@ (8000434 <MX_USART2_UART_Init+0x58>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000412:	4b08      	ldr	r3, [pc, #32]	@ (8000434 <MX_USART2_UART_Init+0x58>)
 8000414:	2200      	movs	r2, #0
 8000416:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000418:	4b06      	ldr	r3, [pc, #24]	@ (8000434 <MX_USART2_UART_Init+0x58>)
 800041a:	2200      	movs	r2, #0
 800041c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800041e:	4805      	ldr	r0, [pc, #20]	@ (8000434 <MX_USART2_UART_Init+0x58>)
 8000420:	f002 fd42 	bl	8002ea8 <HAL_UART_Init>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800042a:	f000 f96b 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	200000fc 	.word	0x200000fc
 8000438:	40004400 	.word	0x40004400

0800043c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b08a      	sub	sp, #40	@ 0x28
 8000440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000442:	f107 0314 	add.w	r3, r7, #20
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]
 800044e:	60da      	str	r2, [r3, #12]
 8000450:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000452:	4b53      	ldr	r3, [pc, #332]	@ (80005a0 <MX_GPIO_Init+0x164>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	4a52      	ldr	r2, [pc, #328]	@ (80005a0 <MX_GPIO_Init+0x164>)
 8000458:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800045c:	6153      	str	r3, [r2, #20]
 800045e:	4b50      	ldr	r3, [pc, #320]	@ (80005a0 <MX_GPIO_Init+0x164>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000466:	613b      	str	r3, [r7, #16]
 8000468:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800046a:	4b4d      	ldr	r3, [pc, #308]	@ (80005a0 <MX_GPIO_Init+0x164>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	4a4c      	ldr	r2, [pc, #304]	@ (80005a0 <MX_GPIO_Init+0x164>)
 8000470:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000474:	6153      	str	r3, [r2, #20]
 8000476:	4b4a      	ldr	r3, [pc, #296]	@ (80005a0 <MX_GPIO_Init+0x164>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000482:	4b47      	ldr	r3, [pc, #284]	@ (80005a0 <MX_GPIO_Init+0x164>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	4a46      	ldr	r2, [pc, #280]	@ (80005a0 <MX_GPIO_Init+0x164>)
 8000488:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800048c:	6153      	str	r3, [r2, #20]
 800048e:	4b44      	ldr	r3, [pc, #272]	@ (80005a0 <MX_GPIO_Init+0x164>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000496:	60bb      	str	r3, [r7, #8]
 8000498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800049a:	4b41      	ldr	r3, [pc, #260]	@ (80005a0 <MX_GPIO_Init+0x164>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	4a40      	ldr	r2, [pc, #256]	@ (80005a0 <MX_GPIO_Init+0x164>)
 80004a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80004a4:	6153      	str	r3, [r2, #20]
 80004a6:	4b3e      	ldr	r3, [pc, #248]	@ (80005a0 <MX_GPIO_Init+0x164>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80004ae:	607b      	str	r3, [r7, #4]
 80004b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);
 80004b2:	2200      	movs	r2, #0
 80004b4:	2102      	movs	r1, #2
 80004b6:	483b      	ldr	r0, [pc, #236]	@ (80005a4 <MX_GPIO_Init+0x168>)
 80004b8:	f000 fdfc 	bl	80010b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	2101      	movs	r1, #1
 80004c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004c4:	f000 fdf6 	bl	80010b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004ce:	4836      	ldr	r0, [pc, #216]	@ (80005a8 <MX_GPIO_Init+0x16c>)
 80004d0:	f000 fdf0 	bl	80010b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004da:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80004de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e0:	2300      	movs	r3, #0
 80004e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004e4:	f107 0314 	add.w	r3, r7, #20
 80004e8:	4619      	mov	r1, r3
 80004ea:	482e      	ldr	r0, [pc, #184]	@ (80005a4 <MX_GPIO_Init+0x168>)
 80004ec:	f000 fc58 	bl	8000da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ECHO_Pin DETECT5_Pin DETECT1_Pin DETECT2_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin|DETECT5_Pin|DETECT1_Pin|DETECT2_Pin;
 80004f0:	f241 4305 	movw	r3, #5125	@ 0x1405
 80004f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f6:	2300      	movs	r3, #0
 80004f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fa:	2300      	movs	r3, #0
 80004fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004fe:	f107 0314 	add.w	r3, r7, #20
 8000502:	4619      	mov	r1, r3
 8000504:	4827      	ldr	r0, [pc, #156]	@ (80005a4 <MX_GPIO_Init+0x168>)
 8000506:	f000 fc4b 	bl	8000da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIGGER_Pin */
  GPIO_InitStruct.Pin = TRIGGER_Pin;
 800050a:	2302      	movs	r3, #2
 800050c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050e:	2301      	movs	r3, #1
 8000510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000512:	2300      	movs	r3, #0
 8000514:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000516:	2300      	movs	r3, #0
 8000518:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIGGER_GPIO_Port, &GPIO_InitStruct);
 800051a:	f107 0314 	add.w	r3, r7, #20
 800051e:	4619      	mov	r1, r3
 8000520:	4820      	ldr	r0, [pc, #128]	@ (80005a4 <MX_GPIO_Init+0x168>)
 8000522:	f000 fc3d 	bl	8000da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000526:	2301      	movs	r3, #1
 8000528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052a:	2301      	movs	r3, #1
 800052c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052e:	2300      	movs	r3, #0
 8000530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000532:	2300      	movs	r3, #0
 8000534:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	4619      	mov	r1, r3
 800053c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000540:	f000 fc2e 	bl	8000da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000544:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054a:	2301      	movs	r3, #1
 800054c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000552:	2300      	movs	r3, #0
 8000554:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000556:	f107 0314 	add.w	r3, r7, #20
 800055a:	4619      	mov	r1, r3
 800055c:	4812      	ldr	r0, [pc, #72]	@ (80005a8 <MX_GPIO_Init+0x16c>)
 800055e:	f000 fc1f 	bl	8000da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DETECT3_Pin */
  GPIO_InitStruct.Pin = DETECT3_Pin;
 8000562:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000568:	2300      	movs	r3, #0
 800056a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	2300      	movs	r3, #0
 800056e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DETECT3_GPIO_Port, &GPIO_InitStruct);
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	4619      	mov	r1, r3
 8000576:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800057a:	f000 fc11 	bl	8000da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DETECT4_Pin */
  GPIO_InitStruct.Pin = DETECT4_Pin;
 800057e:	2380      	movs	r3, #128	@ 0x80
 8000580:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000582:	2300      	movs	r3, #0
 8000584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	2300      	movs	r3, #0
 8000588:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DETECT4_GPIO_Port, &GPIO_InitStruct);
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	4619      	mov	r1, r3
 8000590:	4805      	ldr	r0, [pc, #20]	@ (80005a8 <MX_GPIO_Init+0x16c>)
 8000592:	f000 fc05 	bl	8000da0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000596:	bf00      	nop
 8000598:	3728      	adds	r7, #40	@ 0x28
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40021000 	.word	0x40021000
 80005a4:	48000800 	.word	0x48000800
 80005a8:	48000400 	.word	0x48000400

080005ac <detectObstacle>:
    detect_states[1] = HAL_GPIO_ReadPin(DETECT2_GPIO_Port, DETECT2_Pin);
    detect_states[2] = HAL_GPIO_ReadPin(DETECT3_GPIO_Port, DETECT3_Pin);
    detect_states[3] = HAL_GPIO_ReadPin(DETECT4_GPIO_Port, DETECT4_Pin);
    detect_states[4] = HAL_GPIO_ReadPin(DETECT5_GPIO_Port, DETECT5_Pin);
}
void detectObstacle(void){
 80005ac:	b598      	push	{r3, r4, r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80005b0:	2201      	movs	r2, #1
 80005b2:	2102      	movs	r1, #2
 80005b4:	4834      	ldr	r0, [pc, #208]	@ (8000688 <detectObstacle+0xdc>)
 80005b6:	f000 fd7d 	bl	80010b4 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80005ba:	4b34      	ldr	r3, [pc, #208]	@ (800068c <detectObstacle+0xe0>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2200      	movs	r2, #0
 80005c0:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 80005c2:	bf00      	nop
 80005c4:	4b31      	ldr	r3, [pc, #196]	@ (800068c <detectObstacle+0xe0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005ca:	2b09      	cmp	r3, #9
 80005cc:	d9fa      	bls.n	80005c4 <detectObstacle+0x18>
	HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);  // pull the TRIG p
 80005ce:	2200      	movs	r2, #0
 80005d0:	2102      	movs	r1, #2
 80005d2:	482d      	ldr	r0, [pc, #180]	@ (8000688 <detectObstacle+0xdc>)
 80005d4:	f000 fd6e 	bl	80010b4 <HAL_GPIO_WritePin>
	pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 80005d8:	f000 fa2a 	bl	8000a30 <HAL_GetTick>
 80005dc:	4603      	mov	r3, r0
 80005de:	4a2c      	ldr	r2, [pc, #176]	@ (8000690 <detectObstacle+0xe4>)
 80005e0:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (ECHO_GPIO_Port, ECHO_Pin)) && pMillis + 10 >  HAL_GetTick());
 80005e2:	bf00      	nop
 80005e4:	2101      	movs	r1, #1
 80005e6:	4828      	ldr	r0, [pc, #160]	@ (8000688 <detectObstacle+0xdc>)
 80005e8:	f000 fd4c 	bl	8001084 <HAL_GPIO_ReadPin>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d108      	bne.n	8000604 <detectObstacle+0x58>
 80005f2:	4b27      	ldr	r3, [pc, #156]	@ (8000690 <detectObstacle+0xe4>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f103 040a 	add.w	r4, r3, #10
 80005fa:	f000 fa19 	bl	8000a30 <HAL_GetTick>
 80005fe:	4603      	mov	r3, r0
 8000600:	429c      	cmp	r4, r3
 8000602:	d8ef      	bhi.n	80005e4 <detectObstacle+0x38>
	Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 8000604:	4b21      	ldr	r3, [pc, #132]	@ (800068c <detectObstacle+0xe0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800060a:	4a22      	ldr	r2, [pc, #136]	@ (8000694 <detectObstacle+0xe8>)
 800060c:	6013      	str	r3, [r2, #0]

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 800060e:	f000 fa0f 	bl	8000a30 <HAL_GetTick>
 8000612:	4603      	mov	r3, r0
 8000614:	4a1e      	ldr	r2, [pc, #120]	@ (8000690 <detectObstacle+0xe4>)
 8000616:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (ECHO_GPIO_Port, ECHO_Pin)) && pMillis + 50 > HAL_GetTick());
 8000618:	bf00      	nop
 800061a:	2101      	movs	r1, #1
 800061c:	481a      	ldr	r0, [pc, #104]	@ (8000688 <detectObstacle+0xdc>)
 800061e:	f000 fd31 	bl	8001084 <HAL_GPIO_ReadPin>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d008      	beq.n	800063a <detectObstacle+0x8e>
 8000628:	4b19      	ldr	r3, [pc, #100]	@ (8000690 <detectObstacle+0xe4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 8000630:	f000 f9fe 	bl	8000a30 <HAL_GetTick>
 8000634:	4603      	mov	r3, r0
 8000636:	429c      	cmp	r4, r3
 8000638:	d8ef      	bhi.n	800061a <detectObstacle+0x6e>
	Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 800063a:	4b14      	ldr	r3, [pc, #80]	@ (800068c <detectObstacle+0xe0>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000640:	4a15      	ldr	r2, [pc, #84]	@ (8000698 <detectObstacle+0xec>)
 8000642:	6013      	str	r3, [r2, #0]

	Distance = (Value2-Value1) /58;
 8000644:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <detectObstacle+0xec>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <detectObstacle+0xe8>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	4a13      	ldr	r2, [pc, #76]	@ (800069c <detectObstacle+0xf0>)
 8000650:	fba2 2303 	umull	r2, r3, r2, r3
 8000654:	095b      	lsrs	r3, r3, #5
 8000656:	b29a      	uxth	r2, r3
 8000658:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <detectObstacle+0xf4>)
 800065a:	801a      	strh	r2, [r3, #0]
	HAL_Delay(50);
 800065c:	2032      	movs	r0, #50	@ 0x32
 800065e:	f000 f9f3 	bl	8000a48 <HAL_Delay>
	if(Distance<5){ //led turns on when object is closer than 5 cm
 8000662:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <detectObstacle+0xf4>)
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	2b04      	cmp	r3, #4
 8000668:	d806      	bhi.n	8000678 <detectObstacle+0xcc>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800066a:	2201      	movs	r2, #1
 800066c:	2101      	movs	r1, #1
 800066e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000672:	f000 fd1f 	bl	80010b4 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
	}
}
 8000676:	e005      	b.n	8000684 <detectObstacle+0xd8>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	2101      	movs	r1, #1
 800067c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000680:	f000 fd18 	bl	80010b4 <HAL_GPIO_WritePin>
}
 8000684:	bf00      	nop
 8000686:	bd98      	pop	{r3, r4, r7, pc}
 8000688:	48000800 	.word	0x48000800
 800068c:	20000028 	.word	0x20000028
 8000690:	20000184 	.word	0x20000184
 8000694:	20000188 	.word	0x20000188
 8000698:	2000018c 	.word	0x2000018c
 800069c:	8d3dcb09 	.word	0x8d3dcb09
 80006a0:	20000190 	.word	0x20000190

080006a4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // funkcja do obs≈Çugi bt po uart na podstawie przerwania
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a10      	ldr	r2, [pc, #64]	@ (80006f4 <HAL_UART_RxCpltCallback+0x50>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d119      	bne.n	80006ea <HAL_UART_RxCpltCallback+0x46>
  {
    if(rxData==78) // Ascii value of 'N' is 78 (N for NO)
 80006b6:	4b10      	ldr	r3, [pc, #64]	@ (80006f8 <HAL_UART_RxCpltCallback+0x54>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b4e      	cmp	r3, #78	@ 0x4e
 80006bc:	d106      	bne.n	80006cc <HAL_UART_RxCpltCallback+0x28>
    {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006c4:	480d      	ldr	r0, [pc, #52]	@ (80006fc <HAL_UART_RxCpltCallback+0x58>)
 80006c6:	f000 fcf5 	bl	80010b4 <HAL_GPIO_WritePin>
 80006ca:	e009      	b.n	80006e0 <HAL_UART_RxCpltCallback+0x3c>
    }
    else if (rxData==89) // Ascii value of 'Y' is 89 (Y for YES)
 80006cc:	4b0a      	ldr	r3, [pc, #40]	@ (80006f8 <HAL_UART_RxCpltCallback+0x54>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b59      	cmp	r3, #89	@ 0x59
 80006d2:	d105      	bne.n	80006e0 <HAL_UART_RxCpltCallback+0x3c>
    {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 80006d4:	2201      	movs	r2, #1
 80006d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006da:	4808      	ldr	r0, [pc, #32]	@ (80006fc <HAL_UART_RxCpltCallback+0x58>)
 80006dc:	f000 fcea 	bl	80010b4 <HAL_GPIO_WritePin>
    }
    HAL_UART_Receive_IT(&huart1,&rxData,1);
 80006e0:	2201      	movs	r2, #1
 80006e2:	4905      	ldr	r1, [pc, #20]	@ (80006f8 <HAL_UART_RxCpltCallback+0x54>)
 80006e4:	4806      	ldr	r0, [pc, #24]	@ (8000700 <HAL_UART_RxCpltCallback+0x5c>)
 80006e6:	f002 fc2d 	bl	8002f44 <HAL_UART_Receive_IT>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40013800 	.word	0x40013800
 80006f8:	20000192 	.word	0x20000192
 80006fc:	48000400 	.word	0x48000400
 8000700:	20000074 	.word	0x20000074

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
}
 800070a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <Error_Handler+0x8>

08000710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000716:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <HAL_MspInit+0x44>)
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	4a0e      	ldr	r2, [pc, #56]	@ (8000754 <HAL_MspInit+0x44>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6193      	str	r3, [r2, #24]
 8000722:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <HAL_MspInit+0x44>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072e:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <HAL_MspInit+0x44>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	4a08      	ldr	r2, [pc, #32]	@ (8000754 <HAL_MspInit+0x44>)
 8000734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000738:	61d3      	str	r3, [r2, #28]
 800073a:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <HAL_MspInit+0x44>)
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000746:	2007      	movs	r0, #7
 8000748:	f000 fa72 	bl	8000c30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40021000 	.word	0x40021000

08000758 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a0a      	ldr	r2, [pc, #40]	@ (8000790 <HAL_TIM_Base_MspInit+0x38>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d10b      	bne.n	8000782 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800076a:	4b0a      	ldr	r3, [pc, #40]	@ (8000794 <HAL_TIM_Base_MspInit+0x3c>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	4a09      	ldr	r2, [pc, #36]	@ (8000794 <HAL_TIM_Base_MspInit+0x3c>)
 8000770:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000774:	6193      	str	r3, [r2, #24]
 8000776:	4b07      	ldr	r3, [pc, #28]	@ (8000794 <HAL_TIM_Base_MspInit+0x3c>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000782:	bf00      	nop
 8000784:	3714      	adds	r7, #20
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	40012c00 	.word	0x40012c00
 8000794:	40021000 	.word	0x40021000

08000798 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08c      	sub	sp, #48	@ 0x30
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a33      	ldr	r2, [pc, #204]	@ (8000884 <HAL_UART_MspInit+0xec>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d132      	bne.n	8000820 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007ba:	4b33      	ldr	r3, [pc, #204]	@ (8000888 <HAL_UART_MspInit+0xf0>)
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	4a32      	ldr	r2, [pc, #200]	@ (8000888 <HAL_UART_MspInit+0xf0>)
 80007c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007c4:	6193      	str	r3, [r2, #24]
 80007c6:	4b30      	ldr	r3, [pc, #192]	@ (8000888 <HAL_UART_MspInit+0xf0>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ce:	61bb      	str	r3, [r7, #24]
 80007d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000888 <HAL_UART_MspInit+0xf0>)
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	4a2c      	ldr	r2, [pc, #176]	@ (8000888 <HAL_UART_MspInit+0xf0>)
 80007d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007dc:	6153      	str	r3, [r2, #20]
 80007de:	4b2a      	ldr	r3, [pc, #168]	@ (8000888 <HAL_UART_MspInit+0xf0>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007e6:	617b      	str	r3, [r7, #20]
 80007e8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007ea:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80007ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f0:	2302      	movs	r3, #2
 80007f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f8:	2303      	movs	r3, #3
 80007fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007fc:	2307      	movs	r3, #7
 80007fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000800:	f107 031c 	add.w	r3, r7, #28
 8000804:	4619      	mov	r1, r3
 8000806:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800080a:	f000 fac9 	bl	8000da0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	2025      	movs	r0, #37	@ 0x25
 8000814:	f000 fa17 	bl	8000c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000818:	2025      	movs	r0, #37	@ 0x25
 800081a:	f000 fa30 	bl	8000c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800081e:	e02d      	b.n	800087c <HAL_UART_MspInit+0xe4>
  else if(huart->Instance==USART2)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a19      	ldr	r2, [pc, #100]	@ (800088c <HAL_UART_MspInit+0xf4>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d128      	bne.n	800087c <HAL_UART_MspInit+0xe4>
    __HAL_RCC_USART2_CLK_ENABLE();
 800082a:	4b17      	ldr	r3, [pc, #92]	@ (8000888 <HAL_UART_MspInit+0xf0>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	4a16      	ldr	r2, [pc, #88]	@ (8000888 <HAL_UART_MspInit+0xf0>)
 8000830:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000834:	61d3      	str	r3, [r2, #28]
 8000836:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <HAL_UART_MspInit+0xf0>)
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <HAL_UART_MspInit+0xf0>)
 8000844:	695b      	ldr	r3, [r3, #20]
 8000846:	4a10      	ldr	r2, [pc, #64]	@ (8000888 <HAL_UART_MspInit+0xf0>)
 8000848:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800084c:	6153      	str	r3, [r2, #20]
 800084e:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <HAL_UART_MspInit+0xf0>)
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800085a:	230c      	movs	r3, #12
 800085c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	2302      	movs	r3, #2
 8000860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800086a:	2307      	movs	r3, #7
 800086c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4619      	mov	r1, r3
 8000874:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000878:	f000 fa92 	bl	8000da0 <HAL_GPIO_Init>
}
 800087c:	bf00      	nop
 800087e:	3730      	adds	r7, #48	@ 0x30
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40013800 	.word	0x40013800
 8000888:	40021000 	.word	0x40021000
 800088c:	40004400 	.word	0x40004400

08000890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <NMI_Handler+0x4>

08000898 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <HardFault_Handler+0x4>

080008a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <MemManage_Handler+0x4>

080008a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <BusFault_Handler+0x4>

080008b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <UsageFault_Handler+0x4>

080008b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr

080008e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e6:	f000 f88f 	bl	8000a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008f4:	4802      	ldr	r0, [pc, #8]	@ (8000900 <USART1_IRQHandler+0x10>)
 80008f6:	f002 fb69 	bl	8002fcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000074 	.word	0x20000074

08000904 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000908:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <SystemInit+0x20>)
 800090a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800090e:	4a05      	ldr	r2, [pc, #20]	@ (8000924 <SystemInit+0x20>)
 8000910:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000914:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <Reset_Handler>:
 8000928:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000960 <LoopForever+0x2>
 800092c:	f7ff ffea 	bl	8000904 <SystemInit>
 8000930:	480c      	ldr	r0, [pc, #48]	@ (8000964 <LoopForever+0x6>)
 8000932:	490d      	ldr	r1, [pc, #52]	@ (8000968 <LoopForever+0xa>)
 8000934:	4a0d      	ldr	r2, [pc, #52]	@ (800096c <LoopForever+0xe>)
 8000936:	2300      	movs	r3, #0
 8000938:	e002      	b.n	8000940 <LoopCopyDataInit>

0800093a <CopyDataInit>:
 800093a:	58d4      	ldr	r4, [r2, r3]
 800093c:	50c4      	str	r4, [r0, r3]
 800093e:	3304      	adds	r3, #4

08000940 <LoopCopyDataInit>:
 8000940:	18c4      	adds	r4, r0, r3
 8000942:	428c      	cmp	r4, r1
 8000944:	d3f9      	bcc.n	800093a <CopyDataInit>
 8000946:	4a0a      	ldr	r2, [pc, #40]	@ (8000970 <LoopForever+0x12>)
 8000948:	4c0a      	ldr	r4, [pc, #40]	@ (8000974 <LoopForever+0x16>)
 800094a:	2300      	movs	r3, #0
 800094c:	e001      	b.n	8000952 <LoopFillZerobss>

0800094e <FillZerobss>:
 800094e:	6013      	str	r3, [r2, #0]
 8000950:	3204      	adds	r2, #4

08000952 <LoopFillZerobss>:
 8000952:	42a2      	cmp	r2, r4
 8000954:	d3fb      	bcc.n	800094e <FillZerobss>
 8000956:	f003 fc4b 	bl	80041f0 <__libc_init_array>
 800095a:	f7ff fc35 	bl	80001c8 <main>

0800095e <LoopForever>:
 800095e:	e7fe      	b.n	800095e <LoopForever>
 8000960:	20004000 	.word	0x20004000
 8000964:	20000000 	.word	0x20000000
 8000968:	2000000c 	.word	0x2000000c
 800096c:	08004290 	.word	0x08004290
 8000970:	2000000c 	.word	0x2000000c
 8000974:	20000198 	.word	0x20000198

08000978 <ADC1_IRQHandler>:
 8000978:	e7fe      	b.n	8000978 <ADC1_IRQHandler>
	...

0800097c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000980:	4b08      	ldr	r3, [pc, #32]	@ (80009a4 <HAL_Init+0x28>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a07      	ldr	r2, [pc, #28]	@ (80009a4 <HAL_Init+0x28>)
 8000986:	f043 0310 	orr.w	r3, r3, #16
 800098a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800098c:	2003      	movs	r0, #3
 800098e:	f000 f94f 	bl	8000c30 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000992:	2000      	movs	r0, #0
 8000994:	f000 f808 	bl	80009a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000998:	f7ff feba 	bl	8000710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40022000 	.word	0x40022000

080009a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b0:	4b12      	ldr	r3, [pc, #72]	@ (80009fc <HAL_InitTick+0x54>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b12      	ldr	r3, [pc, #72]	@ (8000a00 <HAL_InitTick+0x58>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009be:	fbb3 f3f1 	udiv	r3, r3, r1
 80009c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 f967 	bl	8000c9a <HAL_SYSTICK_Config>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e00e      	b.n	80009f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b0f      	cmp	r3, #15
 80009da:	d80a      	bhi.n	80009f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009dc:	2200      	movs	r2, #0
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295
 80009e4:	f000 f92f 	bl	8000c46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e8:	4a06      	ldr	r2, [pc, #24]	@ (8000a04 <HAL_InitTick+0x5c>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80009ee:	2300      	movs	r3, #0
 80009f0:	e000      	b.n	80009f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000008 	.word	0x20000008
 8000a04:	20000004 	.word	0x20000004

08000a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <HAL_IncTick+0x20>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <HAL_IncTick+0x24>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4413      	add	r3, r2
 8000a18:	4a04      	ldr	r2, [pc, #16]	@ (8000a2c <HAL_IncTick+0x24>)
 8000a1a:	6013      	str	r3, [r2, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	20000194 	.word	0x20000194

08000a30 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a34:	4b03      	ldr	r3, [pc, #12]	@ (8000a44 <HAL_GetTick+0x14>)
 8000a36:	681b      	ldr	r3, [r3, #0]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	20000194 	.word	0x20000194

08000a48 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a50:	f7ff ffee 	bl	8000a30 <HAL_GetTick>
 8000a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a60:	d005      	beq.n	8000a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a62:	4b0a      	ldr	r3, [pc, #40]	@ (8000a8c <HAL_Delay+0x44>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	461a      	mov	r2, r3
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a6e:	bf00      	nop
 8000a70:	f7ff ffde 	bl	8000a30 <HAL_GetTick>
 8000a74:	4602      	mov	r2, r0
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d8f7      	bhi.n	8000a70 <HAL_Delay+0x28>
  {
  }
}
 8000a80:	bf00      	nop
 8000a82:	bf00      	nop
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000008 	.word	0x20000008

08000a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000aac:	4013      	ands	r3, r2
 8000aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000abc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac2:	4a04      	ldr	r2, [pc, #16]	@ (8000ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	60d3      	str	r3, [r2, #12]
}
 8000ac8:	bf00      	nop
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000adc:	4b04      	ldr	r3, [pc, #16]	@ (8000af0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	0a1b      	lsrs	r3, r3, #8
 8000ae2:	f003 0307 	and.w	r3, r3, #7
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	db0b      	blt.n	8000b1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	f003 021f 	and.w	r2, r3, #31
 8000b0c:	4907      	ldr	r1, [pc, #28]	@ (8000b2c <__NVIC_EnableIRQ+0x38>)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	095b      	lsrs	r3, r3, #5
 8000b14:	2001      	movs	r0, #1
 8000b16:	fa00 f202 	lsl.w	r2, r0, r2
 8000b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000e100 	.word	0xe000e100

08000b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	6039      	str	r1, [r7, #0]
 8000b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	db0a      	blt.n	8000b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	490c      	ldr	r1, [pc, #48]	@ (8000b7c <__NVIC_SetPriority+0x4c>)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	0112      	lsls	r2, r2, #4
 8000b50:	b2d2      	uxtb	r2, r2
 8000b52:	440b      	add	r3, r1
 8000b54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b58:	e00a      	b.n	8000b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	4908      	ldr	r1, [pc, #32]	@ (8000b80 <__NVIC_SetPriority+0x50>)
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	f003 030f 	and.w	r3, r3, #15
 8000b66:	3b04      	subs	r3, #4
 8000b68:	0112      	lsls	r2, r2, #4
 8000b6a:	b2d2      	uxtb	r2, r2
 8000b6c:	440b      	add	r3, r1
 8000b6e:	761a      	strb	r2, [r3, #24]
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000e100 	.word	0xe000e100
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b089      	sub	sp, #36	@ 0x24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	f1c3 0307 	rsb	r3, r3, #7
 8000b9e:	2b04      	cmp	r3, #4
 8000ba0:	bf28      	it	cs
 8000ba2:	2304      	movcs	r3, #4
 8000ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3304      	adds	r3, #4
 8000baa:	2b06      	cmp	r3, #6
 8000bac:	d902      	bls.n	8000bb4 <NVIC_EncodePriority+0x30>
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3b03      	subs	r3, #3
 8000bb2:	e000      	b.n	8000bb6 <NVIC_EncodePriority+0x32>
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	43da      	mvns	r2, r3
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	401a      	ands	r2, r3
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd6:	43d9      	mvns	r1, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bdc:	4313      	orrs	r3, r2
         );
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3724      	adds	r7, #36	@ 0x24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bfc:	d301      	bcc.n	8000c02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00f      	b.n	8000c22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c02:	4a0a      	ldr	r2, [pc, #40]	@ (8000c2c <SysTick_Config+0x40>)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c0a:	210f      	movs	r1, #15
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	f7ff ff8e 	bl	8000b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c14:	4b05      	ldr	r3, [pc, #20]	@ (8000c2c <SysTick_Config+0x40>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1a:	4b04      	ldr	r3, [pc, #16]	@ (8000c2c <SysTick_Config+0x40>)
 8000c1c:	2207      	movs	r2, #7
 8000c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	e000e010 	.word	0xe000e010

08000c30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff ff29 	bl	8000a90 <__NVIC_SetPriorityGrouping>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b086      	sub	sp, #24
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
 8000c52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c58:	f7ff ff3e 	bl	8000ad8 <__NVIC_GetPriorityGrouping>
 8000c5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	68b9      	ldr	r1, [r7, #8]
 8000c62:	6978      	ldr	r0, [r7, #20]
 8000c64:	f7ff ff8e 	bl	8000b84 <NVIC_EncodePriority>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff5d 	bl	8000b30 <__NVIC_SetPriority>
}
 8000c76:	bf00      	nop
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	4603      	mov	r3, r0
 8000c86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ff31 	bl	8000af4 <__NVIC_EnableIRQ>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff ffa2 	bl	8000bec <SysTick_Config>
 8000ca8:	4603      	mov	r3, r0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b083      	sub	sp, #12
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d008      	beq.n	8000cd6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2204      	movs	r2, #4
 8000cc8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e020      	b.n	8000d18 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f022 020e 	bic.w	r2, r2, #14
 8000ce4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f022 0201 	bic.w	r2, r2, #1
 8000cf4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cfe:	2101      	movs	r1, #1
 8000d00:	fa01 f202 	lsl.w	r2, r1, r2
 8000d04:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2200      	movs	r2, #0
 8000d12:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000d16:	2300      	movs	r3, #0
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d005      	beq.n	8000d46 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2204      	movs	r2, #4
 8000d3e:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	73fb      	strb	r3, [r7, #15]
 8000d44:	e027      	b.n	8000d96 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f022 020e 	bic.w	r2, r2, #14
 8000d54:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f022 0201 	bic.w	r2, r2, #1
 8000d64:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d6e:	2101      	movs	r1, #1
 8000d70:	fa01 f202 	lsl.w	r2, r1, r2
 8000d74:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d003      	beq.n	8000d96 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	4798      	blx	r3
    } 
  }
  return status;
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b087      	sub	sp, #28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dae:	e14e      	b.n	800104e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	2101      	movs	r1, #1
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f000 8140 	beq.w	8001048 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f003 0303 	and.w	r3, r3, #3
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d005      	beq.n	8000de0 <HAL_GPIO_Init+0x40>
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 0303 	and.w	r3, r3, #3
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d130      	bne.n	8000e42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	2203      	movs	r2, #3
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	68da      	ldr	r2, [r3, #12]
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e16:	2201      	movs	r2, #1
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	091b      	lsrs	r3, r3, #4
 8000e2c:	f003 0201 	and.w	r2, r3, #1
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 0303 	and.w	r3, r3, #3
 8000e4a:	2b03      	cmp	r3, #3
 8000e4c:	d017      	beq.n	8000e7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	2203      	movs	r2, #3
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4013      	ands	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	689a      	ldr	r2, [r3, #8]
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 0303 	and.w	r3, r3, #3
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d123      	bne.n	8000ed2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	08da      	lsrs	r2, r3, #3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	3208      	adds	r2, #8
 8000e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	220f      	movs	r2, #15
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	691a      	ldr	r2, [r3, #16]
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	f003 0307 	and.w	r3, r3, #7
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	08da      	lsrs	r2, r3, #3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3208      	adds	r2, #8
 8000ecc:	6939      	ldr	r1, [r7, #16]
 8000ece:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	2203      	movs	r2, #3
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f003 0203 	and.w	r2, r3, #3
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f000 809a 	beq.w	8001048 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f14:	4b55      	ldr	r3, [pc, #340]	@ (800106c <HAL_GPIO_Init+0x2cc>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	4a54      	ldr	r2, [pc, #336]	@ (800106c <HAL_GPIO_Init+0x2cc>)
 8000f1a:	f043 0301 	orr.w	r3, r3, #1
 8000f1e:	6193      	str	r3, [r2, #24]
 8000f20:	4b52      	ldr	r3, [pc, #328]	@ (800106c <HAL_GPIO_Init+0x2cc>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f2c:	4a50      	ldr	r2, [pc, #320]	@ (8001070 <HAL_GPIO_Init+0x2d0>)
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	089b      	lsrs	r3, r3, #2
 8000f32:	3302      	adds	r3, #2
 8000f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	220f      	movs	r2, #15
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f56:	d013      	beq.n	8000f80 <HAL_GPIO_Init+0x1e0>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a46      	ldr	r2, [pc, #280]	@ (8001074 <HAL_GPIO_Init+0x2d4>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d00d      	beq.n	8000f7c <HAL_GPIO_Init+0x1dc>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a45      	ldr	r2, [pc, #276]	@ (8001078 <HAL_GPIO_Init+0x2d8>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d007      	beq.n	8000f78 <HAL_GPIO_Init+0x1d8>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a44      	ldr	r2, [pc, #272]	@ (800107c <HAL_GPIO_Init+0x2dc>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d101      	bne.n	8000f74 <HAL_GPIO_Init+0x1d4>
 8000f70:	2303      	movs	r3, #3
 8000f72:	e006      	b.n	8000f82 <HAL_GPIO_Init+0x1e2>
 8000f74:	2305      	movs	r3, #5
 8000f76:	e004      	b.n	8000f82 <HAL_GPIO_Init+0x1e2>
 8000f78:	2302      	movs	r3, #2
 8000f7a:	e002      	b.n	8000f82 <HAL_GPIO_Init+0x1e2>
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e000      	b.n	8000f82 <HAL_GPIO_Init+0x1e2>
 8000f80:	2300      	movs	r3, #0
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	f002 0203 	and.w	r2, r2, #3
 8000f88:	0092      	lsls	r2, r2, #2
 8000f8a:	4093      	lsls	r3, r2
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f92:	4937      	ldr	r1, [pc, #220]	@ (8001070 <HAL_GPIO_Init+0x2d0>)
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	089b      	lsrs	r3, r3, #2
 8000f98:	3302      	adds	r3, #2
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fa0:	4b37      	ldr	r3, [pc, #220]	@ (8001080 <HAL_GPIO_Init+0x2e0>)
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fc4:	4a2e      	ldr	r2, [pc, #184]	@ (8001080 <HAL_GPIO_Init+0x2e0>)
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fca:	4b2d      	ldr	r3, [pc, #180]	@ (8001080 <HAL_GPIO_Init+0x2e0>)
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fee:	4a24      	ldr	r2, [pc, #144]	@ (8001080 <HAL_GPIO_Init+0x2e0>)
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ff4:	4b22      	ldr	r3, [pc, #136]	@ (8001080 <HAL_GPIO_Init+0x2e0>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001018:	4a19      	ldr	r2, [pc, #100]	@ (8001080 <HAL_GPIO_Init+0x2e0>)
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800101e:	4b18      	ldr	r3, [pc, #96]	@ (8001080 <HAL_GPIO_Init+0x2e0>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	43db      	mvns	r3, r3
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4013      	ands	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4313      	orrs	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001042:	4a0f      	ldr	r2, [pc, #60]	@ (8001080 <HAL_GPIO_Init+0x2e0>)
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	3301      	adds	r3, #1
 800104c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	fa22 f303 	lsr.w	r3, r2, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	f47f aea9 	bne.w	8000db0 <HAL_GPIO_Init+0x10>
  }
}
 800105e:	bf00      	nop
 8001060:	bf00      	nop
 8001062:	371c      	adds	r7, #28
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	40021000 	.word	0x40021000
 8001070:	40010000 	.word	0x40010000
 8001074:	48000400 	.word	0x48000400
 8001078:	48000800 	.word	0x48000800
 800107c:	48000c00 	.word	0x48000c00
 8001080:	40010400 	.word	0x40010400

08001084 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	460b      	mov	r3, r1
 800108e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	691a      	ldr	r2, [r3, #16]
 8001094:	887b      	ldrh	r3, [r7, #2]
 8001096:	4013      	ands	r3, r2
 8001098:	2b00      	cmp	r3, #0
 800109a:	d002      	beq.n	80010a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800109c:	2301      	movs	r3, #1
 800109e:	73fb      	strb	r3, [r7, #15]
 80010a0:	e001      	b.n	80010a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010a2:	2300      	movs	r3, #0
 80010a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	807b      	strh	r3, [r7, #2]
 80010c0:	4613      	mov	r3, r2
 80010c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c4:	787b      	ldrb	r3, [r7, #1]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010ca:	887a      	ldrh	r2, [r7, #2]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010d0:	e002      	b.n	80010d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010d2:	887a      	ldrh	r2, [r7, #2]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010f4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d102      	bne.n	800110a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	f001 b823 	b.w	8002150 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800110a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800110e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	2b00      	cmp	r3, #0
 800111c:	f000 817d 	beq.w	800141a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001120:	4bbc      	ldr	r3, [pc, #752]	@ (8001414 <HAL_RCC_OscConfig+0x330>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 030c 	and.w	r3, r3, #12
 8001128:	2b04      	cmp	r3, #4
 800112a:	d00c      	beq.n	8001146 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800112c:	4bb9      	ldr	r3, [pc, #740]	@ (8001414 <HAL_RCC_OscConfig+0x330>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 030c 	and.w	r3, r3, #12
 8001134:	2b08      	cmp	r3, #8
 8001136:	d15c      	bne.n	80011f2 <HAL_RCC_OscConfig+0x10e>
 8001138:	4bb6      	ldr	r3, [pc, #728]	@ (8001414 <HAL_RCC_OscConfig+0x330>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001140:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001144:	d155      	bne.n	80011f2 <HAL_RCC_OscConfig+0x10e>
 8001146:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800114a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001152:	fa93 f3a3 	rbit	r3, r3
 8001156:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800115a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800115e:	fab3 f383 	clz	r3, r3
 8001162:	b2db      	uxtb	r3, r3
 8001164:	095b      	lsrs	r3, r3, #5
 8001166:	b2db      	uxtb	r3, r3
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b01      	cmp	r3, #1
 8001170:	d102      	bne.n	8001178 <HAL_RCC_OscConfig+0x94>
 8001172:	4ba8      	ldr	r3, [pc, #672]	@ (8001414 <HAL_RCC_OscConfig+0x330>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	e015      	b.n	80011a4 <HAL_RCC_OscConfig+0xc0>
 8001178:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800117c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001180:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001184:	fa93 f3a3 	rbit	r3, r3
 8001188:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800118c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001190:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001194:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001198:	fa93 f3a3 	rbit	r3, r3
 800119c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80011a0:	4b9c      	ldr	r3, [pc, #624]	@ (8001414 <HAL_RCC_OscConfig+0x330>)
 80011a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80011a8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80011ac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80011b0:	fa92 f2a2 	rbit	r2, r2
 80011b4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80011b8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80011bc:	fab2 f282 	clz	r2, r2
 80011c0:	b2d2      	uxtb	r2, r2
 80011c2:	f042 0220 	orr.w	r2, r2, #32
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	f002 021f 	and.w	r2, r2, #31
 80011cc:	2101      	movs	r1, #1
 80011ce:	fa01 f202 	lsl.w	r2, r1, r2
 80011d2:	4013      	ands	r3, r2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f000 811f 	beq.w	8001418 <HAL_RCC_OscConfig+0x334>
 80011da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f040 8116 	bne.w	8001418 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	f000 bfaf 	b.w	8002150 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001202:	d106      	bne.n	8001212 <HAL_RCC_OscConfig+0x12e>
 8001204:	4b83      	ldr	r3, [pc, #524]	@ (8001414 <HAL_RCC_OscConfig+0x330>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a82      	ldr	r2, [pc, #520]	@ (8001414 <HAL_RCC_OscConfig+0x330>)
 800120a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	e036      	b.n	8001280 <HAL_RCC_OscConfig+0x19c>
 8001212:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001216:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d10c      	bne.n	800123c <HAL_RCC_OscConfig+0x158>
 8001222:	4b7c      	ldr	r3, [pc, #496]	@ (8001414 <HAL_RCC_OscConfig+0x330>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a7b      	ldr	r2, [pc, #492]	@ (8001414 <HAL_RCC_OscConfig+0x330>)
 8001228:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	4b79      	ldr	r3, [pc, #484]	@ (8001414 <HAL_RCC_OscConfig+0x330>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a78      	ldr	r2, [pc, #480]	@ (8001414 <HAL_RCC_OscConfig+0x330>)
 8001234:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	e021      	b.n	8001280 <HAL_RCC_OscConfig+0x19c>
 800123c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001240:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800124c:	d10c      	bne.n	8001268 <HAL_RCC_OscConfig+0x184>
 800124e:	4b71      	ldr	r3, [pc, #452]	@ (8001414 <HAL_RCC_OscConfig+0x330>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a70      	ldr	r2, [pc, #448]	@ (8001414 <HAL_RCC_OscConfig+0x330>)
 8001254:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	4b6e      	ldr	r3, [pc, #440]	@ (8001414 <HAL_RCC_OscConfig+0x330>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a6d      	ldr	r2, [pc, #436]	@ (8001414 <HAL_RCC_OscConfig+0x330>)
 8001260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	e00b      	b.n	8001280 <HAL_RCC_OscConfig+0x19c>
 8001268:	4b6a      	ldr	r3, [pc, #424]	@ (8001414 <HAL_RCC_OscConfig+0x330>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a69      	ldr	r2, [pc, #420]	@ (8001414 <HAL_RCC_OscConfig+0x330>)
 800126e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	4b67      	ldr	r3, [pc, #412]	@ (8001414 <HAL_RCC_OscConfig+0x330>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a66      	ldr	r2, [pc, #408]	@ (8001414 <HAL_RCC_OscConfig+0x330>)
 800127a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800127e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001280:	4b64      	ldr	r3, [pc, #400]	@ (8001414 <HAL_RCC_OscConfig+0x330>)
 8001282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001284:	f023 020f 	bic.w	r2, r3, #15
 8001288:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800128c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	495f      	ldr	r1, [pc, #380]	@ (8001414 <HAL_RCC_OscConfig+0x330>)
 8001296:	4313      	orrs	r3, r2
 8001298:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800129a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800129e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d059      	beq.n	800135e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012aa:	f7ff fbc1 	bl	8000a30 <HAL_GetTick>
 80012ae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b2:	e00a      	b.n	80012ca <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012b4:	f7ff fbbc 	bl	8000a30 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b64      	cmp	r3, #100	@ 0x64
 80012c2:	d902      	bls.n	80012ca <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	f000 bf43 	b.w	8002150 <HAL_RCC_OscConfig+0x106c>
 80012ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012ce:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80012d6:	fa93 f3a3 	rbit	r3, r3
 80012da:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80012de:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e2:	fab3 f383 	clz	r3, r3
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	095b      	lsrs	r3, r3, #5
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d102      	bne.n	80012fc <HAL_RCC_OscConfig+0x218>
 80012f6:	4b47      	ldr	r3, [pc, #284]	@ (8001414 <HAL_RCC_OscConfig+0x330>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	e015      	b.n	8001328 <HAL_RCC_OscConfig+0x244>
 80012fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001300:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001304:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001308:	fa93 f3a3 	rbit	r3, r3
 800130c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001310:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001314:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001318:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800131c:	fa93 f3a3 	rbit	r3, r3
 8001320:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001324:	4b3b      	ldr	r3, [pc, #236]	@ (8001414 <HAL_RCC_OscConfig+0x330>)
 8001326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001328:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800132c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001330:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001334:	fa92 f2a2 	rbit	r2, r2
 8001338:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800133c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001340:	fab2 f282 	clz	r2, r2
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	f042 0220 	orr.w	r2, r2, #32
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	f002 021f 	and.w	r2, r2, #31
 8001350:	2101      	movs	r1, #1
 8001352:	fa01 f202 	lsl.w	r2, r1, r2
 8001356:	4013      	ands	r3, r2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0ab      	beq.n	80012b4 <HAL_RCC_OscConfig+0x1d0>
 800135c:	e05d      	b.n	800141a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135e:	f7ff fb67 	bl	8000a30 <HAL_GetTick>
 8001362:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001366:	e00a      	b.n	800137e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001368:	f7ff fb62 	bl	8000a30 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b64      	cmp	r3, #100	@ 0x64
 8001376:	d902      	bls.n	800137e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	f000 bee9 	b.w	8002150 <HAL_RCC_OscConfig+0x106c>
 800137e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001382:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001386:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800138a:	fa93 f3a3 	rbit	r3, r3
 800138e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001392:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001396:	fab3 f383 	clz	r3, r3
 800139a:	b2db      	uxtb	r3, r3
 800139c:	095b      	lsrs	r3, r3, #5
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d102      	bne.n	80013b0 <HAL_RCC_OscConfig+0x2cc>
 80013aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001414 <HAL_RCC_OscConfig+0x330>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	e015      	b.n	80013dc <HAL_RCC_OscConfig+0x2f8>
 80013b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013b4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80013bc:	fa93 f3a3 	rbit	r3, r3
 80013c0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80013c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013c8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80013cc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80013d0:	fa93 f3a3 	rbit	r3, r3
 80013d4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80013d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001414 <HAL_RCC_OscConfig+0x330>)
 80013da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013dc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80013e0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80013e4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80013e8:	fa92 f2a2 	rbit	r2, r2
 80013ec:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80013f0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80013f4:	fab2 f282 	clz	r2, r2
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	f042 0220 	orr.w	r2, r2, #32
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	f002 021f 	and.w	r2, r2, #31
 8001404:	2101      	movs	r1, #1
 8001406:	fa01 f202 	lsl.w	r2, r1, r2
 800140a:	4013      	ands	r3, r2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1ab      	bne.n	8001368 <HAL_RCC_OscConfig+0x284>
 8001410:	e003      	b.n	800141a <HAL_RCC_OscConfig+0x336>
 8001412:	bf00      	nop
 8001414:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800141a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800141e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	f000 817d 	beq.w	800172a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001430:	4ba6      	ldr	r3, [pc, #664]	@ (80016cc <HAL_RCC_OscConfig+0x5e8>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 030c 	and.w	r3, r3, #12
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00b      	beq.n	8001454 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800143c:	4ba3      	ldr	r3, [pc, #652]	@ (80016cc <HAL_RCC_OscConfig+0x5e8>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 030c 	and.w	r3, r3, #12
 8001444:	2b08      	cmp	r3, #8
 8001446:	d172      	bne.n	800152e <HAL_RCC_OscConfig+0x44a>
 8001448:	4ba0      	ldr	r3, [pc, #640]	@ (80016cc <HAL_RCC_OscConfig+0x5e8>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d16c      	bne.n	800152e <HAL_RCC_OscConfig+0x44a>
 8001454:	2302      	movs	r3, #2
 8001456:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800145e:	fa93 f3a3 	rbit	r3, r3
 8001462:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001466:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146a:	fab3 f383 	clz	r3, r3
 800146e:	b2db      	uxtb	r3, r3
 8001470:	095b      	lsrs	r3, r3, #5
 8001472:	b2db      	uxtb	r3, r3
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b01      	cmp	r3, #1
 800147c:	d102      	bne.n	8001484 <HAL_RCC_OscConfig+0x3a0>
 800147e:	4b93      	ldr	r3, [pc, #588]	@ (80016cc <HAL_RCC_OscConfig+0x5e8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	e013      	b.n	80014ac <HAL_RCC_OscConfig+0x3c8>
 8001484:	2302      	movs	r3, #2
 8001486:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800148e:	fa93 f3a3 	rbit	r3, r3
 8001492:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001496:	2302      	movs	r3, #2
 8001498:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800149c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80014a0:	fa93 f3a3 	rbit	r3, r3
 80014a4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80014a8:	4b88      	ldr	r3, [pc, #544]	@ (80016cc <HAL_RCC_OscConfig+0x5e8>)
 80014aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ac:	2202      	movs	r2, #2
 80014ae:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80014b2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80014b6:	fa92 f2a2 	rbit	r2, r2
 80014ba:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80014be:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80014c2:	fab2 f282 	clz	r2, r2
 80014c6:	b2d2      	uxtb	r2, r2
 80014c8:	f042 0220 	orr.w	r2, r2, #32
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	f002 021f 	and.w	r2, r2, #31
 80014d2:	2101      	movs	r1, #1
 80014d4:	fa01 f202 	lsl.w	r2, r1, r2
 80014d8:	4013      	ands	r3, r2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00a      	beq.n	80014f4 <HAL_RCC_OscConfig+0x410>
 80014de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d002      	beq.n	80014f4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	f000 be2e 	b.w	8002150 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f4:	4b75      	ldr	r3, [pc, #468]	@ (80016cc <HAL_RCC_OscConfig+0x5e8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001500:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	695b      	ldr	r3, [r3, #20]
 8001508:	21f8      	movs	r1, #248	@ 0xf8
 800150a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001512:	fa91 f1a1 	rbit	r1, r1
 8001516:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800151a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800151e:	fab1 f181 	clz	r1, r1
 8001522:	b2c9      	uxtb	r1, r1
 8001524:	408b      	lsls	r3, r1
 8001526:	4969      	ldr	r1, [pc, #420]	@ (80016cc <HAL_RCC_OscConfig+0x5e8>)
 8001528:	4313      	orrs	r3, r2
 800152a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800152c:	e0fd      	b.n	800172a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800152e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001532:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 8088 	beq.w	8001650 <HAL_RCC_OscConfig+0x56c>
 8001540:	2301      	movs	r3, #1
 8001542:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001546:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800154a:	fa93 f3a3 	rbit	r3, r3
 800154e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001552:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001556:	fab3 f383 	clz	r3, r3
 800155a:	b2db      	uxtb	r3, r3
 800155c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001560:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	461a      	mov	r2, r3
 8001568:	2301      	movs	r3, #1
 800156a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff fa60 	bl	8000a30 <HAL_GetTick>
 8001570:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001574:	e00a      	b.n	800158c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001576:	f7ff fa5b 	bl	8000a30 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d902      	bls.n	800158c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	f000 bde2 	b.w	8002150 <HAL_RCC_OscConfig+0x106c>
 800158c:	2302      	movs	r3, #2
 800158e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001592:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001596:	fa93 f3a3 	rbit	r3, r3
 800159a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800159e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a2:	fab3 f383 	clz	r3, r3
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	095b      	lsrs	r3, r3, #5
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d102      	bne.n	80015bc <HAL_RCC_OscConfig+0x4d8>
 80015b6:	4b45      	ldr	r3, [pc, #276]	@ (80016cc <HAL_RCC_OscConfig+0x5e8>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	e013      	b.n	80015e4 <HAL_RCC_OscConfig+0x500>
 80015bc:	2302      	movs	r3, #2
 80015be:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80015c6:	fa93 f3a3 	rbit	r3, r3
 80015ca:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80015ce:	2302      	movs	r3, #2
 80015d0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80015d4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80015d8:	fa93 f3a3 	rbit	r3, r3
 80015dc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80015e0:	4b3a      	ldr	r3, [pc, #232]	@ (80016cc <HAL_RCC_OscConfig+0x5e8>)
 80015e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e4:	2202      	movs	r2, #2
 80015e6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80015ea:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80015ee:	fa92 f2a2 	rbit	r2, r2
 80015f2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80015f6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80015fa:	fab2 f282 	clz	r2, r2
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	f042 0220 	orr.w	r2, r2, #32
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	f002 021f 	and.w	r2, r2, #31
 800160a:	2101      	movs	r1, #1
 800160c:	fa01 f202 	lsl.w	r2, r1, r2
 8001610:	4013      	ands	r3, r2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0af      	beq.n	8001576 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001616:	4b2d      	ldr	r3, [pc, #180]	@ (80016cc <HAL_RCC_OscConfig+0x5e8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800161e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001622:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	21f8      	movs	r1, #248	@ 0xf8
 800162c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001630:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001634:	fa91 f1a1 	rbit	r1, r1
 8001638:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800163c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001640:	fab1 f181 	clz	r1, r1
 8001644:	b2c9      	uxtb	r1, r1
 8001646:	408b      	lsls	r3, r1
 8001648:	4920      	ldr	r1, [pc, #128]	@ (80016cc <HAL_RCC_OscConfig+0x5e8>)
 800164a:	4313      	orrs	r3, r2
 800164c:	600b      	str	r3, [r1, #0]
 800164e:	e06c      	b.n	800172a <HAL_RCC_OscConfig+0x646>
 8001650:	2301      	movs	r3, #1
 8001652:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001656:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800165a:	fa93 f3a3 	rbit	r3, r3
 800165e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001662:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001666:	fab3 f383 	clz	r3, r3
 800166a:	b2db      	uxtb	r3, r3
 800166c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001670:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	461a      	mov	r2, r3
 8001678:	2300      	movs	r3, #0
 800167a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167c:	f7ff f9d8 	bl	8000a30 <HAL_GetTick>
 8001680:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001684:	e00a      	b.n	800169c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001686:	f7ff f9d3 	bl	8000a30 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d902      	bls.n	800169c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	f000 bd5a 	b.w	8002150 <HAL_RCC_OscConfig+0x106c>
 800169c:	2302      	movs	r3, #2
 800169e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80016a6:	fa93 f3a3 	rbit	r3, r3
 80016aa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80016ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016b2:	fab3 f383 	clz	r3, r3
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	095b      	lsrs	r3, r3, #5
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d104      	bne.n	80016d0 <HAL_RCC_OscConfig+0x5ec>
 80016c6:	4b01      	ldr	r3, [pc, #4]	@ (80016cc <HAL_RCC_OscConfig+0x5e8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	e015      	b.n	80016f8 <HAL_RCC_OscConfig+0x614>
 80016cc:	40021000 	.word	0x40021000
 80016d0:	2302      	movs	r3, #2
 80016d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80016da:	fa93 f3a3 	rbit	r3, r3
 80016de:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80016e2:	2302      	movs	r3, #2
 80016e4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80016e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80016ec:	fa93 f3a3 	rbit	r3, r3
 80016f0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80016f4:	4bc8      	ldr	r3, [pc, #800]	@ (8001a18 <HAL_RCC_OscConfig+0x934>)
 80016f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f8:	2202      	movs	r2, #2
 80016fa:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80016fe:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001702:	fa92 f2a2 	rbit	r2, r2
 8001706:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800170a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800170e:	fab2 f282 	clz	r2, r2
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	f042 0220 	orr.w	r2, r2, #32
 8001718:	b2d2      	uxtb	r2, r2
 800171a:	f002 021f 	and.w	r2, r2, #31
 800171e:	2101      	movs	r1, #1
 8001720:	fa01 f202 	lsl.w	r2, r1, r2
 8001724:	4013      	ands	r3, r2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1ad      	bne.n	8001686 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800172a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800172e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0308 	and.w	r3, r3, #8
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 8110 	beq.w	8001960 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001740:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001744:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d079      	beq.n	8001844 <HAL_RCC_OscConfig+0x760>
 8001750:	2301      	movs	r3, #1
 8001752:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001756:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800175a:	fa93 f3a3 	rbit	r3, r3
 800175e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001762:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001766:	fab3 f383 	clz	r3, r3
 800176a:	b2db      	uxtb	r3, r3
 800176c:	461a      	mov	r2, r3
 800176e:	4bab      	ldr	r3, [pc, #684]	@ (8001a1c <HAL_RCC_OscConfig+0x938>)
 8001770:	4413      	add	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	461a      	mov	r2, r3
 8001776:	2301      	movs	r3, #1
 8001778:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177a:	f7ff f959 	bl	8000a30 <HAL_GetTick>
 800177e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001782:	e00a      	b.n	800179a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001784:	f7ff f954 	bl	8000a30 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d902      	bls.n	800179a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	f000 bcdb 	b.w	8002150 <HAL_RCC_OscConfig+0x106c>
 800179a:	2302      	movs	r3, #2
 800179c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80017a4:	fa93 f3a3 	rbit	r3, r3
 80017a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80017ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017b0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80017b4:	2202      	movs	r2, #2
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017bc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	fa93 f2a3 	rbit	r2, r3
 80017c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80017d8:	2202      	movs	r2, #2
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	fa93 f2a3 	rbit	r2, r3
 80017ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80017f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f4:	4b88      	ldr	r3, [pc, #544]	@ (8001a18 <HAL_RCC_OscConfig+0x934>)
 80017f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017fc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001800:	2102      	movs	r1, #2
 8001802:	6019      	str	r1, [r3, #0]
 8001804:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001808:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	fa93 f1a3 	rbit	r1, r3
 8001812:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001816:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800181a:	6019      	str	r1, [r3, #0]
  return result;
 800181c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001820:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	fab3 f383 	clz	r3, r3
 800182a:	b2db      	uxtb	r3, r3
 800182c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001830:	b2db      	uxtb	r3, r3
 8001832:	f003 031f 	and.w	r3, r3, #31
 8001836:	2101      	movs	r1, #1
 8001838:	fa01 f303 	lsl.w	r3, r1, r3
 800183c:	4013      	ands	r3, r2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0a0      	beq.n	8001784 <HAL_RCC_OscConfig+0x6a0>
 8001842:	e08d      	b.n	8001960 <HAL_RCC_OscConfig+0x87c>
 8001844:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001848:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800184c:	2201      	movs	r2, #1
 800184e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001850:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001854:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	fa93 f2a3 	rbit	r2, r3
 800185e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001862:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001866:	601a      	str	r2, [r3, #0]
  return result;
 8001868:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800186c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001870:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001872:	fab3 f383 	clz	r3, r3
 8001876:	b2db      	uxtb	r3, r3
 8001878:	461a      	mov	r2, r3
 800187a:	4b68      	ldr	r3, [pc, #416]	@ (8001a1c <HAL_RCC_OscConfig+0x938>)
 800187c:	4413      	add	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	461a      	mov	r2, r3
 8001882:	2300      	movs	r3, #0
 8001884:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001886:	f7ff f8d3 	bl	8000a30 <HAL_GetTick>
 800188a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800188e:	e00a      	b.n	80018a6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001890:	f7ff f8ce 	bl	8000a30 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d902      	bls.n	80018a6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	f000 bc55 	b.w	8002150 <HAL_RCC_OscConfig+0x106c>
 80018a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018aa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80018ae:	2202      	movs	r2, #2
 80018b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	fa93 f2a3 	rbit	r2, r3
 80018c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018c4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80018d2:	2202      	movs	r2, #2
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018da:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	fa93 f2a3 	rbit	r2, r3
 80018e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018f2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80018f6:	2202      	movs	r2, #2
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018fe:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	fa93 f2a3 	rbit	r2, r3
 8001908:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800190c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001910:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001912:	4b41      	ldr	r3, [pc, #260]	@ (8001a18 <HAL_RCC_OscConfig+0x934>)
 8001914:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800191a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800191e:	2102      	movs	r1, #2
 8001920:	6019      	str	r1, [r3, #0]
 8001922:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001926:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	fa93 f1a3 	rbit	r1, r3
 8001930:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001934:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001938:	6019      	str	r1, [r3, #0]
  return result;
 800193a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800193e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	fab3 f383 	clz	r3, r3
 8001948:	b2db      	uxtb	r3, r3
 800194a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800194e:	b2db      	uxtb	r3, r3
 8001950:	f003 031f 	and.w	r3, r3, #31
 8001954:	2101      	movs	r1, #1
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	4013      	ands	r3, r2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d197      	bne.n	8001890 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001960:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001964:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 81a1 	beq.w	8001cb8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001976:	2300      	movs	r3, #0
 8001978:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800197c:	4b26      	ldr	r3, [pc, #152]	@ (8001a18 <HAL_RCC_OscConfig+0x934>)
 800197e:	69db      	ldr	r3, [r3, #28]
 8001980:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d116      	bne.n	80019b6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001988:	4b23      	ldr	r3, [pc, #140]	@ (8001a18 <HAL_RCC_OscConfig+0x934>)
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	4a22      	ldr	r2, [pc, #136]	@ (8001a18 <HAL_RCC_OscConfig+0x934>)
 800198e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001992:	61d3      	str	r3, [r2, #28]
 8001994:	4b20      	ldr	r3, [pc, #128]	@ (8001a18 <HAL_RCC_OscConfig+0x934>)
 8001996:	69db      	ldr	r3, [r3, #28]
 8001998:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800199c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019a0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019aa:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80019ae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80019b0:	2301      	movs	r3, #1
 80019b2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a20 <HAL_RCC_OscConfig+0x93c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d11a      	bne.n	80019f8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019c2:	4b17      	ldr	r3, [pc, #92]	@ (8001a20 <HAL_RCC_OscConfig+0x93c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a16      	ldr	r2, [pc, #88]	@ (8001a20 <HAL_RCC_OscConfig+0x93c>)
 80019c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ce:	f7ff f82f 	bl	8000a30 <HAL_GetTick>
 80019d2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d6:	e009      	b.n	80019ec <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d8:	f7ff f82a 	bl	8000a30 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b64      	cmp	r3, #100	@ 0x64
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e3b1      	b.n	8002150 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001a20 <HAL_RCC_OscConfig+0x93c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0ef      	beq.n	80019d8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d10d      	bne.n	8001a24 <HAL_RCC_OscConfig+0x940>
 8001a08:	4b03      	ldr	r3, [pc, #12]	@ (8001a18 <HAL_RCC_OscConfig+0x934>)
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	4a02      	ldr	r2, [pc, #8]	@ (8001a18 <HAL_RCC_OscConfig+0x934>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6213      	str	r3, [r2, #32]
 8001a14:	e03c      	b.n	8001a90 <HAL_RCC_OscConfig+0x9ac>
 8001a16:	bf00      	nop
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	10908120 	.word	0x10908120
 8001a20:	40007000 	.word	0x40007000
 8001a24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d10c      	bne.n	8001a4e <HAL_RCC_OscConfig+0x96a>
 8001a34:	4bc1      	ldr	r3, [pc, #772]	@ (8001d3c <HAL_RCC_OscConfig+0xc58>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	4ac0      	ldr	r2, [pc, #768]	@ (8001d3c <HAL_RCC_OscConfig+0xc58>)
 8001a3a:	f023 0301 	bic.w	r3, r3, #1
 8001a3e:	6213      	str	r3, [r2, #32]
 8001a40:	4bbe      	ldr	r3, [pc, #760]	@ (8001d3c <HAL_RCC_OscConfig+0xc58>)
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	4abd      	ldr	r2, [pc, #756]	@ (8001d3c <HAL_RCC_OscConfig+0xc58>)
 8001a46:	f023 0304 	bic.w	r3, r3, #4
 8001a4a:	6213      	str	r3, [r2, #32]
 8001a4c:	e020      	b.n	8001a90 <HAL_RCC_OscConfig+0x9ac>
 8001a4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	2b05      	cmp	r3, #5
 8001a5c:	d10c      	bne.n	8001a78 <HAL_RCC_OscConfig+0x994>
 8001a5e:	4bb7      	ldr	r3, [pc, #732]	@ (8001d3c <HAL_RCC_OscConfig+0xc58>)
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	4ab6      	ldr	r2, [pc, #728]	@ (8001d3c <HAL_RCC_OscConfig+0xc58>)
 8001a64:	f043 0304 	orr.w	r3, r3, #4
 8001a68:	6213      	str	r3, [r2, #32]
 8001a6a:	4bb4      	ldr	r3, [pc, #720]	@ (8001d3c <HAL_RCC_OscConfig+0xc58>)
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	4ab3      	ldr	r2, [pc, #716]	@ (8001d3c <HAL_RCC_OscConfig+0xc58>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6213      	str	r3, [r2, #32]
 8001a76:	e00b      	b.n	8001a90 <HAL_RCC_OscConfig+0x9ac>
 8001a78:	4bb0      	ldr	r3, [pc, #704]	@ (8001d3c <HAL_RCC_OscConfig+0xc58>)
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	4aaf      	ldr	r2, [pc, #700]	@ (8001d3c <HAL_RCC_OscConfig+0xc58>)
 8001a7e:	f023 0301 	bic.w	r3, r3, #1
 8001a82:	6213      	str	r3, [r2, #32]
 8001a84:	4bad      	ldr	r3, [pc, #692]	@ (8001d3c <HAL_RCC_OscConfig+0xc58>)
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	4aac      	ldr	r2, [pc, #688]	@ (8001d3c <HAL_RCC_OscConfig+0xc58>)
 8001a8a:	f023 0304 	bic.w	r3, r3, #4
 8001a8e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a94:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 8081 	beq.w	8001ba4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa2:	f7fe ffc5 	bl	8000a30 <HAL_GetTick>
 8001aa6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aaa:	e00b      	b.n	8001ac4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aac:	f7fe ffc0 	bl	8000a30 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e345      	b.n	8002150 <HAL_RCC_OscConfig+0x106c>
 8001ac4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ac8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001acc:	2202      	movs	r2, #2
 8001ace:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ad4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	fa93 f2a3 	rbit	r2, r3
 8001ade:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ae2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aec:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001af0:	2202      	movs	r2, #2
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	fa93 f2a3 	rbit	r2, r3
 8001b02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b06:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001b0a:	601a      	str	r2, [r3, #0]
  return result;
 8001b0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b10:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001b14:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b16:	fab3 f383 	clz	r3, r3
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	095b      	lsrs	r3, r3, #5
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	f043 0302 	orr.w	r3, r3, #2
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d102      	bne.n	8001b30 <HAL_RCC_OscConfig+0xa4c>
 8001b2a:	4b84      	ldr	r3, [pc, #528]	@ (8001d3c <HAL_RCC_OscConfig+0xc58>)
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	e013      	b.n	8001b58 <HAL_RCC_OscConfig+0xa74>
 8001b30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b34:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001b38:	2202      	movs	r2, #2
 8001b3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b40:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	fa93 f2a3 	rbit	r2, r3
 8001b4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b4e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	4b79      	ldr	r3, [pc, #484]	@ (8001d3c <HAL_RCC_OscConfig+0xc58>)
 8001b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b58:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b5c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001b60:	2102      	movs	r1, #2
 8001b62:	6011      	str	r1, [r2, #0]
 8001b64:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b68:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001b6c:	6812      	ldr	r2, [r2, #0]
 8001b6e:	fa92 f1a2 	rbit	r1, r2
 8001b72:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b76:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001b7a:	6011      	str	r1, [r2, #0]
  return result;
 8001b7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b80:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001b84:	6812      	ldr	r2, [r2, #0]
 8001b86:	fab2 f282 	clz	r2, r2
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	f002 021f 	and.w	r2, r2, #31
 8001b96:	2101      	movs	r1, #1
 8001b98:	fa01 f202 	lsl.w	r2, r1, r2
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d084      	beq.n	8001aac <HAL_RCC_OscConfig+0x9c8>
 8001ba2:	e07f      	b.n	8001ca4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba4:	f7fe ff44 	bl	8000a30 <HAL_GetTick>
 8001ba8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bac:	e00b      	b.n	8001bc6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bae:	f7fe ff3f 	bl	8000a30 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e2c4      	b.n	8002150 <HAL_RCC_OscConfig+0x106c>
 8001bc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bca:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001bce:	2202      	movs	r2, #2
 8001bd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	fa93 f2a3 	rbit	r2, r3
 8001be0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001be4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bee:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bfa:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	fa93 f2a3 	rbit	r2, r3
 8001c04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c08:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001c0c:	601a      	str	r2, [r3, #0]
  return result;
 8001c0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c12:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001c16:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c18:	fab3 f383 	clz	r3, r3
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	095b      	lsrs	r3, r3, #5
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	f043 0302 	orr.w	r3, r3, #2
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d102      	bne.n	8001c32 <HAL_RCC_OscConfig+0xb4e>
 8001c2c:	4b43      	ldr	r3, [pc, #268]	@ (8001d3c <HAL_RCC_OscConfig+0xc58>)
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	e013      	b.n	8001c5a <HAL_RCC_OscConfig+0xb76>
 8001c32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c36:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c42:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	fa93 f2a3 	rbit	r2, r3
 8001c4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c50:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	4b39      	ldr	r3, [pc, #228]	@ (8001d3c <HAL_RCC_OscConfig+0xc58>)
 8001c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c5e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001c62:	2102      	movs	r1, #2
 8001c64:	6011      	str	r1, [r2, #0]
 8001c66:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c6a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	fa92 f1a2 	rbit	r1, r2
 8001c74:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c78:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001c7c:	6011      	str	r1, [r2, #0]
  return result;
 8001c7e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c82:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	fab2 f282 	clz	r2, r2
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	f002 021f 	and.w	r2, r2, #31
 8001c98:	2101      	movs	r1, #1
 8001c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d184      	bne.n	8001bae <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ca4:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d105      	bne.n	8001cb8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cac:	4b23      	ldr	r3, [pc, #140]	@ (8001d3c <HAL_RCC_OscConfig+0xc58>)
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	4a22      	ldr	r2, [pc, #136]	@ (8001d3c <HAL_RCC_OscConfig+0xc58>)
 8001cb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cb6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cbc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 8242 	beq.w	800214e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cca:	4b1c      	ldr	r3, [pc, #112]	@ (8001d3c <HAL_RCC_OscConfig+0xc58>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 030c 	and.w	r3, r3, #12
 8001cd2:	2b08      	cmp	r3, #8
 8001cd4:	f000 8213 	beq.w	80020fe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cdc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	f040 8162 	bne.w	8001fae <HAL_RCC_OscConfig+0xeca>
 8001cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cee:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001cf2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001cf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cfc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	fa93 f2a3 	rbit	r2, r3
 8001d06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d0a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001d0e:	601a      	str	r2, [r3, #0]
  return result;
 8001d10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d14:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001d18:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1a:	fab3 f383 	clz	r3, r3
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d24:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d30:	f7fe fe7e 	bl	8000a30 <HAL_GetTick>
 8001d34:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d38:	e00c      	b.n	8001d54 <HAL_RCC_OscConfig+0xc70>
 8001d3a:	bf00      	nop
 8001d3c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d40:	f7fe fe76 	bl	8000a30 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e1fd      	b.n	8002150 <HAL_RCC_OscConfig+0x106c>
 8001d54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d58:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001d5c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d66:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	fa93 f2a3 	rbit	r2, r3
 8001d70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d74:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001d78:	601a      	str	r2, [r3, #0]
  return result;
 8001d7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d7e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001d82:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d84:	fab3 f383 	clz	r3, r3
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d102      	bne.n	8001d9e <HAL_RCC_OscConfig+0xcba>
 8001d98:	4bb0      	ldr	r3, [pc, #704]	@ (800205c <HAL_RCC_OscConfig+0xf78>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	e027      	b.n	8001dee <HAL_RCC_OscConfig+0xd0a>
 8001d9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001da6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001daa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001db0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	fa93 f2a3 	rbit	r2, r3
 8001dba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dbe:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001dcc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dd6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	fa93 f2a3 	rbit	r2, r3
 8001de0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	4b9c      	ldr	r3, [pc, #624]	@ (800205c <HAL_RCC_OscConfig+0xf78>)
 8001dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001df2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001df6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001dfa:	6011      	str	r1, [r2, #0]
 8001dfc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e00:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	fa92 f1a2 	rbit	r1, r2
 8001e0a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e0e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001e12:	6011      	str	r1, [r2, #0]
  return result;
 8001e14:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e18:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001e1c:	6812      	ldr	r2, [r2, #0]
 8001e1e:	fab2 f282 	clz	r2, r2
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	f042 0220 	orr.w	r2, r2, #32
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	f002 021f 	and.w	r2, r2, #31
 8001e2e:	2101      	movs	r1, #1
 8001e30:	fa01 f202 	lsl.w	r2, r1, r2
 8001e34:	4013      	ands	r3, r2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d182      	bne.n	8001d40 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e3a:	4b88      	ldr	r3, [pc, #544]	@ (800205c <HAL_RCC_OscConfig+0xf78>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001e42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001e4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	430b      	orrs	r3, r1
 8001e5c:	497f      	ldr	r1, [pc, #508]	@ (800205c <HAL_RCC_OscConfig+0xf78>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	604b      	str	r3, [r1, #4]
 8001e62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e66:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001e6a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001e6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e74:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	fa93 f2a3 	rbit	r2, r3
 8001e7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e82:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001e86:	601a      	str	r2, [r3, #0]
  return result;
 8001e88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e8c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001e90:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e92:	fab3 f383 	clz	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e9c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea8:	f7fe fdc2 	bl	8000a30 <HAL_GetTick>
 8001eac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eb0:	e009      	b.n	8001ec6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb2:	f7fe fdbd 	bl	8000a30 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e144      	b.n	8002150 <HAL_RCC_OscConfig+0x106c>
 8001ec6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eca:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001ece:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ed2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ed8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	fa93 f2a3 	rbit	r2, r3
 8001ee2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001eea:	601a      	str	r2, [r3, #0]
  return result;
 8001eec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001ef4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ef6:	fab3 f383 	clz	r3, r3
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	095b      	lsrs	r3, r3, #5
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d102      	bne.n	8001f10 <HAL_RCC_OscConfig+0xe2c>
 8001f0a:	4b54      	ldr	r3, [pc, #336]	@ (800205c <HAL_RCC_OscConfig+0xf78>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	e027      	b.n	8001f60 <HAL_RCC_OscConfig+0xe7c>
 8001f10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f14:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001f18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f22:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	fa93 f2a3 	rbit	r2, r3
 8001f2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f30:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f3a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001f3e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f48:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	fa93 f2a3 	rbit	r2, r3
 8001f52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f56:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	4b3f      	ldr	r3, [pc, #252]	@ (800205c <HAL_RCC_OscConfig+0xf78>)
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f60:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f64:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001f68:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001f6c:	6011      	str	r1, [r2, #0]
 8001f6e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f72:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	fa92 f1a2 	rbit	r1, r2
 8001f7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f80:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001f84:	6011      	str	r1, [r2, #0]
  return result;
 8001f86:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f8a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	fab2 f282 	clz	r2, r2
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	f042 0220 	orr.w	r2, r2, #32
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	f002 021f 	and.w	r2, r2, #31
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d082      	beq.n	8001eb2 <HAL_RCC_OscConfig+0xdce>
 8001fac:	e0cf      	b.n	800214e <HAL_RCC_OscConfig+0x106a>
 8001fae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001fb6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001fba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	fa93 f2a3 	rbit	r2, r3
 8001fca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fce:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001fd2:	601a      	str	r2, [r3, #0]
  return result;
 8001fd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001fdc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fde:	fab3 f383 	clz	r3, r3
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001fe8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	461a      	mov	r2, r3
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff4:	f7fe fd1c 	bl	8000a30 <HAL_GetTick>
 8001ff8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ffc:	e009      	b.n	8002012 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ffe:	f7fe fd17 	bl	8000a30 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e09e      	b.n	8002150 <HAL_RCC_OscConfig+0x106c>
 8002012:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002016:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800201a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800201e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002020:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002024:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	fa93 f2a3 	rbit	r2, r3
 800202e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002032:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002036:	601a      	str	r2, [r3, #0]
  return result;
 8002038:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800203c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002040:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002042:	fab3 f383 	clz	r3, r3
 8002046:	b2db      	uxtb	r3, r3
 8002048:	095b      	lsrs	r3, r3, #5
 800204a:	b2db      	uxtb	r3, r3
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b01      	cmp	r3, #1
 8002054:	d104      	bne.n	8002060 <HAL_RCC_OscConfig+0xf7c>
 8002056:	4b01      	ldr	r3, [pc, #4]	@ (800205c <HAL_RCC_OscConfig+0xf78>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	e029      	b.n	80020b0 <HAL_RCC_OscConfig+0xfcc>
 800205c:	40021000 	.word	0x40021000
 8002060:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002064:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002068:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800206c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002072:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	fa93 f2a3 	rbit	r2, r3
 800207c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002080:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800208a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800208e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002098:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	fa93 f2a3 	rbit	r2, r3
 80020a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	4b2b      	ldr	r3, [pc, #172]	@ (800215c <HAL_RCC_OscConfig+0x1078>)
 80020ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020b4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80020b8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80020bc:	6011      	str	r1, [r2, #0]
 80020be:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020c2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80020c6:	6812      	ldr	r2, [r2, #0]
 80020c8:	fa92 f1a2 	rbit	r1, r2
 80020cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020d0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80020d4:	6011      	str	r1, [r2, #0]
  return result;
 80020d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020da:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	fab2 f282 	clz	r2, r2
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	f042 0220 	orr.w	r2, r2, #32
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	f002 021f 	and.w	r2, r2, #31
 80020f0:	2101      	movs	r1, #1
 80020f2:	fa01 f202 	lsl.w	r2, r1, r2
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d180      	bne.n	8001ffe <HAL_RCC_OscConfig+0xf1a>
 80020fc:	e027      	b.n	800214e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002102:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d101      	bne.n	8002112 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e01e      	b.n	8002150 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002112:	4b12      	ldr	r3, [pc, #72]	@ (800215c <HAL_RCC_OscConfig+0x1078>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800211a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800211e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002122:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002126:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	429a      	cmp	r2, r3
 8002130:	d10b      	bne.n	800214a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002132:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002136:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800213a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800213e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002146:	429a      	cmp	r2, r3
 8002148:	d001      	beq.n	800214e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40021000 	.word	0x40021000

08002160 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b09e      	sub	sp, #120	@ 0x78
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800216a:	2300      	movs	r3, #0
 800216c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e162      	b.n	800243e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002178:	4b90      	ldr	r3, [pc, #576]	@ (80023bc <HAL_RCC_ClockConfig+0x25c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d910      	bls.n	80021a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002186:	4b8d      	ldr	r3, [pc, #564]	@ (80023bc <HAL_RCC_ClockConfig+0x25c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 0207 	bic.w	r2, r3, #7
 800218e:	498b      	ldr	r1, [pc, #556]	@ (80023bc <HAL_RCC_ClockConfig+0x25c>)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	4313      	orrs	r3, r2
 8002194:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002196:	4b89      	ldr	r3, [pc, #548]	@ (80023bc <HAL_RCC_ClockConfig+0x25c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e14a      	b.n	800243e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d008      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b4:	4b82      	ldr	r3, [pc, #520]	@ (80023c0 <HAL_RCC_ClockConfig+0x260>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	497f      	ldr	r1, [pc, #508]	@ (80023c0 <HAL_RCC_ClockConfig+0x260>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 80dc 	beq.w	800238c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d13c      	bne.n	8002256 <HAL_RCC_ClockConfig+0xf6>
 80021dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021e0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021e4:	fa93 f3a3 	rbit	r3, r3
 80021e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80021ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ec:	fab3 f383 	clz	r3, r3
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	095b      	lsrs	r3, r3, #5
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d102      	bne.n	8002206 <HAL_RCC_ClockConfig+0xa6>
 8002200:	4b6f      	ldr	r3, [pc, #444]	@ (80023c0 <HAL_RCC_ClockConfig+0x260>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	e00f      	b.n	8002226 <HAL_RCC_ClockConfig+0xc6>
 8002206:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800220a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800220e:	fa93 f3a3 	rbit	r3, r3
 8002212:	667b      	str	r3, [r7, #100]	@ 0x64
 8002214:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002218:	663b      	str	r3, [r7, #96]	@ 0x60
 800221a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800221c:	fa93 f3a3 	rbit	r3, r3
 8002220:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002222:	4b67      	ldr	r3, [pc, #412]	@ (80023c0 <HAL_RCC_ClockConfig+0x260>)
 8002224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002226:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800222a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800222c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800222e:	fa92 f2a2 	rbit	r2, r2
 8002232:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002234:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002236:	fab2 f282 	clz	r2, r2
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	f042 0220 	orr.w	r2, r2, #32
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	f002 021f 	and.w	r2, r2, #31
 8002246:	2101      	movs	r1, #1
 8002248:	fa01 f202 	lsl.w	r2, r1, r2
 800224c:	4013      	ands	r3, r2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d17b      	bne.n	800234a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e0f3      	b.n	800243e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b02      	cmp	r3, #2
 800225c:	d13c      	bne.n	80022d8 <HAL_RCC_ClockConfig+0x178>
 800225e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002262:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002264:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002266:	fa93 f3a3 	rbit	r3, r3
 800226a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800226c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800226e:	fab3 f383 	clz	r3, r3
 8002272:	b2db      	uxtb	r3, r3
 8002274:	095b      	lsrs	r3, r3, #5
 8002276:	b2db      	uxtb	r3, r3
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b01      	cmp	r3, #1
 8002280:	d102      	bne.n	8002288 <HAL_RCC_ClockConfig+0x128>
 8002282:	4b4f      	ldr	r3, [pc, #316]	@ (80023c0 <HAL_RCC_ClockConfig+0x260>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	e00f      	b.n	80022a8 <HAL_RCC_ClockConfig+0x148>
 8002288:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800228c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002290:	fa93 f3a3 	rbit	r3, r3
 8002294:	647b      	str	r3, [r7, #68]	@ 0x44
 8002296:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800229a:	643b      	str	r3, [r7, #64]	@ 0x40
 800229c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800229e:	fa93 f3a3 	rbit	r3, r3
 80022a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022a4:	4b46      	ldr	r3, [pc, #280]	@ (80023c0 <HAL_RCC_ClockConfig+0x260>)
 80022a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022ac:	63ba      	str	r2, [r7, #56]	@ 0x38
 80022ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80022b0:	fa92 f2a2 	rbit	r2, r2
 80022b4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80022b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80022b8:	fab2 f282 	clz	r2, r2
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	f042 0220 	orr.w	r2, r2, #32
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	f002 021f 	and.w	r2, r2, #31
 80022c8:	2101      	movs	r1, #1
 80022ca:	fa01 f202 	lsl.w	r2, r1, r2
 80022ce:	4013      	ands	r3, r2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d13a      	bne.n	800234a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e0b2      	b.n	800243e <HAL_RCC_ClockConfig+0x2de>
 80022d8:	2302      	movs	r3, #2
 80022da:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022de:	fa93 f3a3 	rbit	r3, r3
 80022e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80022e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e6:	fab3 f383 	clz	r3, r3
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	095b      	lsrs	r3, r3, #5
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d102      	bne.n	8002300 <HAL_RCC_ClockConfig+0x1a0>
 80022fa:	4b31      	ldr	r3, [pc, #196]	@ (80023c0 <HAL_RCC_ClockConfig+0x260>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	e00d      	b.n	800231c <HAL_RCC_ClockConfig+0x1bc>
 8002300:	2302      	movs	r3, #2
 8002302:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002306:	fa93 f3a3 	rbit	r3, r3
 800230a:	627b      	str	r3, [r7, #36]	@ 0x24
 800230c:	2302      	movs	r3, #2
 800230e:	623b      	str	r3, [r7, #32]
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	61fb      	str	r3, [r7, #28]
 8002318:	4b29      	ldr	r3, [pc, #164]	@ (80023c0 <HAL_RCC_ClockConfig+0x260>)
 800231a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231c:	2202      	movs	r2, #2
 800231e:	61ba      	str	r2, [r7, #24]
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	fa92 f2a2 	rbit	r2, r2
 8002326:	617a      	str	r2, [r7, #20]
  return result;
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	fab2 f282 	clz	r2, r2
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	f042 0220 	orr.w	r2, r2, #32
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	f002 021f 	and.w	r2, r2, #31
 800233a:	2101      	movs	r1, #1
 800233c:	fa01 f202 	lsl.w	r2, r1, r2
 8002340:	4013      	ands	r3, r2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e079      	b.n	800243e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800234a:	4b1d      	ldr	r3, [pc, #116]	@ (80023c0 <HAL_RCC_ClockConfig+0x260>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f023 0203 	bic.w	r2, r3, #3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	491a      	ldr	r1, [pc, #104]	@ (80023c0 <HAL_RCC_ClockConfig+0x260>)
 8002358:	4313      	orrs	r3, r2
 800235a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800235c:	f7fe fb68 	bl	8000a30 <HAL_GetTick>
 8002360:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002362:	e00a      	b.n	800237a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002364:	f7fe fb64 	bl	8000a30 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002372:	4293      	cmp	r3, r2
 8002374:	d901      	bls.n	800237a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e061      	b.n	800243e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800237a:	4b11      	ldr	r3, [pc, #68]	@ (80023c0 <HAL_RCC_ClockConfig+0x260>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 020c 	and.w	r2, r3, #12
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	429a      	cmp	r2, r3
 800238a:	d1eb      	bne.n	8002364 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800238c:	4b0b      	ldr	r3, [pc, #44]	@ (80023bc <HAL_RCC_ClockConfig+0x25c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	429a      	cmp	r2, r3
 8002398:	d214      	bcs.n	80023c4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239a:	4b08      	ldr	r3, [pc, #32]	@ (80023bc <HAL_RCC_ClockConfig+0x25c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f023 0207 	bic.w	r2, r3, #7
 80023a2:	4906      	ldr	r1, [pc, #24]	@ (80023bc <HAL_RCC_ClockConfig+0x25c>)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023aa:	4b04      	ldr	r3, [pc, #16]	@ (80023bc <HAL_RCC_ClockConfig+0x25c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d005      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e040      	b.n	800243e <HAL_RCC_ClockConfig+0x2de>
 80023bc:	40022000 	.word	0x40022000
 80023c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d008      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002448 <HAL_RCC_ClockConfig+0x2e8>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	491a      	ldr	r1, [pc, #104]	@ (8002448 <HAL_RCC_ClockConfig+0x2e8>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d009      	beq.n	8002402 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ee:	4b16      	ldr	r3, [pc, #88]	@ (8002448 <HAL_RCC_ClockConfig+0x2e8>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4912      	ldr	r1, [pc, #72]	@ (8002448 <HAL_RCC_ClockConfig+0x2e8>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002402:	f000 f829 	bl	8002458 <HAL_RCC_GetSysClockFreq>
 8002406:	4601      	mov	r1, r0
 8002408:	4b0f      	ldr	r3, [pc, #60]	@ (8002448 <HAL_RCC_ClockConfig+0x2e8>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002410:	22f0      	movs	r2, #240	@ 0xf0
 8002412:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	fa92 f2a2 	rbit	r2, r2
 800241a:	60fa      	str	r2, [r7, #12]
  return result;
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	fab2 f282 	clz	r2, r2
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	40d3      	lsrs	r3, r2
 8002426:	4a09      	ldr	r2, [pc, #36]	@ (800244c <HAL_RCC_ClockConfig+0x2ec>)
 8002428:	5cd3      	ldrb	r3, [r2, r3]
 800242a:	fa21 f303 	lsr.w	r3, r1, r3
 800242e:	4a08      	ldr	r2, [pc, #32]	@ (8002450 <HAL_RCC_ClockConfig+0x2f0>)
 8002430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002432:	4b08      	ldr	r3, [pc, #32]	@ (8002454 <HAL_RCC_ClockConfig+0x2f4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe fab6 	bl	80009a8 <HAL_InitTick>
  
  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3778      	adds	r7, #120	@ 0x78
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40021000 	.word	0x40021000
 800244c:	08004250 	.word	0x08004250
 8002450:	20000000 	.word	0x20000000
 8002454:	20000004 	.word	0x20000004

08002458 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002458:	b480      	push	{r7}
 800245a:	b08b      	sub	sp, #44	@ 0x2c
 800245c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800245e:	2300      	movs	r3, #0
 8002460:	61fb      	str	r3, [r7, #28]
 8002462:	2300      	movs	r3, #0
 8002464:	61bb      	str	r3, [r7, #24]
 8002466:	2300      	movs	r3, #0
 8002468:	627b      	str	r3, [r7, #36]	@ 0x24
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800246e:	2300      	movs	r3, #0
 8002470:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002472:	4b29      	ldr	r3, [pc, #164]	@ (8002518 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f003 030c 	and.w	r3, r3, #12
 800247e:	2b04      	cmp	r3, #4
 8002480:	d002      	beq.n	8002488 <HAL_RCC_GetSysClockFreq+0x30>
 8002482:	2b08      	cmp	r3, #8
 8002484:	d003      	beq.n	800248e <HAL_RCC_GetSysClockFreq+0x36>
 8002486:	e03c      	b.n	8002502 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002488:	4b24      	ldr	r3, [pc, #144]	@ (800251c <HAL_RCC_GetSysClockFreq+0xc4>)
 800248a:	623b      	str	r3, [r7, #32]
      break;
 800248c:	e03c      	b.n	8002508 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002494:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002498:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	fa92 f2a2 	rbit	r2, r2
 80024a0:	607a      	str	r2, [r7, #4]
  return result;
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	fab2 f282 	clz	r2, r2
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	40d3      	lsrs	r3, r2
 80024ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002520 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024ae:	5cd3      	ldrb	r3, [r2, r3]
 80024b0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80024b2:	4b19      	ldr	r3, [pc, #100]	@ (8002518 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	220f      	movs	r2, #15
 80024bc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	fa92 f2a2 	rbit	r2, r2
 80024c4:	60fa      	str	r2, [r7, #12]
  return result;
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	fab2 f282 	clz	r2, r2
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	40d3      	lsrs	r3, r2
 80024d0:	4a14      	ldr	r2, [pc, #80]	@ (8002524 <HAL_RCC_GetSysClockFreq+0xcc>)
 80024d2:	5cd3      	ldrb	r3, [r2, r3]
 80024d4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024e0:	4a0e      	ldr	r2, [pc, #56]	@ (800251c <HAL_RCC_GetSysClockFreq+0xc4>)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	fb02 f303 	mul.w	r3, r2, r3
 80024ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80024f0:	e004      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	4a0c      	ldr	r2, [pc, #48]	@ (8002528 <HAL_RCC_GetSysClockFreq+0xd0>)
 80024f6:	fb02 f303 	mul.w	r3, r2, r3
 80024fa:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80024fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fe:	623b      	str	r3, [r7, #32]
      break;
 8002500:	e002      	b.n	8002508 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002502:	4b06      	ldr	r3, [pc, #24]	@ (800251c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002504:	623b      	str	r3, [r7, #32]
      break;
 8002506:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002508:	6a3b      	ldr	r3, [r7, #32]
}
 800250a:	4618      	mov	r0, r3
 800250c:	372c      	adds	r7, #44	@ 0x2c
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	40021000 	.word	0x40021000
 800251c:	007a1200 	.word	0x007a1200
 8002520:	08004268 	.word	0x08004268
 8002524:	08004278 	.word	0x08004278
 8002528:	003d0900 	.word	0x003d0900

0800252c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002530:	4b03      	ldr	r3, [pc, #12]	@ (8002540 <HAL_RCC_GetHCLKFreq+0x14>)
 8002532:	681b      	ldr	r3, [r3, #0]
}
 8002534:	4618      	mov	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	20000000 	.word	0x20000000

08002544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800254a:	f7ff ffef 	bl	800252c <HAL_RCC_GetHCLKFreq>
 800254e:	4601      	mov	r1, r0
 8002550:	4b0b      	ldr	r3, [pc, #44]	@ (8002580 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002558:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800255c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	fa92 f2a2 	rbit	r2, r2
 8002564:	603a      	str	r2, [r7, #0]
  return result;
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	fab2 f282 	clz	r2, r2
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	40d3      	lsrs	r3, r2
 8002570:	4a04      	ldr	r2, [pc, #16]	@ (8002584 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002572:	5cd3      	ldrb	r3, [r2, r3]
 8002574:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002578:	4618      	mov	r0, r3
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40021000 	.word	0x40021000
 8002584:	08004260 	.word	0x08004260

08002588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800258e:	f7ff ffcd 	bl	800252c <HAL_RCC_GetHCLKFreq>
 8002592:	4601      	mov	r1, r0
 8002594:	4b0b      	ldr	r3, [pc, #44]	@ (80025c4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800259c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80025a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	fa92 f2a2 	rbit	r2, r2
 80025a8:	603a      	str	r2, [r7, #0]
  return result;
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	fab2 f282 	clz	r2, r2
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	40d3      	lsrs	r3, r2
 80025b4:	4a04      	ldr	r2, [pc, #16]	@ (80025c8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80025b6:	5cd3      	ldrb	r3, [r2, r3]
 80025b8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80025bc:	4618      	mov	r0, r3
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000
 80025c8:	08004260 	.word	0x08004260

080025cc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b092      	sub	sp, #72	@ 0x48
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80025dc:	2300      	movs	r3, #0
 80025de:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 80d4 	beq.w	8002798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025f0:	4b4e      	ldr	r3, [pc, #312]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10e      	bne.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025fc:	4b4b      	ldr	r3, [pc, #300]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	4a4a      	ldr	r2, [pc, #296]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002606:	61d3      	str	r3, [r2, #28]
 8002608:	4b48      	ldr	r3, [pc, #288]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002614:	2301      	movs	r3, #1
 8002616:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261a:	4b45      	ldr	r3, [pc, #276]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002622:	2b00      	cmp	r3, #0
 8002624:	d118      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002626:	4b42      	ldr	r3, [pc, #264]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a41      	ldr	r2, [pc, #260]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800262c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002630:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002632:	f7fe f9fd 	bl	8000a30 <HAL_GetTick>
 8002636:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002638:	e008      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800263a:	f7fe f9f9 	bl	8000a30 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b64      	cmp	r3, #100	@ 0x64
 8002646:	d901      	bls.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e14b      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264c:	4b38      	ldr	r3, [pc, #224]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f0      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002658:	4b34      	ldr	r3, [pc, #208]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002660:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 8084 	beq.w	8002772 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002672:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002674:	429a      	cmp	r2, r3
 8002676:	d07c      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002678:	4b2c      	ldr	r3, [pc, #176]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002680:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002682:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002686:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800268a:	fa93 f3a3 	rbit	r3, r3
 800268e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002692:	fab3 f383 	clz	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	461a      	mov	r2, r3
 800269a:	4b26      	ldr	r3, [pc, #152]	@ (8002734 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800269c:	4413      	add	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	461a      	mov	r2, r3
 80026a2:	2301      	movs	r3, #1
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80026aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ae:	fa93 f3a3 	rbit	r3, r3
 80026b2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80026b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026b6:	fab3 f383 	clz	r3, r3
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	461a      	mov	r2, r3
 80026be:	4b1d      	ldr	r3, [pc, #116]	@ (8002734 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026c0:	4413      	add	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	461a      	mov	r2, r3
 80026c6:	2300      	movs	r3, #0
 80026c8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026ca:	4a18      	ldr	r2, [pc, #96]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026ce:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d04b      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026da:	f7fe f9a9 	bl	8000a30 <HAL_GetTick>
 80026de:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e0:	e00a      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e2:	f7fe f9a5 	bl	8000a30 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e0f5      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80026f8:	2302      	movs	r3, #2
 80026fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026fe:	fa93 f3a3 	rbit	r3, r3
 8002702:	627b      	str	r3, [r7, #36]	@ 0x24
 8002704:	2302      	movs	r3, #2
 8002706:	623b      	str	r3, [r7, #32]
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	fa93 f3a3 	rbit	r3, r3
 800270e:	61fb      	str	r3, [r7, #28]
  return result;
 8002710:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002712:	fab3 f383 	clz	r3, r3
 8002716:	b2db      	uxtb	r3, r3
 8002718:	095b      	lsrs	r3, r3, #5
 800271a:	b2db      	uxtb	r3, r3
 800271c:	f043 0302 	orr.w	r3, r3, #2
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d108      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002726:	4b01      	ldr	r3, [pc, #4]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	e00d      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800272c:	40021000 	.word	0x40021000
 8002730:	40007000 	.word	0x40007000
 8002734:	10908100 	.word	0x10908100
 8002738:	2302      	movs	r3, #2
 800273a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	fa93 f3a3 	rbit	r3, r3
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	4b69      	ldr	r3, [pc, #420]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002748:	2202      	movs	r2, #2
 800274a:	613a      	str	r2, [r7, #16]
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	fa92 f2a2 	rbit	r2, r2
 8002752:	60fa      	str	r2, [r7, #12]
  return result;
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	fab2 f282 	clz	r2, r2
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	f002 021f 	and.w	r2, r2, #31
 8002766:	2101      	movs	r1, #1
 8002768:	fa01 f202 	lsl.w	r2, r1, r2
 800276c:	4013      	ands	r3, r2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0b7      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002772:	4b5e      	ldr	r3, [pc, #376]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	495b      	ldr	r1, [pc, #364]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002780:	4313      	orrs	r3, r2
 8002782:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002784:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002788:	2b01      	cmp	r3, #1
 800278a:	d105      	bne.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278c:	4b57      	ldr	r3, [pc, #348]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	4a56      	ldr	r2, [pc, #344]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002792:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002796:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027a4:	4b51      	ldr	r3, [pc, #324]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a8:	f023 0203 	bic.w	r2, r3, #3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	494e      	ldr	r1, [pc, #312]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0320 	and.w	r3, r3, #32
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d008      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027c2:	4b4a      	ldr	r3, [pc, #296]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	f023 0210 	bic.w	r2, r3, #16
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	4947      	ldr	r1, [pc, #284]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d008      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80027e0:	4b42      	ldr	r3, [pc, #264]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ec:	493f      	ldr	r1, [pc, #252]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d008      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027fe:	4b3b      	ldr	r3, [pc, #236]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002802:	f023 0220 	bic.w	r2, r3, #32
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	4938      	ldr	r1, [pc, #224]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800280c:	4313      	orrs	r3, r2
 800280e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d008      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800281c:	4b33      	ldr	r3, [pc, #204]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800281e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002820:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	4930      	ldr	r1, [pc, #192]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800282a:	4313      	orrs	r3, r2
 800282c:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002836:	2b00      	cmp	r3, #0
 8002838:	d008      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800283a:	4b2c      	ldr	r3, [pc, #176]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	4929      	ldr	r1, [pc, #164]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002848:	4313      	orrs	r3, r2
 800284a:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002858:	4b24      	ldr	r3, [pc, #144]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800285a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285c:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	4921      	ldr	r1, [pc, #132]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002866:	4313      	orrs	r3, r2
 8002868:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d008      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002876:	4b1d      	ldr	r3, [pc, #116]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	491a      	ldr	r1, [pc, #104]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002884:	4313      	orrs	r3, r2
 8002886:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d008      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002894:	4b15      	ldr	r3, [pc, #84]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002898:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a0:	4912      	ldr	r1, [pc, #72]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d008      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80028b2:	4b0e      	ldr	r3, [pc, #56]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b6:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028be:	490b      	ldr	r1, [pc, #44]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d008      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80028d0:	4b06      	ldr	r3, [pc, #24]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80028d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028dc:	4903      	ldr	r1, [pc, #12]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3748      	adds	r7, #72	@ 0x48
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40021000 	.word	0x40021000

080028f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e049      	b.n	8002996 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d106      	bne.n	800291c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7fd ff1e 	bl	8000758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2202      	movs	r2, #2
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3304      	adds	r3, #4
 800292c:	4619      	mov	r1, r3
 800292e:	4610      	mov	r0, r2
 8002930:	f000 f94c 	bl	8002bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d001      	beq.n	80029b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e033      	b.n	8002a20 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a19      	ldr	r2, [pc, #100]	@ (8002a2c <HAL_TIM_Base_Start+0x8c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d009      	beq.n	80029de <HAL_TIM_Base_Start+0x3e>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029d2:	d004      	beq.n	80029de <HAL_TIM_Base_Start+0x3e>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a15      	ldr	r2, [pc, #84]	@ (8002a30 <HAL_TIM_Base_Start+0x90>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d115      	bne.n	8002a0a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	4b13      	ldr	r3, [pc, #76]	@ (8002a34 <HAL_TIM_Base_Start+0x94>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2b06      	cmp	r3, #6
 80029ee:	d015      	beq.n	8002a1c <HAL_TIM_Base_Start+0x7c>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029f6:	d011      	beq.n	8002a1c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a08:	e008      	b.n	8002a1c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f042 0201 	orr.w	r2, r2, #1
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	e000      	b.n	8002a1e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	40012c00 	.word	0x40012c00
 8002a30:	40014000 	.word	0x40014000
 8002a34:	00010007 	.word	0x00010007

08002a38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d101      	bne.n	8002a54 <HAL_TIM_ConfigClockSource+0x1c>
 8002a50:	2302      	movs	r3, #2
 8002a52:	e0b6      	b.n	8002bc2 <HAL_TIM_ConfigClockSource+0x18a>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a72:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002a76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a90:	d03e      	beq.n	8002b10 <HAL_TIM_ConfigClockSource+0xd8>
 8002a92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a96:	f200 8087 	bhi.w	8002ba8 <HAL_TIM_ConfigClockSource+0x170>
 8002a9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a9e:	f000 8086 	beq.w	8002bae <HAL_TIM_ConfigClockSource+0x176>
 8002aa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002aa6:	d87f      	bhi.n	8002ba8 <HAL_TIM_ConfigClockSource+0x170>
 8002aa8:	2b70      	cmp	r3, #112	@ 0x70
 8002aaa:	d01a      	beq.n	8002ae2 <HAL_TIM_ConfigClockSource+0xaa>
 8002aac:	2b70      	cmp	r3, #112	@ 0x70
 8002aae:	d87b      	bhi.n	8002ba8 <HAL_TIM_ConfigClockSource+0x170>
 8002ab0:	2b60      	cmp	r3, #96	@ 0x60
 8002ab2:	d050      	beq.n	8002b56 <HAL_TIM_ConfigClockSource+0x11e>
 8002ab4:	2b60      	cmp	r3, #96	@ 0x60
 8002ab6:	d877      	bhi.n	8002ba8 <HAL_TIM_ConfigClockSource+0x170>
 8002ab8:	2b50      	cmp	r3, #80	@ 0x50
 8002aba:	d03c      	beq.n	8002b36 <HAL_TIM_ConfigClockSource+0xfe>
 8002abc:	2b50      	cmp	r3, #80	@ 0x50
 8002abe:	d873      	bhi.n	8002ba8 <HAL_TIM_ConfigClockSource+0x170>
 8002ac0:	2b40      	cmp	r3, #64	@ 0x40
 8002ac2:	d058      	beq.n	8002b76 <HAL_TIM_ConfigClockSource+0x13e>
 8002ac4:	2b40      	cmp	r3, #64	@ 0x40
 8002ac6:	d86f      	bhi.n	8002ba8 <HAL_TIM_ConfigClockSource+0x170>
 8002ac8:	2b30      	cmp	r3, #48	@ 0x30
 8002aca:	d064      	beq.n	8002b96 <HAL_TIM_ConfigClockSource+0x15e>
 8002acc:	2b30      	cmp	r3, #48	@ 0x30
 8002ace:	d86b      	bhi.n	8002ba8 <HAL_TIM_ConfigClockSource+0x170>
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	d060      	beq.n	8002b96 <HAL_TIM_ConfigClockSource+0x15e>
 8002ad4:	2b20      	cmp	r3, #32
 8002ad6:	d867      	bhi.n	8002ba8 <HAL_TIM_ConfigClockSource+0x170>
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d05c      	beq.n	8002b96 <HAL_TIM_ConfigClockSource+0x15e>
 8002adc:	2b10      	cmp	r3, #16
 8002ade:	d05a      	beq.n	8002b96 <HAL_TIM_ConfigClockSource+0x15e>
 8002ae0:	e062      	b.n	8002ba8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002af2:	f000 f953 	bl	8002d9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002b04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	609a      	str	r2, [r3, #8]
      break;
 8002b0e:	e04f      	b.n	8002bb0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b20:	f000 f93c 	bl	8002d9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b32:	609a      	str	r2, [r3, #8]
      break;
 8002b34:	e03c      	b.n	8002bb0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b42:	461a      	mov	r2, r3
 8002b44:	f000 f8b0 	bl	8002ca8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2150      	movs	r1, #80	@ 0x50
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 f909 	bl	8002d66 <TIM_ITRx_SetConfig>
      break;
 8002b54:	e02c      	b.n	8002bb0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b62:	461a      	mov	r2, r3
 8002b64:	f000 f8cf 	bl	8002d06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2160      	movs	r1, #96	@ 0x60
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 f8f9 	bl	8002d66 <TIM_ITRx_SetConfig>
      break;
 8002b74:	e01c      	b.n	8002bb0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b82:	461a      	mov	r2, r3
 8002b84:	f000 f890 	bl	8002ca8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2140      	movs	r1, #64	@ 0x40
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 f8e9 	bl	8002d66 <TIM_ITRx_SetConfig>
      break;
 8002b94:	e00c      	b.n	8002bb0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4610      	mov	r0, r2
 8002ba2:	f000 f8e0 	bl	8002d66 <TIM_ITRx_SetConfig>
      break;
 8002ba6:	e003      	b.n	8002bb0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	73fb      	strb	r3, [r7, #15]
      break;
 8002bac:	e000      	b.n	8002bb0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002bae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a2e      	ldr	r2, [pc, #184]	@ (8002c98 <TIM_Base_SetConfig+0xcc>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d003      	beq.n	8002bec <TIM_Base_SetConfig+0x20>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bea:	d108      	bne.n	8002bfe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a25      	ldr	r2, [pc, #148]	@ (8002c98 <TIM_Base_SetConfig+0xcc>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d00f      	beq.n	8002c26 <TIM_Base_SetConfig+0x5a>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c0c:	d00b      	beq.n	8002c26 <TIM_Base_SetConfig+0x5a>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a22      	ldr	r2, [pc, #136]	@ (8002c9c <TIM_Base_SetConfig+0xd0>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d007      	beq.n	8002c26 <TIM_Base_SetConfig+0x5a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a21      	ldr	r2, [pc, #132]	@ (8002ca0 <TIM_Base_SetConfig+0xd4>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d003      	beq.n	8002c26 <TIM_Base_SetConfig+0x5a>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a20      	ldr	r2, [pc, #128]	@ (8002ca4 <TIM_Base_SetConfig+0xd8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d108      	bne.n	8002c38 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a0e      	ldr	r2, [pc, #56]	@ (8002c98 <TIM_Base_SetConfig+0xcc>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d00b      	beq.n	8002c7c <TIM_Base_SetConfig+0xb0>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a0d      	ldr	r2, [pc, #52]	@ (8002c9c <TIM_Base_SetConfig+0xd0>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d007      	beq.n	8002c7c <TIM_Base_SetConfig+0xb0>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ca0 <TIM_Base_SetConfig+0xd4>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d003      	beq.n	8002c7c <TIM_Base_SetConfig+0xb0>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a0b      	ldr	r2, [pc, #44]	@ (8002ca4 <TIM_Base_SetConfig+0xd8>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d103      	bne.n	8002c84 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	615a      	str	r2, [r3, #20]
}
 8002c8a:	bf00      	nop
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40012c00 	.word	0x40012c00
 8002c9c:	40014000 	.word	0x40014000
 8002ca0:	40014400 	.word	0x40014400
 8002ca4:	40014800 	.word	0x40014800

08002ca8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b087      	sub	sp, #28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	f023 0201 	bic.w	r2, r3, #1
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f023 030a 	bic.w	r3, r3, #10
 8002ce4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	621a      	str	r2, [r3, #32]
}
 8002cfa:	bf00      	nop
 8002cfc:	371c      	adds	r7, #28
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b087      	sub	sp, #28
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	f023 0210 	bic.w	r2, r3, #16
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	031b      	lsls	r3, r3, #12
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002d42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	621a      	str	r2, [r3, #32]
}
 8002d5a:	bf00      	nop
 8002d5c:	371c      	adds	r7, #28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b085      	sub	sp, #20
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	f043 0307 	orr.w	r3, r3, #7
 8002d88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	609a      	str	r2, [r3, #8]
}
 8002d90:	bf00      	nop
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b087      	sub	sp, #28
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
 8002da8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002db6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	021a      	lsls	r2, r3, #8
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	609a      	str	r2, [r3, #8]
}
 8002dd0:	bf00      	nop
 8002dd2:	371c      	adds	r7, #28
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e04f      	b.n	8002e94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a21      	ldr	r2, [pc, #132]	@ (8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d108      	bne.n	8002e30 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002e24:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a14      	ldr	r2, [pc, #80]	@ (8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d009      	beq.n	8002e68 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e5c:	d004      	beq.n	8002e68 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a10      	ldr	r2, [pc, #64]	@ (8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d10c      	bne.n	8002e82 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	40012c00 	.word	0x40012c00
 8002ea4:	40014000 	.word	0x40014000

08002ea8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e040      	b.n	8002f3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d106      	bne.n	8002ed0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7fd fc64 	bl	8000798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2224      	movs	r2, #36	@ 0x24
 8002ed4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0201 	bic.w	r2, r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 fb76 	bl	80035d8 <UART_SetConfig>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d101      	bne.n	8002ef6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e022      	b.n	8002f3c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fca0 	bl	8003844 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0201 	orr.w	r2, r2, #1
 8002f32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 fd27 	bl	8003988 <UART_CheckIdleState>
 8002f3a:	4603      	mov	r3, r0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b08a      	sub	sp, #40	@ 0x28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f58:	2b20      	cmp	r3, #32
 8002f5a:	d132      	bne.n	8002fc2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d002      	beq.n	8002f68 <HAL_UART_Receive_IT+0x24>
 8002f62:	88fb      	ldrh	r3, [r7, #6]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e02b      	b.n	8002fc4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d018      	beq.n	8002fb2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	e853 3f00 	ldrex	r3, [r3]
 8002f8c:	613b      	str	r3, [r7, #16]
   return(result);
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9e:	623b      	str	r3, [r7, #32]
 8002fa0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa2:	69f9      	ldr	r1, [r7, #28]
 8002fa4:	6a3a      	ldr	r2, [r7, #32]
 8002fa6:	e841 2300 	strex	r3, r2, [r1]
 8002faa:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1e6      	bne.n	8002f80 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002fb2:	88fb      	ldrh	r3, [r7, #6]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	68b9      	ldr	r1, [r7, #8]
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 fdf5 	bl	8003ba8 <UART_Start_Receive_IT>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	e000      	b.n	8002fc4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002fc2:	2302      	movs	r3, #2
  }
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3728      	adds	r7, #40	@ 0x28
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b0ba      	sub	sp, #232	@ 0xe8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002ff2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002ff6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003000:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003004:	2b00      	cmp	r3, #0
 8003006:	d115      	bne.n	8003034 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800300c:	f003 0320 	and.w	r3, r3, #32
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00f      	beq.n	8003034 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003018:	f003 0320 	and.w	r3, r3, #32
 800301c:	2b00      	cmp	r3, #0
 800301e:	d009      	beq.n	8003034 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 82ab 	beq.w	8003580 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	4798      	blx	r3
      }
      return;
 8003032:	e2a5      	b.n	8003580 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003034:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 8117 	beq.w	800326c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800303e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d106      	bne.n	8003058 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800304a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800304e:	4b85      	ldr	r3, [pc, #532]	@ (8003264 <HAL_UART_IRQHandler+0x298>)
 8003050:	4013      	ands	r3, r2
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 810a 	beq.w	800326c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b00      	cmp	r3, #0
 8003062:	d011      	beq.n	8003088 <HAL_UART_IRQHandler+0xbc>
 8003064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00b      	beq.n	8003088 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2201      	movs	r2, #1
 8003076:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800307e:	f043 0201 	orr.w	r2, r3, #1
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d011      	beq.n	80030b8 <HAL_UART_IRQHandler+0xec>
 8003094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00b      	beq.n	80030b8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2202      	movs	r2, #2
 80030a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030ae:	f043 0204 	orr.w	r2, r3, #4
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d011      	beq.n	80030e8 <HAL_UART_IRQHandler+0x11c>
 80030c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00b      	beq.n	80030e8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2204      	movs	r2, #4
 80030d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030de:	f043 0202 	orr.w	r2, r3, #2
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80030e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030ec:	f003 0308 	and.w	r3, r3, #8
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d017      	beq.n	8003124 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030f8:	f003 0320 	and.w	r3, r3, #32
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d105      	bne.n	800310c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003104:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00b      	beq.n	8003124 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2208      	movs	r2, #8
 8003112:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800311a:	f043 0208 	orr.w	r2, r3, #8
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003128:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800312c:	2b00      	cmp	r3, #0
 800312e:	d012      	beq.n	8003156 <HAL_UART_IRQHandler+0x18a>
 8003130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003134:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00c      	beq.n	8003156 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003144:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800314c:	f043 0220 	orr.w	r2, r3, #32
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 8211 	beq.w	8003584 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003166:	f003 0320 	and.w	r3, r3, #32
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00d      	beq.n	800318a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800316e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003172:	f003 0320 	and.w	r3, r3, #32
 8003176:	2b00      	cmp	r3, #0
 8003178:	d007      	beq.n	800318a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003190:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800319e:	2b40      	cmp	r3, #64	@ 0x40
 80031a0:	d005      	beq.n	80031ae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031a6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d04f      	beq.n	800324e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 fdc0 	bl	8003d34 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031be:	2b40      	cmp	r3, #64	@ 0x40
 80031c0:	d141      	bne.n	8003246 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	3308      	adds	r3, #8
 80031c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031d0:	e853 3f00 	ldrex	r3, [r3]
 80031d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80031d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	3308      	adds	r3, #8
 80031ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80031ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80031f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80031fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80031fe:	e841 2300 	strex	r3, r2, [r1]
 8003202:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003206:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1d9      	bne.n	80031c2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003212:	2b00      	cmp	r3, #0
 8003214:	d013      	beq.n	800323e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800321a:	4a13      	ldr	r2, [pc, #76]	@ (8003268 <HAL_UART_IRQHandler+0x29c>)
 800321c:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003222:	4618      	mov	r0, r3
 8003224:	f7fd fd7e 	bl	8000d24 <HAL_DMA_Abort_IT>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d017      	beq.n	800325e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003238:	4610      	mov	r0, r2
 800323a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800323c:	e00f      	b.n	800325e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f9b4 	bl	80035ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003244:	e00b      	b.n	800325e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f9b0 	bl	80035ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800324c:	e007      	b.n	800325e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f9ac 	bl	80035ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800325c:	e192      	b.n	8003584 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800325e:	bf00      	nop
    return;
 8003260:	e190      	b.n	8003584 <HAL_UART_IRQHandler+0x5b8>
 8003262:	bf00      	nop
 8003264:	04000120 	.word	0x04000120
 8003268:	08003dfd 	.word	0x08003dfd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003270:	2b01      	cmp	r3, #1
 8003272:	f040 814b 	bne.w	800350c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800327a:	f003 0310 	and.w	r3, r3, #16
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 8144 	beq.w	800350c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003288:	f003 0310 	and.w	r3, r3, #16
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 813d 	beq.w	800350c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2210      	movs	r2, #16
 8003298:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a4:	2b40      	cmp	r3, #64	@ 0x40
 80032a6:	f040 80b5 	bne.w	8003414 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032b6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 8164 	beq.w	8003588 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80032c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032ca:	429a      	cmp	r2, r3
 80032cc:	f080 815c 	bcs.w	8003588 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032d6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	2b20      	cmp	r3, #32
 80032e2:	f000 8086 	beq.w	80033f2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032f2:	e853 3f00 	ldrex	r3, [r3]
 80032f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80032fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003302:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	461a      	mov	r2, r3
 800330c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003310:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003314:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003318:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800331c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003320:	e841 2300 	strex	r3, r2, [r1]
 8003324:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003328:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1da      	bne.n	80032e6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	3308      	adds	r3, #8
 8003336:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003338:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800333a:	e853 3f00 	ldrex	r3, [r3]
 800333e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003340:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003342:	f023 0301 	bic.w	r3, r3, #1
 8003346:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	3308      	adds	r3, #8
 8003350:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003354:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003358:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800335c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003360:	e841 2300 	strex	r3, r2, [r1]
 8003364:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003366:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1e1      	bne.n	8003330 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	3308      	adds	r3, #8
 8003372:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003374:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003376:	e853 3f00 	ldrex	r3, [r3]
 800337a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800337c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800337e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003382:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	3308      	adds	r3, #8
 800338c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003390:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003392:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003394:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003396:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003398:	e841 2300 	strex	r3, r2, [r1]
 800339c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800339e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1e3      	bne.n	800336c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2220      	movs	r2, #32
 80033a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033ba:	e853 3f00 	ldrex	r3, [r3]
 80033be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80033c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033c2:	f023 0310 	bic.w	r3, r3, #16
 80033c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	461a      	mov	r2, r3
 80033d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80033d6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80033da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033dc:	e841 2300 	strex	r3, r2, [r1]
 80033e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80033e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1e4      	bne.n	80033b2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7fd fc60 	bl	8000cb2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2202      	movs	r2, #2
 80033f6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003404:	b29b      	uxth	r3, r3
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	b29b      	uxth	r3, r3
 800340a:	4619      	mov	r1, r3
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f8d7 	bl	80035c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003412:	e0b9      	b.n	8003588 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003420:	b29b      	uxth	r3, r3
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800342e:	b29b      	uxth	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 80ab 	beq.w	800358c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003436:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 80a6 	beq.w	800358c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003448:	e853 3f00 	ldrex	r3, [r3]
 800344c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800344e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003450:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003454:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003462:	647b      	str	r3, [r7, #68]	@ 0x44
 8003464:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003466:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003468:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800346a:	e841 2300 	strex	r3, r2, [r1]
 800346e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1e4      	bne.n	8003440 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	3308      	adds	r3, #8
 800347c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003480:	e853 3f00 	ldrex	r3, [r3]
 8003484:	623b      	str	r3, [r7, #32]
   return(result);
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	f023 0301 	bic.w	r3, r3, #1
 800348c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	3308      	adds	r3, #8
 8003496:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800349a:	633a      	str	r2, [r7, #48]	@ 0x30
 800349c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034a2:	e841 2300 	strex	r3, r2, [r1]
 80034a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1e3      	bne.n	8003476 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2220      	movs	r2, #32
 80034b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	e853 3f00 	ldrex	r3, [r3]
 80034ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f023 0310 	bic.w	r3, r3, #16
 80034d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034e4:	61fb      	str	r3, [r7, #28]
 80034e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e8:	69b9      	ldr	r1, [r7, #24]
 80034ea:	69fa      	ldr	r2, [r7, #28]
 80034ec:	e841 2300 	strex	r3, r2, [r1]
 80034f0:	617b      	str	r3, [r7, #20]
   return(result);
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1e4      	bne.n	80034c2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003502:	4619      	mov	r1, r3
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f85b 	bl	80035c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800350a:	e03f      	b.n	800358c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800350c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003510:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00e      	beq.n	8003536 <HAL_UART_IRQHandler+0x56a>
 8003518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800351c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d008      	beq.n	8003536 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800352c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 fe4c 	bl	80041cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003534:	e02d      	b.n	8003592 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800353a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00e      	beq.n	8003560 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800354a:	2b00      	cmp	r3, #0
 800354c:	d008      	beq.n	8003560 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003552:	2b00      	cmp	r3, #0
 8003554:	d01c      	beq.n	8003590 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	4798      	blx	r3
    }
    return;
 800355e:	e017      	b.n	8003590 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003568:	2b00      	cmp	r3, #0
 800356a:	d012      	beq.n	8003592 <HAL_UART_IRQHandler+0x5c6>
 800356c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00c      	beq.n	8003592 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 fc55 	bl	8003e28 <UART_EndTransmit_IT>
    return;
 800357e:	e008      	b.n	8003592 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003580:	bf00      	nop
 8003582:	e006      	b.n	8003592 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003584:	bf00      	nop
 8003586:	e004      	b.n	8003592 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003588:	bf00      	nop
 800358a:	e002      	b.n	8003592 <HAL_UART_IRQHandler+0x5c6>
      return;
 800358c:	bf00      	nop
 800358e:	e000      	b.n	8003592 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003590:	bf00      	nop
  }

}
 8003592:	37e8      	adds	r7, #232	@ 0xe8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b088      	sub	sp, #32
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	431a      	orrs	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	69db      	ldr	r3, [r3, #28]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	4b8a      	ldr	r3, [pc, #552]	@ (800382c <UART_SetConfig+0x254>)
 8003604:	4013      	ands	r3, r2
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6812      	ldr	r2, [r2, #0]
 800360a:	6979      	ldr	r1, [r7, #20]
 800360c:	430b      	orrs	r3, r1
 800360e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	4313      	orrs	r3, r2
 8003634:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	430a      	orrs	r2, r1
 8003648:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a78      	ldr	r2, [pc, #480]	@ (8003830 <UART_SetConfig+0x258>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d120      	bne.n	8003696 <UART_SetConfig+0xbe>
 8003654:	4b77      	ldr	r3, [pc, #476]	@ (8003834 <UART_SetConfig+0x25c>)
 8003656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003658:	f003 0303 	and.w	r3, r3, #3
 800365c:	2b03      	cmp	r3, #3
 800365e:	d817      	bhi.n	8003690 <UART_SetConfig+0xb8>
 8003660:	a201      	add	r2, pc, #4	@ (adr r2, 8003668 <UART_SetConfig+0x90>)
 8003662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003666:	bf00      	nop
 8003668:	08003679 	.word	0x08003679
 800366c:	08003685 	.word	0x08003685
 8003670:	0800368b 	.word	0x0800368b
 8003674:	0800367f 	.word	0x0800367f
 8003678:	2300      	movs	r3, #0
 800367a:	77fb      	strb	r3, [r7, #31]
 800367c:	e01d      	b.n	80036ba <UART_SetConfig+0xe2>
 800367e:	2302      	movs	r3, #2
 8003680:	77fb      	strb	r3, [r7, #31]
 8003682:	e01a      	b.n	80036ba <UART_SetConfig+0xe2>
 8003684:	2304      	movs	r3, #4
 8003686:	77fb      	strb	r3, [r7, #31]
 8003688:	e017      	b.n	80036ba <UART_SetConfig+0xe2>
 800368a:	2308      	movs	r3, #8
 800368c:	77fb      	strb	r3, [r7, #31]
 800368e:	e014      	b.n	80036ba <UART_SetConfig+0xe2>
 8003690:	2310      	movs	r3, #16
 8003692:	77fb      	strb	r3, [r7, #31]
 8003694:	e011      	b.n	80036ba <UART_SetConfig+0xe2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a67      	ldr	r2, [pc, #412]	@ (8003838 <UART_SetConfig+0x260>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d102      	bne.n	80036a6 <UART_SetConfig+0xce>
 80036a0:	2300      	movs	r3, #0
 80036a2:	77fb      	strb	r3, [r7, #31]
 80036a4:	e009      	b.n	80036ba <UART_SetConfig+0xe2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a64      	ldr	r2, [pc, #400]	@ (800383c <UART_SetConfig+0x264>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d102      	bne.n	80036b6 <UART_SetConfig+0xde>
 80036b0:	2300      	movs	r3, #0
 80036b2:	77fb      	strb	r3, [r7, #31]
 80036b4:	e001      	b.n	80036ba <UART_SetConfig+0xe2>
 80036b6:	2310      	movs	r3, #16
 80036b8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036c2:	d15a      	bne.n	800377a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80036c4:	7ffb      	ldrb	r3, [r7, #31]
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	d827      	bhi.n	800371a <UART_SetConfig+0x142>
 80036ca:	a201      	add	r2, pc, #4	@ (adr r2, 80036d0 <UART_SetConfig+0xf8>)
 80036cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d0:	080036f5 	.word	0x080036f5
 80036d4:	080036fd 	.word	0x080036fd
 80036d8:	08003705 	.word	0x08003705
 80036dc:	0800371b 	.word	0x0800371b
 80036e0:	0800370b 	.word	0x0800370b
 80036e4:	0800371b 	.word	0x0800371b
 80036e8:	0800371b 	.word	0x0800371b
 80036ec:	0800371b 	.word	0x0800371b
 80036f0:	08003713 	.word	0x08003713
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036f4:	f7fe ff26 	bl	8002544 <HAL_RCC_GetPCLK1Freq>
 80036f8:	61b8      	str	r0, [r7, #24]
        break;
 80036fa:	e013      	b.n	8003724 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036fc:	f7fe ff44 	bl	8002588 <HAL_RCC_GetPCLK2Freq>
 8003700:	61b8      	str	r0, [r7, #24]
        break;
 8003702:	e00f      	b.n	8003724 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003704:	4b4e      	ldr	r3, [pc, #312]	@ (8003840 <UART_SetConfig+0x268>)
 8003706:	61bb      	str	r3, [r7, #24]
        break;
 8003708:	e00c      	b.n	8003724 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800370a:	f7fe fea5 	bl	8002458 <HAL_RCC_GetSysClockFreq>
 800370e:	61b8      	str	r0, [r7, #24]
        break;
 8003710:	e008      	b.n	8003724 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003712:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003716:	61bb      	str	r3, [r7, #24]
        break;
 8003718:	e004      	b.n	8003724 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	77bb      	strb	r3, [r7, #30]
        break;
 8003722:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d074      	beq.n	8003814 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	005a      	lsls	r2, r3, #1
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	085b      	lsrs	r3, r3, #1
 8003734:	441a      	add	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	fbb2 f3f3 	udiv	r3, r2, r3
 800373e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	2b0f      	cmp	r3, #15
 8003744:	d916      	bls.n	8003774 <UART_SetConfig+0x19c>
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800374c:	d212      	bcs.n	8003774 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	b29b      	uxth	r3, r3
 8003752:	f023 030f 	bic.w	r3, r3, #15
 8003756:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	085b      	lsrs	r3, r3, #1
 800375c:	b29b      	uxth	r3, r3
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	b29a      	uxth	r2, r3
 8003764:	89fb      	ldrh	r3, [r7, #14]
 8003766:	4313      	orrs	r3, r2
 8003768:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	89fa      	ldrh	r2, [r7, #14]
 8003770:	60da      	str	r2, [r3, #12]
 8003772:	e04f      	b.n	8003814 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	77bb      	strb	r3, [r7, #30]
 8003778:	e04c      	b.n	8003814 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800377a:	7ffb      	ldrb	r3, [r7, #31]
 800377c:	2b08      	cmp	r3, #8
 800377e:	d828      	bhi.n	80037d2 <UART_SetConfig+0x1fa>
 8003780:	a201      	add	r2, pc, #4	@ (adr r2, 8003788 <UART_SetConfig+0x1b0>)
 8003782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003786:	bf00      	nop
 8003788:	080037ad 	.word	0x080037ad
 800378c:	080037b5 	.word	0x080037b5
 8003790:	080037bd 	.word	0x080037bd
 8003794:	080037d3 	.word	0x080037d3
 8003798:	080037c3 	.word	0x080037c3
 800379c:	080037d3 	.word	0x080037d3
 80037a0:	080037d3 	.word	0x080037d3
 80037a4:	080037d3 	.word	0x080037d3
 80037a8:	080037cb 	.word	0x080037cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037ac:	f7fe feca 	bl	8002544 <HAL_RCC_GetPCLK1Freq>
 80037b0:	61b8      	str	r0, [r7, #24]
        break;
 80037b2:	e013      	b.n	80037dc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037b4:	f7fe fee8 	bl	8002588 <HAL_RCC_GetPCLK2Freq>
 80037b8:	61b8      	str	r0, [r7, #24]
        break;
 80037ba:	e00f      	b.n	80037dc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037bc:	4b20      	ldr	r3, [pc, #128]	@ (8003840 <UART_SetConfig+0x268>)
 80037be:	61bb      	str	r3, [r7, #24]
        break;
 80037c0:	e00c      	b.n	80037dc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037c2:	f7fe fe49 	bl	8002458 <HAL_RCC_GetSysClockFreq>
 80037c6:	61b8      	str	r0, [r7, #24]
        break;
 80037c8:	e008      	b.n	80037dc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037ce:	61bb      	str	r3, [r7, #24]
        break;
 80037d0:	e004      	b.n	80037dc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	77bb      	strb	r3, [r7, #30]
        break;
 80037da:	bf00      	nop
    }

    if (pclk != 0U)
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d018      	beq.n	8003814 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	085a      	lsrs	r2, r3, #1
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	441a      	add	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	2b0f      	cmp	r3, #15
 80037fa:	d909      	bls.n	8003810 <UART_SetConfig+0x238>
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003802:	d205      	bcs.n	8003810 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	b29a      	uxth	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	60da      	str	r2, [r3, #12]
 800380e:	e001      	b.n	8003814 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003820:	7fbb      	ldrb	r3, [r7, #30]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3720      	adds	r7, #32
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	efff69f3 	.word	0xefff69f3
 8003830:	40013800 	.word	0x40013800
 8003834:	40021000 	.word	0x40021000
 8003838:	40004400 	.word	0x40004400
 800383c:	40004800 	.word	0x40004800
 8003840:	007a1200 	.word	0x007a1200

08003844 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00a      	beq.n	800386e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00a      	beq.n	8003890 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d8:	f003 0310 	and.w	r3, r3, #16
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00a      	beq.n	80038f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fa:	f003 0320 	and.w	r3, r3, #32
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00a      	beq.n	8003918 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003920:	2b00      	cmp	r3, #0
 8003922:	d01a      	beq.n	800395a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003942:	d10a      	bne.n	800395a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	605a      	str	r2, [r3, #4]
  }
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b098      	sub	sp, #96	@ 0x60
 800398c:	af02      	add	r7, sp, #8
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003998:	f7fd f84a 	bl	8000a30 <HAL_GetTick>
 800399c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0308 	and.w	r3, r3, #8
 80039a8:	2b08      	cmp	r3, #8
 80039aa:	d12e      	bne.n	8003a0a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039b4:	2200      	movs	r2, #0
 80039b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f88c 	bl	8003ad8 <UART_WaitOnFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d021      	beq.n	8003a0a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ce:	e853 3f00 	ldrex	r3, [r3]
 80039d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80039d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039da:	653b      	str	r3, [r7, #80]	@ 0x50
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	461a      	mov	r2, r3
 80039e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80039e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039ec:	e841 2300 	strex	r3, r2, [r1]
 80039f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80039f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1e6      	bne.n	80039c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2220      	movs	r2, #32
 80039fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e062      	b.n	8003ad0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d149      	bne.n	8003aac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a20:	2200      	movs	r2, #0
 8003a22:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f856 	bl	8003ad8 <UART_WaitOnFlagUntilTimeout>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d03c      	beq.n	8003aac <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3a:	e853 3f00 	ldrex	r3, [r3]
 8003a3e:	623b      	str	r3, [r7, #32]
   return(result);
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a50:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a52:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a58:	e841 2300 	strex	r3, r2, [r1]
 8003a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1e6      	bne.n	8003a32 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3308      	adds	r3, #8
 8003a6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	e853 3f00 	ldrex	r3, [r3]
 8003a72:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f023 0301 	bic.w	r3, r3, #1
 8003a7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3308      	adds	r3, #8
 8003a82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a84:	61fa      	str	r2, [r7, #28]
 8003a86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a88:	69b9      	ldr	r1, [r7, #24]
 8003a8a:	69fa      	ldr	r2, [r7, #28]
 8003a8c:	e841 2300 	strex	r3, r2, [r1]
 8003a90:	617b      	str	r3, [r7, #20]
   return(result);
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1e5      	bne.n	8003a64 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e011      	b.n	8003ad0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3758      	adds	r7, #88	@ 0x58
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	603b      	str	r3, [r7, #0]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ae8:	e049      	b.n	8003b7e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af0:	d045      	beq.n	8003b7e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af2:	f7fc ff9d 	bl	8000a30 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d302      	bcc.n	8003b08 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e048      	b.n	8003b9e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0304 	and.w	r3, r3, #4
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d031      	beq.n	8003b7e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d110      	bne.n	8003b4a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2208      	movs	r2, #8
 8003b2e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 f8ff 	bl	8003d34 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2208      	movs	r2, #8
 8003b3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e029      	b.n	8003b9e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b58:	d111      	bne.n	8003b7e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 f8e5 	bl	8003d34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e00f      	b.n	8003b9e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	69da      	ldr	r2, [r3, #28]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	4013      	ands	r3, r2
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	bf0c      	ite	eq
 8003b8e:	2301      	moveq	r3, #1
 8003b90:	2300      	movne	r3, #0
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	461a      	mov	r2, r3
 8003b96:	79fb      	ldrb	r3, [r7, #7]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d0a6      	beq.n	8003aea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
	...

08003ba8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b097      	sub	sp, #92	@ 0x5c
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	88fa      	ldrh	r2, [r7, #6]
 8003bc0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	88fa      	ldrh	r2, [r7, #6]
 8003bc8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bda:	d10e      	bne.n	8003bfa <UART_Start_Receive_IT+0x52>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d105      	bne.n	8003bf0 <UART_Start_Receive_IT+0x48>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003bea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003bee:	e02d      	b.n	8003c4c <UART_Start_Receive_IT+0xa4>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	22ff      	movs	r2, #255	@ 0xff
 8003bf4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003bf8:	e028      	b.n	8003c4c <UART_Start_Receive_IT+0xa4>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10d      	bne.n	8003c1e <UART_Start_Receive_IT+0x76>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d104      	bne.n	8003c14 <UART_Start_Receive_IT+0x6c>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	22ff      	movs	r2, #255	@ 0xff
 8003c0e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003c12:	e01b      	b.n	8003c4c <UART_Start_Receive_IT+0xa4>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	227f      	movs	r2, #127	@ 0x7f
 8003c18:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003c1c:	e016      	b.n	8003c4c <UART_Start_Receive_IT+0xa4>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c26:	d10d      	bne.n	8003c44 <UART_Start_Receive_IT+0x9c>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d104      	bne.n	8003c3a <UART_Start_Receive_IT+0x92>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	227f      	movs	r2, #127	@ 0x7f
 8003c34:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003c38:	e008      	b.n	8003c4c <UART_Start_Receive_IT+0xa4>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	223f      	movs	r2, #63	@ 0x3f
 8003c3e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003c42:	e003      	b.n	8003c4c <UART_Start_Receive_IT+0xa4>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2222      	movs	r2, #34	@ 0x22
 8003c58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3308      	adds	r3, #8
 8003c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c66:	e853 3f00 	ldrex	r3, [r3]
 8003c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c6e:	f043 0301 	orr.w	r3, r3, #1
 8003c72:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3308      	adds	r3, #8
 8003c7a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003c7c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003c7e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c80:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003c82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c84:	e841 2300 	strex	r3, r2, [r1]
 8003c88:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003c8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1e5      	bne.n	8003c5c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c98:	d107      	bne.n	8003caa <UART_Start_Receive_IT+0x102>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d103      	bne.n	8003caa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4a21      	ldr	r2, [pc, #132]	@ (8003d2c <UART_Start_Receive_IT+0x184>)
 8003ca6:	669a      	str	r2, [r3, #104]	@ 0x68
 8003ca8:	e002      	b.n	8003cb0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	4a20      	ldr	r2, [pc, #128]	@ (8003d30 <UART_Start_Receive_IT+0x188>)
 8003cae:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d019      	beq.n	8003cec <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc0:	e853 3f00 	ldrex	r3, [r3]
 8003cc4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003ccc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cd8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cda:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003cdc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003cde:	e841 2300 	strex	r3, r2, [r1]
 8003ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1e6      	bne.n	8003cb8 <UART_Start_Receive_IT+0x110>
 8003cea:	e018      	b.n	8003d1e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	e853 3f00 	ldrex	r3, [r3]
 8003cf8:	613b      	str	r3, [r7, #16]
   return(result);
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f043 0320 	orr.w	r3, r3, #32
 8003d00:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	461a      	mov	r2, r3
 8003d08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d0a:	623b      	str	r3, [r7, #32]
 8003d0c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0e:	69f9      	ldr	r1, [r7, #28]
 8003d10:	6a3a      	ldr	r2, [r7, #32]
 8003d12:	e841 2300 	strex	r3, r2, [r1]
 8003d16:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1e6      	bne.n	8003cec <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	375c      	adds	r7, #92	@ 0x5c
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	08004025 	.word	0x08004025
 8003d30:	08003e7d 	.word	0x08003e7d

08003d34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b095      	sub	sp, #84	@ 0x54
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d44:	e853 3f00 	ldrex	r3, [r3]
 8003d48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d62:	e841 2300 	strex	r3, r2, [r1]
 8003d66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1e6      	bne.n	8003d3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3308      	adds	r3, #8
 8003d74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	e853 3f00 	ldrex	r3, [r3]
 8003d7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	f023 0301 	bic.w	r3, r3, #1
 8003d84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3308      	adds	r3, #8
 8003d8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d96:	e841 2300 	strex	r3, r2, [r1]
 8003d9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1e5      	bne.n	8003d6e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d118      	bne.n	8003ddc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	e853 3f00 	ldrex	r3, [r3]
 8003db6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f023 0310 	bic.w	r3, r3, #16
 8003dbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dc8:	61bb      	str	r3, [r7, #24]
 8003dca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dcc:	6979      	ldr	r1, [r7, #20]
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	e841 2300 	strex	r3, r2, [r1]
 8003dd4:	613b      	str	r3, [r7, #16]
   return(result);
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1e6      	bne.n	8003daa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003df0:	bf00      	nop
 8003df2:	3754      	adds	r7, #84	@ 0x54
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f7ff fbc6 	bl	80035ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e20:	bf00      	nop
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b088      	sub	sp, #32
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	e853 3f00 	ldrex	r3, [r3]
 8003e3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e44:	61fb      	str	r3, [r7, #28]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	61bb      	str	r3, [r7, #24]
 8003e50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e52:	6979      	ldr	r1, [r7, #20]
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	e841 2300 	strex	r3, r2, [r1]
 8003e5a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1e6      	bne.n	8003e30 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2220      	movs	r2, #32
 8003e66:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7ff fb92 	bl	8003598 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e74:	bf00      	nop
 8003e76:	3720      	adds	r7, #32
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b09c      	sub	sp, #112	@ 0x70
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003e8a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e94:	2b22      	cmp	r3, #34	@ 0x22
 8003e96:	f040 80b9 	bne.w	800400c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003ea0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003ea4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003ea8:	b2d9      	uxtb	r1, r3
 8003eaa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003eae:	b2da      	uxtb	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb4:	400a      	ands	r2, r1
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f040 809c 	bne.w	800401c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003eec:	e853 3f00 	ldrex	r3, [r3]
 8003ef0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ef2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ef4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ef8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f02:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f04:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f06:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f0a:	e841 2300 	strex	r3, r2, [r1]
 8003f0e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1e6      	bne.n	8003ee4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3308      	adds	r3, #8
 8003f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f20:	e853 3f00 	ldrex	r3, [r3]
 8003f24:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f28:	f023 0301 	bic.w	r3, r3, #1
 8003f2c:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3308      	adds	r3, #8
 8003f34:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003f36:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f38:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f3e:	e841 2300 	strex	r3, r2, [r1]
 8003f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1e5      	bne.n	8003f16 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d018      	beq.n	8003f9e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f74:	e853 3f00 	ldrex	r3, [r3]
 8003f78:	623b      	str	r3, [r7, #32]
   return(result);
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f80:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	461a      	mov	r2, r3
 8003f88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f92:	e841 2300 	strex	r3, r2, [r1]
 8003f96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1e6      	bne.n	8003f6c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d12e      	bne.n	8004004 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	e853 3f00 	ldrex	r3, [r3]
 8003fb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f023 0310 	bic.w	r3, r3, #16
 8003fc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fca:	61fb      	str	r3, [r7, #28]
 8003fcc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fce:	69b9      	ldr	r1, [r7, #24]
 8003fd0:	69fa      	ldr	r2, [r7, #28]
 8003fd2:	e841 2300 	strex	r3, r2, [r1]
 8003fd6:	617b      	str	r3, [r7, #20]
   return(result);
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1e6      	bne.n	8003fac <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	f003 0310 	and.w	r3, r3, #16
 8003fe8:	2b10      	cmp	r3, #16
 8003fea:	d103      	bne.n	8003ff4 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2210      	movs	r2, #16
 8003ff2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f7ff fadf 	bl	80035c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004002:	e00b      	b.n	800401c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7fc fb4d 	bl	80006a4 <HAL_UART_RxCpltCallback>
}
 800400a:	e007      	b.n	800401c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	699a      	ldr	r2, [r3, #24]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0208 	orr.w	r2, r2, #8
 800401a:	619a      	str	r2, [r3, #24]
}
 800401c:	bf00      	nop
 800401e:	3770      	adds	r7, #112	@ 0x70
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b09c      	sub	sp, #112	@ 0x70
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004032:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800403c:	2b22      	cmp	r3, #34	@ 0x22
 800403e:	f040 80b9 	bne.w	80041b4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004048:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004050:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004052:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004056:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800405a:	4013      	ands	r3, r2
 800405c:	b29a      	uxth	r2, r3
 800405e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004060:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004066:	1c9a      	adds	r2, r3, #2
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004072:	b29b      	uxth	r3, r3
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	f040 809c 	bne.w	80041c4 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004092:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004094:	e853 3f00 	ldrex	r3, [r3]
 8004098:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800409a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800409c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80040ac:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80040b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80040b2:	e841 2300 	strex	r3, r2, [r1]
 80040b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80040b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1e6      	bne.n	800408c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	3308      	adds	r3, #8
 80040c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c8:	e853 3f00 	ldrex	r3, [r3]
 80040cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d0:	f023 0301 	bic.w	r3, r3, #1
 80040d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3308      	adds	r3, #8
 80040dc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80040de:	643a      	str	r2, [r7, #64]	@ 0x40
 80040e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040e6:	e841 2300 	strex	r3, r2, [r1]
 80040ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1e5      	bne.n	80040be <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d018      	beq.n	8004146 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	e853 3f00 	ldrex	r3, [r3]
 8004120:	61fb      	str	r3, [r7, #28]
   return(result);
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004128:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	461a      	mov	r2, r3
 8004130:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004132:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004134:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004136:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004138:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800413a:	e841 2300 	strex	r3, r2, [r1]
 800413e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1e6      	bne.n	8004114 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800414a:	2b01      	cmp	r3, #1
 800414c:	d12e      	bne.n	80041ac <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	e853 3f00 	ldrex	r3, [r3]
 8004160:	60bb      	str	r3, [r7, #8]
   return(result);
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	f023 0310 	bic.w	r3, r3, #16
 8004168:	65bb      	str	r3, [r7, #88]	@ 0x58
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	461a      	mov	r2, r3
 8004170:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004172:	61bb      	str	r3, [r7, #24]
 8004174:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004176:	6979      	ldr	r1, [r7, #20]
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	e841 2300 	strex	r3, r2, [r1]
 800417e:	613b      	str	r3, [r7, #16]
   return(result);
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1e6      	bne.n	8004154 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	2b10      	cmp	r3, #16
 8004192:	d103      	bne.n	800419c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2210      	movs	r2, #16
 800419a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80041a2:	4619      	mov	r1, r3
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff fa0b 	bl	80035c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80041aa:	e00b      	b.n	80041c4 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7fc fa79 	bl	80006a4 <HAL_UART_RxCpltCallback>
}
 80041b2:	e007      	b.n	80041c4 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699a      	ldr	r2, [r3, #24]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0208 	orr.w	r2, r2, #8
 80041c2:	619a      	str	r2, [r3, #24]
}
 80041c4:	bf00      	nop
 80041c6:	3770      	adds	r7, #112	@ 0x70
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <memset>:
 80041e0:	4402      	add	r2, r0
 80041e2:	4603      	mov	r3, r0
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d100      	bne.n	80041ea <memset+0xa>
 80041e8:	4770      	bx	lr
 80041ea:	f803 1b01 	strb.w	r1, [r3], #1
 80041ee:	e7f9      	b.n	80041e4 <memset+0x4>

080041f0 <__libc_init_array>:
 80041f0:	b570      	push	{r4, r5, r6, lr}
 80041f2:	4d0d      	ldr	r5, [pc, #52]	@ (8004228 <__libc_init_array+0x38>)
 80041f4:	4c0d      	ldr	r4, [pc, #52]	@ (800422c <__libc_init_array+0x3c>)
 80041f6:	1b64      	subs	r4, r4, r5
 80041f8:	10a4      	asrs	r4, r4, #2
 80041fa:	2600      	movs	r6, #0
 80041fc:	42a6      	cmp	r6, r4
 80041fe:	d109      	bne.n	8004214 <__libc_init_array+0x24>
 8004200:	4d0b      	ldr	r5, [pc, #44]	@ (8004230 <__libc_init_array+0x40>)
 8004202:	4c0c      	ldr	r4, [pc, #48]	@ (8004234 <__libc_init_array+0x44>)
 8004204:	f000 f818 	bl	8004238 <_init>
 8004208:	1b64      	subs	r4, r4, r5
 800420a:	10a4      	asrs	r4, r4, #2
 800420c:	2600      	movs	r6, #0
 800420e:	42a6      	cmp	r6, r4
 8004210:	d105      	bne.n	800421e <__libc_init_array+0x2e>
 8004212:	bd70      	pop	{r4, r5, r6, pc}
 8004214:	f855 3b04 	ldr.w	r3, [r5], #4
 8004218:	4798      	blx	r3
 800421a:	3601      	adds	r6, #1
 800421c:	e7ee      	b.n	80041fc <__libc_init_array+0xc>
 800421e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004222:	4798      	blx	r3
 8004224:	3601      	adds	r6, #1
 8004226:	e7f2      	b.n	800420e <__libc_init_array+0x1e>
 8004228:	08004288 	.word	0x08004288
 800422c:	08004288 	.word	0x08004288
 8004230:	08004288 	.word	0x08004288
 8004234:	0800428c 	.word	0x0800428c

08004238 <_init>:
 8004238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423a:	bf00      	nop
 800423c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800423e:	bc08      	pop	{r3}
 8004240:	469e      	mov	lr, r3
 8004242:	4770      	bx	lr

08004244 <_fini>:
 8004244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004246:	bf00      	nop
 8004248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800424a:	bc08      	pop	{r3}
 800424c:	469e      	mov	lr, r3
 800424e:	4770      	bx	lr
