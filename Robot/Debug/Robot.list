
Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005170  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080052f8  080052f8  000062f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005330  08005330  00007010  2**0
                  CONTENTS
  4 .ARM          00000000  08005330  08005330  00007010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005330  08005330  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005330  08005330  00006330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005334  08005334  00006334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005338  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  20000010  08005348  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08005348  0000722c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f189  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c4  00000000  00000000  000161c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  00018290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a64  00000000  00000000  00018fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bc53  00000000  00000000  00019a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010adc  00000000  00000000  0003567f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5fd4  00000000  00000000  0004615b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ec12f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000377c  00000000  00000000  000ec174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000ef8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080052e0 	.word	0x080052e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080052e0 	.word	0x080052e0

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 feb8 	bl	8000f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f898 	bl	8000304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 faec 	bl	80007b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 faba 	bl	8000750 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80001dc:	f000 fa88 	bl	80006f0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80001e0:	f000 f8f0 	bl	80003c4 <MX_TIM1_Init>
  MX_TIM16_Init();
 80001e4:	f000 fa0a 	bl	80005fc <MX_TIM16_Init>
  MX_TIM2_Init();
 80001e8:	f000 f9a4 	bl	8000534 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,&receivedChar,1); // uruchomienie obs≈Çugi uart dla bluetooth hc-06
 80001ec:	2201      	movs	r2, #1
 80001ee:	493c      	ldr	r1, [pc, #240]	@ (80002e0 <main+0x118>)
 80001f0:	483c      	ldr	r0, [pc, #240]	@ (80002e4 <main+0x11c>)
 80001f2:	f003 fefb 	bl	8003fec <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start(&htim1);
 80001f6:	483c      	ldr	r0, [pc, #240]	@ (80002e8 <main+0x120>)
 80001f8:	f002 fe90 	bl	8002f1c <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 80001fc:	2200      	movs	r2, #0
 80001fe:	2102      	movs	r1, #2
 8000200:	483a      	ldr	r0, [pc, #232]	@ (80002ec <main+0x124>)
 8000202:	f001 fa15 	bl	8001630 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000206:	2100      	movs	r1, #0
 8000208:	4839      	ldr	r0, [pc, #228]	@ (80002f0 <main+0x128>)
 800020a:	f002 ff2b 	bl	8003064 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800020e:	2100      	movs	r1, #0
 8000210:	4835      	ldr	r0, [pc, #212]	@ (80002e8 <main+0x120>)
 8000212:	f002 ff27 	bl	8003064 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000216:	210c      	movs	r1, #12
 8000218:	4833      	ldr	r0, [pc, #204]	@ (80002e8 <main+0x120>)
 800021a:	f002 ff23 	bl	8003064 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800021e:	2100      	movs	r1, #0
 8000220:	4834      	ldr	r0, [pc, #208]	@ (80002f4 <main+0x12c>)
 8000222:	f002 ff1f 	bl	8003064 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000226:	2108      	movs	r1, #8
 8000228:	4832      	ldr	r0, [pc, #200]	@ (80002f4 <main+0x12c>)
 800022a:	f002 ff1b 	bl	8003064 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_UART_Receive(&huart2, &receivedChar,1 ,HAL_MAX_DELAY);
	  detect_states[0] = HAL_GPIO_ReadPin(DETECT1_GPIO_Port, DETECT1_Pin);
 800022e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000232:	482e      	ldr	r0, [pc, #184]	@ (80002ec <main+0x124>)
 8000234:	f001 f9e4 	bl	8001600 <HAL_GPIO_ReadPin>
 8000238:	4603      	mov	r3, r0
 800023a:	461a      	mov	r2, r3
 800023c:	4b2e      	ldr	r3, [pc, #184]	@ (80002f8 <main+0x130>)
 800023e:	701a      	strb	r2, [r3, #0]
	      detect_states[1] = HAL_GPIO_ReadPin(DETECT2_GPIO_Port, DETECT2_Pin);
 8000240:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000244:	4829      	ldr	r0, [pc, #164]	@ (80002ec <main+0x124>)
 8000246:	f001 f9db 	bl	8001600 <HAL_GPIO_ReadPin>
 800024a:	4603      	mov	r3, r0
 800024c:	461a      	mov	r2, r3
 800024e:	4b2a      	ldr	r3, [pc, #168]	@ (80002f8 <main+0x130>)
 8000250:	705a      	strb	r2, [r3, #1]
	      detect_states[2] = HAL_GPIO_ReadPin(DETECT3_GPIO_Port, DETECT3_Pin);
 8000252:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000256:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800025a:	f001 f9d1 	bl	8001600 <HAL_GPIO_ReadPin>
 800025e:	4603      	mov	r3, r0
 8000260:	461a      	mov	r2, r3
 8000262:	4b25      	ldr	r3, [pc, #148]	@ (80002f8 <main+0x130>)
 8000264:	709a      	strb	r2, [r3, #2]
	      detect_states[3] = HAL_GPIO_ReadPin(DETECT4_GPIO_Port, DETECT4_Pin);
 8000266:	2180      	movs	r1, #128	@ 0x80
 8000268:	4824      	ldr	r0, [pc, #144]	@ (80002fc <main+0x134>)
 800026a:	f001 f9c9 	bl	8001600 <HAL_GPIO_ReadPin>
 800026e:	4603      	mov	r3, r0
 8000270:	461a      	mov	r2, r3
 8000272:	4b21      	ldr	r3, [pc, #132]	@ (80002f8 <main+0x130>)
 8000274:	70da      	strb	r2, [r3, #3]
	      detect_states[4] = HAL_GPIO_ReadPin(DETECT5_GPIO_Port, DETECT5_Pin);
 8000276:	2104      	movs	r1, #4
 8000278:	481c      	ldr	r0, [pc, #112]	@ (80002ec <main+0x124>)
 800027a:	f001 f9c1 	bl	8001600 <HAL_GPIO_ReadPin>
 800027e:	4603      	mov	r3, r0
 8000280:	461a      	mov	r2, r3
 8000282:	4b1d      	ldr	r3, [pc, #116]	@ (80002f8 <main+0x130>)
 8000284:	711a      	strb	r2, [r3, #4]
		  	  	  	  	  	      else if(receivedChar == 'q'){
		  	  	  	  	  	    	  motor_stop();
		  	  	  	  	  	      }
	  }*/

	  if(detect_states[2]==0)
 8000286:	4b1c      	ldr	r3, [pc, #112]	@ (80002f8 <main+0x130>)
 8000288:	789b      	ldrb	r3, [r3, #2]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d105      	bne.n	800029a <main+0xd2>
	  		  	  {

	  		  		motor_forward(cycle);
 800028e:	4b1c      	ldr	r3, [pc, #112]	@ (8000300 <main+0x138>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4618      	mov	r0, r3
 8000294:	f000 fb74 	bl	8000980 <motor_forward>
 8000298:	e7c9      	b.n	800022e <main+0x66>
	  		  	  }
	  		  	  else{
	  		  		  if(detect_states[1]==0 || detect_states[0]==0){
 800029a:	4b17      	ldr	r3, [pc, #92]	@ (80002f8 <main+0x130>)
 800029c:	785b      	ldrb	r3, [r3, #1]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d003      	beq.n	80002aa <main+0xe2>
 80002a2:	4b15      	ldr	r3, [pc, #84]	@ (80002f8 <main+0x130>)
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d105      	bne.n	80002b6 <main+0xee>
	  		  			motor_right(cycle);
 80002aa:	4b15      	ldr	r3, [pc, #84]	@ (8000300 <main+0x138>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4618      	mov	r0, r3
 80002b0:	f000 fbb8 	bl	8000a24 <motor_right>
	  		  		  if(detect_states[1]==0 || detect_states[0]==0){
 80002b4:	e012      	b.n	80002dc <main+0x114>
	  		  		  }
	  		  		  else if(detect_states[3]==0 || detect_states[4]==0){
 80002b6:	4b10      	ldr	r3, [pc, #64]	@ (80002f8 <main+0x130>)
 80002b8:	78db      	ldrb	r3, [r3, #3]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d003      	beq.n	80002c6 <main+0xfe>
 80002be:	4b0e      	ldr	r3, [pc, #56]	@ (80002f8 <main+0x130>)
 80002c0:	791b      	ldrb	r3, [r3, #4]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d105      	bne.n	80002d2 <main+0x10a>
	  		  			motor_left(cycle);
 80002c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000300 <main+0x138>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 fb80 	bl	80009d0 <motor_left>
	  		  		  else if(detect_states[3]==0 || detect_states[4]==0){
 80002d0:	e004      	b.n	80002dc <main+0x114>
	  		  		  		  }
	  		  		  else{
	  		  			motor_backward(cycle);
 80002d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000300 <main+0x138>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 fbce 	bl	8000a78 <motor_backward>
	  detect_states[0] = HAL_GPIO_ReadPin(DETECT1_GPIO_Port, DETECT1_Pin);
 80002dc:	e7a7      	b.n	800022e <main+0x66>
 80002de:	bf00      	nop
 80002e0:	20000225 	.word	0x20000225
 80002e4:	20000110 	.word	0x20000110
 80002e8:	2000002c 	.word	0x2000002c
 80002ec:	48000800 	.word	0x48000800
 80002f0:	200000c4 	.word	0x200000c4
 80002f4:	20000078 	.word	0x20000078
 80002f8:	20000220 	.word	0x20000220
 80002fc:	48000400 	.word	0x48000400
 8000300:	20000000 	.word	0x20000000

08000304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b09c      	sub	sp, #112	@ 0x70
 8000308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800030e:	2228      	movs	r2, #40	@ 0x28
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f004 ffb8 	bl	8005288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000318:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	605a      	str	r2, [r3, #4]
 8000322:	609a      	str	r2, [r3, #8]
 8000324:	60da      	str	r2, [r3, #12]
 8000326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000328:	463b      	mov	r3, r7
 800032a:	2234      	movs	r2, #52	@ 0x34
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f004 ffaa 	bl	8005288 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000334:	2301      	movs	r3, #1
 8000336:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000338:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800033c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000342:	2301      	movs	r3, #1
 8000344:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000346:	2302      	movs	r3, #2
 8000348:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800034a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800034e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000350:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000354:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000356:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800035a:	4618      	mov	r0, r3
 800035c:	f001 f980 	bl	8001660 <HAL_RCC_OscConfig>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000366:	f000 fbaf 	bl	8000ac8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036a:	230f      	movs	r3, #15
 800036c:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800036e:	2302      	movs	r3, #2
 8000370:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000372:	2300      	movs	r3, #0
 8000374:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000376:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800037a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037c:	2300      	movs	r3, #0
 800037e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000380:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000384:	2102      	movs	r1, #2
 8000386:	4618      	mov	r0, r3
 8000388:	f002 f9a8 	bl	80026dc <HAL_RCC_ClockConfig>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000392:	f000 fb99 	bl	8000ac8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 8000396:	4b0a      	ldr	r3, [pc, #40]	@ (80003c0 <SystemClock_Config+0xbc>)
 8000398:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM16;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800039a:	2300      	movs	r3, #0
 800039c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800039e:	2300      	movs	r3, #0
 80003a0:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80003a2:	2300      	movs	r3, #0
 80003a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003a6:	463b      	mov	r3, r7
 80003a8:	4618      	mov	r0, r3
 80003aa:	f002 fbcd 	bl	8002b48 <HAL_RCCEx_PeriphCLKConfig>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80003b4:	f000 fb88 	bl	8000ac8 <Error_Handler>
  }
}
 80003b8:	bf00      	nop
 80003ba:	3770      	adds	r7, #112	@ 0x70
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	00081001 	.word	0x00081001

080003c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b09a      	sub	sp, #104	@ 0x68
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ca:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	605a      	str	r2, [r3, #4]
 80003e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003e4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
 80003ec:	605a      	str	r2, [r3, #4]
 80003ee:	609a      	str	r2, [r3, #8]
 80003f0:	60da      	str	r2, [r3, #12]
 80003f2:	611a      	str	r2, [r3, #16]
 80003f4:	615a      	str	r2, [r3, #20]
 80003f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	222c      	movs	r2, #44	@ 0x2c
 80003fc:	2100      	movs	r1, #0
 80003fe:	4618      	mov	r0, r3
 8000400:	f004 ff42 	bl	8005288 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000404:	4b49      	ldr	r3, [pc, #292]	@ (800052c <MX_TIM1_Init+0x168>)
 8000406:	4a4a      	ldr	r2, [pc, #296]	@ (8000530 <MX_TIM1_Init+0x16c>)
 8000408:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800040a:	4b48      	ldr	r3, [pc, #288]	@ (800052c <MX_TIM1_Init+0x168>)
 800040c:	2247      	movs	r2, #71	@ 0x47
 800040e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000410:	4b46      	ldr	r3, [pc, #280]	@ (800052c <MX_TIM1_Init+0x168>)
 8000412:	2200      	movs	r2, #0
 8000414:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000416:	4b45      	ldr	r3, [pc, #276]	@ (800052c <MX_TIM1_Init+0x168>)
 8000418:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800041c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800041e:	4b43      	ldr	r3, [pc, #268]	@ (800052c <MX_TIM1_Init+0x168>)
 8000420:	2200      	movs	r2, #0
 8000422:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000424:	4b41      	ldr	r3, [pc, #260]	@ (800052c <MX_TIM1_Init+0x168>)
 8000426:	2200      	movs	r2, #0
 8000428:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800042a:	4b40      	ldr	r3, [pc, #256]	@ (800052c <MX_TIM1_Init+0x168>)
 800042c:	2200      	movs	r2, #0
 800042e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000430:	483e      	ldr	r0, [pc, #248]	@ (800052c <MX_TIM1_Init+0x168>)
 8000432:	f002 fd1b 	bl	8002e6c <HAL_TIM_Base_Init>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800043c:	f000 fb44 	bl	8000ac8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000440:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000444:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000446:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800044a:	4619      	mov	r1, r3
 800044c:	4837      	ldr	r0, [pc, #220]	@ (800052c <MX_TIM1_Init+0x168>)
 800044e:	f003 f803 	bl	8003458 <HAL_TIM_ConfigClockSource>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000458:	f000 fb36 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800045c:	4833      	ldr	r0, [pc, #204]	@ (800052c <MX_TIM1_Init+0x168>)
 800045e:	f002 fda9 	bl	8002fb4 <HAL_TIM_PWM_Init>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000468:	f000 fb2e 	bl	8000ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800046c:	2300      	movs	r3, #0
 800046e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000470:	2300      	movs	r3, #0
 8000472:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000474:	2300      	movs	r3, #0
 8000476:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000478:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800047c:	4619      	mov	r1, r3
 800047e:	482b      	ldr	r0, [pc, #172]	@ (800052c <MX_TIM1_Init+0x168>)
 8000480:	f003 fc88 	bl	8003d94 <HAL_TIMEx_MasterConfigSynchronization>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800048a:	f000 fb1d 	bl	8000ac8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800048e:	2360      	movs	r3, #96	@ 0x60
 8000490:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000492:	2300      	movs	r3, #0
 8000494:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000496:	2300      	movs	r3, #0
 8000498:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800049a:	2300      	movs	r3, #0
 800049c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800049e:	2300      	movs	r3, #0
 80004a0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004a2:	2300      	movs	r3, #0
 80004a4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004a6:	2300      	movs	r3, #0
 80004a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004aa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80004ae:	2200      	movs	r2, #0
 80004b0:	4619      	mov	r1, r3
 80004b2:	481e      	ldr	r0, [pc, #120]	@ (800052c <MX_TIM1_Init+0x168>)
 80004b4:	f002 febc 	bl	8003230 <HAL_TIM_PWM_ConfigChannel>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80004be:	f000 fb03 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80004c6:	220c      	movs	r2, #12
 80004c8:	4619      	mov	r1, r3
 80004ca:	4818      	ldr	r0, [pc, #96]	@ (800052c <MX_TIM1_Init+0x168>)
 80004cc:	f002 feb0 	bl	8003230 <HAL_TIM_PWM_ConfigChannel>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80004d6:	f000 faf7 	bl	8000ac8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004da:	2300      	movs	r3, #0
 80004dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004de:	2300      	movs	r3, #0
 80004e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004e2:	2300      	movs	r3, #0
 80004e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004ea:	2300      	movs	r3, #0
 80004ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80004f8:	2300      	movs	r3, #0
 80004fa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80004fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000500:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000502:	2300      	movs	r3, #0
 8000504:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000506:	2300      	movs	r3, #0
 8000508:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	4619      	mov	r1, r3
 800050e:	4807      	ldr	r0, [pc, #28]	@ (800052c <MX_TIM1_Init+0x168>)
 8000510:	f003 fca6 	bl	8003e60 <HAL_TIMEx_ConfigBreakDeadTime>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800051a:	f000 fad5 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800051e:	4803      	ldr	r0, [pc, #12]	@ (800052c <MX_TIM1_Init+0x168>)
 8000520:	f000 fb4e 	bl	8000bc0 <HAL_TIM_MspPostInit>

}
 8000524:	bf00      	nop
 8000526:	3768      	adds	r7, #104	@ 0x68
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	2000002c 	.word	0x2000002c
 8000530:	40012c00 	.word	0x40012c00

08000534 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b08a      	sub	sp, #40	@ 0x28
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800053a:	f107 031c 	add.w	r3, r7, #28
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000546:	463b      	mov	r3, r7
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]
 8000554:	615a      	str	r2, [r3, #20]
 8000556:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000558:	4b27      	ldr	r3, [pc, #156]	@ (80005f8 <MX_TIM2_Init+0xc4>)
 800055a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800055e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000560:	4b25      	ldr	r3, [pc, #148]	@ (80005f8 <MX_TIM2_Init+0xc4>)
 8000562:	2247      	movs	r2, #71	@ 0x47
 8000564:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000566:	4b24      	ldr	r3, [pc, #144]	@ (80005f8 <MX_TIM2_Init+0xc4>)
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800056c:	4b22      	ldr	r3, [pc, #136]	@ (80005f8 <MX_TIM2_Init+0xc4>)
 800056e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000572:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000574:	4b20      	ldr	r3, [pc, #128]	@ (80005f8 <MX_TIM2_Init+0xc4>)
 8000576:	2200      	movs	r2, #0
 8000578:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800057a:	4b1f      	ldr	r3, [pc, #124]	@ (80005f8 <MX_TIM2_Init+0xc4>)
 800057c:	2200      	movs	r2, #0
 800057e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000580:	481d      	ldr	r0, [pc, #116]	@ (80005f8 <MX_TIM2_Init+0xc4>)
 8000582:	f002 fd17 	bl	8002fb4 <HAL_TIM_PWM_Init>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800058c:	f000 fa9c 	bl	8000ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000590:	2300      	movs	r3, #0
 8000592:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000594:	2300      	movs	r3, #0
 8000596:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000598:	f107 031c 	add.w	r3, r7, #28
 800059c:	4619      	mov	r1, r3
 800059e:	4816      	ldr	r0, [pc, #88]	@ (80005f8 <MX_TIM2_Init+0xc4>)
 80005a0:	f003 fbf8 	bl	8003d94 <HAL_TIMEx_MasterConfigSynchronization>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80005aa:	f000 fa8d 	bl	8000ac8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005ae:	2360      	movs	r3, #96	@ 0x60
 80005b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005be:	463b      	mov	r3, r7
 80005c0:	2200      	movs	r2, #0
 80005c2:	4619      	mov	r1, r3
 80005c4:	480c      	ldr	r0, [pc, #48]	@ (80005f8 <MX_TIM2_Init+0xc4>)
 80005c6:	f002 fe33 	bl	8003230 <HAL_TIM_PWM_ConfigChannel>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80005d0:	f000 fa7a 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005d4:	463b      	mov	r3, r7
 80005d6:	2208      	movs	r2, #8
 80005d8:	4619      	mov	r1, r3
 80005da:	4807      	ldr	r0, [pc, #28]	@ (80005f8 <MX_TIM2_Init+0xc4>)
 80005dc:	f002 fe28 	bl	8003230 <HAL_TIM_PWM_ConfigChannel>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80005e6:	f000 fa6f 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80005ea:	4803      	ldr	r0, [pc, #12]	@ (80005f8 <MX_TIM2_Init+0xc4>)
 80005ec:	f000 fae8 	bl	8000bc0 <HAL_TIM_MspPostInit>

}
 80005f0:	bf00      	nop
 80005f2:	3728      	adds	r7, #40	@ 0x28
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000078 	.word	0x20000078

080005fc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b092      	sub	sp, #72	@ 0x48
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000602:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]
 8000612:	615a      	str	r2, [r3, #20]
 8000614:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000616:	463b      	mov	r3, r7
 8000618:	222c      	movs	r2, #44	@ 0x2c
 800061a:	2100      	movs	r1, #0
 800061c:	4618      	mov	r0, r3
 800061e:	f004 fe33 	bl	8005288 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000622:	4b31      	ldr	r3, [pc, #196]	@ (80006e8 <MX_TIM16_Init+0xec>)
 8000624:	4a31      	ldr	r2, [pc, #196]	@ (80006ec <MX_TIM16_Init+0xf0>)
 8000626:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 71;
 8000628:	4b2f      	ldr	r3, [pc, #188]	@ (80006e8 <MX_TIM16_Init+0xec>)
 800062a:	2247      	movs	r2, #71	@ 0x47
 800062c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800062e:	4b2e      	ldr	r3, [pc, #184]	@ (80006e8 <MX_TIM16_Init+0xec>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 19999;
 8000634:	4b2c      	ldr	r3, [pc, #176]	@ (80006e8 <MX_TIM16_Init+0xec>)
 8000636:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800063a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800063c:	4b2a      	ldr	r3, [pc, #168]	@ (80006e8 <MX_TIM16_Init+0xec>)
 800063e:	2200      	movs	r2, #0
 8000640:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000642:	4b29      	ldr	r3, [pc, #164]	@ (80006e8 <MX_TIM16_Init+0xec>)
 8000644:	2200      	movs	r2, #0
 8000646:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000648:	4b27      	ldr	r3, [pc, #156]	@ (80006e8 <MX_TIM16_Init+0xec>)
 800064a:	2280      	movs	r2, #128	@ 0x80
 800064c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800064e:	4826      	ldr	r0, [pc, #152]	@ (80006e8 <MX_TIM16_Init+0xec>)
 8000650:	f002 fc0c 	bl	8002e6c <HAL_TIM_Base_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800065a:	f000 fa35 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800065e:	4822      	ldr	r0, [pc, #136]	@ (80006e8 <MX_TIM16_Init+0xec>)
 8000660:	f002 fca8 	bl	8002fb4 <HAL_TIM_PWM_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800066a:	f000 fa2d 	bl	8000ac8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800066e:	2360      	movs	r3, #96	@ 0x60
 8000670:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000676:	2300      	movs	r3, #0
 8000678:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800067a:	2300      	movs	r3, #0
 800067c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800067e:	2300      	movs	r3, #0
 8000680:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000682:	2300      	movs	r3, #0
 8000684:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000686:	2300      	movs	r3, #0
 8000688:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800068a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800068e:	2200      	movs	r2, #0
 8000690:	4619      	mov	r1, r3
 8000692:	4815      	ldr	r0, [pc, #84]	@ (80006e8 <MX_TIM16_Init+0xec>)
 8000694:	f002 fdcc 	bl	8003230 <HAL_TIM_PWM_ConfigChannel>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800069e:	f000 fa13 	bl	8000ac8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006a2:	2300      	movs	r3, #0
 80006a4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006a6:	2300      	movs	r3, #0
 80006a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006c0:	2300      	movs	r3, #0
 80006c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80006c4:	463b      	mov	r3, r7
 80006c6:	4619      	mov	r1, r3
 80006c8:	4807      	ldr	r0, [pc, #28]	@ (80006e8 <MX_TIM16_Init+0xec>)
 80006ca:	f003 fbc9 	bl	8003e60 <HAL_TIMEx_ConfigBreakDeadTime>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80006d4:	f000 f9f8 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80006d8:	4803      	ldr	r0, [pc, #12]	@ (80006e8 <MX_TIM16_Init+0xec>)
 80006da:	f000 fa71 	bl	8000bc0 <HAL_TIM_MspPostInit>

}
 80006de:	bf00      	nop
 80006e0:	3748      	adds	r7, #72	@ 0x48
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200000c4 	.word	0x200000c4
 80006ec:	40014400 	.word	0x40014400

080006f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006f4:	4b14      	ldr	r3, [pc, #80]	@ (8000748 <MX_USART1_UART_Init+0x58>)
 80006f6:	4a15      	ldr	r2, [pc, #84]	@ (800074c <MX_USART1_UART_Init+0x5c>)
 80006f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006fa:	4b13      	ldr	r3, [pc, #76]	@ (8000748 <MX_USART1_UART_Init+0x58>)
 80006fc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000700:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <MX_USART1_UART_Init+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <MX_USART1_UART_Init+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800070e:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <MX_USART1_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <MX_USART1_UART_Init+0x58>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	@ (8000748 <MX_USART1_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <MX_USART1_UART_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000726:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <MX_USART1_UART_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800072c:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <MX_USART1_UART_Init+0x58>)
 800072e:	2200      	movs	r2, #0
 8000730:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	@ (8000748 <MX_USART1_UART_Init+0x58>)
 8000734:	f003 fc0c 	bl	8003f50 <HAL_UART_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800073e:	f000 f9c3 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000110 	.word	0x20000110
 800074c:	40013800 	.word	0x40013800

08000750 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000754:	4b14      	ldr	r3, [pc, #80]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 8000756:	4a15      	ldr	r2, [pc, #84]	@ (80007ac <MX_USART2_UART_Init+0x5c>)
 8000758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800075a:	4b13      	ldr	r3, [pc, #76]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 800075c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b09      	ldr	r3, [pc, #36]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000786:	4b08      	ldr	r3, [pc, #32]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078c:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 8000794:	f003 fbdc 	bl	8003f50 <HAL_UART_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800079e:	f000 f993 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000198 	.word	0x20000198
 80007ac:	40004400 	.word	0x40004400

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	@ 0x28
 80007b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	4b53      	ldr	r3, [pc, #332]	@ (8000914 <MX_GPIO_Init+0x164>)
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	4a52      	ldr	r2, [pc, #328]	@ (8000914 <MX_GPIO_Init+0x164>)
 80007cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80007d0:	6153      	str	r3, [r2, #20]
 80007d2:	4b50      	ldr	r3, [pc, #320]	@ (8000914 <MX_GPIO_Init+0x164>)
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007de:	4b4d      	ldr	r3, [pc, #308]	@ (8000914 <MX_GPIO_Init+0x164>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	4a4c      	ldr	r2, [pc, #304]	@ (8000914 <MX_GPIO_Init+0x164>)
 80007e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007e8:	6153      	str	r3, [r2, #20]
 80007ea:	4b4a      	ldr	r3, [pc, #296]	@ (8000914 <MX_GPIO_Init+0x164>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b47      	ldr	r3, [pc, #284]	@ (8000914 <MX_GPIO_Init+0x164>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	4a46      	ldr	r2, [pc, #280]	@ (8000914 <MX_GPIO_Init+0x164>)
 80007fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000800:	6153      	str	r3, [r2, #20]
 8000802:	4b44      	ldr	r3, [pc, #272]	@ (8000914 <MX_GPIO_Init+0x164>)
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	4b41      	ldr	r3, [pc, #260]	@ (8000914 <MX_GPIO_Init+0x164>)
 8000810:	695b      	ldr	r3, [r3, #20]
 8000812:	4a40      	ldr	r2, [pc, #256]	@ (8000914 <MX_GPIO_Init+0x164>)
 8000814:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000818:	6153      	str	r3, [r2, #20]
 800081a:	4b3e      	ldr	r3, [pc, #248]	@ (8000914 <MX_GPIO_Init+0x164>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2102      	movs	r1, #2
 800082a:	483b      	ldr	r0, [pc, #236]	@ (8000918 <MX_GPIO_Init+0x168>)
 800082c:	f000 ff00 	bl	8001630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	2101      	movs	r1, #1
 8000834:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000838:	f000 fefa 	bl	8001630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000842:	4836      	ldr	r0, [pc, #216]	@ (800091c <MX_GPIO_Init+0x16c>)
 8000844:	f000 fef4 	bl	8001630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000848:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800084c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800084e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	482e      	ldr	r0, [pc, #184]	@ (8000918 <MX_GPIO_Init+0x168>)
 8000860:	f000 fd5c 	bl	800131c <HAL_GPIO_Init>

  /*Configure GPIO pins : ECHO_Pin DETECT5_Pin DETECT1_Pin DETECT2_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin|DETECT5_Pin|DETECT1_Pin|DETECT2_Pin;
 8000864:	f241 4305 	movw	r3, #5125	@ 0x1405
 8000868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	4619      	mov	r1, r3
 8000878:	4827      	ldr	r0, [pc, #156]	@ (8000918 <MX_GPIO_Init+0x168>)
 800087a:	f000 fd4f 	bl	800131c <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIGGER_Pin */
  GPIO_InitStruct.Pin = TRIGGER_Pin;
 800087e:	2302      	movs	r3, #2
 8000880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIGGER_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4619      	mov	r1, r3
 8000894:	4820      	ldr	r0, [pc, #128]	@ (8000918 <MX_GPIO_Init+0x168>)
 8000896:	f000 fd41 	bl	800131c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800089a:	2301      	movs	r3, #1
 800089c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b4:	f000 fd32 	bl	800131c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	4812      	ldr	r0, [pc, #72]	@ (800091c <MX_GPIO_Init+0x16c>)
 80008d2:	f000 fd23 	bl	800131c <HAL_GPIO_Init>

  /*Configure GPIO pin : DETECT3_Pin */
  GPIO_InitStruct.Pin = DETECT3_Pin;
 80008d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008dc:	2300      	movs	r3, #0
 80008de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DETECT3_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ee:	f000 fd15 	bl	800131c <HAL_GPIO_Init>

  /*Configure GPIO pin : DETECT4_Pin */
  GPIO_InitStruct.Pin = DETECT4_Pin;
 80008f2:	2380      	movs	r3, #128	@ 0x80
 80008f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DETECT4_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	4805      	ldr	r0, [pc, #20]	@ (800091c <MX_GPIO_Init+0x16c>)
 8000906:	f000 fd09 	bl	800131c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800090a:	bf00      	nop
 800090c:	3728      	adds	r7, #40	@ 0x28
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000
 8000918:	48000800 	.word	0x48000800
 800091c:	48000400 	.word	0x48000400

08000920 <HAL_UART_RxCpltCallback>:
	}
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // funkcja do obs≈Çugi bt po uart na podstawie przerwania
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a10      	ldr	r2, [pc, #64]	@ (8000970 <HAL_UART_RxCpltCallback+0x50>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d119      	bne.n	8000966 <HAL_UART_RxCpltCallback+0x46>
  {
    if(receivedChar=='N')
 8000932:	4b10      	ldr	r3, [pc, #64]	@ (8000974 <HAL_UART_RxCpltCallback+0x54>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b4e      	cmp	r3, #78	@ 0x4e
 8000938:	d106      	bne.n	8000948 <HAL_UART_RxCpltCallback+0x28>
    {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000940:	480d      	ldr	r0, [pc, #52]	@ (8000978 <HAL_UART_RxCpltCallback+0x58>)
 8000942:	f000 fe75 	bl	8001630 <HAL_GPIO_WritePin>
 8000946:	e009      	b.n	800095c <HAL_UART_RxCpltCallback+0x3c>
    }
    else if (receivedChar=='Y')
 8000948:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <HAL_UART_RxCpltCallback+0x54>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b59      	cmp	r3, #89	@ 0x59
 800094e:	d105      	bne.n	800095c <HAL_UART_RxCpltCallback+0x3c>
    {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000950:	2201      	movs	r2, #1
 8000952:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000956:	4808      	ldr	r0, [pc, #32]	@ (8000978 <HAL_UART_RxCpltCallback+0x58>)
 8000958:	f000 fe6a 	bl	8001630 <HAL_GPIO_WritePin>
    }
    HAL_UART_Receive_IT(&huart1,&receivedChar,1);
 800095c:	2201      	movs	r2, #1
 800095e:	4905      	ldr	r1, [pc, #20]	@ (8000974 <HAL_UART_RxCpltCallback+0x54>)
 8000960:	4806      	ldr	r0, [pc, #24]	@ (800097c <HAL_UART_RxCpltCallback+0x5c>)
 8000962:	f003 fb43 	bl	8003fec <HAL_UART_Receive_IT>
    		  	  	    	  motor_stop();
    		  	  	      }
    }
    HAL_UART_Receive_IT(&huart2,&receivedChar,1);
*/
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40013800 	.word	0x40013800
 8000974:	20000225 	.word	0x20000225
 8000978:	48000400 	.word	0x48000400
 800097c:	20000110 	.word	0x20000110

08000980 <motor_forward>:
    (detect_states[0] != 0 && detect_states[1] != 0) ? turnover(&axle, 'a') :
    (detect_states[2] != 0 && detect_states[3] != 0 && detect_states[4] != 0) ? turnover(&axle, 'd') : 0;
}

void motor_forward(uint32_t duty_cycle)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle);
 8000988:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <motor_forward+0x44>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8000990:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <motor_forward+0x44>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2200      	movs	r2, #0
 8000996:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle*3/4);
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	4613      	mov	r3, r2
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	441a      	add	r2, r3
 80009a0:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <motor_forward+0x48>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	0892      	lsrs	r2, r2, #2
 80009a6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80009a8:	4b07      	ldr	r3, [pc, #28]	@ (80009c8 <motor_forward+0x48>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2200      	movs	r2, #0
 80009ae:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 80009b0:	2201      	movs	r2, #1
 80009b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009b6:	4805      	ldr	r0, [pc, #20]	@ (80009cc <motor_forward+0x4c>)
 80009b8:	f000 fe3a 	bl	8001630 <HAL_GPIO_WritePin>
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	2000002c 	.word	0x2000002c
 80009c8:	20000078 	.word	0x20000078
 80009cc:	48000400 	.word	0x48000400

080009d0 <motor_left>:
void motor_left(uint32_t duty_cycle)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80009d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a14 <motor_left+0x44>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2200      	movs	r2, #0
 80009de:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, duty_cycle/5);
 80009e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a14 <motor_left+0x44>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	490c      	ldr	r1, [pc, #48]	@ (8000a18 <motor_left+0x48>)
 80009e8:	fba1 1202 	umull	r1, r2, r1, r2
 80009ec:	0892      	lsrs	r2, r2, #2
 80009ee:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle);
 80009f0:	4b0a      	ldr	r3, [pc, #40]	@ (8000a1c <motor_left+0x4c>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80009f8:	4b08      	ldr	r3, [pc, #32]	@ (8000a1c <motor_left+0x4c>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2200      	movs	r2, #0
 80009fe:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000a00:	2201      	movs	r2, #1
 8000a02:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a06:	4806      	ldr	r0, [pc, #24]	@ (8000a20 <motor_left+0x50>)
 8000a08:	f000 fe12 	bl	8001630 <HAL_GPIO_WritePin>
}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	2000002c 	.word	0x2000002c
 8000a18:	cccccccd 	.word	0xcccccccd
 8000a1c:	20000078 	.word	0x20000078
 8000a20:	48000400 	.word	0x48000400

08000a24 <motor_right>:
void motor_right(uint32_t duty_cycle)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle);
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <motor_right+0x44>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8000a34:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <motor_right+0x44>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a6c <motor_right+0x48>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2200      	movs	r2, #0
 8000a42:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle/5);
 8000a44:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <motor_right+0x48>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	4909      	ldr	r1, [pc, #36]	@ (8000a70 <motor_right+0x4c>)
 8000a4c:	fba1 1202 	umull	r1, r2, r1, r2
 8000a50:	0892      	lsrs	r2, r2, #2
 8000a52:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000a54:	2201      	movs	r2, #1
 8000a56:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a5a:	4806      	ldr	r0, [pc, #24]	@ (8000a74 <motor_right+0x50>)
 8000a5c:	f000 fde8 	bl	8001630 <HAL_GPIO_WritePin>
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	2000002c 	.word	0x2000002c
 8000a6c:	20000078 	.word	0x20000078
 8000a70:	cccccccd 	.word	0xcccccccd
 8000a74:	48000400 	.word	0x48000400

08000a78 <motor_backward>:

// Function to move motors backward
void motor_backward(uint32_t duty_cycle)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000a80:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <motor_backward+0x44>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2200      	movs	r2, #0
 8000a86:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, duty_cycle);
 8000a88:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <motor_backward+0x44>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000a90:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac0 <motor_backward+0x48>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2200      	movs	r2, #0
 8000a96:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle*3/4);
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	441a      	add	r2, r3
 8000aa0:	4b07      	ldr	r3, [pc, #28]	@ (8000ac0 <motor_backward+0x48>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	0892      	lsrs	r2, r2, #2
 8000aa6:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aae:	4805      	ldr	r0, [pc, #20]	@ (8000ac4 <motor_backward+0x4c>)
 8000ab0:	f000 fdbe 	bl	8001630 <HAL_GPIO_WritePin>
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	2000002c 	.word	0x2000002c
 8000ac0:	20000078 	.word	0x20000078
 8000ac4:	48000400 	.word	0x48000400

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000acc:	b672      	cpsid	i
}
 8000ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <Error_Handler+0x8>

08000ad4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ada:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <HAL_MspInit+0x44>)
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	4a0e      	ldr	r2, [pc, #56]	@ (8000b18 <HAL_MspInit+0x44>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6193      	str	r3, [r2, #24]
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b18 <HAL_MspInit+0x44>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af2:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <HAL_MspInit+0x44>)
 8000af4:	69db      	ldr	r3, [r3, #28]
 8000af6:	4a08      	ldr	r2, [pc, #32]	@ (8000b18 <HAL_MspInit+0x44>)
 8000af8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000afc:	61d3      	str	r3, [r2, #28]
 8000afe:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <HAL_MspInit+0x44>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b0a:	2007      	movs	r0, #7
 8000b0c:	f000 fb4e 	bl	80011ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40021000 	.word	0x40021000

08000b1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a13      	ldr	r2, [pc, #76]	@ (8000b78 <HAL_TIM_Base_MspInit+0x5c>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d10c      	bne.n	8000b48 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b2e:	4b13      	ldr	r3, [pc, #76]	@ (8000b7c <HAL_TIM_Base_MspInit+0x60>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	4a12      	ldr	r2, [pc, #72]	@ (8000b7c <HAL_TIM_Base_MspInit+0x60>)
 8000b34:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b38:	6193      	str	r3, [r2, #24]
 8000b3a:	4b10      	ldr	r3, [pc, #64]	@ (8000b7c <HAL_TIM_Base_MspInit+0x60>)
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000b46:	e010      	b.n	8000b6a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a0c      	ldr	r2, [pc, #48]	@ (8000b80 <HAL_TIM_Base_MspInit+0x64>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d10b      	bne.n	8000b6a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000b52:	4b0a      	ldr	r3, [pc, #40]	@ (8000b7c <HAL_TIM_Base_MspInit+0x60>)
 8000b54:	699b      	ldr	r3, [r3, #24]
 8000b56:	4a09      	ldr	r2, [pc, #36]	@ (8000b7c <HAL_TIM_Base_MspInit+0x60>)
 8000b58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b5c:	6193      	str	r3, [r2, #24]
 8000b5e:	4b07      	ldr	r3, [pc, #28]	@ (8000b7c <HAL_TIM_Base_MspInit+0x60>)
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	68bb      	ldr	r3, [r7, #8]
}
 8000b6a:	bf00      	nop
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40012c00 	.word	0x40012c00
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	40014400 	.word	0x40014400

08000b84 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b94:	d10b      	bne.n	8000bae <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b96:	4b09      	ldr	r3, [pc, #36]	@ (8000bbc <HAL_TIM_PWM_MspInit+0x38>)
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	4a08      	ldr	r2, [pc, #32]	@ (8000bbc <HAL_TIM_PWM_MspInit+0x38>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	61d3      	str	r3, [r2, #28]
 8000ba2:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <HAL_TIM_PWM_MspInit+0x38>)
 8000ba4:	69db      	ldr	r3, [r3, #28]
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bae:	bf00      	nop
 8000bb0:	3714      	adds	r7, #20
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08c      	sub	sp, #48	@ 0x30
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 031c 	add.w	r3, r7, #28
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a51      	ldr	r2, [pc, #324]	@ (8000d24 <HAL_TIM_MspPostInit+0x164>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d13a      	bne.n	8000c58 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be2:	4b51      	ldr	r3, [pc, #324]	@ (8000d28 <HAL_TIM_MspPostInit+0x168>)
 8000be4:	695b      	ldr	r3, [r3, #20]
 8000be6:	4a50      	ldr	r2, [pc, #320]	@ (8000d28 <HAL_TIM_MspPostInit+0x168>)
 8000be8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000bec:	6153      	str	r3, [r2, #20]
 8000bee:	4b4e      	ldr	r3, [pc, #312]	@ (8000d28 <HAL_TIM_MspPostInit+0x168>)
 8000bf0:	695b      	ldr	r3, [r3, #20]
 8000bf2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000bf6:	61bb      	str	r3, [r7, #24]
 8000bf8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	4b4b      	ldr	r3, [pc, #300]	@ (8000d28 <HAL_TIM_MspPostInit+0x168>)
 8000bfc:	695b      	ldr	r3, [r3, #20]
 8000bfe:	4a4a      	ldr	r2, [pc, #296]	@ (8000d28 <HAL_TIM_MspPostInit+0x168>)
 8000c00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c04:	6153      	str	r3, [r2, #20]
 8000c06:	4b48      	ldr	r3, [pc, #288]	@ (8000d28 <HAL_TIM_MspPostInit+0x168>)
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c0e:	617b      	str	r3, [r7, #20]
 8000c10:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = L2_Pin;
 8000c12:	2308      	movs	r3, #8
 8000c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000c22:	2302      	movs	r3, #2
 8000c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(L2_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	483f      	ldr	r0, [pc, #252]	@ (8000d2c <HAL_TIM_MspPostInit+0x16c>)
 8000c2e:	f000 fb75 	bl	800131c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = L1_Pin;
 8000c32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000c44:	2306      	movs	r3, #6
 8000c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(L1_GPIO_Port, &GPIO_InitStruct);
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c52:	f000 fb63 	bl	800131c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000c56:	e061      	b.n	8000d1c <HAL_TIM_MspPostInit+0x15c>
  else if(htim->Instance==TIM2)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c60:	d13a      	bne.n	8000cd8 <HAL_TIM_MspPostInit+0x118>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	4b31      	ldr	r3, [pc, #196]	@ (8000d28 <HAL_TIM_MspPostInit+0x168>)
 8000c64:	695b      	ldr	r3, [r3, #20]
 8000c66:	4a30      	ldr	r2, [pc, #192]	@ (8000d28 <HAL_TIM_MspPostInit+0x168>)
 8000c68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c6c:	6153      	str	r3, [r2, #20]
 8000c6e:	4b2e      	ldr	r3, [pc, #184]	@ (8000d28 <HAL_TIM_MspPostInit+0x168>)
 8000c70:	695b      	ldr	r3, [r3, #20]
 8000c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7a:	4b2b      	ldr	r3, [pc, #172]	@ (8000d28 <HAL_TIM_MspPostInit+0x168>)
 8000c7c:	695b      	ldr	r3, [r3, #20]
 8000c7e:	4a2a      	ldr	r2, [pc, #168]	@ (8000d28 <HAL_TIM_MspPostInit+0x168>)
 8000c80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c84:	6153      	str	r3, [r2, #20]
 8000c86:	4b28      	ldr	r3, [pc, #160]	@ (8000d28 <HAL_TIM_MspPostInit+0x168>)
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = P1_Pin;
 8000c92:	2320      	movs	r3, #32
 8000c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c96:	2302      	movs	r3, #2
 8000c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(P1_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	4619      	mov	r1, r3
 8000cac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cb0:	f000 fb34 	bl	800131c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = P2_Pin;
 8000cb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(P2_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4817      	ldr	r0, [pc, #92]	@ (8000d30 <HAL_TIM_MspPostInit+0x170>)
 8000cd2:	f000 fb23 	bl	800131c <HAL_GPIO_Init>
}
 8000cd6:	e021      	b.n	8000d1c <HAL_TIM_MspPostInit+0x15c>
  else if(htim->Instance==TIM16)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a15      	ldr	r2, [pc, #84]	@ (8000d34 <HAL_TIM_MspPostInit+0x174>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d11c      	bne.n	8000d1c <HAL_TIM_MspPostInit+0x15c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <HAL_TIM_MspPostInit+0x168>)
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	4a10      	ldr	r2, [pc, #64]	@ (8000d28 <HAL_TIM_MspPostInit+0x168>)
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cec:	6153      	str	r3, [r2, #20]
 8000cee:	4b0e      	ldr	r3, [pc, #56]	@ (8000d28 <HAL_TIM_MspPostInit+0x168>)
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cfa:	2340      	movs	r3, #64	@ 0x40
 8000cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 031c 	add.w	r3, r7, #28
 8000d12:	4619      	mov	r1, r3
 8000d14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d18:	f000 fb00 	bl	800131c <HAL_GPIO_Init>
}
 8000d1c:	bf00      	nop
 8000d1e:	3730      	adds	r7, #48	@ 0x30
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40012c00 	.word	0x40012c00
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	48000800 	.word	0x48000800
 8000d30:	48000400 	.word	0x48000400
 8000d34:	40014400 	.word	0x40014400

08000d38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08c      	sub	sp, #48	@ 0x30
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a37      	ldr	r2, [pc, #220]	@ (8000e34 <HAL_UART_MspInit+0xfc>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d132      	bne.n	8000dc0 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d5a:	4b37      	ldr	r3, [pc, #220]	@ (8000e38 <HAL_UART_MspInit+0x100>)
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	4a36      	ldr	r2, [pc, #216]	@ (8000e38 <HAL_UART_MspInit+0x100>)
 8000d60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d64:	6193      	str	r3, [r2, #24]
 8000d66:	4b34      	ldr	r3, [pc, #208]	@ (8000e38 <HAL_UART_MspInit+0x100>)
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d6e:	61bb      	str	r3, [r7, #24]
 8000d70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	4b31      	ldr	r3, [pc, #196]	@ (8000e38 <HAL_UART_MspInit+0x100>)
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	4a30      	ldr	r2, [pc, #192]	@ (8000e38 <HAL_UART_MspInit+0x100>)
 8000d78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d7c:	6153      	str	r3, [r2, #20]
 8000d7e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e38 <HAL_UART_MspInit+0x100>)
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d8a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	2302      	movs	r3, #2
 8000d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d9c:	2307      	movs	r3, #7
 8000d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	4619      	mov	r1, r3
 8000da6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000daa:	f000 fab7 	bl	800131c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2100      	movs	r1, #0
 8000db2:	2025      	movs	r0, #37	@ 0x25
 8000db4:	f000 fa05 	bl	80011c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000db8:	2025      	movs	r0, #37	@ 0x25
 8000dba:	f000 fa1e 	bl	80011fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dbe:	e035      	b.n	8000e2c <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART2)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8000e3c <HAL_UART_MspInit+0x104>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d130      	bne.n	8000e2c <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dca:	4b1b      	ldr	r3, [pc, #108]	@ (8000e38 <HAL_UART_MspInit+0x100>)
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	4a1a      	ldr	r2, [pc, #104]	@ (8000e38 <HAL_UART_MspInit+0x100>)
 8000dd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dd4:	61d3      	str	r3, [r2, #28]
 8000dd6:	4b18      	ldr	r3, [pc, #96]	@ (8000e38 <HAL_UART_MspInit+0x100>)
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <HAL_UART_MspInit+0x100>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	4a14      	ldr	r2, [pc, #80]	@ (8000e38 <HAL_UART_MspInit+0x100>)
 8000de8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dec:	6153      	str	r3, [r2, #20]
 8000dee:	4b12      	ldr	r3, [pc, #72]	@ (8000e38 <HAL_UART_MspInit+0x100>)
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dfa:	230c      	movs	r3, #12
 8000dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e0a:	2307      	movs	r3, #7
 8000e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	4619      	mov	r1, r3
 8000e14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e18:	f000 fa80 	bl	800131c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2100      	movs	r1, #0
 8000e20:	2026      	movs	r0, #38	@ 0x26
 8000e22:	f000 f9ce 	bl	80011c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e26:	2026      	movs	r0, #38	@ 0x26
 8000e28:	f000 f9e7 	bl	80011fa <HAL_NVIC_EnableIRQ>
}
 8000e2c:	bf00      	nop
 8000e2e:	3730      	adds	r7, #48	@ 0x30
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40013800 	.word	0x40013800
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	40004400 	.word	0x40004400

08000e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <NMI_Handler+0x4>

08000e48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <HardFault_Handler+0x4>

08000e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <MemManage_Handler+0x4>

08000e58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <BusFault_Handler+0x4>

08000e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <UsageFault_Handler+0x4>

08000e68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e96:	f000 f899 	bl	8000fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ea4:	4802      	ldr	r0, [pc, #8]	@ (8000eb0 <USART1_IRQHandler+0x10>)
 8000ea6:	f003 f8e5 	bl	8004074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000110 	.word	0x20000110

08000eb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000eb8:	4802      	ldr	r0, [pc, #8]	@ (8000ec4 <USART2_IRQHandler+0x10>)
 8000eba:	f003 f8db 	bl	8004074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000198 	.word	0x20000198

08000ec8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ecc:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <SystemInit+0x20>)
 8000ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ed2:	4a05      	ldr	r2, [pc, #20]	@ (8000ee8 <SystemInit+0x20>)
 8000ed4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ed8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <Reset_Handler>:
 8000eec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f24 <LoopForever+0x2>
 8000ef0:	f7ff ffea 	bl	8000ec8 <SystemInit>
 8000ef4:	480c      	ldr	r0, [pc, #48]	@ (8000f28 <LoopForever+0x6>)
 8000ef6:	490d      	ldr	r1, [pc, #52]	@ (8000f2c <LoopForever+0xa>)
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f30 <LoopForever+0xe>)
 8000efa:	2300      	movs	r3, #0
 8000efc:	e002      	b.n	8000f04 <LoopCopyDataInit>

08000efe <CopyDataInit>:
 8000efe:	58d4      	ldr	r4, [r2, r3]
 8000f00:	50c4      	str	r4, [r0, r3]
 8000f02:	3304      	adds	r3, #4

08000f04 <LoopCopyDataInit>:
 8000f04:	18c4      	adds	r4, r0, r3
 8000f06:	428c      	cmp	r4, r1
 8000f08:	d3f9      	bcc.n	8000efe <CopyDataInit>
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f34 <LoopForever+0x12>)
 8000f0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f38 <LoopForever+0x16>)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e001      	b.n	8000f16 <LoopFillZerobss>

08000f12 <FillZerobss>:
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	3204      	adds	r2, #4

08000f16 <LoopFillZerobss>:
 8000f16:	42a2      	cmp	r2, r4
 8000f18:	d3fb      	bcc.n	8000f12 <FillZerobss>
 8000f1a:	f004 f9bd 	bl	8005298 <__libc_init_array>
 8000f1e:	f7ff f953 	bl	80001c8 <main>

08000f22 <LoopForever>:
 8000f22:	e7fe      	b.n	8000f22 <LoopForever>
 8000f24:	20004000 	.word	0x20004000
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	20000010 	.word	0x20000010
 8000f30:	08005338 	.word	0x08005338
 8000f34:	20000010 	.word	0x20000010
 8000f38:	2000022c 	.word	0x2000022c

08000f3c <ADC1_IRQHandler>:
 8000f3c:	e7fe      	b.n	8000f3c <ADC1_IRQHandler>
	...

08000f40 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f44:	4b08      	ldr	r3, [pc, #32]	@ (8000f68 <HAL_Init+0x28>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a07      	ldr	r2, [pc, #28]	@ (8000f68 <HAL_Init+0x28>)
 8000f4a:	f043 0310 	orr.w	r3, r3, #16
 8000f4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f50:	2003      	movs	r0, #3
 8000f52:	f000 f92b 	bl	80011ac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f000 f808 	bl	8000f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f5c:	f7ff fdba 	bl	8000ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40022000 	.word	0x40022000

08000f6c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f74:	4b12      	ldr	r3, [pc, #72]	@ (8000fc0 <HAL_InitTick+0x54>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <HAL_InitTick+0x58>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f943 	bl	8001216 <HAL_SYSTICK_Config>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00e      	b.n	8000fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b0f      	cmp	r3, #15
 8000f9e:	d80a      	bhi.n	8000fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa8:	f000 f90b 	bl	80011c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fac:	4a06      	ldr	r2, [pc, #24]	@ (8000fc8 <HAL_InitTick+0x5c>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e000      	b.n	8000fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000004 	.word	0x20000004
 8000fc4:	2000000c 	.word	0x2000000c
 8000fc8:	20000008 	.word	0x20000008

08000fcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <HAL_IncTick+0x20>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <HAL_IncTick+0x24>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	4a04      	ldr	r2, [pc, #16]	@ (8000ff0 <HAL_IncTick+0x24>)
 8000fde:	6013      	str	r3, [r2, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	2000000c 	.word	0x2000000c
 8000ff0:	20000228 	.word	0x20000228

08000ff4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ff8:	4b03      	ldr	r3, [pc, #12]	@ (8001008 <HAL_GetTick+0x14>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000228 	.word	0x20000228

0800100c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800101c:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001028:	4013      	ands	r3, r2
 800102a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001034:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001038:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800103c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103e:	4a04      	ldr	r2, [pc, #16]	@ (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	60d3      	str	r3, [r2, #12]
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001058:	4b04      	ldr	r3, [pc, #16]	@ (800106c <__NVIC_GetPriorityGrouping+0x18>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	f003 0307 	and.w	r3, r3, #7
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	2b00      	cmp	r3, #0
 8001080:	db0b      	blt.n	800109a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	f003 021f 	and.w	r2, r3, #31
 8001088:	4907      	ldr	r1, [pc, #28]	@ (80010a8 <__NVIC_EnableIRQ+0x38>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	095b      	lsrs	r3, r3, #5
 8001090:	2001      	movs	r0, #1
 8001092:	fa00 f202 	lsl.w	r2, r0, r2
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000e100 	.word	0xe000e100

080010ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	db0a      	blt.n	80010d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	490c      	ldr	r1, [pc, #48]	@ (80010f8 <__NVIC_SetPriority+0x4c>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	440b      	add	r3, r1
 80010d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d4:	e00a      	b.n	80010ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4908      	ldr	r1, [pc, #32]	@ (80010fc <__NVIC_SetPriority+0x50>)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	3b04      	subs	r3, #4
 80010e4:	0112      	lsls	r2, r2, #4
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	440b      	add	r3, r1
 80010ea:	761a      	strb	r2, [r3, #24]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000e100 	.word	0xe000e100
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	@ 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f1c3 0307 	rsb	r3, r3, #7
 800111a:	2b04      	cmp	r3, #4
 800111c:	bf28      	it	cs
 800111e:	2304      	movcs	r3, #4
 8001120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3304      	adds	r3, #4
 8001126:	2b06      	cmp	r3, #6
 8001128:	d902      	bls.n	8001130 <NVIC_EncodePriority+0x30>
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3b03      	subs	r3, #3
 800112e:	e000      	b.n	8001132 <NVIC_EncodePriority+0x32>
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	f04f 32ff 	mov.w	r2, #4294967295
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43da      	mvns	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	401a      	ands	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001148:	f04f 31ff 	mov.w	r1, #4294967295
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	43d9      	mvns	r1, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	4313      	orrs	r3, r2
         );
}
 800115a:	4618      	mov	r0, r3
 800115c:	3724      	adds	r7, #36	@ 0x24
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001178:	d301      	bcc.n	800117e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117a:	2301      	movs	r3, #1
 800117c:	e00f      	b.n	800119e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117e:	4a0a      	ldr	r2, [pc, #40]	@ (80011a8 <SysTick_Config+0x40>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001186:	210f      	movs	r1, #15
 8001188:	f04f 30ff 	mov.w	r0, #4294967295
 800118c:	f7ff ff8e 	bl	80010ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001190:	4b05      	ldr	r3, [pc, #20]	@ (80011a8 <SysTick_Config+0x40>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001196:	4b04      	ldr	r3, [pc, #16]	@ (80011a8 <SysTick_Config+0x40>)
 8001198:	2207      	movs	r2, #7
 800119a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	e000e010 	.word	0xe000e010

080011ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff29 	bl	800100c <__NVIC_SetPriorityGrouping>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d4:	f7ff ff3e 	bl	8001054 <__NVIC_GetPriorityGrouping>
 80011d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	68b9      	ldr	r1, [r7, #8]
 80011de:	6978      	ldr	r0, [r7, #20]
 80011e0:	f7ff ff8e 	bl	8001100 <NVIC_EncodePriority>
 80011e4:	4602      	mov	r2, r0
 80011e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff5d 	bl	80010ac <__NVIC_SetPriority>
}
 80011f2:	bf00      	nop
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4603      	mov	r3, r0
 8001202:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff31 	bl	8001070 <__NVIC_EnableIRQ>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ffa2 	bl	8001168 <SysTick_Config>
 8001224:	4603      	mov	r3, r0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800123c:	2b02      	cmp	r3, #2
 800123e:	d008      	beq.n	8001252 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2204      	movs	r2, #4
 8001244:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e020      	b.n	8001294 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 020e 	bic.w	r2, r2, #14
 8001260:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 0201 	bic.w	r2, r2, #1
 8001270:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800127a:	2101      	movs	r1, #1
 800127c:	fa01 f202 	lsl.w	r2, r1, r2
 8001280:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2201      	movs	r2, #1
 8001286:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012a8:	2300      	movs	r3, #0
 80012aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d005      	beq.n	80012c2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2204      	movs	r2, #4
 80012ba:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	73fb      	strb	r3, [r7, #15]
 80012c0:	e027      	b.n	8001312 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f022 020e 	bic.w	r2, r2, #14
 80012d0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f022 0201 	bic.w	r2, r2, #1
 80012e0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012ea:	2101      	movs	r1, #1
 80012ec:	fa01 f202 	lsl.w	r2, r1, r2
 80012f0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2201      	movs	r2, #1
 80012f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	4798      	blx	r3
    } 
  }
  return status;
 8001312:	7bfb      	ldrb	r3, [r7, #15]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800131c:	b480      	push	{r7}
 800131e:	b087      	sub	sp, #28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800132a:	e14e      	b.n	80015ca <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	2101      	movs	r1, #1
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	fa01 f303 	lsl.w	r3, r1, r3
 8001338:	4013      	ands	r3, r2
 800133a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 8140 	beq.w	80015c4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	2b01      	cmp	r3, #1
 800134e:	d005      	beq.n	800135c <HAL_GPIO_Init+0x40>
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 0303 	and.w	r3, r3, #3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d130      	bne.n	80013be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	2203      	movs	r2, #3
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	68da      	ldr	r2, [r3, #12]
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	4313      	orrs	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001392:	2201      	movs	r2, #1
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4013      	ands	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	091b      	lsrs	r3, r3, #4
 80013a8:	f003 0201 	and.w	r2, r3, #1
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f003 0303 	and.w	r3, r3, #3
 80013c6:	2b03      	cmp	r3, #3
 80013c8:	d017      	beq.n	80013fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	2203      	movs	r2, #3
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43db      	mvns	r3, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	689a      	ldr	r2, [r3, #8]
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f003 0303 	and.w	r3, r3, #3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d123      	bne.n	800144e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	08da      	lsrs	r2, r3, #3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3208      	adds	r2, #8
 800140e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001412:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	220f      	movs	r2, #15
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	691a      	ldr	r2, [r3, #16]
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	f003 0307 	and.w	r3, r3, #7
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	08da      	lsrs	r2, r3, #3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3208      	adds	r2, #8
 8001448:	6939      	ldr	r1, [r7, #16]
 800144a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	2203      	movs	r2, #3
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43db      	mvns	r3, r3
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	4013      	ands	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f003 0203 	and.w	r2, r3, #3
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800148a:	2b00      	cmp	r3, #0
 800148c:	f000 809a 	beq.w	80015c4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001490:	4b55      	ldr	r3, [pc, #340]	@ (80015e8 <HAL_GPIO_Init+0x2cc>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	4a54      	ldr	r2, [pc, #336]	@ (80015e8 <HAL_GPIO_Init+0x2cc>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6193      	str	r3, [r2, #24]
 800149c:	4b52      	ldr	r3, [pc, #328]	@ (80015e8 <HAL_GPIO_Init+0x2cc>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014a8:	4a50      	ldr	r2, [pc, #320]	@ (80015ec <HAL_GPIO_Init+0x2d0>)
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	089b      	lsrs	r3, r3, #2
 80014ae:	3302      	adds	r3, #2
 80014b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	f003 0303 	and.w	r3, r3, #3
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	220f      	movs	r2, #15
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80014d2:	d013      	beq.n	80014fc <HAL_GPIO_Init+0x1e0>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a46      	ldr	r2, [pc, #280]	@ (80015f0 <HAL_GPIO_Init+0x2d4>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d00d      	beq.n	80014f8 <HAL_GPIO_Init+0x1dc>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a45      	ldr	r2, [pc, #276]	@ (80015f4 <HAL_GPIO_Init+0x2d8>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d007      	beq.n	80014f4 <HAL_GPIO_Init+0x1d8>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a44      	ldr	r2, [pc, #272]	@ (80015f8 <HAL_GPIO_Init+0x2dc>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d101      	bne.n	80014f0 <HAL_GPIO_Init+0x1d4>
 80014ec:	2303      	movs	r3, #3
 80014ee:	e006      	b.n	80014fe <HAL_GPIO_Init+0x1e2>
 80014f0:	2305      	movs	r3, #5
 80014f2:	e004      	b.n	80014fe <HAL_GPIO_Init+0x1e2>
 80014f4:	2302      	movs	r3, #2
 80014f6:	e002      	b.n	80014fe <HAL_GPIO_Init+0x1e2>
 80014f8:	2301      	movs	r3, #1
 80014fa:	e000      	b.n	80014fe <HAL_GPIO_Init+0x1e2>
 80014fc:	2300      	movs	r3, #0
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	f002 0203 	and.w	r2, r2, #3
 8001504:	0092      	lsls	r2, r2, #2
 8001506:	4093      	lsls	r3, r2
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	4313      	orrs	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800150e:	4937      	ldr	r1, [pc, #220]	@ (80015ec <HAL_GPIO_Init+0x2d0>)
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	089b      	lsrs	r3, r3, #2
 8001514:	3302      	adds	r3, #2
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800151c:	4b37      	ldr	r3, [pc, #220]	@ (80015fc <HAL_GPIO_Init+0x2e0>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	43db      	mvns	r3, r3
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001540:	4a2e      	ldr	r2, [pc, #184]	@ (80015fc <HAL_GPIO_Init+0x2e0>)
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001546:	4b2d      	ldr	r3, [pc, #180]	@ (80015fc <HAL_GPIO_Init+0x2e0>)
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	43db      	mvns	r3, r3
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4013      	ands	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4313      	orrs	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800156a:	4a24      	ldr	r2, [pc, #144]	@ (80015fc <HAL_GPIO_Init+0x2e0>)
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001570:	4b22      	ldr	r3, [pc, #136]	@ (80015fc <HAL_GPIO_Init+0x2e0>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	43db      	mvns	r3, r3
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4013      	ands	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001594:	4a19      	ldr	r2, [pc, #100]	@ (80015fc <HAL_GPIO_Init+0x2e0>)
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800159a:	4b18      	ldr	r3, [pc, #96]	@ (80015fc <HAL_GPIO_Init+0x2e0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	43db      	mvns	r3, r3
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	4013      	ands	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015be:	4a0f      	ldr	r2, [pc, #60]	@ (80015fc <HAL_GPIO_Init+0x2e0>)
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	3301      	adds	r3, #1
 80015c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	fa22 f303 	lsr.w	r3, r2, r3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f47f aea9 	bne.w	800132c <HAL_GPIO_Init+0x10>
  }
}
 80015da:	bf00      	nop
 80015dc:	bf00      	nop
 80015de:	371c      	adds	r7, #28
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40010000 	.word	0x40010000
 80015f0:	48000400 	.word	0x48000400
 80015f4:	48000800 	.word	0x48000800
 80015f8:	48000c00 	.word	0x48000c00
 80015fc:	40010400 	.word	0x40010400

08001600 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691a      	ldr	r2, [r3, #16]
 8001610:	887b      	ldrh	r3, [r7, #2]
 8001612:	4013      	ands	r3, r2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d002      	beq.n	800161e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001618:	2301      	movs	r3, #1
 800161a:	73fb      	strb	r3, [r7, #15]
 800161c:	e001      	b.n	8001622 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800161e:	2300      	movs	r3, #0
 8001620:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001622:	7bfb      	ldrb	r3, [r7, #15]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	807b      	strh	r3, [r7, #2]
 800163c:	4613      	mov	r3, r2
 800163e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001640:	787b      	ldrb	r3, [r7, #1]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001646:	887a      	ldrh	r2, [r7, #2]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800164c:	e002      	b.n	8001654 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800164e:	887a      	ldrh	r2, [r7, #2]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001666:	af00      	add	r7, sp, #0
 8001668:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800166c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001670:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001672:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001676:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d102      	bne.n	8001686 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	f001 b823 	b.w	80026cc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001686:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800168a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 817d 	beq.w	8001996 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800169c:	4bbc      	ldr	r3, [pc, #752]	@ (8001990 <HAL_RCC_OscConfig+0x330>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 030c 	and.w	r3, r3, #12
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	d00c      	beq.n	80016c2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016a8:	4bb9      	ldr	r3, [pc, #740]	@ (8001990 <HAL_RCC_OscConfig+0x330>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 030c 	and.w	r3, r3, #12
 80016b0:	2b08      	cmp	r3, #8
 80016b2:	d15c      	bne.n	800176e <HAL_RCC_OscConfig+0x10e>
 80016b4:	4bb6      	ldr	r3, [pc, #728]	@ (8001990 <HAL_RCC_OscConfig+0x330>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016c0:	d155      	bne.n	800176e <HAL_RCC_OscConfig+0x10e>
 80016c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016c6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80016ce:	fa93 f3a3 	rbit	r3, r3
 80016d2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016d6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016da:	fab3 f383 	clz	r3, r3
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	095b      	lsrs	r3, r3, #5
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d102      	bne.n	80016f4 <HAL_RCC_OscConfig+0x94>
 80016ee:	4ba8      	ldr	r3, [pc, #672]	@ (8001990 <HAL_RCC_OscConfig+0x330>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	e015      	b.n	8001720 <HAL_RCC_OscConfig+0xc0>
 80016f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016f8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001700:	fa93 f3a3 	rbit	r3, r3
 8001704:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001708:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800170c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001710:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001714:	fa93 f3a3 	rbit	r3, r3
 8001718:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800171c:	4b9c      	ldr	r3, [pc, #624]	@ (8001990 <HAL_RCC_OscConfig+0x330>)
 800171e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001720:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001724:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001728:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800172c:	fa92 f2a2 	rbit	r2, r2
 8001730:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001734:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001738:	fab2 f282 	clz	r2, r2
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	f042 0220 	orr.w	r2, r2, #32
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	f002 021f 	and.w	r2, r2, #31
 8001748:	2101      	movs	r1, #1
 800174a:	fa01 f202 	lsl.w	r2, r1, r2
 800174e:	4013      	ands	r3, r2
 8001750:	2b00      	cmp	r3, #0
 8001752:	f000 811f 	beq.w	8001994 <HAL_RCC_OscConfig+0x334>
 8001756:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800175a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	f040 8116 	bne.w	8001994 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	f000 bfaf 	b.w	80026cc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800176e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001772:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800177e:	d106      	bne.n	800178e <HAL_RCC_OscConfig+0x12e>
 8001780:	4b83      	ldr	r3, [pc, #524]	@ (8001990 <HAL_RCC_OscConfig+0x330>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a82      	ldr	r2, [pc, #520]	@ (8001990 <HAL_RCC_OscConfig+0x330>)
 8001786:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	e036      	b.n	80017fc <HAL_RCC_OscConfig+0x19c>
 800178e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001792:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10c      	bne.n	80017b8 <HAL_RCC_OscConfig+0x158>
 800179e:	4b7c      	ldr	r3, [pc, #496]	@ (8001990 <HAL_RCC_OscConfig+0x330>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a7b      	ldr	r2, [pc, #492]	@ (8001990 <HAL_RCC_OscConfig+0x330>)
 80017a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	4b79      	ldr	r3, [pc, #484]	@ (8001990 <HAL_RCC_OscConfig+0x330>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a78      	ldr	r2, [pc, #480]	@ (8001990 <HAL_RCC_OscConfig+0x330>)
 80017b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	e021      	b.n	80017fc <HAL_RCC_OscConfig+0x19c>
 80017b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017c8:	d10c      	bne.n	80017e4 <HAL_RCC_OscConfig+0x184>
 80017ca:	4b71      	ldr	r3, [pc, #452]	@ (8001990 <HAL_RCC_OscConfig+0x330>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a70      	ldr	r2, [pc, #448]	@ (8001990 <HAL_RCC_OscConfig+0x330>)
 80017d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	4b6e      	ldr	r3, [pc, #440]	@ (8001990 <HAL_RCC_OscConfig+0x330>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a6d      	ldr	r2, [pc, #436]	@ (8001990 <HAL_RCC_OscConfig+0x330>)
 80017dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	e00b      	b.n	80017fc <HAL_RCC_OscConfig+0x19c>
 80017e4:	4b6a      	ldr	r3, [pc, #424]	@ (8001990 <HAL_RCC_OscConfig+0x330>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a69      	ldr	r2, [pc, #420]	@ (8001990 <HAL_RCC_OscConfig+0x330>)
 80017ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	4b67      	ldr	r3, [pc, #412]	@ (8001990 <HAL_RCC_OscConfig+0x330>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a66      	ldr	r2, [pc, #408]	@ (8001990 <HAL_RCC_OscConfig+0x330>)
 80017f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017fa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017fc:	4b64      	ldr	r3, [pc, #400]	@ (8001990 <HAL_RCC_OscConfig+0x330>)
 80017fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001800:	f023 020f 	bic.w	r2, r3, #15
 8001804:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001808:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	495f      	ldr	r1, [pc, #380]	@ (8001990 <HAL_RCC_OscConfig+0x330>)
 8001812:	4313      	orrs	r3, r2
 8001814:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001816:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800181a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d059      	beq.n	80018da <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001826:	f7ff fbe5 	bl	8000ff4 <HAL_GetTick>
 800182a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182e:	e00a      	b.n	8001846 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001830:	f7ff fbe0 	bl	8000ff4 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b64      	cmp	r3, #100	@ 0x64
 800183e:	d902      	bls.n	8001846 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	f000 bf43 	b.w	80026cc <HAL_RCC_OscConfig+0x106c>
 8001846:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800184a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001852:	fa93 f3a3 	rbit	r3, r3
 8001856:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800185a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185e:	fab3 f383 	clz	r3, r3
 8001862:	b2db      	uxtb	r3, r3
 8001864:	095b      	lsrs	r3, r3, #5
 8001866:	b2db      	uxtb	r3, r3
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b01      	cmp	r3, #1
 8001870:	d102      	bne.n	8001878 <HAL_RCC_OscConfig+0x218>
 8001872:	4b47      	ldr	r3, [pc, #284]	@ (8001990 <HAL_RCC_OscConfig+0x330>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	e015      	b.n	80018a4 <HAL_RCC_OscConfig+0x244>
 8001878:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800187c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001880:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001884:	fa93 f3a3 	rbit	r3, r3
 8001888:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800188c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001890:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001894:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001898:	fa93 f3a3 	rbit	r3, r3
 800189c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80018a0:	4b3b      	ldr	r3, [pc, #236]	@ (8001990 <HAL_RCC_OscConfig+0x330>)
 80018a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80018a8:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80018ac:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80018b0:	fa92 f2a2 	rbit	r2, r2
 80018b4:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80018b8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80018bc:	fab2 f282 	clz	r2, r2
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	f042 0220 	orr.w	r2, r2, #32
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	f002 021f 	and.w	r2, r2, #31
 80018cc:	2101      	movs	r1, #1
 80018ce:	fa01 f202 	lsl.w	r2, r1, r2
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0ab      	beq.n	8001830 <HAL_RCC_OscConfig+0x1d0>
 80018d8:	e05d      	b.n	8001996 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018da:	f7ff fb8b 	bl	8000ff4 <HAL_GetTick>
 80018de:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e2:	e00a      	b.n	80018fa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018e4:	f7ff fb86 	bl	8000ff4 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b64      	cmp	r3, #100	@ 0x64
 80018f2:	d902      	bls.n	80018fa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	f000 bee9 	b.w	80026cc <HAL_RCC_OscConfig+0x106c>
 80018fa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018fe:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001902:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001906:	fa93 f3a3 	rbit	r3, r3
 800190a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800190e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001912:	fab3 f383 	clz	r3, r3
 8001916:	b2db      	uxtb	r3, r3
 8001918:	095b      	lsrs	r3, r3, #5
 800191a:	b2db      	uxtb	r3, r3
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b01      	cmp	r3, #1
 8001924:	d102      	bne.n	800192c <HAL_RCC_OscConfig+0x2cc>
 8001926:	4b1a      	ldr	r3, [pc, #104]	@ (8001990 <HAL_RCC_OscConfig+0x330>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	e015      	b.n	8001958 <HAL_RCC_OscConfig+0x2f8>
 800192c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001930:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001934:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001938:	fa93 f3a3 	rbit	r3, r3
 800193c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001940:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001944:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001948:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800194c:	fa93 f3a3 	rbit	r3, r3
 8001950:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001954:	4b0e      	ldr	r3, [pc, #56]	@ (8001990 <HAL_RCC_OscConfig+0x330>)
 8001956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001958:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800195c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001960:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001964:	fa92 f2a2 	rbit	r2, r2
 8001968:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800196c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001970:	fab2 f282 	clz	r2, r2
 8001974:	b2d2      	uxtb	r2, r2
 8001976:	f042 0220 	orr.w	r2, r2, #32
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	f002 021f 	and.w	r2, r2, #31
 8001980:	2101      	movs	r1, #1
 8001982:	fa01 f202 	lsl.w	r2, r1, r2
 8001986:	4013      	ands	r3, r2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1ab      	bne.n	80018e4 <HAL_RCC_OscConfig+0x284>
 800198c:	e003      	b.n	8001996 <HAL_RCC_OscConfig+0x336>
 800198e:	bf00      	nop
 8001990:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001996:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800199a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 817d 	beq.w	8001ca6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019ac:	4ba6      	ldr	r3, [pc, #664]	@ (8001c48 <HAL_RCC_OscConfig+0x5e8>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 030c 	and.w	r3, r3, #12
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00b      	beq.n	80019d0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019b8:	4ba3      	ldr	r3, [pc, #652]	@ (8001c48 <HAL_RCC_OscConfig+0x5e8>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 030c 	and.w	r3, r3, #12
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	d172      	bne.n	8001aaa <HAL_RCC_OscConfig+0x44a>
 80019c4:	4ba0      	ldr	r3, [pc, #640]	@ (8001c48 <HAL_RCC_OscConfig+0x5e8>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d16c      	bne.n	8001aaa <HAL_RCC_OscConfig+0x44a>
 80019d0:	2302      	movs	r3, #2
 80019d2:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80019da:	fa93 f3a3 	rbit	r3, r3
 80019de:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80019e2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e6:	fab3 f383 	clz	r3, r3
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	095b      	lsrs	r3, r3, #5
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d102      	bne.n	8001a00 <HAL_RCC_OscConfig+0x3a0>
 80019fa:	4b93      	ldr	r3, [pc, #588]	@ (8001c48 <HAL_RCC_OscConfig+0x5e8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	e013      	b.n	8001a28 <HAL_RCC_OscConfig+0x3c8>
 8001a00:	2302      	movs	r3, #2
 8001a02:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a06:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001a0a:	fa93 f3a3 	rbit	r3, r3
 8001a0e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001a12:	2302      	movs	r3, #2
 8001a14:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001a18:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001a1c:	fa93 f3a3 	rbit	r3, r3
 8001a20:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001a24:	4b88      	ldr	r3, [pc, #544]	@ (8001c48 <HAL_RCC_OscConfig+0x5e8>)
 8001a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a28:	2202      	movs	r2, #2
 8001a2a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001a2e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001a32:	fa92 f2a2 	rbit	r2, r2
 8001a36:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001a3a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001a3e:	fab2 f282 	clz	r2, r2
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	f042 0220 	orr.w	r2, r2, #32
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	f002 021f 	and.w	r2, r2, #31
 8001a4e:	2101      	movs	r1, #1
 8001a50:	fa01 f202 	lsl.w	r2, r1, r2
 8001a54:	4013      	ands	r3, r2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00a      	beq.n	8001a70 <HAL_RCC_OscConfig+0x410>
 8001a5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d002      	beq.n	8001a70 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	f000 be2e 	b.w	80026cc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a70:	4b75      	ldr	r3, [pc, #468]	@ (8001c48 <HAL_RCC_OscConfig+0x5e8>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	21f8      	movs	r1, #248	@ 0xf8
 8001a86:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001a8e:	fa91 f1a1 	rbit	r1, r1
 8001a92:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001a96:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001a9a:	fab1 f181 	clz	r1, r1
 8001a9e:	b2c9      	uxtb	r1, r1
 8001aa0:	408b      	lsls	r3, r1
 8001aa2:	4969      	ldr	r1, [pc, #420]	@ (8001c48 <HAL_RCC_OscConfig+0x5e8>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa8:	e0fd      	b.n	8001ca6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 8088 	beq.w	8001bcc <HAL_RCC_OscConfig+0x56c>
 8001abc:	2301      	movs	r3, #1
 8001abe:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac2:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001ac6:	fa93 f3a3 	rbit	r3, r3
 8001aca:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001ace:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad2:	fab3 f383 	clz	r3, r3
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001adc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7ff fa84 	bl	8000ff4 <HAL_GetTick>
 8001aec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af0:	e00a      	b.n	8001b08 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001af2:	f7ff fa7f 	bl	8000ff4 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d902      	bls.n	8001b08 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	f000 bde2 	b.w	80026cc <HAL_RCC_OscConfig+0x106c>
 8001b08:	2302      	movs	r3, #2
 8001b0a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001b12:	fa93 f3a3 	rbit	r3, r3
 8001b16:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001b1a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1e:	fab3 f383 	clz	r3, r3
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	095b      	lsrs	r3, r3, #5
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d102      	bne.n	8001b38 <HAL_RCC_OscConfig+0x4d8>
 8001b32:	4b45      	ldr	r3, [pc, #276]	@ (8001c48 <HAL_RCC_OscConfig+0x5e8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	e013      	b.n	8001b60 <HAL_RCC_OscConfig+0x500>
 8001b38:	2302      	movs	r3, #2
 8001b3a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001b42:	fa93 f3a3 	rbit	r3, r3
 8001b46:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001b50:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001b54:	fa93 f3a3 	rbit	r3, r3
 8001b58:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001b5c:	4b3a      	ldr	r3, [pc, #232]	@ (8001c48 <HAL_RCC_OscConfig+0x5e8>)
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b60:	2202      	movs	r2, #2
 8001b62:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001b66:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001b6a:	fa92 f2a2 	rbit	r2, r2
 8001b6e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001b72:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001b76:	fab2 f282 	clz	r2, r2
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	f042 0220 	orr.w	r2, r2, #32
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	f002 021f 	and.w	r2, r2, #31
 8001b86:	2101      	movs	r1, #1
 8001b88:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0af      	beq.n	8001af2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b92:	4b2d      	ldr	r3, [pc, #180]	@ (8001c48 <HAL_RCC_OscConfig+0x5e8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	21f8      	movs	r1, #248	@ 0xf8
 8001ba8:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bac:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001bb0:	fa91 f1a1 	rbit	r1, r1
 8001bb4:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001bb8:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001bbc:	fab1 f181 	clz	r1, r1
 8001bc0:	b2c9      	uxtb	r1, r1
 8001bc2:	408b      	lsls	r3, r1
 8001bc4:	4920      	ldr	r1, [pc, #128]	@ (8001c48 <HAL_RCC_OscConfig+0x5e8>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	600b      	str	r3, [r1, #0]
 8001bca:	e06c      	b.n	8001ca6 <HAL_RCC_OscConfig+0x646>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001bd6:	fa93 f3a3 	rbit	r3, r3
 8001bda:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001bde:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001be2:	fab3 f383 	clz	r3, r3
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001bec:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf8:	f7ff f9fc 	bl	8000ff4 <HAL_GetTick>
 8001bfc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c00:	e00a      	b.n	8001c18 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c02:	f7ff f9f7 	bl	8000ff4 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d902      	bls.n	8001c18 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	f000 bd5a 	b.w	80026cc <HAL_RCC_OscConfig+0x106c>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001c22:	fa93 f3a3 	rbit	r3, r3
 8001c26:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001c2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2e:	fab3 f383 	clz	r3, r3
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	095b      	lsrs	r3, r3, #5
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d104      	bne.n	8001c4c <HAL_RCC_OscConfig+0x5ec>
 8001c42:	4b01      	ldr	r3, [pc, #4]	@ (8001c48 <HAL_RCC_OscConfig+0x5e8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	e015      	b.n	8001c74 <HAL_RCC_OscConfig+0x614>
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001c56:	fa93 f3a3 	rbit	r3, r3
 8001c5a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001c5e:	2302      	movs	r3, #2
 8001c60:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001c64:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001c70:	4bc8      	ldr	r3, [pc, #800]	@ (8001f94 <HAL_RCC_OscConfig+0x934>)
 8001c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c74:	2202      	movs	r2, #2
 8001c76:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001c7a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001c7e:	fa92 f2a2 	rbit	r2, r2
 8001c82:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001c86:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001c8a:	fab2 f282 	clz	r2, r2
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	f042 0220 	orr.w	r2, r2, #32
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	f002 021f 	and.w	r2, r2, #31
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1ad      	bne.n	8001c02 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001caa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8110 	beq.w	8001edc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cc0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d079      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x760>
 8001ccc:	2301      	movs	r3, #1
 8001cce:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001cd6:	fa93 f3a3 	rbit	r3, r3
 8001cda:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001cde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce2:	fab3 f383 	clz	r3, r3
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4bab      	ldr	r3, [pc, #684]	@ (8001f98 <HAL_RCC_OscConfig+0x938>)
 8001cec:	4413      	add	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf6:	f7ff f97d 	bl	8000ff4 <HAL_GetTick>
 8001cfa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfe:	e00a      	b.n	8001d16 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d00:	f7ff f978 	bl	8000ff4 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d902      	bls.n	8001d16 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	f000 bcdb 	b.w	80026cc <HAL_RCC_OscConfig+0x106c>
 8001d16:	2302      	movs	r3, #2
 8001d18:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001d20:	fa93 f3a3 	rbit	r3, r3
 8001d24:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001d28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d2c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001d30:	2202      	movs	r2, #2
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d38:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	fa93 f2a3 	rbit	r2, r3
 8001d42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001d54:	2202      	movs	r2, #2
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	fa93 f2a3 	rbit	r2, r3
 8001d66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d6a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d6e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d70:	4b88      	ldr	r3, [pc, #544]	@ (8001f94 <HAL_RCC_OscConfig+0x934>)
 8001d72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d78:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001d7c:	2102      	movs	r1, #2
 8001d7e:	6019      	str	r1, [r3, #0]
 8001d80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d84:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	fa93 f1a3 	rbit	r1, r3
 8001d8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d92:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d96:	6019      	str	r1, [r3, #0]
  return result;
 8001d98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d9c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	fab3 f383 	clz	r3, r3
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	f003 031f 	and.w	r3, r3, #31
 8001db2:	2101      	movs	r1, #1
 8001db4:	fa01 f303 	lsl.w	r3, r1, r3
 8001db8:	4013      	ands	r3, r2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0a0      	beq.n	8001d00 <HAL_RCC_OscConfig+0x6a0>
 8001dbe:	e08d      	b.n	8001edc <HAL_RCC_OscConfig+0x87c>
 8001dc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001dc8:	2201      	movs	r2, #1
 8001dca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dd0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	fa93 f2a3 	rbit	r2, r3
 8001dda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dde:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001de2:	601a      	str	r2, [r3, #0]
  return result;
 8001de4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001dec:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dee:	fab3 f383 	clz	r3, r3
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	461a      	mov	r2, r3
 8001df6:	4b68      	ldr	r3, [pc, #416]	@ (8001f98 <HAL_RCC_OscConfig+0x938>)
 8001df8:	4413      	add	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e02:	f7ff f8f7 	bl	8000ff4 <HAL_GetTick>
 8001e06:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e0a:	e00a      	b.n	8001e22 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e0c:	f7ff f8f2 	bl	8000ff4 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d902      	bls.n	8001e22 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	f000 bc55 	b.w	80026cc <HAL_RCC_OscConfig+0x106c>
 8001e22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e26:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e32:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	fa93 f2a3 	rbit	r2, r3
 8001e3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e40:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e4a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001e4e:	2202      	movs	r2, #2
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e56:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	fa93 f2a3 	rbit	r2, r3
 8001e60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e6e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001e72:	2202      	movs	r2, #2
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e7a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	fa93 f2a3 	rbit	r2, r3
 8001e84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e88:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001e8c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e8e:	4b41      	ldr	r3, [pc, #260]	@ (8001f94 <HAL_RCC_OscConfig+0x934>)
 8001e90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e96:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001e9a:	2102      	movs	r1, #2
 8001e9c:	6019      	str	r1, [r3, #0]
 8001e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	fa93 f1a3 	rbit	r1, r3
 8001eac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eb0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001eb4:	6019      	str	r1, [r3, #0]
  return result;
 8001eb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eba:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	fab3 f383 	clz	r3, r3
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	f003 031f 	and.w	r3, r3, #31
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d197      	bne.n	8001e0c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001edc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 81a1 	beq.w	8002234 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ef8:	4b26      	ldr	r3, [pc, #152]	@ (8001f94 <HAL_RCC_OscConfig+0x934>)
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d116      	bne.n	8001f32 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f04:	4b23      	ldr	r3, [pc, #140]	@ (8001f94 <HAL_RCC_OscConfig+0x934>)
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	4a22      	ldr	r2, [pc, #136]	@ (8001f94 <HAL_RCC_OscConfig+0x934>)
 8001f0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f0e:	61d3      	str	r3, [r2, #28]
 8001f10:	4b20      	ldr	r3, [pc, #128]	@ (8001f94 <HAL_RCC_OscConfig+0x934>)
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001f18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f1c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f26:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001f2a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f32:	4b1a      	ldr	r3, [pc, #104]	@ (8001f9c <HAL_RCC_OscConfig+0x93c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d11a      	bne.n	8001f74 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f3e:	4b17      	ldr	r3, [pc, #92]	@ (8001f9c <HAL_RCC_OscConfig+0x93c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a16      	ldr	r2, [pc, #88]	@ (8001f9c <HAL_RCC_OscConfig+0x93c>)
 8001f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f48:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f4a:	f7ff f853 	bl	8000ff4 <HAL_GetTick>
 8001f4e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f52:	e009      	b.n	8001f68 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f54:	f7ff f84e 	bl	8000ff4 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b64      	cmp	r3, #100	@ 0x64
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e3b1      	b.n	80026cc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f68:	4b0c      	ldr	r3, [pc, #48]	@ (8001f9c <HAL_RCC_OscConfig+0x93c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0ef      	beq.n	8001f54 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d10d      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x940>
 8001f84:	4b03      	ldr	r3, [pc, #12]	@ (8001f94 <HAL_RCC_OscConfig+0x934>)
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	4a02      	ldr	r2, [pc, #8]	@ (8001f94 <HAL_RCC_OscConfig+0x934>)
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	6213      	str	r3, [r2, #32]
 8001f90:	e03c      	b.n	800200c <HAL_RCC_OscConfig+0x9ac>
 8001f92:	bf00      	nop
 8001f94:	40021000 	.word	0x40021000
 8001f98:	10908120 	.word	0x10908120
 8001f9c:	40007000 	.word	0x40007000
 8001fa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fa4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10c      	bne.n	8001fca <HAL_RCC_OscConfig+0x96a>
 8001fb0:	4bc1      	ldr	r3, [pc, #772]	@ (80022b8 <HAL_RCC_OscConfig+0xc58>)
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	4ac0      	ldr	r2, [pc, #768]	@ (80022b8 <HAL_RCC_OscConfig+0xc58>)
 8001fb6:	f023 0301 	bic.w	r3, r3, #1
 8001fba:	6213      	str	r3, [r2, #32]
 8001fbc:	4bbe      	ldr	r3, [pc, #760]	@ (80022b8 <HAL_RCC_OscConfig+0xc58>)
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	4abd      	ldr	r2, [pc, #756]	@ (80022b8 <HAL_RCC_OscConfig+0xc58>)
 8001fc2:	f023 0304 	bic.w	r3, r3, #4
 8001fc6:	6213      	str	r3, [r2, #32]
 8001fc8:	e020      	b.n	800200c <HAL_RCC_OscConfig+0x9ac>
 8001fca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	2b05      	cmp	r3, #5
 8001fd8:	d10c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x994>
 8001fda:	4bb7      	ldr	r3, [pc, #732]	@ (80022b8 <HAL_RCC_OscConfig+0xc58>)
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	4ab6      	ldr	r2, [pc, #728]	@ (80022b8 <HAL_RCC_OscConfig+0xc58>)
 8001fe0:	f043 0304 	orr.w	r3, r3, #4
 8001fe4:	6213      	str	r3, [r2, #32]
 8001fe6:	4bb4      	ldr	r3, [pc, #720]	@ (80022b8 <HAL_RCC_OscConfig+0xc58>)
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	4ab3      	ldr	r2, [pc, #716]	@ (80022b8 <HAL_RCC_OscConfig+0xc58>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	6213      	str	r3, [r2, #32]
 8001ff2:	e00b      	b.n	800200c <HAL_RCC_OscConfig+0x9ac>
 8001ff4:	4bb0      	ldr	r3, [pc, #704]	@ (80022b8 <HAL_RCC_OscConfig+0xc58>)
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	4aaf      	ldr	r2, [pc, #700]	@ (80022b8 <HAL_RCC_OscConfig+0xc58>)
 8001ffa:	f023 0301 	bic.w	r3, r3, #1
 8001ffe:	6213      	str	r3, [r2, #32]
 8002000:	4bad      	ldr	r3, [pc, #692]	@ (80022b8 <HAL_RCC_OscConfig+0xc58>)
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	4aac      	ldr	r2, [pc, #688]	@ (80022b8 <HAL_RCC_OscConfig+0xc58>)
 8002006:	f023 0304 	bic.w	r3, r3, #4
 800200a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800200c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002010:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 8081 	beq.w	8002120 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201e:	f7fe ffe9 	bl	8000ff4 <HAL_GetTick>
 8002022:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002026:	e00b      	b.n	8002040 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002028:	f7fe ffe4 	bl	8000ff4 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002038:	4293      	cmp	r3, r2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e345      	b.n	80026cc <HAL_RCC_OscConfig+0x106c>
 8002040:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002044:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002048:	2202      	movs	r2, #2
 800204a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002050:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	fa93 f2a3 	rbit	r2, r3
 800205a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800205e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002068:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800206c:	2202      	movs	r2, #2
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002074:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	fa93 f2a3 	rbit	r2, r3
 800207e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002082:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002086:	601a      	str	r2, [r3, #0]
  return result;
 8002088:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800208c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002090:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002092:	fab3 f383 	clz	r3, r3
 8002096:	b2db      	uxtb	r3, r3
 8002098:	095b      	lsrs	r3, r3, #5
 800209a:	b2db      	uxtb	r3, r3
 800209c:	f043 0302 	orr.w	r3, r3, #2
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d102      	bne.n	80020ac <HAL_RCC_OscConfig+0xa4c>
 80020a6:	4b84      	ldr	r3, [pc, #528]	@ (80022b8 <HAL_RCC_OscConfig+0xc58>)
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	e013      	b.n	80020d4 <HAL_RCC_OscConfig+0xa74>
 80020ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80020b4:	2202      	movs	r2, #2
 80020b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020bc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	fa93 f2a3 	rbit	r2, r3
 80020c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ca:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	4b79      	ldr	r3, [pc, #484]	@ (80022b8 <HAL_RCC_OscConfig+0xc58>)
 80020d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020d8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80020dc:	2102      	movs	r1, #2
 80020de:	6011      	str	r1, [r2, #0]
 80020e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020e4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80020e8:	6812      	ldr	r2, [r2, #0]
 80020ea:	fa92 f1a2 	rbit	r1, r2
 80020ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020f2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80020f6:	6011      	str	r1, [r2, #0]
  return result;
 80020f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020fc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002100:	6812      	ldr	r2, [r2, #0]
 8002102:	fab2 f282 	clz	r2, r2
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	f002 021f 	and.w	r2, r2, #31
 8002112:	2101      	movs	r1, #1
 8002114:	fa01 f202 	lsl.w	r2, r1, r2
 8002118:	4013      	ands	r3, r2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d084      	beq.n	8002028 <HAL_RCC_OscConfig+0x9c8>
 800211e:	e07f      	b.n	8002220 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002120:	f7fe ff68 	bl	8000ff4 <HAL_GetTick>
 8002124:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002128:	e00b      	b.n	8002142 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800212a:	f7fe ff63 	bl	8000ff4 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800213a:	4293      	cmp	r3, r2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e2c4      	b.n	80026cc <HAL_RCC_OscConfig+0x106c>
 8002142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002146:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800214a:	2202      	movs	r2, #2
 800214c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002152:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	fa93 f2a3 	rbit	r2, r3
 800215c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002160:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800216a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800216e:	2202      	movs	r2, #2
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002176:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	fa93 f2a3 	rbit	r2, r3
 8002180:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002184:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002188:	601a      	str	r2, [r3, #0]
  return result;
 800218a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800218e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002192:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002194:	fab3 f383 	clz	r3, r3
 8002198:	b2db      	uxtb	r3, r3
 800219a:	095b      	lsrs	r3, r3, #5
 800219c:	b2db      	uxtb	r3, r3
 800219e:	f043 0302 	orr.w	r3, r3, #2
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d102      	bne.n	80021ae <HAL_RCC_OscConfig+0xb4e>
 80021a8:	4b43      	ldr	r3, [pc, #268]	@ (80022b8 <HAL_RCC_OscConfig+0xc58>)
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	e013      	b.n	80021d6 <HAL_RCC_OscConfig+0xb76>
 80021ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80021b6:	2202      	movs	r2, #2
 80021b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021be:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	fa93 f2a3 	rbit	r2, r3
 80021c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021cc:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	4b39      	ldr	r3, [pc, #228]	@ (80022b8 <HAL_RCC_OscConfig+0xc58>)
 80021d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021da:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80021de:	2102      	movs	r1, #2
 80021e0:	6011      	str	r1, [r2, #0]
 80021e2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021e6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80021ea:	6812      	ldr	r2, [r2, #0]
 80021ec:	fa92 f1a2 	rbit	r1, r2
 80021f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021f4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80021f8:	6011      	str	r1, [r2, #0]
  return result;
 80021fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021fe:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	fab2 f282 	clz	r2, r2
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	f002 021f 	and.w	r2, r2, #31
 8002214:	2101      	movs	r1, #1
 8002216:	fa01 f202 	lsl.w	r2, r1, r2
 800221a:	4013      	ands	r3, r2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d184      	bne.n	800212a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002220:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002224:	2b01      	cmp	r3, #1
 8002226:	d105      	bne.n	8002234 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002228:	4b23      	ldr	r3, [pc, #140]	@ (80022b8 <HAL_RCC_OscConfig+0xc58>)
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	4a22      	ldr	r2, [pc, #136]	@ (80022b8 <HAL_RCC_OscConfig+0xc58>)
 800222e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002232:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002234:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002238:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 8242 	beq.w	80026ca <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002246:	4b1c      	ldr	r3, [pc, #112]	@ (80022b8 <HAL_RCC_OscConfig+0xc58>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f003 030c 	and.w	r3, r3, #12
 800224e:	2b08      	cmp	r3, #8
 8002250:	f000 8213 	beq.w	800267a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002254:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002258:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	2b02      	cmp	r3, #2
 8002262:	f040 8162 	bne.w	800252a <HAL_RCC_OscConfig+0xeca>
 8002266:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800226a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800226e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002272:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002274:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002278:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	fa93 f2a3 	rbit	r2, r3
 8002282:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002286:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800228a:	601a      	str	r2, [r3, #0]
  return result;
 800228c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002290:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002294:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002296:	fab3 f383 	clz	r3, r3
 800229a:	b2db      	uxtb	r3, r3
 800229c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80022a0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	461a      	mov	r2, r3
 80022a8:	2300      	movs	r3, #0
 80022aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ac:	f7fe fea2 	bl	8000ff4 <HAL_GetTick>
 80022b0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b4:	e00c      	b.n	80022d0 <HAL_RCC_OscConfig+0xc70>
 80022b6:	bf00      	nop
 80022b8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022bc:	f7fe fe9a 	bl	8000ff4 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e1fd      	b.n	80026cc <HAL_RCC_OscConfig+0x106c>
 80022d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80022d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	fa93 f2a3 	rbit	r2, r3
 80022ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80022f4:	601a      	str	r2, [r3, #0]
  return result;
 80022f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fa:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80022fe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002300:	fab3 f383 	clz	r3, r3
 8002304:	b2db      	uxtb	r3, r3
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	b2db      	uxtb	r3, r3
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b01      	cmp	r3, #1
 8002312:	d102      	bne.n	800231a <HAL_RCC_OscConfig+0xcba>
 8002314:	4bb0      	ldr	r3, [pc, #704]	@ (80025d8 <HAL_RCC_OscConfig+0xf78>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	e027      	b.n	800236a <HAL_RCC_OscConfig+0xd0a>
 800231a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800231e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002322:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002326:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800232c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	fa93 f2a3 	rbit	r2, r3
 8002336:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800233a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002344:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002348:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002352:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	fa93 f2a3 	rbit	r2, r3
 800235c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002360:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	4b9c      	ldr	r3, [pc, #624]	@ (80025d8 <HAL_RCC_OscConfig+0xf78>)
 8002368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800236e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002372:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002376:	6011      	str	r1, [r2, #0]
 8002378:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800237c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	fa92 f1a2 	rbit	r1, r2
 8002386:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800238a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800238e:	6011      	str	r1, [r2, #0]
  return result;
 8002390:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002394:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	fab2 f282 	clz	r2, r2
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	f042 0220 	orr.w	r2, r2, #32
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	f002 021f 	and.w	r2, r2, #31
 80023aa:	2101      	movs	r1, #1
 80023ac:	fa01 f202 	lsl.w	r2, r1, r2
 80023b0:	4013      	ands	r3, r2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d182      	bne.n	80022bc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b6:	4b88      	ldr	r3, [pc, #544]	@ (80025d8 <HAL_RCC_OscConfig+0xf78>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80023be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80023ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	430b      	orrs	r3, r1
 80023d8:	497f      	ldr	r1, [pc, #508]	@ (80025d8 <HAL_RCC_OscConfig+0xf78>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	604b      	str	r3, [r1, #4]
 80023de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80023e6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80023ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	fa93 f2a3 	rbit	r2, r3
 80023fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fe:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002402:	601a      	str	r2, [r3, #0]
  return result;
 8002404:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002408:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800240c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800240e:	fab3 f383 	clz	r3, r3
 8002412:	b2db      	uxtb	r3, r3
 8002414:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002418:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	461a      	mov	r2, r3
 8002420:	2301      	movs	r3, #1
 8002422:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002424:	f7fe fde6 	bl	8000ff4 <HAL_GetTick>
 8002428:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800242c:	e009      	b.n	8002442 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800242e:	f7fe fde1 	bl	8000ff4 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e144      	b.n	80026cc <HAL_RCC_OscConfig+0x106c>
 8002442:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002446:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800244a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800244e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002450:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002454:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	fa93 f2a3 	rbit	r2, r3
 800245e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002462:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002466:	601a      	str	r2, [r3, #0]
  return result;
 8002468:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800246c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002470:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	095b      	lsrs	r3, r3, #5
 800247a:	b2db      	uxtb	r3, r3
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b01      	cmp	r3, #1
 8002484:	d102      	bne.n	800248c <HAL_RCC_OscConfig+0xe2c>
 8002486:	4b54      	ldr	r3, [pc, #336]	@ (80025d8 <HAL_RCC_OscConfig+0xf78>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	e027      	b.n	80024dc <HAL_RCC_OscConfig+0xe7c>
 800248c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002490:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002494:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002498:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800249e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	fa93 f2a3 	rbit	r2, r3
 80024a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ac:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80024ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	fa93 f2a3 	rbit	r2, r3
 80024ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	4b3f      	ldr	r3, [pc, #252]	@ (80025d8 <HAL_RCC_OscConfig+0xf78>)
 80024da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024e0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80024e4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80024e8:	6011      	str	r1, [r2, #0]
 80024ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024ee:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	fa92 f1a2 	rbit	r1, r2
 80024f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024fc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002500:	6011      	str	r1, [r2, #0]
  return result;
 8002502:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002506:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	fab2 f282 	clz	r2, r2
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	f042 0220 	orr.w	r2, r2, #32
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	f002 021f 	and.w	r2, r2, #31
 800251c:	2101      	movs	r1, #1
 800251e:	fa01 f202 	lsl.w	r2, r1, r2
 8002522:	4013      	ands	r3, r2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d082      	beq.n	800242e <HAL_RCC_OscConfig+0xdce>
 8002528:	e0cf      	b.n	80026ca <HAL_RCC_OscConfig+0x106a>
 800252a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800252e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002532:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002536:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002538:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800253c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	fa93 f2a3 	rbit	r2, r3
 8002546:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800254a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800254e:	601a      	str	r2, [r3, #0]
  return result;
 8002550:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002554:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002558:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255a:	fab3 f383 	clz	r3, r3
 800255e:	b2db      	uxtb	r3, r3
 8002560:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002564:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	461a      	mov	r2, r3
 800256c:	2300      	movs	r3, #0
 800256e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002570:	f7fe fd40 	bl	8000ff4 <HAL_GetTick>
 8002574:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002578:	e009      	b.n	800258e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800257a:	f7fe fd3b 	bl	8000ff4 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e09e      	b.n	80026cc <HAL_RCC_OscConfig+0x106c>
 800258e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002592:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002596:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800259a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	fa93 f2a3 	rbit	r2, r3
 80025aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ae:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80025b2:	601a      	str	r2, [r3, #0]
  return result;
 80025b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80025bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025be:	fab3 f383 	clz	r3, r3
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	095b      	lsrs	r3, r3, #5
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d104      	bne.n	80025dc <HAL_RCC_OscConfig+0xf7c>
 80025d2:	4b01      	ldr	r3, [pc, #4]	@ (80025d8 <HAL_RCC_OscConfig+0xf78>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	e029      	b.n	800262c <HAL_RCC_OscConfig+0xfcc>
 80025d8:	40021000 	.word	0x40021000
 80025dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80025e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ee:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	fa93 f2a3 	rbit	r2, r3
 80025f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025fc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002606:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800260a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002614:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	fa93 f2a3 	rbit	r2, r3
 800261e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002622:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	4b2b      	ldr	r3, [pc, #172]	@ (80026d8 <HAL_RCC_OscConfig+0x1078>)
 800262a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002630:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002634:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002638:	6011      	str	r1, [r2, #0]
 800263a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800263e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002642:	6812      	ldr	r2, [r2, #0]
 8002644:	fa92 f1a2 	rbit	r1, r2
 8002648:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800264c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002650:	6011      	str	r1, [r2, #0]
  return result;
 8002652:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002656:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	fab2 f282 	clz	r2, r2
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	f042 0220 	orr.w	r2, r2, #32
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	f002 021f 	and.w	r2, r2, #31
 800266c:	2101      	movs	r1, #1
 800266e:	fa01 f202 	lsl.w	r2, r1, r2
 8002672:	4013      	ands	r3, r2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d180      	bne.n	800257a <HAL_RCC_OscConfig+0xf1a>
 8002678:	e027      	b.n	80026ca <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800267a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800267e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e01e      	b.n	80026cc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800268e:	4b12      	ldr	r3, [pc, #72]	@ (80026d8 <HAL_RCC_OscConfig+0x1078>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002696:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800269a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800269e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d10b      	bne.n	80026c6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80026ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80026b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80026b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d001      	beq.n	80026ca <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40021000 	.word	0x40021000

080026dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b09e      	sub	sp, #120	@ 0x78
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e162      	b.n	80029ba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026f4:	4b90      	ldr	r3, [pc, #576]	@ (8002938 <HAL_RCC_ClockConfig+0x25c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d910      	bls.n	8002724 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002702:	4b8d      	ldr	r3, [pc, #564]	@ (8002938 <HAL_RCC_ClockConfig+0x25c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 0207 	bic.w	r2, r3, #7
 800270a:	498b      	ldr	r1, [pc, #556]	@ (8002938 <HAL_RCC_ClockConfig+0x25c>)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	4313      	orrs	r3, r2
 8002710:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002712:	4b89      	ldr	r3, [pc, #548]	@ (8002938 <HAL_RCC_ClockConfig+0x25c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d001      	beq.n	8002724 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e14a      	b.n	80029ba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002730:	4b82      	ldr	r3, [pc, #520]	@ (800293c <HAL_RCC_ClockConfig+0x260>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	497f      	ldr	r1, [pc, #508]	@ (800293c <HAL_RCC_ClockConfig+0x260>)
 800273e:	4313      	orrs	r3, r2
 8002740:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 80dc 	beq.w	8002908 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d13c      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xf6>
 8002758:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800275c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002760:	fa93 f3a3 	rbit	r3, r3
 8002764:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002766:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002768:	fab3 f383 	clz	r3, r3
 800276c:	b2db      	uxtb	r3, r3
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	b2db      	uxtb	r3, r3
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b01      	cmp	r3, #1
 800277a:	d102      	bne.n	8002782 <HAL_RCC_ClockConfig+0xa6>
 800277c:	4b6f      	ldr	r3, [pc, #444]	@ (800293c <HAL_RCC_ClockConfig+0x260>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	e00f      	b.n	80027a2 <HAL_RCC_ClockConfig+0xc6>
 8002782:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002786:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002788:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800278a:	fa93 f3a3 	rbit	r3, r3
 800278e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002790:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002794:	663b      	str	r3, [r7, #96]	@ 0x60
 8002796:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002798:	fa93 f3a3 	rbit	r3, r3
 800279c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800279e:	4b67      	ldr	r3, [pc, #412]	@ (800293c <HAL_RCC_ClockConfig+0x260>)
 80027a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80027a6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80027a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80027aa:	fa92 f2a2 	rbit	r2, r2
 80027ae:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80027b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80027b2:	fab2 f282 	clz	r2, r2
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	f042 0220 	orr.w	r2, r2, #32
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	f002 021f 	and.w	r2, r2, #31
 80027c2:	2101      	movs	r1, #1
 80027c4:	fa01 f202 	lsl.w	r2, r1, r2
 80027c8:	4013      	ands	r3, r2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d17b      	bne.n	80028c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e0f3      	b.n	80029ba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d13c      	bne.n	8002854 <HAL_RCC_ClockConfig+0x178>
 80027da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027de:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027e2:	fa93 f3a3 	rbit	r3, r3
 80027e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80027e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ea:	fab3 f383 	clz	r3, r3
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	095b      	lsrs	r3, r3, #5
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d102      	bne.n	8002804 <HAL_RCC_ClockConfig+0x128>
 80027fe:	4b4f      	ldr	r3, [pc, #316]	@ (800293c <HAL_RCC_ClockConfig+0x260>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	e00f      	b.n	8002824 <HAL_RCC_ClockConfig+0x148>
 8002804:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002808:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800280c:	fa93 f3a3 	rbit	r3, r3
 8002810:	647b      	str	r3, [r7, #68]	@ 0x44
 8002812:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002816:	643b      	str	r3, [r7, #64]	@ 0x40
 8002818:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800281a:	fa93 f3a3 	rbit	r3, r3
 800281e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002820:	4b46      	ldr	r3, [pc, #280]	@ (800293c <HAL_RCC_ClockConfig+0x260>)
 8002822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002824:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002828:	63ba      	str	r2, [r7, #56]	@ 0x38
 800282a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800282c:	fa92 f2a2 	rbit	r2, r2
 8002830:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002832:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002834:	fab2 f282 	clz	r2, r2
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	f042 0220 	orr.w	r2, r2, #32
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	f002 021f 	and.w	r2, r2, #31
 8002844:	2101      	movs	r1, #1
 8002846:	fa01 f202 	lsl.w	r2, r1, r2
 800284a:	4013      	ands	r3, r2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d13a      	bne.n	80028c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0b2      	b.n	80029ba <HAL_RCC_ClockConfig+0x2de>
 8002854:	2302      	movs	r3, #2
 8002856:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800285a:	fa93 f3a3 	rbit	r3, r3
 800285e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002862:	fab3 f383 	clz	r3, r3
 8002866:	b2db      	uxtb	r3, r3
 8002868:	095b      	lsrs	r3, r3, #5
 800286a:	b2db      	uxtb	r3, r3
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b01      	cmp	r3, #1
 8002874:	d102      	bne.n	800287c <HAL_RCC_ClockConfig+0x1a0>
 8002876:	4b31      	ldr	r3, [pc, #196]	@ (800293c <HAL_RCC_ClockConfig+0x260>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	e00d      	b.n	8002898 <HAL_RCC_ClockConfig+0x1bc>
 800287c:	2302      	movs	r3, #2
 800287e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002882:	fa93 f3a3 	rbit	r3, r3
 8002886:	627b      	str	r3, [r7, #36]	@ 0x24
 8002888:	2302      	movs	r3, #2
 800288a:	623b      	str	r3, [r7, #32]
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	fa93 f3a3 	rbit	r3, r3
 8002892:	61fb      	str	r3, [r7, #28]
 8002894:	4b29      	ldr	r3, [pc, #164]	@ (800293c <HAL_RCC_ClockConfig+0x260>)
 8002896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002898:	2202      	movs	r2, #2
 800289a:	61ba      	str	r2, [r7, #24]
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	fa92 f2a2 	rbit	r2, r2
 80028a2:	617a      	str	r2, [r7, #20]
  return result;
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	fab2 f282 	clz	r2, r2
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	f042 0220 	orr.w	r2, r2, #32
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	f002 021f 	and.w	r2, r2, #31
 80028b6:	2101      	movs	r1, #1
 80028b8:	fa01 f202 	lsl.w	r2, r1, r2
 80028bc:	4013      	ands	r3, r2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e079      	b.n	80029ba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028c6:	4b1d      	ldr	r3, [pc, #116]	@ (800293c <HAL_RCC_ClockConfig+0x260>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f023 0203 	bic.w	r2, r3, #3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	491a      	ldr	r1, [pc, #104]	@ (800293c <HAL_RCC_ClockConfig+0x260>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d8:	f7fe fb8c 	bl	8000ff4 <HAL_GetTick>
 80028dc:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028de:	e00a      	b.n	80028f6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e0:	f7fe fb88 	bl	8000ff4 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e061      	b.n	80029ba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f6:	4b11      	ldr	r3, [pc, #68]	@ (800293c <HAL_RCC_ClockConfig+0x260>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f003 020c 	and.w	r2, r3, #12
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	429a      	cmp	r2, r3
 8002906:	d1eb      	bne.n	80028e0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002908:	4b0b      	ldr	r3, [pc, #44]	@ (8002938 <HAL_RCC_ClockConfig+0x25c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d214      	bcs.n	8002940 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002916:	4b08      	ldr	r3, [pc, #32]	@ (8002938 <HAL_RCC_ClockConfig+0x25c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f023 0207 	bic.w	r2, r3, #7
 800291e:	4906      	ldr	r1, [pc, #24]	@ (8002938 <HAL_RCC_ClockConfig+0x25c>)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	4313      	orrs	r3, r2
 8002924:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002926:	4b04      	ldr	r3, [pc, #16]	@ (8002938 <HAL_RCC_ClockConfig+0x25c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d005      	beq.n	8002940 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e040      	b.n	80029ba <HAL_RCC_ClockConfig+0x2de>
 8002938:	40022000 	.word	0x40022000
 800293c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	d008      	beq.n	800295e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800294c:	4b1d      	ldr	r3, [pc, #116]	@ (80029c4 <HAL_RCC_ClockConfig+0x2e8>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	491a      	ldr	r1, [pc, #104]	@ (80029c4 <HAL_RCC_ClockConfig+0x2e8>)
 800295a:	4313      	orrs	r3, r2
 800295c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	2b00      	cmp	r3, #0
 8002968:	d009      	beq.n	800297e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800296a:	4b16      	ldr	r3, [pc, #88]	@ (80029c4 <HAL_RCC_ClockConfig+0x2e8>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	4912      	ldr	r1, [pc, #72]	@ (80029c4 <HAL_RCC_ClockConfig+0x2e8>)
 800297a:	4313      	orrs	r3, r2
 800297c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800297e:	f000 f829 	bl	80029d4 <HAL_RCC_GetSysClockFreq>
 8002982:	4601      	mov	r1, r0
 8002984:	4b0f      	ldr	r3, [pc, #60]	@ (80029c4 <HAL_RCC_ClockConfig+0x2e8>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800298c:	22f0      	movs	r2, #240	@ 0xf0
 800298e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	fa92 f2a2 	rbit	r2, r2
 8002996:	60fa      	str	r2, [r7, #12]
  return result;
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	fab2 f282 	clz	r2, r2
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	40d3      	lsrs	r3, r2
 80029a2:	4a09      	ldr	r2, [pc, #36]	@ (80029c8 <HAL_RCC_ClockConfig+0x2ec>)
 80029a4:	5cd3      	ldrb	r3, [r2, r3]
 80029a6:	fa21 f303 	lsr.w	r3, r1, r3
 80029aa:	4a08      	ldr	r2, [pc, #32]	@ (80029cc <HAL_RCC_ClockConfig+0x2f0>)
 80029ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80029ae:	4b08      	ldr	r3, [pc, #32]	@ (80029d0 <HAL_RCC_ClockConfig+0x2f4>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fe fada 	bl	8000f6c <HAL_InitTick>
  
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3778      	adds	r7, #120	@ 0x78
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40021000 	.word	0x40021000
 80029c8:	080052f8 	.word	0x080052f8
 80029cc:	20000004 	.word	0x20000004
 80029d0:	20000008 	.word	0x20000008

080029d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b08b      	sub	sp, #44	@ 0x2c
 80029d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029da:	2300      	movs	r3, #0
 80029dc:	61fb      	str	r3, [r7, #28]
 80029de:	2300      	movs	r3, #0
 80029e0:	61bb      	str	r3, [r7, #24]
 80029e2:	2300      	movs	r3, #0
 80029e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80029ee:	4b29      	ldr	r3, [pc, #164]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d002      	beq.n	8002a04 <HAL_RCC_GetSysClockFreq+0x30>
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d003      	beq.n	8002a0a <HAL_RCC_GetSysClockFreq+0x36>
 8002a02:	e03c      	b.n	8002a7e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a04:	4b24      	ldr	r3, [pc, #144]	@ (8002a98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a06:	623b      	str	r3, [r7, #32]
      break;
 8002a08:	e03c      	b.n	8002a84 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002a10:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002a14:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	fa92 f2a2 	rbit	r2, r2
 8002a1c:	607a      	str	r2, [r7, #4]
  return result;
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	fab2 f282 	clz	r2, r2
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	40d3      	lsrs	r3, r2
 8002a28:	4a1c      	ldr	r2, [pc, #112]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a2a:	5cd3      	ldrb	r3, [r2, r3]
 8002a2c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002a2e:	4b19      	ldr	r3, [pc, #100]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	220f      	movs	r2, #15
 8002a38:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	fa92 f2a2 	rbit	r2, r2
 8002a40:	60fa      	str	r2, [r7, #12]
  return result;
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	fab2 f282 	clz	r2, r2
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	40d3      	lsrs	r3, r2
 8002a4c:	4a14      	ldr	r2, [pc, #80]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a4e:	5cd3      	ldrb	r3, [r2, r3]
 8002a50:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d008      	beq.n	8002a6e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a5c:	4a0e      	ldr	r2, [pc, #56]	@ (8002a98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	fb02 f303 	mul.w	r3, r2, r3
 8002a6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a6c:	e004      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	4a0c      	ldr	r2, [pc, #48]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a72:	fb02 f303 	mul.w	r3, r2, r3
 8002a76:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7a:	623b      	str	r3, [r7, #32]
      break;
 8002a7c:	e002      	b.n	8002a84 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a7e:	4b06      	ldr	r3, [pc, #24]	@ (8002a98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a80:	623b      	str	r3, [r7, #32]
      break;
 8002a82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a84:	6a3b      	ldr	r3, [r7, #32]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	372c      	adds	r7, #44	@ 0x2c
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40021000 	.word	0x40021000
 8002a98:	007a1200 	.word	0x007a1200
 8002a9c:	08005310 	.word	0x08005310
 8002aa0:	08005320 	.word	0x08005320
 8002aa4:	003d0900 	.word	0x003d0900

08002aa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aac:	4b03      	ldr	r3, [pc, #12]	@ (8002abc <HAL_RCC_GetHCLKFreq+0x14>)
 8002aae:	681b      	ldr	r3, [r3, #0]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	20000004 	.word	0x20000004

08002ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002ac6:	f7ff ffef 	bl	8002aa8 <HAL_RCC_GetHCLKFreq>
 8002aca:	4601      	mov	r1, r0
 8002acc:	4b0b      	ldr	r3, [pc, #44]	@ (8002afc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ad4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002ad8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	fa92 f2a2 	rbit	r2, r2
 8002ae0:	603a      	str	r2, [r7, #0]
  return result;
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	fab2 f282 	clz	r2, r2
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	40d3      	lsrs	r3, r2
 8002aec:	4a04      	ldr	r2, [pc, #16]	@ (8002b00 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002aee:	5cd3      	ldrb	r3, [r2, r3]
 8002af0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002af4:	4618      	mov	r0, r3
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40021000 	.word	0x40021000
 8002b00:	08005308 	.word	0x08005308

08002b04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b0a:	f7ff ffcd 	bl	8002aa8 <HAL_RCC_GetHCLKFreq>
 8002b0e:	4601      	mov	r1, r0
 8002b10:	4b0b      	ldr	r3, [pc, #44]	@ (8002b40 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002b18:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002b1c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	fa92 f2a2 	rbit	r2, r2
 8002b24:	603a      	str	r2, [r7, #0]
  return result;
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	fab2 f282 	clz	r2, r2
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	40d3      	lsrs	r3, r2
 8002b30:	4a04      	ldr	r2, [pc, #16]	@ (8002b44 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002b32:	5cd3      	ldrb	r3, [r2, r3]
 8002b34:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40021000 	.word	0x40021000
 8002b44:	08005308 	.word	0x08005308

08002b48 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b092      	sub	sp, #72	@ 0x48
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 80d4 	beq.w	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b6c:	4b4e      	ldr	r3, [pc, #312]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10e      	bne.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b78:	4b4b      	ldr	r3, [pc, #300]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	4a4a      	ldr	r2, [pc, #296]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b82:	61d3      	str	r3, [r2, #28]
 8002b84:	4b48      	ldr	r3, [pc, #288]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b90:	2301      	movs	r3, #1
 8002b92:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b96:	4b45      	ldr	r3, [pc, #276]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d118      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ba2:	4b42      	ldr	r3, [pc, #264]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a41      	ldr	r2, [pc, #260]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ba8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bae:	f7fe fa21 	bl	8000ff4 <HAL_GetTick>
 8002bb2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb6:	f7fe fa1d 	bl	8000ff4 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b64      	cmp	r3, #100	@ 0x64
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e14b      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc8:	4b38      	ldr	r3, [pc, #224]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bd4:	4b34      	ldr	r3, [pc, #208]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 8084 	beq.w	8002cee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d07c      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bf4:	4b2c      	ldr	r3, [pc, #176]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bfe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c02:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c06:	fa93 f3a3 	rbit	r3, r3
 8002c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c0e:	fab3 f383 	clz	r3, r3
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	461a      	mov	r2, r3
 8002c16:	4b26      	ldr	r3, [pc, #152]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	2301      	movs	r3, #1
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c26:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c2a:	fa93 f3a3 	rbit	r3, r3
 8002c2e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	461a      	mov	r2, r3
 8002c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c3c:	4413      	add	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	461a      	mov	r2, r3
 8002c42:	2300      	movs	r3, #0
 8002c44:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c46:	4a18      	ldr	r2, [pc, #96]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c4a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d04b      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c56:	f7fe f9cd 	bl	8000ff4 <HAL_GetTick>
 8002c5a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5c:	e00a      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c5e:	f7fe f9c9 	bl	8000ff4 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e0f5      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002c74:	2302      	movs	r3, #2
 8002c76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c7a:	fa93 f3a3 	rbit	r3, r3
 8002c7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c80:	2302      	movs	r3, #2
 8002c82:	623b      	str	r3, [r7, #32]
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	fa93 f3a3 	rbit	r3, r3
 8002c8a:	61fb      	str	r3, [r7, #28]
  return result;
 8002c8c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8e:	fab3 f383 	clz	r3, r3
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	095b      	lsrs	r3, r3, #5
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	f043 0302 	orr.w	r3, r3, #2
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d108      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002ca2:	4b01      	ldr	r3, [pc, #4]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	e00d      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	40007000 	.word	0x40007000
 8002cb0:	10908100 	.word	0x10908100
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	fa93 f3a3 	rbit	r3, r3
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	4b69      	ldr	r3, [pc, #420]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	613a      	str	r2, [r7, #16]
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	fa92 f2a2 	rbit	r2, r2
 8002cce:	60fa      	str	r2, [r7, #12]
  return result;
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	fab2 f282 	clz	r2, r2
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	f002 021f 	and.w	r2, r2, #31
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0b7      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002cee:	4b5e      	ldr	r3, [pc, #376]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	495b      	ldr	r1, [pc, #364]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d00:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d105      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d08:	4b57      	ldr	r3, [pc, #348]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	4a56      	ldr	r2, [pc, #344]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d12:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d008      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d20:	4b51      	ldr	r3, [pc, #324]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d24:	f023 0203 	bic.w	r2, r3, #3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	494e      	ldr	r1, [pc, #312]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0320 	and.w	r3, r3, #32
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d008      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d3e:	4b4a      	ldr	r3, [pc, #296]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d42:	f023 0210 	bic.w	r2, r3, #16
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	4947      	ldr	r1, [pc, #284]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d008      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002d5c:	4b42      	ldr	r3, [pc, #264]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d68:	493f      	ldr	r1, [pc, #252]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d008      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d7a:	4b3b      	ldr	r3, [pc, #236]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7e:	f023 0220 	bic.w	r2, r3, #32
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	4938      	ldr	r1, [pc, #224]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d008      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d98:	4b33      	ldr	r3, [pc, #204]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	4930      	ldr	r1, [pc, #192]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d008      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002db6:	4b2c      	ldr	r3, [pc, #176]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	4929      	ldr	r1, [pc, #164]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d008      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002dd4:	4b24      	ldr	r3, [pc, #144]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd8:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	4921      	ldr	r1, [pc, #132]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d008      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002df2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	491a      	ldr	r1, [pc, #104]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d008      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002e10:	4b15      	ldr	r3, [pc, #84]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e14:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1c:	4912      	ldr	r1, [pc, #72]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d008      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e32:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e3a:	490b      	ldr	r1, [pc, #44]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002e4c:	4b06      	ldr	r3, [pc, #24]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e50:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e58:	4903      	ldr	r1, [pc, #12]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3748      	adds	r7, #72	@ 0x48
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40021000 	.word	0x40021000

08002e6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e049      	b.n	8002f12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fd fe42 	bl	8000b1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4610      	mov	r0, r2
 8002eac:	f000 fb9e 	bl	80035ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d001      	beq.n	8002f34 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e033      	b.n	8002f9c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a19      	ldr	r2, [pc, #100]	@ (8002fa8 <HAL_TIM_Base_Start+0x8c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d009      	beq.n	8002f5a <HAL_TIM_Base_Start+0x3e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f4e:	d004      	beq.n	8002f5a <HAL_TIM_Base_Start+0x3e>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a15      	ldr	r2, [pc, #84]	@ (8002fac <HAL_TIM_Base_Start+0x90>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d115      	bne.n	8002f86 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	4b13      	ldr	r3, [pc, #76]	@ (8002fb0 <HAL_TIM_Base_Start+0x94>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2b06      	cmp	r3, #6
 8002f6a:	d015      	beq.n	8002f98 <HAL_TIM_Base_Start+0x7c>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f72:	d011      	beq.n	8002f98 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f84:	e008      	b.n	8002f98 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 0201 	orr.w	r2, r2, #1
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	e000      	b.n	8002f9a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	40012c00 	.word	0x40012c00
 8002fac:	40014000 	.word	0x40014000
 8002fb0:	00010007 	.word	0x00010007

08002fb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e049      	b.n	800305a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d106      	bne.n	8002fe0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7fd fdd2 	bl	8000b84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3304      	adds	r3, #4
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4610      	mov	r0, r2
 8002ff4:	f000 fafa 	bl	80035ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
	...

08003064 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d109      	bne.n	8003088 <HAL_TIM_PWM_Start+0x24>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b01      	cmp	r3, #1
 800307e:	bf14      	ite	ne
 8003080:	2301      	movne	r3, #1
 8003082:	2300      	moveq	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	e03c      	b.n	8003102 <HAL_TIM_PWM_Start+0x9e>
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	2b04      	cmp	r3, #4
 800308c:	d109      	bne.n	80030a2 <HAL_TIM_PWM_Start+0x3e>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b01      	cmp	r3, #1
 8003098:	bf14      	ite	ne
 800309a:	2301      	movne	r3, #1
 800309c:	2300      	moveq	r3, #0
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	e02f      	b.n	8003102 <HAL_TIM_PWM_Start+0x9e>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d109      	bne.n	80030bc <HAL_TIM_PWM_Start+0x58>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	bf14      	ite	ne
 80030b4:	2301      	movne	r3, #1
 80030b6:	2300      	moveq	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	e022      	b.n	8003102 <HAL_TIM_PWM_Start+0x9e>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	2b0c      	cmp	r3, #12
 80030c0:	d109      	bne.n	80030d6 <HAL_TIM_PWM_Start+0x72>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	bf14      	ite	ne
 80030ce:	2301      	movne	r3, #1
 80030d0:	2300      	moveq	r3, #0
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	e015      	b.n	8003102 <HAL_TIM_PWM_Start+0x9e>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2b10      	cmp	r3, #16
 80030da:	d109      	bne.n	80030f0 <HAL_TIM_PWM_Start+0x8c>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	bf14      	ite	ne
 80030e8:	2301      	movne	r3, #1
 80030ea:	2300      	moveq	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	e008      	b.n	8003102 <HAL_TIM_PWM_Start+0x9e>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	bf14      	ite	ne
 80030fc:	2301      	movne	r3, #1
 80030fe:	2300      	moveq	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e083      	b.n	8003212 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d104      	bne.n	800311a <HAL_TIM_PWM_Start+0xb6>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003118:	e023      	b.n	8003162 <HAL_TIM_PWM_Start+0xfe>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b04      	cmp	r3, #4
 800311e:	d104      	bne.n	800312a <HAL_TIM_PWM_Start+0xc6>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003128:	e01b      	b.n	8003162 <HAL_TIM_PWM_Start+0xfe>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2b08      	cmp	r3, #8
 800312e:	d104      	bne.n	800313a <HAL_TIM_PWM_Start+0xd6>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003138:	e013      	b.n	8003162 <HAL_TIM_PWM_Start+0xfe>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b0c      	cmp	r3, #12
 800313e:	d104      	bne.n	800314a <HAL_TIM_PWM_Start+0xe6>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2202      	movs	r2, #2
 8003144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003148:	e00b      	b.n	8003162 <HAL_TIM_PWM_Start+0xfe>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b10      	cmp	r3, #16
 800314e:	d104      	bne.n	800315a <HAL_TIM_PWM_Start+0xf6>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003158:	e003      	b.n	8003162 <HAL_TIM_PWM_Start+0xfe>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2202      	movs	r2, #2
 800315e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2201      	movs	r2, #1
 8003168:	6839      	ldr	r1, [r7, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f000 fdec 	bl	8003d48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a29      	ldr	r2, [pc, #164]	@ (800321c <HAL_TIM_PWM_Start+0x1b8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d00e      	beq.n	8003198 <HAL_TIM_PWM_Start+0x134>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a28      	ldr	r2, [pc, #160]	@ (8003220 <HAL_TIM_PWM_Start+0x1bc>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d009      	beq.n	8003198 <HAL_TIM_PWM_Start+0x134>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a26      	ldr	r2, [pc, #152]	@ (8003224 <HAL_TIM_PWM_Start+0x1c0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d004      	beq.n	8003198 <HAL_TIM_PWM_Start+0x134>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a25      	ldr	r2, [pc, #148]	@ (8003228 <HAL_TIM_PWM_Start+0x1c4>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d101      	bne.n	800319c <HAL_TIM_PWM_Start+0x138>
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <HAL_TIM_PWM_Start+0x13a>
 800319c:	2300      	movs	r3, #0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d007      	beq.n	80031b2 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a19      	ldr	r2, [pc, #100]	@ (800321c <HAL_TIM_PWM_Start+0x1b8>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d009      	beq.n	80031d0 <HAL_TIM_PWM_Start+0x16c>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031c4:	d004      	beq.n	80031d0 <HAL_TIM_PWM_Start+0x16c>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a15      	ldr	r2, [pc, #84]	@ (8003220 <HAL_TIM_PWM_Start+0x1bc>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d115      	bne.n	80031fc <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	4b15      	ldr	r3, [pc, #84]	@ (800322c <HAL_TIM_PWM_Start+0x1c8>)
 80031d8:	4013      	ands	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2b06      	cmp	r3, #6
 80031e0:	d015      	beq.n	800320e <HAL_TIM_PWM_Start+0x1aa>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031e8:	d011      	beq.n	800320e <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f042 0201 	orr.w	r2, r2, #1
 80031f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031fa:	e008      	b.n	800320e <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0201 	orr.w	r2, r2, #1
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	e000      	b.n	8003210 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800320e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	40012c00 	.word	0x40012c00
 8003220:	40014000 	.word	0x40014000
 8003224:	40014400 	.word	0x40014400
 8003228:	40014800 	.word	0x40014800
 800322c:	00010007 	.word	0x00010007

08003230 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800323c:	2300      	movs	r3, #0
 800323e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003246:	2b01      	cmp	r3, #1
 8003248:	d101      	bne.n	800324e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800324a:	2302      	movs	r3, #2
 800324c:	e0ff      	b.n	800344e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b14      	cmp	r3, #20
 800325a:	f200 80f0 	bhi.w	800343e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800325e:	a201      	add	r2, pc, #4	@ (adr r2, 8003264 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003264:	080032b9 	.word	0x080032b9
 8003268:	0800343f 	.word	0x0800343f
 800326c:	0800343f 	.word	0x0800343f
 8003270:	0800343f 	.word	0x0800343f
 8003274:	080032f9 	.word	0x080032f9
 8003278:	0800343f 	.word	0x0800343f
 800327c:	0800343f 	.word	0x0800343f
 8003280:	0800343f 	.word	0x0800343f
 8003284:	0800333b 	.word	0x0800333b
 8003288:	0800343f 	.word	0x0800343f
 800328c:	0800343f 	.word	0x0800343f
 8003290:	0800343f 	.word	0x0800343f
 8003294:	0800337b 	.word	0x0800337b
 8003298:	0800343f 	.word	0x0800343f
 800329c:	0800343f 	.word	0x0800343f
 80032a0:	0800343f 	.word	0x0800343f
 80032a4:	080033bd 	.word	0x080033bd
 80032a8:	0800343f 	.word	0x0800343f
 80032ac:	0800343f 	.word	0x0800343f
 80032b0:	0800343f 	.word	0x0800343f
 80032b4:	080033fd 	.word	0x080033fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68b9      	ldr	r1, [r7, #8]
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fa02 	bl	80036c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699a      	ldr	r2, [r3, #24]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0208 	orr.w	r2, r2, #8
 80032d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699a      	ldr	r2, [r3, #24]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0204 	bic.w	r2, r2, #4
 80032e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6999      	ldr	r1, [r3, #24]
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	691a      	ldr	r2, [r3, #16]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	619a      	str	r2, [r3, #24]
      break;
 80032f6:	e0a5      	b.n	8003444 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68b9      	ldr	r1, [r7, #8]
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 fa68 	bl	80037d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699a      	ldr	r2, [r3, #24]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003312:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699a      	ldr	r2, [r3, #24]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003322:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6999      	ldr	r1, [r3, #24]
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	021a      	lsls	r2, r3, #8
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	619a      	str	r2, [r3, #24]
      break;
 8003338:	e084      	b.n	8003444 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68b9      	ldr	r1, [r7, #8]
 8003340:	4618      	mov	r0, r3
 8003342:	f000 fac7 	bl	80038d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	69da      	ldr	r2, [r3, #28]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f042 0208 	orr.w	r2, r2, #8
 8003354:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	69da      	ldr	r2, [r3, #28]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 0204 	bic.w	r2, r2, #4
 8003364:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	69d9      	ldr	r1, [r3, #28]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	61da      	str	r2, [r3, #28]
      break;
 8003378:	e064      	b.n	8003444 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68b9      	ldr	r1, [r7, #8]
 8003380:	4618      	mov	r0, r3
 8003382:	f000 fb25 	bl	80039d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69da      	ldr	r2, [r3, #28]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003394:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	69da      	ldr	r2, [r3, #28]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	69d9      	ldr	r1, [r3, #28]
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	021a      	lsls	r2, r3, #8
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	61da      	str	r2, [r3, #28]
      break;
 80033ba:	e043      	b.n	8003444 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68b9      	ldr	r1, [r7, #8]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 fb68 	bl	8003a98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0208 	orr.w	r2, r2, #8
 80033d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0204 	bic.w	r2, r2, #4
 80033e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	691a      	ldr	r2, [r3, #16]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80033fa:	e023      	b.n	8003444 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68b9      	ldr	r1, [r7, #8]
 8003402:	4618      	mov	r0, r3
 8003404:	f000 fba6 	bl	8003b54 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003416:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003426:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	021a      	lsls	r2, r3, #8
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800343c:	e002      	b.n	8003444 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	75fb      	strb	r3, [r7, #23]
      break;
 8003442:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800344c:	7dfb      	ldrb	r3, [r7, #23]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop

08003458 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003462:	2300      	movs	r3, #0
 8003464:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_TIM_ConfigClockSource+0x1c>
 8003470:	2302      	movs	r3, #2
 8003472:	e0b6      	b.n	80035e2 <HAL_TIM_ConfigClockSource+0x18a>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003492:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003496:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800349e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034b0:	d03e      	beq.n	8003530 <HAL_TIM_ConfigClockSource+0xd8>
 80034b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034b6:	f200 8087 	bhi.w	80035c8 <HAL_TIM_ConfigClockSource+0x170>
 80034ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034be:	f000 8086 	beq.w	80035ce <HAL_TIM_ConfigClockSource+0x176>
 80034c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034c6:	d87f      	bhi.n	80035c8 <HAL_TIM_ConfigClockSource+0x170>
 80034c8:	2b70      	cmp	r3, #112	@ 0x70
 80034ca:	d01a      	beq.n	8003502 <HAL_TIM_ConfigClockSource+0xaa>
 80034cc:	2b70      	cmp	r3, #112	@ 0x70
 80034ce:	d87b      	bhi.n	80035c8 <HAL_TIM_ConfigClockSource+0x170>
 80034d0:	2b60      	cmp	r3, #96	@ 0x60
 80034d2:	d050      	beq.n	8003576 <HAL_TIM_ConfigClockSource+0x11e>
 80034d4:	2b60      	cmp	r3, #96	@ 0x60
 80034d6:	d877      	bhi.n	80035c8 <HAL_TIM_ConfigClockSource+0x170>
 80034d8:	2b50      	cmp	r3, #80	@ 0x50
 80034da:	d03c      	beq.n	8003556 <HAL_TIM_ConfigClockSource+0xfe>
 80034dc:	2b50      	cmp	r3, #80	@ 0x50
 80034de:	d873      	bhi.n	80035c8 <HAL_TIM_ConfigClockSource+0x170>
 80034e0:	2b40      	cmp	r3, #64	@ 0x40
 80034e2:	d058      	beq.n	8003596 <HAL_TIM_ConfigClockSource+0x13e>
 80034e4:	2b40      	cmp	r3, #64	@ 0x40
 80034e6:	d86f      	bhi.n	80035c8 <HAL_TIM_ConfigClockSource+0x170>
 80034e8:	2b30      	cmp	r3, #48	@ 0x30
 80034ea:	d064      	beq.n	80035b6 <HAL_TIM_ConfigClockSource+0x15e>
 80034ec:	2b30      	cmp	r3, #48	@ 0x30
 80034ee:	d86b      	bhi.n	80035c8 <HAL_TIM_ConfigClockSource+0x170>
 80034f0:	2b20      	cmp	r3, #32
 80034f2:	d060      	beq.n	80035b6 <HAL_TIM_ConfigClockSource+0x15e>
 80034f4:	2b20      	cmp	r3, #32
 80034f6:	d867      	bhi.n	80035c8 <HAL_TIM_ConfigClockSource+0x170>
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d05c      	beq.n	80035b6 <HAL_TIM_ConfigClockSource+0x15e>
 80034fc:	2b10      	cmp	r3, #16
 80034fe:	d05a      	beq.n	80035b6 <HAL_TIM_ConfigClockSource+0x15e>
 8003500:	e062      	b.n	80035c8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003512:	f000 fbf9 	bl	8003d08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003524:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	609a      	str	r2, [r3, #8]
      break;
 800352e:	e04f      	b.n	80035d0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003540:	f000 fbe2 	bl	8003d08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003552:	609a      	str	r2, [r3, #8]
      break;
 8003554:	e03c      	b.n	80035d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003562:	461a      	mov	r2, r3
 8003564:	f000 fb56 	bl	8003c14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2150      	movs	r1, #80	@ 0x50
 800356e:	4618      	mov	r0, r3
 8003570:	f000 fbaf 	bl	8003cd2 <TIM_ITRx_SetConfig>
      break;
 8003574:	e02c      	b.n	80035d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003582:	461a      	mov	r2, r3
 8003584:	f000 fb75 	bl	8003c72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2160      	movs	r1, #96	@ 0x60
 800358e:	4618      	mov	r0, r3
 8003590:	f000 fb9f 	bl	8003cd2 <TIM_ITRx_SetConfig>
      break;
 8003594:	e01c      	b.n	80035d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035a2:	461a      	mov	r2, r3
 80035a4:	f000 fb36 	bl	8003c14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2140      	movs	r1, #64	@ 0x40
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 fb8f 	bl	8003cd2 <TIM_ITRx_SetConfig>
      break;
 80035b4:	e00c      	b.n	80035d0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4619      	mov	r1, r3
 80035c0:	4610      	mov	r0, r2
 80035c2:	f000 fb86 	bl	8003cd2 <TIM_ITRx_SetConfig>
      break;
 80035c6:	e003      	b.n	80035d0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	73fb      	strb	r3, [r7, #15]
      break;
 80035cc:	e000      	b.n	80035d0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80035ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
	...

080035ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a2e      	ldr	r2, [pc, #184]	@ (80036b8 <TIM_Base_SetConfig+0xcc>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d003      	beq.n	800360c <TIM_Base_SetConfig+0x20>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800360a:	d108      	bne.n	800361e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	4313      	orrs	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a25      	ldr	r2, [pc, #148]	@ (80036b8 <TIM_Base_SetConfig+0xcc>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00f      	beq.n	8003646 <TIM_Base_SetConfig+0x5a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800362c:	d00b      	beq.n	8003646 <TIM_Base_SetConfig+0x5a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a22      	ldr	r2, [pc, #136]	@ (80036bc <TIM_Base_SetConfig+0xd0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d007      	beq.n	8003646 <TIM_Base_SetConfig+0x5a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a21      	ldr	r2, [pc, #132]	@ (80036c0 <TIM_Base_SetConfig+0xd4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d003      	beq.n	8003646 <TIM_Base_SetConfig+0x5a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a20      	ldr	r2, [pc, #128]	@ (80036c4 <TIM_Base_SetConfig+0xd8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d108      	bne.n	8003658 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800364c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	4313      	orrs	r3, r2
 8003656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	4313      	orrs	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a0e      	ldr	r2, [pc, #56]	@ (80036b8 <TIM_Base_SetConfig+0xcc>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d00b      	beq.n	800369c <TIM_Base_SetConfig+0xb0>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a0d      	ldr	r2, [pc, #52]	@ (80036bc <TIM_Base_SetConfig+0xd0>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d007      	beq.n	800369c <TIM_Base_SetConfig+0xb0>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a0c      	ldr	r2, [pc, #48]	@ (80036c0 <TIM_Base_SetConfig+0xd4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d003      	beq.n	800369c <TIM_Base_SetConfig+0xb0>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a0b      	ldr	r2, [pc, #44]	@ (80036c4 <TIM_Base_SetConfig+0xd8>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d103      	bne.n	80036a4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	691a      	ldr	r2, [r3, #16]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	615a      	str	r2, [r3, #20]
}
 80036aa:	bf00      	nop
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40012c00 	.word	0x40012c00
 80036bc:	40014000 	.word	0x40014000
 80036c0:	40014400 	.word	0x40014400
 80036c4:	40014800 	.word	0x40014800

080036c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	f023 0201 	bic.w	r2, r3, #1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0303 	bic.w	r3, r3, #3
 8003702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4313      	orrs	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f023 0302 	bic.w	r3, r3, #2
 8003714:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	4313      	orrs	r3, r2
 800371e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a28      	ldr	r2, [pc, #160]	@ (80037c4 <TIM_OC1_SetConfig+0xfc>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d00b      	beq.n	8003740 <TIM_OC1_SetConfig+0x78>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a27      	ldr	r2, [pc, #156]	@ (80037c8 <TIM_OC1_SetConfig+0x100>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d007      	beq.n	8003740 <TIM_OC1_SetConfig+0x78>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a26      	ldr	r2, [pc, #152]	@ (80037cc <TIM_OC1_SetConfig+0x104>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d003      	beq.n	8003740 <TIM_OC1_SetConfig+0x78>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a25      	ldr	r2, [pc, #148]	@ (80037d0 <TIM_OC1_SetConfig+0x108>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d10c      	bne.n	800375a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f023 0308 	bic.w	r3, r3, #8
 8003746:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	4313      	orrs	r3, r2
 8003750:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f023 0304 	bic.w	r3, r3, #4
 8003758:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a19      	ldr	r2, [pc, #100]	@ (80037c4 <TIM_OC1_SetConfig+0xfc>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d00b      	beq.n	800377a <TIM_OC1_SetConfig+0xb2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a18      	ldr	r2, [pc, #96]	@ (80037c8 <TIM_OC1_SetConfig+0x100>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d007      	beq.n	800377a <TIM_OC1_SetConfig+0xb2>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a17      	ldr	r2, [pc, #92]	@ (80037cc <TIM_OC1_SetConfig+0x104>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d003      	beq.n	800377a <TIM_OC1_SetConfig+0xb2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a16      	ldr	r2, [pc, #88]	@ (80037d0 <TIM_OC1_SetConfig+0x108>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d111      	bne.n	800379e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	621a      	str	r2, [r3, #32]
}
 80037b8:	bf00      	nop
 80037ba:	371c      	adds	r7, #28
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	40012c00 	.word	0x40012c00
 80037c8:	40014000 	.word	0x40014000
 80037cc:	40014400 	.word	0x40014400
 80037d0:	40014800 	.word	0x40014800

080037d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	f023 0210 	bic.w	r2, r3, #16
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003802:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800380e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	021b      	lsls	r3, r3, #8
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	4313      	orrs	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f023 0320 	bic.w	r3, r3, #32
 8003822:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	4313      	orrs	r3, r2
 800382e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a24      	ldr	r2, [pc, #144]	@ (80038c4 <TIM_OC2_SetConfig+0xf0>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d10d      	bne.n	8003854 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800383e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	4313      	orrs	r3, r2
 800384a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003852:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a1b      	ldr	r2, [pc, #108]	@ (80038c4 <TIM_OC2_SetConfig+0xf0>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d00b      	beq.n	8003874 <TIM_OC2_SetConfig+0xa0>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a1a      	ldr	r2, [pc, #104]	@ (80038c8 <TIM_OC2_SetConfig+0xf4>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d007      	beq.n	8003874 <TIM_OC2_SetConfig+0xa0>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a19      	ldr	r2, [pc, #100]	@ (80038cc <TIM_OC2_SetConfig+0xf8>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d003      	beq.n	8003874 <TIM_OC2_SetConfig+0xa0>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a18      	ldr	r2, [pc, #96]	@ (80038d0 <TIM_OC2_SetConfig+0xfc>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d113      	bne.n	800389c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800387a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003882:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	621a      	str	r2, [r3, #32]
}
 80038b6:	bf00      	nop
 80038b8:	371c      	adds	r7, #28
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40012c00 	.word	0x40012c00
 80038c8:	40014000 	.word	0x40014000
 80038cc:	40014400 	.word	0x40014400
 80038d0:	40014800 	.word	0x40014800

080038d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b087      	sub	sp, #28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0303 	bic.w	r3, r3, #3
 800390e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	4313      	orrs	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	021b      	lsls	r3, r3, #8
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	4313      	orrs	r3, r2
 800392c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a23      	ldr	r2, [pc, #140]	@ (80039c0 <TIM_OC3_SetConfig+0xec>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d10d      	bne.n	8003952 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800393c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	021b      	lsls	r3, r3, #8
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	4313      	orrs	r3, r2
 8003948:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003950:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a1a      	ldr	r2, [pc, #104]	@ (80039c0 <TIM_OC3_SetConfig+0xec>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d00b      	beq.n	8003972 <TIM_OC3_SetConfig+0x9e>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a19      	ldr	r2, [pc, #100]	@ (80039c4 <TIM_OC3_SetConfig+0xf0>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d007      	beq.n	8003972 <TIM_OC3_SetConfig+0x9e>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a18      	ldr	r2, [pc, #96]	@ (80039c8 <TIM_OC3_SetConfig+0xf4>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d003      	beq.n	8003972 <TIM_OC3_SetConfig+0x9e>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a17      	ldr	r2, [pc, #92]	@ (80039cc <TIM_OC3_SetConfig+0xf8>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d113      	bne.n	800399a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	621a      	str	r2, [r3, #32]
}
 80039b4:	bf00      	nop
 80039b6:	371c      	adds	r7, #28
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	40012c00 	.word	0x40012c00
 80039c4:	40014000 	.word	0x40014000
 80039c8:	40014400 	.word	0x40014400
 80039cc:	40014800 	.word	0x40014800

080039d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b087      	sub	sp, #28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	021b      	lsls	r3, r3, #8
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	031b      	lsls	r3, r3, #12
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a16      	ldr	r2, [pc, #88]	@ (8003a88 <TIM_OC4_SetConfig+0xb8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00b      	beq.n	8003a4c <TIM_OC4_SetConfig+0x7c>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a15      	ldr	r2, [pc, #84]	@ (8003a8c <TIM_OC4_SetConfig+0xbc>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d007      	beq.n	8003a4c <TIM_OC4_SetConfig+0x7c>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a14      	ldr	r2, [pc, #80]	@ (8003a90 <TIM_OC4_SetConfig+0xc0>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d003      	beq.n	8003a4c <TIM_OC4_SetConfig+0x7c>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a13      	ldr	r2, [pc, #76]	@ (8003a94 <TIM_OC4_SetConfig+0xc4>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d109      	bne.n	8003a60 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	019b      	lsls	r3, r3, #6
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	621a      	str	r2, [r3, #32]
}
 8003a7a:	bf00      	nop
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40012c00 	.word	0x40012c00
 8003a8c:	40014000 	.word	0x40014000
 8003a90:	40014400 	.word	0x40014400
 8003a94:	40014800 	.word	0x40014800

08003a98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003adc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	041b      	lsls	r3, r3, #16
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a15      	ldr	r2, [pc, #84]	@ (8003b44 <TIM_OC5_SetConfig+0xac>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d00b      	beq.n	8003b0a <TIM_OC5_SetConfig+0x72>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a14      	ldr	r2, [pc, #80]	@ (8003b48 <TIM_OC5_SetConfig+0xb0>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d007      	beq.n	8003b0a <TIM_OC5_SetConfig+0x72>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a13      	ldr	r2, [pc, #76]	@ (8003b4c <TIM_OC5_SetConfig+0xb4>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d003      	beq.n	8003b0a <TIM_OC5_SetConfig+0x72>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a12      	ldr	r2, [pc, #72]	@ (8003b50 <TIM_OC5_SetConfig+0xb8>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d109      	bne.n	8003b1e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	021b      	lsls	r3, r3, #8
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	621a      	str	r2, [r3, #32]
}
 8003b38:	bf00      	nop
 8003b3a:	371c      	adds	r7, #28
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	40012c00 	.word	0x40012c00
 8003b48:	40014000 	.word	0x40014000
 8003b4c:	40014400 	.word	0x40014400
 8003b50:	40014800 	.word	0x40014800

08003b54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b087      	sub	sp, #28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	021b      	lsls	r3, r3, #8
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003b9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	051b      	lsls	r3, r3, #20
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a16      	ldr	r2, [pc, #88]	@ (8003c04 <TIM_OC6_SetConfig+0xb0>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d00b      	beq.n	8003bc8 <TIM_OC6_SetConfig+0x74>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a15      	ldr	r2, [pc, #84]	@ (8003c08 <TIM_OC6_SetConfig+0xb4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d007      	beq.n	8003bc8 <TIM_OC6_SetConfig+0x74>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a14      	ldr	r2, [pc, #80]	@ (8003c0c <TIM_OC6_SetConfig+0xb8>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d003      	beq.n	8003bc8 <TIM_OC6_SetConfig+0x74>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a13      	ldr	r2, [pc, #76]	@ (8003c10 <TIM_OC6_SetConfig+0xbc>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d109      	bne.n	8003bdc <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	029b      	lsls	r3, r3, #10
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	621a      	str	r2, [r3, #32]
}
 8003bf6:	bf00      	nop
 8003bf8:	371c      	adds	r7, #28
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40012c00 	.word	0x40012c00
 8003c08:	40014000 	.word	0x40014000
 8003c0c:	40014400 	.word	0x40014400
 8003c10:	40014800 	.word	0x40014800

08003c14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b087      	sub	sp, #28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	f023 0201 	bic.w	r2, r3, #1
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	011b      	lsls	r3, r3, #4
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f023 030a 	bic.w	r3, r3, #10
 8003c50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	621a      	str	r2, [r3, #32]
}
 8003c66:	bf00      	nop
 8003c68:	371c      	adds	r7, #28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b087      	sub	sp, #28
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	f023 0210 	bic.w	r2, r3, #16
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	031b      	lsls	r3, r3, #12
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003cae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	621a      	str	r2, [r3, #32]
}
 8003cc6:	bf00      	nop
 8003cc8:	371c      	adds	r7, #28
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b085      	sub	sp, #20
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
 8003cda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ce8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f043 0307 	orr.w	r3, r3, #7
 8003cf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	609a      	str	r2, [r3, #8]
}
 8003cfc:	bf00      	nop
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b087      	sub	sp, #28
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
 8003d14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	021a      	lsls	r2, r3, #8
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	609a      	str	r2, [r3, #8]
}
 8003d3c:	bf00      	nop
 8003d3e:	371c      	adds	r7, #28
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	f003 031f 	and.w	r3, r3, #31
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6a1a      	ldr	r2, [r3, #32]
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	401a      	ands	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a1a      	ldr	r2, [r3, #32]
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	f003 031f 	and.w	r3, r3, #31
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d80:	431a      	orrs	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	621a      	str	r2, [r3, #32]
}
 8003d86:	bf00      	nop
 8003d88:	371c      	adds	r7, #28
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
	...

08003d94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d101      	bne.n	8003dac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003da8:	2302      	movs	r3, #2
 8003daa:	e04f      	b.n	8003e4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a21      	ldr	r2, [pc, #132]	@ (8003e58 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d108      	bne.n	8003de8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003ddc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a14      	ldr	r2, [pc, #80]	@ (8003e58 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d009      	beq.n	8003e20 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e14:	d004      	beq.n	8003e20 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a10      	ldr	r2, [pc, #64]	@ (8003e5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d10c      	bne.n	8003e3a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3714      	adds	r7, #20
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	40012c00 	.word	0x40012c00
 8003e5c:	40014000 	.word	0x40014000

08003e60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e060      	b.n	8003f3e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	041b      	lsls	r3, r3, #16
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a14      	ldr	r2, [pc, #80]	@ (8003f4c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d115      	bne.n	8003f2c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0a:	051b      	lsls	r3, r3, #20
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	40012c00 	.word	0x40012c00

08003f50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e040      	b.n	8003fe4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d106      	bne.n	8003f78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7fc fee0 	bl	8000d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2224      	movs	r2, #36	@ 0x24
 8003f7c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0201 	bic.w	r2, r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fb76 	bl	8004680 <UART_SetConfig>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d101      	bne.n	8003f9e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e022      	b.n	8003fe4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fca0 	bl	80048ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689a      	ldr	r2, [r3, #8]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f042 0201 	orr.w	r2, r2, #1
 8003fda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 fd27 	bl	8004a30 <UART_CheckIdleState>
 8003fe2:	4603      	mov	r3, r0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b08a      	sub	sp, #40	@ 0x28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004000:	2b20      	cmp	r3, #32
 8004002:	d132      	bne.n	800406a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d002      	beq.n	8004010 <HAL_UART_Receive_IT+0x24>
 800400a:	88fb      	ldrh	r3, [r7, #6]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e02b      	b.n	800406c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d018      	beq.n	800405a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	e853 3f00 	ldrex	r3, [r3]
 8004034:	613b      	str	r3, [r7, #16]
   return(result);
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800403c:	627b      	str	r3, [r7, #36]	@ 0x24
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	461a      	mov	r2, r3
 8004044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004046:	623b      	str	r3, [r7, #32]
 8004048:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404a:	69f9      	ldr	r1, [r7, #28]
 800404c:	6a3a      	ldr	r2, [r7, #32]
 800404e:	e841 2300 	strex	r3, r2, [r1]
 8004052:	61bb      	str	r3, [r7, #24]
   return(result);
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1e6      	bne.n	8004028 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800405a:	88fb      	ldrh	r3, [r7, #6]
 800405c:	461a      	mov	r2, r3
 800405e:	68b9      	ldr	r1, [r7, #8]
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 fdf5 	bl	8004c50 <UART_Start_Receive_IT>
 8004066:	4603      	mov	r3, r0
 8004068:	e000      	b.n	800406c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800406a:	2302      	movs	r3, #2
  }
}
 800406c:	4618      	mov	r0, r3
 800406e:	3728      	adds	r7, #40	@ 0x28
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b0ba      	sub	sp, #232	@ 0xe8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800409a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800409e:	f640 030f 	movw	r3, #2063	@ 0x80f
 80040a2:	4013      	ands	r3, r2
 80040a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80040a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d115      	bne.n	80040dc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80040b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040b4:	f003 0320 	and.w	r3, r3, #32
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00f      	beq.n	80040dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040c0:	f003 0320 	and.w	r3, r3, #32
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d009      	beq.n	80040dc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 82ab 	beq.w	8004628 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	4798      	blx	r3
      }
      return;
 80040da:	e2a5      	b.n	8004628 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80040dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 8117 	beq.w	8004314 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80040e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d106      	bne.n	8004100 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80040f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80040f6:	4b85      	ldr	r3, [pc, #532]	@ (800430c <HAL_UART_IRQHandler+0x298>)
 80040f8:	4013      	ands	r3, r2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 810a 	beq.w	8004314 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d011      	beq.n	8004130 <HAL_UART_IRQHandler+0xbc>
 800410c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00b      	beq.n	8004130 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2201      	movs	r2, #1
 800411e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004126:	f043 0201 	orr.w	r2, r3, #1
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d011      	beq.n	8004160 <HAL_UART_IRQHandler+0xec>
 800413c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00b      	beq.n	8004160 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2202      	movs	r2, #2
 800414e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004156:	f043 0204 	orr.w	r2, r3, #4
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	d011      	beq.n	8004190 <HAL_UART_IRQHandler+0x11c>
 800416c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00b      	beq.n	8004190 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2204      	movs	r2, #4
 800417e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004186:	f043 0202 	orr.w	r2, r3, #2
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b00      	cmp	r3, #0
 800419a:	d017      	beq.n	80041cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800419c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041a0:	f003 0320 	and.w	r3, r3, #32
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d105      	bne.n	80041b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80041a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00b      	beq.n	80041cc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2208      	movs	r2, #8
 80041ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041c2:	f043 0208 	orr.w	r2, r3, #8
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80041cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d012      	beq.n	80041fe <HAL_UART_IRQHandler+0x18a>
 80041d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00c      	beq.n	80041fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80041ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041f4:	f043 0220 	orr.w	r2, r3, #32
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 8211 	beq.w	800462c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800420a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800420e:	f003 0320 	and.w	r3, r3, #32
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00d      	beq.n	8004232 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b00      	cmp	r3, #0
 8004220:	d007      	beq.n	8004232 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004238:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004246:	2b40      	cmp	r3, #64	@ 0x40
 8004248:	d005      	beq.n	8004256 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800424a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800424e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004252:	2b00      	cmp	r3, #0
 8004254:	d04f      	beq.n	80042f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 fdc0 	bl	8004ddc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004266:	2b40      	cmp	r3, #64	@ 0x40
 8004268:	d141      	bne.n	80042ee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	3308      	adds	r3, #8
 8004270:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004274:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004278:	e853 3f00 	ldrex	r3, [r3]
 800427c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004280:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004284:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004288:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3308      	adds	r3, #8
 8004292:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004296:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800429a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80042a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80042a6:	e841 2300 	strex	r3, r2, [r1]
 80042aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80042ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1d9      	bne.n	800426a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d013      	beq.n	80042e6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042c2:	4a13      	ldr	r2, [pc, #76]	@ (8004310 <HAL_UART_IRQHandler+0x29c>)
 80042c4:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fc ffe8 	bl	80012a0 <HAL_DMA_Abort_IT>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d017      	beq.n	8004306 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80042e0:	4610      	mov	r0, r2
 80042e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e4:	e00f      	b.n	8004306 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f9b4 	bl	8004654 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ec:	e00b      	b.n	8004306 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f9b0 	bl	8004654 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f4:	e007      	b.n	8004306 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f9ac 	bl	8004654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004304:	e192      	b.n	800462c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004306:	bf00      	nop
    return;
 8004308:	e190      	b.n	800462c <HAL_UART_IRQHandler+0x5b8>
 800430a:	bf00      	nop
 800430c:	04000120 	.word	0x04000120
 8004310:	08004ea5 	.word	0x08004ea5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004318:	2b01      	cmp	r3, #1
 800431a:	f040 814b 	bne.w	80045b4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800431e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004322:	f003 0310 	and.w	r3, r3, #16
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 8144 	beq.w	80045b4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800432c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004330:	f003 0310 	and.w	r3, r3, #16
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 813d 	beq.w	80045b4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2210      	movs	r2, #16
 8004340:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800434c:	2b40      	cmp	r3, #64	@ 0x40
 800434e:	f040 80b5 	bne.w	80044bc <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800435e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 8164 	beq.w	8004630 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800436e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004372:	429a      	cmp	r2, r3
 8004374:	f080 815c 	bcs.w	8004630 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800437e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	2b20      	cmp	r3, #32
 800438a:	f000 8086 	beq.w	800449a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004396:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800439a:	e853 3f00 	ldrex	r3, [r3]
 800439e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80043a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80043a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	461a      	mov	r2, r3
 80043b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80043b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80043bc:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80043c4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80043c8:	e841 2300 	strex	r3, r2, [r1]
 80043cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80043d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1da      	bne.n	800438e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3308      	adds	r3, #8
 80043de:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043e2:	e853 3f00 	ldrex	r3, [r3]
 80043e6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80043e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043ea:	f023 0301 	bic.w	r3, r3, #1
 80043ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	3308      	adds	r3, #8
 80043f8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80043fc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004400:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004402:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004404:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004408:	e841 2300 	strex	r3, r2, [r1]
 800440c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800440e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1e1      	bne.n	80043d8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	3308      	adds	r3, #8
 800441a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800441e:	e853 3f00 	ldrex	r3, [r3]
 8004422:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004424:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004426:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800442a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	3308      	adds	r3, #8
 8004434:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004438:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800443a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800443e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004440:	e841 2300 	strex	r3, r2, [r1]
 8004444:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004446:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1e3      	bne.n	8004414 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2220      	movs	r2, #32
 8004450:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004460:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004462:	e853 3f00 	ldrex	r3, [r3]
 8004466:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004468:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800446a:	f023 0310 	bic.w	r3, r3, #16
 800446e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	461a      	mov	r2, r3
 8004478:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800447c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800447e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004480:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004482:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004484:	e841 2300 	strex	r3, r2, [r1]
 8004488:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800448a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e4      	bne.n	800445a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004494:	4618      	mov	r0, r3
 8004496:	f7fc feca 	bl	800122e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2202      	movs	r2, #2
 800449e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	4619      	mov	r1, r3
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 f8d7 	bl	8004668 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80044ba:	e0b9      	b.n	8004630 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 80ab 	beq.w	8004634 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80044de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 80a6 	beq.w	8004634 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044f0:	e853 3f00 	ldrex	r3, [r3]
 80044f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	461a      	mov	r2, r3
 8004506:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800450a:	647b      	str	r3, [r7, #68]	@ 0x44
 800450c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004510:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004512:	e841 2300 	strex	r3, r2, [r1]
 8004516:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004518:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1e4      	bne.n	80044e8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3308      	adds	r3, #8
 8004524:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004528:	e853 3f00 	ldrex	r3, [r3]
 800452c:	623b      	str	r3, [r7, #32]
   return(result);
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	f023 0301 	bic.w	r3, r3, #1
 8004534:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3308      	adds	r3, #8
 800453e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004542:	633a      	str	r2, [r7, #48]	@ 0x30
 8004544:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004546:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004548:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800454a:	e841 2300 	strex	r3, r2, [r1]
 800454e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1e3      	bne.n	800451e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2220      	movs	r2, #32
 800455a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	e853 3f00 	ldrex	r3, [r3]
 8004576:	60fb      	str	r3, [r7, #12]
   return(result);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f023 0310 	bic.w	r3, r3, #16
 800457e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	461a      	mov	r2, r3
 8004588:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800458c:	61fb      	str	r3, [r7, #28]
 800458e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004590:	69b9      	ldr	r1, [r7, #24]
 8004592:	69fa      	ldr	r2, [r7, #28]
 8004594:	e841 2300 	strex	r3, r2, [r1]
 8004598:	617b      	str	r3, [r7, #20]
   return(result);
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1e4      	bne.n	800456a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045aa:	4619      	mov	r1, r3
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f85b 	bl	8004668 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045b2:	e03f      	b.n	8004634 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80045b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00e      	beq.n	80045de <HAL_UART_IRQHandler+0x56a>
 80045c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d008      	beq.n	80045de <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80045d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fe4c 	bl	8005274 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045dc:	e02d      	b.n	800463a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80045de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00e      	beq.n	8004608 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80045ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d008      	beq.n	8004608 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d01c      	beq.n	8004638 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	4798      	blx	r3
    }
    return;
 8004606:	e017      	b.n	8004638 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800460c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004610:	2b00      	cmp	r3, #0
 8004612:	d012      	beq.n	800463a <HAL_UART_IRQHandler+0x5c6>
 8004614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00c      	beq.n	800463a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 fc55 	bl	8004ed0 <UART_EndTransmit_IT>
    return;
 8004626:	e008      	b.n	800463a <HAL_UART_IRQHandler+0x5c6>
      return;
 8004628:	bf00      	nop
 800462a:	e006      	b.n	800463a <HAL_UART_IRQHandler+0x5c6>
    return;
 800462c:	bf00      	nop
 800462e:	e004      	b.n	800463a <HAL_UART_IRQHandler+0x5c6>
      return;
 8004630:	bf00      	nop
 8004632:	e002      	b.n	800463a <HAL_UART_IRQHandler+0x5c6>
      return;
 8004634:	bf00      	nop
 8004636:	e000      	b.n	800463a <HAL_UART_IRQHandler+0x5c6>
    return;
 8004638:	bf00      	nop
  }

}
 800463a:	37e8      	adds	r7, #232	@ 0xe8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	460b      	mov	r3, r1
 8004672:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b088      	sub	sp, #32
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004688:	2300      	movs	r3, #0
 800468a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	431a      	orrs	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	4b8a      	ldr	r3, [pc, #552]	@ (80048d4 <UART_SetConfig+0x254>)
 80046ac:	4013      	ands	r3, r2
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6812      	ldr	r2, [r2, #0]
 80046b2:	6979      	ldr	r1, [r7, #20]
 80046b4:	430b      	orrs	r3, r1
 80046b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68da      	ldr	r2, [r3, #12]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	4313      	orrs	r3, r2
 80046dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a78      	ldr	r2, [pc, #480]	@ (80048d8 <UART_SetConfig+0x258>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d120      	bne.n	800473e <UART_SetConfig+0xbe>
 80046fc:	4b77      	ldr	r3, [pc, #476]	@ (80048dc <UART_SetConfig+0x25c>)
 80046fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004700:	f003 0303 	and.w	r3, r3, #3
 8004704:	2b03      	cmp	r3, #3
 8004706:	d817      	bhi.n	8004738 <UART_SetConfig+0xb8>
 8004708:	a201      	add	r2, pc, #4	@ (adr r2, 8004710 <UART_SetConfig+0x90>)
 800470a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470e:	bf00      	nop
 8004710:	08004721 	.word	0x08004721
 8004714:	0800472d 	.word	0x0800472d
 8004718:	08004733 	.word	0x08004733
 800471c:	08004727 	.word	0x08004727
 8004720:	2300      	movs	r3, #0
 8004722:	77fb      	strb	r3, [r7, #31]
 8004724:	e01d      	b.n	8004762 <UART_SetConfig+0xe2>
 8004726:	2302      	movs	r3, #2
 8004728:	77fb      	strb	r3, [r7, #31]
 800472a:	e01a      	b.n	8004762 <UART_SetConfig+0xe2>
 800472c:	2304      	movs	r3, #4
 800472e:	77fb      	strb	r3, [r7, #31]
 8004730:	e017      	b.n	8004762 <UART_SetConfig+0xe2>
 8004732:	2308      	movs	r3, #8
 8004734:	77fb      	strb	r3, [r7, #31]
 8004736:	e014      	b.n	8004762 <UART_SetConfig+0xe2>
 8004738:	2310      	movs	r3, #16
 800473a:	77fb      	strb	r3, [r7, #31]
 800473c:	e011      	b.n	8004762 <UART_SetConfig+0xe2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a67      	ldr	r2, [pc, #412]	@ (80048e0 <UART_SetConfig+0x260>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d102      	bne.n	800474e <UART_SetConfig+0xce>
 8004748:	2300      	movs	r3, #0
 800474a:	77fb      	strb	r3, [r7, #31]
 800474c:	e009      	b.n	8004762 <UART_SetConfig+0xe2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a64      	ldr	r2, [pc, #400]	@ (80048e4 <UART_SetConfig+0x264>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d102      	bne.n	800475e <UART_SetConfig+0xde>
 8004758:	2300      	movs	r3, #0
 800475a:	77fb      	strb	r3, [r7, #31]
 800475c:	e001      	b.n	8004762 <UART_SetConfig+0xe2>
 800475e:	2310      	movs	r3, #16
 8004760:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800476a:	d15a      	bne.n	8004822 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800476c:	7ffb      	ldrb	r3, [r7, #31]
 800476e:	2b08      	cmp	r3, #8
 8004770:	d827      	bhi.n	80047c2 <UART_SetConfig+0x142>
 8004772:	a201      	add	r2, pc, #4	@ (adr r2, 8004778 <UART_SetConfig+0xf8>)
 8004774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004778:	0800479d 	.word	0x0800479d
 800477c:	080047a5 	.word	0x080047a5
 8004780:	080047ad 	.word	0x080047ad
 8004784:	080047c3 	.word	0x080047c3
 8004788:	080047b3 	.word	0x080047b3
 800478c:	080047c3 	.word	0x080047c3
 8004790:	080047c3 	.word	0x080047c3
 8004794:	080047c3 	.word	0x080047c3
 8004798:	080047bb 	.word	0x080047bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800479c:	f7fe f990 	bl	8002ac0 <HAL_RCC_GetPCLK1Freq>
 80047a0:	61b8      	str	r0, [r7, #24]
        break;
 80047a2:	e013      	b.n	80047cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047a4:	f7fe f9ae 	bl	8002b04 <HAL_RCC_GetPCLK2Freq>
 80047a8:	61b8      	str	r0, [r7, #24]
        break;
 80047aa:	e00f      	b.n	80047cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047ac:	4b4e      	ldr	r3, [pc, #312]	@ (80048e8 <UART_SetConfig+0x268>)
 80047ae:	61bb      	str	r3, [r7, #24]
        break;
 80047b0:	e00c      	b.n	80047cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047b2:	f7fe f90f 	bl	80029d4 <HAL_RCC_GetSysClockFreq>
 80047b6:	61b8      	str	r0, [r7, #24]
        break;
 80047b8:	e008      	b.n	80047cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047be:	61bb      	str	r3, [r7, #24]
        break;
 80047c0:	e004      	b.n	80047cc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	77bb      	strb	r3, [r7, #30]
        break;
 80047ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d074      	beq.n	80048bc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	005a      	lsls	r2, r3, #1
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	085b      	lsrs	r3, r3, #1
 80047dc:	441a      	add	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	2b0f      	cmp	r3, #15
 80047ec:	d916      	bls.n	800481c <UART_SetConfig+0x19c>
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047f4:	d212      	bcs.n	800481c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	f023 030f 	bic.w	r3, r3, #15
 80047fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	085b      	lsrs	r3, r3, #1
 8004804:	b29b      	uxth	r3, r3
 8004806:	f003 0307 	and.w	r3, r3, #7
 800480a:	b29a      	uxth	r2, r3
 800480c:	89fb      	ldrh	r3, [r7, #14]
 800480e:	4313      	orrs	r3, r2
 8004810:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	89fa      	ldrh	r2, [r7, #14]
 8004818:	60da      	str	r2, [r3, #12]
 800481a:	e04f      	b.n	80048bc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	77bb      	strb	r3, [r7, #30]
 8004820:	e04c      	b.n	80048bc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004822:	7ffb      	ldrb	r3, [r7, #31]
 8004824:	2b08      	cmp	r3, #8
 8004826:	d828      	bhi.n	800487a <UART_SetConfig+0x1fa>
 8004828:	a201      	add	r2, pc, #4	@ (adr r2, 8004830 <UART_SetConfig+0x1b0>)
 800482a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482e:	bf00      	nop
 8004830:	08004855 	.word	0x08004855
 8004834:	0800485d 	.word	0x0800485d
 8004838:	08004865 	.word	0x08004865
 800483c:	0800487b 	.word	0x0800487b
 8004840:	0800486b 	.word	0x0800486b
 8004844:	0800487b 	.word	0x0800487b
 8004848:	0800487b 	.word	0x0800487b
 800484c:	0800487b 	.word	0x0800487b
 8004850:	08004873 	.word	0x08004873
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004854:	f7fe f934 	bl	8002ac0 <HAL_RCC_GetPCLK1Freq>
 8004858:	61b8      	str	r0, [r7, #24]
        break;
 800485a:	e013      	b.n	8004884 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800485c:	f7fe f952 	bl	8002b04 <HAL_RCC_GetPCLK2Freq>
 8004860:	61b8      	str	r0, [r7, #24]
        break;
 8004862:	e00f      	b.n	8004884 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004864:	4b20      	ldr	r3, [pc, #128]	@ (80048e8 <UART_SetConfig+0x268>)
 8004866:	61bb      	str	r3, [r7, #24]
        break;
 8004868:	e00c      	b.n	8004884 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800486a:	f7fe f8b3 	bl	80029d4 <HAL_RCC_GetSysClockFreq>
 800486e:	61b8      	str	r0, [r7, #24]
        break;
 8004870:	e008      	b.n	8004884 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004872:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004876:	61bb      	str	r3, [r7, #24]
        break;
 8004878:	e004      	b.n	8004884 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800487a:	2300      	movs	r3, #0
 800487c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	77bb      	strb	r3, [r7, #30]
        break;
 8004882:	bf00      	nop
    }

    if (pclk != 0U)
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d018      	beq.n	80048bc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	085a      	lsrs	r2, r3, #1
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	441a      	add	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	fbb2 f3f3 	udiv	r3, r2, r3
 800489c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	2b0f      	cmp	r3, #15
 80048a2:	d909      	bls.n	80048b8 <UART_SetConfig+0x238>
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048aa:	d205      	bcs.n	80048b8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	60da      	str	r2, [r3, #12]
 80048b6:	e001      	b.n	80048bc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80048c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3720      	adds	r7, #32
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	efff69f3 	.word	0xefff69f3
 80048d8:	40013800 	.word	0x40013800
 80048dc:	40021000 	.word	0x40021000
 80048e0:	40004400 	.word	0x40004400
 80048e4:	40004800 	.word	0x40004800
 80048e8:	007a1200 	.word	0x007a1200

080048ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00a      	beq.n	8004916 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00a      	beq.n	800495a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00a      	beq.n	800497c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	430a      	orrs	r2, r1
 800497a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004980:	f003 0310 	and.w	r3, r3, #16
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00a      	beq.n	800499e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a2:	f003 0320 	and.w	r3, r3, #32
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00a      	beq.n	80049c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d01a      	beq.n	8004a02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049ea:	d10a      	bne.n	8004a02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	605a      	str	r2, [r3, #4]
  }
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b098      	sub	sp, #96	@ 0x60
 8004a34:	af02      	add	r7, sp, #8
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a40:	f7fc fad8 	bl	8000ff4 <HAL_GetTick>
 8004a44:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0308 	and.w	r3, r3, #8
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d12e      	bne.n	8004ab2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f88c 	bl	8004b80 <UART_WaitOnFlagUntilTimeout>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d021      	beq.n	8004ab2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a76:	e853 3f00 	ldrex	r3, [r3]
 8004a7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a82:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	461a      	mov	r2, r3
 8004a8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a8e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a94:	e841 2300 	strex	r3, r2, [r1]
 8004a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1e6      	bne.n	8004a6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e062      	b.n	8004b78 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b04      	cmp	r3, #4
 8004abe:	d149      	bne.n	8004b54 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ac0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f856 	bl	8004b80 <UART_WaitOnFlagUntilTimeout>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d03c      	beq.n	8004b54 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae2:	e853 3f00 	ldrex	r3, [r3]
 8004ae6:	623b      	str	r3, [r7, #32]
   return(result);
 8004ae8:	6a3b      	ldr	r3, [r7, #32]
 8004aea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004aee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	461a      	mov	r2, r3
 8004af6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004af8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004afa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004afe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b00:	e841 2300 	strex	r3, r2, [r1]
 8004b04:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1e6      	bne.n	8004ada <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	3308      	adds	r3, #8
 8004b12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	e853 3f00 	ldrex	r3, [r3]
 8004b1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f023 0301 	bic.w	r3, r3, #1
 8004b22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	3308      	adds	r3, #8
 8004b2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b2c:	61fa      	str	r2, [r7, #28]
 8004b2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b30:	69b9      	ldr	r1, [r7, #24]
 8004b32:	69fa      	ldr	r2, [r7, #28]
 8004b34:	e841 2300 	strex	r3, r2, [r1]
 8004b38:	617b      	str	r3, [r7, #20]
   return(result);
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1e5      	bne.n	8004b0c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2220      	movs	r2, #32
 8004b44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e011      	b.n	8004b78 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2220      	movs	r2, #32
 8004b58:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3758      	adds	r7, #88	@ 0x58
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	603b      	str	r3, [r7, #0]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b90:	e049      	b.n	8004c26 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b98:	d045      	beq.n	8004c26 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b9a:	f7fc fa2b 	bl	8000ff4 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d302      	bcc.n	8004bb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e048      	b.n	8004c46 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0304 	and.w	r3, r3, #4
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d031      	beq.n	8004c26 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69db      	ldr	r3, [r3, #28]
 8004bc8:	f003 0308 	and.w	r3, r3, #8
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d110      	bne.n	8004bf2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2208      	movs	r2, #8
 8004bd6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 f8ff 	bl	8004ddc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2208      	movs	r2, #8
 8004be2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e029      	b.n	8004c46 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c00:	d111      	bne.n	8004c26 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 f8e5 	bl	8004ddc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2220      	movs	r2, #32
 8004c16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e00f      	b.n	8004c46 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	69da      	ldr	r2, [r3, #28]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	bf0c      	ite	eq
 8004c36:	2301      	moveq	r3, #1
 8004c38:	2300      	movne	r3, #0
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	79fb      	ldrb	r3, [r7, #7]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d0a6      	beq.n	8004b92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
	...

08004c50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b097      	sub	sp, #92	@ 0x5c
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	88fa      	ldrh	r2, [r7, #6]
 8004c68:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	88fa      	ldrh	r2, [r7, #6]
 8004c70:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c82:	d10e      	bne.n	8004ca2 <UART_Start_Receive_IT+0x52>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d105      	bne.n	8004c98 <UART_Start_Receive_IT+0x48>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004c92:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004c96:	e02d      	b.n	8004cf4 <UART_Start_Receive_IT+0xa4>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	22ff      	movs	r2, #255	@ 0xff
 8004c9c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004ca0:	e028      	b.n	8004cf4 <UART_Start_Receive_IT+0xa4>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10d      	bne.n	8004cc6 <UART_Start_Receive_IT+0x76>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d104      	bne.n	8004cbc <UART_Start_Receive_IT+0x6c>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	22ff      	movs	r2, #255	@ 0xff
 8004cb6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004cba:	e01b      	b.n	8004cf4 <UART_Start_Receive_IT+0xa4>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	227f      	movs	r2, #127	@ 0x7f
 8004cc0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004cc4:	e016      	b.n	8004cf4 <UART_Start_Receive_IT+0xa4>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cce:	d10d      	bne.n	8004cec <UART_Start_Receive_IT+0x9c>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d104      	bne.n	8004ce2 <UART_Start_Receive_IT+0x92>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	227f      	movs	r2, #127	@ 0x7f
 8004cdc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004ce0:	e008      	b.n	8004cf4 <UART_Start_Receive_IT+0xa4>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	223f      	movs	r2, #63	@ 0x3f
 8004ce6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004cea:	e003      	b.n	8004cf4 <UART_Start_Receive_IT+0xa4>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2222      	movs	r2, #34	@ 0x22
 8004d00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	3308      	adds	r3, #8
 8004d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d0e:	e853 3f00 	ldrex	r3, [r3]
 8004d12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d16:	f043 0301 	orr.w	r3, r3, #1
 8004d1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	3308      	adds	r3, #8
 8004d22:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004d24:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004d26:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d28:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004d2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d2c:	e841 2300 	strex	r3, r2, [r1]
 8004d30:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004d32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1e5      	bne.n	8004d04 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d40:	d107      	bne.n	8004d52 <UART_Start_Receive_IT+0x102>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d103      	bne.n	8004d52 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	4a21      	ldr	r2, [pc, #132]	@ (8004dd4 <UART_Start_Receive_IT+0x184>)
 8004d4e:	669a      	str	r2, [r3, #104]	@ 0x68
 8004d50:	e002      	b.n	8004d58 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	4a20      	ldr	r2, [pc, #128]	@ (8004dd8 <UART_Start_Receive_IT+0x188>)
 8004d56:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d019      	beq.n	8004d94 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d68:	e853 3f00 	ldrex	r3, [r3]
 8004d6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d70:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004d74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d80:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d82:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004d84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d86:	e841 2300 	strex	r3, r2, [r1]
 8004d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1e6      	bne.n	8004d60 <UART_Start_Receive_IT+0x110>
 8004d92:	e018      	b.n	8004dc6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	e853 3f00 	ldrex	r3, [r3]
 8004da0:	613b      	str	r3, [r7, #16]
   return(result);
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f043 0320 	orr.w	r3, r3, #32
 8004da8:	653b      	str	r3, [r7, #80]	@ 0x50
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	461a      	mov	r2, r3
 8004db0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004db2:	623b      	str	r3, [r7, #32]
 8004db4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db6:	69f9      	ldr	r1, [r7, #28]
 8004db8:	6a3a      	ldr	r2, [r7, #32]
 8004dba:	e841 2300 	strex	r3, r2, [r1]
 8004dbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1e6      	bne.n	8004d94 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	375c      	adds	r7, #92	@ 0x5c
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	080050cd 	.word	0x080050cd
 8004dd8:	08004f25 	.word	0x08004f25

08004ddc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b095      	sub	sp, #84	@ 0x54
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dec:	e853 3f00 	ldrex	r3, [r3]
 8004df0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004df8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e02:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e04:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e0a:	e841 2300 	strex	r3, r2, [r1]
 8004e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1e6      	bne.n	8004de4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3308      	adds	r3, #8
 8004e1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	f023 0301 	bic.w	r3, r3, #1
 8004e2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	3308      	adds	r3, #8
 8004e34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e3e:	e841 2300 	strex	r3, r2, [r1]
 8004e42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1e5      	bne.n	8004e16 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d118      	bne.n	8004e84 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	e853 3f00 	ldrex	r3, [r3]
 8004e5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f023 0310 	bic.w	r3, r3, #16
 8004e66:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e70:	61bb      	str	r3, [r7, #24]
 8004e72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e74:	6979      	ldr	r1, [r7, #20]
 8004e76:	69ba      	ldr	r2, [r7, #24]
 8004e78:	e841 2300 	strex	r3, r2, [r1]
 8004e7c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1e6      	bne.n	8004e52 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2220      	movs	r2, #32
 8004e88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e98:	bf00      	nop
 8004e9a:	3754      	adds	r7, #84	@ 0x54
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f7ff fbc6 	bl	8004654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ec8:	bf00      	nop
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b088      	sub	sp, #32
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	e853 3f00 	ldrex	r3, [r3]
 8004ee4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004eec:	61fb      	str	r3, [r7, #28]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	61bb      	str	r3, [r7, #24]
 8004ef8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efa:	6979      	ldr	r1, [r7, #20]
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	e841 2300 	strex	r3, r2, [r1]
 8004f02:	613b      	str	r3, [r7, #16]
   return(result);
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1e6      	bne.n	8004ed8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7ff fb92 	bl	8004640 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f1c:	bf00      	nop
 8004f1e:	3720      	adds	r7, #32
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b09c      	sub	sp, #112	@ 0x70
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004f32:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f3c:	2b22      	cmp	r3, #34	@ 0x22
 8004f3e:	f040 80b9 	bne.w	80050b4 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004f48:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004f4c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004f50:	b2d9      	uxtb	r1, r3
 8004f52:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f5c:	400a      	ands	r2, r1
 8004f5e:	b2d2      	uxtb	r2, r2
 8004f60:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f66:	1c5a      	adds	r2, r3, #1
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	3b01      	subs	r3, #1
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f040 809c 	bne.w	80050c4 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f94:	e853 3f00 	ldrex	r3, [r3]
 8004f98:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004f9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fa0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004faa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004fac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004fb0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004fb2:	e841 2300 	strex	r3, r2, [r1]
 8004fb6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004fb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1e6      	bne.n	8004f8c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3308      	adds	r3, #8
 8004fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc8:	e853 3f00 	ldrex	r3, [r3]
 8004fcc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fd0:	f023 0301 	bic.w	r3, r3, #1
 8004fd4:	667b      	str	r3, [r7, #100]	@ 0x64
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	3308      	adds	r3, #8
 8004fdc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004fde:	647a      	str	r2, [r7, #68]	@ 0x44
 8004fe0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004fe4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fe6:	e841 2300 	strex	r3, r2, [r1]
 8004fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004fec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1e5      	bne.n	8004fbe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d018      	beq.n	8005046 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501c:	e853 3f00 	ldrex	r3, [r3]
 8005020:	623b      	str	r3, [r7, #32]
   return(result);
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005028:	663b      	str	r3, [r7, #96]	@ 0x60
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	461a      	mov	r2, r3
 8005030:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005032:	633b      	str	r3, [r7, #48]	@ 0x30
 8005034:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005036:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005038:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800503a:	e841 2300 	strex	r3, r2, [r1]
 800503e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1e6      	bne.n	8005014 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800504a:	2b01      	cmp	r3, #1
 800504c:	d12e      	bne.n	80050ac <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	e853 3f00 	ldrex	r3, [r3]
 8005060:	60fb      	str	r3, [r7, #12]
   return(result);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f023 0310 	bic.w	r3, r3, #16
 8005068:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	461a      	mov	r2, r3
 8005070:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005072:	61fb      	str	r3, [r7, #28]
 8005074:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005076:	69b9      	ldr	r1, [r7, #24]
 8005078:	69fa      	ldr	r2, [r7, #28]
 800507a:	e841 2300 	strex	r3, r2, [r1]
 800507e:	617b      	str	r3, [r7, #20]
   return(result);
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1e6      	bne.n	8005054 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	69db      	ldr	r3, [r3, #28]
 800508c:	f003 0310 	and.w	r3, r3, #16
 8005090:	2b10      	cmp	r3, #16
 8005092:	d103      	bne.n	800509c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2210      	movs	r2, #16
 800509a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80050a2:	4619      	mov	r1, r3
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7ff fadf 	bl	8004668 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80050aa:	e00b      	b.n	80050c4 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7fb fc37 	bl	8000920 <HAL_UART_RxCpltCallback>
}
 80050b2:	e007      	b.n	80050c4 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	699a      	ldr	r2, [r3, #24]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0208 	orr.w	r2, r2, #8
 80050c2:	619a      	str	r2, [r3, #24]
}
 80050c4:	bf00      	nop
 80050c6:	3770      	adds	r7, #112	@ 0x70
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b09c      	sub	sp, #112	@ 0x70
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80050da:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050e4:	2b22      	cmp	r3, #34	@ 0x22
 80050e6:	f040 80b9 	bne.w	800525c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80050f0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050f8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80050fa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80050fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005102:	4013      	ands	r3, r2
 8005104:	b29a      	uxth	r2, r3
 8005106:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005108:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800510e:	1c9a      	adds	r2, r3, #2
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800511a:	b29b      	uxth	r3, r3
 800511c:	3b01      	subs	r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800512c:	b29b      	uxth	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	f040 809c 	bne.w	800526c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800513c:	e853 3f00 	ldrex	r3, [r3]
 8005140:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005142:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005144:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005148:	667b      	str	r3, [r7, #100]	@ 0x64
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	461a      	mov	r2, r3
 8005150:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005152:	657b      	str	r3, [r7, #84]	@ 0x54
 8005154:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005156:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005158:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800515a:	e841 2300 	strex	r3, r2, [r1]
 800515e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005160:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1e6      	bne.n	8005134 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	3308      	adds	r3, #8
 800516c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005170:	e853 3f00 	ldrex	r3, [r3]
 8005174:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005178:	f023 0301 	bic.w	r3, r3, #1
 800517c:	663b      	str	r3, [r7, #96]	@ 0x60
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3308      	adds	r3, #8
 8005184:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005186:	643a      	str	r2, [r7, #64]	@ 0x40
 8005188:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800518c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800518e:	e841 2300 	strex	r3, r2, [r1]
 8005192:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1e5      	bne.n	8005166 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2220      	movs	r2, #32
 800519e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d018      	beq.n	80051ee <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	e853 3f00 	ldrex	r3, [r3]
 80051c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80051d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	461a      	mov	r2, r3
 80051d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051dc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051e2:	e841 2300 	strex	r3, r2, [r1]
 80051e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1e6      	bne.n	80051bc <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d12e      	bne.n	8005254 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	e853 3f00 	ldrex	r3, [r3]
 8005208:	60bb      	str	r3, [r7, #8]
   return(result);
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	f023 0310 	bic.w	r3, r3, #16
 8005210:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	461a      	mov	r2, r3
 8005218:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800521a:	61bb      	str	r3, [r7, #24]
 800521c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521e:	6979      	ldr	r1, [r7, #20]
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	e841 2300 	strex	r3, r2, [r1]
 8005226:	613b      	str	r3, [r7, #16]
   return(result);
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1e6      	bne.n	80051fc <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	f003 0310 	and.w	r3, r3, #16
 8005238:	2b10      	cmp	r3, #16
 800523a:	d103      	bne.n	8005244 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2210      	movs	r2, #16
 8005242:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800524a:	4619      	mov	r1, r3
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff fa0b 	bl	8004668 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005252:	e00b      	b.n	800526c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7fb fb63 	bl	8000920 <HAL_UART_RxCpltCallback>
}
 800525a:	e007      	b.n	800526c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	699a      	ldr	r2, [r3, #24]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0208 	orr.w	r2, r2, #8
 800526a:	619a      	str	r2, [r3, #24]
}
 800526c:	bf00      	nop
 800526e:	3770      	adds	r7, #112	@ 0x70
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <memset>:
 8005288:	4402      	add	r2, r0
 800528a:	4603      	mov	r3, r0
 800528c:	4293      	cmp	r3, r2
 800528e:	d100      	bne.n	8005292 <memset+0xa>
 8005290:	4770      	bx	lr
 8005292:	f803 1b01 	strb.w	r1, [r3], #1
 8005296:	e7f9      	b.n	800528c <memset+0x4>

08005298 <__libc_init_array>:
 8005298:	b570      	push	{r4, r5, r6, lr}
 800529a:	4d0d      	ldr	r5, [pc, #52]	@ (80052d0 <__libc_init_array+0x38>)
 800529c:	4c0d      	ldr	r4, [pc, #52]	@ (80052d4 <__libc_init_array+0x3c>)
 800529e:	1b64      	subs	r4, r4, r5
 80052a0:	10a4      	asrs	r4, r4, #2
 80052a2:	2600      	movs	r6, #0
 80052a4:	42a6      	cmp	r6, r4
 80052a6:	d109      	bne.n	80052bc <__libc_init_array+0x24>
 80052a8:	4d0b      	ldr	r5, [pc, #44]	@ (80052d8 <__libc_init_array+0x40>)
 80052aa:	4c0c      	ldr	r4, [pc, #48]	@ (80052dc <__libc_init_array+0x44>)
 80052ac:	f000 f818 	bl	80052e0 <_init>
 80052b0:	1b64      	subs	r4, r4, r5
 80052b2:	10a4      	asrs	r4, r4, #2
 80052b4:	2600      	movs	r6, #0
 80052b6:	42a6      	cmp	r6, r4
 80052b8:	d105      	bne.n	80052c6 <__libc_init_array+0x2e>
 80052ba:	bd70      	pop	{r4, r5, r6, pc}
 80052bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80052c0:	4798      	blx	r3
 80052c2:	3601      	adds	r6, #1
 80052c4:	e7ee      	b.n	80052a4 <__libc_init_array+0xc>
 80052c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ca:	4798      	blx	r3
 80052cc:	3601      	adds	r6, #1
 80052ce:	e7f2      	b.n	80052b6 <__libc_init_array+0x1e>
 80052d0:	08005330 	.word	0x08005330
 80052d4:	08005330 	.word	0x08005330
 80052d8:	08005330 	.word	0x08005330
 80052dc:	08005334 	.word	0x08005334

080052e0 <_init>:
 80052e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e2:	bf00      	nop
 80052e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052e6:	bc08      	pop	{r3}
 80052e8:	469e      	mov	lr, r3
 80052ea:	4770      	bx	lr

080052ec <_fini>:
 80052ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ee:	bf00      	nop
 80052f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052f2:	bc08      	pop	{r3}
 80052f4:	469e      	mov	lr, r3
 80052f6:	4770      	bx	lr
